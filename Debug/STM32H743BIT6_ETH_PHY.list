
STM32H743BIT6_ETH_PHY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000160a8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004fd4  08016348  08016348  00017348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b31c  0801b31c  0001c31c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b324  0801b324  0001c324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801b328  0801b328  0001c328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000e4  24000000  0801b32c  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000349c  240000e4  0801b410  0001d0e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24003580  0801b410  0001d580  2**0
                  ALLOC
  9 .lwip_sec     00044b83  30000000  30000000  0001e000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0001d0e4  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002cd66  00000000  00000000  0001d112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006835  00000000  00000000  00049e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001f50  00000000  00000000  000506b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000018ef  00000000  00000000  00052600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000463a5  00000000  00000000  00053eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003559a  00000000  00000000  0009a294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017e044  00000000  00000000  000cf82e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0024d872  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008b90  00000000  00000000  0024d8b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000052  00000000  00000000  00256448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000e4 	.word	0x240000e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016330 	.word	0x08016330

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000e8 	.word	0x240000e8
 80002dc:	08016330 	.word	0x08016330

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000686:	f000 f9b1 	bl	80009ec <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800068a:	4b3d      	ldr	r3, [pc, #244]	@ (8000780 <main+0x100>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000692:	2b00      	cmp	r3, #0
 8000694:	d11b      	bne.n	80006ce <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000696:	f3bf 8f4f 	dsb	sy
}
 800069a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800069c:	f3bf 8f6f 	isb	sy
}
 80006a0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006a2:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <main+0x100>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006aa:	f3bf 8f4f 	dsb	sy
}
 80006ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006b0:	f3bf 8f6f 	isb	sy
}
 80006b4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006b6:	4b32      	ldr	r3, [pc, #200]	@ (8000780 <main+0x100>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	4a31      	ldr	r2, [pc, #196]	@ (8000780 <main+0x100>)
 80006bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006c2:	f3bf 8f4f 	dsb	sy
}
 80006c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006c8:	f3bf 8f6f 	isb	sy
}
 80006cc:	e000      	b.n	80006d0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006ce:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006d0:	4b2b      	ldr	r3, [pc, #172]	@ (8000780 <main+0x100>)
 80006d2:	695b      	ldr	r3, [r3, #20]
 80006d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d138      	bne.n	800074e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006dc:	4b28      	ldr	r3, [pc, #160]	@ (8000780 <main+0x100>)
 80006de:	2200      	movs	r2, #0
 80006e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006e4:	f3bf 8f4f 	dsb	sy
}
 80006e8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006ea:	4b25      	ldr	r3, [pc, #148]	@ (8000780 <main+0x100>)
 80006ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80006f0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	0b5b      	lsrs	r3, r3, #13
 80006f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80006fa:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	08db      	lsrs	r3, r3, #3
 8000700:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000704:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	015a      	lsls	r2, r3, #5
 800070a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800070e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000714:	491a      	ldr	r1, [pc, #104]	@ (8000780 <main+0x100>)
 8000716:	4313      	orrs	r3, r2
 8000718:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	1e5a      	subs	r2, r3, #1
 8000720:	607a      	str	r2, [r7, #4]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d1ef      	bne.n	8000706 <main+0x86>
    } while(sets-- != 0U);
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	1e5a      	subs	r2, r3, #1
 800072a:	60ba      	str	r2, [r7, #8]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d1e5      	bne.n	80006fc <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000730:	f3bf 8f4f 	dsb	sy
}
 8000734:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000736:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <main+0x100>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	4a11      	ldr	r2, [pc, #68]	@ (8000780 <main+0x100>)
 800073c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000740:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000742:	f3bf 8f4f 	dsb	sy
}
 8000746:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000748:	f3bf 8f6f 	isb	sy
}
 800074c:	e000      	b.n	8000750 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800074e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000750:	f000 feea 	bl	8001528 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(3500);
 8000754:	f640 50ac 	movw	r0, #3500	@ 0xdac
 8000758:	f000 ff42 	bl	80015e0 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075c:	f000 f812 	bl	8000784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000760:	f000 f8d8 	bl	8000914 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000764:	f000 f88a 	bl	800087c <MX_USART1_UART_Init>
  MX_LWIP_Init();
 8000768:	f008 facc 	bl	8008d04 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  tcp_server_init();
 800076c:	f000 fcfa 	bl	8001164 <tcp_server_init>
//	  ethernetif_input(&gnetif);
//	  sys_check_timeouts();
//
//	  printf("Hello World \n\r");
//	  HAL_Delay(500);
	  MX_LWIP_Process();
 8000770:	f008 fc08 	bl	8008f84 <MX_LWIP_Process>
	  HAL_Delay(2);
 8000774:	2002      	movs	r0, #2
 8000776:	f000 ff33 	bl	80015e0 <HAL_Delay>
	  MX_LWIP_Process();
 800077a:	bf00      	nop
 800077c:	e7f8      	b.n	8000770 <main+0xf0>
 800077e:	bf00      	nop
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b09c      	sub	sp, #112	@ 0x70
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800078e:	224c      	movs	r2, #76	@ 0x4c
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f014 ff88 	bl	80156a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2220      	movs	r2, #32
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f014 ff82 	bl	80156a8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007a4:	2002      	movs	r0, #2
 80007a6:	f003 fbb1 	bl	8003f0c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	4b31      	ldr	r3, [pc, #196]	@ (8000874 <SystemClock_Config+0xf0>)
 80007b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007b2:	4a30      	ldr	r2, [pc, #192]	@ (8000874 <SystemClock_Config+0xf0>)
 80007b4:	f023 0301 	bic.w	r3, r3, #1
 80007b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80007ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000874 <SystemClock_Config+0xf0>)
 80007bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000878 <SystemClock_Config+0xf4>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a2b      	ldr	r2, [pc, #172]	@ (8000878 <SystemClock_Config+0xf4>)
 80007ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b29      	ldr	r3, [pc, #164]	@ (8000878 <SystemClock_Config+0xf4>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007dc:	bf00      	nop
 80007de:	4b26      	ldr	r3, [pc, #152]	@ (8000878 <SystemClock_Config+0xf4>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007ea:	d1f8      	bne.n	80007de <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ec:	2301      	movs	r3, #1
 80007ee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f6:	2302      	movs	r3, #2
 80007f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fa:	2302      	movs	r3, #2
 80007fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80007fe:	2302      	movs	r3, #2
 8000800:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 93;
 8000802:	235d      	movs	r3, #93	@ 0x5d
 8000804:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000806:	2302      	movs	r3, #2
 8000808:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800080a:	2302      	movs	r3, #2
 800080c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800080e:	2302      	movs	r3, #2
 8000810:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000812:	230c      	movs	r3, #12
 8000814:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000816:	2300      	movs	r3, #0
 8000818:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 800081a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800081e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000820:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000824:	4618      	mov	r0, r3
 8000826:	f003 fbab 	bl	8003f80 <HAL_RCC_OscConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000830:	f000 f940 	bl	8000ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000834:	233f      	movs	r3, #63	@ 0x3f
 8000836:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000838:	2303      	movs	r3, #3
 800083a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000840:	2308      	movs	r3, #8
 8000842:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000844:	2340      	movs	r3, #64	@ 0x40
 8000846:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000848:	2340      	movs	r3, #64	@ 0x40
 800084a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800084c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000850:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000852:	2340      	movs	r3, #64	@ 0x40
 8000854:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2102      	movs	r1, #2
 800085a:	4618      	mov	r0, r3
 800085c:	f003 ffea 	bl	8004834 <HAL_RCC_ClockConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000866:	f000 f925 	bl	8000ab4 <Error_Handler>
  }
}
 800086a:	bf00      	nop
 800086c:	3770      	adds	r7, #112	@ 0x70
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	58000400 	.word	0x58000400
 8000878:	58024800 	.word	0x58024800

0800087c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000880:	4b22      	ldr	r3, [pc, #136]	@ (800090c <MX_USART1_UART_Init+0x90>)
 8000882:	4a23      	ldr	r2, [pc, #140]	@ (8000910 <MX_USART1_UART_Init+0x94>)
 8000884:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000886:	4b21      	ldr	r3, [pc, #132]	@ (800090c <MX_USART1_UART_Init+0x90>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b1f      	ldr	r3, [pc, #124]	@ (800090c <MX_USART1_UART_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b1d      	ldr	r3, [pc, #116]	@ (800090c <MX_USART1_UART_Init+0x90>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800089a:	4b1c      	ldr	r3, [pc, #112]	@ (800090c <MX_USART1_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b1a      	ldr	r3, [pc, #104]	@ (800090c <MX_USART1_UART_Init+0x90>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b19      	ldr	r3, [pc, #100]	@ (800090c <MX_USART1_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b17      	ldr	r3, [pc, #92]	@ (800090c <MX_USART1_UART_Init+0x90>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b2:	4b16      	ldr	r3, [pc, #88]	@ (800090c <MX_USART1_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008b8:	4b14      	ldr	r3, [pc, #80]	@ (800090c <MX_USART1_UART_Init+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008be:	4b13      	ldr	r3, [pc, #76]	@ (800090c <MX_USART1_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c4:	4811      	ldr	r0, [pc, #68]	@ (800090c <MX_USART1_UART_Init+0x90>)
 80008c6:	f006 fc7b 	bl	80071c0 <HAL_UART_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008d0:	f000 f8f0 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d4:	2100      	movs	r1, #0
 80008d6:	480d      	ldr	r0, [pc, #52]	@ (800090c <MX_USART1_UART_Init+0x90>)
 80008d8:	f008 f94a 	bl	8008b70 <HAL_UARTEx_SetTxFifoThreshold>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008e2:	f000 f8e7 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e6:	2100      	movs	r1, #0
 80008e8:	4808      	ldr	r0, [pc, #32]	@ (800090c <MX_USART1_UART_Init+0x90>)
 80008ea:	f008 f97f 	bl	8008bec <HAL_UARTEx_SetRxFifoThreshold>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008f4:	f000 f8de 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008f8:	4804      	ldr	r0, [pc, #16]	@ (800090c <MX_USART1_UART_Init+0x90>)
 80008fa:	f008 f900 	bl	8008afe <HAL_UARTEx_DisableFifoMode>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000904:	f000 f8d6 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	24000100 	.word	0x24000100
 8000910:	40011000 	.word	0x40011000

08000914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000914:	b480      	push	{r7}
 8000916:	b087      	sub	sp, #28
 8000918:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091a:	4b28      	ldr	r3, [pc, #160]	@ (80009bc <MX_GPIO_Init+0xa8>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000920:	4a26      	ldr	r2, [pc, #152]	@ (80009bc <MX_GPIO_Init+0xa8>)
 8000922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000926:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800092a:	4b24      	ldr	r3, [pc, #144]	@ (80009bc <MX_GPIO_Init+0xa8>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000930:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000938:	4b20      	ldr	r3, [pc, #128]	@ (80009bc <MX_GPIO_Init+0xa8>)
 800093a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800093e:	4a1f      	ldr	r2, [pc, #124]	@ (80009bc <MX_GPIO_Init+0xa8>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000948:	4b1c      	ldr	r3, [pc, #112]	@ (80009bc <MX_GPIO_Init+0xa8>)
 800094a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800094e:	f003 0304 	and.w	r3, r3, #4
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b19      	ldr	r3, [pc, #100]	@ (80009bc <MX_GPIO_Init+0xa8>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800095c:	4a17      	ldr	r2, [pc, #92]	@ (80009bc <MX_GPIO_Init+0xa8>)
 800095e:	f043 0301 	orr.w	r3, r3, #1
 8000962:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000966:	4b15      	ldr	r3, [pc, #84]	@ (80009bc <MX_GPIO_Init+0xa8>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000974:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <MX_GPIO_Init+0xa8>)
 8000976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800097a:	4a10      	ldr	r2, [pc, #64]	@ (80009bc <MX_GPIO_Init+0xa8>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000984:	4b0d      	ldr	r3, [pc, #52]	@ (80009bc <MX_GPIO_Init+0xa8>)
 8000986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000992:	4b0a      	ldr	r3, [pc, #40]	@ (80009bc <MX_GPIO_Init+0xa8>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000998:	4a08      	ldr	r2, [pc, #32]	@ (80009bc <MX_GPIO_Init+0xa8>)
 800099a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800099e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009a2:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <MX_GPIO_Init+0xa8>)
 80009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b0:	bf00      	nop
 80009b2:	371c      	adds	r7, #28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	58024400 	.word	0x58024400

080009c0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
    // Send data via UART (for example, using UART1)
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009d4:	68b9      	ldr	r1, [r7, #8]
 80009d6:	4804      	ldr	r0, [pc, #16]	@ (80009e8 <_write+0x28>)
 80009d8:	f006 fc42 	bl	8007260 <HAL_UART_Transmit>
    return len;
 80009dc:	687b      	ldr	r3, [r7, #4]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	24000100 	.word	0x24000100

080009ec <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80009f2:	463b      	mov	r3, r7
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80009fe:	f000 ff13 	bl	8001828 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a02:	2301      	movs	r3, #1
 8000a04:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a0e:	231f      	movs	r3, #31
 8000a10:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a12:	2387      	movs	r3, #135	@ 0x87
 8000a14:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a22:	2301      	movs	r3, #1
 8000a24:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a2e:	463b      	mov	r3, r7
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 ff31 	bl	8001898 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000a36:	2301      	movs	r3, #1
 8000a38:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8000a3a:	4b13      	ldr	r3, [pc, #76]	@ (8000a88 <MPU_Config+0x9c>)
 8000a3c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000a3e:	2310      	movs	r3, #16
 8000a40:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000a46:	2301      	movs	r3, #1
 8000a48:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a52:	463b      	mov	r3, r7
 8000a54:	4618      	mov	r0, r3
 8000a56:	f000 ff1f 	bl	8001898 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <MPU_Config+0xa0>)
 8000a60:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000a62:	2308      	movs	r3, #8
 8000a64:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a72:	463b      	mov	r3, r7
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 ff0f 	bl	8001898 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a7a:	2004      	movs	r0, #4
 8000a7c:	f000 feec 	bl	8001858 <HAL_MPU_Enable>

}
 8000a80:	bf00      	nop
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	30020000 	.word	0x30020000
 8000a8c:	30040000 	.word	0x30040000

08000a90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a04      	ldr	r2, [pc, #16]	@ (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d101      	bne.n	8000aa6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aa2:	f000 fd7d 	bl	80015a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40001000 	.word	0x40001000

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <Error_Handler+0x8>

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8000af0 <HAL_MspInit+0x30>)
 8000ac8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000acc:	4a08      	ldr	r2, [pc, #32]	@ (8000af0 <HAL_MspInit+0x30>)
 8000ace:	f043 0302 	orr.w	r3, r3, #2
 8000ad2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <HAL_MspInit+0x30>)
 8000ad8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000adc:	f003 0302 	and.w	r3, r3, #2
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	58024400 	.word	0x58024400

08000af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b0ba      	sub	sp, #232	@ 0xe8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	22c0      	movs	r2, #192	@ 0xc0
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f014 fdc7 	bl	80156a8 <memset>
  if(huart->Instance==USART1)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a33      	ldr	r2, [pc, #204]	@ (8000bec <HAL_UART_MspInit+0xf8>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d15f      	bne.n	8000be4 <HAL_UART_MspInit+0xf0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b24:	f04f 0201 	mov.w	r2, #1
 8000b28:	f04f 0300 	mov.w	r3, #0
 8000b2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 16;
 8000b30:	2310      	movs	r3, #16
 8000b32:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 372;
 8000b34:	f44f 73ba 	mov.w	r3, #372	@ 0x174
 8000b38:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 8;
 8000b3e:	2308      	movs	r3, #8
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000b42:	2302      	movs	r3, #2
 8000b44:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL2;
 8000b52:	2308      	movs	r3, #8
 8000b54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f004 fa35 	bl	8004fcc <HAL_RCCEx_PeriphCLKConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <HAL_UART_MspInit+0x78>
    {
      Error_Handler();
 8000b68:	f7ff ffa4 	bl	8000ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b6c:	4b20      	ldr	r3, [pc, #128]	@ (8000bf0 <HAL_UART_MspInit+0xfc>)
 8000b6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000b72:	4a1f      	ldr	r2, [pc, #124]	@ (8000bf0 <HAL_UART_MspInit+0xfc>)
 8000b74:	f043 0310 	orr.w	r3, r3, #16
 8000b78:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf0 <HAL_UART_MspInit+0xfc>)
 8000b7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000b82:	f003 0310 	and.w	r3, r3, #16
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b19      	ldr	r3, [pc, #100]	@ (8000bf0 <HAL_UART_MspInit+0xfc>)
 8000b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b90:	4a17      	ldr	r2, [pc, #92]	@ (8000bf0 <HAL_UART_MspInit+0xfc>)
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b9a:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <HAL_UART_MspInit+0xfc>)
 8000b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ba8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000bac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bc2:	2307      	movs	r3, #7
 8000bc4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4809      	ldr	r0, [pc, #36]	@ (8000bf4 <HAL_UART_MspInit+0x100>)
 8000bd0:	f002 ffec 	bl	8003bac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2025      	movs	r0, #37	@ 0x25
 8000bda:	f000 fdfd 	bl	80017d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bde:	2025      	movs	r0, #37	@ 0x25
 8000be0:	f000 fe14 	bl	800180c <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000be4:	bf00      	nop
 8000be6:	37e8      	adds	r7, #232	@ 0xe8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40011000 	.word	0x40011000
 8000bf0:	58024400 	.word	0x58024400
 8000bf4:	58020000 	.word	0x58020000

08000bf8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b090      	sub	sp, #64	@ 0x40
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b0f      	cmp	r3, #15
 8000c04:	d827      	bhi.n	8000c56 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	6879      	ldr	r1, [r7, #4]
 8000c0a:	2036      	movs	r0, #54	@ 0x36
 8000c0c:	f000 fde4 	bl	80017d8 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c10:	2036      	movs	r0, #54	@ 0x36
 8000c12:	f000 fdfb 	bl	800180c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000c16:	4a29      	ldr	r2, [pc, #164]	@ (8000cbc <HAL_InitTick+0xc4>)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c1c:	4b28      	ldr	r3, [pc, #160]	@ (8000cc0 <HAL_InitTick+0xc8>)
 8000c1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c22:	4a27      	ldr	r2, [pc, #156]	@ (8000cc0 <HAL_InitTick+0xc8>)
 8000c24:	f043 0310 	orr.w	r3, r3, #16
 8000c28:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c2c:	4b24      	ldr	r3, [pc, #144]	@ (8000cc0 <HAL_InitTick+0xc8>)
 8000c2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c32:	f003 0310 	and.w	r3, r3, #16
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c3a:	f107 0210 	add.w	r2, r7, #16
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4611      	mov	r1, r2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f004 f97f 	bl	8004f48 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d106      	bne.n	8000c62 <HAL_InitTick+0x6a>
 8000c54:	e001      	b.n	8000c5a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e02b      	b.n	8000cb2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c5a:	f004 f949 	bl	8004ef0 <HAL_RCC_GetPCLK1Freq>
 8000c5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000c60:	e004      	b.n	8000c6c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c62:	f004 f945 	bl	8004ef0 <HAL_RCC_GetPCLK1Freq>
 8000c66:	4603      	mov	r3, r0
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c6e:	4a15      	ldr	r2, [pc, #84]	@ (8000cc4 <HAL_InitTick+0xcc>)
 8000c70:	fba2 2303 	umull	r2, r3, r2, r3
 8000c74:	0c9b      	lsrs	r3, r3, #18
 8000c76:	3b01      	subs	r3, #1
 8000c78:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c7a:	4b13      	ldr	r3, [pc, #76]	@ (8000cc8 <HAL_InitTick+0xd0>)
 8000c7c:	4a13      	ldr	r2, [pc, #76]	@ (8000ccc <HAL_InitTick+0xd4>)
 8000c7e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c80:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <HAL_InitTick+0xd0>)
 8000c82:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c86:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c88:	4a0f      	ldr	r2, [pc, #60]	@ (8000cc8 <HAL_InitTick+0xd0>)
 8000c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c8c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <HAL_InitTick+0xd0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc8 <HAL_InitTick+0xd0>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c9a:	480b      	ldr	r0, [pc, #44]	@ (8000cc8 <HAL_InitTick+0xd0>)
 8000c9c:	f005 ffc2 	bl	8006c24 <HAL_TIM_Base_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d104      	bne.n	8000cb0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ca6:	4808      	ldr	r0, [pc, #32]	@ (8000cc8 <HAL_InitTick+0xd0>)
 8000ca8:	f006 f81e 	bl	8006ce8 <HAL_TIM_Base_Start_IT>
 8000cac:	4603      	mov	r3, r0
 8000cae:	e000      	b.n	8000cb2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3740      	adds	r7, #64	@ 0x40
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	24000008 	.word	0x24000008
 8000cc0:	58024400 	.word	0x58024400
 8000cc4:	431bde83 	.word	0x431bde83
 8000cc8:	24000194 	.word	0x24000194
 8000ccc:	40001000 	.word	0x40001000

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <HardFault_Handler+0x4>

08000ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <MemManage_Handler+0x4>

08000ce8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <BusFault_Handler+0x4>

08000cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <UsageFault_Handler+0x4>

08000cf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d34:	4802      	ldr	r0, [pc, #8]	@ (8000d40 <USART1_IRQHandler+0x10>)
 8000d36:	f006 fb21 	bl	800737c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	24000100 	.word	0x24000100

08000d44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d48:	4802      	ldr	r0, [pc, #8]	@ (8000d54 <TIM6_DAC_IRQHandler+0x10>)
 8000d4a:	f006 f845 	bl	8006dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	24000194 	.word	0x24000194

08000d58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return 1;
 8000d5c:	2301      	movs	r3, #1
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <_kill>:

int _kill(int pid, int sig)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d72:	4b05      	ldr	r3, [pc, #20]	@ (8000d88 <_kill+0x20>)
 8000d74:	2216      	movs	r2, #22
 8000d76:	601a      	str	r2, [r3, #0]
  return -1;
 8000d78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	24003570 	.word	0x24003570

08000d8c <_exit>:

void _exit (int status)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ffe5 	bl	8000d68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d9e:	bf00      	nop
 8000da0:	e7fd      	b.n	8000d9e <_exit+0x12>

08000da2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b086      	sub	sp, #24
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	60f8      	str	r0, [r7, #12]
 8000daa:	60b9      	str	r1, [r7, #8]
 8000dac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	e00a      	b.n	8000dca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000db4:	f3af 8000 	nop.w
 8000db8:	4601      	mov	r1, r0
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	1c5a      	adds	r2, r3, #1
 8000dbe:	60ba      	str	r2, [r7, #8]
 8000dc0:	b2ca      	uxtb	r2, r1
 8000dc2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	617b      	str	r3, [r7, #20]
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	dbf0      	blt.n	8000db4 <_read+0x12>
  }

  return len;
 8000dd2:	687b      	ldr	r3, [r7, #4]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000de4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e04:	605a      	str	r2, [r3, #4]
  return 0;
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <_isatty>:

int _isatty(int file)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e1c:	2301      	movs	r3, #1
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b085      	sub	sp, #20
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	60f8      	str	r0, [r7, #12]
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e36:	2300      	movs	r3, #0
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b087      	sub	sp, #28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e4c:	4a14      	ldr	r2, [pc, #80]	@ (8000ea0 <_sbrk+0x5c>)
 8000e4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <_sbrk+0x60>)
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e58:	4b13      	ldr	r3, [pc, #76]	@ (8000ea8 <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d102      	bne.n	8000e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e60:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <_sbrk+0x64>)
 8000e62:	4a12      	ldr	r2, [pc, #72]	@ (8000eac <_sbrk+0x68>)
 8000e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e66:	4b10      	ldr	r3, [pc, #64]	@ (8000ea8 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d205      	bcs.n	8000e80 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000e74:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb0 <_sbrk+0x6c>)
 8000e76:	220c      	movs	r2, #12
 8000e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e7e:	e009      	b.n	8000e94 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e80:	4b09      	ldr	r3, [pc, #36]	@ (8000ea8 <_sbrk+0x64>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e86:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <_sbrk+0x64>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4a06      	ldr	r2, [pc, #24]	@ (8000ea8 <_sbrk+0x64>)
 8000e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e92:	68fb      	ldr	r3, [r7, #12]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	371c      	adds	r7, #28
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	24080000 	.word	0x24080000
 8000ea4:	00000400 	.word	0x00000400
 8000ea8:	240001e0 	.word	0x240001e0
 8000eac:	24003580 	.word	0x24003580
 8000eb0:	24003570 	.word	0x24003570

08000eb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000eb8:	4b37      	ldr	r3, [pc, #220]	@ (8000f98 <SystemInit+0xe4>)
 8000eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ebe:	4a36      	ldr	r2, [pc, #216]	@ (8000f98 <SystemInit+0xe4>)
 8000ec0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ec4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ec8:	4b34      	ldr	r3, [pc, #208]	@ (8000f9c <SystemInit+0xe8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 030f 	and.w	r3, r3, #15
 8000ed0:	2b06      	cmp	r3, #6
 8000ed2:	d807      	bhi.n	8000ee4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ed4:	4b31      	ldr	r3, [pc, #196]	@ (8000f9c <SystemInit+0xe8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f023 030f 	bic.w	r3, r3, #15
 8000edc:	4a2f      	ldr	r2, [pc, #188]	@ (8000f9c <SystemInit+0xe8>)
 8000ede:	f043 0307 	orr.w	r3, r3, #7
 8000ee2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ee4:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa0 <SystemInit+0xec>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a2d      	ldr	r2, [pc, #180]	@ (8000fa0 <SystemInit+0xec>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ef0:	4b2b      	ldr	r3, [pc, #172]	@ (8000fa0 <SystemInit+0xec>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa0 <SystemInit+0xec>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	4929      	ldr	r1, [pc, #164]	@ (8000fa0 <SystemInit+0xec>)
 8000efc:	4b29      	ldr	r3, [pc, #164]	@ (8000fa4 <SystemInit+0xf0>)
 8000efe:	4013      	ands	r3, r2
 8000f00:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f02:	4b26      	ldr	r3, [pc, #152]	@ (8000f9c <SystemInit+0xe8>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 0308 	and.w	r3, r3, #8
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d007      	beq.n	8000f1e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f0e:	4b23      	ldr	r3, [pc, #140]	@ (8000f9c <SystemInit+0xe8>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f023 030f 	bic.w	r3, r3, #15
 8000f16:	4a21      	ldr	r2, [pc, #132]	@ (8000f9c <SystemInit+0xe8>)
 8000f18:	f043 0307 	orr.w	r3, r3, #7
 8000f1c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f1e:	4b20      	ldr	r3, [pc, #128]	@ (8000fa0 <SystemInit+0xec>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f24:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa0 <SystemInit+0xec>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa0 <SystemInit+0xec>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f30:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa0 <SystemInit+0xec>)
 8000f32:	4a1d      	ldr	r2, [pc, #116]	@ (8000fa8 <SystemInit+0xf4>)
 8000f34:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f36:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa0 <SystemInit+0xec>)
 8000f38:	4a1c      	ldr	r2, [pc, #112]	@ (8000fac <SystemInit+0xf8>)
 8000f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f3c:	4b18      	ldr	r3, [pc, #96]	@ (8000fa0 <SystemInit+0xec>)
 8000f3e:	4a1c      	ldr	r2, [pc, #112]	@ (8000fb0 <SystemInit+0xfc>)
 8000f40:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f42:	4b17      	ldr	r3, [pc, #92]	@ (8000fa0 <SystemInit+0xec>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f48:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <SystemInit+0xec>)
 8000f4a:	4a19      	ldr	r2, [pc, #100]	@ (8000fb0 <SystemInit+0xfc>)
 8000f4c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f4e:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <SystemInit+0xec>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f54:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <SystemInit+0xec>)
 8000f56:	4a16      	ldr	r2, [pc, #88]	@ (8000fb0 <SystemInit+0xfc>)
 8000f58:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f5a:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <SystemInit+0xec>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa0 <SystemInit+0xec>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa0 <SystemInit+0xec>)
 8000f66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <SystemInit+0xec>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f72:	4b10      	ldr	r3, [pc, #64]	@ (8000fb4 <SystemInit+0x100>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <SystemInit+0x104>)
 8000f78:	4013      	ands	r3, r2
 8000f7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f7e:	d202      	bcs.n	8000f86 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f80:	4b0e      	ldr	r3, [pc, #56]	@ (8000fbc <SystemInit+0x108>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc0 <SystemInit+0x10c>)
 8000f88:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f8c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00
 8000f9c:	52002000 	.word	0x52002000
 8000fa0:	58024400 	.word	0x58024400
 8000fa4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000fa8:	02020200 	.word	0x02020200
 8000fac:	01ff0000 	.word	0x01ff0000
 8000fb0:	01010280 	.word	0x01010280
 8000fb4:	5c001000 	.word	0x5c001000
 8000fb8:	ffff0000 	.word	0xffff0000
 8000fbc:	51008108 	.word	0x51008108
 8000fc0:	52004000 	.word	0x52004000

08000fc4 <tcp_server_accept>:
err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err);
void tcp_server_error(void *arg, err_t err);

// Accept callback function
err_t tcp_server_accept(void *arg, struct tcp_pcb *new_pcb, err_t err)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	71fb      	strb	r3, [r7, #7]
    if (err != ERR_OK || new_pcb == NULL) {
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d102      	bne.n	8000fe0 <tcp_server_accept+0x1c>
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d102      	bne.n	8000fe6 <tcp_server_accept+0x22>
        return ERR_VAL;
 8000fe0:	f06f 0305 	mvn.w	r3, #5
 8000fe4:	e00c      	b.n	8001000 <tcp_server_accept+0x3c>
    }

    // Set callback functions for receiving data and errors
    tcp_recv(new_pcb, tcp_server_recv);
 8000fe6:	4908      	ldr	r1, [pc, #32]	@ (8001008 <tcp_server_accept+0x44>)
 8000fe8:	68b8      	ldr	r0, [r7, #8]
 8000fea:	f00b ff8d 	bl	800cf08 <tcp_recv>
    tcp_err(new_pcb, tcp_server_error);
 8000fee:	4907      	ldr	r1, [pc, #28]	@ (800100c <tcp_server_accept+0x48>)
 8000ff0:	68b8      	ldr	r0, [r7, #8]
 8000ff2:	f00b ffab 	bl	800cf4c <tcp_err>

    // Set the argument to be passed to the callbacks
    tcp_arg(new_pcb, NULL);
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	68b8      	ldr	r0, [r7, #8]
 8000ffa:	f00b ff73 	bl	800cee4 <tcp_arg>

    return ERR_OK;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	08001011 	.word	0x08001011
 800100c:	0800114d 	.word	0x0800114d

08001010 <tcp_server_recv>:

// Receive callback function
err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	f2ad 4d24 	subw	sp, sp, #1060	@ 0x424
 8001016:	af00      	add	r7, sp, #0
 8001018:	f507 6484 	add.w	r4, r7, #1056	@ 0x420
 800101c:	f2a4 4414 	subw	r4, r4, #1044	@ 0x414
 8001020:	6020      	str	r0, [r4, #0]
 8001022:	f507 6084 	add.w	r0, r7, #1056	@ 0x420
 8001026:	f5a0 6083 	sub.w	r0, r0, #1048	@ 0x418
 800102a:	6001      	str	r1, [r0, #0]
 800102c:	f507 6184 	add.w	r1, r7, #1056	@ 0x420
 8001030:	f2a1 411c 	subw	r1, r1, #1052	@ 0x41c
 8001034:	600a      	str	r2, [r1, #0]
 8001036:	461a      	mov	r2, r3
 8001038:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 800103c:	f2a3 431d 	subw	r3, r3, #1053	@ 0x41d
 8001040:	701a      	strb	r2, [r3, #0]
    if (p == NULL) {
 8001042:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001046:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d108      	bne.n	8001062 <tcp_server_recv+0x52>
        tcp_close(tpcb);  // Close connection if client disconnected
 8001050:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001054:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 8001058:	6818      	ldr	r0, [r3, #0]
 800105a:	f00a fd09 	bl	800ba70 <tcp_close>
        return ERR_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	e06c      	b.n	800113c <tcp_server_recv+0x12c>
    }

    if (err != ERR_OK) {
 8001062:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001066:	f2a3 431d 	subw	r3, r3, #1053	@ 0x41d
 800106a:	f993 3000 	ldrsb.w	r3, [r3]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00d      	beq.n	800108e <tcp_server_recv+0x7e>
        pbuf_free(p);  // Free the buffer if there's an error
 8001072:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001076:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 800107a:	6818      	ldr	r0, [r3, #0]
 800107c:	f00a f836 	bl	800b0ec <pbuf_free>
        return err;
 8001080:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001084:	f2a3 431d 	subw	r3, r3, #1053	@ 0x41d
 8001088:	f993 3000 	ldrsb.w	r3, [r3]
 800108c:	e056      	b.n	800113c <tcp_server_recv+0x12c>
    }

    // Process received data (echo back)
    	uint8_t data[1024];
    	size_t payload_size = p->len;
 800108e:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001092:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	895b      	ldrh	r3, [r3, #10]
 800109a:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c

    	// Ensure not to exceed the size of the struct or array
    	if (payload_size <= sizeof(data)) {
 800109e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 80010a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010a6:	d80d      	bhi.n	80010c4 <tcp_server_recv+0xb4>
    	    memcpy(data, p->payload, payload_size);
 80010a8:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80010ac:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	6859      	ldr	r1, [r3, #4]
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	f8d7 241c 	ldr.w	r2, [r7, #1052]	@ 0x41c
 80010bc:	4618      	mov	r0, r3
 80010be:	f014 fb68 	bl	8015792 <memcpy>
 80010c2:	e01c      	b.n	80010fe <tcp_server_recv+0xee>
    	} else {
    	    // Handle error: payload is too large for the struct
    		const char *string = "ERROR: Overflow of data";
 80010c4:	4b20      	ldr	r3, [pc, #128]	@ (8001148 <tcp_server_recv+0x138>)
 80010c6:	f8c7 3418 	str.w	r3, [r7, #1048]	@ 0x418
    		size_t length = strlen(string) + 1;  // +1 for the null terminator'
 80010ca:	f8d7 0418 	ldr.w	r0, [r7, #1048]	@ 0x418
 80010ce:	f7ff f907 	bl	80002e0 <strlen>
 80010d2:	4603      	mov	r3, r0
 80010d4:	3301      	adds	r3, #1
 80010d6:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
    		memcpy(data, string, length);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 80010e2:	f8d7 1418 	ldr.w	r1, [r7, #1048]	@ 0x418
 80010e6:	4618      	mov	r0, r3
 80010e8:	f014 fb53 	bl	8015792 <memcpy>
    		p->len = length;
 80010ec:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80010f6:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	815a      	strh	r2, [r3, #10]
    	}
    	 tcp_write(tpcb, data, p->len, TCP_WRITE_FLAG_COPY);
 80010fe:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001102:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	895a      	ldrh	r2, [r3, #10]
 800110a:	f107 0114 	add.w	r1, r7, #20
 800110e:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001112:	f5a3 6083 	sub.w	r0, r3, #1048	@ 0x418
 8001116:	2301      	movs	r3, #1
 8001118:	6800      	ldr	r0, [r0, #0]
 800111a:	f00e ff05 	bl	800ff28 <tcp_write>

//        tcp_write(tpcb, p->payload, p->len, TCP_WRITE_FLAG_COPY);
        tcp_output(tpcb);
 800111e:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001122:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 8001126:	6818      	ldr	r0, [r3, #0]
 8001128:	f00f fd46 	bl	8010bb8 <tcp_output>

    pbuf_free(p);  // Free the buffer
 800112c:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001130:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 8001134:	6818      	ldr	r0, [r3, #0]
 8001136:	f009 ffd9 	bl	800b0ec <pbuf_free>
    return ERR_OK;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	f207 4724 	addw	r7, r7, #1060	@ 0x424
 8001142:	46bd      	mov	sp, r7
 8001144:	bd90      	pop	{r4, r7, pc}
 8001146:	bf00      	nop
 8001148:	08016348 	.word	0x08016348

0800114c <tcp_server_error>:

// Error callback function
void tcp_server_error(void *arg, err_t err)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	70fb      	strb	r3, [r7, #3]
    // Handle error
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <tcp_server_init>:


void tcp_server_init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
    tcp_server_pcb = tcp_new();  // Create a new TCP control block
 800116a:	f00b feb3 	bl	800ced4 <tcp_new>
 800116e:	4603      	mov	r3, r0
 8001170:	4a13      	ldr	r2, [pc, #76]	@ (80011c0 <tcp_server_init+0x5c>)
 8001172:	6013      	str	r3, [r2, #0]
    if (tcp_server_pcb != NULL) {
 8001174:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <tcp_server_init+0x5c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d01c      	beq.n	80011b6 <tcp_server_init+0x52>
        err_t err;
        err = tcp_bind(tcp_server_pcb, IP_ADDR_ANY, TCP_SERVER_PORT);  // Bind to the specified port
 800117c:	4b10      	ldr	r3, [pc, #64]	@ (80011c0 <tcp_server_init+0x5c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f240 424b 	movw	r2, #1099	@ 0x44b
 8001184:	490f      	ldr	r1, [pc, #60]	@ (80011c4 <tcp_server_init+0x60>)
 8001186:	4618      	mov	r0, r3
 8001188:	f00a fd72 	bl	800bc70 <tcp_bind>
 800118c:	4603      	mov	r3, r0
 800118e:	71fb      	strb	r3, [r7, #7]
        if (err == ERR_OK) {
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d10e      	bne.n	80011b6 <tcp_server_init+0x52>
            tcp_server_pcb = tcp_listen(tcp_server_pcb);  // Start listening for incoming connections
 8001198:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <tcp_server_init+0x5c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	21ff      	movs	r1, #255	@ 0xff
 800119e:	4618      	mov	r0, r3
 80011a0:	f00a fe26 	bl	800bdf0 <tcp_listen_with_backlog>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4a06      	ldr	r2, [pc, #24]	@ (80011c0 <tcp_server_init+0x5c>)
 80011a8:	6013      	str	r3, [r2, #0]
            tcp_accept(tcp_server_pcb, tcp_server_accept);  // Set the accept callback
 80011aa:	4b05      	ldr	r3, [pc, #20]	@ (80011c0 <tcp_server_init+0x5c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4906      	ldr	r1, [pc, #24]	@ (80011c8 <tcp_server_init+0x64>)
 80011b0:	4618      	mov	r0, r3
 80011b2:	f00b feed 	bl	800cf90 <tcp_accept>
            // Handle binding error
        }
    } else {
        // Handle PCB creation error
    }
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	240001e4 	.word	0x240001e4
 80011c4:	0801b22c 	.word	0x0801b22c
 80011c8:	08000fc5 	.word	0x08000fc5

080011cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001204 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011d0:	f7ff fe70 	bl	8000eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d4:	480c      	ldr	r0, [pc, #48]	@ (8001208 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011d6:	490d      	ldr	r1, [pc, #52]	@ (800120c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001210 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011dc:	e002      	b.n	80011e4 <LoopCopyDataInit>

080011de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e2:	3304      	adds	r3, #4

080011e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e8:	d3f9      	bcc.n	80011de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001214 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001218 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f0:	e001      	b.n	80011f6 <LoopFillZerobss>

080011f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f4:	3204      	adds	r2, #4

080011f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f8:	d3fb      	bcc.n	80011f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011fa:	f014 faa3 	bl	8015744 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011fe:	f7ff fa3f 	bl	8000680 <main>
  bx  lr
 8001202:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001204:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001208:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800120c:	240000e4 	.word	0x240000e4
  ldr r2, =_sidata
 8001210:	0801b32c 	.word	0x0801b32c
  ldr r2, =_sbss
 8001214:	240000e4 	.word	0x240000e4
  ldr r4, =_ebss
 8001218:	24003580 	.word	0x24003580

0800121c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800121c:	e7fe      	b.n	800121c <ADC3_IRQHandler>

0800121e <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00b      	beq.n	8001246 <DP83848_RegisterBusIO+0x28>
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d007      	beq.n	8001246 <DP83848_RegisterBusIO+0x28>
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <DP83848_RegisterBusIO+0x28>
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d102      	bne.n	800124c <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 8001246:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800124a:	e014      	b.n	8001276 <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	68da      	ldr	r2, [r3, #12]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	691a      	ldr	r2, [r3, #16]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <DP83848_Init>:
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ADDRESS_ERROR if cannot find device address
  *         DP83848_STATUS_READ_ERROR if connot read register
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d139      	bne.n	8001312 <DP83848_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d002      	beq.n	80012ac <DP83848_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2220      	movs	r2, #32
 80012b0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
 80012b6:	e01c      	b.n	80012f2 <DP83848_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	695b      	ldr	r3, [r3, #20]
 80012bc:	f107 020c 	add.w	r2, r7, #12
 80012c0:	2119      	movs	r1, #25
 80012c2:	6978      	ldr	r0, [r7, #20]
 80012c4:	4798      	blx	r3
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	da03      	bge.n	80012d4 <DP83848_Init+0x52>
       {
         status = DP83848_STATUS_READ_ERROR;
 80012cc:	f06f 0304 	mvn.w	r3, #4
 80012d0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80012d2:	e00b      	b.n	80012ec <DP83848_Init+0x6a>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 031f 	and.w	r3, r3, #31
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d105      	bne.n	80012ec <DP83848_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
         break;
 80012ea:	e005      	b.n	80012f8 <DP83848_Init+0x76>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	3301      	adds	r3, #1
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	2b1f      	cmp	r3, #31
 80012f6:	d9df      	bls.n	80012b8 <DP83848_Init+0x36>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b1f      	cmp	r3, #31
 80012fe:	d902      	bls.n	8001306 <DP83848_Init+0x84>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8001300:	f06f 0302 	mvn.w	r3, #2
 8001304:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d102      	bne.n	8001312 <DP83848_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2201      	movs	r2, #1
 8001310:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001312:	693b      	ldr	r3, [r7, #16]
 }
 8001314:	4618      	mov	r0, r3
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	6810      	ldr	r0, [r2, #0]
 8001330:	f107 020c 	add.w	r2, r7, #12
 8001334:	2101      	movs	r1, #1
 8001336:	4798      	blx	r3
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	da02      	bge.n	8001344 <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 800133e:	f06f 0304 	mvn.w	r3, #4
 8001342:	e06e      	b.n	8001422 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	6810      	ldr	r0, [r2, #0]
 800134c:	f107 020c 	add.w	r2, r7, #12
 8001350:	2101      	movs	r1, #1
 8001352:	4798      	blx	r3
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	da02      	bge.n	8001360 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 800135a:	f06f 0304 	mvn.w	r3, #4
 800135e:	e060      	b.n	8001422 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 800136a:	2301      	movs	r3, #1
 800136c:	e059      	b.n	8001422 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	6810      	ldr	r0, [r2, #0]
 8001376:	f107 020c 	add.w	r2, r7, #12
 800137a:	2100      	movs	r1, #0
 800137c:	4798      	blx	r3
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	da02      	bge.n	800138a <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8001384:	f06f 0304 	mvn.w	r3, #4
 8001388:	e04b      	b.n	8001422 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d11b      	bne.n	80013cc <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d006      	beq.n	80013ac <DP83848_GetLinkState+0x90>
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80013a8:	2302      	movs	r3, #2
 80013aa:	e03a      	b.n	8001422 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e033      	b.n	8001422 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 80013c4:	2304      	movs	r3, #4
 80013c6:	e02c      	b.n	8001422 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 80013c8:	2305      	movs	r3, #5
 80013ca:	e02a      	b.n	8001422 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6810      	ldr	r0, [r2, #0]
 80013d4:	f107 020c 	add.w	r2, r7, #12
 80013d8:	2110      	movs	r1, #16
 80013da:	4798      	blx	r3
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	da02      	bge.n	80013e8 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 80013e2:	f06f 0304 	mvn.w	r3, #4
 80013e6:	e01c      	b.n	8001422 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f003 0310 	and.w	r3, r3, #16
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 80013f2:	2306      	movs	r3, #6
 80013f4:	e015      	b.n	8001422 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f003 0306 	and.w	r3, r3, #6
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	d101      	bne.n	8001404 <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8001400:	2302      	movs	r3, #2
 8001402:	e00e      	b.n	8001422 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f003 0306 	and.w	r3, r3, #6
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 800140e:	2303      	movs	r3, #3
 8001410:	e007      	b.n	8001422 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f003 0306 	and.w	r3, r3, #6
 8001418:	2b06      	cmp	r3, #6
 800141a:	d101      	bne.n	8001420 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 800141c:	2304      	movs	r3, #4
 800141e:	e000      	b.n	8001422 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8001420:	2305      	movs	r3, #5
    }
  }
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
 8001432:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00b      	beq.n	8001452 <LAN8742_RegisterBusIO+0x28>
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d007      	beq.n	8001452 <LAN8742_RegisterBusIO+0x28>
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <LAN8742_RegisterBusIO+0x28>
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d102      	bne.n	8001458 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001452:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001456:	e014      	b.n	8001482 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	691a      	ldr	r2, [r3, #16]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800148e:	b580      	push	{r7, lr}
 8001490:	b086      	sub	sp, #24
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d139      	bne.n	800151e <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d002      	beq.n	80014b8 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2220      	movs	r2, #32
 80014bc:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	e01c      	b.n	80014fe <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	f107 020c 	add.w	r2, r7, #12
 80014cc:	2112      	movs	r1, #18
 80014ce:	6978      	ldr	r0, [r7, #20]
 80014d0:	4798      	blx	r3
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	da03      	bge.n	80014e0 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80014d8:	f06f 0304 	mvn.w	r3, #4
 80014dc:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80014de:	e00b      	b.n	80014f8 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f003 031f 	and.w	r3, r3, #31
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d105      	bne.n	80014f8 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
         break;
 80014f6:	e005      	b.n	8001504 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	3301      	adds	r3, #1
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	2b1f      	cmp	r3, #31
 8001502:	d9df      	bls.n	80014c4 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b1f      	cmp	r3, #31
 800150a:	d902      	bls.n	8001512 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800150c:	f06f 0302 	mvn.w	r3, #2
 8001510:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2201      	movs	r2, #1
 800151c:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 800151e:	693b      	ldr	r3, [r7, #16]
 }
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800152e:	2003      	movs	r0, #3
 8001530:	f000 f947 	bl	80017c2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001534:	f003 fb34 	bl	8004ba0 <HAL_RCC_GetSysClockFreq>
 8001538:	4602      	mov	r2, r0
 800153a:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <HAL_Init+0x68>)
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	0a1b      	lsrs	r3, r3, #8
 8001540:	f003 030f 	and.w	r3, r3, #15
 8001544:	4913      	ldr	r1, [pc, #76]	@ (8001594 <HAL_Init+0x6c>)
 8001546:	5ccb      	ldrb	r3, [r1, r3]
 8001548:	f003 031f 	and.w	r3, r3, #31
 800154c:	fa22 f303 	lsr.w	r3, r2, r3
 8001550:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001552:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <HAL_Init+0x68>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	4a0e      	ldr	r2, [pc, #56]	@ (8001594 <HAL_Init+0x6c>)
 800155c:	5cd3      	ldrb	r3, [r2, r3]
 800155e:	f003 031f 	and.w	r3, r3, #31
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	fa22 f303 	lsr.w	r3, r2, r3
 8001568:	4a0b      	ldr	r2, [pc, #44]	@ (8001598 <HAL_Init+0x70>)
 800156a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800156c:	4a0b      	ldr	r2, [pc, #44]	@ (800159c <HAL_Init+0x74>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001572:	200f      	movs	r0, #15
 8001574:	f7ff fb40 	bl	8000bf8 <HAL_InitTick>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e002      	b.n	8001588 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001582:	f7ff fa9d 	bl	8000ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	58024400 	.word	0x58024400
 8001594:	0801b0b8 	.word	0x0801b0b8
 8001598:	24000004 	.word	0x24000004
 800159c:	24000000 	.word	0x24000000

080015a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015a4:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <HAL_IncTick+0x20>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <HAL_IncTick+0x24>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4413      	add	r3, r2
 80015b0:	4a04      	ldr	r2, [pc, #16]	@ (80015c4 <HAL_IncTick+0x24>)
 80015b2:	6013      	str	r3, [r2, #0]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	2400000c 	.word	0x2400000c
 80015c4:	240001e8 	.word	0x240001e8

080015c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return uwTick;
 80015cc:	4b03      	ldr	r3, [pc, #12]	@ (80015dc <HAL_GetTick+0x14>)
 80015ce:	681b      	ldr	r3, [r3, #0]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	240001e8 	.word	0x240001e8

080015e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e8:	f7ff ffee 	bl	80015c8 <HAL_GetTick>
 80015ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80015f8:	d005      	beq.n	8001606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001624 <HAL_Delay+0x44>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4413      	add	r3, r2
 8001604:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001606:	bf00      	nop
 8001608:	f7ff ffde 	bl	80015c8 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	429a      	cmp	r2, r3
 8001616:	d8f7      	bhi.n	8001608 <HAL_Delay+0x28>
  {
  }
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2400000c 	.word	0x2400000c

08001628 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800162c:	4b03      	ldr	r3, [pc, #12]	@ (800163c <HAL_GetREVID+0x14>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	0c1b      	lsrs	r3, r3, #16
}
 8001632:	4618      	mov	r0, r3
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	5c001000 	.word	0x5c001000

08001640 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001648:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001650:	4904      	ldr	r1, [pc, #16]	@ (8001664 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4313      	orrs	r3, r2
 8001656:	604b      	str	r3, [r1, #4]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	58000400 	.word	0x58000400

08001668 <__NVIC_SetPriorityGrouping>:
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001678:	4b0b      	ldr	r3, [pc, #44]	@ (80016a8 <__NVIC_SetPriorityGrouping+0x40>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001684:	4013      	ands	r3, r2
 8001686:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001690:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 8001692:	4313      	orrs	r3, r2
 8001694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001696:	4a04      	ldr	r2, [pc, #16]	@ (80016a8 <__NVIC_SetPriorityGrouping+0x40>)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	60d3      	str	r3, [r2, #12]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000ed00 	.word	0xe000ed00
 80016ac:	05fa0000 	.word	0x05fa0000

080016b0 <__NVIC_GetPriorityGrouping>:
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b4:	4b04      	ldr	r3, [pc, #16]	@ (80016c8 <__NVIC_GetPriorityGrouping+0x18>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	0a1b      	lsrs	r3, r3, #8
 80016ba:	f003 0307 	and.w	r3, r3, #7
}
 80016be:	4618      	mov	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_EnableIRQ>:
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	db0b      	blt.n	80016f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016de:	88fb      	ldrh	r3, [r7, #6]
 80016e0:	f003 021f 	and.w	r2, r3, #31
 80016e4:	4907      	ldr	r1, [pc, #28]	@ (8001704 <__NVIC_EnableIRQ+0x38>)
 80016e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ea:	095b      	lsrs	r3, r3, #5
 80016ec:	2001      	movs	r0, #1
 80016ee:	fa00 f202 	lsl.w	r2, r0, r2
 80016f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000e100 	.word	0xe000e100

08001708 <__NVIC_SetPriority>:
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001714:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001718:	2b00      	cmp	r3, #0
 800171a:	db0a      	blt.n	8001732 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	490c      	ldr	r1, [pc, #48]	@ (8001754 <__NVIC_SetPriority+0x4c>)
 8001722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001726:	0112      	lsls	r2, r2, #4
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	440b      	add	r3, r1
 800172c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001730:	e00a      	b.n	8001748 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4908      	ldr	r1, [pc, #32]	@ (8001758 <__NVIC_SetPriority+0x50>)
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	3b04      	subs	r3, #4
 8001740:	0112      	lsls	r2, r2, #4
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	440b      	add	r3, r1
 8001746:	761a      	strb	r2, [r3, #24]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000e100 	.word	0xe000e100
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <NVIC_EncodePriority>:
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	@ 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f1c3 0307 	rsb	r3, r3, #7
 8001776:	2b04      	cmp	r3, #4
 8001778:	bf28      	it	cs
 800177a:	2304      	movcs	r3, #4
 800177c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3304      	adds	r3, #4
 8001782:	2b06      	cmp	r3, #6
 8001784:	d902      	bls.n	800178c <NVIC_EncodePriority+0x30>
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3b03      	subs	r3, #3
 800178a:	e000      	b.n	800178e <NVIC_EncodePriority+0x32>
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43da      	mvns	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	401a      	ands	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	43d9      	mvns	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	4313      	orrs	r3, r2
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3724      	adds	r7, #36	@ 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ff4c 	bl	8001668 <__NVIC_SetPriorityGrouping>
}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
 80017e4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017e6:	f7ff ff63 	bl	80016b0 <__NVIC_GetPriorityGrouping>
 80017ea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	68b9      	ldr	r1, [r7, #8]
 80017f0:	6978      	ldr	r0, [r7, #20]
 80017f2:	f7ff ffb3 	bl	800175c <NVIC_EncodePriority>
 80017f6:	4602      	mov	r2, r0
 80017f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017fc:	4611      	mov	r1, r2
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff ff82 	bl	8001708 <__NVIC_SetPriority>
}
 8001804:	bf00      	nop
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001816:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff ff56 	bl	80016cc <__NVIC_EnableIRQ>
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800182c:	f3bf 8f5f 	dmb	sy
}
 8001830:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001832:	4b07      	ldr	r3, [pc, #28]	@ (8001850 <HAL_MPU_Disable+0x28>)
 8001834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001836:	4a06      	ldr	r2, [pc, #24]	@ (8001850 <HAL_MPU_Disable+0x28>)
 8001838:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800183c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800183e:	4b05      	ldr	r3, [pc, #20]	@ (8001854 <HAL_MPU_Disable+0x2c>)
 8001840:	2200      	movs	r2, #0
 8001842:	605a      	str	r2, [r3, #4]
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000ed00 	.word	0xe000ed00
 8001854:	e000ed90 	.word	0xe000ed90

08001858 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001860:	4a0b      	ldr	r2, [pc, #44]	@ (8001890 <HAL_MPU_Enable+0x38>)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800186a:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <HAL_MPU_Enable+0x3c>)
 800186c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186e:	4a09      	ldr	r2, [pc, #36]	@ (8001894 <HAL_MPU_Enable+0x3c>)
 8001870:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001874:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001876:	f3bf 8f4f 	dsb	sy
}
 800187a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800187c:	f3bf 8f6f 	isb	sy
}
 8001880:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	e000ed90 	.word	0xe000ed90
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	785a      	ldrb	r2, [r3, #1]
 80018a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001914 <HAL_MPU_ConfigRegion+0x7c>)
 80018a6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80018a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001914 <HAL_MPU_ConfigRegion+0x7c>)
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	4a19      	ldr	r2, [pc, #100]	@ (8001914 <HAL_MPU_ConfigRegion+0x7c>)
 80018ae:	f023 0301 	bic.w	r3, r3, #1
 80018b2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80018b4:	4a17      	ldr	r2, [pc, #92]	@ (8001914 <HAL_MPU_ConfigRegion+0x7c>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	7b1b      	ldrb	r3, [r3, #12]
 80018c0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	7adb      	ldrb	r3, [r3, #11]
 80018c6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	7a9b      	ldrb	r3, [r3, #10]
 80018ce:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80018d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	7b5b      	ldrb	r3, [r3, #13]
 80018d6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80018d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	7b9b      	ldrb	r3, [r3, #14]
 80018de:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80018e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7bdb      	ldrb	r3, [r3, #15]
 80018e6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80018e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	7a5b      	ldrb	r3, [r3, #9]
 80018ee:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80018f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	7a1b      	ldrb	r3, [r3, #8]
 80018f6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80018f8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	7812      	ldrb	r2, [r2, #0]
 80018fe:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001900:	4a04      	ldr	r2, [pc, #16]	@ (8001914 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001902:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001904:	6113      	str	r3, [r2, #16]
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000ed90 	.word	0xe000ed90

08001918 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001920:	f7ff fe52 	bl	80015c8 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e2dc      	b.n	8001eea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d008      	beq.n	800194e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2280      	movs	r2, #128	@ 0x80
 8001940:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e2cd      	b.n	8001eea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a76      	ldr	r2, [pc, #472]	@ (8001b2c <HAL_DMA_Abort+0x214>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d04a      	beq.n	80019ee <HAL_DMA_Abort+0xd6>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a74      	ldr	r2, [pc, #464]	@ (8001b30 <HAL_DMA_Abort+0x218>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d045      	beq.n	80019ee <HAL_DMA_Abort+0xd6>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a73      	ldr	r2, [pc, #460]	@ (8001b34 <HAL_DMA_Abort+0x21c>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d040      	beq.n	80019ee <HAL_DMA_Abort+0xd6>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a71      	ldr	r2, [pc, #452]	@ (8001b38 <HAL_DMA_Abort+0x220>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d03b      	beq.n	80019ee <HAL_DMA_Abort+0xd6>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a70      	ldr	r2, [pc, #448]	@ (8001b3c <HAL_DMA_Abort+0x224>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d036      	beq.n	80019ee <HAL_DMA_Abort+0xd6>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a6e      	ldr	r2, [pc, #440]	@ (8001b40 <HAL_DMA_Abort+0x228>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d031      	beq.n	80019ee <HAL_DMA_Abort+0xd6>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a6d      	ldr	r2, [pc, #436]	@ (8001b44 <HAL_DMA_Abort+0x22c>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d02c      	beq.n	80019ee <HAL_DMA_Abort+0xd6>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a6b      	ldr	r2, [pc, #428]	@ (8001b48 <HAL_DMA_Abort+0x230>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d027      	beq.n	80019ee <HAL_DMA_Abort+0xd6>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a6a      	ldr	r2, [pc, #424]	@ (8001b4c <HAL_DMA_Abort+0x234>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d022      	beq.n	80019ee <HAL_DMA_Abort+0xd6>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a68      	ldr	r2, [pc, #416]	@ (8001b50 <HAL_DMA_Abort+0x238>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d01d      	beq.n	80019ee <HAL_DMA_Abort+0xd6>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a67      	ldr	r2, [pc, #412]	@ (8001b54 <HAL_DMA_Abort+0x23c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d018      	beq.n	80019ee <HAL_DMA_Abort+0xd6>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a65      	ldr	r2, [pc, #404]	@ (8001b58 <HAL_DMA_Abort+0x240>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d013      	beq.n	80019ee <HAL_DMA_Abort+0xd6>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a64      	ldr	r2, [pc, #400]	@ (8001b5c <HAL_DMA_Abort+0x244>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d00e      	beq.n	80019ee <HAL_DMA_Abort+0xd6>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a62      	ldr	r2, [pc, #392]	@ (8001b60 <HAL_DMA_Abort+0x248>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d009      	beq.n	80019ee <HAL_DMA_Abort+0xd6>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a61      	ldr	r2, [pc, #388]	@ (8001b64 <HAL_DMA_Abort+0x24c>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d004      	beq.n	80019ee <HAL_DMA_Abort+0xd6>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a5f      	ldr	r2, [pc, #380]	@ (8001b68 <HAL_DMA_Abort+0x250>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d101      	bne.n	80019f2 <HAL_DMA_Abort+0xda>
 80019ee:	2301      	movs	r3, #1
 80019f0:	e000      	b.n	80019f4 <HAL_DMA_Abort+0xdc>
 80019f2:	2300      	movs	r3, #0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d013      	beq.n	8001a20 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 021e 	bic.w	r2, r2, #30
 8001a06:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	695a      	ldr	r2, [r3, #20]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a16:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	e00a      	b.n	8001a36 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 020e 	bic.w	r2, r2, #14
 8001a2e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a3c      	ldr	r2, [pc, #240]	@ (8001b2c <HAL_DMA_Abort+0x214>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d072      	beq.n	8001b26 <HAL_DMA_Abort+0x20e>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a3a      	ldr	r2, [pc, #232]	@ (8001b30 <HAL_DMA_Abort+0x218>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d06d      	beq.n	8001b26 <HAL_DMA_Abort+0x20e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a39      	ldr	r2, [pc, #228]	@ (8001b34 <HAL_DMA_Abort+0x21c>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d068      	beq.n	8001b26 <HAL_DMA_Abort+0x20e>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a37      	ldr	r2, [pc, #220]	@ (8001b38 <HAL_DMA_Abort+0x220>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d063      	beq.n	8001b26 <HAL_DMA_Abort+0x20e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a36      	ldr	r2, [pc, #216]	@ (8001b3c <HAL_DMA_Abort+0x224>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d05e      	beq.n	8001b26 <HAL_DMA_Abort+0x20e>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a34      	ldr	r2, [pc, #208]	@ (8001b40 <HAL_DMA_Abort+0x228>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d059      	beq.n	8001b26 <HAL_DMA_Abort+0x20e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a33      	ldr	r2, [pc, #204]	@ (8001b44 <HAL_DMA_Abort+0x22c>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d054      	beq.n	8001b26 <HAL_DMA_Abort+0x20e>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a31      	ldr	r2, [pc, #196]	@ (8001b48 <HAL_DMA_Abort+0x230>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d04f      	beq.n	8001b26 <HAL_DMA_Abort+0x20e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a30      	ldr	r2, [pc, #192]	@ (8001b4c <HAL_DMA_Abort+0x234>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d04a      	beq.n	8001b26 <HAL_DMA_Abort+0x20e>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a2e      	ldr	r2, [pc, #184]	@ (8001b50 <HAL_DMA_Abort+0x238>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d045      	beq.n	8001b26 <HAL_DMA_Abort+0x20e>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a2d      	ldr	r2, [pc, #180]	@ (8001b54 <HAL_DMA_Abort+0x23c>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d040      	beq.n	8001b26 <HAL_DMA_Abort+0x20e>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a2b      	ldr	r2, [pc, #172]	@ (8001b58 <HAL_DMA_Abort+0x240>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d03b      	beq.n	8001b26 <HAL_DMA_Abort+0x20e>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a2a      	ldr	r2, [pc, #168]	@ (8001b5c <HAL_DMA_Abort+0x244>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d036      	beq.n	8001b26 <HAL_DMA_Abort+0x20e>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a28      	ldr	r2, [pc, #160]	@ (8001b60 <HAL_DMA_Abort+0x248>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d031      	beq.n	8001b26 <HAL_DMA_Abort+0x20e>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a27      	ldr	r2, [pc, #156]	@ (8001b64 <HAL_DMA_Abort+0x24c>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d02c      	beq.n	8001b26 <HAL_DMA_Abort+0x20e>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a25      	ldr	r2, [pc, #148]	@ (8001b68 <HAL_DMA_Abort+0x250>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d027      	beq.n	8001b26 <HAL_DMA_Abort+0x20e>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a24      	ldr	r2, [pc, #144]	@ (8001b6c <HAL_DMA_Abort+0x254>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d022      	beq.n	8001b26 <HAL_DMA_Abort+0x20e>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a22      	ldr	r2, [pc, #136]	@ (8001b70 <HAL_DMA_Abort+0x258>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d01d      	beq.n	8001b26 <HAL_DMA_Abort+0x20e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a21      	ldr	r2, [pc, #132]	@ (8001b74 <HAL_DMA_Abort+0x25c>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d018      	beq.n	8001b26 <HAL_DMA_Abort+0x20e>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a1f      	ldr	r2, [pc, #124]	@ (8001b78 <HAL_DMA_Abort+0x260>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d013      	beq.n	8001b26 <HAL_DMA_Abort+0x20e>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a1e      	ldr	r2, [pc, #120]	@ (8001b7c <HAL_DMA_Abort+0x264>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d00e      	beq.n	8001b26 <HAL_DMA_Abort+0x20e>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a1c      	ldr	r2, [pc, #112]	@ (8001b80 <HAL_DMA_Abort+0x268>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d009      	beq.n	8001b26 <HAL_DMA_Abort+0x20e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a1b      	ldr	r2, [pc, #108]	@ (8001b84 <HAL_DMA_Abort+0x26c>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d004      	beq.n	8001b26 <HAL_DMA_Abort+0x20e>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a19      	ldr	r2, [pc, #100]	@ (8001b88 <HAL_DMA_Abort+0x270>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d132      	bne.n	8001b8c <HAL_DMA_Abort+0x274>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e031      	b.n	8001b8e <HAL_DMA_Abort+0x276>
 8001b2a:	bf00      	nop
 8001b2c:	40020010 	.word	0x40020010
 8001b30:	40020028 	.word	0x40020028
 8001b34:	40020040 	.word	0x40020040
 8001b38:	40020058 	.word	0x40020058
 8001b3c:	40020070 	.word	0x40020070
 8001b40:	40020088 	.word	0x40020088
 8001b44:	400200a0 	.word	0x400200a0
 8001b48:	400200b8 	.word	0x400200b8
 8001b4c:	40020410 	.word	0x40020410
 8001b50:	40020428 	.word	0x40020428
 8001b54:	40020440 	.word	0x40020440
 8001b58:	40020458 	.word	0x40020458
 8001b5c:	40020470 	.word	0x40020470
 8001b60:	40020488 	.word	0x40020488
 8001b64:	400204a0 	.word	0x400204a0
 8001b68:	400204b8 	.word	0x400204b8
 8001b6c:	58025408 	.word	0x58025408
 8001b70:	5802541c 	.word	0x5802541c
 8001b74:	58025430 	.word	0x58025430
 8001b78:	58025444 	.word	0x58025444
 8001b7c:	58025458 	.word	0x58025458
 8001b80:	5802546c 	.word	0x5802546c
 8001b84:	58025480 	.word	0x58025480
 8001b88:	58025494 	.word	0x58025494
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d007      	beq.n	8001ba2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ba0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a6d      	ldr	r2, [pc, #436]	@ (8001d5c <HAL_DMA_Abort+0x444>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d04a      	beq.n	8001c42 <HAL_DMA_Abort+0x32a>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a6b      	ldr	r2, [pc, #428]	@ (8001d60 <HAL_DMA_Abort+0x448>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d045      	beq.n	8001c42 <HAL_DMA_Abort+0x32a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a6a      	ldr	r2, [pc, #424]	@ (8001d64 <HAL_DMA_Abort+0x44c>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d040      	beq.n	8001c42 <HAL_DMA_Abort+0x32a>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a68      	ldr	r2, [pc, #416]	@ (8001d68 <HAL_DMA_Abort+0x450>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d03b      	beq.n	8001c42 <HAL_DMA_Abort+0x32a>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a67      	ldr	r2, [pc, #412]	@ (8001d6c <HAL_DMA_Abort+0x454>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d036      	beq.n	8001c42 <HAL_DMA_Abort+0x32a>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a65      	ldr	r2, [pc, #404]	@ (8001d70 <HAL_DMA_Abort+0x458>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d031      	beq.n	8001c42 <HAL_DMA_Abort+0x32a>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a64      	ldr	r2, [pc, #400]	@ (8001d74 <HAL_DMA_Abort+0x45c>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d02c      	beq.n	8001c42 <HAL_DMA_Abort+0x32a>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a62      	ldr	r2, [pc, #392]	@ (8001d78 <HAL_DMA_Abort+0x460>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d027      	beq.n	8001c42 <HAL_DMA_Abort+0x32a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a61      	ldr	r2, [pc, #388]	@ (8001d7c <HAL_DMA_Abort+0x464>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d022      	beq.n	8001c42 <HAL_DMA_Abort+0x32a>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a5f      	ldr	r2, [pc, #380]	@ (8001d80 <HAL_DMA_Abort+0x468>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d01d      	beq.n	8001c42 <HAL_DMA_Abort+0x32a>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a5e      	ldr	r2, [pc, #376]	@ (8001d84 <HAL_DMA_Abort+0x46c>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d018      	beq.n	8001c42 <HAL_DMA_Abort+0x32a>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a5c      	ldr	r2, [pc, #368]	@ (8001d88 <HAL_DMA_Abort+0x470>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d013      	beq.n	8001c42 <HAL_DMA_Abort+0x32a>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a5b      	ldr	r2, [pc, #364]	@ (8001d8c <HAL_DMA_Abort+0x474>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d00e      	beq.n	8001c42 <HAL_DMA_Abort+0x32a>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a59      	ldr	r2, [pc, #356]	@ (8001d90 <HAL_DMA_Abort+0x478>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d009      	beq.n	8001c42 <HAL_DMA_Abort+0x32a>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a58      	ldr	r2, [pc, #352]	@ (8001d94 <HAL_DMA_Abort+0x47c>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d004      	beq.n	8001c42 <HAL_DMA_Abort+0x32a>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a56      	ldr	r2, [pc, #344]	@ (8001d98 <HAL_DMA_Abort+0x480>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d108      	bne.n	8001c54 <HAL_DMA_Abort+0x33c>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 0201 	bic.w	r2, r2, #1
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	e007      	b.n	8001c64 <HAL_DMA_Abort+0x34c>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0201 	bic.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001c64:	e013      	b.n	8001c8e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c66:	f7ff fcaf 	bl	80015c8 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b05      	cmp	r3, #5
 8001c72:	d90c      	bls.n	8001c8e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2220      	movs	r2, #32
 8001c78:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e12d      	b.n	8001eea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1e5      	bne.n	8001c66 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a2f      	ldr	r2, [pc, #188]	@ (8001d5c <HAL_DMA_Abort+0x444>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d04a      	beq.n	8001d3a <HAL_DMA_Abort+0x422>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a2d      	ldr	r2, [pc, #180]	@ (8001d60 <HAL_DMA_Abort+0x448>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d045      	beq.n	8001d3a <HAL_DMA_Abort+0x422>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a2c      	ldr	r2, [pc, #176]	@ (8001d64 <HAL_DMA_Abort+0x44c>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d040      	beq.n	8001d3a <HAL_DMA_Abort+0x422>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a2a      	ldr	r2, [pc, #168]	@ (8001d68 <HAL_DMA_Abort+0x450>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d03b      	beq.n	8001d3a <HAL_DMA_Abort+0x422>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a29      	ldr	r2, [pc, #164]	@ (8001d6c <HAL_DMA_Abort+0x454>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d036      	beq.n	8001d3a <HAL_DMA_Abort+0x422>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a27      	ldr	r2, [pc, #156]	@ (8001d70 <HAL_DMA_Abort+0x458>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d031      	beq.n	8001d3a <HAL_DMA_Abort+0x422>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a26      	ldr	r2, [pc, #152]	@ (8001d74 <HAL_DMA_Abort+0x45c>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d02c      	beq.n	8001d3a <HAL_DMA_Abort+0x422>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a24      	ldr	r2, [pc, #144]	@ (8001d78 <HAL_DMA_Abort+0x460>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d027      	beq.n	8001d3a <HAL_DMA_Abort+0x422>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a23      	ldr	r2, [pc, #140]	@ (8001d7c <HAL_DMA_Abort+0x464>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d022      	beq.n	8001d3a <HAL_DMA_Abort+0x422>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a21      	ldr	r2, [pc, #132]	@ (8001d80 <HAL_DMA_Abort+0x468>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d01d      	beq.n	8001d3a <HAL_DMA_Abort+0x422>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a20      	ldr	r2, [pc, #128]	@ (8001d84 <HAL_DMA_Abort+0x46c>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d018      	beq.n	8001d3a <HAL_DMA_Abort+0x422>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a1e      	ldr	r2, [pc, #120]	@ (8001d88 <HAL_DMA_Abort+0x470>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d013      	beq.n	8001d3a <HAL_DMA_Abort+0x422>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a1d      	ldr	r2, [pc, #116]	@ (8001d8c <HAL_DMA_Abort+0x474>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d00e      	beq.n	8001d3a <HAL_DMA_Abort+0x422>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a1b      	ldr	r2, [pc, #108]	@ (8001d90 <HAL_DMA_Abort+0x478>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d009      	beq.n	8001d3a <HAL_DMA_Abort+0x422>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a1a      	ldr	r2, [pc, #104]	@ (8001d94 <HAL_DMA_Abort+0x47c>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d004      	beq.n	8001d3a <HAL_DMA_Abort+0x422>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a18      	ldr	r2, [pc, #96]	@ (8001d98 <HAL_DMA_Abort+0x480>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d101      	bne.n	8001d3e <HAL_DMA_Abort+0x426>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <HAL_DMA_Abort+0x428>
 8001d3e:	2300      	movs	r3, #0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d02b      	beq.n	8001d9c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d48:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d4e:	f003 031f 	and.w	r3, r3, #31
 8001d52:	223f      	movs	r2, #63	@ 0x3f
 8001d54:	409a      	lsls	r2, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	e02a      	b.n	8001db2 <HAL_DMA_Abort+0x49a>
 8001d5c:	40020010 	.word	0x40020010
 8001d60:	40020028 	.word	0x40020028
 8001d64:	40020040 	.word	0x40020040
 8001d68:	40020058 	.word	0x40020058
 8001d6c:	40020070 	.word	0x40020070
 8001d70:	40020088 	.word	0x40020088
 8001d74:	400200a0 	.word	0x400200a0
 8001d78:	400200b8 	.word	0x400200b8
 8001d7c:	40020410 	.word	0x40020410
 8001d80:	40020428 	.word	0x40020428
 8001d84:	40020440 	.word	0x40020440
 8001d88:	40020458 	.word	0x40020458
 8001d8c:	40020470 	.word	0x40020470
 8001d90:	40020488 	.word	0x40020488
 8001d94:	400204a0 	.word	0x400204a0
 8001d98:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da6:	f003 031f 	and.w	r3, r3, #31
 8001daa:	2201      	movs	r2, #1
 8001dac:	409a      	lsls	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a4f      	ldr	r2, [pc, #316]	@ (8001ef4 <HAL_DMA_Abort+0x5dc>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d072      	beq.n	8001ea2 <HAL_DMA_Abort+0x58a>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a4d      	ldr	r2, [pc, #308]	@ (8001ef8 <HAL_DMA_Abort+0x5e0>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d06d      	beq.n	8001ea2 <HAL_DMA_Abort+0x58a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a4c      	ldr	r2, [pc, #304]	@ (8001efc <HAL_DMA_Abort+0x5e4>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d068      	beq.n	8001ea2 <HAL_DMA_Abort+0x58a>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a4a      	ldr	r2, [pc, #296]	@ (8001f00 <HAL_DMA_Abort+0x5e8>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d063      	beq.n	8001ea2 <HAL_DMA_Abort+0x58a>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a49      	ldr	r2, [pc, #292]	@ (8001f04 <HAL_DMA_Abort+0x5ec>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d05e      	beq.n	8001ea2 <HAL_DMA_Abort+0x58a>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a47      	ldr	r2, [pc, #284]	@ (8001f08 <HAL_DMA_Abort+0x5f0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d059      	beq.n	8001ea2 <HAL_DMA_Abort+0x58a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a46      	ldr	r2, [pc, #280]	@ (8001f0c <HAL_DMA_Abort+0x5f4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d054      	beq.n	8001ea2 <HAL_DMA_Abort+0x58a>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a44      	ldr	r2, [pc, #272]	@ (8001f10 <HAL_DMA_Abort+0x5f8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d04f      	beq.n	8001ea2 <HAL_DMA_Abort+0x58a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a43      	ldr	r2, [pc, #268]	@ (8001f14 <HAL_DMA_Abort+0x5fc>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d04a      	beq.n	8001ea2 <HAL_DMA_Abort+0x58a>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a41      	ldr	r2, [pc, #260]	@ (8001f18 <HAL_DMA_Abort+0x600>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d045      	beq.n	8001ea2 <HAL_DMA_Abort+0x58a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a40      	ldr	r2, [pc, #256]	@ (8001f1c <HAL_DMA_Abort+0x604>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d040      	beq.n	8001ea2 <HAL_DMA_Abort+0x58a>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a3e      	ldr	r2, [pc, #248]	@ (8001f20 <HAL_DMA_Abort+0x608>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d03b      	beq.n	8001ea2 <HAL_DMA_Abort+0x58a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a3d      	ldr	r2, [pc, #244]	@ (8001f24 <HAL_DMA_Abort+0x60c>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d036      	beq.n	8001ea2 <HAL_DMA_Abort+0x58a>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a3b      	ldr	r2, [pc, #236]	@ (8001f28 <HAL_DMA_Abort+0x610>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d031      	beq.n	8001ea2 <HAL_DMA_Abort+0x58a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a3a      	ldr	r2, [pc, #232]	@ (8001f2c <HAL_DMA_Abort+0x614>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d02c      	beq.n	8001ea2 <HAL_DMA_Abort+0x58a>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a38      	ldr	r2, [pc, #224]	@ (8001f30 <HAL_DMA_Abort+0x618>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d027      	beq.n	8001ea2 <HAL_DMA_Abort+0x58a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a37      	ldr	r2, [pc, #220]	@ (8001f34 <HAL_DMA_Abort+0x61c>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d022      	beq.n	8001ea2 <HAL_DMA_Abort+0x58a>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a35      	ldr	r2, [pc, #212]	@ (8001f38 <HAL_DMA_Abort+0x620>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d01d      	beq.n	8001ea2 <HAL_DMA_Abort+0x58a>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a34      	ldr	r2, [pc, #208]	@ (8001f3c <HAL_DMA_Abort+0x624>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d018      	beq.n	8001ea2 <HAL_DMA_Abort+0x58a>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a32      	ldr	r2, [pc, #200]	@ (8001f40 <HAL_DMA_Abort+0x628>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d013      	beq.n	8001ea2 <HAL_DMA_Abort+0x58a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a31      	ldr	r2, [pc, #196]	@ (8001f44 <HAL_DMA_Abort+0x62c>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d00e      	beq.n	8001ea2 <HAL_DMA_Abort+0x58a>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a2f      	ldr	r2, [pc, #188]	@ (8001f48 <HAL_DMA_Abort+0x630>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d009      	beq.n	8001ea2 <HAL_DMA_Abort+0x58a>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a2e      	ldr	r2, [pc, #184]	@ (8001f4c <HAL_DMA_Abort+0x634>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d004      	beq.n	8001ea2 <HAL_DMA_Abort+0x58a>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a2c      	ldr	r2, [pc, #176]	@ (8001f50 <HAL_DMA_Abort+0x638>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d101      	bne.n	8001ea6 <HAL_DMA_Abort+0x58e>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <HAL_DMA_Abort+0x590>
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d015      	beq.n	8001ed8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001eb4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00c      	beq.n	8001ed8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ec8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ecc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001ed6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40020010 	.word	0x40020010
 8001ef8:	40020028 	.word	0x40020028
 8001efc:	40020040 	.word	0x40020040
 8001f00:	40020058 	.word	0x40020058
 8001f04:	40020070 	.word	0x40020070
 8001f08:	40020088 	.word	0x40020088
 8001f0c:	400200a0 	.word	0x400200a0
 8001f10:	400200b8 	.word	0x400200b8
 8001f14:	40020410 	.word	0x40020410
 8001f18:	40020428 	.word	0x40020428
 8001f1c:	40020440 	.word	0x40020440
 8001f20:	40020458 	.word	0x40020458
 8001f24:	40020470 	.word	0x40020470
 8001f28:	40020488 	.word	0x40020488
 8001f2c:	400204a0 	.word	0x400204a0
 8001f30:	400204b8 	.word	0x400204b8
 8001f34:	58025408 	.word	0x58025408
 8001f38:	5802541c 	.word	0x5802541c
 8001f3c:	58025430 	.word	0x58025430
 8001f40:	58025444 	.word	0x58025444
 8001f44:	58025458 	.word	0x58025458
 8001f48:	5802546c 	.word	0x5802546c
 8001f4c:	58025480 	.word	0x58025480
 8001f50:	58025494 	.word	0x58025494

08001f54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e237      	b.n	80023d6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d004      	beq.n	8001f7c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2280      	movs	r2, #128	@ 0x80
 8001f76:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e22c      	b.n	80023d6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a5c      	ldr	r2, [pc, #368]	@ (80020f4 <HAL_DMA_Abort_IT+0x1a0>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d04a      	beq.n	800201c <HAL_DMA_Abort_IT+0xc8>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a5b      	ldr	r2, [pc, #364]	@ (80020f8 <HAL_DMA_Abort_IT+0x1a4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d045      	beq.n	800201c <HAL_DMA_Abort_IT+0xc8>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a59      	ldr	r2, [pc, #356]	@ (80020fc <HAL_DMA_Abort_IT+0x1a8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d040      	beq.n	800201c <HAL_DMA_Abort_IT+0xc8>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a58      	ldr	r2, [pc, #352]	@ (8002100 <HAL_DMA_Abort_IT+0x1ac>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d03b      	beq.n	800201c <HAL_DMA_Abort_IT+0xc8>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a56      	ldr	r2, [pc, #344]	@ (8002104 <HAL_DMA_Abort_IT+0x1b0>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d036      	beq.n	800201c <HAL_DMA_Abort_IT+0xc8>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a55      	ldr	r2, [pc, #340]	@ (8002108 <HAL_DMA_Abort_IT+0x1b4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d031      	beq.n	800201c <HAL_DMA_Abort_IT+0xc8>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a53      	ldr	r2, [pc, #332]	@ (800210c <HAL_DMA_Abort_IT+0x1b8>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d02c      	beq.n	800201c <HAL_DMA_Abort_IT+0xc8>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a52      	ldr	r2, [pc, #328]	@ (8002110 <HAL_DMA_Abort_IT+0x1bc>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d027      	beq.n	800201c <HAL_DMA_Abort_IT+0xc8>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a50      	ldr	r2, [pc, #320]	@ (8002114 <HAL_DMA_Abort_IT+0x1c0>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d022      	beq.n	800201c <HAL_DMA_Abort_IT+0xc8>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a4f      	ldr	r2, [pc, #316]	@ (8002118 <HAL_DMA_Abort_IT+0x1c4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d01d      	beq.n	800201c <HAL_DMA_Abort_IT+0xc8>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a4d      	ldr	r2, [pc, #308]	@ (800211c <HAL_DMA_Abort_IT+0x1c8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d018      	beq.n	800201c <HAL_DMA_Abort_IT+0xc8>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a4c      	ldr	r2, [pc, #304]	@ (8002120 <HAL_DMA_Abort_IT+0x1cc>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d013      	beq.n	800201c <HAL_DMA_Abort_IT+0xc8>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a4a      	ldr	r2, [pc, #296]	@ (8002124 <HAL_DMA_Abort_IT+0x1d0>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d00e      	beq.n	800201c <HAL_DMA_Abort_IT+0xc8>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a49      	ldr	r2, [pc, #292]	@ (8002128 <HAL_DMA_Abort_IT+0x1d4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d009      	beq.n	800201c <HAL_DMA_Abort_IT+0xc8>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a47      	ldr	r2, [pc, #284]	@ (800212c <HAL_DMA_Abort_IT+0x1d8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d004      	beq.n	800201c <HAL_DMA_Abort_IT+0xc8>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a46      	ldr	r2, [pc, #280]	@ (8002130 <HAL_DMA_Abort_IT+0x1dc>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d101      	bne.n	8002020 <HAL_DMA_Abort_IT+0xcc>
 800201c:	2301      	movs	r3, #1
 800201e:	e000      	b.n	8002022 <HAL_DMA_Abort_IT+0xce>
 8002020:	2300      	movs	r3, #0
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 8086 	beq.w	8002134 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2204      	movs	r2, #4
 800202c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a2f      	ldr	r2, [pc, #188]	@ (80020f4 <HAL_DMA_Abort_IT+0x1a0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d04a      	beq.n	80020d0 <HAL_DMA_Abort_IT+0x17c>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a2e      	ldr	r2, [pc, #184]	@ (80020f8 <HAL_DMA_Abort_IT+0x1a4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d045      	beq.n	80020d0 <HAL_DMA_Abort_IT+0x17c>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a2c      	ldr	r2, [pc, #176]	@ (80020fc <HAL_DMA_Abort_IT+0x1a8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d040      	beq.n	80020d0 <HAL_DMA_Abort_IT+0x17c>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a2b      	ldr	r2, [pc, #172]	@ (8002100 <HAL_DMA_Abort_IT+0x1ac>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d03b      	beq.n	80020d0 <HAL_DMA_Abort_IT+0x17c>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a29      	ldr	r2, [pc, #164]	@ (8002104 <HAL_DMA_Abort_IT+0x1b0>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d036      	beq.n	80020d0 <HAL_DMA_Abort_IT+0x17c>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a28      	ldr	r2, [pc, #160]	@ (8002108 <HAL_DMA_Abort_IT+0x1b4>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d031      	beq.n	80020d0 <HAL_DMA_Abort_IT+0x17c>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a26      	ldr	r2, [pc, #152]	@ (800210c <HAL_DMA_Abort_IT+0x1b8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d02c      	beq.n	80020d0 <HAL_DMA_Abort_IT+0x17c>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a25      	ldr	r2, [pc, #148]	@ (8002110 <HAL_DMA_Abort_IT+0x1bc>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d027      	beq.n	80020d0 <HAL_DMA_Abort_IT+0x17c>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a23      	ldr	r2, [pc, #140]	@ (8002114 <HAL_DMA_Abort_IT+0x1c0>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d022      	beq.n	80020d0 <HAL_DMA_Abort_IT+0x17c>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a22      	ldr	r2, [pc, #136]	@ (8002118 <HAL_DMA_Abort_IT+0x1c4>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d01d      	beq.n	80020d0 <HAL_DMA_Abort_IT+0x17c>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a20      	ldr	r2, [pc, #128]	@ (800211c <HAL_DMA_Abort_IT+0x1c8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d018      	beq.n	80020d0 <HAL_DMA_Abort_IT+0x17c>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002120 <HAL_DMA_Abort_IT+0x1cc>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d013      	beq.n	80020d0 <HAL_DMA_Abort_IT+0x17c>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002124 <HAL_DMA_Abort_IT+0x1d0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d00e      	beq.n	80020d0 <HAL_DMA_Abort_IT+0x17c>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002128 <HAL_DMA_Abort_IT+0x1d4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d009      	beq.n	80020d0 <HAL_DMA_Abort_IT+0x17c>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a1a      	ldr	r2, [pc, #104]	@ (800212c <HAL_DMA_Abort_IT+0x1d8>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d004      	beq.n	80020d0 <HAL_DMA_Abort_IT+0x17c>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a19      	ldr	r2, [pc, #100]	@ (8002130 <HAL_DMA_Abort_IT+0x1dc>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d108      	bne.n	80020e2 <HAL_DMA_Abort_IT+0x18e>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0201 	bic.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	e178      	b.n	80023d4 <HAL_DMA_Abort_IT+0x480>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0201 	bic.w	r2, r2, #1
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	e16f      	b.n	80023d4 <HAL_DMA_Abort_IT+0x480>
 80020f4:	40020010 	.word	0x40020010
 80020f8:	40020028 	.word	0x40020028
 80020fc:	40020040 	.word	0x40020040
 8002100:	40020058 	.word	0x40020058
 8002104:	40020070 	.word	0x40020070
 8002108:	40020088 	.word	0x40020088
 800210c:	400200a0 	.word	0x400200a0
 8002110:	400200b8 	.word	0x400200b8
 8002114:	40020410 	.word	0x40020410
 8002118:	40020428 	.word	0x40020428
 800211c:	40020440 	.word	0x40020440
 8002120:	40020458 	.word	0x40020458
 8002124:	40020470 	.word	0x40020470
 8002128:	40020488 	.word	0x40020488
 800212c:	400204a0 	.word	0x400204a0
 8002130:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 020e 	bic.w	r2, r2, #14
 8002142:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a6c      	ldr	r2, [pc, #432]	@ (80022fc <HAL_DMA_Abort_IT+0x3a8>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d04a      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x290>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a6b      	ldr	r2, [pc, #428]	@ (8002300 <HAL_DMA_Abort_IT+0x3ac>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d045      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x290>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a69      	ldr	r2, [pc, #420]	@ (8002304 <HAL_DMA_Abort_IT+0x3b0>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d040      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x290>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a68      	ldr	r2, [pc, #416]	@ (8002308 <HAL_DMA_Abort_IT+0x3b4>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d03b      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x290>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a66      	ldr	r2, [pc, #408]	@ (800230c <HAL_DMA_Abort_IT+0x3b8>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d036      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x290>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a65      	ldr	r2, [pc, #404]	@ (8002310 <HAL_DMA_Abort_IT+0x3bc>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d031      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x290>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a63      	ldr	r2, [pc, #396]	@ (8002314 <HAL_DMA_Abort_IT+0x3c0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d02c      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x290>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a62      	ldr	r2, [pc, #392]	@ (8002318 <HAL_DMA_Abort_IT+0x3c4>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d027      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x290>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a60      	ldr	r2, [pc, #384]	@ (800231c <HAL_DMA_Abort_IT+0x3c8>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d022      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x290>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a5f      	ldr	r2, [pc, #380]	@ (8002320 <HAL_DMA_Abort_IT+0x3cc>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d01d      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x290>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a5d      	ldr	r2, [pc, #372]	@ (8002324 <HAL_DMA_Abort_IT+0x3d0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d018      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x290>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a5c      	ldr	r2, [pc, #368]	@ (8002328 <HAL_DMA_Abort_IT+0x3d4>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d013      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x290>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a5a      	ldr	r2, [pc, #360]	@ (800232c <HAL_DMA_Abort_IT+0x3d8>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00e      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x290>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a59      	ldr	r2, [pc, #356]	@ (8002330 <HAL_DMA_Abort_IT+0x3dc>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d009      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x290>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a57      	ldr	r2, [pc, #348]	@ (8002334 <HAL_DMA_Abort_IT+0x3e0>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d004      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x290>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a56      	ldr	r2, [pc, #344]	@ (8002338 <HAL_DMA_Abort_IT+0x3e4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d108      	bne.n	80021f6 <HAL_DMA_Abort_IT+0x2a2>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0201 	bic.w	r2, r2, #1
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	e007      	b.n	8002206 <HAL_DMA_Abort_IT+0x2b2>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0201 	bic.w	r2, r2, #1
 8002204:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a3c      	ldr	r2, [pc, #240]	@ (80022fc <HAL_DMA_Abort_IT+0x3a8>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d072      	beq.n	80022f6 <HAL_DMA_Abort_IT+0x3a2>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a3a      	ldr	r2, [pc, #232]	@ (8002300 <HAL_DMA_Abort_IT+0x3ac>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d06d      	beq.n	80022f6 <HAL_DMA_Abort_IT+0x3a2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a39      	ldr	r2, [pc, #228]	@ (8002304 <HAL_DMA_Abort_IT+0x3b0>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d068      	beq.n	80022f6 <HAL_DMA_Abort_IT+0x3a2>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a37      	ldr	r2, [pc, #220]	@ (8002308 <HAL_DMA_Abort_IT+0x3b4>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d063      	beq.n	80022f6 <HAL_DMA_Abort_IT+0x3a2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a36      	ldr	r2, [pc, #216]	@ (800230c <HAL_DMA_Abort_IT+0x3b8>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d05e      	beq.n	80022f6 <HAL_DMA_Abort_IT+0x3a2>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a34      	ldr	r2, [pc, #208]	@ (8002310 <HAL_DMA_Abort_IT+0x3bc>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d059      	beq.n	80022f6 <HAL_DMA_Abort_IT+0x3a2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a33      	ldr	r2, [pc, #204]	@ (8002314 <HAL_DMA_Abort_IT+0x3c0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d054      	beq.n	80022f6 <HAL_DMA_Abort_IT+0x3a2>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a31      	ldr	r2, [pc, #196]	@ (8002318 <HAL_DMA_Abort_IT+0x3c4>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d04f      	beq.n	80022f6 <HAL_DMA_Abort_IT+0x3a2>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a30      	ldr	r2, [pc, #192]	@ (800231c <HAL_DMA_Abort_IT+0x3c8>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d04a      	beq.n	80022f6 <HAL_DMA_Abort_IT+0x3a2>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a2e      	ldr	r2, [pc, #184]	@ (8002320 <HAL_DMA_Abort_IT+0x3cc>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d045      	beq.n	80022f6 <HAL_DMA_Abort_IT+0x3a2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a2d      	ldr	r2, [pc, #180]	@ (8002324 <HAL_DMA_Abort_IT+0x3d0>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d040      	beq.n	80022f6 <HAL_DMA_Abort_IT+0x3a2>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a2b      	ldr	r2, [pc, #172]	@ (8002328 <HAL_DMA_Abort_IT+0x3d4>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d03b      	beq.n	80022f6 <HAL_DMA_Abort_IT+0x3a2>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a2a      	ldr	r2, [pc, #168]	@ (800232c <HAL_DMA_Abort_IT+0x3d8>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d036      	beq.n	80022f6 <HAL_DMA_Abort_IT+0x3a2>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a28      	ldr	r2, [pc, #160]	@ (8002330 <HAL_DMA_Abort_IT+0x3dc>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d031      	beq.n	80022f6 <HAL_DMA_Abort_IT+0x3a2>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a27      	ldr	r2, [pc, #156]	@ (8002334 <HAL_DMA_Abort_IT+0x3e0>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d02c      	beq.n	80022f6 <HAL_DMA_Abort_IT+0x3a2>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a25      	ldr	r2, [pc, #148]	@ (8002338 <HAL_DMA_Abort_IT+0x3e4>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d027      	beq.n	80022f6 <HAL_DMA_Abort_IT+0x3a2>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a24      	ldr	r2, [pc, #144]	@ (800233c <HAL_DMA_Abort_IT+0x3e8>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d022      	beq.n	80022f6 <HAL_DMA_Abort_IT+0x3a2>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a22      	ldr	r2, [pc, #136]	@ (8002340 <HAL_DMA_Abort_IT+0x3ec>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d01d      	beq.n	80022f6 <HAL_DMA_Abort_IT+0x3a2>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a21      	ldr	r2, [pc, #132]	@ (8002344 <HAL_DMA_Abort_IT+0x3f0>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d018      	beq.n	80022f6 <HAL_DMA_Abort_IT+0x3a2>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002348 <HAL_DMA_Abort_IT+0x3f4>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d013      	beq.n	80022f6 <HAL_DMA_Abort_IT+0x3a2>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a1e      	ldr	r2, [pc, #120]	@ (800234c <HAL_DMA_Abort_IT+0x3f8>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d00e      	beq.n	80022f6 <HAL_DMA_Abort_IT+0x3a2>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002350 <HAL_DMA_Abort_IT+0x3fc>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d009      	beq.n	80022f6 <HAL_DMA_Abort_IT+0x3a2>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002354 <HAL_DMA_Abort_IT+0x400>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d004      	beq.n	80022f6 <HAL_DMA_Abort_IT+0x3a2>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a19      	ldr	r2, [pc, #100]	@ (8002358 <HAL_DMA_Abort_IT+0x404>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d132      	bne.n	800235c <HAL_DMA_Abort_IT+0x408>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e031      	b.n	800235e <HAL_DMA_Abort_IT+0x40a>
 80022fa:	bf00      	nop
 80022fc:	40020010 	.word	0x40020010
 8002300:	40020028 	.word	0x40020028
 8002304:	40020040 	.word	0x40020040
 8002308:	40020058 	.word	0x40020058
 800230c:	40020070 	.word	0x40020070
 8002310:	40020088 	.word	0x40020088
 8002314:	400200a0 	.word	0x400200a0
 8002318:	400200b8 	.word	0x400200b8
 800231c:	40020410 	.word	0x40020410
 8002320:	40020428 	.word	0x40020428
 8002324:	40020440 	.word	0x40020440
 8002328:	40020458 	.word	0x40020458
 800232c:	40020470 	.word	0x40020470
 8002330:	40020488 	.word	0x40020488
 8002334:	400204a0 	.word	0x400204a0
 8002338:	400204b8 	.word	0x400204b8
 800233c:	58025408 	.word	0x58025408
 8002340:	5802541c 	.word	0x5802541c
 8002344:	58025430 	.word	0x58025430
 8002348:	58025444 	.word	0x58025444
 800234c:	58025458 	.word	0x58025458
 8002350:	5802546c 	.word	0x5802546c
 8002354:	58025480 	.word	0x58025480
 8002358:	58025494 	.word	0x58025494
 800235c:	2300      	movs	r3, #0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d028      	beq.n	80023b4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800236c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002370:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002376:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800237c:	f003 031f 	and.w	r3, r3, #31
 8002380:	2201      	movs	r2, #1
 8002382:	409a      	lsls	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002390:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00c      	beq.n	80023b4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023a8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80023b2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop

080023e0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e0e3      	b.n	80025ba <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d106      	bne.n	800240a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2223      	movs	r2, #35	@ 0x23
 8002400:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f006 ff9f 	bl	8009348 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240a:	4b6e      	ldr	r3, [pc, #440]	@ (80025c4 <HAL_ETH_Init+0x1e4>)
 800240c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002410:	4a6c      	ldr	r2, [pc, #432]	@ (80025c4 <HAL_ETH_Init+0x1e4>)
 8002412:	f043 0302 	orr.w	r3, r3, #2
 8002416:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800241a:	4b6a      	ldr	r3, [pc, #424]	@ (80025c4 <HAL_ETH_Init+0x1e4>)
 800241c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	7a1b      	ldrb	r3, [r3, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d103      	bne.n	8002438 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002430:	2000      	movs	r0, #0
 8002432:	f7ff f905 	bl	8001640 <HAL_SYSCFG_ETHInterfaceSelect>
 8002436:	e003      	b.n	8002440 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002438:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800243c:	f7ff f900 	bl	8001640 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002440:	4b61      	ldr	r3, [pc, #388]	@ (80025c8 <HAL_ETH_Init+0x1e8>)
 8002442:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800245a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800245c:	f7ff f8b4 	bl	80015c8 <HAL_GetTick>
 8002460:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002462:	e011      	b.n	8002488 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002464:	f7ff f8b0 	bl	80015c8 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002472:	d909      	bls.n	8002488 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2204      	movs	r2, #4
 8002478:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	22e0      	movs	r2, #224	@ 0xe0
 8002480:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e098      	b.n	80025ba <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1e4      	bne.n	8002464 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 fdb4 	bl	8003008 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80024a0:	f002 fcf6 	bl	8004e90 <HAL_RCC_GetHCLKFreq>
 80024a4:	4603      	mov	r3, r0
 80024a6:	4a49      	ldr	r2, [pc, #292]	@ (80025cc <HAL_ETH_Init+0x1ec>)
 80024a8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ac:	0c9a      	lsrs	r2, r3, #18
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	3a01      	subs	r2, #1
 80024b4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 ff97 	bl	80033ec <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024c6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80024ca:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6812      	ldr	r2, [r2, #0]
 80024d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80024d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024da:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d009      	beq.n	80024fe <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	22e0      	movs	r2, #224	@ 0xe0
 80024f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e05d      	b.n	80025ba <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002506:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800250a:	4b31      	ldr	r3, [pc, #196]	@ (80025d0 <HAL_ETH_Init+0x1f0>)
 800250c:	4013      	ands	r3, r2
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6952      	ldr	r2, [r2, #20]
 8002512:	0051      	lsls	r1, r2, #1
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	430b      	orrs	r3, r1
 800251a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800251e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 ffff 	bl	8003526 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f001 f845 	bl	80035b8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	3305      	adds	r3, #5
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	021a      	lsls	r2, r3, #8
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	3304      	adds	r3, #4
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	4619      	mov	r1, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	3303      	adds	r3, #3
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	061a      	lsls	r2, r3, #24
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	3302      	adds	r3, #2
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	041b      	lsls	r3, r3, #16
 8002560:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	3301      	adds	r3, #1
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800256c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800257a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800257c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	4b11      	ldr	r3, [pc, #68]	@ (80025d4 <HAL_ETH_Init+0x1f4>)
 800258e:	430b      	orrs	r3, r1
 8002590:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4b0d      	ldr	r3, [pc, #52]	@ (80025d8 <HAL_ETH_Init+0x1f8>)
 80025a2:	430b      	orrs	r3, r1
 80025a4:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2210      	movs	r2, #16
 80025b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	58024400 	.word	0x58024400
 80025c8:	58000400 	.word	0x58000400
 80025cc:	431bde83 	.word	0x431bde83
 80025d0:	ffff8001 	.word	0xffff8001
 80025d4:	0c020060 	.word	0x0c020060
 80025d8:	0c20c000 	.word	0x0c20c000

080025dc <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025ea:	2b10      	cmp	r3, #16
 80025ec:	d153      	bne.n	8002696 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2223      	movs	r2, #35	@ 0x23
 80025f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2204      	movs	r2, #4
 80025fa:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f9f3 	bl	80029e8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 0202 	orr.w	r2, r2, #2
 8002610:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f042 0201 	orr.w	r2, r2, #1
 8002620:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800263e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800264e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800265a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6812      	ldr	r2, [r2, #0]
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800266a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002676:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8002682:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002686:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2223      	movs	r2, #35	@ 0x23
 800268e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	e000      	b.n	8002698 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
  }
}
 8002698:	4618      	mov	r0, r3
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026ae:	2b23      	cmp	r3, #35	@ 0x23
 80026b0:	d13f      	bne.n	8002732 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2223      	movs	r2, #35	@ 0x23
 80026b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026c2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	f023 0301 	bic.w	r3, r3, #1
 80026ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026d2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026de:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6812      	ldr	r2, [r2, #0]
 80026e6:	f023 0301 	bic.w	r3, r3, #1
 80026ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026ee:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0201 	bic.w	r2, r2, #1
 8002700:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0201 	orr.w	r2, r2, #1
 8002712:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0202 	bic.w	r2, r2, #2
 8002724:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2210      	movs	r2, #16
 800272a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	e000      	b.n	8002734 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
  }
}
 8002734:	4618      	mov	r0, r3
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d109      	bne.n	8002766 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002758:	f043 0201 	orr.w	r2, r3, #1
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e07f      	b.n	8002866 <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800276c:	2b23      	cmp	r3, #35	@ 0x23
 800276e:	d179      	bne.n	8002864 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002770:	2200      	movs	r2, #0
 8002772:	68b9      	ldr	r1, [r7, #8]
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 ff7d 	bl	8003674 <ETH_Prepare_Tx_Descriptors>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d009      	beq.n	8002794 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002786:	f043 0202 	orr.w	r2, r3, #2
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e068      	b.n	8002866 <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8002794:	f3bf 8f4f 	dsb	sy
}
 8002798:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	3206      	adds	r2, #6
 80027a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	d904      	bls.n	80027c4 <HAL_ETH_Transmit+0x84>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027be:	1f1a      	subs	r2, r3, #4
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	3106      	adds	r1, #6
 80027d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80027d4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027d8:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    tickstart = HAL_GetTick();
 80027dc:	f7fe fef4 	bl	80015c8 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80027e2:	e039      	b.n	8002858 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027ec:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80027f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d012      	beq.n	800281e <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027fe:	f043 0208 	orr.w	r2, r3, #8
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002810:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e023      	b.n	8002866 <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002824:	d018      	beq.n	8002858 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002826:	f7fe fecf 	bl	80015c8 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	429a      	cmp	r2, r3
 8002834:	d302      	bcc.n	800283c <HAL_ETH_Transmit+0xfc>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10d      	bne.n	8002858 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002842:	f043 0204 	orr.w	r2, r3, #4
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8002852:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e006      	b.n	8002866 <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	dbc1      	blt.n	80027e4 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	e000      	b.n	8002866 <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
  }
}
 8002866:	4618      	mov	r0, r3
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b088      	sub	sp, #32
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800288c:	f043 0201 	orr.w	r2, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e0a2      	b.n	80029e0 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028a0:	2b23      	cmp	r3, #35	@ 0x23
 80028a2:	d001      	beq.n	80028a8 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e09b      	b.n	80029e0 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ac:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69fa      	ldr	r2, [r7, #28]
 80028b2:	3212      	adds	r2, #18
 80028b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b8:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028be:	f1c3 0304 	rsb	r3, r3, #4
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80028c4:	e064      	b.n	8002990 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d007      	beq.n	80028e2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d103      	bne.n	80028f6 <HAL_ETH_ReadData+0x88>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d03a      	beq.n	800296c <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d005      	beq.n	800290e <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d005      	beq.n	8002936 <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002932:	2301      	movs	r3, #1
 8002934:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002946:	461a      	mov	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	b29b      	uxth	r3, r3
 800294c:	f006 fe48 	bl	80095e0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	441a      	add	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	2200      	movs	r2, #0
 800296a:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	3301      	adds	r3, #1
 8002970:	61fb      	str	r3, [r7, #28]
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	2b03      	cmp	r3, #3
 8002976:	d902      	bls.n	800297e <HAL_ETH_ReadData+0x110>
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	3b04      	subs	r3, #4
 800297c:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69fa      	ldr	r2, [r7, #28]
 8002982:	3212      	adds	r2, #18
 8002984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002988:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	3301      	adds	r3, #1
 800298e:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8002994:	2b00      	cmp	r3, #0
 8002996:	db06      	blt.n	80029a6 <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	429a      	cmp	r2, r3
 800299e:	d202      	bcs.n	80029a6 <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 80029a0:	7cfb      	ldrb	r3, [r7, #19]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d08f      	beq.n	80028c6 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	441a      	add	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f814 	bl	80029e8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69fa      	ldr	r2, [r7, #28]
 80029c4:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80029c6:	7cfb      	ldrb	r3, [r7, #19]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d108      	bne.n	80029de <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80029da:	2300      	movs	r3, #0
 80029dc:	e000      	b.n	80029e0 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3720      	adds	r7, #32
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80029f4:	2301      	movs	r3, #1
 80029f6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029fc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69fa      	ldr	r2, [r7, #28]
 8002a02:	3212      	adds	r2, #18
 8002a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a08:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a0e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002a10:	e038      	b.n	8002a84 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d112      	bne.n	8002a40 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002a1a:	f107 0308 	add.w	r3, r7, #8
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f006 fdae 	bl	8009580 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d102      	bne.n	8002a30 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	74fb      	strb	r3, [r7, #19]
 8002a2e:	e007      	b.n	8002a40 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	461a      	mov	r2, r3
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8002a40:	7cfb      	ldrb	r3, [r7, #19]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d01e      	beq.n	8002a84 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d004      	beq.n	8002a58 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	e003      	b.n	8002a60 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8002a5e:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	3301      	adds	r3, #1
 8002a64:	61fb      	str	r3, [r7, #28]
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	d902      	bls.n	8002a72 <ETH_UpdateDescriptor+0x8a>
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	3b04      	subs	r3, #4
 8002a70:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69fa      	ldr	r2, [r7, #28]
 8002a76:	3212      	adds	r2, #18
 8002a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a7c:	617b      	str	r3, [r7, #20]
      desccount--;
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	3b01      	subs	r3, #1
 8002a82:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <ETH_UpdateDescriptor+0xa8>
 8002a8a:	7cfb      	ldrb	r3, [r7, #19]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1c0      	bne.n	8002a12 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d01b      	beq.n	8002ad2 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002aa4:	f3bf 8f5f 	dmb	sy
}
 8002aa8:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6919      	ldr	r1, [r3, #16]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	4413      	add	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	18ca      	adds	r2, r1, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ac2:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69fa      	ldr	r2, [r7, #28]
 8002aca:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002ad2:	bf00      	nop
 8002ad4:	3720      	adds	r7, #32
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b086      	sub	sp, #24
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	60f8      	str	r0, [r7, #12]
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	607a      	str	r2, [r7, #4]
 8002ae6:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e03e      	b.n	8002b7a <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002b04:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	055b      	lsls	r3, r3, #21
 8002b10:	4313      	orrs	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	041b      	lsls	r3, r3, #16
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f043 030c 	orr.w	r3, r3, #12
 8002b28:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8002b3c:	f7fe fd44 	bl	80015c8 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002b42:	e009      	b.n	8002b58 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002b44:	f7fe fd40 	bl	80015c8 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b52:	d901      	bls.n	8002b58 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e010      	b.n	8002b7a <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1ed      	bne.n	8002b44 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	461a      	mov	r2, r3
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
 8002b90:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e03c      	b.n	8002c20 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002bae:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	055b      	lsls	r3, r3, #21
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	041b      	lsls	r3, r3, #16
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f023 030c 	bic.w	r3, r3, #12
 8002bd2:	f043 0304 	orr.w	r3, r3, #4
 8002bd6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	4b10      	ldr	r3, [pc, #64]	@ (8002c28 <HAL_ETH_WritePHYRegister+0xa4>)
 8002be6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002bea:	4a0f      	ldr	r2, [pc, #60]	@ (8002c28 <HAL_ETH_WritePHYRegister+0xa4>)
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8002bf2:	f7fe fce9 	bl	80015c8 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002bf8:	e009      	b.n	8002c0e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002bfa:	f7fe fce5 	bl	80015c8 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c08:	d901      	bls.n	8002c0e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e008      	b.n	8002c20 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1ed      	bne.n	8002bfa <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40028000 	.word	0x40028000

08002c2c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e1c3      	b.n	8002fc8 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 020c 	and.w	r2, r3, #12
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	bf14      	ite	ne
 8002c5c:	2301      	movne	r3, #1
 8002c5e:	2300      	moveq	r3, #0
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	461a      	mov	r2, r3
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	bf0c      	ite	eq
 8002c86:	2301      	moveq	r3, #1
 8002c88:	2300      	movne	r3, #0
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	bf14      	ite	ne
 8002ca2:	2301      	movne	r3, #1
 8002ca4:	2300      	moveq	r3, #0
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bf0c      	ite	eq
 8002cbc:	2301      	moveq	r3, #1
 8002cbe:	2300      	movne	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002cce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	bf14      	ite	ne
 8002cd6:	2301      	movne	r3, #1
 8002cd8:	2300      	moveq	r3, #0
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	bf14      	ite	ne
 8002cf0:	2301      	movne	r3, #1
 8002cf2:	2300      	moveq	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	bf14      	ite	ne
 8002d26:	2301      	movne	r3, #1
 8002d28:	2300      	moveq	r3, #0
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	bf0c      	ite	eq
 8002d40:	2301      	moveq	r3, #1
 8002d42:	2300      	movne	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	461a      	mov	r2, r3
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	bf0c      	ite	eq
 8002d5a:	2301      	moveq	r3, #1
 8002d5c:	2300      	movne	r3, #0
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	461a      	mov	r2, r3
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	bf14      	ite	ne
 8002d74:	2301      	movne	r3, #1
 8002d76:	2300      	moveq	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	bf14      	ite	ne
 8002d8e:	2301      	movne	r3, #1
 8002d90:	2300      	moveq	r3, #0
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	461a      	mov	r2, r3
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	bf14      	ite	ne
 8002da8:	2301      	movne	r3, #1
 8002daa:	2300      	moveq	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	461a      	mov	r2, r3
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002dba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	bf14      	ite	ne
 8002dc2:	2301      	movne	r3, #1
 8002dc4:	2300      	moveq	r3, #0
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	bf14      	ite	ne
 8002dea:	2301      	movne	r3, #1
 8002dec:	2300      	moveq	r3, #0
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	461a      	mov	r2, r3
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	bf0c      	ite	eq
 8002e20:	2301      	moveq	r3, #1
 8002e22:	2300      	movne	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	461a      	mov	r2, r3
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	bf14      	ite	ne
 8002e3c:	2301      	movne	r3, #1
 8002e3e:	2300      	moveq	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	461a      	mov	r2, r3
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002e50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	bf14      	ite	ne
 8002e58:	2301      	movne	r3, #1
 8002e5a:	2300      	moveq	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	bf14      	ite	ne
 8002e74:	2301      	movne	r3, #1
 8002e76:	2300      	moveq	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	0e5b      	lsrs	r3, r3, #25
 8002e8a:	f003 021f 	and.w	r2, r3, #31
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	bf14      	ite	ne
 8002ea0:	2301      	movne	r3, #1
 8002ea2:	2300      	moveq	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f003 020f 	and.w	r2, r3, #15
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	bf14      	ite	ne
 8002eca:	2301      	movne	r3, #1
 8002ecc:	2300      	moveq	r3, #0
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	bf0c      	ite	eq
 8002ee6:	2301      	moveq	r3, #1
 8002ee8:	2300      	movne	r3, #0
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	461a      	mov	r2, r3
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002efa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f08:	0c1b      	lsrs	r3, r3, #16
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	bf14      	ite	ne
 8002f20:	2301      	movne	r3, #1
 8002f22:	2300      	moveq	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	461a      	mov	r2, r3
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f36:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	bf14      	ite	ne
 8002f3e:	2301      	movne	r3, #1
 8002f40:	2300      	moveq	r3, #0
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002f54:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002f64:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	bf14      	ite	ne
 8002f7c:	2301      	movne	r3, #1
 8002f7e:	2300      	moveq	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	bf14      	ite	ne
 8002f9a:	2301      	movne	r3, #1
 8002f9c:	2300      	moveq	r3, #0
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	bf0c      	ite	eq
 8002fb8:	2301      	moveq	r3, #1
 8002fba:	2300      	movne	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e00b      	b.n	8003000 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fee:	2b10      	cmp	r3, #16
 8002ff0:	d105      	bne.n	8002ffe <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002ff2:	6839      	ldr	r1, [r7, #0]
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f857 	bl	80030a8 <ETH_SetMACConfig>

    return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	e000      	b.n	8003000 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
  }
}
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003018:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003020:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003022:	f001 ff35 	bl	8004e90 <HAL_RCC_GetHCLKFreq>
 8003026:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4a1a      	ldr	r2, [pc, #104]	@ (8003094 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d804      	bhi.n	800303a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	e022      	b.n	8003080 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	4a16      	ldr	r2, [pc, #88]	@ (8003098 <HAL_ETH_SetMDIOClockRange+0x90>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d204      	bcs.n	800304c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	e019      	b.n	8003080 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	4a13      	ldr	r2, [pc, #76]	@ (800309c <HAL_ETH_SetMDIOClockRange+0x94>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d915      	bls.n	8003080 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4a12      	ldr	r2, [pc, #72]	@ (80030a0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d804      	bhi.n	8003066 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	e00c      	b.n	8003080 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	4a0e      	ldr	r2, [pc, #56]	@ (80030a4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d804      	bhi.n	8003078 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	e003      	b.n	8003080 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800307e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800308a:	bf00      	nop
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	02160ebf 	.word	0x02160ebf
 8003098:	03938700 	.word	0x03938700
 800309c:	05f5e0ff 	.word	0x05f5e0ff
 80030a0:	08f0d17f 	.word	0x08f0d17f
 80030a4:	0ee6b27f 	.word	0x0ee6b27f

080030a8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80030ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	791b      	ldrb	r3, [r3, #4]
 80030c0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80030c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	7b1b      	ldrb	r3, [r3, #12]
 80030c8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80030ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	7b5b      	ldrb	r3, [r3, #13]
 80030d0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80030d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	7b9b      	ldrb	r3, [r3, #14]
 80030d8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80030da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	7bdb      	ldrb	r3, [r3, #15]
 80030e0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80030e2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	7c12      	ldrb	r2, [r2, #16]
 80030e8:	2a00      	cmp	r2, #0
 80030ea:	d102      	bne.n	80030f2 <ETH_SetMACConfig+0x4a>
 80030ec:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80030f0:	e000      	b.n	80030f4 <ETH_SetMACConfig+0x4c>
 80030f2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80030f4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	7c52      	ldrb	r2, [r2, #17]
 80030fa:	2a00      	cmp	r2, #0
 80030fc:	d102      	bne.n	8003104 <ETH_SetMACConfig+0x5c>
 80030fe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003102:	e000      	b.n	8003106 <ETH_SetMACConfig+0x5e>
 8003104:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003106:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	7c9b      	ldrb	r3, [r3, #18]
 800310c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800310e:	431a      	orrs	r2, r3
               macconf->Speed |
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003114:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800311a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	7f1b      	ldrb	r3, [r3, #28]
 8003120:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003122:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	7f5b      	ldrb	r3, [r3, #29]
 8003128:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800312a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	7f92      	ldrb	r2, [r2, #30]
 8003130:	2a00      	cmp	r2, #0
 8003132:	d102      	bne.n	800313a <ETH_SetMACConfig+0x92>
 8003134:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003138:	e000      	b.n	800313c <ETH_SetMACConfig+0x94>
 800313a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800313c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	7fdb      	ldrb	r3, [r3, #31]
 8003142:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003144:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	f892 2020 	ldrb.w	r2, [r2, #32]
 800314c:	2a00      	cmp	r2, #0
 800314e:	d102      	bne.n	8003156 <ETH_SetMACConfig+0xae>
 8003150:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003154:	e000      	b.n	8003158 <ETH_SetMACConfig+0xb0>
 8003156:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003158:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800315e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003166:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003168:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800316e:	4313      	orrs	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	4b56      	ldr	r3, [pc, #344]	@ (80032d4 <ETH_SetMACConfig+0x22c>)
 800317a:	4013      	ands	r3, r2
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6812      	ldr	r2, [r2, #0]
 8003180:	68f9      	ldr	r1, [r7, #12]
 8003182:	430b      	orrs	r3, r1
 8003184:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800318a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003192:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003194:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800319c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800319e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80031a6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80031a8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80031b0:	2a00      	cmp	r2, #0
 80031b2:	d102      	bne.n	80031ba <ETH_SetMACConfig+0x112>
 80031b4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80031b8:	e000      	b.n	80031bc <ETH_SetMACConfig+0x114>
 80031ba:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80031bc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	4b42      	ldr	r3, [pc, #264]	@ (80032d8 <ETH_SetMACConfig+0x230>)
 80031ce:	4013      	ands	r3, r2
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	68f9      	ldr	r1, [r7, #12]
 80031d6:	430b      	orrs	r3, r1
 80031d8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031e0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	4b3a      	ldr	r3, [pc, #232]	@ (80032dc <ETH_SetMACConfig+0x234>)
 80031f2:	4013      	ands	r3, r2
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	68f9      	ldr	r1, [r7, #12]
 80031fa:	430b      	orrs	r3, r1
 80031fc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003204:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800320a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003212:	2a00      	cmp	r2, #0
 8003214:	d101      	bne.n	800321a <ETH_SetMACConfig+0x172>
 8003216:	2280      	movs	r2, #128	@ 0x80
 8003218:	e000      	b.n	800321c <ETH_SetMACConfig+0x174>
 800321a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800321c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003222:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003224:	4313      	orrs	r3, r2
 8003226:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800322e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8003232:	4013      	ands	r3, r2
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6812      	ldr	r2, [r2, #0]
 8003238:	68f9      	ldr	r1, [r7, #12]
 800323a:	430b      	orrs	r3, r1
 800323c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8003244:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800324c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800324e:	4313      	orrs	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800325a:	f023 0103 	bic.w	r1, r3, #3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	430a      	orrs	r2, r1
 8003266:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8003272:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800328e:	2a00      	cmp	r2, #0
 8003290:	d101      	bne.n	8003296 <ETH_SetMACConfig+0x1ee>
 8003292:	2240      	movs	r2, #64	@ 0x40
 8003294:	e000      	b.n	8003298 <ETH_SetMACConfig+0x1f0>
 8003296:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003298:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80032a0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80032a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80032aa:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80032b8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80032c8:	bf00      	nop
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	00048083 	.word	0x00048083
 80032d8:	c0f88000 	.word	0xc0f88000
 80032dc:	fffffef0 	.word	0xfffffef0

080032e0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	4b38      	ldr	r3, [pc, #224]	@ (80033d8 <ETH_SetDMAConfig+0xf8>)
 80032f6:	4013      	ands	r3, r2
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	6811      	ldr	r1, [r2, #0]
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6812      	ldr	r2, [r2, #0]
 8003300:	430b      	orrs	r3, r1
 8003302:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003306:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	791b      	ldrb	r3, [r3, #4]
 800330c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003312:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	7b1b      	ldrb	r3, [r3, #12]
 8003318:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	4b2c      	ldr	r3, [pc, #176]	@ (80033dc <ETH_SetDMAConfig+0xfc>)
 800332a:	4013      	ands	r3, r2
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	68f9      	ldr	r1, [r7, #12]
 8003332:	430b      	orrs	r3, r1
 8003334:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003338:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	7b5b      	ldrb	r3, [r3, #13]
 800333e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003344:	4313      	orrs	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003350:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8003354:	4b22      	ldr	r3, [pc, #136]	@ (80033e0 <ETH_SetDMAConfig+0x100>)
 8003356:	4013      	ands	r3, r2
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6812      	ldr	r2, [r2, #0]
 800335c:	68f9      	ldr	r1, [r7, #12]
 800335e:	430b      	orrs	r3, r1
 8003360:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003364:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	7d1b      	ldrb	r3, [r3, #20]
 8003370:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003372:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	7f5b      	ldrb	r3, [r3, #29]
 8003378:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800337a:	4313      	orrs	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003386:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800338a:	4b16      	ldr	r3, [pc, #88]	@ (80033e4 <ETH_SetDMAConfig+0x104>)
 800338c:	4013      	ands	r3, r2
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	68f9      	ldr	r1, [r7, #12]
 8003394:	430b      	orrs	r3, r1
 8003396:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800339a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	7f1b      	ldrb	r3, [r3, #28]
 80033a2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033b4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80033b8:	4b0b      	ldr	r3, [pc, #44]	@ (80033e8 <ETH_SetDMAConfig+0x108>)
 80033ba:	4013      	ands	r3, r2
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6812      	ldr	r2, [r2, #0]
 80033c0:	68f9      	ldr	r1, [r7, #12]
 80033c2:	430b      	orrs	r3, r1
 80033c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80033c8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80033cc:	bf00      	nop
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	ffff87fd 	.word	0xffff87fd
 80033dc:	ffff2ffe 	.word	0xffff2ffe
 80033e0:	fffec000 	.word	0xfffec000
 80033e4:	ffc0efef 	.word	0xffc0efef
 80033e8:	7fc0ffff 	.word	0x7fc0ffff

080033ec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b0a4      	sub	sp, #144	@ 0x90
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80033f4:	2301      	movs	r3, #1
 80033f6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80033fa:	2300      	movs	r3, #0
 80033fc:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80033fe:	2300      	movs	r3, #0
 8003400:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003404:	2300      	movs	r3, #0
 8003406:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800340a:	2301      	movs	r3, #1
 800340c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003410:	2301      	movs	r3, #1
 8003412:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003416:	2301      	movs	r3, #1
 8003418:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800341c:	2300      	movs	r3, #0
 800341e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003422:	2301      	movs	r3, #1
 8003424:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003428:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800342c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800342e:	2300      	movs	r3, #0
 8003430:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8003434:	2300      	movs	r3, #0
 8003436:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003438:	2300      	movs	r3, #0
 800343a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800343e:	2300      	movs	r3, #0
 8003440:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8003444:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8003448:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800344a:	2300      	movs	r3, #0
 800344c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003450:	2300      	movs	r3, #0
 8003452:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8003454:	2301      	movs	r3, #1
 8003456:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800345a:	2300      	movs	r3, #0
 800345c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003460:	2300      	movs	r3, #0
 8003462:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003466:	2300      	movs	r3, #0
 8003468:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800346a:	2300      	movs	r3, #0
 800346c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800346e:	2300      	movs	r3, #0
 8003470:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003472:	2300      	movs	r3, #0
 8003474:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003478:	2300      	movs	r3, #0
 800347a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800347e:	2301      	movs	r3, #1
 8003480:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003484:	2320      	movs	r3, #32
 8003486:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800348a:	2301      	movs	r3, #1
 800348c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003490:	2300      	movs	r3, #0
 8003492:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003496:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800349a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800349c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80034a0:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80034a2:	2300      	movs	r3, #0
 80034a4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80034a8:	2302      	movs	r3, #2
 80034aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80034ae:	2300      	movs	r3, #0
 80034b0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80034b4:	2300      	movs	r3, #0
 80034b6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80034ba:	2300      	movs	r3, #0
 80034bc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80034c0:	2301      	movs	r3, #1
 80034c2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80034c6:	2300      	movs	r3, #0
 80034c8:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80034ca:	2301      	movs	r3, #1
 80034cc:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80034d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034d4:	4619      	mov	r1, r3
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7ff fde6 	bl	80030a8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80034dc:	2301      	movs	r3, #1
 80034de:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80034e0:	2301      	movs	r3, #1
 80034e2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80034e4:	2300      	movs	r3, #0
 80034e6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80034e8:	2300      	movs	r3, #0
 80034ea:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80034ee:	2300      	movs	r3, #0
 80034f0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80034f2:	2300      	movs	r3, #0
 80034f4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80034f6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80034fa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80034fc:	2300      	movs	r3, #0
 80034fe:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003500:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003504:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003506:	2300      	movs	r3, #0
 8003508:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800350c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8003510:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003512:	f107 0308 	add.w	r3, r7, #8
 8003516:	4619      	mov	r1, r3
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff fee1 	bl	80032e0 <ETH_SetDMAConfig>
}
 800351e:	bf00      	nop
 8003520:	3790      	adds	r7, #144	@ 0x90
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003526:	b480      	push	{r7}
 8003528:	b085      	sub	sp, #20
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	e01d      	b.n	8003570 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68d9      	ldr	r1, [r3, #12]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4613      	mov	r3, r2
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	4413      	add	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	440b      	add	r3, r1
 8003544:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2200      	movs	r2, #0
 8003550:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2200      	movs	r2, #0
 8003556:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2200      	movs	r2, #0
 800355c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800355e:	68b9      	ldr	r1, [r7, #8]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	3206      	adds	r2, #6
 8003566:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	3301      	adds	r3, #1
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2b03      	cmp	r3, #3
 8003574:	d9de      	bls.n	8003534 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003584:	461a      	mov	r2, r3
 8003586:	2303      	movs	r3, #3
 8003588:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003598:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035a8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80035ac:	bf00      	nop
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80035c0:	2300      	movs	r3, #0
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	e023      	b.n	800360e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6919      	ldr	r1, [r3, #16]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	4613      	mov	r3, r2
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	4413      	add	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	440b      	add	r3, r1
 80035d6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2200      	movs	r2, #0
 80035e2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	2200      	movs	r2, #0
 80035e8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2200      	movs	r2, #0
 80035ee:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2200      	movs	r2, #0
 80035f4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2200      	movs	r2, #0
 80035fa:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80035fc:	68b9      	ldr	r1, [r7, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	3212      	adds	r2, #18
 8003604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	3301      	adds	r3, #1
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b03      	cmp	r3, #3
 8003612:	d9d8      	bls.n	80035c6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800363a:	461a      	mov	r2, r3
 800363c:	2303      	movs	r3, #3
 800363e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691a      	ldr	r2, [r3, #16]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800364e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003662:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8003666:	bf00      	nop
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
	...

08003674 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003674:	b480      	push	{r7}
 8003676:	b091      	sub	sp, #68	@ 0x44
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	3318      	adds	r3, #24
 8003684:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800368c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003698:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800369a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800369e:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80036a6:	2300      	movs	r3, #0
 80036a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80036aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80036b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80036b6:	d007      	beq.n	80036c8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80036b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036bc:	3304      	adds	r3, #4
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80036c8:	2302      	movs	r3, #2
 80036ca:	e266      	b.n	8003b9a <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d044      	beq.n	8003762 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80036d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036da:	68da      	ldr	r2, [r3, #12]
 80036dc:	4b75      	ldr	r3, [pc, #468]	@ (80038b4 <ETH_Prepare_Tx_Descriptors+0x240>)
 80036de:	4013      	ands	r3, r2
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80036e4:	431a      	orrs	r2, r3
 80036e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e8:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80036ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80036f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f4:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003704:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	d027      	beq.n	8003762 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8003712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	b29a      	uxth	r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800371c:	041b      	lsls	r3, r3, #16
 800371e:	431a      	orrs	r2, r3
 8003720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003722:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800372c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373c:	431a      	orrs	r2, r3
 800373e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003740:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003750:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003760:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0310 	and.w	r3, r3, #16
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00e      	beq.n	800378c <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800376e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003770:	689a      	ldr	r2, [r3, #8]
 8003772:	4b51      	ldr	r3, [pc, #324]	@ (80038b8 <ETH_Prepare_Tx_Descriptors+0x244>)
 8003774:	4013      	ands	r3, r2
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	6992      	ldr	r2, [r2, #24]
 800377a:	431a      	orrs	r2, r3
 800377c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800377e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8003780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8003788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800378a:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	d105      	bne.n	80037a4 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0310 	and.w	r3, r3, #16
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d036      	beq.n	8003812 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80037a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80037ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ae:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80037b0:	f3bf 8f5f 	dmb	sy
}
 80037b4:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80037b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80037be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c0:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80037c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037c4:	3301      	adds	r3, #1
 80037c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	d902      	bls.n	80037d4 <ETH_Prepare_Tx_Descriptors+0x160>
 80037ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037d0:	3b04      	subs	r3, #4
 80037d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80037d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80037d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037dc:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 80037de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037e0:	3301      	adds	r3, #1
 80037e2:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80037e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80037ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037f0:	d10f      	bne.n	8003812 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80037f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f4:	6a3a      	ldr	r2, [r7, #32]
 80037f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037fa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80037fc:	f3bf 8f5f 	dmb	sy
}
 8003800:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800380a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800380c:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800380e:	2302      	movs	r3, #2
 8003810:	e1c3      	b.n	8003b9a <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8003812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003814:	3301      	adds	r3, #1
 8003816:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	461a      	mov	r2, r3
 800381e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003820:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	4b24      	ldr	r3, [pc, #144]	@ (80038b8 <ETH_Prepare_Tx_Descriptors+0x244>)
 8003828:	4013      	ands	r3, r2
 800382a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800382c:	6852      	ldr	r2, [r2, #4]
 800382e:	431a      	orrs	r2, r3
 8003830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003832:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8003834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d012      	beq.n	8003862 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 800383c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	461a      	mov	r2, r3
 8003848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800384c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	4b1a      	ldr	r3, [pc, #104]	@ (80038bc <ETH_Prepare_Tx_Descriptors+0x248>)
 8003852:	4013      	ands	r3, r2
 8003854:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003856:	6852      	ldr	r2, [r2, #4]
 8003858:	0412      	lsls	r2, r2, #16
 800385a:	431a      	orrs	r2, r3
 800385c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800385e:	609a      	str	r2, [r3, #8]
 8003860:	e008      	b.n	8003874 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003864:	2200      	movs	r2, #0
 8003866:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	4b13      	ldr	r3, [pc, #76]	@ (80038bc <ETH_Prepare_Tx_Descriptors+0x248>)
 800386e:	4013      	ands	r3, r2
 8003870:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003872:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0310 	and.w	r3, r3, #16
 800387c:	2b00      	cmp	r3, #0
 800387e:	d021      	beq.n	80038c4 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	04db      	lsls	r3, r3, #19
 800388e:	431a      	orrs	r2, r3
 8003890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003892:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	4b09      	ldr	r3, [pc, #36]	@ (80038c0 <ETH_Prepare_Tx_Descriptors+0x24c>)
 800389a:	4013      	ands	r3, r2
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	69d2      	ldr	r2, [r2, #28]
 80038a0:	431a      	orrs	r2, r3
 80038a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a4:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80038a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80038ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b0:	60da      	str	r2, [r3, #12]
 80038b2:	e02e      	b.n	8003912 <ETH_Prepare_Tx_Descriptors+0x29e>
 80038b4:	ffff0000 	.word	0xffff0000
 80038b8:	ffffc000 	.word	0xffffc000
 80038bc:	c000ffff 	.word	0xc000ffff
 80038c0:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80038c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	4b7b      	ldr	r3, [pc, #492]	@ (8003ab8 <ETH_Prepare_Tx_Descriptors+0x444>)
 80038ca:	4013      	ands	r3, r2
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	6852      	ldr	r2, [r2, #4]
 80038d0:	431a      	orrs	r2, r3
 80038d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d4:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d008      	beq.n	80038f4 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80038e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f2:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0320 	and.w	r3, r3, #32
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d008      	beq.n	8003912 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	431a      	orrs	r2, r3
 800390e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003910:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0304 	and.w	r3, r3, #4
 800391a:	2b00      	cmp	r3, #0
 800391c:	d008      	beq.n	8003930 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800391e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800392a:	431a      	orrs	r2, r3
 800392c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800393c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003946:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003948:	f3bf 8f5f 	dmb	sy
}
 800394c:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800394e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003958:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 80da 	beq.w	8003b1c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8003968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	431a      	orrs	r2, r3
 8003976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003978:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800397a:	e0cf      	b.n	8003b1c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800397c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003986:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800398a:	3301      	adds	r3, #1
 800398c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800398e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003990:	2b03      	cmp	r3, #3
 8003992:	d902      	bls.n	800399a <ETH_Prepare_Tx_Descriptors+0x326>
 8003994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003996:	3b04      	subs	r3, #4
 8003998:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800399a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800399e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80039a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80039ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ae:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80039b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80039b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039bc:	d007      	beq.n	80039ce <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80039be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039c2:	3304      	adds	r3, #4
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d029      	beq.n	8003a22 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80039d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80039d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039da:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80039dc:	2300      	movs	r3, #0
 80039de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039e0:	e019      	b.n	8003a16 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 80039e2:	f3bf 8f5f 	dmb	sy
}
 80039e6:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80039e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80039f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f2:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80039f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039f6:	3301      	adds	r3, #1
 80039f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d902      	bls.n	8003a06 <ETH_Prepare_Tx_Descriptors+0x392>
 8003a00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a02:	3b04      	subs	r3, #4
 8003a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a0e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a12:	3301      	adds	r3, #1
 8003a14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d3e1      	bcc.n	80039e2 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e0bb      	b.n	8003b9a <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 8003a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a24:	3301      	adds	r3, #1
 8003a26:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	461a      	mov	r2, r3
 8003a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a36:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8003abc <ETH_Prepare_Tx_Descriptors+0x448>)
 8003a3e:	4013      	ands	r3, r2
 8003a40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a42:	6852      	ldr	r2, [r2, #4]
 8003a44:	431a      	orrs	r2, r3
 8003a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a48:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8003a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d012      	beq.n	8003a78 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8003a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a60:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	4b16      	ldr	r3, [pc, #88]	@ (8003ac0 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a6c:	6852      	ldr	r2, [r2, #4]
 8003a6e:	0412      	lsls	r2, r2, #16
 8003a70:	431a      	orrs	r2, r3
 8003a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a74:	609a      	str	r2, [r3, #8]
 8003a76:	e008      	b.n	8003a8a <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac0 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8003a84:	4013      	ands	r3, r2
 8003a86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a88:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0310 	and.w	r3, r3, #16
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d018      	beq.n	8003ac8 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac4 <ETH_Prepare_Tx_Descriptors+0x450>)
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	69d2      	ldr	r2, [r2, #28]
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa6:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ab2:	60da      	str	r2, [r3, #12]
 8003ab4:	e020      	b.n	8003af8 <ETH_Prepare_Tx_Descriptors+0x484>
 8003ab6:	bf00      	nop
 8003ab8:	ffff8000 	.word	0xffff8000
 8003abc:	ffffc000 	.word	0xffffc000
 8003ac0:	c000ffff 	.word	0xc000ffff
 8003ac4:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aca:	68da      	ldr	r2, [r3, #12]
 8003acc:	4b36      	ldr	r3, [pc, #216]	@ (8003ba8 <ETH_Prepare_Tx_Descriptors+0x534>)
 8003ace:	4013      	ands	r3, r2
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	6852      	ldr	r2, [r2, #4]
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad8:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d008      	beq.n	8003af8 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af6:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8003af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003afa:	3301      	adds	r3, #1
 8003afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003afe:	f3bf 8f5f 	dmb	sy
}
 8003b02:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0e:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1a:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f47f af2b 	bne.w	800397c <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d006      	beq.n	8003b3a <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b36:	609a      	str	r2, [r3, #8]
 8003b38:	e005      	b.n	8003b46 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b44:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b50:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b56:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	440b      	add	r3, r1
 8003b60:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b66:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b68:	f3ef 8310 	mrs	r3, PRIMASK
 8003b6c:	613b      	str	r3, [r7, #16]
  return(result);
 8003b6e:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003b70:	61fb      	str	r3, [r7, #28]
 8003b72:	2301      	movs	r3, #1
 8003b74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f383 8810 	msr	PRIMASK, r3
}
 8003b7c:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b84:	4413      	add	r3, r2
 8003b86:	1c5a      	adds	r2, r3, #1
 8003b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	f383 8810 	msr	PRIMASK, r3
}
 8003b96:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3744      	adds	r7, #68	@ 0x44
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	ffff8000 	.word	0xffff8000

08003bac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b089      	sub	sp, #36	@ 0x24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003bba:	4b89      	ldr	r3, [pc, #548]	@ (8003de0 <HAL_GPIO_Init+0x234>)
 8003bbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003bbe:	e194      	b.n	8003eea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bcc:	4013      	ands	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 8186 	beq.w	8003ee4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d005      	beq.n	8003bf0 <HAL_GPIO_Init+0x44>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 0303 	and.w	r3, r3, #3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d130      	bne.n	8003c52 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	2203      	movs	r2, #3
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	43db      	mvns	r3, r3
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	4013      	ands	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c26:	2201      	movs	r2, #1
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4013      	ands	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	091b      	lsrs	r3, r3, #4
 8003c3c:	f003 0201 	and.w	r2, r3, #1
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	fa02 f303 	lsl.w	r3, r2, r3
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	2b03      	cmp	r3, #3
 8003c5c:	d017      	beq.n	8003c8e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	2203      	movs	r2, #3
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4013      	ands	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d123      	bne.n	8003ce2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	08da      	lsrs	r2, r3, #3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3208      	adds	r2, #8
 8003ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	220f      	movs	r2, #15
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	08da      	lsrs	r2, r3, #3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3208      	adds	r2, #8
 8003cdc:	69b9      	ldr	r1, [r7, #24]
 8003cde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	2203      	movs	r2, #3
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f003 0203 	and.w	r2, r3, #3
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 80e0 	beq.w	8003ee4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d24:	4b2f      	ldr	r3, [pc, #188]	@ (8003de4 <HAL_GPIO_Init+0x238>)
 8003d26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003d2a:	4a2e      	ldr	r2, [pc, #184]	@ (8003de4 <HAL_GPIO_Init+0x238>)
 8003d2c:	f043 0302 	orr.w	r3, r3, #2
 8003d30:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003d34:	4b2b      	ldr	r3, [pc, #172]	@ (8003de4 <HAL_GPIO_Init+0x238>)
 8003d36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d42:	4a29      	ldr	r2, [pc, #164]	@ (8003de8 <HAL_GPIO_Init+0x23c>)
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	089b      	lsrs	r3, r3, #2
 8003d48:	3302      	adds	r3, #2
 8003d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	220f      	movs	r2, #15
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	4013      	ands	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a20      	ldr	r2, [pc, #128]	@ (8003dec <HAL_GPIO_Init+0x240>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d052      	beq.n	8003e14 <HAL_GPIO_Init+0x268>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a1f      	ldr	r2, [pc, #124]	@ (8003df0 <HAL_GPIO_Init+0x244>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d031      	beq.n	8003dda <HAL_GPIO_Init+0x22e>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a1e      	ldr	r2, [pc, #120]	@ (8003df4 <HAL_GPIO_Init+0x248>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d02b      	beq.n	8003dd6 <HAL_GPIO_Init+0x22a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a1d      	ldr	r2, [pc, #116]	@ (8003df8 <HAL_GPIO_Init+0x24c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d025      	beq.n	8003dd2 <HAL_GPIO_Init+0x226>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a1c      	ldr	r2, [pc, #112]	@ (8003dfc <HAL_GPIO_Init+0x250>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d01f      	beq.n	8003dce <HAL_GPIO_Init+0x222>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a1b      	ldr	r2, [pc, #108]	@ (8003e00 <HAL_GPIO_Init+0x254>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d019      	beq.n	8003dca <HAL_GPIO_Init+0x21e>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a1a      	ldr	r2, [pc, #104]	@ (8003e04 <HAL_GPIO_Init+0x258>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d013      	beq.n	8003dc6 <HAL_GPIO_Init+0x21a>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a19      	ldr	r2, [pc, #100]	@ (8003e08 <HAL_GPIO_Init+0x25c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00d      	beq.n	8003dc2 <HAL_GPIO_Init+0x216>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a18      	ldr	r2, [pc, #96]	@ (8003e0c <HAL_GPIO_Init+0x260>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d007      	beq.n	8003dbe <HAL_GPIO_Init+0x212>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a17      	ldr	r2, [pc, #92]	@ (8003e10 <HAL_GPIO_Init+0x264>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d101      	bne.n	8003dba <HAL_GPIO_Init+0x20e>
 8003db6:	2309      	movs	r3, #9
 8003db8:	e02d      	b.n	8003e16 <HAL_GPIO_Init+0x26a>
 8003dba:	230a      	movs	r3, #10
 8003dbc:	e02b      	b.n	8003e16 <HAL_GPIO_Init+0x26a>
 8003dbe:	2308      	movs	r3, #8
 8003dc0:	e029      	b.n	8003e16 <HAL_GPIO_Init+0x26a>
 8003dc2:	2307      	movs	r3, #7
 8003dc4:	e027      	b.n	8003e16 <HAL_GPIO_Init+0x26a>
 8003dc6:	2306      	movs	r3, #6
 8003dc8:	e025      	b.n	8003e16 <HAL_GPIO_Init+0x26a>
 8003dca:	2305      	movs	r3, #5
 8003dcc:	e023      	b.n	8003e16 <HAL_GPIO_Init+0x26a>
 8003dce:	2304      	movs	r3, #4
 8003dd0:	e021      	b.n	8003e16 <HAL_GPIO_Init+0x26a>
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e01f      	b.n	8003e16 <HAL_GPIO_Init+0x26a>
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	e01d      	b.n	8003e16 <HAL_GPIO_Init+0x26a>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e01b      	b.n	8003e16 <HAL_GPIO_Init+0x26a>
 8003dde:	bf00      	nop
 8003de0:	58000080 	.word	0x58000080
 8003de4:	58024400 	.word	0x58024400
 8003de8:	58000400 	.word	0x58000400
 8003dec:	58020000 	.word	0x58020000
 8003df0:	58020400 	.word	0x58020400
 8003df4:	58020800 	.word	0x58020800
 8003df8:	58020c00 	.word	0x58020c00
 8003dfc:	58021000 	.word	0x58021000
 8003e00:	58021400 	.word	0x58021400
 8003e04:	58021800 	.word	0x58021800
 8003e08:	58021c00 	.word	0x58021c00
 8003e0c:	58022000 	.word	0x58022000
 8003e10:	58022400 	.word	0x58022400
 8003e14:	2300      	movs	r3, #0
 8003e16:	69fa      	ldr	r2, [r7, #28]
 8003e18:	f002 0203 	and.w	r2, r2, #3
 8003e1c:	0092      	lsls	r2, r2, #2
 8003e1e:	4093      	lsls	r3, r2
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e26:	4938      	ldr	r1, [pc, #224]	@ (8003f08 <HAL_GPIO_Init+0x35c>)
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	089b      	lsrs	r3, r3, #2
 8003e2c:	3302      	adds	r3, #2
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	4013      	ands	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003e5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003e62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	4013      	ands	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003e88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f47f ae63 	bne.w	8003bc0 <HAL_GPIO_Init+0x14>
  }
}
 8003efa:	bf00      	nop
 8003efc:	bf00      	nop
 8003efe:	3724      	adds	r7, #36	@ 0x24
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	58000400 	.word	0x58000400

08003f0c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003f14:	4b19      	ldr	r3, [pc, #100]	@ (8003f7c <HAL_PWREx_ConfigSupply+0x70>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d00a      	beq.n	8003f36 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003f20:	4b16      	ldr	r3, [pc, #88]	@ (8003f7c <HAL_PWREx_ConfigSupply+0x70>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d001      	beq.n	8003f32 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e01f      	b.n	8003f72 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	e01d      	b.n	8003f72 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003f36:	4b11      	ldr	r3, [pc, #68]	@ (8003f7c <HAL_PWREx_ConfigSupply+0x70>)
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f023 0207 	bic.w	r2, r3, #7
 8003f3e:	490f      	ldr	r1, [pc, #60]	@ (8003f7c <HAL_PWREx_ConfigSupply+0x70>)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003f46:	f7fd fb3f 	bl	80015c8 <HAL_GetTick>
 8003f4a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f4c:	e009      	b.n	8003f62 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003f4e:	f7fd fb3b 	bl	80015c8 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f5c:	d901      	bls.n	8003f62 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e007      	b.n	8003f72 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f62:	4b06      	ldr	r3, [pc, #24]	@ (8003f7c <HAL_PWREx_ConfigSupply+0x70>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f6e:	d1ee      	bne.n	8003f4e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	58024800 	.word	0x58024800

08003f80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08c      	sub	sp, #48	@ 0x30
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d102      	bne.n	8003f94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	f000 bc48 	b.w	8004824 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 8088 	beq.w	80040b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fa2:	4b99      	ldr	r3, [pc, #612]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fac:	4b96      	ldr	r3, [pc, #600]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 8003fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb4:	2b10      	cmp	r3, #16
 8003fb6:	d007      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x48>
 8003fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fba:	2b18      	cmp	r3, #24
 8003fbc:	d111      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x62>
 8003fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc0:	f003 0303 	and.w	r3, r3, #3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d10c      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc8:	4b8f      	ldr	r3, [pc, #572]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d06d      	beq.n	80040b0 <HAL_RCC_OscConfig+0x130>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d169      	bne.n	80040b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	f000 bc21 	b.w	8004824 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fea:	d106      	bne.n	8003ffa <HAL_RCC_OscConfig+0x7a>
 8003fec:	4b86      	ldr	r3, [pc, #536]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a85      	ldr	r2, [pc, #532]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 8003ff2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	e02e      	b.n	8004058 <HAL_RCC_OscConfig+0xd8>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10c      	bne.n	800401c <HAL_RCC_OscConfig+0x9c>
 8004002:	4b81      	ldr	r3, [pc, #516]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a80      	ldr	r2, [pc, #512]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 8004008:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	4b7e      	ldr	r3, [pc, #504]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a7d      	ldr	r2, [pc, #500]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 8004014:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	e01d      	b.n	8004058 <HAL_RCC_OscConfig+0xd8>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004024:	d10c      	bne.n	8004040 <HAL_RCC_OscConfig+0xc0>
 8004026:	4b78      	ldr	r3, [pc, #480]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a77      	ldr	r2, [pc, #476]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 800402c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004030:	6013      	str	r3, [r2, #0]
 8004032:	4b75      	ldr	r3, [pc, #468]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a74      	ldr	r2, [pc, #464]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 8004038:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800403c:	6013      	str	r3, [r2, #0]
 800403e:	e00b      	b.n	8004058 <HAL_RCC_OscConfig+0xd8>
 8004040:	4b71      	ldr	r3, [pc, #452]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a70      	ldr	r2, [pc, #448]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 8004046:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800404a:	6013      	str	r3, [r2, #0]
 800404c:	4b6e      	ldr	r3, [pc, #440]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a6d      	ldr	r2, [pc, #436]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 8004052:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004056:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d013      	beq.n	8004088 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004060:	f7fd fab2 	bl	80015c8 <HAL_GetTick>
 8004064:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004068:	f7fd faae 	bl	80015c8 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b64      	cmp	r3, #100	@ 0x64
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e3d4      	b.n	8004824 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800407a:	4b63      	ldr	r3, [pc, #396]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0f0      	beq.n	8004068 <HAL_RCC_OscConfig+0xe8>
 8004086:	e014      	b.n	80040b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004088:	f7fd fa9e 	bl	80015c8 <HAL_GetTick>
 800408c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004090:	f7fd fa9a 	bl	80015c8 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b64      	cmp	r3, #100	@ 0x64
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e3c0      	b.n	8004824 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80040a2:	4b59      	ldr	r3, [pc, #356]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f0      	bne.n	8004090 <HAL_RCC_OscConfig+0x110>
 80040ae:	e000      	b.n	80040b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 80ca 	beq.w	8004254 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040c0:	4b51      	ldr	r3, [pc, #324]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040c8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040ca:	4b4f      	ldr	r3, [pc, #316]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 80040cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ce:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80040d0:	6a3b      	ldr	r3, [r7, #32]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d007      	beq.n	80040e6 <HAL_RCC_OscConfig+0x166>
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	2b18      	cmp	r3, #24
 80040da:	d156      	bne.n	800418a <HAL_RCC_OscConfig+0x20a>
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d151      	bne.n	800418a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040e6:	4b48      	ldr	r3, [pc, #288]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d005      	beq.n	80040fe <HAL_RCC_OscConfig+0x17e>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e392      	b.n	8004824 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80040fe:	4b42      	ldr	r3, [pc, #264]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f023 0219 	bic.w	r2, r3, #25
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	493f      	ldr	r1, [pc, #252]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 800410c:	4313      	orrs	r3, r2
 800410e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004110:	f7fd fa5a 	bl	80015c8 <HAL_GetTick>
 8004114:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004118:	f7fd fa56 	bl	80015c8 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e37c      	b.n	8004824 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800412a:	4b37      	ldr	r3, [pc, #220]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0f0      	beq.n	8004118 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004136:	f7fd fa77 	bl	8001628 <HAL_GetREVID>
 800413a:	4603      	mov	r3, r0
 800413c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004140:	4293      	cmp	r3, r2
 8004142:	d817      	bhi.n	8004174 <HAL_RCC_OscConfig+0x1f4>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	2b40      	cmp	r3, #64	@ 0x40
 800414a:	d108      	bne.n	800415e <HAL_RCC_OscConfig+0x1de>
 800414c:	4b2e      	ldr	r3, [pc, #184]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004154:	4a2c      	ldr	r2, [pc, #176]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 8004156:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800415a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800415c:	e07a      	b.n	8004254 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800415e:	4b2a      	ldr	r3, [pc, #168]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	031b      	lsls	r3, r3, #12
 800416c:	4926      	ldr	r1, [pc, #152]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 800416e:	4313      	orrs	r3, r2
 8004170:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004172:	e06f      	b.n	8004254 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004174:	4b24      	ldr	r3, [pc, #144]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	061b      	lsls	r3, r3, #24
 8004182:	4921      	ldr	r1, [pc, #132]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 8004184:	4313      	orrs	r3, r2
 8004186:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004188:	e064      	b.n	8004254 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d047      	beq.n	8004222 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004192:	4b1d      	ldr	r3, [pc, #116]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f023 0219 	bic.w	r2, r3, #25
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	491a      	ldr	r1, [pc, #104]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a4:	f7fd fa10 	bl	80015c8 <HAL_GetTick>
 80041a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ac:	f7fd fa0c 	bl	80015c8 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e332      	b.n	8004824 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041be:	4b12      	ldr	r3, [pc, #72]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0304 	and.w	r3, r3, #4
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0f0      	beq.n	80041ac <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ca:	f7fd fa2d 	bl	8001628 <HAL_GetREVID>
 80041ce:	4603      	mov	r3, r0
 80041d0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d819      	bhi.n	800420c <HAL_RCC_OscConfig+0x28c>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	2b40      	cmp	r3, #64	@ 0x40
 80041de:	d108      	bne.n	80041f2 <HAL_RCC_OscConfig+0x272>
 80041e0:	4b09      	ldr	r3, [pc, #36]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80041e8:	4a07      	ldr	r2, [pc, #28]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 80041ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041ee:	6053      	str	r3, [r2, #4]
 80041f0:	e030      	b.n	8004254 <HAL_RCC_OscConfig+0x2d4>
 80041f2:	4b05      	ldr	r3, [pc, #20]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	031b      	lsls	r3, r3, #12
 8004200:	4901      	ldr	r1, [pc, #4]	@ (8004208 <HAL_RCC_OscConfig+0x288>)
 8004202:	4313      	orrs	r3, r2
 8004204:	604b      	str	r3, [r1, #4]
 8004206:	e025      	b.n	8004254 <HAL_RCC_OscConfig+0x2d4>
 8004208:	58024400 	.word	0x58024400
 800420c:	4b9a      	ldr	r3, [pc, #616]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	061b      	lsls	r3, r3, #24
 800421a:	4997      	ldr	r1, [pc, #604]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 800421c:	4313      	orrs	r3, r2
 800421e:	604b      	str	r3, [r1, #4]
 8004220:	e018      	b.n	8004254 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004222:	4b95      	ldr	r3, [pc, #596]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a94      	ldr	r2, [pc, #592]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 8004228:	f023 0301 	bic.w	r3, r3, #1
 800422c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422e:	f7fd f9cb 	bl	80015c8 <HAL_GetTick>
 8004232:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004236:	f7fd f9c7 	bl	80015c8 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e2ed      	b.n	8004824 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004248:	4b8b      	ldr	r3, [pc, #556]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1f0      	bne.n	8004236 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0310 	and.w	r3, r3, #16
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 80a9 	beq.w	80043b4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004262:	4b85      	ldr	r3, [pc, #532]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800426a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800426c:	4b82      	ldr	r3, [pc, #520]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 800426e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004270:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	2b08      	cmp	r3, #8
 8004276:	d007      	beq.n	8004288 <HAL_RCC_OscConfig+0x308>
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	2b18      	cmp	r3, #24
 800427c:	d13a      	bne.n	80042f4 <HAL_RCC_OscConfig+0x374>
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f003 0303 	and.w	r3, r3, #3
 8004284:	2b01      	cmp	r3, #1
 8004286:	d135      	bne.n	80042f4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004288:	4b7b      	ldr	r3, [pc, #492]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004290:	2b00      	cmp	r3, #0
 8004292:	d005      	beq.n	80042a0 <HAL_RCC_OscConfig+0x320>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	2b80      	cmp	r3, #128	@ 0x80
 800429a:	d001      	beq.n	80042a0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e2c1      	b.n	8004824 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80042a0:	f7fd f9c2 	bl	8001628 <HAL_GetREVID>
 80042a4:	4603      	mov	r3, r0
 80042a6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d817      	bhi.n	80042de <HAL_RCC_OscConfig+0x35e>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	2b20      	cmp	r3, #32
 80042b4:	d108      	bne.n	80042c8 <HAL_RCC_OscConfig+0x348>
 80042b6:	4b70      	ldr	r3, [pc, #448]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80042be:	4a6e      	ldr	r2, [pc, #440]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 80042c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80042c4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042c6:	e075      	b.n	80043b4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80042c8:	4b6b      	ldr	r3, [pc, #428]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	069b      	lsls	r3, r3, #26
 80042d6:	4968      	ldr	r1, [pc, #416]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042dc:	e06a      	b.n	80043b4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80042de:	4b66      	ldr	r3, [pc, #408]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	061b      	lsls	r3, r3, #24
 80042ec:	4962      	ldr	r1, [pc, #392]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042f2:	e05f      	b.n	80043b4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d042      	beq.n	8004382 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80042fc:	4b5e      	ldr	r3, [pc, #376]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a5d      	ldr	r2, [pc, #372]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 8004302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004308:	f7fd f95e 	bl	80015c8 <HAL_GetTick>
 800430c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004310:	f7fd f95a 	bl	80015c8 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e280      	b.n	8004824 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004322:	4b55      	ldr	r3, [pc, #340]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0f0      	beq.n	8004310 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800432e:	f7fd f97b 	bl	8001628 <HAL_GetREVID>
 8004332:	4603      	mov	r3, r0
 8004334:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004338:	4293      	cmp	r3, r2
 800433a:	d817      	bhi.n	800436c <HAL_RCC_OscConfig+0x3ec>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	2b20      	cmp	r3, #32
 8004342:	d108      	bne.n	8004356 <HAL_RCC_OscConfig+0x3d6>
 8004344:	4b4c      	ldr	r3, [pc, #304]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800434c:	4a4a      	ldr	r2, [pc, #296]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 800434e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004352:	6053      	str	r3, [r2, #4]
 8004354:	e02e      	b.n	80043b4 <HAL_RCC_OscConfig+0x434>
 8004356:	4b48      	ldr	r3, [pc, #288]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	069b      	lsls	r3, r3, #26
 8004364:	4944      	ldr	r1, [pc, #272]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 8004366:	4313      	orrs	r3, r2
 8004368:	604b      	str	r3, [r1, #4]
 800436a:	e023      	b.n	80043b4 <HAL_RCC_OscConfig+0x434>
 800436c:	4b42      	ldr	r3, [pc, #264]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	061b      	lsls	r3, r3, #24
 800437a:	493f      	ldr	r1, [pc, #252]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 800437c:	4313      	orrs	r3, r2
 800437e:	60cb      	str	r3, [r1, #12]
 8004380:	e018      	b.n	80043b4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004382:	4b3d      	ldr	r3, [pc, #244]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a3c      	ldr	r2, [pc, #240]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 8004388:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800438c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438e:	f7fd f91b 	bl	80015c8 <HAL_GetTick>
 8004392:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004394:	e008      	b.n	80043a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004396:	f7fd f917 	bl	80015c8 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e23d      	b.n	8004824 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80043a8:	4b33      	ldr	r3, [pc, #204]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1f0      	bne.n	8004396 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0308 	and.w	r3, r3, #8
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d036      	beq.n	800442e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d019      	beq.n	80043fc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043c8:	4b2b      	ldr	r3, [pc, #172]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 80043ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043cc:	4a2a      	ldr	r2, [pc, #168]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d4:	f7fd f8f8 	bl	80015c8 <HAL_GetTick>
 80043d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043dc:	f7fd f8f4 	bl	80015c8 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e21a      	b.n	8004824 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043ee:	4b22      	ldr	r3, [pc, #136]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 80043f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0f0      	beq.n	80043dc <HAL_RCC_OscConfig+0x45c>
 80043fa:	e018      	b.n	800442e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043fc:	4b1e      	ldr	r3, [pc, #120]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 80043fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004400:	4a1d      	ldr	r2, [pc, #116]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 8004402:	f023 0301 	bic.w	r3, r3, #1
 8004406:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004408:	f7fd f8de 	bl	80015c8 <HAL_GetTick>
 800440c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004410:	f7fd f8da 	bl	80015c8 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e200      	b.n	8004824 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004422:	4b15      	ldr	r3, [pc, #84]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 8004424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0320 	and.w	r3, r3, #32
 8004436:	2b00      	cmp	r3, #0
 8004438:	d039      	beq.n	80044ae <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d01c      	beq.n	800447c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004442:	4b0d      	ldr	r3, [pc, #52]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a0c      	ldr	r2, [pc, #48]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 8004448:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800444c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800444e:	f7fd f8bb 	bl	80015c8 <HAL_GetTick>
 8004452:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004456:	f7fd f8b7 	bl	80015c8 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e1dd      	b.n	8004824 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004468:	4b03      	ldr	r3, [pc, #12]	@ (8004478 <HAL_RCC_OscConfig+0x4f8>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0f0      	beq.n	8004456 <HAL_RCC_OscConfig+0x4d6>
 8004474:	e01b      	b.n	80044ae <HAL_RCC_OscConfig+0x52e>
 8004476:	bf00      	nop
 8004478:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800447c:	4b9b      	ldr	r3, [pc, #620]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a9a      	ldr	r2, [pc, #616]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 8004482:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004486:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004488:	f7fd f89e 	bl	80015c8 <HAL_GetTick>
 800448c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004490:	f7fd f89a 	bl	80015c8 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e1c0      	b.n	8004824 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80044a2:	4b92      	ldr	r3, [pc, #584]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f0      	bne.n	8004490 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0304 	and.w	r3, r3, #4
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 8081 	beq.w	80045be <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80044bc:	4b8c      	ldr	r3, [pc, #560]	@ (80046f0 <HAL_RCC_OscConfig+0x770>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a8b      	ldr	r2, [pc, #556]	@ (80046f0 <HAL_RCC_OscConfig+0x770>)
 80044c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044c8:	f7fd f87e 	bl	80015c8 <HAL_GetTick>
 80044cc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044d0:	f7fd f87a 	bl	80015c8 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b64      	cmp	r3, #100	@ 0x64
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e1a0      	b.n	8004824 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044e2:	4b83      	ldr	r3, [pc, #524]	@ (80046f0 <HAL_RCC_OscConfig+0x770>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0f0      	beq.n	80044d0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d106      	bne.n	8004504 <HAL_RCC_OscConfig+0x584>
 80044f6:	4b7d      	ldr	r3, [pc, #500]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 80044f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fa:	4a7c      	ldr	r2, [pc, #496]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 80044fc:	f043 0301 	orr.w	r3, r3, #1
 8004500:	6713      	str	r3, [r2, #112]	@ 0x70
 8004502:	e02d      	b.n	8004560 <HAL_RCC_OscConfig+0x5e0>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10c      	bne.n	8004526 <HAL_RCC_OscConfig+0x5a6>
 800450c:	4b77      	ldr	r3, [pc, #476]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 800450e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004510:	4a76      	ldr	r2, [pc, #472]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 8004512:	f023 0301 	bic.w	r3, r3, #1
 8004516:	6713      	str	r3, [r2, #112]	@ 0x70
 8004518:	4b74      	ldr	r3, [pc, #464]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 800451a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800451c:	4a73      	ldr	r2, [pc, #460]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 800451e:	f023 0304 	bic.w	r3, r3, #4
 8004522:	6713      	str	r3, [r2, #112]	@ 0x70
 8004524:	e01c      	b.n	8004560 <HAL_RCC_OscConfig+0x5e0>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	2b05      	cmp	r3, #5
 800452c:	d10c      	bne.n	8004548 <HAL_RCC_OscConfig+0x5c8>
 800452e:	4b6f      	ldr	r3, [pc, #444]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 8004530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004532:	4a6e      	ldr	r2, [pc, #440]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 8004534:	f043 0304 	orr.w	r3, r3, #4
 8004538:	6713      	str	r3, [r2, #112]	@ 0x70
 800453a:	4b6c      	ldr	r3, [pc, #432]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 800453c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800453e:	4a6b      	ldr	r2, [pc, #428]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 8004540:	f043 0301 	orr.w	r3, r3, #1
 8004544:	6713      	str	r3, [r2, #112]	@ 0x70
 8004546:	e00b      	b.n	8004560 <HAL_RCC_OscConfig+0x5e0>
 8004548:	4b68      	ldr	r3, [pc, #416]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 800454a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800454c:	4a67      	ldr	r2, [pc, #412]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 800454e:	f023 0301 	bic.w	r3, r3, #1
 8004552:	6713      	str	r3, [r2, #112]	@ 0x70
 8004554:	4b65      	ldr	r3, [pc, #404]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 8004556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004558:	4a64      	ldr	r2, [pc, #400]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 800455a:	f023 0304 	bic.w	r3, r3, #4
 800455e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d015      	beq.n	8004594 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004568:	f7fd f82e 	bl	80015c8 <HAL_GetTick>
 800456c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800456e:	e00a      	b.n	8004586 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004570:	f7fd f82a 	bl	80015c8 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800457e:	4293      	cmp	r3, r2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e14e      	b.n	8004824 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004586:	4b59      	ldr	r3, [pc, #356]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 8004588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0ee      	beq.n	8004570 <HAL_RCC_OscConfig+0x5f0>
 8004592:	e014      	b.n	80045be <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004594:	f7fd f818 	bl	80015c8 <HAL_GetTick>
 8004598:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800459a:	e00a      	b.n	80045b2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800459c:	f7fd f814 	bl	80015c8 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e138      	b.n	8004824 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80045b2:	4b4e      	ldr	r3, [pc, #312]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 80045b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1ee      	bne.n	800459c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 812d 	beq.w	8004822 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80045c8:	4b48      	ldr	r3, [pc, #288]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045d0:	2b18      	cmp	r3, #24
 80045d2:	f000 80bd 	beq.w	8004750 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045da:	2b02      	cmp	r3, #2
 80045dc:	f040 809e 	bne.w	800471c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e0:	4b42      	ldr	r3, [pc, #264]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a41      	ldr	r2, [pc, #260]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 80045e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ec:	f7fc ffec 	bl	80015c8 <HAL_GetTick>
 80045f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f4:	f7fc ffe8 	bl	80015c8 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e10e      	b.n	8004824 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004606:	4b39      	ldr	r3, [pc, #228]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1f0      	bne.n	80045f4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004612:	4b36      	ldr	r3, [pc, #216]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 8004614:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004616:	4b37      	ldr	r3, [pc, #220]	@ (80046f4 <HAL_RCC_OscConfig+0x774>)
 8004618:	4013      	ands	r3, r2
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004622:	0112      	lsls	r2, r2, #4
 8004624:	430a      	orrs	r2, r1
 8004626:	4931      	ldr	r1, [pc, #196]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 8004628:	4313      	orrs	r3, r2
 800462a:	628b      	str	r3, [r1, #40]	@ 0x28
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004630:	3b01      	subs	r3, #1
 8004632:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800463a:	3b01      	subs	r3, #1
 800463c:	025b      	lsls	r3, r3, #9
 800463e:	b29b      	uxth	r3, r3
 8004640:	431a      	orrs	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004646:	3b01      	subs	r3, #1
 8004648:	041b      	lsls	r3, r3, #16
 800464a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004654:	3b01      	subs	r3, #1
 8004656:	061b      	lsls	r3, r3, #24
 8004658:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800465c:	4923      	ldr	r1, [pc, #140]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 800465e:	4313      	orrs	r3, r2
 8004660:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004662:	4b22      	ldr	r3, [pc, #136]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 8004664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004666:	4a21      	ldr	r2, [pc, #132]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 8004668:	f023 0301 	bic.w	r3, r3, #1
 800466c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800466e:	4b1f      	ldr	r3, [pc, #124]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 8004670:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004672:	4b21      	ldr	r3, [pc, #132]	@ (80046f8 <HAL_RCC_OscConfig+0x778>)
 8004674:	4013      	ands	r3, r2
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800467a:	00d2      	lsls	r2, r2, #3
 800467c:	491b      	ldr	r1, [pc, #108]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 800467e:	4313      	orrs	r3, r2
 8004680:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004682:	4b1a      	ldr	r3, [pc, #104]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 8004684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004686:	f023 020c 	bic.w	r2, r3, #12
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468e:	4917      	ldr	r1, [pc, #92]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 8004690:	4313      	orrs	r3, r2
 8004692:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004694:	4b15      	ldr	r3, [pc, #84]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 8004696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004698:	f023 0202 	bic.w	r2, r3, #2
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a0:	4912      	ldr	r1, [pc, #72]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80046a6:	4b11      	ldr	r3, [pc, #68]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 80046a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046aa:	4a10      	ldr	r2, [pc, #64]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 80046ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046b2:	4b0e      	ldr	r3, [pc, #56]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 80046b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b6:	4a0d      	ldr	r2, [pc, #52]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 80046b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80046be:	4b0b      	ldr	r3, [pc, #44]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 80046c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c2:	4a0a      	ldr	r2, [pc, #40]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 80046c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80046ca:	4b08      	ldr	r3, [pc, #32]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 80046cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ce:	4a07      	ldr	r2, [pc, #28]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 80046d0:	f043 0301 	orr.w	r3, r3, #1
 80046d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046d6:	4b05      	ldr	r3, [pc, #20]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a04      	ldr	r2, [pc, #16]	@ (80046ec <HAL_RCC_OscConfig+0x76c>)
 80046dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e2:	f7fc ff71 	bl	80015c8 <HAL_GetTick>
 80046e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046e8:	e011      	b.n	800470e <HAL_RCC_OscConfig+0x78e>
 80046ea:	bf00      	nop
 80046ec:	58024400 	.word	0x58024400
 80046f0:	58024800 	.word	0x58024800
 80046f4:	fffffc0c 	.word	0xfffffc0c
 80046f8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046fc:	f7fc ff64 	bl	80015c8 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e08a      	b.n	8004824 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800470e:	4b47      	ldr	r3, [pc, #284]	@ (800482c <HAL_RCC_OscConfig+0x8ac>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0f0      	beq.n	80046fc <HAL_RCC_OscConfig+0x77c>
 800471a:	e082      	b.n	8004822 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800471c:	4b43      	ldr	r3, [pc, #268]	@ (800482c <HAL_RCC_OscConfig+0x8ac>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a42      	ldr	r2, [pc, #264]	@ (800482c <HAL_RCC_OscConfig+0x8ac>)
 8004722:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004728:	f7fc ff4e 	bl	80015c8 <HAL_GetTick>
 800472c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004730:	f7fc ff4a 	bl	80015c8 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e070      	b.n	8004824 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004742:	4b3a      	ldr	r3, [pc, #232]	@ (800482c <HAL_RCC_OscConfig+0x8ac>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f0      	bne.n	8004730 <HAL_RCC_OscConfig+0x7b0>
 800474e:	e068      	b.n	8004822 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004750:	4b36      	ldr	r3, [pc, #216]	@ (800482c <HAL_RCC_OscConfig+0x8ac>)
 8004752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004754:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004756:	4b35      	ldr	r3, [pc, #212]	@ (800482c <HAL_RCC_OscConfig+0x8ac>)
 8004758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004760:	2b01      	cmp	r3, #1
 8004762:	d031      	beq.n	80047c8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f003 0203 	and.w	r2, r3, #3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800476e:	429a      	cmp	r2, r3
 8004770:	d12a      	bne.n	80047c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	091b      	lsrs	r3, r3, #4
 8004776:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800477e:	429a      	cmp	r2, r3
 8004780:	d122      	bne.n	80047c8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800478e:	429a      	cmp	r2, r3
 8004790:	d11a      	bne.n	80047c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	0a5b      	lsrs	r3, r3, #9
 8004796:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800479e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d111      	bne.n	80047c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	0c1b      	lsrs	r3, r3, #16
 80047a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d108      	bne.n	80047c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	0e1b      	lsrs	r3, r3, #24
 80047ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d001      	beq.n	80047cc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e02b      	b.n	8004824 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80047cc:	4b17      	ldr	r3, [pc, #92]	@ (800482c <HAL_RCC_OscConfig+0x8ac>)
 80047ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047d0:	08db      	lsrs	r3, r3, #3
 80047d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047d6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d01f      	beq.n	8004822 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80047e2:	4b12      	ldr	r3, [pc, #72]	@ (800482c <HAL_RCC_OscConfig+0x8ac>)
 80047e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e6:	4a11      	ldr	r2, [pc, #68]	@ (800482c <HAL_RCC_OscConfig+0x8ac>)
 80047e8:	f023 0301 	bic.w	r3, r3, #1
 80047ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047ee:	f7fc feeb 	bl	80015c8 <HAL_GetTick>
 80047f2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80047f4:	bf00      	nop
 80047f6:	f7fc fee7 	bl	80015c8 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fe:	4293      	cmp	r3, r2
 8004800:	d0f9      	beq.n	80047f6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004802:	4b0a      	ldr	r3, [pc, #40]	@ (800482c <HAL_RCC_OscConfig+0x8ac>)
 8004804:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004806:	4b0a      	ldr	r3, [pc, #40]	@ (8004830 <HAL_RCC_OscConfig+0x8b0>)
 8004808:	4013      	ands	r3, r2
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800480e:	00d2      	lsls	r2, r2, #3
 8004810:	4906      	ldr	r1, [pc, #24]	@ (800482c <HAL_RCC_OscConfig+0x8ac>)
 8004812:	4313      	orrs	r3, r2
 8004814:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004816:	4b05      	ldr	r3, [pc, #20]	@ (800482c <HAL_RCC_OscConfig+0x8ac>)
 8004818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481a:	4a04      	ldr	r2, [pc, #16]	@ (800482c <HAL_RCC_OscConfig+0x8ac>)
 800481c:	f043 0301 	orr.w	r3, r3, #1
 8004820:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3730      	adds	r7, #48	@ 0x30
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	58024400 	.word	0x58024400
 8004830:	ffff0007 	.word	0xffff0007

08004834 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e19c      	b.n	8004b82 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004848:	4b8a      	ldr	r3, [pc, #552]	@ (8004a74 <HAL_RCC_ClockConfig+0x240>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d910      	bls.n	8004878 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004856:	4b87      	ldr	r3, [pc, #540]	@ (8004a74 <HAL_RCC_ClockConfig+0x240>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f023 020f 	bic.w	r2, r3, #15
 800485e:	4985      	ldr	r1, [pc, #532]	@ (8004a74 <HAL_RCC_ClockConfig+0x240>)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	4313      	orrs	r3, r2
 8004864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004866:	4b83      	ldr	r3, [pc, #524]	@ (8004a74 <HAL_RCC_ClockConfig+0x240>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	429a      	cmp	r2, r3
 8004872:	d001      	beq.n	8004878 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e184      	b.n	8004b82 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b00      	cmp	r3, #0
 8004882:	d010      	beq.n	80048a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	691a      	ldr	r2, [r3, #16]
 8004888:	4b7b      	ldr	r3, [pc, #492]	@ (8004a78 <HAL_RCC_ClockConfig+0x244>)
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004890:	429a      	cmp	r2, r3
 8004892:	d908      	bls.n	80048a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004894:	4b78      	ldr	r3, [pc, #480]	@ (8004a78 <HAL_RCC_ClockConfig+0x244>)
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	4975      	ldr	r1, [pc, #468]	@ (8004a78 <HAL_RCC_ClockConfig+0x244>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d010      	beq.n	80048d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	695a      	ldr	r2, [r3, #20]
 80048b6:	4b70      	ldr	r3, [pc, #448]	@ (8004a78 <HAL_RCC_ClockConfig+0x244>)
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048be:	429a      	cmp	r2, r3
 80048c0:	d908      	bls.n	80048d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80048c2:	4b6d      	ldr	r3, [pc, #436]	@ (8004a78 <HAL_RCC_ClockConfig+0x244>)
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	496a      	ldr	r1, [pc, #424]	@ (8004a78 <HAL_RCC_ClockConfig+0x244>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0310 	and.w	r3, r3, #16
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d010      	beq.n	8004902 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	699a      	ldr	r2, [r3, #24]
 80048e4:	4b64      	ldr	r3, [pc, #400]	@ (8004a78 <HAL_RCC_ClockConfig+0x244>)
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d908      	bls.n	8004902 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80048f0:	4b61      	ldr	r3, [pc, #388]	@ (8004a78 <HAL_RCC_ClockConfig+0x244>)
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	495e      	ldr	r1, [pc, #376]	@ (8004a78 <HAL_RCC_ClockConfig+0x244>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	2b00      	cmp	r3, #0
 800490c:	d010      	beq.n	8004930 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	69da      	ldr	r2, [r3, #28]
 8004912:	4b59      	ldr	r3, [pc, #356]	@ (8004a78 <HAL_RCC_ClockConfig+0x244>)
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800491a:	429a      	cmp	r2, r3
 800491c:	d908      	bls.n	8004930 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800491e:	4b56      	ldr	r3, [pc, #344]	@ (8004a78 <HAL_RCC_ClockConfig+0x244>)
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	4953      	ldr	r1, [pc, #332]	@ (8004a78 <HAL_RCC_ClockConfig+0x244>)
 800492c:	4313      	orrs	r3, r2
 800492e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d010      	beq.n	800495e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68da      	ldr	r2, [r3, #12]
 8004940:	4b4d      	ldr	r3, [pc, #308]	@ (8004a78 <HAL_RCC_ClockConfig+0x244>)
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	f003 030f 	and.w	r3, r3, #15
 8004948:	429a      	cmp	r2, r3
 800494a:	d908      	bls.n	800495e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800494c:	4b4a      	ldr	r3, [pc, #296]	@ (8004a78 <HAL_RCC_ClockConfig+0x244>)
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	f023 020f 	bic.w	r2, r3, #15
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	4947      	ldr	r1, [pc, #284]	@ (8004a78 <HAL_RCC_ClockConfig+0x244>)
 800495a:	4313      	orrs	r3, r2
 800495c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d055      	beq.n	8004a16 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800496a:	4b43      	ldr	r3, [pc, #268]	@ (8004a78 <HAL_RCC_ClockConfig+0x244>)
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	4940      	ldr	r1, [pc, #256]	@ (8004a78 <HAL_RCC_ClockConfig+0x244>)
 8004978:	4313      	orrs	r3, r2
 800497a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2b02      	cmp	r3, #2
 8004982:	d107      	bne.n	8004994 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004984:	4b3c      	ldr	r3, [pc, #240]	@ (8004a78 <HAL_RCC_ClockConfig+0x244>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d121      	bne.n	80049d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e0f6      	b.n	8004b82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	2b03      	cmp	r3, #3
 800499a:	d107      	bne.n	80049ac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800499c:	4b36      	ldr	r3, [pc, #216]	@ (8004a78 <HAL_RCC_ClockConfig+0x244>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d115      	bne.n	80049d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e0ea      	b.n	8004b82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d107      	bne.n	80049c4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049b4:	4b30      	ldr	r3, [pc, #192]	@ (8004a78 <HAL_RCC_ClockConfig+0x244>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d109      	bne.n	80049d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e0de      	b.n	8004b82 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049c4:	4b2c      	ldr	r3, [pc, #176]	@ (8004a78 <HAL_RCC_ClockConfig+0x244>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0304 	and.w	r3, r3, #4
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e0d6      	b.n	8004b82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049d4:	4b28      	ldr	r3, [pc, #160]	@ (8004a78 <HAL_RCC_ClockConfig+0x244>)
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	f023 0207 	bic.w	r2, r3, #7
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	4925      	ldr	r1, [pc, #148]	@ (8004a78 <HAL_RCC_ClockConfig+0x244>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e6:	f7fc fdef 	bl	80015c8 <HAL_GetTick>
 80049ea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ec:	e00a      	b.n	8004a04 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ee:	f7fc fdeb 	bl	80015c8 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e0be      	b.n	8004b82 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a04:	4b1c      	ldr	r3, [pc, #112]	@ (8004a78 <HAL_RCC_ClockConfig+0x244>)
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d1eb      	bne.n	80049ee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d010      	beq.n	8004a44 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68da      	ldr	r2, [r3, #12]
 8004a26:	4b14      	ldr	r3, [pc, #80]	@ (8004a78 <HAL_RCC_ClockConfig+0x244>)
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d208      	bcs.n	8004a44 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a32:	4b11      	ldr	r3, [pc, #68]	@ (8004a78 <HAL_RCC_ClockConfig+0x244>)
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	f023 020f 	bic.w	r2, r3, #15
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	490e      	ldr	r1, [pc, #56]	@ (8004a78 <HAL_RCC_ClockConfig+0x244>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a44:	4b0b      	ldr	r3, [pc, #44]	@ (8004a74 <HAL_RCC_ClockConfig+0x240>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 030f 	and.w	r3, r3, #15
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d214      	bcs.n	8004a7c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a52:	4b08      	ldr	r3, [pc, #32]	@ (8004a74 <HAL_RCC_ClockConfig+0x240>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f023 020f 	bic.w	r2, r3, #15
 8004a5a:	4906      	ldr	r1, [pc, #24]	@ (8004a74 <HAL_RCC_ClockConfig+0x240>)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a62:	4b04      	ldr	r3, [pc, #16]	@ (8004a74 <HAL_RCC_ClockConfig+0x240>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 030f 	and.w	r3, r3, #15
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d005      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e086      	b.n	8004b82 <HAL_RCC_ClockConfig+0x34e>
 8004a74:	52002000 	.word	0x52002000
 8004a78:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d010      	beq.n	8004aaa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691a      	ldr	r2, [r3, #16]
 8004a8c:	4b3f      	ldr	r3, [pc, #252]	@ (8004b8c <HAL_RCC_ClockConfig+0x358>)
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d208      	bcs.n	8004aaa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004a98:	4b3c      	ldr	r3, [pc, #240]	@ (8004b8c <HAL_RCC_ClockConfig+0x358>)
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	4939      	ldr	r1, [pc, #228]	@ (8004b8c <HAL_RCC_ClockConfig+0x358>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0308 	and.w	r3, r3, #8
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d010      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	695a      	ldr	r2, [r3, #20]
 8004aba:	4b34      	ldr	r3, [pc, #208]	@ (8004b8c <HAL_RCC_ClockConfig+0x358>)
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d208      	bcs.n	8004ad8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ac6:	4b31      	ldr	r3, [pc, #196]	@ (8004b8c <HAL_RCC_ClockConfig+0x358>)
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	492e      	ldr	r1, [pc, #184]	@ (8004b8c <HAL_RCC_ClockConfig+0x358>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0310 	and.w	r3, r3, #16
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d010      	beq.n	8004b06 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	699a      	ldr	r2, [r3, #24]
 8004ae8:	4b28      	ldr	r3, [pc, #160]	@ (8004b8c <HAL_RCC_ClockConfig+0x358>)
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d208      	bcs.n	8004b06 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004af4:	4b25      	ldr	r3, [pc, #148]	@ (8004b8c <HAL_RCC_ClockConfig+0x358>)
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	4922      	ldr	r1, [pc, #136]	@ (8004b8c <HAL_RCC_ClockConfig+0x358>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0320 	and.w	r3, r3, #32
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d010      	beq.n	8004b34 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	69da      	ldr	r2, [r3, #28]
 8004b16:	4b1d      	ldr	r3, [pc, #116]	@ (8004b8c <HAL_RCC_ClockConfig+0x358>)
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d208      	bcs.n	8004b34 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004b22:	4b1a      	ldr	r3, [pc, #104]	@ (8004b8c <HAL_RCC_ClockConfig+0x358>)
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	4917      	ldr	r1, [pc, #92]	@ (8004b8c <HAL_RCC_ClockConfig+0x358>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004b34:	f000 f834 	bl	8004ba0 <HAL_RCC_GetSysClockFreq>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	4b14      	ldr	r3, [pc, #80]	@ (8004b8c <HAL_RCC_ClockConfig+0x358>)
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	0a1b      	lsrs	r3, r3, #8
 8004b40:	f003 030f 	and.w	r3, r3, #15
 8004b44:	4912      	ldr	r1, [pc, #72]	@ (8004b90 <HAL_RCC_ClockConfig+0x35c>)
 8004b46:	5ccb      	ldrb	r3, [r1, r3]
 8004b48:	f003 031f 	and.w	r3, r3, #31
 8004b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b50:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b52:	4b0e      	ldr	r3, [pc, #56]	@ (8004b8c <HAL_RCC_ClockConfig+0x358>)
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	4a0d      	ldr	r2, [pc, #52]	@ (8004b90 <HAL_RCC_ClockConfig+0x35c>)
 8004b5c:	5cd3      	ldrb	r3, [r2, r3]
 8004b5e:	f003 031f 	and.w	r3, r3, #31
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	fa22 f303 	lsr.w	r3, r2, r3
 8004b68:	4a0a      	ldr	r2, [pc, #40]	@ (8004b94 <HAL_RCC_ClockConfig+0x360>)
 8004b6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8004b98 <HAL_RCC_ClockConfig+0x364>)
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004b72:	4b0a      	ldr	r3, [pc, #40]	@ (8004b9c <HAL_RCC_ClockConfig+0x368>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fc f83e 	bl	8000bf8 <HAL_InitTick>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	58024400 	.word	0x58024400
 8004b90:	0801b0b8 	.word	0x0801b0b8
 8004b94:	24000004 	.word	0x24000004
 8004b98:	24000000 	.word	0x24000000
 8004b9c:	24000008 	.word	0x24000008

08004ba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b089      	sub	sp, #36	@ 0x24
 8004ba4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ba6:	4bb3      	ldr	r3, [pc, #716]	@ (8004e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bae:	2b18      	cmp	r3, #24
 8004bb0:	f200 8156 	bhi.w	8004e60 <HAL_RCC_GetSysClockFreq+0x2c0>
 8004bb4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bbc <HAL_RCC_GetSysClockFreq+0x1c>)
 8004bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bba:	bf00      	nop
 8004bbc:	08004c21 	.word	0x08004c21
 8004bc0:	08004e61 	.word	0x08004e61
 8004bc4:	08004e61 	.word	0x08004e61
 8004bc8:	08004e61 	.word	0x08004e61
 8004bcc:	08004e61 	.word	0x08004e61
 8004bd0:	08004e61 	.word	0x08004e61
 8004bd4:	08004e61 	.word	0x08004e61
 8004bd8:	08004e61 	.word	0x08004e61
 8004bdc:	08004c47 	.word	0x08004c47
 8004be0:	08004e61 	.word	0x08004e61
 8004be4:	08004e61 	.word	0x08004e61
 8004be8:	08004e61 	.word	0x08004e61
 8004bec:	08004e61 	.word	0x08004e61
 8004bf0:	08004e61 	.word	0x08004e61
 8004bf4:	08004e61 	.word	0x08004e61
 8004bf8:	08004e61 	.word	0x08004e61
 8004bfc:	08004c4d 	.word	0x08004c4d
 8004c00:	08004e61 	.word	0x08004e61
 8004c04:	08004e61 	.word	0x08004e61
 8004c08:	08004e61 	.word	0x08004e61
 8004c0c:	08004e61 	.word	0x08004e61
 8004c10:	08004e61 	.word	0x08004e61
 8004c14:	08004e61 	.word	0x08004e61
 8004c18:	08004e61 	.word	0x08004e61
 8004c1c:	08004c55 	.word	0x08004c55
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c20:	4b94      	ldr	r3, [pc, #592]	@ (8004e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0320 	and.w	r3, r3, #32
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d009      	beq.n	8004c40 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c2c:	4b91      	ldr	r3, [pc, #580]	@ (8004e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	08db      	lsrs	r3, r3, #3
 8004c32:	f003 0303 	and.w	r3, r3, #3
 8004c36:	4a90      	ldr	r2, [pc, #576]	@ (8004e78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004c38:	fa22 f303 	lsr.w	r3, r2, r3
 8004c3c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004c3e:	e112      	b.n	8004e66 <HAL_RCC_GetSysClockFreq+0x2c6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004c40:	4b8d      	ldr	r3, [pc, #564]	@ (8004e78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004c42:	61bb      	str	r3, [r7, #24]
      break;
 8004c44:	e10f      	b.n	8004e66 <HAL_RCC_GetSysClockFreq+0x2c6>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004c46:	4b8d      	ldr	r3, [pc, #564]	@ (8004e7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004c48:	61bb      	str	r3, [r7, #24]
      break;
 8004c4a:	e10c      	b.n	8004e66 <HAL_RCC_GetSysClockFreq+0x2c6>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004c4c:	f44f 037a 	mov.w	r3, #16384000	@ 0xfa0000
 8004c50:	61bb      	str	r3, [r7, #24]
      break;
 8004c52:	e108      	b.n	8004e66 <HAL_RCC_GetSysClockFreq+0x2c6>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c54:	4b87      	ldr	r3, [pc, #540]	@ (8004e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c58:	f003 0303 	and.w	r3, r3, #3
 8004c5c:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004c5e:	4b85      	ldr	r3, [pc, #532]	@ (8004e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c62:	091b      	lsrs	r3, r3, #4
 8004c64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c68:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004c6a:	4b82      	ldr	r3, [pc, #520]	@ (8004e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004c74:	4b7f      	ldr	r3, [pc, #508]	@ (8004e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c78:	08db      	lsrs	r3, r3, #3
 8004c7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	fb02 f303 	mul.w	r3, r2, r3
 8004c84:	ee07 3a90 	vmov	s15, r3
 8004c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c8c:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 80e1 	beq.w	8004e5a <HAL_RCC_GetSysClockFreq+0x2ba>
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	f000 8083 	beq.w	8004da6 <HAL_RCC_GetSysClockFreq+0x206>
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	f200 80a1 	bhi.w	8004dea <HAL_RCC_GetSysClockFreq+0x24a>
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <HAL_RCC_GetSysClockFreq+0x116>
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d056      	beq.n	8004d62 <HAL_RCC_GetSysClockFreq+0x1c2>
 8004cb4:	e099      	b.n	8004dea <HAL_RCC_GetSysClockFreq+0x24a>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cb6:	4b6f      	ldr	r3, [pc, #444]	@ (8004e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0320 	and.w	r3, r3, #32
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d02d      	beq.n	8004d1e <HAL_RCC_GetSysClockFreq+0x17e>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004cc2:	4b6c      	ldr	r3, [pc, #432]	@ (8004e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	08db      	lsrs	r3, r3, #3
 8004cc8:	f003 0303 	and.w	r3, r3, #3
 8004ccc:	4a6a      	ldr	r2, [pc, #424]	@ (8004e78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004cce:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd2:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	ee07 3a90 	vmov	s15, r3
 8004cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	ee07 3a90 	vmov	s15, r3
 8004ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cec:	4b61      	ldr	r3, [pc, #388]	@ (8004e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf4:	ee07 3a90 	vmov	s15, r3
 8004cf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cfc:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d00:	eddf 5a5f 	vldr	s11, [pc, #380]	@ 8004e80 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004d04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d18:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004d1c:	e087      	b.n	8004e2e <HAL_RCC_GetSysClockFreq+0x28e>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	ee07 3a90 	vmov	s15, r3
 8004d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d28:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8004e84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d30:	4b50      	ldr	r3, [pc, #320]	@ (8004e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d38:	ee07 3a90 	vmov	s15, r3
 8004d3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d40:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d44:	eddf 5a4e 	vldr	s11, [pc, #312]	@ 8004e80 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004d48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d5c:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d60:	e065      	b.n	8004e2e <HAL_RCC_GetSysClockFreq+0x28e>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	ee07 3a90 	vmov	s15, r3
 8004d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004e88 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004d70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d74:	4b3f      	ldr	r3, [pc, #252]	@ (8004e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d7c:	ee07 3a90 	vmov	s15, r3
 8004d80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d84:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d88:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8004e80 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004d8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da0:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004da4:	e043      	b.n	8004e2e <HAL_RCC_GetSysClockFreq+0x28e>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	ee07 3a90 	vmov	s15, r3
 8004dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db0:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004e8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004db4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004db8:	4b2e      	ldr	r3, [pc, #184]	@ (8004e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc0:	ee07 3a90 	vmov	s15, r3
 8004dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dc8:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dcc:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8004e80 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004dd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dd8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ddc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004de4:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004de8:	e021      	b.n	8004e2e <HAL_RCC_GetSysClockFreq+0x28e>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	ee07 3a90 	vmov	s15, r3
 8004df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df4:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8004e88 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004df8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8004e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e04:	ee07 3a90 	vmov	s15, r3
 8004e08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e10:	eddf 5a1b 	vldr	s11, [pc, #108]	@ 8004e80 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004e14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e28:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e2c:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004e2e:	4b11      	ldr	r3, [pc, #68]	@ (8004e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e32:	0a5b      	lsrs	r3, r3, #9
 8004e34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e38:	3301      	adds	r3, #1
 8004e3a:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	ee07 3a90 	vmov	s15, r3
 8004e42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e46:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e52:	ee17 3a90 	vmov	r3, s15
 8004e56:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004e58:	e005      	b.n	8004e66 <HAL_RCC_GetSysClockFreq+0x2c6>
        sysclockfreq = 0U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	61bb      	str	r3, [r7, #24]
      break;
 8004e5e:	e002      	b.n	8004e66 <HAL_RCC_GetSysClockFreq+0x2c6>

    default:
      sysclockfreq = CSI_VALUE;
 8004e60:	4b06      	ldr	r3, [pc, #24]	@ (8004e7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004e62:	61bb      	str	r3, [r7, #24]
      break;
 8004e64:	bf00      	nop
  }

  return sysclockfreq;
 8004e66:	69bb      	ldr	r3, [r7, #24]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3724      	adds	r7, #36	@ 0x24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	58024400 	.word	0x58024400
 8004e78:	03d09000 	.word	0x03d09000
 8004e7c:	003d0900 	.word	0x003d0900
 8004e80:	46000000 	.word	0x46000000
 8004e84:	4c742400 	.word	0x4c742400
 8004e88:	4a742400 	.word	0x4a742400
 8004e8c:	4b7a0000 	.word	0x4b7a0000

08004e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004e96:	f7ff fe83 	bl	8004ba0 <HAL_RCC_GetSysClockFreq>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	4b10      	ldr	r3, [pc, #64]	@ (8004ee0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	0a1b      	lsrs	r3, r3, #8
 8004ea2:	f003 030f 	and.w	r3, r3, #15
 8004ea6:	490f      	ldr	r1, [pc, #60]	@ (8004ee4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004ea8:	5ccb      	ldrb	r3, [r1, r3]
 8004eaa:	f003 031f 	and.w	r3, r3, #31
 8004eae:	fa22 f303 	lsr.w	r3, r2, r3
 8004eb2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	f003 030f 	and.w	r3, r3, #15
 8004ebc:	4a09      	ldr	r2, [pc, #36]	@ (8004ee4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004ebe:	5cd3      	ldrb	r3, [r2, r3]
 8004ec0:	f003 031f 	and.w	r3, r3, #31
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eca:	4a07      	ldr	r2, [pc, #28]	@ (8004ee8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004ecc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ece:	4a07      	ldr	r2, [pc, #28]	@ (8004eec <HAL_RCC_GetHCLKFreq+0x5c>)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004ed4:	4b04      	ldr	r3, [pc, #16]	@ (8004ee8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	58024400 	.word	0x58024400
 8004ee4:	0801b0b8 	.word	0x0801b0b8
 8004ee8:	24000004 	.word	0x24000004
 8004eec:	24000000 	.word	0x24000000

08004ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004ef4:	f7ff ffcc 	bl	8004e90 <HAL_RCC_GetHCLKFreq>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	4b06      	ldr	r3, [pc, #24]	@ (8004f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	091b      	lsrs	r3, r3, #4
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	4904      	ldr	r1, [pc, #16]	@ (8004f18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f06:	5ccb      	ldrb	r3, [r1, r3]
 8004f08:	f003 031f 	and.w	r3, r3, #31
 8004f0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	58024400 	.word	0x58024400
 8004f18:	0801b0b8 	.word	0x0801b0b8

08004f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004f20:	f7ff ffb6 	bl	8004e90 <HAL_RCC_GetHCLKFreq>
 8004f24:	4602      	mov	r2, r0
 8004f26:	4b06      	ldr	r3, [pc, #24]	@ (8004f40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	0a1b      	lsrs	r3, r3, #8
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	4904      	ldr	r1, [pc, #16]	@ (8004f44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f32:	5ccb      	ldrb	r3, [r1, r3]
 8004f34:	f003 031f 	and.w	r3, r3, #31
 8004f38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	58024400 	.word	0x58024400
 8004f44:	0801b0b8 	.word	0x0801b0b8

08004f48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	223f      	movs	r2, #63	@ 0x3f
 8004f56:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f58:	4b1a      	ldr	r3, [pc, #104]	@ (8004fc4 <HAL_RCC_GetClockConfig+0x7c>)
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	f003 0207 	and.w	r2, r3, #7
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004f64:	4b17      	ldr	r3, [pc, #92]	@ (8004fc4 <HAL_RCC_GetClockConfig+0x7c>)
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004f70:	4b14      	ldr	r3, [pc, #80]	@ (8004fc4 <HAL_RCC_GetClockConfig+0x7c>)
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	f003 020f 	and.w	r2, r3, #15
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004f7c:	4b11      	ldr	r3, [pc, #68]	@ (8004fc4 <HAL_RCC_GetClockConfig+0x7c>)
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004f88:	4b0e      	ldr	r3, [pc, #56]	@ (8004fc4 <HAL_RCC_GetClockConfig+0x7c>)
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004f94:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc4 <HAL_RCC_GetClockConfig+0x7c>)
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004fa0:	4b08      	ldr	r3, [pc, #32]	@ (8004fc4 <HAL_RCC_GetClockConfig+0x7c>)
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004fac:	4b06      	ldr	r3, [pc, #24]	@ (8004fc8 <HAL_RCC_GetClockConfig+0x80>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 020f 	and.w	r2, r3, #15
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	601a      	str	r2, [r3, #0]
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	58024400 	.word	0x58024400
 8004fc8:	52002000 	.word	0x52002000

08004fcc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fd0:	b0ca      	sub	sp, #296	@ 0x128
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fd8:	2300      	movs	r3, #0
 8004fda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004ff0:	2500      	movs	r5, #0
 8004ff2:	ea54 0305 	orrs.w	r3, r4, r5
 8004ff6:	d049      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ffc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ffe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005002:	d02f      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005004:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005008:	d828      	bhi.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800500a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800500e:	d01a      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005010:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005014:	d822      	bhi.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800501a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800501e:	d007      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005020:	e01c      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005022:	4bb8      	ldr	r3, [pc, #736]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005026:	4ab7      	ldr	r2, [pc, #732]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800502c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800502e:	e01a      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005034:	3308      	adds	r3, #8
 8005036:	2102      	movs	r1, #2
 8005038:	4618      	mov	r0, r3
 800503a:	f001 fc8f 	bl	800695c <RCCEx_PLL2_Config>
 800503e:	4603      	mov	r3, r0
 8005040:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005044:	e00f      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800504a:	3328      	adds	r3, #40	@ 0x28
 800504c:	2102      	movs	r1, #2
 800504e:	4618      	mov	r0, r3
 8005050:	f001 fd36 	bl	8006ac0 <RCCEx_PLL3_Config>
 8005054:	4603      	mov	r3, r0
 8005056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800505a:	e004      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005062:	e000      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005064:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005066:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10a      	bne.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800506e:	4ba5      	ldr	r3, [pc, #660]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005072:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800507a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800507c:	4aa1      	ldr	r2, [pc, #644]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800507e:	430b      	orrs	r3, r1
 8005080:	6513      	str	r3, [r2, #80]	@ 0x50
 8005082:	e003      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005084:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005088:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800508c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005094:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005098:	f04f 0900 	mov.w	r9, #0
 800509c:	ea58 0309 	orrs.w	r3, r8, r9
 80050a0:	d047      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80050a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a8:	2b04      	cmp	r3, #4
 80050aa:	d82a      	bhi.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80050ac:	a201      	add	r2, pc, #4	@ (adr r2, 80050b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80050ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b2:	bf00      	nop
 80050b4:	080050c9 	.word	0x080050c9
 80050b8:	080050d7 	.word	0x080050d7
 80050bc:	080050ed 	.word	0x080050ed
 80050c0:	0800510b 	.word	0x0800510b
 80050c4:	0800510b 	.word	0x0800510b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050c8:	4b8e      	ldr	r3, [pc, #568]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050cc:	4a8d      	ldr	r2, [pc, #564]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050d4:	e01a      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050da:	3308      	adds	r3, #8
 80050dc:	2100      	movs	r1, #0
 80050de:	4618      	mov	r0, r3
 80050e0:	f001 fc3c 	bl	800695c <RCCEx_PLL2_Config>
 80050e4:	4603      	mov	r3, r0
 80050e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050ea:	e00f      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050f0:	3328      	adds	r3, #40	@ 0x28
 80050f2:	2100      	movs	r1, #0
 80050f4:	4618      	mov	r0, r3
 80050f6:	f001 fce3 	bl	8006ac0 <RCCEx_PLL3_Config>
 80050fa:	4603      	mov	r3, r0
 80050fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005100:	e004      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005108:	e000      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800510a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800510c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10a      	bne.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005114:	4b7b      	ldr	r3, [pc, #492]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005118:	f023 0107 	bic.w	r1, r3, #7
 800511c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005122:	4a78      	ldr	r2, [pc, #480]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005124:	430b      	orrs	r3, r1
 8005126:	6513      	str	r3, [r2, #80]	@ 0x50
 8005128:	e003      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800512a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800512e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800513e:	f04f 0b00 	mov.w	fp, #0
 8005142:	ea5a 030b 	orrs.w	r3, sl, fp
 8005146:	d04c      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800514c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800514e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005152:	d030      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005154:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005158:	d829      	bhi.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800515a:	2bc0      	cmp	r3, #192	@ 0xc0
 800515c:	d02d      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800515e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005160:	d825      	bhi.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005162:	2b80      	cmp	r3, #128	@ 0x80
 8005164:	d018      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005166:	2b80      	cmp	r3, #128	@ 0x80
 8005168:	d821      	bhi.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800516a:	2b00      	cmp	r3, #0
 800516c:	d002      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800516e:	2b40      	cmp	r3, #64	@ 0x40
 8005170:	d007      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005172:	e01c      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005174:	4b63      	ldr	r3, [pc, #396]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005178:	4a62      	ldr	r2, [pc, #392]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800517a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800517e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005180:	e01c      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005186:	3308      	adds	r3, #8
 8005188:	2100      	movs	r1, #0
 800518a:	4618      	mov	r0, r3
 800518c:	f001 fbe6 	bl	800695c <RCCEx_PLL2_Config>
 8005190:	4603      	mov	r3, r0
 8005192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005196:	e011      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800519c:	3328      	adds	r3, #40	@ 0x28
 800519e:	2100      	movs	r1, #0
 80051a0:	4618      	mov	r0, r3
 80051a2:	f001 fc8d 	bl	8006ac0 <RCCEx_PLL3_Config>
 80051a6:	4603      	mov	r3, r0
 80051a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80051ac:	e006      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051b4:	e002      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80051b6:	bf00      	nop
 80051b8:	e000      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80051ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10a      	bne.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80051c4:	4b4f      	ldr	r3, [pc, #316]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051c8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80051cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051d2:	4a4c      	ldr	r2, [pc, #304]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051d4:	430b      	orrs	r3, r1
 80051d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80051d8:	e003      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80051e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ea:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80051ee:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80051f2:	2300      	movs	r3, #0
 80051f4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80051f8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80051fc:	460b      	mov	r3, r1
 80051fe:	4313      	orrs	r3, r2
 8005200:	d053      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005206:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800520a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800520e:	d035      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005210:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005214:	d82e      	bhi.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005216:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800521a:	d031      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800521c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005220:	d828      	bhi.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005222:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005226:	d01a      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005228:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800522c:	d822      	bhi.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005232:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005236:	d007      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005238:	e01c      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800523a:	4b32      	ldr	r3, [pc, #200]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800523c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523e:	4a31      	ldr	r2, [pc, #196]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005240:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005244:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005246:	e01c      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800524c:	3308      	adds	r3, #8
 800524e:	2100      	movs	r1, #0
 8005250:	4618      	mov	r0, r3
 8005252:	f001 fb83 	bl	800695c <RCCEx_PLL2_Config>
 8005256:	4603      	mov	r3, r0
 8005258:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800525c:	e011      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800525e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005262:	3328      	adds	r3, #40	@ 0x28
 8005264:	2100      	movs	r1, #0
 8005266:	4618      	mov	r0, r3
 8005268:	f001 fc2a 	bl	8006ac0 <RCCEx_PLL3_Config>
 800526c:	4603      	mov	r3, r0
 800526e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005272:	e006      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800527a:	e002      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800527c:	bf00      	nop
 800527e:	e000      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005282:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10b      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800528a:	4b1e      	ldr	r3, [pc, #120]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800528c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800528e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005296:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800529a:	4a1a      	ldr	r2, [pc, #104]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800529c:	430b      	orrs	r3, r1
 800529e:	6593      	str	r3, [r2, #88]	@ 0x58
 80052a0:	e003      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80052aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80052b6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80052ba:	2300      	movs	r3, #0
 80052bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80052c0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80052c4:	460b      	mov	r3, r1
 80052c6:	4313      	orrs	r3, r2
 80052c8:	d056      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80052ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80052d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052d6:	d038      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80052d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052dc:	d831      	bhi.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80052de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80052e2:	d034      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80052e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80052e8:	d82b      	bhi.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80052ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052ee:	d01d      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80052f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052f4:	d825      	bhi.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d006      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80052fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052fe:	d00a      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005300:	e01f      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005302:	bf00      	nop
 8005304:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005308:	4ba2      	ldr	r3, [pc, #648]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800530a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800530c:	4aa1      	ldr	r2, [pc, #644]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800530e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005312:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005314:	e01c      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800531a:	3308      	adds	r3, #8
 800531c:	2100      	movs	r1, #0
 800531e:	4618      	mov	r0, r3
 8005320:	f001 fb1c 	bl	800695c <RCCEx_PLL2_Config>
 8005324:	4603      	mov	r3, r0
 8005326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800532a:	e011      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800532c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005330:	3328      	adds	r3, #40	@ 0x28
 8005332:	2100      	movs	r1, #0
 8005334:	4618      	mov	r0, r3
 8005336:	f001 fbc3 	bl	8006ac0 <RCCEx_PLL3_Config>
 800533a:	4603      	mov	r3, r0
 800533c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005340:	e006      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005348:	e002      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800534a:	bf00      	nop
 800534c:	e000      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800534e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005350:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10b      	bne.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005358:	4b8e      	ldr	r3, [pc, #568]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800535a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800535c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005364:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005368:	4a8a      	ldr	r2, [pc, #552]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800536a:	430b      	orrs	r3, r1
 800536c:	6593      	str	r3, [r2, #88]	@ 0x58
 800536e:	e003      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005370:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005374:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800537c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005380:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005384:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005388:	2300      	movs	r3, #0
 800538a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800538e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005392:	460b      	mov	r3, r1
 8005394:	4313      	orrs	r3, r2
 8005396:	d03a      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800539c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800539e:	2b30      	cmp	r3, #48	@ 0x30
 80053a0:	d01f      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80053a2:	2b30      	cmp	r3, #48	@ 0x30
 80053a4:	d819      	bhi.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80053a6:	2b20      	cmp	r3, #32
 80053a8:	d00c      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80053aa:	2b20      	cmp	r3, #32
 80053ac:	d815      	bhi.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d019      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80053b2:	2b10      	cmp	r3, #16
 80053b4:	d111      	bne.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053b6:	4b77      	ldr	r3, [pc, #476]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ba:	4a76      	ldr	r2, [pc, #472]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80053c2:	e011      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80053c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c8:	3308      	adds	r3, #8
 80053ca:	2102      	movs	r1, #2
 80053cc:	4618      	mov	r0, r3
 80053ce:	f001 fac5 	bl	800695c <RCCEx_PLL2_Config>
 80053d2:	4603      	mov	r3, r0
 80053d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80053d8:	e006      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053e0:	e002      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80053e2:	bf00      	nop
 80053e4:	e000      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80053e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10a      	bne.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80053f0:	4b68      	ldr	r3, [pc, #416]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053f4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80053f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053fe:	4a65      	ldr	r2, [pc, #404]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005400:	430b      	orrs	r3, r1
 8005402:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005404:	e003      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005406:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800540a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800540e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005416:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800541a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800541e:	2300      	movs	r3, #0
 8005420:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005424:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005428:	460b      	mov	r3, r1
 800542a:	4313      	orrs	r3, r2
 800542c:	d051      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800542e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005432:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005434:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005438:	d035      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800543a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800543e:	d82e      	bhi.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005440:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005444:	d031      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005446:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800544a:	d828      	bhi.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800544c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005450:	d01a      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005456:	d822      	bhi.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800545c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005460:	d007      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005462:	e01c      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005464:	4b4b      	ldr	r3, [pc, #300]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005468:	4a4a      	ldr	r2, [pc, #296]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800546a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800546e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005470:	e01c      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005476:	3308      	adds	r3, #8
 8005478:	2100      	movs	r1, #0
 800547a:	4618      	mov	r0, r3
 800547c:	f001 fa6e 	bl	800695c <RCCEx_PLL2_Config>
 8005480:	4603      	mov	r3, r0
 8005482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005486:	e011      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800548c:	3328      	adds	r3, #40	@ 0x28
 800548e:	2100      	movs	r1, #0
 8005490:	4618      	mov	r0, r3
 8005492:	f001 fb15 	bl	8006ac0 <RCCEx_PLL3_Config>
 8005496:	4603      	mov	r3, r0
 8005498:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800549c:	e006      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054a4:	e002      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80054a6:	bf00      	nop
 80054a8:	e000      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80054aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10a      	bne.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80054b4:	4b37      	ldr	r3, [pc, #220]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054b8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80054bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054c2:	4a34      	ldr	r2, [pc, #208]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054c4:	430b      	orrs	r3, r1
 80054c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80054c8:	e003      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80054d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054da:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80054de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80054e2:	2300      	movs	r3, #0
 80054e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80054e8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80054ec:	460b      	mov	r3, r1
 80054ee:	4313      	orrs	r3, r2
 80054f0:	d056      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80054f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054fc:	d033      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80054fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005502:	d82c      	bhi.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005504:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005508:	d02f      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800550a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800550e:	d826      	bhi.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005510:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005514:	d02b      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005516:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800551a:	d820      	bhi.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800551c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005520:	d012      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005522:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005526:	d81a      	bhi.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005528:	2b00      	cmp	r3, #0
 800552a:	d022      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800552c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005530:	d115      	bne.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005536:	3308      	adds	r3, #8
 8005538:	2101      	movs	r1, #1
 800553a:	4618      	mov	r0, r3
 800553c:	f001 fa0e 	bl	800695c <RCCEx_PLL2_Config>
 8005540:	4603      	mov	r3, r0
 8005542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005546:	e015      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800554c:	3328      	adds	r3, #40	@ 0x28
 800554e:	2101      	movs	r1, #1
 8005550:	4618      	mov	r0, r3
 8005552:	f001 fab5 	bl	8006ac0 <RCCEx_PLL3_Config>
 8005556:	4603      	mov	r3, r0
 8005558:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800555c:	e00a      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005564:	e006      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005566:	bf00      	nop
 8005568:	e004      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800556a:	bf00      	nop
 800556c:	e002      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800556e:	bf00      	nop
 8005570:	e000      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005572:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005574:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10d      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800557c:	4b05      	ldr	r3, [pc, #20]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800557e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005580:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005588:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800558a:	4a02      	ldr	r2, [pc, #8]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800558c:	430b      	orrs	r3, r1
 800558e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005590:	e006      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005592:	bf00      	nop
 8005594:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005598:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800559c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80055a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80055ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80055b0:	2300      	movs	r3, #0
 80055b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80055b6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80055ba:	460b      	mov	r3, r1
 80055bc:	4313      	orrs	r3, r2
 80055be:	d055      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80055c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80055c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055cc:	d033      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80055ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055d2:	d82c      	bhi.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80055d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055d8:	d02f      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80055da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055de:	d826      	bhi.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80055e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80055e4:	d02b      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80055e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80055ea:	d820      	bhi.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80055ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055f0:	d012      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80055f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055f6:	d81a      	bhi.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d022      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80055fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005600:	d115      	bne.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005606:	3308      	adds	r3, #8
 8005608:	2101      	movs	r1, #1
 800560a:	4618      	mov	r0, r3
 800560c:	f001 f9a6 	bl	800695c <RCCEx_PLL2_Config>
 8005610:	4603      	mov	r3, r0
 8005612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005616:	e015      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800561c:	3328      	adds	r3, #40	@ 0x28
 800561e:	2101      	movs	r1, #1
 8005620:	4618      	mov	r0, r3
 8005622:	f001 fa4d 	bl	8006ac0 <RCCEx_PLL3_Config>
 8005626:	4603      	mov	r3, r0
 8005628:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800562c:	e00a      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005634:	e006      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005636:	bf00      	nop
 8005638:	e004      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800563a:	bf00      	nop
 800563c:	e002      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800563e:	bf00      	nop
 8005640:	e000      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005642:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005644:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10b      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800564c:	4ba3      	ldr	r3, [pc, #652]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800564e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005650:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005658:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800565c:	4a9f      	ldr	r2, [pc, #636]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800565e:	430b      	orrs	r3, r1
 8005660:	6593      	str	r3, [r2, #88]	@ 0x58
 8005662:	e003      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005664:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005668:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800566c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005674:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005678:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800567c:	2300      	movs	r3, #0
 800567e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005682:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005686:	460b      	mov	r3, r1
 8005688:	4313      	orrs	r3, r2
 800568a:	d037      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800568c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005692:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005696:	d00e      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005698:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800569c:	d816      	bhi.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d018      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80056a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056a6:	d111      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056a8:	4b8c      	ldr	r3, [pc, #560]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ac:	4a8b      	ldr	r2, [pc, #556]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80056b4:	e00f      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ba:	3308      	adds	r3, #8
 80056bc:	2101      	movs	r1, #1
 80056be:	4618      	mov	r0, r3
 80056c0:	f001 f94c 	bl	800695c <RCCEx_PLL2_Config>
 80056c4:	4603      	mov	r3, r0
 80056c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80056ca:	e004      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056d2:	e000      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80056d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10a      	bne.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80056de:	4b7f      	ldr	r3, [pc, #508]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056e2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80056e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ec:	4a7b      	ldr	r2, [pc, #492]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056ee:	430b      	orrs	r3, r1
 80056f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80056f2:	e003      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80056fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005704:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005708:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800570c:	2300      	movs	r3, #0
 800570e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005712:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005716:	460b      	mov	r3, r1
 8005718:	4313      	orrs	r3, r2
 800571a:	d039      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800571c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005722:	2b03      	cmp	r3, #3
 8005724:	d81c      	bhi.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005726:	a201      	add	r2, pc, #4	@ (adr r2, 800572c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572c:	08005769 	.word	0x08005769
 8005730:	0800573d 	.word	0x0800573d
 8005734:	0800574b 	.word	0x0800574b
 8005738:	08005769 	.word	0x08005769
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800573c:	4b67      	ldr	r3, [pc, #412]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800573e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005740:	4a66      	ldr	r2, [pc, #408]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005742:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005746:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005748:	e00f      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800574a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800574e:	3308      	adds	r3, #8
 8005750:	2102      	movs	r1, #2
 8005752:	4618      	mov	r0, r3
 8005754:	f001 f902 	bl	800695c <RCCEx_PLL2_Config>
 8005758:	4603      	mov	r3, r0
 800575a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800575e:	e004      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005766:	e000      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800576a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10a      	bne.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005772:	4b5a      	ldr	r3, [pc, #360]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005776:	f023 0103 	bic.w	r1, r3, #3
 800577a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800577e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005780:	4a56      	ldr	r2, [pc, #344]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005782:	430b      	orrs	r3, r1
 8005784:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005786:	e003      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005788:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800578c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005798:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800579c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057a0:	2300      	movs	r3, #0
 80057a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80057a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80057aa:	460b      	mov	r3, r1
 80057ac:	4313      	orrs	r3, r2
 80057ae:	f000 809f 	beq.w	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057b2:	4b4b      	ldr	r3, [pc, #300]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a4a      	ldr	r2, [pc, #296]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80057b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057be:	f7fb ff03 	bl	80015c8 <HAL_GetTick>
 80057c2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057c6:	e00b      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057c8:	f7fb fefe 	bl	80015c8 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b64      	cmp	r3, #100	@ 0x64
 80057d6:	d903      	bls.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057de:	e005      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057e0:	4b3f      	ldr	r3, [pc, #252]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0ed      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80057ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d179      	bne.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80057f4:	4b39      	ldr	r3, [pc, #228]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80057f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005800:	4053      	eors	r3, r2
 8005802:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005806:	2b00      	cmp	r3, #0
 8005808:	d015      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800580a:	4b34      	ldr	r3, [pc, #208]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800580c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800580e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005812:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005816:	4b31      	ldr	r3, [pc, #196]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800581a:	4a30      	ldr	r2, [pc, #192]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800581c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005820:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005822:	4b2e      	ldr	r3, [pc, #184]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005826:	4a2d      	ldr	r2, [pc, #180]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005828:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800582c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800582e:	4a2b      	ldr	r2, [pc, #172]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005830:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005834:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800583a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800583e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005842:	d118      	bne.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005844:	f7fb fec0 	bl	80015c8 <HAL_GetTick>
 8005848:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800584c:	e00d      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800584e:	f7fb febb 	bl	80015c8 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005858:	1ad2      	subs	r2, r2, r3
 800585a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800585e:	429a      	cmp	r2, r3
 8005860:	d903      	bls.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005868:	e005      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800586a:	4b1c      	ldr	r3, [pc, #112]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800586c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0eb      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800587a:	2b00      	cmp	r3, #0
 800587c:	d129      	bne.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800587e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005882:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005886:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800588a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800588e:	d10e      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005890:	4b12      	ldr	r3, [pc, #72]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800589c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80058a0:	091a      	lsrs	r2, r3, #4
 80058a2:	4b10      	ldr	r3, [pc, #64]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80058a4:	4013      	ands	r3, r2
 80058a6:	4a0d      	ldr	r2, [pc, #52]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058a8:	430b      	orrs	r3, r1
 80058aa:	6113      	str	r3, [r2, #16]
 80058ac:	e005      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80058ae:	4b0b      	ldr	r3, [pc, #44]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	4a0a      	ldr	r2, [pc, #40]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80058b8:	6113      	str	r3, [r2, #16]
 80058ba:	4b08      	ldr	r3, [pc, #32]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058bc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80058be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80058c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058ca:	4a04      	ldr	r2, [pc, #16]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058cc:	430b      	orrs	r3, r1
 80058ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80058d0:	e00e      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80058da:	e009      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80058dc:	58024400 	.word	0x58024400
 80058e0:	58024800 	.word	0x58024800
 80058e4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80058f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f8:	f002 0301 	and.w	r3, r2, #1
 80058fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005900:	2300      	movs	r3, #0
 8005902:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005906:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800590a:	460b      	mov	r3, r1
 800590c:	4313      	orrs	r3, r2
 800590e:	f000 8089 	beq.w	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005916:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005918:	2b28      	cmp	r3, #40	@ 0x28
 800591a:	d86b      	bhi.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800591c:	a201      	add	r2, pc, #4	@ (adr r2, 8005924 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800591e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005922:	bf00      	nop
 8005924:	080059fd 	.word	0x080059fd
 8005928:	080059f5 	.word	0x080059f5
 800592c:	080059f5 	.word	0x080059f5
 8005930:	080059f5 	.word	0x080059f5
 8005934:	080059f5 	.word	0x080059f5
 8005938:	080059f5 	.word	0x080059f5
 800593c:	080059f5 	.word	0x080059f5
 8005940:	080059f5 	.word	0x080059f5
 8005944:	080059c9 	.word	0x080059c9
 8005948:	080059f5 	.word	0x080059f5
 800594c:	080059f5 	.word	0x080059f5
 8005950:	080059f5 	.word	0x080059f5
 8005954:	080059f5 	.word	0x080059f5
 8005958:	080059f5 	.word	0x080059f5
 800595c:	080059f5 	.word	0x080059f5
 8005960:	080059f5 	.word	0x080059f5
 8005964:	080059df 	.word	0x080059df
 8005968:	080059f5 	.word	0x080059f5
 800596c:	080059f5 	.word	0x080059f5
 8005970:	080059f5 	.word	0x080059f5
 8005974:	080059f5 	.word	0x080059f5
 8005978:	080059f5 	.word	0x080059f5
 800597c:	080059f5 	.word	0x080059f5
 8005980:	080059f5 	.word	0x080059f5
 8005984:	080059fd 	.word	0x080059fd
 8005988:	080059f5 	.word	0x080059f5
 800598c:	080059f5 	.word	0x080059f5
 8005990:	080059f5 	.word	0x080059f5
 8005994:	080059f5 	.word	0x080059f5
 8005998:	080059f5 	.word	0x080059f5
 800599c:	080059f5 	.word	0x080059f5
 80059a0:	080059f5 	.word	0x080059f5
 80059a4:	080059fd 	.word	0x080059fd
 80059a8:	080059f5 	.word	0x080059f5
 80059ac:	080059f5 	.word	0x080059f5
 80059b0:	080059f5 	.word	0x080059f5
 80059b4:	080059f5 	.word	0x080059f5
 80059b8:	080059f5 	.word	0x080059f5
 80059bc:	080059f5 	.word	0x080059f5
 80059c0:	080059f5 	.word	0x080059f5
 80059c4:	080059fd 	.word	0x080059fd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059cc:	3308      	adds	r3, #8
 80059ce:	2101      	movs	r1, #1
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 ffc3 	bl	800695c <RCCEx_PLL2_Config>
 80059d6:	4603      	mov	r3, r0
 80059d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80059dc:	e00f      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e2:	3328      	adds	r3, #40	@ 0x28
 80059e4:	2101      	movs	r1, #1
 80059e6:	4618      	mov	r0, r3
 80059e8:	f001 f86a 	bl	8006ac0 <RCCEx_PLL3_Config>
 80059ec:	4603      	mov	r3, r0
 80059ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80059f2:	e004      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059fa:	e000      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80059fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10a      	bne.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005a06:	4bbf      	ldr	r3, [pc, #764]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a0a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a14:	4abb      	ldr	r2, [pc, #748]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a16:	430b      	orrs	r3, r1
 8005a18:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a1a:	e003      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2c:	f002 0302 	and.w	r3, r2, #2
 8005a30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a34:	2300      	movs	r3, #0
 8005a36:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005a3a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005a3e:	460b      	mov	r3, r1
 8005a40:	4313      	orrs	r3, r2
 8005a42:	d041      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a4a:	2b05      	cmp	r3, #5
 8005a4c:	d824      	bhi.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a54 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a54:	08005aa1 	.word	0x08005aa1
 8005a58:	08005a6d 	.word	0x08005a6d
 8005a5c:	08005a83 	.word	0x08005a83
 8005a60:	08005aa1 	.word	0x08005aa1
 8005a64:	08005aa1 	.word	0x08005aa1
 8005a68:	08005aa1 	.word	0x08005aa1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a70:	3308      	adds	r3, #8
 8005a72:	2101      	movs	r1, #1
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 ff71 	bl	800695c <RCCEx_PLL2_Config>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005a80:	e00f      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a86:	3328      	adds	r3, #40	@ 0x28
 8005a88:	2101      	movs	r1, #1
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f001 f818 	bl	8006ac0 <RCCEx_PLL3_Config>
 8005a90:	4603      	mov	r3, r0
 8005a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005a96:	e004      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a9e:	e000      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10a      	bne.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005aaa:	4b96      	ldr	r3, [pc, #600]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aae:	f023 0107 	bic.w	r1, r3, #7
 8005ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ab8:	4a92      	ldr	r2, [pc, #584]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005aba:	430b      	orrs	r3, r1
 8005abc:	6553      	str	r3, [r2, #84]	@ 0x54
 8005abe:	e003      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ac4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad0:	f002 0304 	and.w	r3, r2, #4
 8005ad4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ad8:	2300      	movs	r3, #0
 8005ada:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ade:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	d044      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005af0:	2b05      	cmp	r3, #5
 8005af2:	d825      	bhi.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005af4:	a201      	add	r2, pc, #4	@ (adr r2, 8005afc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afa:	bf00      	nop
 8005afc:	08005b49 	.word	0x08005b49
 8005b00:	08005b15 	.word	0x08005b15
 8005b04:	08005b2b 	.word	0x08005b2b
 8005b08:	08005b49 	.word	0x08005b49
 8005b0c:	08005b49 	.word	0x08005b49
 8005b10:	08005b49 	.word	0x08005b49
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b18:	3308      	adds	r3, #8
 8005b1a:	2101      	movs	r1, #1
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f000 ff1d 	bl	800695c <RCCEx_PLL2_Config>
 8005b22:	4603      	mov	r3, r0
 8005b24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005b28:	e00f      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b2e:	3328      	adds	r3, #40	@ 0x28
 8005b30:	2101      	movs	r1, #1
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 ffc4 	bl	8006ac0 <RCCEx_PLL3_Config>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005b3e:	e004      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b46:	e000      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005b48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10b      	bne.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b52:	4b6c      	ldr	r3, [pc, #432]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b56:	f023 0107 	bic.w	r1, r3, #7
 8005b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b62:	4a68      	ldr	r2, [pc, #416]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b64:	430b      	orrs	r3, r1
 8005b66:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b68:	e003      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7a:	f002 0320 	and.w	r3, r2, #32
 8005b7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b82:	2300      	movs	r3, #0
 8005b84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	d055      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b9e:	d033      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005ba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ba4:	d82c      	bhi.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005baa:	d02f      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bb0:	d826      	bhi.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005bb2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005bb6:	d02b      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005bb8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005bbc:	d820      	bhi.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005bbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bc2:	d012      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005bc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bc8:	d81a      	bhi.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d022      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005bce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bd2:	d115      	bne.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd8:	3308      	adds	r3, #8
 8005bda:	2100      	movs	r1, #0
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 febd 	bl	800695c <RCCEx_PLL2_Config>
 8005be2:	4603      	mov	r3, r0
 8005be4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005be8:	e015      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bee:	3328      	adds	r3, #40	@ 0x28
 8005bf0:	2102      	movs	r1, #2
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 ff64 	bl	8006ac0 <RCCEx_PLL3_Config>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005bfe:	e00a      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c06:	e006      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005c08:	bf00      	nop
 8005c0a:	e004      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005c0c:	bf00      	nop
 8005c0e:	e002      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005c10:	bf00      	nop
 8005c12:	e000      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10b      	bne.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c1e:	4b39      	ldr	r3, [pc, #228]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c22:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c2e:	4a35      	ldr	r2, [pc, #212]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c30:	430b      	orrs	r3, r1
 8005c32:	6553      	str	r3, [r2, #84]	@ 0x54
 8005c34:	e003      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c46:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005c4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c4e:	2300      	movs	r3, #0
 8005c50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005c54:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	d058      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c66:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005c6a:	d033      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005c6c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005c70:	d82c      	bhi.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c76:	d02f      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005c78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c7c:	d826      	bhi.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005c7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c82:	d02b      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005c84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c88:	d820      	bhi.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005c8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c8e:	d012      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005c90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c94:	d81a      	bhi.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d022      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c9e:	d115      	bne.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ca4:	3308      	adds	r3, #8
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f000 fe57 	bl	800695c <RCCEx_PLL2_Config>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005cb4:	e015      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cba:	3328      	adds	r3, #40	@ 0x28
 8005cbc:	2102      	movs	r1, #2
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f000 fefe 	bl	8006ac0 <RCCEx_PLL3_Config>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005cca:	e00a      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cd2:	e006      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005cd4:	bf00      	nop
 8005cd6:	e004      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005cd8:	bf00      	nop
 8005cda:	e002      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005cdc:	bf00      	nop
 8005cde:	e000      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10e      	bne.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005cea:	4b06      	ldr	r3, [pc, #24]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cee:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cfa:	4a02      	ldr	r2, [pc, #8]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005cfc:	430b      	orrs	r3, r1
 8005cfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d00:	e006      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005d02:	bf00      	nop
 8005d04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d18:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005d1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d20:	2300      	movs	r3, #0
 8005d22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d26:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	d055      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005d38:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005d3c:	d033      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005d3e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005d42:	d82c      	bhi.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005d44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d48:	d02f      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005d4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d4e:	d826      	bhi.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005d50:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005d54:	d02b      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005d56:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005d5a:	d820      	bhi.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005d5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d60:	d012      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005d62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d66:	d81a      	bhi.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d022      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005d6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d70:	d115      	bne.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d76:	3308      	adds	r3, #8
 8005d78:	2100      	movs	r1, #0
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 fdee 	bl	800695c <RCCEx_PLL2_Config>
 8005d80:	4603      	mov	r3, r0
 8005d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005d86:	e015      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d8c:	3328      	adds	r3, #40	@ 0x28
 8005d8e:	2102      	movs	r1, #2
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 fe95 	bl	8006ac0 <RCCEx_PLL3_Config>
 8005d96:	4603      	mov	r3, r0
 8005d98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005d9c:	e00a      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005da4:	e006      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005da6:	bf00      	nop
 8005da8:	e004      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005daa:	bf00      	nop
 8005dac:	e002      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005dae:	bf00      	nop
 8005db0:	e000      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005db2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005db4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10b      	bne.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005dbc:	4ba1      	ldr	r3, [pc, #644]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dc0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005dcc:	4a9d      	ldr	r2, [pc, #628]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005dce:	430b      	orrs	r3, r1
 8005dd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dd2:	e003      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de4:	f002 0308 	and.w	r3, r2, #8
 8005de8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005dec:	2300      	movs	r3, #0
 8005dee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005df2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005df6:	460b      	mov	r3, r1
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	d01e      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e08:	d10c      	bne.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e0e:	3328      	adds	r3, #40	@ 0x28
 8005e10:	2102      	movs	r1, #2
 8005e12:	4618      	mov	r0, r3
 8005e14:	f000 fe54 	bl	8006ac0 <RCCEx_PLL3_Config>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d002      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005e24:	4b87      	ldr	r3, [pc, #540]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e28:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e34:	4a83      	ldr	r2, [pc, #524]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e36:	430b      	orrs	r3, r1
 8005e38:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e42:	f002 0310 	and.w	r3, r2, #16
 8005e46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005e50:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005e54:	460b      	mov	r3, r1
 8005e56:	4313      	orrs	r3, r2
 8005e58:	d01e      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e66:	d10c      	bne.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e6c:	3328      	adds	r3, #40	@ 0x28
 8005e6e:	2102      	movs	r1, #2
 8005e70:	4618      	mov	r0, r3
 8005e72:	f000 fe25 	bl	8006ac0 <RCCEx_PLL3_Config>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d002      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e82:	4b70      	ldr	r3, [pc, #448]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e86:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e92:	4a6c      	ldr	r2, [pc, #432]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e94:	430b      	orrs	r3, r1
 8005e96:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005ea4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005eae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	d03e      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ebc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ec0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ec4:	d022      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005ec6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005eca:	d81b      	bhi.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d003      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ed4:	d00b      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005ed6:	e015      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005edc:	3308      	adds	r3, #8
 8005ede:	2100      	movs	r1, #0
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f000 fd3b 	bl	800695c <RCCEx_PLL2_Config>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005eec:	e00f      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef2:	3328      	adds	r3, #40	@ 0x28
 8005ef4:	2102      	movs	r1, #2
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 fde2 	bl	8006ac0 <RCCEx_PLL3_Config>
 8005efc:	4603      	mov	r3, r0
 8005efe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005f02:	e004      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f0a:	e000      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005f0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10b      	bne.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f16:	4b4b      	ldr	r3, [pc, #300]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f1a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005f26:	4a47      	ldr	r2, [pc, #284]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f28:	430b      	orrs	r3, r1
 8005f2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f2c:	e003      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005f42:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f44:	2300      	movs	r3, #0
 8005f46:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f48:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	d03b      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f5a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005f5e:	d01f      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005f60:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005f64:	d818      	bhi.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005f66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f6a:	d003      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005f6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f70:	d007      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005f72:	e011      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f74:	4b33      	ldr	r3, [pc, #204]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f78:	4a32      	ldr	r2, [pc, #200]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005f80:	e00f      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f86:	3328      	adds	r3, #40	@ 0x28
 8005f88:	2101      	movs	r1, #1
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f000 fd98 	bl	8006ac0 <RCCEx_PLL3_Config>
 8005f90:	4603      	mov	r3, r0
 8005f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005f96:	e004      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f9e:	e000      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005fa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10b      	bne.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005faa:	4b26      	ldr	r3, [pc, #152]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fba:	4a22      	ldr	r2, [pc, #136]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fbc:	430b      	orrs	r3, r1
 8005fbe:	6553      	str	r3, [r2, #84]	@ 0x54
 8005fc0:	e003      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005fd6:	673b      	str	r3, [r7, #112]	@ 0x70
 8005fd8:	2300      	movs	r3, #0
 8005fda:	677b      	str	r3, [r7, #116]	@ 0x74
 8005fdc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	d034      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d003      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ff4:	d007      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005ff6:	e011      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ff8:	4b12      	ldr	r3, [pc, #72]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffc:	4a11      	ldr	r2, [pc, #68]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ffe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006002:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006004:	e00e      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800600a:	3308      	adds	r3, #8
 800600c:	2102      	movs	r1, #2
 800600e:	4618      	mov	r0, r3
 8006010:	f000 fca4 	bl	800695c <RCCEx_PLL2_Config>
 8006014:	4603      	mov	r3, r0
 8006016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800601a:	e003      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006022:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006024:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10d      	bne.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800602c:	4b05      	ldr	r3, [pc, #20]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800602e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006030:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006038:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800603a:	4a02      	ldr	r2, [pc, #8]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800603c:	430b      	orrs	r3, r1
 800603e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006040:	e006      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006042:	bf00      	nop
 8006044:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006048:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800604c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006058:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800605c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800605e:	2300      	movs	r3, #0
 8006060:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006062:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006066:	460b      	mov	r3, r1
 8006068:	4313      	orrs	r3, r2
 800606a:	d00c      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800606c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006070:	3328      	adds	r3, #40	@ 0x28
 8006072:	2102      	movs	r1, #2
 8006074:	4618      	mov	r0, r3
 8006076:	f000 fd23 	bl	8006ac0 <RCCEx_PLL3_Config>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d002      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800608a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006092:	663b      	str	r3, [r7, #96]	@ 0x60
 8006094:	2300      	movs	r3, #0
 8006096:	667b      	str	r3, [r7, #100]	@ 0x64
 8006098:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800609c:	460b      	mov	r3, r1
 800609e:	4313      	orrs	r3, r2
 80060a0:	d038      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80060a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060ae:	d018      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80060b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060b4:	d811      	bhi.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80060b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060ba:	d014      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80060bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060c0:	d80b      	bhi.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d011      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80060c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060ca:	d106      	bne.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060cc:	4bc3      	ldr	r3, [pc, #780]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d0:	4ac2      	ldr	r2, [pc, #776]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80060d8:	e008      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060e0:	e004      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80060e2:	bf00      	nop
 80060e4:	e002      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80060e6:	bf00      	nop
 80060e8:	e000      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80060ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10b      	bne.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060f4:	4bb9      	ldr	r3, [pc, #740]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060f8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80060fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006100:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006104:	4ab5      	ldr	r2, [pc, #724]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006106:	430b      	orrs	r3, r1
 8006108:	6553      	str	r3, [r2, #84]	@ 0x54
 800610a:	e003      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800610c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006110:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006120:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006122:	2300      	movs	r3, #0
 8006124:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006126:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800612a:	460b      	mov	r3, r1
 800612c:	4313      	orrs	r3, r2
 800612e:	d009      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006130:	4baa      	ldr	r3, [pc, #680]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006134:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800613c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800613e:	4aa7      	ldr	r2, [pc, #668]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006140:	430b      	orrs	r3, r1
 8006142:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006150:	653b      	str	r3, [r7, #80]	@ 0x50
 8006152:	2300      	movs	r3, #0
 8006154:	657b      	str	r3, [r7, #84]	@ 0x54
 8006156:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800615a:	460b      	mov	r3, r1
 800615c:	4313      	orrs	r3, r2
 800615e:	d00a      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006160:	4b9e      	ldr	r3, [pc, #632]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800616c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006170:	4a9a      	ldr	r2, [pc, #616]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006172:	430b      	orrs	r3, r1
 8006174:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800617a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006182:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006184:	2300      	movs	r3, #0
 8006186:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006188:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800618c:	460b      	mov	r3, r1
 800618e:	4313      	orrs	r3, r2
 8006190:	d009      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006192:	4b92      	ldr	r3, [pc, #584]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006196:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800619a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800619e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061a0:	4a8e      	ldr	r2, [pc, #568]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061a2:	430b      	orrs	r3, r1
 80061a4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80061a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ae:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80061b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80061b4:	2300      	movs	r3, #0
 80061b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80061b8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80061bc:	460b      	mov	r3, r1
 80061be:	4313      	orrs	r3, r2
 80061c0:	d00e      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80061c2:	4b86      	ldr	r3, [pc, #536]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	4a85      	ldr	r2, [pc, #532]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061c8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80061cc:	6113      	str	r3, [r2, #16]
 80061ce:	4b83      	ldr	r3, [pc, #524]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061d0:	6919      	ldr	r1, [r3, #16]
 80061d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80061da:	4a80      	ldr	r2, [pc, #512]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061dc:	430b      	orrs	r3, r1
 80061de:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80061e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80061ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80061ee:	2300      	movs	r3, #0
 80061f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061f2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80061f6:	460b      	mov	r3, r1
 80061f8:	4313      	orrs	r3, r2
 80061fa:	d009      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80061fc:	4b77      	ldr	r3, [pc, #476]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006200:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800620a:	4a74      	ldr	r2, [pc, #464]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800620c:	430b      	orrs	r3, r1
 800620e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006218:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800621c:	633b      	str	r3, [r7, #48]	@ 0x30
 800621e:	2300      	movs	r3, #0
 8006220:	637b      	str	r3, [r7, #52]	@ 0x34
 8006222:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006226:	460b      	mov	r3, r1
 8006228:	4313      	orrs	r3, r2
 800622a:	d00a      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800622c:	4b6b      	ldr	r3, [pc, #428]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800622e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006230:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006238:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800623c:	4a67      	ldr	r2, [pc, #412]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800623e:	430b      	orrs	r3, r1
 8006240:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624a:	2100      	movs	r1, #0
 800624c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006254:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006258:	460b      	mov	r3, r1
 800625a:	4313      	orrs	r3, r2
 800625c:	d011      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800625e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006262:	3308      	adds	r3, #8
 8006264:	2100      	movs	r1, #0
 8006266:	4618      	mov	r0, r3
 8006268:	f000 fb78 	bl	800695c <RCCEx_PLL2_Config>
 800626c:	4603      	mov	r3, r0
 800626e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006272:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800627a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800627e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628a:	2100      	movs	r1, #0
 800628c:	6239      	str	r1, [r7, #32]
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	627b      	str	r3, [r7, #36]	@ 0x24
 8006294:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006298:	460b      	mov	r3, r1
 800629a:	4313      	orrs	r3, r2
 800629c:	d011      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800629e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a2:	3308      	adds	r3, #8
 80062a4:	2101      	movs	r1, #1
 80062a6:	4618      	mov	r0, r3
 80062a8:	f000 fb58 	bl	800695c <RCCEx_PLL2_Config>
 80062ac:	4603      	mov	r3, r0
 80062ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80062b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80062c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ca:	2100      	movs	r1, #0
 80062cc:	61b9      	str	r1, [r7, #24]
 80062ce:	f003 0304 	and.w	r3, r3, #4
 80062d2:	61fb      	str	r3, [r7, #28]
 80062d4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80062d8:	460b      	mov	r3, r1
 80062da:	4313      	orrs	r3, r2
 80062dc:	d011      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80062de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e2:	3308      	adds	r3, #8
 80062e4:	2102      	movs	r1, #2
 80062e6:	4618      	mov	r0, r3
 80062e8:	f000 fb38 	bl	800695c <RCCEx_PLL2_Config>
 80062ec:	4603      	mov	r3, r0
 80062ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80062f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630a:	2100      	movs	r1, #0
 800630c:	6139      	str	r1, [r7, #16]
 800630e:	f003 0308 	and.w	r3, r3, #8
 8006312:	617b      	str	r3, [r7, #20]
 8006314:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006318:	460b      	mov	r3, r1
 800631a:	4313      	orrs	r3, r2
 800631c:	d011      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800631e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006322:	3328      	adds	r3, #40	@ 0x28
 8006324:	2100      	movs	r1, #0
 8006326:	4618      	mov	r0, r3
 8006328:	f000 fbca 	bl	8006ac0 <RCCEx_PLL3_Config>
 800632c:	4603      	mov	r3, r0
 800632e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800633a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800633e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634a:	2100      	movs	r1, #0
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	f003 0310 	and.w	r3, r3, #16
 8006352:	60fb      	str	r3, [r7, #12]
 8006354:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006358:	460b      	mov	r3, r1
 800635a:	4313      	orrs	r3, r2
 800635c:	d011      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800635e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006362:	3328      	adds	r3, #40	@ 0x28
 8006364:	2101      	movs	r1, #1
 8006366:	4618      	mov	r0, r3
 8006368:	f000 fbaa 	bl	8006ac0 <RCCEx_PLL3_Config>
 800636c:	4603      	mov	r3, r0
 800636e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006376:	2b00      	cmp	r3, #0
 8006378:	d003      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800637a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800637e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638a:	2100      	movs	r1, #0
 800638c:	6039      	str	r1, [r7, #0]
 800638e:	f003 0320 	and.w	r3, r3, #32
 8006392:	607b      	str	r3, [r7, #4]
 8006394:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006398:	460b      	mov	r3, r1
 800639a:	4313      	orrs	r3, r2
 800639c:	d011      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800639e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063a2:	3328      	adds	r3, #40	@ 0x28
 80063a4:	2102      	movs	r1, #2
 80063a6:	4618      	mov	r0, r3
 80063a8:	f000 fb8a 	bl	8006ac0 <RCCEx_PLL3_Config>
 80063ac:	4603      	mov	r3, r0
 80063ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80063b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d003      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80063c2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80063ca:	2300      	movs	r3, #0
 80063cc:	e000      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80063d6:	46bd      	mov	sp, r7
 80063d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063dc:	58024400 	.word	0x58024400

080063e0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80063e4:	f7fe fd54 	bl	8004e90 <HAL_RCC_GetHCLKFreq>
 80063e8:	4602      	mov	r2, r0
 80063ea:	4b06      	ldr	r3, [pc, #24]	@ (8006404 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	091b      	lsrs	r3, r3, #4
 80063f0:	f003 0307 	and.w	r3, r3, #7
 80063f4:	4904      	ldr	r1, [pc, #16]	@ (8006408 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80063f6:	5ccb      	ldrb	r3, [r1, r3]
 80063f8:	f003 031f 	and.w	r3, r3, #31
 80063fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006400:	4618      	mov	r0, r3
 8006402:	bd80      	pop	{r7, pc}
 8006404:	58024400 	.word	0x58024400
 8006408:	0801b0b8 	.word	0x0801b0b8

0800640c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800640c:	b480      	push	{r7}
 800640e:	b089      	sub	sp, #36	@ 0x24
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006414:	4ba1      	ldr	r3, [pc, #644]	@ (800669c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006418:	f003 0303 	and.w	r3, r3, #3
 800641c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800641e:	4b9f      	ldr	r3, [pc, #636]	@ (800669c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006422:	0b1b      	lsrs	r3, r3, #12
 8006424:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006428:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800642a:	4b9c      	ldr	r3, [pc, #624]	@ (800669c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800642c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800642e:	091b      	lsrs	r3, r3, #4
 8006430:	f003 0301 	and.w	r3, r3, #1
 8006434:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006436:	4b99      	ldr	r3, [pc, #612]	@ (800669c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800643a:	08db      	lsrs	r3, r3, #3
 800643c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	fb02 f303 	mul.w	r3, r2, r3
 8006446:	ee07 3a90 	vmov	s15, r3
 800644a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800644e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 8111 	beq.w	800667c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	2b02      	cmp	r3, #2
 800645e:	f000 8083 	beq.w	8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	2b02      	cmp	r3, #2
 8006466:	f200 80a1 	bhi.w	80065ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d003      	beq.n	8006478 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d056      	beq.n	8006524 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006476:	e099      	b.n	80065ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006478:	4b88      	ldr	r3, [pc, #544]	@ (800669c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0320 	and.w	r3, r3, #32
 8006480:	2b00      	cmp	r3, #0
 8006482:	d02d      	beq.n	80064e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006484:	4b85      	ldr	r3, [pc, #532]	@ (800669c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	08db      	lsrs	r3, r3, #3
 800648a:	f003 0303 	and.w	r3, r3, #3
 800648e:	4a84      	ldr	r2, [pc, #528]	@ (80066a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006490:	fa22 f303 	lsr.w	r3, r2, r3
 8006494:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	ee07 3a90 	vmov	s15, r3
 800649c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	ee07 3a90 	vmov	s15, r3
 80064a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ae:	4b7b      	ldr	r3, [pc, #492]	@ (800669c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064b6:	ee07 3a90 	vmov	s15, r3
 80064ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064be:	ed97 6a03 	vldr	s12, [r7, #12]
 80064c2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80066a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80064c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80064de:	e087      	b.n	80065f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	ee07 3a90 	vmov	s15, r3
 80064e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80066a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80064ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064f2:	4b6a      	ldr	r3, [pc, #424]	@ (800669c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064fa:	ee07 3a90 	vmov	s15, r3
 80064fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006502:	ed97 6a03 	vldr	s12, [r7, #12]
 8006506:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80066a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800650a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800650e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006512:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800651a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800651e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006522:	e065      	b.n	80065f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	ee07 3a90 	vmov	s15, r3
 800652a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800652e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80066ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006536:	4b59      	ldr	r3, [pc, #356]	@ (800669c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800653a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800653e:	ee07 3a90 	vmov	s15, r3
 8006542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006546:	ed97 6a03 	vldr	s12, [r7, #12]
 800654a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80066a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800654e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006556:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800655a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800655e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006562:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006566:	e043      	b.n	80065f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	ee07 3a90 	vmov	s15, r3
 800656e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006572:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80066b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800657a:	4b48      	ldr	r3, [pc, #288]	@ (800669c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800657c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800657e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006582:	ee07 3a90 	vmov	s15, r3
 8006586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800658a:	ed97 6a03 	vldr	s12, [r7, #12]
 800658e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80066a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800659a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800659e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065aa:	e021      	b.n	80065f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	ee07 3a90 	vmov	s15, r3
 80065b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065b6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80066ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80065ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065be:	4b37      	ldr	r3, [pc, #220]	@ (800669c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065c6:	ee07 3a90 	vmov	s15, r3
 80065ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80065d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80066a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80065d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80065f0:	4b2a      	ldr	r3, [pc, #168]	@ (800669c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f4:	0a5b      	lsrs	r3, r3, #9
 80065f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065fa:	ee07 3a90 	vmov	s15, r3
 80065fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006602:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006606:	ee37 7a87 	vadd.f32	s14, s15, s14
 800660a:	edd7 6a07 	vldr	s13, [r7, #28]
 800660e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006616:	ee17 2a90 	vmov	r2, s15
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800661e:	4b1f      	ldr	r3, [pc, #124]	@ (800669c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006622:	0c1b      	lsrs	r3, r3, #16
 8006624:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006628:	ee07 3a90 	vmov	s15, r3
 800662c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006630:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006634:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006638:	edd7 6a07 	vldr	s13, [r7, #28]
 800663c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006644:	ee17 2a90 	vmov	r2, s15
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800664c:	4b13      	ldr	r3, [pc, #76]	@ (800669c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800664e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006650:	0e1b      	lsrs	r3, r3, #24
 8006652:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006656:	ee07 3a90 	vmov	s15, r3
 800665a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800665e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006662:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006666:	edd7 6a07 	vldr	s13, [r7, #28]
 800666a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800666e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006672:	ee17 2a90 	vmov	r2, s15
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800667a:	e008      	b.n	800668e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	609a      	str	r2, [r3, #8]
}
 800668e:	bf00      	nop
 8006690:	3724      	adds	r7, #36	@ 0x24
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	58024400 	.word	0x58024400
 80066a0:	03d09000 	.word	0x03d09000
 80066a4:	46000000 	.word	0x46000000
 80066a8:	4c742400 	.word	0x4c742400
 80066ac:	4a742400 	.word	0x4a742400
 80066b0:	4b7a0000 	.word	0x4b7a0000

080066b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b089      	sub	sp, #36	@ 0x24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066bc:	4ba1      	ldr	r3, [pc, #644]	@ (8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c0:	f003 0303 	and.w	r3, r3, #3
 80066c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80066c6:	4b9f      	ldr	r3, [pc, #636]	@ (8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ca:	0d1b      	lsrs	r3, r3, #20
 80066cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80066d2:	4b9c      	ldr	r3, [pc, #624]	@ (8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d6:	0a1b      	lsrs	r3, r3, #8
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80066de:	4b99      	ldr	r3, [pc, #612]	@ (8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066e2:	08db      	lsrs	r3, r3, #3
 80066e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	fb02 f303 	mul.w	r3, r2, r3
 80066ee:	ee07 3a90 	vmov	s15, r3
 80066f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 8111 	beq.w	8006924 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	2b02      	cmp	r3, #2
 8006706:	f000 8083 	beq.w	8006810 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	2b02      	cmp	r3, #2
 800670e:	f200 80a1 	bhi.w	8006854 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d003      	beq.n	8006720 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d056      	beq.n	80067cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800671e:	e099      	b.n	8006854 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006720:	4b88      	ldr	r3, [pc, #544]	@ (8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0320 	and.w	r3, r3, #32
 8006728:	2b00      	cmp	r3, #0
 800672a:	d02d      	beq.n	8006788 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800672c:	4b85      	ldr	r3, [pc, #532]	@ (8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	08db      	lsrs	r3, r3, #3
 8006732:	f003 0303 	and.w	r3, r3, #3
 8006736:	4a84      	ldr	r2, [pc, #528]	@ (8006948 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006738:	fa22 f303 	lsr.w	r3, r2, r3
 800673c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	ee07 3a90 	vmov	s15, r3
 8006744:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	ee07 3a90 	vmov	s15, r3
 800674e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006756:	4b7b      	ldr	r3, [pc, #492]	@ (8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800675a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800675e:	ee07 3a90 	vmov	s15, r3
 8006762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006766:	ed97 6a03 	vldr	s12, [r7, #12]
 800676a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800694c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800676e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006776:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800677a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800677e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006782:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006786:	e087      	b.n	8006898 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	ee07 3a90 	vmov	s15, r3
 800678e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006792:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006950 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800679a:	4b6a      	ldr	r3, [pc, #424]	@ (8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800679c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800679e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067a2:	ee07 3a90 	vmov	s15, r3
 80067a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80067ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800694c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80067b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067ca:	e065      	b.n	8006898 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	ee07 3a90 	vmov	s15, r3
 80067d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006954 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80067da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067de:	4b59      	ldr	r3, [pc, #356]	@ (8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067e6:	ee07 3a90 	vmov	s15, r3
 80067ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80067f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800694c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80067f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800680a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800680e:	e043      	b.n	8006898 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	ee07 3a90 	vmov	s15, r3
 8006816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800681a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006958 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800681e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006822:	4b48      	ldr	r3, [pc, #288]	@ (8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800682a:	ee07 3a90 	vmov	s15, r3
 800682e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006832:	ed97 6a03 	vldr	s12, [r7, #12]
 8006836:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800694c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800683a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800683e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006842:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800684a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800684e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006852:	e021      	b.n	8006898 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	ee07 3a90 	vmov	s15, r3
 800685a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800685e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006954 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006866:	4b37      	ldr	r3, [pc, #220]	@ (8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800686e:	ee07 3a90 	vmov	s15, r3
 8006872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006876:	ed97 6a03 	vldr	s12, [r7, #12]
 800687a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800694c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800687e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006886:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800688a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800688e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006892:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006896:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006898:	4b2a      	ldr	r3, [pc, #168]	@ (8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800689a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800689c:	0a5b      	lsrs	r3, r3, #9
 800689e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068a2:	ee07 3a90 	vmov	s15, r3
 80068a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80068b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068be:	ee17 2a90 	vmov	r2, s15
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80068c6:	4b1f      	ldr	r3, [pc, #124]	@ (8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ca:	0c1b      	lsrs	r3, r3, #16
 80068cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068d0:	ee07 3a90 	vmov	s15, r3
 80068d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80068e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068ec:	ee17 2a90 	vmov	r2, s15
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80068f4:	4b13      	ldr	r3, [pc, #76]	@ (8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f8:	0e1b      	lsrs	r3, r3, #24
 80068fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068fe:	ee07 3a90 	vmov	s15, r3
 8006902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006906:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800690a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800690e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006912:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006916:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800691a:	ee17 2a90 	vmov	r2, s15
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006922:	e008      	b.n	8006936 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	609a      	str	r2, [r3, #8]
}
 8006936:	bf00      	nop
 8006938:	3724      	adds	r7, #36	@ 0x24
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	58024400 	.word	0x58024400
 8006948:	03d09000 	.word	0x03d09000
 800694c:	46000000 	.word	0x46000000
 8006950:	4c742400 	.word	0x4c742400
 8006954:	4a742400 	.word	0x4a742400
 8006958:	4b7a0000 	.word	0x4b7a0000

0800695c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006966:	2300      	movs	r3, #0
 8006968:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800696a:	4b53      	ldr	r3, [pc, #332]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 800696c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800696e:	f003 0303 	and.w	r3, r3, #3
 8006972:	2b03      	cmp	r3, #3
 8006974:	d101      	bne.n	800697a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e099      	b.n	8006aae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800697a:	4b4f      	ldr	r3, [pc, #316]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a4e      	ldr	r2, [pc, #312]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006980:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006984:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006986:	f7fa fe1f 	bl	80015c8 <HAL_GetTick>
 800698a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800698c:	e008      	b.n	80069a0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800698e:	f7fa fe1b 	bl	80015c8 <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	2b02      	cmp	r3, #2
 800699a:	d901      	bls.n	80069a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e086      	b.n	8006aae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80069a0:	4b45      	ldr	r3, [pc, #276]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1f0      	bne.n	800698e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80069ac:	4b42      	ldr	r3, [pc, #264]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 80069ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	031b      	lsls	r3, r3, #12
 80069ba:	493f      	ldr	r1, [pc, #252]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	628b      	str	r3, [r1, #40]	@ 0x28
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	3b01      	subs	r3, #1
 80069c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	3b01      	subs	r3, #1
 80069d0:	025b      	lsls	r3, r3, #9
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	431a      	orrs	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	3b01      	subs	r3, #1
 80069dc:	041b      	lsls	r3, r3, #16
 80069de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80069e2:	431a      	orrs	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	3b01      	subs	r3, #1
 80069ea:	061b      	lsls	r3, r3, #24
 80069ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80069f0:	4931      	ldr	r1, [pc, #196]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80069f6:	4b30      	ldr	r3, [pc, #192]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 80069f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	492d      	ldr	r1, [pc, #180]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006a08:	4b2b      	ldr	r3, [pc, #172]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0c:	f023 0220 	bic.w	r2, r3, #32
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	4928      	ldr	r1, [pc, #160]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006a1a:	4b27      	ldr	r3, [pc, #156]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a1e:	4a26      	ldr	r2, [pc, #152]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a20:	f023 0310 	bic.w	r3, r3, #16
 8006a24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006a26:	4b24      	ldr	r3, [pc, #144]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a2a:	4b24      	ldr	r3, [pc, #144]	@ (8006abc <RCCEx_PLL2_Config+0x160>)
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	69d2      	ldr	r2, [r2, #28]
 8006a32:	00d2      	lsls	r2, r2, #3
 8006a34:	4920      	ldr	r1, [pc, #128]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a40:	f043 0310 	orr.w	r3, r3, #16
 8006a44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d106      	bne.n	8006a5a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a50:	4a19      	ldr	r2, [pc, #100]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006a56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a58:	e00f      	b.n	8006a7a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d106      	bne.n	8006a6e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006a60:	4b15      	ldr	r3, [pc, #84]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a64:	4a14      	ldr	r2, [pc, #80]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a6c:	e005      	b.n	8006a7a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006a6e:	4b12      	ldr	r3, [pc, #72]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a72:	4a11      	ldr	r2, [pc, #68]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006a78:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006a80:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a86:	f7fa fd9f 	bl	80015c8 <HAL_GetTick>
 8006a8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a8c:	e008      	b.n	8006aa0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006a8e:	f7fa fd9b 	bl	80015c8 <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d901      	bls.n	8006aa0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e006      	b.n	8006aae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006aa0:	4b05      	ldr	r3, [pc, #20]	@ (8006ab8 <RCCEx_PLL2_Config+0x15c>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d0f0      	beq.n	8006a8e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	58024400 	.word	0x58024400
 8006abc:	ffff0007 	.word	0xffff0007

08006ac0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006aca:	2300      	movs	r3, #0
 8006acc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ace:	4b53      	ldr	r3, [pc, #332]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad2:	f003 0303 	and.w	r3, r3, #3
 8006ad6:	2b03      	cmp	r3, #3
 8006ad8:	d101      	bne.n	8006ade <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e099      	b.n	8006c12 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006ade:	4b4f      	ldr	r3, [pc, #316]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a4e      	ldr	r2, [pc, #312]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006ae4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ae8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006aea:	f7fa fd6d 	bl	80015c8 <HAL_GetTick>
 8006aee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006af0:	e008      	b.n	8006b04 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006af2:	f7fa fd69 	bl	80015c8 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d901      	bls.n	8006b04 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e086      	b.n	8006c12 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b04:	4b45      	ldr	r3, [pc, #276]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1f0      	bne.n	8006af2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006b10:	4b42      	ldr	r3, [pc, #264]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b14:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	051b      	lsls	r3, r3, #20
 8006b1e:	493f      	ldr	r1, [pc, #252]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006b20:	4313      	orrs	r3, r2
 8006b22:	628b      	str	r3, [r1, #40]	@ 0x28
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	3b01      	subs	r3, #1
 8006b34:	025b      	lsls	r3, r3, #9
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	041b      	lsls	r3, r3, #16
 8006b42:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006b46:	431a      	orrs	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	061b      	lsls	r3, r3, #24
 8006b50:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006b54:	4931      	ldr	r1, [pc, #196]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006b56:	4313      	orrs	r3, r2
 8006b58:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006b5a:	4b30      	ldr	r3, [pc, #192]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	492d      	ldr	r1, [pc, #180]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006b6c:	4b2b      	ldr	r3, [pc, #172]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b70:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	4928      	ldr	r1, [pc, #160]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006b7e:	4b27      	ldr	r3, [pc, #156]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b82:	4a26      	ldr	r2, [pc, #152]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006b84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006b8a:	4b24      	ldr	r3, [pc, #144]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006b8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b8e:	4b24      	ldr	r3, [pc, #144]	@ (8006c20 <RCCEx_PLL3_Config+0x160>)
 8006b90:	4013      	ands	r3, r2
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	69d2      	ldr	r2, [r2, #28]
 8006b96:	00d2      	lsls	r2, r2, #3
 8006b98:	4920      	ldr	r1, [pc, #128]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006b9e:	4b1f      	ldr	r3, [pc, #124]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ba2:	4a1e      	ldr	r2, [pc, #120]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ba8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d106      	bne.n	8006bbe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bb4:	4a19      	ldr	r2, [pc, #100]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006bb6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006bba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006bbc:	e00f      	b.n	8006bde <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d106      	bne.n	8006bd2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006bc4:	4b15      	ldr	r3, [pc, #84]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc8:	4a14      	ldr	r2, [pc, #80]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006bca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006bce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006bd0:	e005      	b.n	8006bde <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006bd2:	4b12      	ldr	r3, [pc, #72]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd6:	4a11      	ldr	r2, [pc, #68]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006bd8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006bdc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006bde:	4b0f      	ldr	r3, [pc, #60]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a0e      	ldr	r2, [pc, #56]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006be4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006be8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bea:	f7fa fced 	bl	80015c8 <HAL_GetTick>
 8006bee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006bf0:	e008      	b.n	8006c04 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006bf2:	f7fa fce9 	bl	80015c8 <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d901      	bls.n	8006c04 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e006      	b.n	8006c12 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c04:	4b05      	ldr	r3, [pc, #20]	@ (8006c1c <RCCEx_PLL3_Config+0x15c>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d0f0      	beq.n	8006bf2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	58024400 	.word	0x58024400
 8006c20:	ffff0007 	.word	0xffff0007

08006c24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e049      	b.n	8006cca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d106      	bne.n	8006c50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f841 	bl	8006cd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2202      	movs	r2, #2
 8006c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	3304      	adds	r3, #4
 8006c60:	4619      	mov	r1, r3
 8006c62:	4610      	mov	r0, r2
 8006c64:	f000 f9e8 	bl	8007038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b083      	sub	sp, #12
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006cda:	bf00      	nop
 8006cdc:	370c      	adds	r7, #12
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
	...

08006ce8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d001      	beq.n	8006d00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e054      	b.n	8006daa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2202      	movs	r2, #2
 8006d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68da      	ldr	r2, [r3, #12]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f042 0201 	orr.w	r2, r2, #1
 8006d16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a26      	ldr	r2, [pc, #152]	@ (8006db8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d022      	beq.n	8006d68 <HAL_TIM_Base_Start_IT+0x80>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d2a:	d01d      	beq.n	8006d68 <HAL_TIM_Base_Start_IT+0x80>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a22      	ldr	r2, [pc, #136]	@ (8006dbc <HAL_TIM_Base_Start_IT+0xd4>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d018      	beq.n	8006d68 <HAL_TIM_Base_Start_IT+0x80>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a21      	ldr	r2, [pc, #132]	@ (8006dc0 <HAL_TIM_Base_Start_IT+0xd8>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d013      	beq.n	8006d68 <HAL_TIM_Base_Start_IT+0x80>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a1f      	ldr	r2, [pc, #124]	@ (8006dc4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d00e      	beq.n	8006d68 <HAL_TIM_Base_Start_IT+0x80>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a1e      	ldr	r2, [pc, #120]	@ (8006dc8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d009      	beq.n	8006d68 <HAL_TIM_Base_Start_IT+0x80>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a1c      	ldr	r2, [pc, #112]	@ (8006dcc <HAL_TIM_Base_Start_IT+0xe4>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d004      	beq.n	8006d68 <HAL_TIM_Base_Start_IT+0x80>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a1b      	ldr	r2, [pc, #108]	@ (8006dd0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d115      	bne.n	8006d94 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689a      	ldr	r2, [r3, #8]
 8006d6e:	4b19      	ldr	r3, [pc, #100]	@ (8006dd4 <HAL_TIM_Base_Start_IT+0xec>)
 8006d70:	4013      	ands	r3, r2
 8006d72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2b06      	cmp	r3, #6
 8006d78:	d015      	beq.n	8006da6 <HAL_TIM_Base_Start_IT+0xbe>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d80:	d011      	beq.n	8006da6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f042 0201 	orr.w	r2, r2, #1
 8006d90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d92:	e008      	b.n	8006da6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f042 0201 	orr.w	r2, r2, #1
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	e000      	b.n	8006da8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006da6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	40010000 	.word	0x40010000
 8006dbc:	40000400 	.word	0x40000400
 8006dc0:	40000800 	.word	0x40000800
 8006dc4:	40000c00 	.word	0x40000c00
 8006dc8:	40010400 	.word	0x40010400
 8006dcc:	40001800 	.word	0x40001800
 8006dd0:	40014000 	.word	0x40014000
 8006dd4:	00010007 	.word	0x00010007

08006dd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	f003 0302 	and.w	r3, r3, #2
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d020      	beq.n	8006e3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f003 0302 	and.w	r3, r3, #2
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d01b      	beq.n	8006e3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f06f 0202 	mvn.w	r2, #2
 8006e0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	f003 0303 	and.w	r3, r3, #3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d003      	beq.n	8006e2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f8e9 	bl	8006ffa <HAL_TIM_IC_CaptureCallback>
 8006e28:	e005      	b.n	8006e36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f8db 	bl	8006fe6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 f8ec 	bl	800700e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	f003 0304 	and.w	r3, r3, #4
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d020      	beq.n	8006e88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f003 0304 	and.w	r3, r3, #4
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d01b      	beq.n	8006e88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f06f 0204 	mvn.w	r2, #4
 8006e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2202      	movs	r2, #2
 8006e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d003      	beq.n	8006e76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f8c3 	bl	8006ffa <HAL_TIM_IC_CaptureCallback>
 8006e74:	e005      	b.n	8006e82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f8b5 	bl	8006fe6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f8c6 	bl	800700e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f003 0308 	and.w	r3, r3, #8
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d020      	beq.n	8006ed4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f003 0308 	and.w	r3, r3, #8
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d01b      	beq.n	8006ed4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f06f 0208 	mvn.w	r2, #8
 8006ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2204      	movs	r2, #4
 8006eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	f003 0303 	and.w	r3, r3, #3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d003      	beq.n	8006ec2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f89d 	bl	8006ffa <HAL_TIM_IC_CaptureCallback>
 8006ec0:	e005      	b.n	8006ece <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f88f 	bl	8006fe6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 f8a0 	bl	800700e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	f003 0310 	and.w	r3, r3, #16
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d020      	beq.n	8006f20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f003 0310 	and.w	r3, r3, #16
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d01b      	beq.n	8006f20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f06f 0210 	mvn.w	r2, #16
 8006ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2208      	movs	r2, #8
 8006ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f877 	bl	8006ffa <HAL_TIM_IC_CaptureCallback>
 8006f0c:	e005      	b.n	8006f1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f869 	bl	8006fe6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f87a 	bl	800700e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00c      	beq.n	8006f44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d007      	beq.n	8006f44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f06f 0201 	mvn.w	r2, #1
 8006f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7f9 fda6 	bl	8000a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d104      	bne.n	8006f58 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00c      	beq.n	8006f72 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d007      	beq.n	8006f72 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f913 	bl	8007198 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00c      	beq.n	8006f96 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d007      	beq.n	8006f96 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006f8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 f90b 	bl	80071ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00c      	beq.n	8006fba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d007      	beq.n	8006fba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f834 	bl	8007022 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	f003 0320 	and.w	r3, r3, #32
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00c      	beq.n	8006fde <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f003 0320 	and.w	r3, r3, #32
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d007      	beq.n	8006fde <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f06f 0220 	mvn.w	r2, #32
 8006fd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f8d3 	bl	8007184 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fde:	bf00      	nop
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b083      	sub	sp, #12
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fee:	bf00      	nop
 8006ff0:	370c      	adds	r7, #12
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr

08006ffa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	b083      	sub	sp, #12
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007002:	bf00      	nop
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800700e:	b480      	push	{r7}
 8007010:	b083      	sub	sp, #12
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007016:	bf00      	nop
 8007018:	370c      	adds	r7, #12
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr

08007022 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007022:	b480      	push	{r7}
 8007024:	b083      	sub	sp, #12
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800702a:	bf00      	nop
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
	...

08007038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a46      	ldr	r2, [pc, #280]	@ (8007164 <TIM_Base_SetConfig+0x12c>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d013      	beq.n	8007078 <TIM_Base_SetConfig+0x40>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007056:	d00f      	beq.n	8007078 <TIM_Base_SetConfig+0x40>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a43      	ldr	r2, [pc, #268]	@ (8007168 <TIM_Base_SetConfig+0x130>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d00b      	beq.n	8007078 <TIM_Base_SetConfig+0x40>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a42      	ldr	r2, [pc, #264]	@ (800716c <TIM_Base_SetConfig+0x134>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d007      	beq.n	8007078 <TIM_Base_SetConfig+0x40>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a41      	ldr	r2, [pc, #260]	@ (8007170 <TIM_Base_SetConfig+0x138>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d003      	beq.n	8007078 <TIM_Base_SetConfig+0x40>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a40      	ldr	r2, [pc, #256]	@ (8007174 <TIM_Base_SetConfig+0x13c>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d108      	bne.n	800708a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800707e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	4313      	orrs	r3, r2
 8007088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a35      	ldr	r2, [pc, #212]	@ (8007164 <TIM_Base_SetConfig+0x12c>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d01f      	beq.n	80070d2 <TIM_Base_SetConfig+0x9a>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007098:	d01b      	beq.n	80070d2 <TIM_Base_SetConfig+0x9a>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a32      	ldr	r2, [pc, #200]	@ (8007168 <TIM_Base_SetConfig+0x130>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d017      	beq.n	80070d2 <TIM_Base_SetConfig+0x9a>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a31      	ldr	r2, [pc, #196]	@ (800716c <TIM_Base_SetConfig+0x134>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d013      	beq.n	80070d2 <TIM_Base_SetConfig+0x9a>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a30      	ldr	r2, [pc, #192]	@ (8007170 <TIM_Base_SetConfig+0x138>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d00f      	beq.n	80070d2 <TIM_Base_SetConfig+0x9a>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a2f      	ldr	r2, [pc, #188]	@ (8007174 <TIM_Base_SetConfig+0x13c>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d00b      	beq.n	80070d2 <TIM_Base_SetConfig+0x9a>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a2e      	ldr	r2, [pc, #184]	@ (8007178 <TIM_Base_SetConfig+0x140>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d007      	beq.n	80070d2 <TIM_Base_SetConfig+0x9a>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a2d      	ldr	r2, [pc, #180]	@ (800717c <TIM_Base_SetConfig+0x144>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d003      	beq.n	80070d2 <TIM_Base_SetConfig+0x9a>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a2c      	ldr	r2, [pc, #176]	@ (8007180 <TIM_Base_SetConfig+0x148>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d108      	bne.n	80070e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	689a      	ldr	r2, [r3, #8]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a16      	ldr	r2, [pc, #88]	@ (8007164 <TIM_Base_SetConfig+0x12c>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d00f      	beq.n	8007130 <TIM_Base_SetConfig+0xf8>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a18      	ldr	r2, [pc, #96]	@ (8007174 <TIM_Base_SetConfig+0x13c>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d00b      	beq.n	8007130 <TIM_Base_SetConfig+0xf8>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a17      	ldr	r2, [pc, #92]	@ (8007178 <TIM_Base_SetConfig+0x140>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d007      	beq.n	8007130 <TIM_Base_SetConfig+0xf8>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a16      	ldr	r2, [pc, #88]	@ (800717c <TIM_Base_SetConfig+0x144>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d003      	beq.n	8007130 <TIM_Base_SetConfig+0xf8>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a15      	ldr	r2, [pc, #84]	@ (8007180 <TIM_Base_SetConfig+0x148>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d103      	bne.n	8007138 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	691a      	ldr	r2, [r3, #16]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	2b01      	cmp	r3, #1
 8007148:	d105      	bne.n	8007156 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	f023 0201 	bic.w	r2, r3, #1
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	611a      	str	r2, [r3, #16]
  }
}
 8007156:	bf00      	nop
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	40010000 	.word	0x40010000
 8007168:	40000400 	.word	0x40000400
 800716c:	40000800 	.word	0x40000800
 8007170:	40000c00 	.word	0x40000c00
 8007174:	40010400 	.word	0x40010400
 8007178:	40014000 	.word	0x40014000
 800717c:	40014400 	.word	0x40014400
 8007180:	40014800 	.word	0x40014800

08007184 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e042      	b.n	8007258 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d106      	bne.n	80071ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f7f9 fc85 	bl	8000af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2224      	movs	r2, #36	@ 0x24
 80071ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f022 0201 	bic.w	r2, r2, #1
 8007200:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007206:	2b00      	cmp	r3, #0
 8007208:	d002      	beq.n	8007210 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f001 f9f8 	bl	8008600 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fc8d 	bl	8007b30 <UART_SetConfig>
 8007216:	4603      	mov	r3, r0
 8007218:	2b01      	cmp	r3, #1
 800721a:	d101      	bne.n	8007220 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e01b      	b.n	8007258 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	685a      	ldr	r2, [r3, #4]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800722e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	689a      	ldr	r2, [r3, #8]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800723e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f042 0201 	orr.w	r2, r2, #1
 800724e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f001 fa77 	bl	8008744 <UART_CheckIdleState>
 8007256:	4603      	mov	r3, r0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b08a      	sub	sp, #40	@ 0x28
 8007264:	af02      	add	r7, sp, #8
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	603b      	str	r3, [r7, #0]
 800726c:	4613      	mov	r3, r2
 800726e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007276:	2b20      	cmp	r3, #32
 8007278:	d17b      	bne.n	8007372 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d002      	beq.n	8007286 <HAL_UART_Transmit+0x26>
 8007280:	88fb      	ldrh	r3, [r7, #6]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d101      	bne.n	800728a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e074      	b.n	8007374 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2221      	movs	r2, #33	@ 0x21
 8007296:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800729a:	f7fa f995 	bl	80015c8 <HAL_GetTick>
 800729e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	88fa      	ldrh	r2, [r7, #6]
 80072a4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	88fa      	ldrh	r2, [r7, #6]
 80072ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072b8:	d108      	bne.n	80072cc <HAL_UART_Transmit+0x6c>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d104      	bne.n	80072cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80072c2:	2300      	movs	r3, #0
 80072c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	61bb      	str	r3, [r7, #24]
 80072ca:	e003      	b.n	80072d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072d0:	2300      	movs	r3, #0
 80072d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80072d4:	e030      	b.n	8007338 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2200      	movs	r2, #0
 80072de:	2180      	movs	r1, #128	@ 0x80
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f001 fad9 	bl	8008898 <UART_WaitOnFlagUntilTimeout>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d005      	beq.n	80072f8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2220      	movs	r2, #32
 80072f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e03d      	b.n	8007374 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10b      	bne.n	8007316 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	881b      	ldrh	r3, [r3, #0]
 8007302:	461a      	mov	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800730c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	3302      	adds	r3, #2
 8007312:	61bb      	str	r3, [r7, #24]
 8007314:	e007      	b.n	8007326 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	781a      	ldrb	r2, [r3, #0]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	3301      	adds	r3, #1
 8007324:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800732c:	b29b      	uxth	r3, r3
 800732e:	3b01      	subs	r3, #1
 8007330:	b29a      	uxth	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800733e:	b29b      	uxth	r3, r3
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1c8      	bne.n	80072d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	2200      	movs	r2, #0
 800734c:	2140      	movs	r1, #64	@ 0x40
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f001 faa2 	bl	8008898 <UART_WaitOnFlagUntilTimeout>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d005      	beq.n	8007366 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2220      	movs	r2, #32
 800735e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e006      	b.n	8007374 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2220      	movs	r2, #32
 800736a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	e000      	b.n	8007374 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007372:	2302      	movs	r3, #2
  }
}
 8007374:	4618      	mov	r0, r3
 8007376:	3720      	adds	r7, #32
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b0ba      	sub	sp, #232	@ 0xe8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	69db      	ldr	r3, [r3, #28]
 800738a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80073a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80073a6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80073aa:	4013      	ands	r3, r2
 80073ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80073b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d11b      	bne.n	80073f0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80073b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073bc:	f003 0320 	and.w	r3, r3, #32
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d015      	beq.n	80073f0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80073c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073c8:	f003 0320 	and.w	r3, r3, #32
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d105      	bne.n	80073dc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80073d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d009      	beq.n	80073f0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f000 8377 	beq.w	8007ad4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	4798      	blx	r3
      }
      return;
 80073ee:	e371      	b.n	8007ad4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80073f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f000 8123 	beq.w	8007640 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80073fa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80073fe:	4b8d      	ldr	r3, [pc, #564]	@ (8007634 <HAL_UART_IRQHandler+0x2b8>)
 8007400:	4013      	ands	r3, r2
 8007402:	2b00      	cmp	r3, #0
 8007404:	d106      	bne.n	8007414 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007406:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800740a:	4b8b      	ldr	r3, [pc, #556]	@ (8007638 <HAL_UART_IRQHandler+0x2bc>)
 800740c:	4013      	ands	r3, r2
 800740e:	2b00      	cmp	r3, #0
 8007410:	f000 8116 	beq.w	8007640 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007418:	f003 0301 	and.w	r3, r3, #1
 800741c:	2b00      	cmp	r3, #0
 800741e:	d011      	beq.n	8007444 <HAL_UART_IRQHandler+0xc8>
 8007420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00b      	beq.n	8007444 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2201      	movs	r2, #1
 8007432:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800743a:	f043 0201 	orr.w	r2, r3, #1
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007448:	f003 0302 	and.w	r3, r3, #2
 800744c:	2b00      	cmp	r3, #0
 800744e:	d011      	beq.n	8007474 <HAL_UART_IRQHandler+0xf8>
 8007450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00b      	beq.n	8007474 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2202      	movs	r2, #2
 8007462:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800746a:	f043 0204 	orr.w	r2, r3, #4
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007478:	f003 0304 	and.w	r3, r3, #4
 800747c:	2b00      	cmp	r3, #0
 800747e:	d011      	beq.n	80074a4 <HAL_UART_IRQHandler+0x128>
 8007480:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007484:	f003 0301 	and.w	r3, r3, #1
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00b      	beq.n	80074a4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2204      	movs	r2, #4
 8007492:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800749a:	f043 0202 	orr.w	r2, r3, #2
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80074a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074a8:	f003 0308 	and.w	r3, r3, #8
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d017      	beq.n	80074e0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80074b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074b4:	f003 0320 	and.w	r3, r3, #32
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d105      	bne.n	80074c8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80074bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80074c0:	4b5c      	ldr	r3, [pc, #368]	@ (8007634 <HAL_UART_IRQHandler+0x2b8>)
 80074c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00b      	beq.n	80074e0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2208      	movs	r2, #8
 80074ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074d6:	f043 0208 	orr.w	r2, r3, #8
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80074e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d012      	beq.n	8007512 <HAL_UART_IRQHandler+0x196>
 80074ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00c      	beq.n	8007512 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007500:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007508:	f043 0220 	orr.w	r2, r3, #32
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007518:	2b00      	cmp	r3, #0
 800751a:	f000 82dd 	beq.w	8007ad8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800751e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007522:	f003 0320 	and.w	r3, r3, #32
 8007526:	2b00      	cmp	r3, #0
 8007528:	d013      	beq.n	8007552 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800752a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800752e:	f003 0320 	and.w	r3, r3, #32
 8007532:	2b00      	cmp	r3, #0
 8007534:	d105      	bne.n	8007542 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800753a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d007      	beq.n	8007552 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007558:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007566:	2b40      	cmp	r3, #64	@ 0x40
 8007568:	d005      	beq.n	8007576 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800756a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800756e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007572:	2b00      	cmp	r3, #0
 8007574:	d054      	beq.n	8007620 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f001 f9fc 	bl	8008974 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007586:	2b40      	cmp	r3, #64	@ 0x40
 8007588:	d146      	bne.n	8007618 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	3308      	adds	r3, #8
 8007590:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007594:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007598:	e853 3f00 	ldrex	r3, [r3]
 800759c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80075a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80075a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	3308      	adds	r3, #8
 80075b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80075b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80075ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80075c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80075c6:	e841 2300 	strex	r3, r2, [r1]
 80075ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80075ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1d9      	bne.n	800758a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d017      	beq.n	8007610 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075e6:	4a15      	ldr	r2, [pc, #84]	@ (800763c <HAL_UART_IRQHandler+0x2c0>)
 80075e8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7fa fcaf 	bl	8001f54 <HAL_DMA_Abort_IT>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d019      	beq.n	8007630 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800760a:	4610      	mov	r0, r2
 800760c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800760e:	e00f      	b.n	8007630 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 fa77 	bl	8007b04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007616:	e00b      	b.n	8007630 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 fa73 	bl	8007b04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800761e:	e007      	b.n	8007630 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fa6f 	bl	8007b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800762e:	e253      	b.n	8007ad8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007630:	bf00      	nop
    return;
 8007632:	e251      	b.n	8007ad8 <HAL_UART_IRQHandler+0x75c>
 8007634:	10000001 	.word	0x10000001
 8007638:	04000120 	.word	0x04000120
 800763c:	08008a41 	.word	0x08008a41

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007644:	2b01      	cmp	r3, #1
 8007646:	f040 81e7 	bne.w	8007a18 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800764a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800764e:	f003 0310 	and.w	r3, r3, #16
 8007652:	2b00      	cmp	r3, #0
 8007654:	f000 81e0 	beq.w	8007a18 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800765c:	f003 0310 	and.w	r3, r3, #16
 8007660:	2b00      	cmp	r3, #0
 8007662:	f000 81d9 	beq.w	8007a18 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2210      	movs	r2, #16
 800766c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007678:	2b40      	cmp	r3, #64	@ 0x40
 800767a:	f040 8151 	bne.w	8007920 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a96      	ldr	r2, [pc, #600]	@ (80078e0 <HAL_UART_IRQHandler+0x564>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d068      	beq.n	800775e <HAL_UART_IRQHandler+0x3e2>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a93      	ldr	r2, [pc, #588]	@ (80078e4 <HAL_UART_IRQHandler+0x568>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d061      	beq.n	800775e <HAL_UART_IRQHandler+0x3e2>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a91      	ldr	r2, [pc, #580]	@ (80078e8 <HAL_UART_IRQHandler+0x56c>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d05a      	beq.n	800775e <HAL_UART_IRQHandler+0x3e2>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a8e      	ldr	r2, [pc, #568]	@ (80078ec <HAL_UART_IRQHandler+0x570>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d053      	beq.n	800775e <HAL_UART_IRQHandler+0x3e2>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a8c      	ldr	r2, [pc, #560]	@ (80078f0 <HAL_UART_IRQHandler+0x574>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d04c      	beq.n	800775e <HAL_UART_IRQHandler+0x3e2>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a89      	ldr	r2, [pc, #548]	@ (80078f4 <HAL_UART_IRQHandler+0x578>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d045      	beq.n	800775e <HAL_UART_IRQHandler+0x3e2>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a87      	ldr	r2, [pc, #540]	@ (80078f8 <HAL_UART_IRQHandler+0x57c>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d03e      	beq.n	800775e <HAL_UART_IRQHandler+0x3e2>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a84      	ldr	r2, [pc, #528]	@ (80078fc <HAL_UART_IRQHandler+0x580>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d037      	beq.n	800775e <HAL_UART_IRQHandler+0x3e2>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a82      	ldr	r2, [pc, #520]	@ (8007900 <HAL_UART_IRQHandler+0x584>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d030      	beq.n	800775e <HAL_UART_IRQHandler+0x3e2>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a7f      	ldr	r2, [pc, #508]	@ (8007904 <HAL_UART_IRQHandler+0x588>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d029      	beq.n	800775e <HAL_UART_IRQHandler+0x3e2>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a7d      	ldr	r2, [pc, #500]	@ (8007908 <HAL_UART_IRQHandler+0x58c>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d022      	beq.n	800775e <HAL_UART_IRQHandler+0x3e2>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a7a      	ldr	r2, [pc, #488]	@ (800790c <HAL_UART_IRQHandler+0x590>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d01b      	beq.n	800775e <HAL_UART_IRQHandler+0x3e2>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a78      	ldr	r2, [pc, #480]	@ (8007910 <HAL_UART_IRQHandler+0x594>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d014      	beq.n	800775e <HAL_UART_IRQHandler+0x3e2>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a75      	ldr	r2, [pc, #468]	@ (8007914 <HAL_UART_IRQHandler+0x598>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d00d      	beq.n	800775e <HAL_UART_IRQHandler+0x3e2>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a73      	ldr	r2, [pc, #460]	@ (8007918 <HAL_UART_IRQHandler+0x59c>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d006      	beq.n	800775e <HAL_UART_IRQHandler+0x3e2>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a70      	ldr	r2, [pc, #448]	@ (800791c <HAL_UART_IRQHandler+0x5a0>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d106      	bne.n	800776c <HAL_UART_IRQHandler+0x3f0>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	b29b      	uxth	r3, r3
 800776a:	e005      	b.n	8007778 <HAL_UART_IRQHandler+0x3fc>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	b29b      	uxth	r3, r3
 8007778:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800777c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007780:	2b00      	cmp	r3, #0
 8007782:	f000 81ab 	beq.w	8007adc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800778c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007790:	429a      	cmp	r2, r3
 8007792:	f080 81a3 	bcs.w	8007adc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800779c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077a6:	69db      	ldr	r3, [r3, #28]
 80077a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077ac:	f000 8087 	beq.w	80078be <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80077bc:	e853 3f00 	ldrex	r3, [r3]
 80077c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80077c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80077c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	461a      	mov	r2, r3
 80077d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80077da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80077de:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80077e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80077ea:	e841 2300 	strex	r3, r2, [r1]
 80077ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80077f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1da      	bne.n	80077b0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	3308      	adds	r3, #8
 8007800:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007802:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007804:	e853 3f00 	ldrex	r3, [r3]
 8007808:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800780a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800780c:	f023 0301 	bic.w	r3, r3, #1
 8007810:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	3308      	adds	r3, #8
 800781a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800781e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007822:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007824:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007826:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800782a:	e841 2300 	strex	r3, r2, [r1]
 800782e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007830:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1e1      	bne.n	80077fa <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	3308      	adds	r3, #8
 800783c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007840:	e853 3f00 	ldrex	r3, [r3]
 8007844:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007846:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007848:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800784c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	3308      	adds	r3, #8
 8007856:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800785a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800785c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007860:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007862:	e841 2300 	strex	r3, r2, [r1]
 8007866:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007868:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1e3      	bne.n	8007836 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2220      	movs	r2, #32
 8007872:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007882:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007884:	e853 3f00 	ldrex	r3, [r3]
 8007888:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800788a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800788c:	f023 0310 	bic.w	r3, r3, #16
 8007890:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	461a      	mov	r2, r3
 800789a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800789e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80078a0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80078a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80078a6:	e841 2300 	strex	r3, r2, [r1]
 80078aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80078ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1e4      	bne.n	800787c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7fa f82d 	bl	8001918 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2202      	movs	r2, #2
 80078c2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	1ad3      	subs	r3, r2, r3
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	4619      	mov	r1, r3
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f91d 	bl	8007b18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078de:	e0fd      	b.n	8007adc <HAL_UART_IRQHandler+0x760>
 80078e0:	40020010 	.word	0x40020010
 80078e4:	40020028 	.word	0x40020028
 80078e8:	40020040 	.word	0x40020040
 80078ec:	40020058 	.word	0x40020058
 80078f0:	40020070 	.word	0x40020070
 80078f4:	40020088 	.word	0x40020088
 80078f8:	400200a0 	.word	0x400200a0
 80078fc:	400200b8 	.word	0x400200b8
 8007900:	40020410 	.word	0x40020410
 8007904:	40020428 	.word	0x40020428
 8007908:	40020440 	.word	0x40020440
 800790c:	40020458 	.word	0x40020458
 8007910:	40020470 	.word	0x40020470
 8007914:	40020488 	.word	0x40020488
 8007918:	400204a0 	.word	0x400204a0
 800791c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800792c:	b29b      	uxth	r3, r3
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800793a:	b29b      	uxth	r3, r3
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 80cf 	beq.w	8007ae0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8007942:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007946:	2b00      	cmp	r3, #0
 8007948:	f000 80ca 	beq.w	8007ae0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007954:	e853 3f00 	ldrex	r3, [r3]
 8007958:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800795a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800795c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007960:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	461a      	mov	r2, r3
 800796a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800796e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007970:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007972:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007974:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007976:	e841 2300 	strex	r3, r2, [r1]
 800797a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800797c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1e4      	bne.n	800794c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	3308      	adds	r3, #8
 8007988:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798c:	e853 3f00 	ldrex	r3, [r3]
 8007990:	623b      	str	r3, [r7, #32]
   return(result);
 8007992:	6a3a      	ldr	r2, [r7, #32]
 8007994:	4b55      	ldr	r3, [pc, #340]	@ (8007aec <HAL_UART_IRQHandler+0x770>)
 8007996:	4013      	ands	r3, r2
 8007998:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	3308      	adds	r3, #8
 80079a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80079a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80079a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079ae:	e841 2300 	strex	r3, r2, [r1]
 80079b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1e3      	bne.n	8007982 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2220      	movs	r2, #32
 80079be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	e853 3f00 	ldrex	r3, [r3]
 80079da:	60fb      	str	r3, [r7, #12]
   return(result);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f023 0310 	bic.w	r3, r3, #16
 80079e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	461a      	mov	r2, r3
 80079ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80079f0:	61fb      	str	r3, [r7, #28]
 80079f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f4:	69b9      	ldr	r1, [r7, #24]
 80079f6:	69fa      	ldr	r2, [r7, #28]
 80079f8:	e841 2300 	strex	r3, r2, [r1]
 80079fc:	617b      	str	r3, [r7, #20]
   return(result);
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1e4      	bne.n	80079ce <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2202      	movs	r2, #2
 8007a08:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f881 	bl	8007b18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a16:	e063      	b.n	8007ae0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00e      	beq.n	8007a42 <HAL_UART_IRQHandler+0x6c6>
 8007a24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d008      	beq.n	8007a42 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007a38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f001 f841 	bl	8008ac2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a40:	e051      	b.n	8007ae6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d014      	beq.n	8007a78 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d105      	bne.n	8007a66 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d008      	beq.n	8007a78 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d03a      	beq.n	8007ae4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	4798      	blx	r3
    }
    return;
 8007a76:	e035      	b.n	8007ae4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d009      	beq.n	8007a98 <HAL_UART_IRQHandler+0x71c>
 8007a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d003      	beq.n	8007a98 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 ffeb 	bl	8008a6c <UART_EndTransmit_IT>
    return;
 8007a96:	e026      	b.n	8007ae6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d009      	beq.n	8007ab8 <HAL_UART_IRQHandler+0x73c>
 8007aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007aa8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d003      	beq.n	8007ab8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f001 f81a 	bl	8008aea <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ab6:	e016      	b.n	8007ae6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007abc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d010      	beq.n	8007ae6 <HAL_UART_IRQHandler+0x76a>
 8007ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	da0c      	bge.n	8007ae6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f001 f802 	bl	8008ad6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ad2:	e008      	b.n	8007ae6 <HAL_UART_IRQHandler+0x76a>
      return;
 8007ad4:	bf00      	nop
 8007ad6:	e006      	b.n	8007ae6 <HAL_UART_IRQHandler+0x76a>
    return;
 8007ad8:	bf00      	nop
 8007ada:	e004      	b.n	8007ae6 <HAL_UART_IRQHandler+0x76a>
      return;
 8007adc:	bf00      	nop
 8007ade:	e002      	b.n	8007ae6 <HAL_UART_IRQHandler+0x76a>
      return;
 8007ae0:	bf00      	nop
 8007ae2:	e000      	b.n	8007ae6 <HAL_UART_IRQHandler+0x76a>
    return;
 8007ae4:	bf00      	nop
  }
}
 8007ae6:	37e8      	adds	r7, #232	@ 0xe8
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	effffffe 	.word	0xeffffffe

08007af0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	460b      	mov	r3, r1
 8007b22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b34:	b092      	sub	sp, #72	@ 0x48
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	689a      	ldr	r2, [r3, #8]
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	431a      	orrs	r2, r3
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	695b      	ldr	r3, [r3, #20]
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	69db      	ldr	r3, [r3, #28]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	4bbe      	ldr	r3, [pc, #760]	@ (8007e58 <UART_SetConfig+0x328>)
 8007b60:	4013      	ands	r3, r2
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	6812      	ldr	r2, [r2, #0]
 8007b66:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007b68:	430b      	orrs	r3, r1
 8007b6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	68da      	ldr	r2, [r3, #12]
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4ab3      	ldr	r2, [pc, #716]	@ (8007e5c <UART_SetConfig+0x32c>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d004      	beq.n	8007b9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	6a1b      	ldr	r3, [r3, #32]
 8007b96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	689a      	ldr	r2, [r3, #8]
 8007ba2:	4baf      	ldr	r3, [pc, #700]	@ (8007e60 <UART_SetConfig+0x330>)
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	6812      	ldr	r2, [r2, #0]
 8007baa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007bac:	430b      	orrs	r3, r1
 8007bae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bb6:	f023 010f 	bic.w	r1, r3, #15
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	430a      	orrs	r2, r1
 8007bc4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4aa6      	ldr	r2, [pc, #664]	@ (8007e64 <UART_SetConfig+0x334>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d177      	bne.n	8007cc0 <UART_SetConfig+0x190>
 8007bd0:	4ba5      	ldr	r3, [pc, #660]	@ (8007e68 <UART_SetConfig+0x338>)
 8007bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bd4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007bd8:	2b28      	cmp	r3, #40	@ 0x28
 8007bda:	d86d      	bhi.n	8007cb8 <UART_SetConfig+0x188>
 8007bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8007be4 <UART_SetConfig+0xb4>)
 8007bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be2:	bf00      	nop
 8007be4:	08007c89 	.word	0x08007c89
 8007be8:	08007cb9 	.word	0x08007cb9
 8007bec:	08007cb9 	.word	0x08007cb9
 8007bf0:	08007cb9 	.word	0x08007cb9
 8007bf4:	08007cb9 	.word	0x08007cb9
 8007bf8:	08007cb9 	.word	0x08007cb9
 8007bfc:	08007cb9 	.word	0x08007cb9
 8007c00:	08007cb9 	.word	0x08007cb9
 8007c04:	08007c91 	.word	0x08007c91
 8007c08:	08007cb9 	.word	0x08007cb9
 8007c0c:	08007cb9 	.word	0x08007cb9
 8007c10:	08007cb9 	.word	0x08007cb9
 8007c14:	08007cb9 	.word	0x08007cb9
 8007c18:	08007cb9 	.word	0x08007cb9
 8007c1c:	08007cb9 	.word	0x08007cb9
 8007c20:	08007cb9 	.word	0x08007cb9
 8007c24:	08007c99 	.word	0x08007c99
 8007c28:	08007cb9 	.word	0x08007cb9
 8007c2c:	08007cb9 	.word	0x08007cb9
 8007c30:	08007cb9 	.word	0x08007cb9
 8007c34:	08007cb9 	.word	0x08007cb9
 8007c38:	08007cb9 	.word	0x08007cb9
 8007c3c:	08007cb9 	.word	0x08007cb9
 8007c40:	08007cb9 	.word	0x08007cb9
 8007c44:	08007ca1 	.word	0x08007ca1
 8007c48:	08007cb9 	.word	0x08007cb9
 8007c4c:	08007cb9 	.word	0x08007cb9
 8007c50:	08007cb9 	.word	0x08007cb9
 8007c54:	08007cb9 	.word	0x08007cb9
 8007c58:	08007cb9 	.word	0x08007cb9
 8007c5c:	08007cb9 	.word	0x08007cb9
 8007c60:	08007cb9 	.word	0x08007cb9
 8007c64:	08007ca9 	.word	0x08007ca9
 8007c68:	08007cb9 	.word	0x08007cb9
 8007c6c:	08007cb9 	.word	0x08007cb9
 8007c70:	08007cb9 	.word	0x08007cb9
 8007c74:	08007cb9 	.word	0x08007cb9
 8007c78:	08007cb9 	.word	0x08007cb9
 8007c7c:	08007cb9 	.word	0x08007cb9
 8007c80:	08007cb9 	.word	0x08007cb9
 8007c84:	08007cb1 	.word	0x08007cb1
 8007c88:	2301      	movs	r3, #1
 8007c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c8e:	e222      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007c90:	2304      	movs	r3, #4
 8007c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c96:	e21e      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007c98:	2308      	movs	r3, #8
 8007c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c9e:	e21a      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007ca0:	2310      	movs	r3, #16
 8007ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ca6:	e216      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007ca8:	2320      	movs	r3, #32
 8007caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cae:	e212      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007cb0:	2340      	movs	r3, #64	@ 0x40
 8007cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cb6:	e20e      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007cb8:	2380      	movs	r3, #128	@ 0x80
 8007cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cbe:	e20a      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a69      	ldr	r2, [pc, #420]	@ (8007e6c <UART_SetConfig+0x33c>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d130      	bne.n	8007d2c <UART_SetConfig+0x1fc>
 8007cca:	4b67      	ldr	r3, [pc, #412]	@ (8007e68 <UART_SetConfig+0x338>)
 8007ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cce:	f003 0307 	and.w	r3, r3, #7
 8007cd2:	2b05      	cmp	r3, #5
 8007cd4:	d826      	bhi.n	8007d24 <UART_SetConfig+0x1f4>
 8007cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8007cdc <UART_SetConfig+0x1ac>)
 8007cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cdc:	08007cf5 	.word	0x08007cf5
 8007ce0:	08007cfd 	.word	0x08007cfd
 8007ce4:	08007d05 	.word	0x08007d05
 8007ce8:	08007d0d 	.word	0x08007d0d
 8007cec:	08007d15 	.word	0x08007d15
 8007cf0:	08007d1d 	.word	0x08007d1d
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cfa:	e1ec      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007cfc:	2304      	movs	r3, #4
 8007cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d02:	e1e8      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007d04:	2308      	movs	r3, #8
 8007d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d0a:	e1e4      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007d0c:	2310      	movs	r3, #16
 8007d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d12:	e1e0      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007d14:	2320      	movs	r3, #32
 8007d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d1a:	e1dc      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007d1c:	2340      	movs	r3, #64	@ 0x40
 8007d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d22:	e1d8      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007d24:	2380      	movs	r3, #128	@ 0x80
 8007d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d2a:	e1d4      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a4f      	ldr	r2, [pc, #316]	@ (8007e70 <UART_SetConfig+0x340>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d130      	bne.n	8007d98 <UART_SetConfig+0x268>
 8007d36:	4b4c      	ldr	r3, [pc, #304]	@ (8007e68 <UART_SetConfig+0x338>)
 8007d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d3a:	f003 0307 	and.w	r3, r3, #7
 8007d3e:	2b05      	cmp	r3, #5
 8007d40:	d826      	bhi.n	8007d90 <UART_SetConfig+0x260>
 8007d42:	a201      	add	r2, pc, #4	@ (adr r2, 8007d48 <UART_SetConfig+0x218>)
 8007d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d48:	08007d61 	.word	0x08007d61
 8007d4c:	08007d69 	.word	0x08007d69
 8007d50:	08007d71 	.word	0x08007d71
 8007d54:	08007d79 	.word	0x08007d79
 8007d58:	08007d81 	.word	0x08007d81
 8007d5c:	08007d89 	.word	0x08007d89
 8007d60:	2300      	movs	r3, #0
 8007d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d66:	e1b6      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007d68:	2304      	movs	r3, #4
 8007d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d6e:	e1b2      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007d70:	2308      	movs	r3, #8
 8007d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d76:	e1ae      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007d78:	2310      	movs	r3, #16
 8007d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d7e:	e1aa      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007d80:	2320      	movs	r3, #32
 8007d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d86:	e1a6      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007d88:	2340      	movs	r3, #64	@ 0x40
 8007d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d8e:	e1a2      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007d90:	2380      	movs	r3, #128	@ 0x80
 8007d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d96:	e19e      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a35      	ldr	r2, [pc, #212]	@ (8007e74 <UART_SetConfig+0x344>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d130      	bne.n	8007e04 <UART_SetConfig+0x2d4>
 8007da2:	4b31      	ldr	r3, [pc, #196]	@ (8007e68 <UART_SetConfig+0x338>)
 8007da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007da6:	f003 0307 	and.w	r3, r3, #7
 8007daa:	2b05      	cmp	r3, #5
 8007dac:	d826      	bhi.n	8007dfc <UART_SetConfig+0x2cc>
 8007dae:	a201      	add	r2, pc, #4	@ (adr r2, 8007db4 <UART_SetConfig+0x284>)
 8007db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db4:	08007dcd 	.word	0x08007dcd
 8007db8:	08007dd5 	.word	0x08007dd5
 8007dbc:	08007ddd 	.word	0x08007ddd
 8007dc0:	08007de5 	.word	0x08007de5
 8007dc4:	08007ded 	.word	0x08007ded
 8007dc8:	08007df5 	.word	0x08007df5
 8007dcc:	2300      	movs	r3, #0
 8007dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dd2:	e180      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007dd4:	2304      	movs	r3, #4
 8007dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dda:	e17c      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007ddc:	2308      	movs	r3, #8
 8007dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007de2:	e178      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007de4:	2310      	movs	r3, #16
 8007de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dea:	e174      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007dec:	2320      	movs	r3, #32
 8007dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007df2:	e170      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007df4:	2340      	movs	r3, #64	@ 0x40
 8007df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dfa:	e16c      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007dfc:	2380      	movs	r3, #128	@ 0x80
 8007dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e02:	e168      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a1b      	ldr	r2, [pc, #108]	@ (8007e78 <UART_SetConfig+0x348>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d142      	bne.n	8007e94 <UART_SetConfig+0x364>
 8007e0e:	4b16      	ldr	r3, [pc, #88]	@ (8007e68 <UART_SetConfig+0x338>)
 8007e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e12:	f003 0307 	and.w	r3, r3, #7
 8007e16:	2b05      	cmp	r3, #5
 8007e18:	d838      	bhi.n	8007e8c <UART_SetConfig+0x35c>
 8007e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e20 <UART_SetConfig+0x2f0>)
 8007e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e20:	08007e39 	.word	0x08007e39
 8007e24:	08007e41 	.word	0x08007e41
 8007e28:	08007e49 	.word	0x08007e49
 8007e2c:	08007e51 	.word	0x08007e51
 8007e30:	08007e7d 	.word	0x08007e7d
 8007e34:	08007e85 	.word	0x08007e85
 8007e38:	2300      	movs	r3, #0
 8007e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e3e:	e14a      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007e40:	2304      	movs	r3, #4
 8007e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e46:	e146      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007e48:	2308      	movs	r3, #8
 8007e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e4e:	e142      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007e50:	2310      	movs	r3, #16
 8007e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e56:	e13e      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007e58:	cfff69f3 	.word	0xcfff69f3
 8007e5c:	58000c00 	.word	0x58000c00
 8007e60:	11fff4ff 	.word	0x11fff4ff
 8007e64:	40011000 	.word	0x40011000
 8007e68:	58024400 	.word	0x58024400
 8007e6c:	40004400 	.word	0x40004400
 8007e70:	40004800 	.word	0x40004800
 8007e74:	40004c00 	.word	0x40004c00
 8007e78:	40005000 	.word	0x40005000
 8007e7c:	2320      	movs	r3, #32
 8007e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e82:	e128      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007e84:	2340      	movs	r3, #64	@ 0x40
 8007e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e8a:	e124      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007e8c:	2380      	movs	r3, #128	@ 0x80
 8007e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e92:	e120      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4acb      	ldr	r2, [pc, #812]	@ (80081c8 <UART_SetConfig+0x698>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d176      	bne.n	8007f8c <UART_SetConfig+0x45c>
 8007e9e:	4bcb      	ldr	r3, [pc, #812]	@ (80081cc <UART_SetConfig+0x69c>)
 8007ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ea2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ea6:	2b28      	cmp	r3, #40	@ 0x28
 8007ea8:	d86c      	bhi.n	8007f84 <UART_SetConfig+0x454>
 8007eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8007eb0 <UART_SetConfig+0x380>)
 8007eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb0:	08007f55 	.word	0x08007f55
 8007eb4:	08007f85 	.word	0x08007f85
 8007eb8:	08007f85 	.word	0x08007f85
 8007ebc:	08007f85 	.word	0x08007f85
 8007ec0:	08007f85 	.word	0x08007f85
 8007ec4:	08007f85 	.word	0x08007f85
 8007ec8:	08007f85 	.word	0x08007f85
 8007ecc:	08007f85 	.word	0x08007f85
 8007ed0:	08007f5d 	.word	0x08007f5d
 8007ed4:	08007f85 	.word	0x08007f85
 8007ed8:	08007f85 	.word	0x08007f85
 8007edc:	08007f85 	.word	0x08007f85
 8007ee0:	08007f85 	.word	0x08007f85
 8007ee4:	08007f85 	.word	0x08007f85
 8007ee8:	08007f85 	.word	0x08007f85
 8007eec:	08007f85 	.word	0x08007f85
 8007ef0:	08007f65 	.word	0x08007f65
 8007ef4:	08007f85 	.word	0x08007f85
 8007ef8:	08007f85 	.word	0x08007f85
 8007efc:	08007f85 	.word	0x08007f85
 8007f00:	08007f85 	.word	0x08007f85
 8007f04:	08007f85 	.word	0x08007f85
 8007f08:	08007f85 	.word	0x08007f85
 8007f0c:	08007f85 	.word	0x08007f85
 8007f10:	08007f6d 	.word	0x08007f6d
 8007f14:	08007f85 	.word	0x08007f85
 8007f18:	08007f85 	.word	0x08007f85
 8007f1c:	08007f85 	.word	0x08007f85
 8007f20:	08007f85 	.word	0x08007f85
 8007f24:	08007f85 	.word	0x08007f85
 8007f28:	08007f85 	.word	0x08007f85
 8007f2c:	08007f85 	.word	0x08007f85
 8007f30:	08007f75 	.word	0x08007f75
 8007f34:	08007f85 	.word	0x08007f85
 8007f38:	08007f85 	.word	0x08007f85
 8007f3c:	08007f85 	.word	0x08007f85
 8007f40:	08007f85 	.word	0x08007f85
 8007f44:	08007f85 	.word	0x08007f85
 8007f48:	08007f85 	.word	0x08007f85
 8007f4c:	08007f85 	.word	0x08007f85
 8007f50:	08007f7d 	.word	0x08007f7d
 8007f54:	2301      	movs	r3, #1
 8007f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f5a:	e0bc      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007f5c:	2304      	movs	r3, #4
 8007f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f62:	e0b8      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007f64:	2308      	movs	r3, #8
 8007f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f6a:	e0b4      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007f6c:	2310      	movs	r3, #16
 8007f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f72:	e0b0      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007f74:	2320      	movs	r3, #32
 8007f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f7a:	e0ac      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007f7c:	2340      	movs	r3, #64	@ 0x40
 8007f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f82:	e0a8      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007f84:	2380      	movs	r3, #128	@ 0x80
 8007f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f8a:	e0a4      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a8f      	ldr	r2, [pc, #572]	@ (80081d0 <UART_SetConfig+0x6a0>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d130      	bne.n	8007ff8 <UART_SetConfig+0x4c8>
 8007f96:	4b8d      	ldr	r3, [pc, #564]	@ (80081cc <UART_SetConfig+0x69c>)
 8007f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f9a:	f003 0307 	and.w	r3, r3, #7
 8007f9e:	2b05      	cmp	r3, #5
 8007fa0:	d826      	bhi.n	8007ff0 <UART_SetConfig+0x4c0>
 8007fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8007fa8 <UART_SetConfig+0x478>)
 8007fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa8:	08007fc1 	.word	0x08007fc1
 8007fac:	08007fc9 	.word	0x08007fc9
 8007fb0:	08007fd1 	.word	0x08007fd1
 8007fb4:	08007fd9 	.word	0x08007fd9
 8007fb8:	08007fe1 	.word	0x08007fe1
 8007fbc:	08007fe9 	.word	0x08007fe9
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fc6:	e086      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007fc8:	2304      	movs	r3, #4
 8007fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fce:	e082      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007fd0:	2308      	movs	r3, #8
 8007fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fd6:	e07e      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007fd8:	2310      	movs	r3, #16
 8007fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fde:	e07a      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007fe0:	2320      	movs	r3, #32
 8007fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fe6:	e076      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007fe8:	2340      	movs	r3, #64	@ 0x40
 8007fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fee:	e072      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007ff0:	2380      	movs	r3, #128	@ 0x80
 8007ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ff6:	e06e      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a75      	ldr	r2, [pc, #468]	@ (80081d4 <UART_SetConfig+0x6a4>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d130      	bne.n	8008064 <UART_SetConfig+0x534>
 8008002:	4b72      	ldr	r3, [pc, #456]	@ (80081cc <UART_SetConfig+0x69c>)
 8008004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008006:	f003 0307 	and.w	r3, r3, #7
 800800a:	2b05      	cmp	r3, #5
 800800c:	d826      	bhi.n	800805c <UART_SetConfig+0x52c>
 800800e:	a201      	add	r2, pc, #4	@ (adr r2, 8008014 <UART_SetConfig+0x4e4>)
 8008010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008014:	0800802d 	.word	0x0800802d
 8008018:	08008035 	.word	0x08008035
 800801c:	0800803d 	.word	0x0800803d
 8008020:	08008045 	.word	0x08008045
 8008024:	0800804d 	.word	0x0800804d
 8008028:	08008055 	.word	0x08008055
 800802c:	2300      	movs	r3, #0
 800802e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008032:	e050      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8008034:	2304      	movs	r3, #4
 8008036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800803a:	e04c      	b.n	80080d6 <UART_SetConfig+0x5a6>
 800803c:	2308      	movs	r3, #8
 800803e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008042:	e048      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8008044:	2310      	movs	r3, #16
 8008046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800804a:	e044      	b.n	80080d6 <UART_SetConfig+0x5a6>
 800804c:	2320      	movs	r3, #32
 800804e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008052:	e040      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8008054:	2340      	movs	r3, #64	@ 0x40
 8008056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800805a:	e03c      	b.n	80080d6 <UART_SetConfig+0x5a6>
 800805c:	2380      	movs	r3, #128	@ 0x80
 800805e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008062:	e038      	b.n	80080d6 <UART_SetConfig+0x5a6>
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a5b      	ldr	r2, [pc, #364]	@ (80081d8 <UART_SetConfig+0x6a8>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d130      	bne.n	80080d0 <UART_SetConfig+0x5a0>
 800806e:	4b57      	ldr	r3, [pc, #348]	@ (80081cc <UART_SetConfig+0x69c>)
 8008070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008072:	f003 0307 	and.w	r3, r3, #7
 8008076:	2b05      	cmp	r3, #5
 8008078:	d826      	bhi.n	80080c8 <UART_SetConfig+0x598>
 800807a:	a201      	add	r2, pc, #4	@ (adr r2, 8008080 <UART_SetConfig+0x550>)
 800807c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008080:	08008099 	.word	0x08008099
 8008084:	080080a1 	.word	0x080080a1
 8008088:	080080a9 	.word	0x080080a9
 800808c:	080080b1 	.word	0x080080b1
 8008090:	080080b9 	.word	0x080080b9
 8008094:	080080c1 	.word	0x080080c1
 8008098:	2302      	movs	r3, #2
 800809a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800809e:	e01a      	b.n	80080d6 <UART_SetConfig+0x5a6>
 80080a0:	2304      	movs	r3, #4
 80080a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080a6:	e016      	b.n	80080d6 <UART_SetConfig+0x5a6>
 80080a8:	2308      	movs	r3, #8
 80080aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ae:	e012      	b.n	80080d6 <UART_SetConfig+0x5a6>
 80080b0:	2310      	movs	r3, #16
 80080b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080b6:	e00e      	b.n	80080d6 <UART_SetConfig+0x5a6>
 80080b8:	2320      	movs	r3, #32
 80080ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080be:	e00a      	b.n	80080d6 <UART_SetConfig+0x5a6>
 80080c0:	2340      	movs	r3, #64	@ 0x40
 80080c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080c6:	e006      	b.n	80080d6 <UART_SetConfig+0x5a6>
 80080c8:	2380      	movs	r3, #128	@ 0x80
 80080ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ce:	e002      	b.n	80080d6 <UART_SetConfig+0x5a6>
 80080d0:	2380      	movs	r3, #128	@ 0x80
 80080d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a3f      	ldr	r2, [pc, #252]	@ (80081d8 <UART_SetConfig+0x6a8>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	f040 80f8 	bne.w	80082d2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80080e2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80080e6:	2b20      	cmp	r3, #32
 80080e8:	dc46      	bgt.n	8008178 <UART_SetConfig+0x648>
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	f2c0 8082 	blt.w	80081f4 <UART_SetConfig+0x6c4>
 80080f0:	3b02      	subs	r3, #2
 80080f2:	2b1e      	cmp	r3, #30
 80080f4:	d87e      	bhi.n	80081f4 <UART_SetConfig+0x6c4>
 80080f6:	a201      	add	r2, pc, #4	@ (adr r2, 80080fc <UART_SetConfig+0x5cc>)
 80080f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080fc:	0800817f 	.word	0x0800817f
 8008100:	080081f5 	.word	0x080081f5
 8008104:	08008187 	.word	0x08008187
 8008108:	080081f5 	.word	0x080081f5
 800810c:	080081f5 	.word	0x080081f5
 8008110:	080081f5 	.word	0x080081f5
 8008114:	08008197 	.word	0x08008197
 8008118:	080081f5 	.word	0x080081f5
 800811c:	080081f5 	.word	0x080081f5
 8008120:	080081f5 	.word	0x080081f5
 8008124:	080081f5 	.word	0x080081f5
 8008128:	080081f5 	.word	0x080081f5
 800812c:	080081f5 	.word	0x080081f5
 8008130:	080081f5 	.word	0x080081f5
 8008134:	080081a7 	.word	0x080081a7
 8008138:	080081f5 	.word	0x080081f5
 800813c:	080081f5 	.word	0x080081f5
 8008140:	080081f5 	.word	0x080081f5
 8008144:	080081f5 	.word	0x080081f5
 8008148:	080081f5 	.word	0x080081f5
 800814c:	080081f5 	.word	0x080081f5
 8008150:	080081f5 	.word	0x080081f5
 8008154:	080081f5 	.word	0x080081f5
 8008158:	080081f5 	.word	0x080081f5
 800815c:	080081f5 	.word	0x080081f5
 8008160:	080081f5 	.word	0x080081f5
 8008164:	080081f5 	.word	0x080081f5
 8008168:	080081f5 	.word	0x080081f5
 800816c:	080081f5 	.word	0x080081f5
 8008170:	080081f5 	.word	0x080081f5
 8008174:	080081e7 	.word	0x080081e7
 8008178:	2b40      	cmp	r3, #64	@ 0x40
 800817a:	d037      	beq.n	80081ec <UART_SetConfig+0x6bc>
 800817c:	e03a      	b.n	80081f4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800817e:	f7fe f92f 	bl	80063e0 <HAL_RCCEx_GetD3PCLK1Freq>
 8008182:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008184:	e03c      	b.n	8008200 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008186:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800818a:	4618      	mov	r0, r3
 800818c:	f7fe f93e 	bl	800640c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008194:	e034      	b.n	8008200 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008196:	f107 0318 	add.w	r3, r7, #24
 800819a:	4618      	mov	r0, r3
 800819c:	f7fe fa8a 	bl	80066b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081a4:	e02c      	b.n	8008200 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081a6:	4b09      	ldr	r3, [pc, #36]	@ (80081cc <UART_SetConfig+0x69c>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 0320 	and.w	r3, r3, #32
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d016      	beq.n	80081e0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80081b2:	4b06      	ldr	r3, [pc, #24]	@ (80081cc <UART_SetConfig+0x69c>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	08db      	lsrs	r3, r3, #3
 80081b8:	f003 0303 	and.w	r3, r3, #3
 80081bc:	4a07      	ldr	r2, [pc, #28]	@ (80081dc <UART_SetConfig+0x6ac>)
 80081be:	fa22 f303 	lsr.w	r3, r2, r3
 80081c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80081c4:	e01c      	b.n	8008200 <UART_SetConfig+0x6d0>
 80081c6:	bf00      	nop
 80081c8:	40011400 	.word	0x40011400
 80081cc:	58024400 	.word	0x58024400
 80081d0:	40007800 	.word	0x40007800
 80081d4:	40007c00 	.word	0x40007c00
 80081d8:	58000c00 	.word	0x58000c00
 80081dc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80081e0:	4b9d      	ldr	r3, [pc, #628]	@ (8008458 <UART_SetConfig+0x928>)
 80081e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081e4:	e00c      	b.n	8008200 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80081e6:	4b9d      	ldr	r3, [pc, #628]	@ (800845c <UART_SetConfig+0x92c>)
 80081e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081ea:	e009      	b.n	8008200 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081f2:	e005      	b.n	8008200 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80081f4:	2300      	movs	r3, #0
 80081f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80081fe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008202:	2b00      	cmp	r3, #0
 8008204:	f000 81de 	beq.w	80085c4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800820c:	4a94      	ldr	r2, [pc, #592]	@ (8008460 <UART_SetConfig+0x930>)
 800820e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008212:	461a      	mov	r2, r3
 8008214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008216:	fbb3 f3f2 	udiv	r3, r3, r2
 800821a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	685a      	ldr	r2, [r3, #4]
 8008220:	4613      	mov	r3, r2
 8008222:	005b      	lsls	r3, r3, #1
 8008224:	4413      	add	r3, r2
 8008226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008228:	429a      	cmp	r2, r3
 800822a:	d305      	bcc.n	8008238 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008232:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008234:	429a      	cmp	r2, r3
 8008236:	d903      	bls.n	8008240 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800823e:	e1c1      	b.n	80085c4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008242:	2200      	movs	r2, #0
 8008244:	60bb      	str	r3, [r7, #8]
 8008246:	60fa      	str	r2, [r7, #12]
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800824c:	4a84      	ldr	r2, [pc, #528]	@ (8008460 <UART_SetConfig+0x930>)
 800824e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008252:	b29b      	uxth	r3, r3
 8008254:	2200      	movs	r2, #0
 8008256:	603b      	str	r3, [r7, #0]
 8008258:	607a      	str	r2, [r7, #4]
 800825a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800825e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008262:	f7f8 f895 	bl	8000390 <__aeabi_uldivmod>
 8008266:	4602      	mov	r2, r0
 8008268:	460b      	mov	r3, r1
 800826a:	4610      	mov	r0, r2
 800826c:	4619      	mov	r1, r3
 800826e:	f04f 0200 	mov.w	r2, #0
 8008272:	f04f 0300 	mov.w	r3, #0
 8008276:	020b      	lsls	r3, r1, #8
 8008278:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800827c:	0202      	lsls	r2, r0, #8
 800827e:	6979      	ldr	r1, [r7, #20]
 8008280:	6849      	ldr	r1, [r1, #4]
 8008282:	0849      	lsrs	r1, r1, #1
 8008284:	2000      	movs	r0, #0
 8008286:	460c      	mov	r4, r1
 8008288:	4605      	mov	r5, r0
 800828a:	eb12 0804 	adds.w	r8, r2, r4
 800828e:	eb43 0905 	adc.w	r9, r3, r5
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	469a      	mov	sl, r3
 800829a:	4693      	mov	fp, r2
 800829c:	4652      	mov	r2, sl
 800829e:	465b      	mov	r3, fp
 80082a0:	4640      	mov	r0, r8
 80082a2:	4649      	mov	r1, r9
 80082a4:	f7f8 f874 	bl	8000390 <__aeabi_uldivmod>
 80082a8:	4602      	mov	r2, r0
 80082aa:	460b      	mov	r3, r1
 80082ac:	4613      	mov	r3, r2
 80082ae:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80082b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082b6:	d308      	bcc.n	80082ca <UART_SetConfig+0x79a>
 80082b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082be:	d204      	bcs.n	80082ca <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80082c6:	60da      	str	r2, [r3, #12]
 80082c8:	e17c      	b.n	80085c4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80082d0:	e178      	b.n	80085c4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	69db      	ldr	r3, [r3, #28]
 80082d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082da:	f040 80c5 	bne.w	8008468 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80082de:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80082e2:	2b20      	cmp	r3, #32
 80082e4:	dc48      	bgt.n	8008378 <UART_SetConfig+0x848>
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	db7b      	blt.n	80083e2 <UART_SetConfig+0x8b2>
 80082ea:	2b20      	cmp	r3, #32
 80082ec:	d879      	bhi.n	80083e2 <UART_SetConfig+0x8b2>
 80082ee:	a201      	add	r2, pc, #4	@ (adr r2, 80082f4 <UART_SetConfig+0x7c4>)
 80082f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f4:	0800837f 	.word	0x0800837f
 80082f8:	08008387 	.word	0x08008387
 80082fc:	080083e3 	.word	0x080083e3
 8008300:	080083e3 	.word	0x080083e3
 8008304:	0800838f 	.word	0x0800838f
 8008308:	080083e3 	.word	0x080083e3
 800830c:	080083e3 	.word	0x080083e3
 8008310:	080083e3 	.word	0x080083e3
 8008314:	0800839f 	.word	0x0800839f
 8008318:	080083e3 	.word	0x080083e3
 800831c:	080083e3 	.word	0x080083e3
 8008320:	080083e3 	.word	0x080083e3
 8008324:	080083e3 	.word	0x080083e3
 8008328:	080083e3 	.word	0x080083e3
 800832c:	080083e3 	.word	0x080083e3
 8008330:	080083e3 	.word	0x080083e3
 8008334:	080083af 	.word	0x080083af
 8008338:	080083e3 	.word	0x080083e3
 800833c:	080083e3 	.word	0x080083e3
 8008340:	080083e3 	.word	0x080083e3
 8008344:	080083e3 	.word	0x080083e3
 8008348:	080083e3 	.word	0x080083e3
 800834c:	080083e3 	.word	0x080083e3
 8008350:	080083e3 	.word	0x080083e3
 8008354:	080083e3 	.word	0x080083e3
 8008358:	080083e3 	.word	0x080083e3
 800835c:	080083e3 	.word	0x080083e3
 8008360:	080083e3 	.word	0x080083e3
 8008364:	080083e3 	.word	0x080083e3
 8008368:	080083e3 	.word	0x080083e3
 800836c:	080083e3 	.word	0x080083e3
 8008370:	080083e3 	.word	0x080083e3
 8008374:	080083d5 	.word	0x080083d5
 8008378:	2b40      	cmp	r3, #64	@ 0x40
 800837a:	d02e      	beq.n	80083da <UART_SetConfig+0x8aa>
 800837c:	e031      	b.n	80083e2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800837e:	f7fc fdb7 	bl	8004ef0 <HAL_RCC_GetPCLK1Freq>
 8008382:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008384:	e033      	b.n	80083ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008386:	f7fc fdc9 	bl	8004f1c <HAL_RCC_GetPCLK2Freq>
 800838a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800838c:	e02f      	b.n	80083ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800838e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008392:	4618      	mov	r0, r3
 8008394:	f7fe f83a 	bl	800640c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800839a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800839c:	e027      	b.n	80083ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800839e:	f107 0318 	add.w	r3, r7, #24
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7fe f986 	bl	80066b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083ac:	e01f      	b.n	80083ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083ae:	4b2d      	ldr	r3, [pc, #180]	@ (8008464 <UART_SetConfig+0x934>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0320 	and.w	r3, r3, #32
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d009      	beq.n	80083ce <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80083ba:	4b2a      	ldr	r3, [pc, #168]	@ (8008464 <UART_SetConfig+0x934>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	08db      	lsrs	r3, r3, #3
 80083c0:	f003 0303 	and.w	r3, r3, #3
 80083c4:	4a24      	ldr	r2, [pc, #144]	@ (8008458 <UART_SetConfig+0x928>)
 80083c6:	fa22 f303 	lsr.w	r3, r2, r3
 80083ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80083cc:	e00f      	b.n	80083ee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80083ce:	4b22      	ldr	r3, [pc, #136]	@ (8008458 <UART_SetConfig+0x928>)
 80083d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083d2:	e00c      	b.n	80083ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80083d4:	4b21      	ldr	r3, [pc, #132]	@ (800845c <UART_SetConfig+0x92c>)
 80083d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083d8:	e009      	b.n	80083ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083e0:	e005      	b.n	80083ee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80083e2:	2300      	movs	r3, #0
 80083e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80083ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80083ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f000 80e7 	beq.w	80085c4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083fa:	4a19      	ldr	r2, [pc, #100]	@ (8008460 <UART_SetConfig+0x930>)
 80083fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008400:	461a      	mov	r2, r3
 8008402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008404:	fbb3 f3f2 	udiv	r3, r3, r2
 8008408:	005a      	lsls	r2, r3, #1
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	085b      	lsrs	r3, r3, #1
 8008410:	441a      	add	r2, r3
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	fbb2 f3f3 	udiv	r3, r2, r3
 800841a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800841c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800841e:	2b0f      	cmp	r3, #15
 8008420:	d916      	bls.n	8008450 <UART_SetConfig+0x920>
 8008422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008428:	d212      	bcs.n	8008450 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800842a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800842c:	b29b      	uxth	r3, r3
 800842e:	f023 030f 	bic.w	r3, r3, #15
 8008432:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008436:	085b      	lsrs	r3, r3, #1
 8008438:	b29b      	uxth	r3, r3
 800843a:	f003 0307 	and.w	r3, r3, #7
 800843e:	b29a      	uxth	r2, r3
 8008440:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008442:	4313      	orrs	r3, r2
 8008444:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800844c:	60da      	str	r2, [r3, #12]
 800844e:	e0b9      	b.n	80085c4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008456:	e0b5      	b.n	80085c4 <UART_SetConfig+0xa94>
 8008458:	03d09000 	.word	0x03d09000
 800845c:	003d0900 	.word	0x003d0900
 8008460:	0801b0c8 	.word	0x0801b0c8
 8008464:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008468:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800846c:	2b20      	cmp	r3, #32
 800846e:	dc49      	bgt.n	8008504 <UART_SetConfig+0x9d4>
 8008470:	2b00      	cmp	r3, #0
 8008472:	db7c      	blt.n	800856e <UART_SetConfig+0xa3e>
 8008474:	2b20      	cmp	r3, #32
 8008476:	d87a      	bhi.n	800856e <UART_SetConfig+0xa3e>
 8008478:	a201      	add	r2, pc, #4	@ (adr r2, 8008480 <UART_SetConfig+0x950>)
 800847a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847e:	bf00      	nop
 8008480:	0800850b 	.word	0x0800850b
 8008484:	08008513 	.word	0x08008513
 8008488:	0800856f 	.word	0x0800856f
 800848c:	0800856f 	.word	0x0800856f
 8008490:	0800851b 	.word	0x0800851b
 8008494:	0800856f 	.word	0x0800856f
 8008498:	0800856f 	.word	0x0800856f
 800849c:	0800856f 	.word	0x0800856f
 80084a0:	0800852b 	.word	0x0800852b
 80084a4:	0800856f 	.word	0x0800856f
 80084a8:	0800856f 	.word	0x0800856f
 80084ac:	0800856f 	.word	0x0800856f
 80084b0:	0800856f 	.word	0x0800856f
 80084b4:	0800856f 	.word	0x0800856f
 80084b8:	0800856f 	.word	0x0800856f
 80084bc:	0800856f 	.word	0x0800856f
 80084c0:	0800853b 	.word	0x0800853b
 80084c4:	0800856f 	.word	0x0800856f
 80084c8:	0800856f 	.word	0x0800856f
 80084cc:	0800856f 	.word	0x0800856f
 80084d0:	0800856f 	.word	0x0800856f
 80084d4:	0800856f 	.word	0x0800856f
 80084d8:	0800856f 	.word	0x0800856f
 80084dc:	0800856f 	.word	0x0800856f
 80084e0:	0800856f 	.word	0x0800856f
 80084e4:	0800856f 	.word	0x0800856f
 80084e8:	0800856f 	.word	0x0800856f
 80084ec:	0800856f 	.word	0x0800856f
 80084f0:	0800856f 	.word	0x0800856f
 80084f4:	0800856f 	.word	0x0800856f
 80084f8:	0800856f 	.word	0x0800856f
 80084fc:	0800856f 	.word	0x0800856f
 8008500:	08008561 	.word	0x08008561
 8008504:	2b40      	cmp	r3, #64	@ 0x40
 8008506:	d02e      	beq.n	8008566 <UART_SetConfig+0xa36>
 8008508:	e031      	b.n	800856e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800850a:	f7fc fcf1 	bl	8004ef0 <HAL_RCC_GetPCLK1Freq>
 800850e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008510:	e033      	b.n	800857a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008512:	f7fc fd03 	bl	8004f1c <HAL_RCC_GetPCLK2Freq>
 8008516:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008518:	e02f      	b.n	800857a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800851a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800851e:	4618      	mov	r0, r3
 8008520:	f7fd ff74 	bl	800640c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008528:	e027      	b.n	800857a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800852a:	f107 0318 	add.w	r3, r7, #24
 800852e:	4618      	mov	r0, r3
 8008530:	f7fe f8c0 	bl	80066b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008538:	e01f      	b.n	800857a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800853a:	4b2d      	ldr	r3, [pc, #180]	@ (80085f0 <UART_SetConfig+0xac0>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 0320 	and.w	r3, r3, #32
 8008542:	2b00      	cmp	r3, #0
 8008544:	d009      	beq.n	800855a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008546:	4b2a      	ldr	r3, [pc, #168]	@ (80085f0 <UART_SetConfig+0xac0>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	08db      	lsrs	r3, r3, #3
 800854c:	f003 0303 	and.w	r3, r3, #3
 8008550:	4a28      	ldr	r2, [pc, #160]	@ (80085f4 <UART_SetConfig+0xac4>)
 8008552:	fa22 f303 	lsr.w	r3, r2, r3
 8008556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008558:	e00f      	b.n	800857a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800855a:	4b26      	ldr	r3, [pc, #152]	@ (80085f4 <UART_SetConfig+0xac4>)
 800855c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800855e:	e00c      	b.n	800857a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008560:	4b25      	ldr	r3, [pc, #148]	@ (80085f8 <UART_SetConfig+0xac8>)
 8008562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008564:	e009      	b.n	800857a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008566:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800856a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800856c:	e005      	b.n	800857a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800856e:	2300      	movs	r3, #0
 8008570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008578:	bf00      	nop
    }

    if (pclk != 0U)
 800857a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800857c:	2b00      	cmp	r3, #0
 800857e:	d021      	beq.n	80085c4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008584:	4a1d      	ldr	r2, [pc, #116]	@ (80085fc <UART_SetConfig+0xacc>)
 8008586:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800858a:	461a      	mov	r2, r3
 800858c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800858e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	085b      	lsrs	r3, r3, #1
 8008598:	441a      	add	r2, r3
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	fbb2 f3f3 	udiv	r3, r2, r3
 80085a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a6:	2b0f      	cmp	r3, #15
 80085a8:	d909      	bls.n	80085be <UART_SetConfig+0xa8e>
 80085aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085b0:	d205      	bcs.n	80085be <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80085b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	60da      	str	r2, [r3, #12]
 80085bc:	e002      	b.n	80085c4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	2200      	movs	r2, #0
 80085d8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	2200      	movs	r2, #0
 80085de:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80085e0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3748      	adds	r7, #72	@ 0x48
 80085e8:	46bd      	mov	sp, r7
 80085ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085ee:	bf00      	nop
 80085f0:	58024400 	.word	0x58024400
 80085f4:	03d09000 	.word	0x03d09000
 80085f8:	003d0900 	.word	0x003d0900
 80085fc:	0801b0c8 	.word	0x0801b0c8

08008600 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800860c:	f003 0308 	and.w	r3, r3, #8
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00a      	beq.n	800862a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	430a      	orrs	r2, r1
 8008628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800862e:	f003 0301 	and.w	r3, r3, #1
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00a      	beq.n	800864c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	430a      	orrs	r2, r1
 800864a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008650:	f003 0302 	and.w	r3, r3, #2
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00a      	beq.n	800866e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	430a      	orrs	r2, r1
 800866c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008672:	f003 0304 	and.w	r3, r3, #4
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00a      	beq.n	8008690 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	430a      	orrs	r2, r1
 800868e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008694:	f003 0310 	and.w	r3, r3, #16
 8008698:	2b00      	cmp	r3, #0
 800869a:	d00a      	beq.n	80086b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	430a      	orrs	r2, r1
 80086b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086b6:	f003 0320 	and.w	r3, r3, #32
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00a      	beq.n	80086d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	430a      	orrs	r2, r1
 80086d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d01a      	beq.n	8008716 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	430a      	orrs	r2, r1
 80086f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086fe:	d10a      	bne.n	8008716 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	430a      	orrs	r2, r1
 8008714:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800871a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00a      	beq.n	8008738 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	430a      	orrs	r2, r1
 8008736:	605a      	str	r2, [r3, #4]
  }
}
 8008738:	bf00      	nop
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b098      	sub	sp, #96	@ 0x60
 8008748:	af02      	add	r7, sp, #8
 800874a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008754:	f7f8 ff38 	bl	80015c8 <HAL_GetTick>
 8008758:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 0308 	and.w	r3, r3, #8
 8008764:	2b08      	cmp	r3, #8
 8008766:	d12f      	bne.n	80087c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008768:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008770:	2200      	movs	r2, #0
 8008772:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f88e 	bl	8008898 <UART_WaitOnFlagUntilTimeout>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d022      	beq.n	80087c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800878a:	e853 3f00 	ldrex	r3, [r3]
 800878e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008792:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008796:	653b      	str	r3, [r7, #80]	@ 0x50
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	461a      	mov	r2, r3
 800879e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80087a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80087a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087a8:	e841 2300 	strex	r3, r2, [r1]
 80087ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80087ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1e6      	bne.n	8008782 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2220      	movs	r2, #32
 80087b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e063      	b.n	8008890 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 0304 	and.w	r3, r3, #4
 80087d2:	2b04      	cmp	r3, #4
 80087d4:	d149      	bne.n	800886a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80087da:	9300      	str	r3, [sp, #0]
 80087dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087de:	2200      	movs	r2, #0
 80087e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 f857 	bl	8008898 <UART_WaitOnFlagUntilTimeout>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d03c      	beq.n	800886a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f8:	e853 3f00 	ldrex	r3, [r3]
 80087fc:	623b      	str	r3, [r7, #32]
   return(result);
 80087fe:	6a3b      	ldr	r3, [r7, #32]
 8008800:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008804:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	461a      	mov	r2, r3
 800880c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800880e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008810:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008812:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008814:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008816:	e841 2300 	strex	r3, r2, [r1]
 800881a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800881c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1e6      	bne.n	80087f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	3308      	adds	r3, #8
 8008828:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	e853 3f00 	ldrex	r3, [r3]
 8008830:	60fb      	str	r3, [r7, #12]
   return(result);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f023 0301 	bic.w	r3, r3, #1
 8008838:	64bb      	str	r3, [r7, #72]	@ 0x48
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	3308      	adds	r3, #8
 8008840:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008842:	61fa      	str	r2, [r7, #28]
 8008844:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008846:	69b9      	ldr	r1, [r7, #24]
 8008848:	69fa      	ldr	r2, [r7, #28]
 800884a:	e841 2300 	strex	r3, r2, [r1]
 800884e:	617b      	str	r3, [r7, #20]
   return(result);
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d1e5      	bne.n	8008822 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2220      	movs	r2, #32
 800885a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008866:	2303      	movs	r3, #3
 8008868:	e012      	b.n	8008890 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2220      	movs	r2, #32
 800886e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2220      	movs	r2, #32
 8008876:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3758      	adds	r7, #88	@ 0x58
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	603b      	str	r3, [r7, #0]
 80088a4:	4613      	mov	r3, r2
 80088a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088a8:	e04f      	b.n	800894a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088b0:	d04b      	beq.n	800894a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088b2:	f7f8 fe89 	bl	80015c8 <HAL_GetTick>
 80088b6:	4602      	mov	r2, r0
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	69ba      	ldr	r2, [r7, #24]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d302      	bcc.n	80088c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d101      	bne.n	80088cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80088c8:	2303      	movs	r3, #3
 80088ca:	e04e      	b.n	800896a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 0304 	and.w	r3, r3, #4
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d037      	beq.n	800894a <UART_WaitOnFlagUntilTimeout+0xb2>
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	2b80      	cmp	r3, #128	@ 0x80
 80088de:	d034      	beq.n	800894a <UART_WaitOnFlagUntilTimeout+0xb2>
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	2b40      	cmp	r3, #64	@ 0x40
 80088e4:	d031      	beq.n	800894a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	69db      	ldr	r3, [r3, #28]
 80088ec:	f003 0308 	and.w	r3, r3, #8
 80088f0:	2b08      	cmp	r3, #8
 80088f2:	d110      	bne.n	8008916 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2208      	movs	r2, #8
 80088fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088fc:	68f8      	ldr	r0, [r7, #12]
 80088fe:	f000 f839 	bl	8008974 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2208      	movs	r2, #8
 8008906:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	e029      	b.n	800896a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	69db      	ldr	r3, [r3, #28]
 800891c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008920:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008924:	d111      	bne.n	800894a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800892e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f000 f81f 	bl	8008974 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2220      	movs	r2, #32
 800893a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008946:	2303      	movs	r3, #3
 8008948:	e00f      	b.n	800896a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	69da      	ldr	r2, [r3, #28]
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	4013      	ands	r3, r2
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	429a      	cmp	r2, r3
 8008958:	bf0c      	ite	eq
 800895a:	2301      	moveq	r3, #1
 800895c:	2300      	movne	r3, #0
 800895e:	b2db      	uxtb	r3, r3
 8008960:	461a      	mov	r2, r3
 8008962:	79fb      	ldrb	r3, [r7, #7]
 8008964:	429a      	cmp	r2, r3
 8008966:	d0a0      	beq.n	80088aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
	...

08008974 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008974:	b480      	push	{r7}
 8008976:	b095      	sub	sp, #84	@ 0x54
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008984:	e853 3f00 	ldrex	r3, [r3]
 8008988:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800898a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800898c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008990:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	461a      	mov	r2, r3
 8008998:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800899a:	643b      	str	r3, [r7, #64]	@ 0x40
 800899c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80089a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80089a2:	e841 2300 	strex	r3, r2, [r1]
 80089a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80089a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1e6      	bne.n	800897c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	3308      	adds	r3, #8
 80089b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b6:	6a3b      	ldr	r3, [r7, #32]
 80089b8:	e853 3f00 	ldrex	r3, [r3]
 80089bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80089be:	69fa      	ldr	r2, [r7, #28]
 80089c0:	4b1e      	ldr	r3, [pc, #120]	@ (8008a3c <UART_EndRxTransfer+0xc8>)
 80089c2:	4013      	ands	r3, r2
 80089c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	3308      	adds	r3, #8
 80089cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80089d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089d6:	e841 2300 	strex	r3, r2, [r1]
 80089da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d1e5      	bne.n	80089ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d118      	bne.n	8008a1c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	e853 3f00 	ldrex	r3, [r3]
 80089f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	f023 0310 	bic.w	r3, r3, #16
 80089fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	461a      	mov	r2, r3
 8008a06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a08:	61bb      	str	r3, [r7, #24]
 8008a0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0c:	6979      	ldr	r1, [r7, #20]
 8008a0e:	69ba      	ldr	r2, [r7, #24]
 8008a10:	e841 2300 	strex	r3, r2, [r1]
 8008a14:	613b      	str	r3, [r7, #16]
   return(result);
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1e6      	bne.n	80089ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2220      	movs	r2, #32
 8008a20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008a30:	bf00      	nop
 8008a32:	3754      	adds	r7, #84	@ 0x54
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr
 8008a3c:	effffffe 	.word	0xeffffffe

08008a40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a5e:	68f8      	ldr	r0, [r7, #12]
 8008a60:	f7ff f850 	bl	8007b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a64:	bf00      	nop
 8008a66:	3710      	adds	r7, #16
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b088      	sub	sp, #32
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	e853 3f00 	ldrex	r3, [r3]
 8008a80:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a88:	61fb      	str	r3, [r7, #28]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	461a      	mov	r2, r3
 8008a90:	69fb      	ldr	r3, [r7, #28]
 8008a92:	61bb      	str	r3, [r7, #24]
 8008a94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a96:	6979      	ldr	r1, [r7, #20]
 8008a98:	69ba      	ldr	r2, [r7, #24]
 8008a9a:	e841 2300 	strex	r3, r2, [r1]
 8008a9e:	613b      	str	r3, [r7, #16]
   return(result);
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1e6      	bne.n	8008a74 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2220      	movs	r2, #32
 8008aaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f7ff f81b 	bl	8007af0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008aba:	bf00      	nop
 8008abc:	3720      	adds	r7, #32
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008ac2:	b480      	push	{r7}
 8008ac4:	b083      	sub	sp, #12
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008aca:	bf00      	nop
 8008acc:	370c      	adds	r7, #12
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr

08008ad6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	b083      	sub	sp, #12
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008ade:	bf00      	nop
 8008ae0:	370c      	adds	r7, #12
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr

08008aea <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008aea:	b480      	push	{r7}
 8008aec:	b083      	sub	sp, #12
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008af2:	bf00      	nop
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr

08008afe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008afe:	b480      	push	{r7}
 8008b00:	b085      	sub	sp, #20
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d101      	bne.n	8008b14 <HAL_UARTEx_DisableFifoMode+0x16>
 8008b10:	2302      	movs	r3, #2
 8008b12:	e027      	b.n	8008b64 <HAL_UARTEx_DisableFifoMode+0x66>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2224      	movs	r2, #36	@ 0x24
 8008b20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f022 0201 	bic.w	r2, r2, #1
 8008b3a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008b42:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2220      	movs	r2, #32
 8008b56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3714      	adds	r7, #20
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d101      	bne.n	8008b88 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008b84:	2302      	movs	r3, #2
 8008b86:	e02d      	b.n	8008be4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2224      	movs	r2, #36	@ 0x24
 8008b94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f022 0201 	bic.w	r2, r2, #1
 8008bae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	683a      	ldr	r2, [r7, #0]
 8008bc0:	430a      	orrs	r2, r1
 8008bc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 f84f 	bl	8008c68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2220      	movs	r2, #32
 8008bd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d101      	bne.n	8008c04 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c00:	2302      	movs	r3, #2
 8008c02:	e02d      	b.n	8008c60 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2224      	movs	r2, #36	@ 0x24
 8008c10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f022 0201 	bic.w	r2, r2, #1
 8008c2a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	683a      	ldr	r2, [r7, #0]
 8008c3c:	430a      	orrs	r2, r1
 8008c3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f811 	bl	8008c68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2220      	movs	r2, #32
 8008c52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3710      	adds	r7, #16
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d108      	bne.n	8008c8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008c88:	e031      	b.n	8008cee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008c8a:	2310      	movs	r3, #16
 8008c8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008c8e:	2310      	movs	r3, #16
 8008c90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	0e5b      	lsrs	r3, r3, #25
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	f003 0307 	and.w	r3, r3, #7
 8008ca0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	0f5b      	lsrs	r3, r3, #29
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	f003 0307 	and.w	r3, r3, #7
 8008cb0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008cb2:	7bbb      	ldrb	r3, [r7, #14]
 8008cb4:	7b3a      	ldrb	r2, [r7, #12]
 8008cb6:	4911      	ldr	r1, [pc, #68]	@ (8008cfc <UARTEx_SetNbDataToProcess+0x94>)
 8008cb8:	5c8a      	ldrb	r2, [r1, r2]
 8008cba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008cbe:	7b3a      	ldrb	r2, [r7, #12]
 8008cc0:	490f      	ldr	r1, [pc, #60]	@ (8008d00 <UARTEx_SetNbDataToProcess+0x98>)
 8008cc2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008cc4:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cc8:	b29a      	uxth	r2, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
 8008cd2:	7b7a      	ldrb	r2, [r7, #13]
 8008cd4:	4909      	ldr	r1, [pc, #36]	@ (8008cfc <UARTEx_SetNbDataToProcess+0x94>)
 8008cd6:	5c8a      	ldrb	r2, [r1, r2]
 8008cd8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008cdc:	7b7a      	ldrb	r2, [r7, #13]
 8008cde:	4908      	ldr	r1, [pc, #32]	@ (8008d00 <UARTEx_SetNbDataToProcess+0x98>)
 8008ce0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ce2:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008cee:	bf00      	nop
 8008cf0:	3714      	adds	r7, #20
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop
 8008cfc:	0801b0e0 	.word	0x0801b0e0
 8008d00:	0801b0e8 	.word	0x0801b0e8

08008d04 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8008d0a:	4b87      	ldr	r3, [pc, #540]	@ (8008f28 <MX_LWIP_Init+0x224>)
 8008d0c:	22c0      	movs	r2, #192	@ 0xc0
 8008d0e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8008d10:	4b85      	ldr	r3, [pc, #532]	@ (8008f28 <MX_LWIP_Init+0x224>)
 8008d12:	22a8      	movs	r2, #168	@ 0xa8
 8008d14:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8008d16:	4b84      	ldr	r3, [pc, #528]	@ (8008f28 <MX_LWIP_Init+0x224>)
 8008d18:	2201      	movs	r2, #1
 8008d1a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 3;
 8008d1c:	4b82      	ldr	r3, [pc, #520]	@ (8008f28 <MX_LWIP_Init+0x224>)
 8008d1e:	2203      	movs	r2, #3
 8008d20:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8008d22:	4b82      	ldr	r3, [pc, #520]	@ (8008f2c <MX_LWIP_Init+0x228>)
 8008d24:	22ff      	movs	r2, #255	@ 0xff
 8008d26:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8008d28:	4b80      	ldr	r3, [pc, #512]	@ (8008f2c <MX_LWIP_Init+0x228>)
 8008d2a:	22ff      	movs	r2, #255	@ 0xff
 8008d2c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8008d2e:	4b7f      	ldr	r3, [pc, #508]	@ (8008f2c <MX_LWIP_Init+0x228>)
 8008d30:	22ff      	movs	r2, #255	@ 0xff
 8008d32:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8008d34:	4b7d      	ldr	r3, [pc, #500]	@ (8008f2c <MX_LWIP_Init+0x228>)
 8008d36:	2200      	movs	r2, #0
 8008d38:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8008d3a:	4b7d      	ldr	r3, [pc, #500]	@ (8008f30 <MX_LWIP_Init+0x22c>)
 8008d3c:	22c0      	movs	r2, #192	@ 0xc0
 8008d3e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8008d40:	4b7b      	ldr	r3, [pc, #492]	@ (8008f30 <MX_LWIP_Init+0x22c>)
 8008d42:	22a8      	movs	r2, #168	@ 0xa8
 8008d44:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8008d46:	4b7a      	ldr	r3, [pc, #488]	@ (8008f30 <MX_LWIP_Init+0x22c>)
 8008d48:	2201      	movs	r2, #1
 8008d4a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8008d4c:	4b78      	ldr	r3, [pc, #480]	@ (8008f30 <MX_LWIP_Init+0x22c>)
 8008d4e:	2201      	movs	r2, #1
 8008d50:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8008d52:	f000 fe43 	bl	80099dc <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8008d56:	4b74      	ldr	r3, [pc, #464]	@ (8008f28 <MX_LWIP_Init+0x224>)
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	061a      	lsls	r2, r3, #24
 8008d5c:	4b72      	ldr	r3, [pc, #456]	@ (8008f28 <MX_LWIP_Init+0x224>)
 8008d5e:	785b      	ldrb	r3, [r3, #1]
 8008d60:	041b      	lsls	r3, r3, #16
 8008d62:	431a      	orrs	r2, r3
 8008d64:	4b70      	ldr	r3, [pc, #448]	@ (8008f28 <MX_LWIP_Init+0x224>)
 8008d66:	789b      	ldrb	r3, [r3, #2]
 8008d68:	021b      	lsls	r3, r3, #8
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	4a6e      	ldr	r2, [pc, #440]	@ (8008f28 <MX_LWIP_Init+0x224>)
 8008d6e:	78d2      	ldrb	r2, [r2, #3]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	061a      	lsls	r2, r3, #24
 8008d74:	4b6c      	ldr	r3, [pc, #432]	@ (8008f28 <MX_LWIP_Init+0x224>)
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	0619      	lsls	r1, r3, #24
 8008d7a:	4b6b      	ldr	r3, [pc, #428]	@ (8008f28 <MX_LWIP_Init+0x224>)
 8008d7c:	785b      	ldrb	r3, [r3, #1]
 8008d7e:	041b      	lsls	r3, r3, #16
 8008d80:	4319      	orrs	r1, r3
 8008d82:	4b69      	ldr	r3, [pc, #420]	@ (8008f28 <MX_LWIP_Init+0x224>)
 8008d84:	789b      	ldrb	r3, [r3, #2]
 8008d86:	021b      	lsls	r3, r3, #8
 8008d88:	430b      	orrs	r3, r1
 8008d8a:	4967      	ldr	r1, [pc, #412]	@ (8008f28 <MX_LWIP_Init+0x224>)
 8008d8c:	78c9      	ldrb	r1, [r1, #3]
 8008d8e:	430b      	orrs	r3, r1
 8008d90:	021b      	lsls	r3, r3, #8
 8008d92:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008d96:	431a      	orrs	r2, r3
 8008d98:	4b63      	ldr	r3, [pc, #396]	@ (8008f28 <MX_LWIP_Init+0x224>)
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	0619      	lsls	r1, r3, #24
 8008d9e:	4b62      	ldr	r3, [pc, #392]	@ (8008f28 <MX_LWIP_Init+0x224>)
 8008da0:	785b      	ldrb	r3, [r3, #1]
 8008da2:	041b      	lsls	r3, r3, #16
 8008da4:	4319      	orrs	r1, r3
 8008da6:	4b60      	ldr	r3, [pc, #384]	@ (8008f28 <MX_LWIP_Init+0x224>)
 8008da8:	789b      	ldrb	r3, [r3, #2]
 8008daa:	021b      	lsls	r3, r3, #8
 8008dac:	430b      	orrs	r3, r1
 8008dae:	495e      	ldr	r1, [pc, #376]	@ (8008f28 <MX_LWIP_Init+0x224>)
 8008db0:	78c9      	ldrb	r1, [r1, #3]
 8008db2:	430b      	orrs	r3, r1
 8008db4:	0a1b      	lsrs	r3, r3, #8
 8008db6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008dba:	431a      	orrs	r2, r3
 8008dbc:	4b5a      	ldr	r3, [pc, #360]	@ (8008f28 <MX_LWIP_Init+0x224>)
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	0619      	lsls	r1, r3, #24
 8008dc2:	4b59      	ldr	r3, [pc, #356]	@ (8008f28 <MX_LWIP_Init+0x224>)
 8008dc4:	785b      	ldrb	r3, [r3, #1]
 8008dc6:	041b      	lsls	r3, r3, #16
 8008dc8:	4319      	orrs	r1, r3
 8008dca:	4b57      	ldr	r3, [pc, #348]	@ (8008f28 <MX_LWIP_Init+0x224>)
 8008dcc:	789b      	ldrb	r3, [r3, #2]
 8008dce:	021b      	lsls	r3, r3, #8
 8008dd0:	430b      	orrs	r3, r1
 8008dd2:	4955      	ldr	r1, [pc, #340]	@ (8008f28 <MX_LWIP_Init+0x224>)
 8008dd4:	78c9      	ldrb	r1, [r1, #3]
 8008dd6:	430b      	orrs	r3, r1
 8008dd8:	0e1b      	lsrs	r3, r3, #24
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	4a55      	ldr	r2, [pc, #340]	@ (8008f34 <MX_LWIP_Init+0x230>)
 8008dde:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8008de0:	4b52      	ldr	r3, [pc, #328]	@ (8008f2c <MX_LWIP_Init+0x228>)
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	061a      	lsls	r2, r3, #24
 8008de6:	4b51      	ldr	r3, [pc, #324]	@ (8008f2c <MX_LWIP_Init+0x228>)
 8008de8:	785b      	ldrb	r3, [r3, #1]
 8008dea:	041b      	lsls	r3, r3, #16
 8008dec:	431a      	orrs	r2, r3
 8008dee:	4b4f      	ldr	r3, [pc, #316]	@ (8008f2c <MX_LWIP_Init+0x228>)
 8008df0:	789b      	ldrb	r3, [r3, #2]
 8008df2:	021b      	lsls	r3, r3, #8
 8008df4:	4313      	orrs	r3, r2
 8008df6:	4a4d      	ldr	r2, [pc, #308]	@ (8008f2c <MX_LWIP_Init+0x228>)
 8008df8:	78d2      	ldrb	r2, [r2, #3]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	061a      	lsls	r2, r3, #24
 8008dfe:	4b4b      	ldr	r3, [pc, #300]	@ (8008f2c <MX_LWIP_Init+0x228>)
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	0619      	lsls	r1, r3, #24
 8008e04:	4b49      	ldr	r3, [pc, #292]	@ (8008f2c <MX_LWIP_Init+0x228>)
 8008e06:	785b      	ldrb	r3, [r3, #1]
 8008e08:	041b      	lsls	r3, r3, #16
 8008e0a:	4319      	orrs	r1, r3
 8008e0c:	4b47      	ldr	r3, [pc, #284]	@ (8008f2c <MX_LWIP_Init+0x228>)
 8008e0e:	789b      	ldrb	r3, [r3, #2]
 8008e10:	021b      	lsls	r3, r3, #8
 8008e12:	430b      	orrs	r3, r1
 8008e14:	4945      	ldr	r1, [pc, #276]	@ (8008f2c <MX_LWIP_Init+0x228>)
 8008e16:	78c9      	ldrb	r1, [r1, #3]
 8008e18:	430b      	orrs	r3, r1
 8008e1a:	021b      	lsls	r3, r3, #8
 8008e1c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008e20:	431a      	orrs	r2, r3
 8008e22:	4b42      	ldr	r3, [pc, #264]	@ (8008f2c <MX_LWIP_Init+0x228>)
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	0619      	lsls	r1, r3, #24
 8008e28:	4b40      	ldr	r3, [pc, #256]	@ (8008f2c <MX_LWIP_Init+0x228>)
 8008e2a:	785b      	ldrb	r3, [r3, #1]
 8008e2c:	041b      	lsls	r3, r3, #16
 8008e2e:	4319      	orrs	r1, r3
 8008e30:	4b3e      	ldr	r3, [pc, #248]	@ (8008f2c <MX_LWIP_Init+0x228>)
 8008e32:	789b      	ldrb	r3, [r3, #2]
 8008e34:	021b      	lsls	r3, r3, #8
 8008e36:	430b      	orrs	r3, r1
 8008e38:	493c      	ldr	r1, [pc, #240]	@ (8008f2c <MX_LWIP_Init+0x228>)
 8008e3a:	78c9      	ldrb	r1, [r1, #3]
 8008e3c:	430b      	orrs	r3, r1
 8008e3e:	0a1b      	lsrs	r3, r3, #8
 8008e40:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008e44:	431a      	orrs	r2, r3
 8008e46:	4b39      	ldr	r3, [pc, #228]	@ (8008f2c <MX_LWIP_Init+0x228>)
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	0619      	lsls	r1, r3, #24
 8008e4c:	4b37      	ldr	r3, [pc, #220]	@ (8008f2c <MX_LWIP_Init+0x228>)
 8008e4e:	785b      	ldrb	r3, [r3, #1]
 8008e50:	041b      	lsls	r3, r3, #16
 8008e52:	4319      	orrs	r1, r3
 8008e54:	4b35      	ldr	r3, [pc, #212]	@ (8008f2c <MX_LWIP_Init+0x228>)
 8008e56:	789b      	ldrb	r3, [r3, #2]
 8008e58:	021b      	lsls	r3, r3, #8
 8008e5a:	430b      	orrs	r3, r1
 8008e5c:	4933      	ldr	r1, [pc, #204]	@ (8008f2c <MX_LWIP_Init+0x228>)
 8008e5e:	78c9      	ldrb	r1, [r1, #3]
 8008e60:	430b      	orrs	r3, r1
 8008e62:	0e1b      	lsrs	r3, r3, #24
 8008e64:	4313      	orrs	r3, r2
 8008e66:	4a34      	ldr	r2, [pc, #208]	@ (8008f38 <MX_LWIP_Init+0x234>)
 8008e68:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8008e6a:	4b31      	ldr	r3, [pc, #196]	@ (8008f30 <MX_LWIP_Init+0x22c>)
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	061a      	lsls	r2, r3, #24
 8008e70:	4b2f      	ldr	r3, [pc, #188]	@ (8008f30 <MX_LWIP_Init+0x22c>)
 8008e72:	785b      	ldrb	r3, [r3, #1]
 8008e74:	041b      	lsls	r3, r3, #16
 8008e76:	431a      	orrs	r2, r3
 8008e78:	4b2d      	ldr	r3, [pc, #180]	@ (8008f30 <MX_LWIP_Init+0x22c>)
 8008e7a:	789b      	ldrb	r3, [r3, #2]
 8008e7c:	021b      	lsls	r3, r3, #8
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	4a2b      	ldr	r2, [pc, #172]	@ (8008f30 <MX_LWIP_Init+0x22c>)
 8008e82:	78d2      	ldrb	r2, [r2, #3]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	061a      	lsls	r2, r3, #24
 8008e88:	4b29      	ldr	r3, [pc, #164]	@ (8008f30 <MX_LWIP_Init+0x22c>)
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	0619      	lsls	r1, r3, #24
 8008e8e:	4b28      	ldr	r3, [pc, #160]	@ (8008f30 <MX_LWIP_Init+0x22c>)
 8008e90:	785b      	ldrb	r3, [r3, #1]
 8008e92:	041b      	lsls	r3, r3, #16
 8008e94:	4319      	orrs	r1, r3
 8008e96:	4b26      	ldr	r3, [pc, #152]	@ (8008f30 <MX_LWIP_Init+0x22c>)
 8008e98:	789b      	ldrb	r3, [r3, #2]
 8008e9a:	021b      	lsls	r3, r3, #8
 8008e9c:	430b      	orrs	r3, r1
 8008e9e:	4924      	ldr	r1, [pc, #144]	@ (8008f30 <MX_LWIP_Init+0x22c>)
 8008ea0:	78c9      	ldrb	r1, [r1, #3]
 8008ea2:	430b      	orrs	r3, r1
 8008ea4:	021b      	lsls	r3, r3, #8
 8008ea6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008eaa:	431a      	orrs	r2, r3
 8008eac:	4b20      	ldr	r3, [pc, #128]	@ (8008f30 <MX_LWIP_Init+0x22c>)
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	0619      	lsls	r1, r3, #24
 8008eb2:	4b1f      	ldr	r3, [pc, #124]	@ (8008f30 <MX_LWIP_Init+0x22c>)
 8008eb4:	785b      	ldrb	r3, [r3, #1]
 8008eb6:	041b      	lsls	r3, r3, #16
 8008eb8:	4319      	orrs	r1, r3
 8008eba:	4b1d      	ldr	r3, [pc, #116]	@ (8008f30 <MX_LWIP_Init+0x22c>)
 8008ebc:	789b      	ldrb	r3, [r3, #2]
 8008ebe:	021b      	lsls	r3, r3, #8
 8008ec0:	430b      	orrs	r3, r1
 8008ec2:	491b      	ldr	r1, [pc, #108]	@ (8008f30 <MX_LWIP_Init+0x22c>)
 8008ec4:	78c9      	ldrb	r1, [r1, #3]
 8008ec6:	430b      	orrs	r3, r1
 8008ec8:	0a1b      	lsrs	r3, r3, #8
 8008eca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008ece:	431a      	orrs	r2, r3
 8008ed0:	4b17      	ldr	r3, [pc, #92]	@ (8008f30 <MX_LWIP_Init+0x22c>)
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	0619      	lsls	r1, r3, #24
 8008ed6:	4b16      	ldr	r3, [pc, #88]	@ (8008f30 <MX_LWIP_Init+0x22c>)
 8008ed8:	785b      	ldrb	r3, [r3, #1]
 8008eda:	041b      	lsls	r3, r3, #16
 8008edc:	4319      	orrs	r1, r3
 8008ede:	4b14      	ldr	r3, [pc, #80]	@ (8008f30 <MX_LWIP_Init+0x22c>)
 8008ee0:	789b      	ldrb	r3, [r3, #2]
 8008ee2:	021b      	lsls	r3, r3, #8
 8008ee4:	430b      	orrs	r3, r1
 8008ee6:	4912      	ldr	r1, [pc, #72]	@ (8008f30 <MX_LWIP_Init+0x22c>)
 8008ee8:	78c9      	ldrb	r1, [r1, #3]
 8008eea:	430b      	orrs	r3, r1
 8008eec:	0e1b      	lsrs	r3, r3, #24
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	4a12      	ldr	r2, [pc, #72]	@ (8008f3c <MX_LWIP_Init+0x238>)
 8008ef2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8008ef4:	4b12      	ldr	r3, [pc, #72]	@ (8008f40 <MX_LWIP_Init+0x23c>)
 8008ef6:	9302      	str	r3, [sp, #8]
 8008ef8:	4b12      	ldr	r3, [pc, #72]	@ (8008f44 <MX_LWIP_Init+0x240>)
 8008efa:	9301      	str	r3, [sp, #4]
 8008efc:	2300      	movs	r3, #0
 8008efe:	9300      	str	r3, [sp, #0]
 8008f00:	4b0e      	ldr	r3, [pc, #56]	@ (8008f3c <MX_LWIP_Init+0x238>)
 8008f02:	4a0d      	ldr	r2, [pc, #52]	@ (8008f38 <MX_LWIP_Init+0x234>)
 8008f04:	490b      	ldr	r1, [pc, #44]	@ (8008f34 <MX_LWIP_Init+0x230>)
 8008f06:	4810      	ldr	r0, [pc, #64]	@ (8008f48 <MX_LWIP_Init+0x244>)
 8008f08:	f001 fa60 	bl	800a3cc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008f0c:	480e      	ldr	r0, [pc, #56]	@ (8008f48 <MX_LWIP_Init+0x244>)
 8008f0e:	f001 fc0f 	bl	800a730 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8008f12:	480d      	ldr	r0, [pc, #52]	@ (8008f48 <MX_LWIP_Init+0x244>)
 8008f14:	f001 fc1c 	bl	800a750 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8008f18:	490c      	ldr	r1, [pc, #48]	@ (8008f4c <MX_LWIP_Init+0x248>)
 8008f1a:	480b      	ldr	r0, [pc, #44]	@ (8008f48 <MX_LWIP_Init+0x244>)
 8008f1c:	f001 fd1a 	bl	800a954 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008f20:	bf00      	nop
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	24000230 	.word	0x24000230
 8008f2c:	24000234 	.word	0x24000234
 8008f30:	24000238 	.word	0x24000238
 8008f34:	24000224 	.word	0x24000224
 8008f38:	24000228 	.word	0x24000228
 8008f3c:	2400022c 	.word	0x2400022c
 8008f40:	08014f69 	.word	0x08014f69
 8008f44:	080092a9 	.word	0x080092a9
 8008f48:	240001f0 	.word	0x240001f0
 8008f4c:	08008fa1 	.word	0x08008fa1

08008f50 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
//#ifdef TAPU_BULU
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8008f58:	f7f8 fb36 	bl	80015c8 <HAL_GetTick>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	4b08      	ldr	r3, [pc, #32]	@ (8008f80 <Ethernet_Link_Periodic_Handle+0x30>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	1ad3      	subs	r3, r2, r3
 8008f64:	2b63      	cmp	r3, #99	@ 0x63
 8008f66:	d907      	bls.n	8008f78 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8008f68:	f7f8 fb2e 	bl	80015c8 <HAL_GetTick>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	4a04      	ldr	r2, [pc, #16]	@ (8008f80 <Ethernet_Link_Periodic_Handle+0x30>)
 8008f70:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fb9c 	bl	80096b0 <ethernet_link_check_state>
//    EthernetLinkTimer = HAL_GetTick();
//    ethernet_link_check_state_allton(netif);
//  }

/* USER CODE END 4_4 */
}
 8008f78:	bf00      	nop
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	240001ec 	.word	0x240001ec

08008f84 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8008f88:	4804      	ldr	r0, [pc, #16]	@ (8008f9c <MX_LWIP_Process+0x18>)
 8008f8a:	f000 f96d 	bl	8009268 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8008f8e:	f008 ff3b 	bl	8011e08 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8008f92:	4802      	ldr	r0, [pc, #8]	@ (8008f9c <MX_LWIP_Process+0x18>)
 8008f94:	f7ff ffdc 	bl	8008f50 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8008f98:	bf00      	nop
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	240001f0 	.word	0x240001f0

08008fa0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8008fa8:	bf00      	nop
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008fc0:	4b51      	ldr	r3, [pc, #324]	@ (8009108 <low_level_init+0x154>)
 8008fc2:	4a52      	ldr	r2, [pc, #328]	@ (800910c <low_level_init+0x158>)
 8008fc4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8008fca:	2380      	movs	r3, #128	@ 0x80
 8008fcc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8008fce:	23e1      	movs	r3, #225	@ 0xe1
 8008fd0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8008fde:	4a4a      	ldr	r2, [pc, #296]	@ (8009108 <low_level_init+0x154>)
 8008fe0:	f107 0308 	add.w	r3, r7, #8
 8008fe4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8008fe6:	4b48      	ldr	r3, [pc, #288]	@ (8009108 <low_level_init+0x154>)
 8008fe8:	2201      	movs	r2, #1
 8008fea:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8008fec:	4b46      	ldr	r3, [pc, #280]	@ (8009108 <low_level_init+0x154>)
 8008fee:	4a48      	ldr	r2, [pc, #288]	@ (8009110 <low_level_init+0x15c>)
 8008ff0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8008ff2:	4b45      	ldr	r3, [pc, #276]	@ (8009108 <low_level_init+0x154>)
 8008ff4:	4a47      	ldr	r2, [pc, #284]	@ (8009114 <low_level_init+0x160>)
 8008ff6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8008ff8:	4b43      	ldr	r3, [pc, #268]	@ (8009108 <low_level_init+0x154>)
 8008ffa:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8008ffe:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009000:	4841      	ldr	r0, [pc, #260]	@ (8009108 <low_level_init+0x154>)
 8009002:	f7f9 f9ed 	bl	80023e0 <HAL_ETH_Init>
 8009006:	4603      	mov	r3, r0
 8009008:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800900a:	2238      	movs	r2, #56	@ 0x38
 800900c:	2100      	movs	r1, #0
 800900e:	4842      	ldr	r0, [pc, #264]	@ (8009118 <low_level_init+0x164>)
 8009010:	f00c fb4a 	bl	80156a8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8009014:	4b40      	ldr	r3, [pc, #256]	@ (8009118 <low_level_init+0x164>)
 8009016:	2221      	movs	r2, #33	@ 0x21
 8009018:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800901a:	4b3f      	ldr	r3, [pc, #252]	@ (8009118 <low_level_init+0x164>)
 800901c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8009020:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8009022:	4b3d      	ldr	r3, [pc, #244]	@ (8009118 <low_level_init+0x164>)
 8009024:	2200      	movs	r2, #0
 8009026:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8009028:	483c      	ldr	r0, [pc, #240]	@ (800911c <low_level_init+0x168>)
 800902a:	f001 f897 	bl	800a15c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2206      	movs	r2, #6
 8009032:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009036:	4b34      	ldr	r3, [pc, #208]	@ (8009108 <low_level_init+0x154>)
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	781a      	ldrb	r2, [r3, #0]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009042:	4b31      	ldr	r3, [pc, #196]	@ (8009108 <low_level_init+0x154>)
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	785a      	ldrb	r2, [r3, #1]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800904e:	4b2e      	ldr	r3, [pc, #184]	@ (8009108 <low_level_init+0x154>)
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	789a      	ldrb	r2, [r3, #2]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800905a:	4b2b      	ldr	r3, [pc, #172]	@ (8009108 <low_level_init+0x154>)
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	78da      	ldrb	r2, [r3, #3]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009066:	4b28      	ldr	r3, [pc, #160]	@ (8009108 <low_level_init+0x154>)
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	791a      	ldrb	r2, [r3, #4]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009072:	4b25      	ldr	r3, [pc, #148]	@ (8009108 <low_level_init+0x154>)
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	795a      	ldrb	r2, [r3, #5]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8009084:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800908c:	f043 030a 	orr.w	r3, r3, #10
 8009090:	b2da      	uxtb	r2, r3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

    /* ALLTON OWN DRIVER INCLUDE */

   DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8009098:	4921      	ldr	r1, [pc, #132]	@ (8009120 <low_level_init+0x16c>)
 800909a:	4822      	ldr	r0, [pc, #136]	@ (8009124 <low_level_init+0x170>)
 800909c:	f7f8 f8bf 	bl	800121e <DP83848_RegisterBusIO>

   if(DP83848_Init(&DP83848) != DP83848_STATUS_OK)
 80090a0:	4820      	ldr	r0, [pc, #128]	@ (8009124 <low_level_init+0x170>)
 80090a2:	f7f8 f8ee 	bl	8001282 <DP83848_Init>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d006      	beq.n	80090ba <low_level_init+0x106>
       {
         netif_set_link_down(netif);
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f001 fc21 	bl	800a8f4 <netif_set_link_down>
         netif_set_down(netif);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f001 fbb8 	bl	800a828 <netif_set_down>
         return;
 80090b8:	e022      	b.n	8009100 <low_level_init+0x14c>
       }

   if (hal_eth_init_status == HAL_OK)
 80090ba:	7bfb      	ldrb	r3, [r7, #15]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d103      	bne.n	80090c8 <low_level_init+0x114>
       {
       /* Get link state */
       ethernet_link_check_state(netif);
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 faf5 	bl	80096b0 <ethernet_link_check_state>
 80090c6:	e001      	b.n	80090cc <low_level_init+0x118>
       }
   else
       {
         Error_Handler();
 80090c8:	f7f7 fcf4 	bl	8000ab4 <Error_Handler>

   /* END ALLTON OWN DRIVER INCLUDE */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80090cc:	4916      	ldr	r1, [pc, #88]	@ (8009128 <low_level_init+0x174>)
 80090ce:	4817      	ldr	r0, [pc, #92]	@ (800912c <low_level_init+0x178>)
 80090d0:	f7f8 f9ab 	bl	800142a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 80090d4:	4815      	ldr	r0, [pc, #84]	@ (800912c <low_level_init+0x178>)
 80090d6:	f7f8 f9da 	bl	800148e <LAN8742_Init>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d006      	beq.n	80090ee <low_level_init+0x13a>
  {
    netif_set_link_down(netif);
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f001 fc07 	bl	800a8f4 <netif_set_link_down>
    netif_set_down(netif);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f001 fb9e 	bl	800a828 <netif_set_down>
    return;
 80090ec:	e008      	b.n	8009100 <low_level_init+0x14c>
  }

  if (hal_eth_init_status == HAL_OK)
 80090ee:	7bfb      	ldrb	r3, [r7, #15]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d103      	bne.n	80090fc <low_level_init+0x148>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 fadb 	bl	80096b0 <ethernet_link_check_state>
 80090fa:	e001      	b.n	8009100 <low_level_init+0x14c>
  }
  else
  {
    Error_Handler();
 80090fc:	f7f7 fcda 	bl	8000ab4 <Error_Handler>




/* USER CODE END LOW_LEVEL_INIT */
}
 8009100:	3710      	adds	r7, #16
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	24000244 	.word	0x24000244
 800910c:	40028000 	.word	0x40028000
 8009110:	30040060 	.word	0x30040060
 8009114:	30040000 	.word	0x30040000
 8009118:	240002f4 	.word	0x240002f4
 800911c:	0801b0f0 	.word	0x0801b0f0
 8009120:	24000024 	.word	0x24000024
 8009124:	2400034c 	.word	0x2400034c
 8009128:	24000010 	.word	0x24000010
 800912c:	2400032c 	.word	0x2400032c

08009130 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b092      	sub	sp, #72	@ 0x48
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800913a:	2300      	movs	r3, #0
 800913c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800913e:	2300      	movs	r3, #0
 8009140:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8009142:	2300      	movs	r3, #0
 8009144:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8009148:	f107 030c 	add.w	r3, r7, #12
 800914c:	2230      	movs	r2, #48	@ 0x30
 800914e:	2100      	movs	r1, #0
 8009150:	4618      	mov	r0, r3
 8009152:	f00c faa9 	bl	80156a8 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009156:	f107 030c 	add.w	r3, r7, #12
 800915a:	2230      	movs	r2, #48	@ 0x30
 800915c:	2100      	movs	r1, #0
 800915e:	4618      	mov	r0, r3
 8009160:	f00c faa2 	bl	80156a8 <memset>

  for(q = p; q != NULL; q = q->next)
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	643b      	str	r3, [r7, #64]	@ 0x40
 8009168:	e045      	b.n	80091f6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800916a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800916c:	2b03      	cmp	r3, #3
 800916e:	d902      	bls.n	8009176 <low_level_output+0x46>
      return ERR_IF;
 8009170:	f06f 030b 	mvn.w	r3, #11
 8009174:	e055      	b.n	8009222 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8009176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009178:	6859      	ldr	r1, [r3, #4]
 800917a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800917c:	4613      	mov	r3, r2
 800917e:	005b      	lsls	r3, r3, #1
 8009180:	4413      	add	r3, r2
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	3348      	adds	r3, #72	@ 0x48
 8009186:	443b      	add	r3, r7
 8009188:	3b3c      	subs	r3, #60	@ 0x3c
 800918a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800918c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800918e:	895b      	ldrh	r3, [r3, #10]
 8009190:	4619      	mov	r1, r3
 8009192:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009194:	4613      	mov	r3, r2
 8009196:	005b      	lsls	r3, r3, #1
 8009198:	4413      	add	r3, r2
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	3348      	adds	r3, #72	@ 0x48
 800919e:	443b      	add	r3, r7
 80091a0:	3b38      	subs	r3, #56	@ 0x38
 80091a2:	6019      	str	r1, [r3, #0]

    if(i>0)
 80091a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d011      	beq.n	80091ce <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80091aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091ac:	1e5a      	subs	r2, r3, #1
 80091ae:	f107 000c 	add.w	r0, r7, #12
 80091b2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80091b4:	460b      	mov	r3, r1
 80091b6:	005b      	lsls	r3, r3, #1
 80091b8:	440b      	add	r3, r1
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	18c1      	adds	r1, r0, r3
 80091be:	4613      	mov	r3, r2
 80091c0:	005b      	lsls	r3, r3, #1
 80091c2:	4413      	add	r3, r2
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	3348      	adds	r3, #72	@ 0x48
 80091c8:	443b      	add	r3, r7
 80091ca:	3b34      	subs	r3, #52	@ 0x34
 80091cc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80091ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d109      	bne.n	80091ea <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80091d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091d8:	4613      	mov	r3, r2
 80091da:	005b      	lsls	r3, r3, #1
 80091dc:	4413      	add	r3, r2
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	3348      	adds	r3, #72	@ 0x48
 80091e2:	443b      	add	r3, r7
 80091e4:	3b34      	subs	r3, #52	@ 0x34
 80091e6:	2200      	movs	r2, #0
 80091e8:	601a      	str	r2, [r3, #0]
    }

    i++;
 80091ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091ec:	3301      	adds	r3, #1
 80091ee:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80091f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80091f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1b6      	bne.n	800916a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	891b      	ldrh	r3, [r3, #8]
 8009200:	461a      	mov	r2, r3
 8009202:	4b0a      	ldr	r3, [pc, #40]	@ (800922c <low_level_output+0xfc>)
 8009204:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8009206:	4a09      	ldr	r2, [pc, #36]	@ (800922c <low_level_output+0xfc>)
 8009208:	f107 030c 	add.w	r3, r7, #12
 800920c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800920e:	4a07      	ldr	r2, [pc, #28]	@ (800922c <low_level_output+0xfc>)
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8009214:	2214      	movs	r2, #20
 8009216:	4905      	ldr	r1, [pc, #20]	@ (800922c <low_level_output+0xfc>)
 8009218:	4805      	ldr	r0, [pc, #20]	@ (8009230 <low_level_output+0x100>)
 800921a:	f7f9 fa91 	bl	8002740 <HAL_ETH_Transmit>

  return errval;
 800921e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8009222:	4618      	mov	r0, r3
 8009224:	3748      	adds	r7, #72	@ 0x48
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	240002f4 	.word	0x240002f4
 8009230:	24000244 	.word	0x24000244

08009234 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800923c:	2300      	movs	r3, #0
 800923e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8009240:	4b07      	ldr	r3, [pc, #28]	@ (8009260 <low_level_input+0x2c>)
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d105      	bne.n	8009254 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8009248:	f107 030c 	add.w	r3, r7, #12
 800924c:	4619      	mov	r1, r3
 800924e:	4805      	ldr	r0, [pc, #20]	@ (8009264 <low_level_input+0x30>)
 8009250:	f7f9 fb0d 	bl	800286e <HAL_ETH_ReadData>
  }

  return p;
 8009254:	68fb      	ldr	r3, [r7, #12]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	24000240 	.word	0x24000240
 8009264:	24000244 	.word	0x24000244

08009268 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009270:	2300      	movs	r3, #0
 8009272:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f7ff ffdd 	bl	8009234 <low_level_input>
 800927a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00a      	beq.n	8009298 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	691b      	ldr	r3, [r3, #16]
 8009286:	6879      	ldr	r1, [r7, #4]
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	4798      	blx	r3
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d002      	beq.n	8009298 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	f001 ff2a 	bl	800b0ec <pbuf_free>
      }
    }
  } while(p!=NULL);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d1ea      	bne.n	8009274 <ethernetif_input+0xc>
}
 800929e:	bf00      	nop
 80092a0:	bf00      	nop
 80092a2:	3710      	adds	r7, #16
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d106      	bne.n	80092c4 <ethernetif_init+0x1c>
 80092b6:	4b0e      	ldr	r3, [pc, #56]	@ (80092f0 <ethernetif_init+0x48>)
 80092b8:	f240 12b9 	movw	r2, #441	@ 0x1b9
 80092bc:	490d      	ldr	r1, [pc, #52]	@ (80092f4 <ethernetif_init+0x4c>)
 80092be:	480e      	ldr	r0, [pc, #56]	@ (80092f8 <ethernetif_init+0x50>)
 80092c0:	f00c f892 	bl	80153e8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2273      	movs	r2, #115	@ 0x73
 80092c8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2274      	movs	r2, #116	@ 0x74
 80092d0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a09      	ldr	r2, [pc, #36]	@ (80092fc <ethernetif_init+0x54>)
 80092d8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	4a08      	ldr	r2, [pc, #32]	@ (8009300 <ethernetif_init+0x58>)
 80092de:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f7ff fe67 	bl	8008fb4 <low_level_init>

  return ERR_OK;
 80092e6:	2300      	movs	r3, #0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3708      	adds	r7, #8
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	08016378 	.word	0x08016378
 80092f4:	08016394 	.word	0x08016394
 80092f8:	080163a4 	.word	0x080163a4
 80092fc:	08012ec9 	.word	0x08012ec9
 8009300:	08009131 	.word	0x08009131

08009304 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8009310:	68f9      	ldr	r1, [r7, #12]
 8009312:	4807      	ldr	r0, [pc, #28]	@ (8009330 <pbuf_free_custom+0x2c>)
 8009314:	f001 f804 	bl	800a320 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8009318:	4b06      	ldr	r3, [pc, #24]	@ (8009334 <pbuf_free_custom+0x30>)
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d102      	bne.n	8009326 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8009320:	4b04      	ldr	r3, [pc, #16]	@ (8009334 <pbuf_free_custom+0x30>)
 8009322:	2200      	movs	r2, #0
 8009324:	701a      	strb	r2, [r3, #0]
  }
}
 8009326:	bf00      	nop
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	0801b0f0 	.word	0x0801b0f0
 8009334:	24000240 	.word	0x24000240

08009338 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800933c:	f7f8 f944 	bl	80015c8 <HAL_GetTick>
 8009340:	4603      	mov	r3, r0
}
 8009342:	4618      	mov	r0, r3
 8009344:	bd80      	pop	{r7, pc}
	...

08009348 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b08e      	sub	sp, #56	@ 0x38
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009350:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009354:	2200      	movs	r2, #0
 8009356:	601a      	str	r2, [r3, #0]
 8009358:	605a      	str	r2, [r3, #4]
 800935a:	609a      	str	r2, [r3, #8]
 800935c:	60da      	str	r2, [r3, #12]
 800935e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a59      	ldr	r2, [pc, #356]	@ (80094cc <HAL_ETH_MspInit+0x184>)
 8009366:	4293      	cmp	r3, r2
 8009368:	f040 80ab 	bne.w	80094c2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800936c:	4b58      	ldr	r3, [pc, #352]	@ (80094d0 <HAL_ETH_MspInit+0x188>)
 800936e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009372:	4a57      	ldr	r2, [pc, #348]	@ (80094d0 <HAL_ETH_MspInit+0x188>)
 8009374:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009378:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800937c:	4b54      	ldr	r3, [pc, #336]	@ (80094d0 <HAL_ETH_MspInit+0x188>)
 800937e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009382:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009386:	623b      	str	r3, [r7, #32]
 8009388:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800938a:	4b51      	ldr	r3, [pc, #324]	@ (80094d0 <HAL_ETH_MspInit+0x188>)
 800938c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009390:	4a4f      	ldr	r2, [pc, #316]	@ (80094d0 <HAL_ETH_MspInit+0x188>)
 8009392:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009396:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800939a:	4b4d      	ldr	r3, [pc, #308]	@ (80094d0 <HAL_ETH_MspInit+0x188>)
 800939c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80093a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80093a4:	61fb      	str	r3, [r7, #28]
 80093a6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80093a8:	4b49      	ldr	r3, [pc, #292]	@ (80094d0 <HAL_ETH_MspInit+0x188>)
 80093aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80093ae:	4a48      	ldr	r2, [pc, #288]	@ (80094d0 <HAL_ETH_MspInit+0x188>)
 80093b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093b4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80093b8:	4b45      	ldr	r3, [pc, #276]	@ (80094d0 <HAL_ETH_MspInit+0x188>)
 80093ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80093be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093c2:	61bb      	str	r3, [r7, #24]
 80093c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80093c6:	4b42      	ldr	r3, [pc, #264]	@ (80094d0 <HAL_ETH_MspInit+0x188>)
 80093c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093cc:	4a40      	ldr	r2, [pc, #256]	@ (80094d0 <HAL_ETH_MspInit+0x188>)
 80093ce:	f043 0304 	orr.w	r3, r3, #4
 80093d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80093d6:	4b3e      	ldr	r3, [pc, #248]	@ (80094d0 <HAL_ETH_MspInit+0x188>)
 80093d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093dc:	f003 0304 	and.w	r3, r3, #4
 80093e0:	617b      	str	r3, [r7, #20]
 80093e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093e4:	4b3a      	ldr	r3, [pc, #232]	@ (80094d0 <HAL_ETH_MspInit+0x188>)
 80093e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093ea:	4a39      	ldr	r2, [pc, #228]	@ (80094d0 <HAL_ETH_MspInit+0x188>)
 80093ec:	f043 0301 	orr.w	r3, r3, #1
 80093f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80093f4:	4b36      	ldr	r3, [pc, #216]	@ (80094d0 <HAL_ETH_MspInit+0x188>)
 80093f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093fa:	f003 0301 	and.w	r3, r3, #1
 80093fe:	613b      	str	r3, [r7, #16]
 8009400:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009402:	4b33      	ldr	r3, [pc, #204]	@ (80094d0 <HAL_ETH_MspInit+0x188>)
 8009404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009408:	4a31      	ldr	r2, [pc, #196]	@ (80094d0 <HAL_ETH_MspInit+0x188>)
 800940a:	f043 0302 	orr.w	r3, r3, #2
 800940e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009412:	4b2f      	ldr	r3, [pc, #188]	@ (80094d0 <HAL_ETH_MspInit+0x188>)
 8009414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009418:	f003 0302 	and.w	r3, r3, #2
 800941c:	60fb      	str	r3, [r7, #12]
 800941e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009420:	4b2b      	ldr	r3, [pc, #172]	@ (80094d0 <HAL_ETH_MspInit+0x188>)
 8009422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009426:	4a2a      	ldr	r2, [pc, #168]	@ (80094d0 <HAL_ETH_MspInit+0x188>)
 8009428:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800942c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009430:	4b27      	ldr	r3, [pc, #156]	@ (80094d0 <HAL_ETH_MspInit+0x188>)
 8009432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800943a:	60bb      	str	r3, [r7, #8]
 800943c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800943e:	2332      	movs	r3, #50	@ 0x32
 8009440:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009442:	2302      	movs	r3, #2
 8009444:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009446:	2300      	movs	r3, #0
 8009448:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800944a:	2303      	movs	r3, #3
 800944c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800944e:	230b      	movs	r3, #11
 8009450:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009452:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009456:	4619      	mov	r1, r3
 8009458:	481e      	ldr	r0, [pc, #120]	@ (80094d4 <HAL_ETH_MspInit+0x18c>)
 800945a:	f7fa fba7 	bl	8003bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800945e:	2386      	movs	r3, #134	@ 0x86
 8009460:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009462:	2302      	movs	r3, #2
 8009464:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009466:	2300      	movs	r3, #0
 8009468:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800946a:	2303      	movs	r3, #3
 800946c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800946e:	230b      	movs	r3, #11
 8009470:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009472:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009476:	4619      	mov	r1, r3
 8009478:	4817      	ldr	r0, [pc, #92]	@ (80094d8 <HAL_ETH_MspInit+0x190>)
 800947a:	f7fa fb97 	bl	8003bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800947e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009482:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009484:	2302      	movs	r3, #2
 8009486:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009488:	2300      	movs	r3, #0
 800948a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800948c:	2303      	movs	r3, #3
 800948e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009490:	230b      	movs	r3, #11
 8009492:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009494:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009498:	4619      	mov	r1, r3
 800949a:	4810      	ldr	r0, [pc, #64]	@ (80094dc <HAL_ETH_MspInit+0x194>)
 800949c:	f7fa fb86 	bl	8003bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80094a0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80094a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094a6:	2302      	movs	r3, #2
 80094a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094aa:	2300      	movs	r3, #0
 80094ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094ae:	2303      	movs	r3, #3
 80094b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80094b2:	230b      	movs	r3, #11
 80094b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80094b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80094ba:	4619      	mov	r1, r3
 80094bc:	4808      	ldr	r0, [pc, #32]	@ (80094e0 <HAL_ETH_MspInit+0x198>)
 80094be:	f7fa fb75 	bl	8003bac <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80094c2:	bf00      	nop
 80094c4:	3738      	adds	r7, #56	@ 0x38
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	40028000 	.word	0x40028000
 80094d0:	58024400 	.word	0x58024400
 80094d4:	58020800 	.word	0x58020800
 80094d8:	58020000 	.word	0x58020000
 80094dc:	58020400 	.word	0x58020400
 80094e0:	58021800 	.word	0x58021800

080094e4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80094e8:	4802      	ldr	r0, [pc, #8]	@ (80094f4 <ETH_PHY_IO_Init+0x10>)
 80094ea:	f7f9 fd8d 	bl	8003008 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80094ee:	2300      	movs	r3, #0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	24000244 	.word	0x24000244

080094f8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80094f8:	b480      	push	{r7}
 80094fa:	af00      	add	r7, sp, #0
  return 0;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	68ba      	ldr	r2, [r7, #8]
 8009518:	68f9      	ldr	r1, [r7, #12]
 800951a:	4807      	ldr	r0, [pc, #28]	@ (8009538 <ETH_PHY_IO_ReadReg+0x30>)
 800951c:	f7f9 fadd 	bl	8002ada <HAL_ETH_ReadPHYRegister>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d002      	beq.n	800952c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8009526:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800952a:	e000      	b.n	800952e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	24000244 	.word	0x24000244

0800953c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	68ba      	ldr	r2, [r7, #8]
 800954c:	68f9      	ldr	r1, [r7, #12]
 800954e:	4807      	ldr	r0, [pc, #28]	@ (800956c <ETH_PHY_IO_WriteReg+0x30>)
 8009550:	f7f9 fb18 	bl	8002b84 <HAL_ETH_WritePHYRegister>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d002      	beq.n	8009560 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800955a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800955e:	e000      	b.n	8009562 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	24000244 	.word	0x24000244

08009570 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009574:	f7f8 f828 	bl	80015c8 <HAL_GetTick>
 8009578:	4603      	mov	r3, r0
}
 800957a:	4618      	mov	r0, r3
 800957c:	bd80      	pop	{r7, pc}
	...

08009580 <HAL_ETH_RxAllocateCallback>:
  }

}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b086      	sub	sp, #24
 8009584:	af02      	add	r7, sp, #8
 8009586:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009588:	4812      	ldr	r0, [pc, #72]	@ (80095d4 <HAL_ETH_RxAllocateCallback+0x54>)
 800958a:	f000 fe5b 	bl	800a244 <memp_malloc_pool>
 800958e:	60f8      	str	r0, [r7, #12]
  if (p)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d014      	beq.n	80095c0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f103 0220 	add.w	r2, r3, #32
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	4a0d      	ldr	r2, [pc, #52]	@ (80095d8 <HAL_ETH_RxAllocateCallback+0x58>)
 80095a4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80095ae:	9201      	str	r2, [sp, #4]
 80095b0:	9300      	str	r3, [sp, #0]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2241      	movs	r2, #65	@ 0x41
 80095b6:	2100      	movs	r1, #0
 80095b8:	2000      	movs	r0, #0
 80095ba:	f001 fbb5 	bl	800ad28 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80095be:	e005      	b.n	80095cc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80095c0:	4b06      	ldr	r3, [pc, #24]	@ (80095dc <HAL_ETH_RxAllocateCallback+0x5c>)
 80095c2:	2201      	movs	r2, #1
 80095c4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	601a      	str	r2, [r3, #0]
}
 80095cc:	bf00      	nop
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	0801b0f0 	.word	0x0801b0f0
 80095d8:	08009305 	.word	0x08009305
 80095dc:	24000240 	.word	0x24000240

080095e0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b08d      	sub	sp, #52	@ 0x34
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	607a      	str	r2, [r7, #4]
 80095ec:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 80095f6:	2300      	movs	r3, #0
 80095f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	3b20      	subs	r3, #32
 80095fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 8009600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009602:	2200      	movs	r2, #0
 8009604:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8009606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009608:	2200      	movs	r2, #0
 800960a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800960c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800960e:	887a      	ldrh	r2, [r7, #2]
 8009610:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8009612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d103      	bne.n	8009622 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800961a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800961c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800961e:	601a      	str	r2, [r3, #0]
 8009620:	e003      	b.n	800962a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8009622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009628:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800962a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800962c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800962e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8009630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009636:	e009      	b.n	800964c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8009638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800963a:	891a      	ldrh	r2, [r3, #8]
 800963c:	887b      	ldrh	r3, [r7, #2]
 800963e:	4413      	add	r3, r2
 8009640:	b29a      	uxth	r2, r3
 8009642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009644:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8009646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800964c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800964e:	2b00      	cmp	r3, #0
 8009650:	d1f2      	bne.n	8009638 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8009652:	887b      	ldrh	r3, [r7, #2]
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	623a      	str	r2, [r7, #32]
 8009658:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	2b00      	cmp	r3, #0
 800965e:	dd1d      	ble.n	800969c <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8009660:	6a3b      	ldr	r3, [r7, #32]
 8009662:	f003 021f 	and.w	r2, r3, #31
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	4413      	add	r3, r2
 800966a:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800966c:	6a3b      	ldr	r3, [r7, #32]
 800966e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8009670:	f3bf 8f4f 	dsb	sy
}
 8009674:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8009676:	4a0d      	ldr	r2, [pc, #52]	@ (80096ac <HAL_ETH_RxLinkCallback+0xcc>)
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	3320      	adds	r3, #32
 8009682:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8009684:	69bb      	ldr	r3, [r7, #24]
 8009686:	3b20      	subs	r3, #32
 8009688:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	2b00      	cmp	r3, #0
 800968e:	dcf2      	bgt.n	8009676 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8009690:	f3bf 8f4f 	dsb	sy
}
 8009694:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009696:	f3bf 8f6f 	isb	sy
}
 800969a:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800969c:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800969e:	bf00      	nop
 80096a0:	3734      	adds	r7, #52	@ 0x34
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop
 80096ac:	e000ed00 	.word	0xe000ed00

080096b0 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b0a0      	sub	sp, #128	@ 0x80
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80096b8:	f107 030c 	add.w	r3, r7, #12
 80096bc:	2264      	movs	r2, #100	@ 0x64
 80096be:	2100      	movs	r1, #0
 80096c0:	4618      	mov	r0, r3
 80096c2:	f00b fff1 	bl	80156a8 <memset>
  int32_t PHYLinkState = 0;
 80096c6:	2300      	movs	r3, #0
 80096c8:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80096ca:	2300      	movs	r3, #0
 80096cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80096ce:	2300      	movs	r3, #0
 80096d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80096d2:	2300      	movs	r3, #0
 80096d4:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 80096d6:	483a      	ldr	r0, [pc, #232]	@ (80097c0 <ethernet_link_check_state+0x110>)
 80096d8:	f7f7 fe20 	bl	800131c <DP83848_GetLinkState>
 80096dc:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80096e4:	089b      	lsrs	r3, r3, #2
 80096e6:	f003 0301 	and.w	r3, r3, #1
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d00c      	beq.n	800970a <ethernet_link_check_state+0x5a>
 80096f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	dc09      	bgt.n	800970a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80096f6:	4833      	ldr	r0, [pc, #204]	@ (80097c4 <ethernet_link_check_state+0x114>)
 80096f8:	f7f8 ffd2 	bl	80026a0 <HAL_ETH_Stop>
    netif_set_down(netif);
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f001 f893 	bl	800a828 <netif_set_down>
    netif_set_link_down(netif);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f001 f8f6 	bl	800a8f4 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8009708:	e055      	b.n	80097b6 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009710:	f003 0304 	and.w	r3, r3, #4
 8009714:	2b00      	cmp	r3, #0
 8009716:	d14e      	bne.n	80097b6 <ethernet_link_check_state+0x106>
 8009718:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800971a:	2b01      	cmp	r3, #1
 800971c:	dd4b      	ble.n	80097b6 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800971e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009720:	3b02      	subs	r3, #2
 8009722:	2b03      	cmp	r3, #3
 8009724:	d82a      	bhi.n	800977c <ethernet_link_check_state+0xcc>
 8009726:	a201      	add	r2, pc, #4	@ (adr r2, 800972c <ethernet_link_check_state+0x7c>)
 8009728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800972c:	0800973d 	.word	0x0800973d
 8009730:	0800974f 	.word	0x0800974f
 8009734:	0800975f 	.word	0x0800975f
 8009738:	0800976f 	.word	0x0800976f
      duplex = ETH_FULLDUPLEX_MODE;
 800973c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009740:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8009742:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009746:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009748:	2301      	movs	r3, #1
 800974a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800974c:	e017      	b.n	800977e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800974e:	2300      	movs	r3, #0
 8009750:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8009752:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009756:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009758:	2301      	movs	r3, #1
 800975a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800975c:	e00f      	b.n	800977e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800975e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009762:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8009764:	2300      	movs	r3, #0
 8009766:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009768:	2301      	movs	r3, #1
 800976a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800976c:	e007      	b.n	800977e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800976e:	2300      	movs	r3, #0
 8009770:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8009772:	2300      	movs	r3, #0
 8009774:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009776:	2301      	movs	r3, #1
 8009778:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800977a:	e000      	b.n	800977e <ethernet_link_check_state+0xce>
      break;
 800977c:	bf00      	nop
    if(linkchanged)
 800977e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009780:	2b00      	cmp	r3, #0
 8009782:	d018      	beq.n	80097b6 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009784:	f107 030c 	add.w	r3, r7, #12
 8009788:	4619      	mov	r1, r3
 800978a:	480e      	ldr	r0, [pc, #56]	@ (80097c4 <ethernet_link_check_state+0x114>)
 800978c:	f7f9 fa4e 	bl	8002c2c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8009790:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009792:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8009794:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009796:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009798:	f107 030c 	add.w	r3, r7, #12
 800979c:	4619      	mov	r1, r3
 800979e:	4809      	ldr	r0, [pc, #36]	@ (80097c4 <ethernet_link_check_state+0x114>)
 80097a0:	f7f9 fc18 	bl	8002fd4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80097a4:	4807      	ldr	r0, [pc, #28]	@ (80097c4 <ethernet_link_check_state+0x114>)
 80097a6:	f7f8 ff19 	bl	80025dc <HAL_ETH_Start>
      netif_set_up(netif);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 ffd0 	bl	800a750 <netif_set_up>
      netif_set_link_up(netif);
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f001 f86b 	bl	800a88c <netif_set_link_up>
}
 80097b6:	bf00      	nop
 80097b8:	3780      	adds	r7, #128	@ 0x80
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	2400034c 	.word	0x2400034c
 80097c4:	24000244 	.word	0x24000244

080097c8 <lwip_strerr>:
 * @param err an lwip internal err_t
 * @return a string representation for err
 */
const char *
lwip_strerr(err_t err)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	4603      	mov	r3, r0
 80097d0:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_strerr))) {
 80097d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	dc04      	bgt.n	80097e4 <lwip_strerr+0x1c>
 80097da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097de:	f113 0f10 	cmn.w	r3, #16
 80097e2:	da01      	bge.n	80097e8 <lwip_strerr+0x20>
    return "Unknown error.";
 80097e4:	4b06      	ldr	r3, [pc, #24]	@ (8009800 <lwip_strerr+0x38>)
 80097e6:	e005      	b.n	80097f4 <lwip_strerr+0x2c>
  }
  return err_strerr[-err];
 80097e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097ec:	425b      	negs	r3, r3
 80097ee:	4a05      	ldr	r2, [pc, #20]	@ (8009804 <lwip_strerr+0x3c>)
 80097f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr
 8009800:	08016508 	.word	0x08016508
 8009804:	24000038 	.word	0x24000038

08009808 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	4603      	mov	r3, r0
 8009810:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009812:	88fb      	ldrh	r3, [r7, #6]
 8009814:	021b      	lsls	r3, r3, #8
 8009816:	b21a      	sxth	r2, r3
 8009818:	88fb      	ldrh	r3, [r7, #6]
 800981a:	0a1b      	lsrs	r3, r3, #8
 800981c:	b29b      	uxth	r3, r3
 800981e:	b21b      	sxth	r3, r3
 8009820:	4313      	orrs	r3, r2
 8009822:	b21b      	sxth	r3, r3
 8009824:	b29b      	uxth	r3, r3
}
 8009826:	4618      	mov	r0, r3
 8009828:	370c      	adds	r7, #12
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr

08009832 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009832:	b480      	push	{r7}
 8009834:	b083      	sub	sp, #12
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	061a      	lsls	r2, r3, #24
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	021b      	lsls	r3, r3, #8
 8009842:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009846:	431a      	orrs	r2, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	0a1b      	lsrs	r3, r3, #8
 800984c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009850:	431a      	orrs	r2, r3
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	0e1b      	lsrs	r3, r3, #24
 8009856:	4313      	orrs	r3, r2
}
 8009858:	4618      	mov	r0, r3
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8009864:	b480      	push	{r7}
 8009866:	b089      	sub	sp, #36	@ 0x24
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8009872:	2300      	movs	r3, #0
 8009874:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8009876:	2300      	movs	r3, #0
 8009878:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800987a:	69fb      	ldr	r3, [r7, #28]
 800987c:	f003 0301 	and.w	r3, r3, #1
 8009880:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00d      	beq.n	80098a4 <lwip_standard_chksum+0x40>
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	dd0a      	ble.n	80098a4 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800988e:	69fa      	ldr	r2, [r7, #28]
 8009890:	1c53      	adds	r3, r2, #1
 8009892:	61fb      	str	r3, [r7, #28]
 8009894:	f107 030e 	add.w	r3, r7, #14
 8009898:	3301      	adds	r3, #1
 800989a:	7812      	ldrb	r2, [r2, #0]
 800989c:	701a      	strb	r2, [r3, #0]
    len--;
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	3b01      	subs	r3, #1
 80098a2:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80098a8:	e00a      	b.n	80098c0 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	1c9a      	adds	r2, r3, #2
 80098ae:	61ba      	str	r2, [r7, #24]
 80098b0:	881b      	ldrh	r3, [r3, #0]
 80098b2:	461a      	mov	r2, r3
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	4413      	add	r3, r2
 80098b8:	617b      	str	r3, [r7, #20]
    len -= 2;
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	3b02      	subs	r3, #2
 80098be:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	dcf1      	bgt.n	80098aa <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	dd04      	ble.n	80098d6 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80098cc:	f107 030e 	add.w	r3, r7, #14
 80098d0:	69ba      	ldr	r2, [r7, #24]
 80098d2:	7812      	ldrb	r2, [r2, #0]
 80098d4:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80098d6:	89fb      	ldrh	r3, [r7, #14]
 80098d8:	461a      	mov	r2, r3
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	4413      	add	r3, r2
 80098de:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	0c1a      	lsrs	r2, r3, #16
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	4413      	add	r3, r2
 80098ea:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	0c1a      	lsrs	r2, r3, #16
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	4413      	add	r3, r2
 80098f6:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d007      	beq.n	800990e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	021b      	lsls	r3, r3, #8
 8009902:	b29a      	uxth	r2, r3
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	0a1b      	lsrs	r3, r3, #8
 8009908:	b2db      	uxtb	r3, r3
 800990a:	4313      	orrs	r3, r2
 800990c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	b29b      	uxth	r3, r3
}
 8009912:	4618      	mov	r0, r3
 8009914:	3724      	adds	r7, #36	@ 0x24
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr

0800991e <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b082      	sub	sp, #8
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
 8009926:	460b      	mov	r3, r1
 8009928:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800992a:	887b      	ldrh	r3, [r7, #2]
 800992c:	4619      	mov	r1, r3
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f7ff ff98 	bl	8009864 <lwip_standard_chksum>
 8009934:	4603      	mov	r3, r0
 8009936:	43db      	mvns	r3, r3
 8009938:	b29b      	uxth	r3, r3
}
 800993a:	4618      	mov	r0, r3
 800993c:	3708      	adds	r7, #8
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b086      	sub	sp, #24
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800994a:	2300      	movs	r3, #0
 800994c:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800994e:	2300      	movs	r3, #0
 8009950:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	613b      	str	r3, [r7, #16]
 8009956:	e02b      	b.n	80099b0 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	685a      	ldr	r2, [r3, #4]
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	895b      	ldrh	r3, [r3, #10]
 8009960:	4619      	mov	r1, r3
 8009962:	4610      	mov	r0, r2
 8009964:	f7ff ff7e 	bl	8009864 <lwip_standard_chksum>
 8009968:	4603      	mov	r3, r0
 800996a:	461a      	mov	r2, r3
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	4413      	add	r3, r2
 8009970:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	0c1a      	lsrs	r2, r3, #16
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	b29b      	uxth	r3, r3
 800997a:	4413      	add	r3, r2
 800997c:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	895b      	ldrh	r3, [r3, #10]
 8009982:	f003 0301 	and.w	r3, r3, #1
 8009986:	b29b      	uxth	r3, r3
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00e      	beq.n	80099aa <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2b00      	cmp	r3, #0
 8009990:	bf0c      	ite	eq
 8009992:	2301      	moveq	r3, #1
 8009994:	2300      	movne	r3, #0
 8009996:	b2db      	uxtb	r3, r3
 8009998:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	021b      	lsls	r3, r3, #8
 800999e:	b29a      	uxth	r2, r3
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	0a1b      	lsrs	r3, r3, #8
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	4313      	orrs	r3, r2
 80099a8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	613b      	str	r3, [r7, #16]
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1d0      	bne.n	8009958 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d007      	beq.n	80099cc <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	021b      	lsls	r3, r3, #8
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	0a1b      	lsrs	r3, r3, #8
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	4313      	orrs	r3, r2
 80099ca:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	43db      	mvns	r3, r3
 80099d2:	b29b      	uxth	r3, r3
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3718      	adds	r7, #24
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80099e2:	2300      	movs	r3, #0
 80099e4:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80099e6:	f000 f8d9 	bl	8009b9c <mem_init>
  memp_init();
 80099ea:	f000 fbe7 	bl	800a1bc <memp_init>
  pbuf_init();
  netif_init();
 80099ee:	f000 fce5 	bl	800a3bc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80099f2:	f008 fa4b 	bl	8011e8c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80099f6:	f001 fe2b 	bl	800b650 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80099fa:	f008 f9b3 	bl	8011d64 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80099fe:	bf00      	nop
 8009a00:	3708      	adds	r7, #8
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
	...

08009a08 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	4603      	mov	r3, r0
 8009a10:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009a12:	4b05      	ldr	r3, [pc, #20]	@ (8009a28 <ptr_to_mem+0x20>)
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	88fb      	ldrh	r3, [r7, #6]
 8009a18:	4413      	add	r3, r2
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	370c      	adds	r7, #12
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop
 8009a28:	24000384 	.word	0x24000384

08009a2c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009a34:	4b05      	ldr	r3, [pc, #20]	@ (8009a4c <mem_to_ptr+0x20>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	1ad3      	subs	r3, r2, r3
 8009a3c:	b29b      	uxth	r3, r3
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	370c      	adds	r7, #12
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop
 8009a4c:	24000384 	.word	0x24000384

08009a50 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009a50:	b590      	push	{r4, r7, lr}
 8009a52:	b085      	sub	sp, #20
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009a58:	4b47      	ldr	r3, [pc, #284]	@ (8009b78 <plug_holes+0x128>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d206      	bcs.n	8009a70 <plug_holes+0x20>
 8009a62:	4b46      	ldr	r3, [pc, #280]	@ (8009b7c <plug_holes+0x12c>)
 8009a64:	f240 12df 	movw	r2, #479	@ 0x1df
 8009a68:	4945      	ldr	r1, [pc, #276]	@ (8009b80 <plug_holes+0x130>)
 8009a6a:	4846      	ldr	r0, [pc, #280]	@ (8009b84 <plug_holes+0x134>)
 8009a6c:	f00b fcbc 	bl	80153e8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009a70:	4b45      	ldr	r3, [pc, #276]	@ (8009b88 <plug_holes+0x138>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	687a      	ldr	r2, [r7, #4]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d306      	bcc.n	8009a88 <plug_holes+0x38>
 8009a7a:	4b40      	ldr	r3, [pc, #256]	@ (8009b7c <plug_holes+0x12c>)
 8009a7c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8009a80:	4942      	ldr	r1, [pc, #264]	@ (8009b8c <plug_holes+0x13c>)
 8009a82:	4840      	ldr	r0, [pc, #256]	@ (8009b84 <plug_holes+0x134>)
 8009a84:	f00b fcb0 	bl	80153e8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	791b      	ldrb	r3, [r3, #4]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d006      	beq.n	8009a9e <plug_holes+0x4e>
 8009a90:	4b3a      	ldr	r3, [pc, #232]	@ (8009b7c <plug_holes+0x12c>)
 8009a92:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8009a96:	493e      	ldr	r1, [pc, #248]	@ (8009b90 <plug_holes+0x140>)
 8009a98:	483a      	ldr	r0, [pc, #232]	@ (8009b84 <plug_holes+0x134>)
 8009a9a:	f00b fca5 	bl	80153e8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	881b      	ldrh	r3, [r3, #0]
 8009aa2:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d906      	bls.n	8009ab8 <plug_holes+0x68>
 8009aaa:	4b34      	ldr	r3, [pc, #208]	@ (8009b7c <plug_holes+0x12c>)
 8009aac:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8009ab0:	4938      	ldr	r1, [pc, #224]	@ (8009b94 <plug_holes+0x144>)
 8009ab2:	4834      	ldr	r0, [pc, #208]	@ (8009b84 <plug_holes+0x134>)
 8009ab4:	f00b fc98 	bl	80153e8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	881b      	ldrh	r3, [r3, #0]
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7ff ffa3 	bl	8009a08 <ptr_to_mem>
 8009ac2:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d025      	beq.n	8009b18 <plug_holes+0xc8>
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	791b      	ldrb	r3, [r3, #4]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d121      	bne.n	8009b18 <plug_holes+0xc8>
 8009ad4:	4b2c      	ldr	r3, [pc, #176]	@ (8009b88 <plug_holes+0x138>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d01c      	beq.n	8009b18 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009ade:	4b2e      	ldr	r3, [pc, #184]	@ (8009b98 <plug_holes+0x148>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	68fa      	ldr	r2, [r7, #12]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d102      	bne.n	8009aee <plug_holes+0x9e>
      lfree = mem;
 8009ae8:	4a2b      	ldr	r2, [pc, #172]	@ (8009b98 <plug_holes+0x148>)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	881a      	ldrh	r2, [r3, #0]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	881b      	ldrh	r3, [r3, #0]
 8009afa:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d00a      	beq.n	8009b18 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	881b      	ldrh	r3, [r3, #0]
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7ff ff7e 	bl	8009a08 <ptr_to_mem>
 8009b0c:	4604      	mov	r4, r0
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f7ff ff8c 	bl	8009a2c <mem_to_ptr>
 8009b14:	4603      	mov	r3, r0
 8009b16:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	885b      	ldrh	r3, [r3, #2]
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7ff ff73 	bl	8009a08 <ptr_to_mem>
 8009b22:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009b24:	68ba      	ldr	r2, [r7, #8]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d020      	beq.n	8009b6e <plug_holes+0x11e>
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	791b      	ldrb	r3, [r3, #4]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d11c      	bne.n	8009b6e <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009b34:	4b18      	ldr	r3, [pc, #96]	@ (8009b98 <plug_holes+0x148>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d102      	bne.n	8009b44 <plug_holes+0xf4>
      lfree = pmem;
 8009b3e:	4a16      	ldr	r2, [pc, #88]	@ (8009b98 <plug_holes+0x148>)
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	881a      	ldrh	r2, [r3, #0]
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	881b      	ldrh	r3, [r3, #0]
 8009b50:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d00a      	beq.n	8009b6e <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	881b      	ldrh	r3, [r3, #0]
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f7ff ff53 	bl	8009a08 <ptr_to_mem>
 8009b62:	4604      	mov	r4, r0
 8009b64:	68b8      	ldr	r0, [r7, #8]
 8009b66:	f7ff ff61 	bl	8009a2c <mem_to_ptr>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8009b6e:	bf00      	nop
 8009b70:	3714      	adds	r7, #20
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd90      	pop	{r4, r7, pc}
 8009b76:	bf00      	nop
 8009b78:	24000384 	.word	0x24000384
 8009b7c:	08016518 	.word	0x08016518
 8009b80:	08016548 	.word	0x08016548
 8009b84:	08016560 	.word	0x08016560
 8009b88:	24000388 	.word	0x24000388
 8009b8c:	08016588 	.word	0x08016588
 8009b90:	080165a4 	.word	0x080165a4
 8009b94:	080165c0 	.word	0x080165c0
 8009b98:	2400038c 	.word	0x2400038c

08009b9c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009ba2:	4b16      	ldr	r3, [pc, #88]	@ (8009bfc <mem_init+0x60>)
 8009ba4:	4a16      	ldr	r2, [pc, #88]	@ (8009c00 <mem_init+0x64>)
 8009ba6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009ba8:	4b14      	ldr	r3, [pc, #80]	@ (8009bfc <mem_init+0x60>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8009bb4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009bc2:	f643 70e8 	movw	r0, #16360	@ 0x3fe8
 8009bc6:	f7ff ff1f 	bl	8009a08 <ptr_to_mem>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8009c04 <mem_init+0x68>)
 8009bce:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8009c04 <mem_init+0x68>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8009bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8009c04 <mem_init+0x68>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8009be0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8009be2:	4b08      	ldr	r3, [pc, #32]	@ (8009c04 <mem_init+0x68>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8009bea:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009bec:	4b03      	ldr	r3, [pc, #12]	@ (8009bfc <mem_init+0x60>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a05      	ldr	r2, [pc, #20]	@ (8009c08 <mem_init+0x6c>)
 8009bf2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8009bf4:	bf00      	nop
 8009bf6:	3708      	adds	r7, #8
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	24000384 	.word	0x24000384
 8009c00:	30020000 	.word	0x30020000
 8009c04:	24000388 	.word	0x24000388
 8009c08:	2400038c 	.word	0x2400038c

08009c0c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b086      	sub	sp, #24
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f7ff ff09 	bl	8009a2c <mem_to_ptr>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	881b      	ldrh	r3, [r3, #0]
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7ff fef0 	bl	8009a08 <ptr_to_mem>
 8009c28:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	885b      	ldrh	r3, [r3, #2]
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f7ff feea 	bl	8009a08 <ptr_to_mem>
 8009c34:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	881b      	ldrh	r3, [r3, #0]
 8009c3a:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d819      	bhi.n	8009c76 <mem_link_valid+0x6a>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	885b      	ldrh	r3, [r3, #2]
 8009c46:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d813      	bhi.n	8009c76 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009c52:	8afa      	ldrh	r2, [r7, #22]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d004      	beq.n	8009c62 <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	881b      	ldrh	r3, [r3, #0]
 8009c5c:	8afa      	ldrh	r2, [r7, #22]
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d109      	bne.n	8009c76 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009c62:	4b08      	ldr	r3, [pc, #32]	@ (8009c84 <mem_link_valid+0x78>)
 8009c64:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009c66:	693a      	ldr	r2, [r7, #16]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d006      	beq.n	8009c7a <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	885b      	ldrh	r3, [r3, #2]
 8009c70:	8afa      	ldrh	r2, [r7, #22]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d001      	beq.n	8009c7a <mem_link_valid+0x6e>
    return 0;
 8009c76:	2300      	movs	r3, #0
 8009c78:	e000      	b.n	8009c7c <mem_link_valid+0x70>
  }
  return 1;
 8009c7a:	2301      	movs	r3, #1
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3718      	adds	r7, #24
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	24000388 	.word	0x24000388

08009c88 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d04c      	beq.n	8009d30 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f003 0303 	and.w	r3, r3, #3
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d007      	beq.n	8009cb0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009ca0:	4b25      	ldr	r3, [pc, #148]	@ (8009d38 <mem_free+0xb0>)
 8009ca2:	f240 2273 	movw	r2, #627	@ 0x273
 8009ca6:	4925      	ldr	r1, [pc, #148]	@ (8009d3c <mem_free+0xb4>)
 8009ca8:	4825      	ldr	r0, [pc, #148]	@ (8009d40 <mem_free+0xb8>)
 8009caa:	f00b fb9d 	bl	80153e8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009cae:	e040      	b.n	8009d32 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	3b08      	subs	r3, #8
 8009cb4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009cb6:	4b23      	ldr	r3, [pc, #140]	@ (8009d44 <mem_free+0xbc>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d306      	bcc.n	8009cce <mem_free+0x46>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f103 020c 	add.w	r2, r3, #12
 8009cc6:	4b20      	ldr	r3, [pc, #128]	@ (8009d48 <mem_free+0xc0>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d907      	bls.n	8009cde <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009cce:	4b1a      	ldr	r3, [pc, #104]	@ (8009d38 <mem_free+0xb0>)
 8009cd0:	f240 227f 	movw	r2, #639	@ 0x27f
 8009cd4:	491d      	ldr	r1, [pc, #116]	@ (8009d4c <mem_free+0xc4>)
 8009cd6:	481a      	ldr	r0, [pc, #104]	@ (8009d40 <mem_free+0xb8>)
 8009cd8:	f00b fb86 	bl	80153e8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009cdc:	e029      	b.n	8009d32 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	791b      	ldrb	r3, [r3, #4]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d107      	bne.n	8009cf6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009ce6:	4b14      	ldr	r3, [pc, #80]	@ (8009d38 <mem_free+0xb0>)
 8009ce8:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8009cec:	4918      	ldr	r1, [pc, #96]	@ (8009d50 <mem_free+0xc8>)
 8009cee:	4814      	ldr	r0, [pc, #80]	@ (8009d40 <mem_free+0xb8>)
 8009cf0:	f00b fb7a 	bl	80153e8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009cf4:	e01d      	b.n	8009d32 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	f7ff ff88 	bl	8009c0c <mem_link_valid>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d107      	bne.n	8009d12 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009d02:	4b0d      	ldr	r3, [pc, #52]	@ (8009d38 <mem_free+0xb0>)
 8009d04:	f240 2295 	movw	r2, #661	@ 0x295
 8009d08:	4912      	ldr	r1, [pc, #72]	@ (8009d54 <mem_free+0xcc>)
 8009d0a:	480d      	ldr	r0, [pc, #52]	@ (8009d40 <mem_free+0xb8>)
 8009d0c:	f00b fb6c 	bl	80153e8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009d10:	e00f      	b.n	8009d32 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2200      	movs	r2, #0
 8009d16:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8009d18:	4b0f      	ldr	r3, [pc, #60]	@ (8009d58 <mem_free+0xd0>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d202      	bcs.n	8009d28 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009d22:	4a0d      	ldr	r2, [pc, #52]	@ (8009d58 <mem_free+0xd0>)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8009d28:	68f8      	ldr	r0, [r7, #12]
 8009d2a:	f7ff fe91 	bl	8009a50 <plug_holes>
 8009d2e:	e000      	b.n	8009d32 <mem_free+0xaa>
    return;
 8009d30:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8009d32:	3710      	adds	r7, #16
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	08016518 	.word	0x08016518
 8009d3c:	080165ec 	.word	0x080165ec
 8009d40:	08016560 	.word	0x08016560
 8009d44:	24000384 	.word	0x24000384
 8009d48:	24000388 	.word	0x24000388
 8009d4c:	08016610 	.word	0x08016610
 8009d50:	0801662c 	.word	0x0801662c
 8009d54:	08016654 	.word	0x08016654
 8009d58:	2400038c 	.word	0x2400038c

08009d5c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b088      	sub	sp, #32
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	460b      	mov	r3, r1
 8009d66:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009d68:	887b      	ldrh	r3, [r7, #2]
 8009d6a:	3303      	adds	r3, #3
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	f023 0303 	bic.w	r3, r3, #3
 8009d72:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8009d74:	8bfb      	ldrh	r3, [r7, #30]
 8009d76:	2b0b      	cmp	r3, #11
 8009d78:	d801      	bhi.n	8009d7e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8009d7a:	230c      	movs	r3, #12
 8009d7c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8009d7e:	8bfb      	ldrh	r3, [r7, #30]
 8009d80:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d803      	bhi.n	8009d90 <mem_trim+0x34>
 8009d88:	8bfa      	ldrh	r2, [r7, #30]
 8009d8a:	887b      	ldrh	r3, [r7, #2]
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d201      	bcs.n	8009d94 <mem_trim+0x38>
    return NULL;
 8009d90:	2300      	movs	r3, #0
 8009d92:	e0d0      	b.n	8009f36 <mem_trim+0x1da>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009d94:	4b6a      	ldr	r3, [pc, #424]	@ (8009f40 <mem_trim+0x1e4>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d304      	bcc.n	8009da8 <mem_trim+0x4c>
 8009d9e:	4b69      	ldr	r3, [pc, #420]	@ (8009f44 <mem_trim+0x1e8>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d306      	bcc.n	8009db6 <mem_trim+0x5a>
 8009da8:	4b67      	ldr	r3, [pc, #412]	@ (8009f48 <mem_trim+0x1ec>)
 8009daa:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8009dae:	4967      	ldr	r1, [pc, #412]	@ (8009f4c <mem_trim+0x1f0>)
 8009db0:	4867      	ldr	r0, [pc, #412]	@ (8009f50 <mem_trim+0x1f4>)
 8009db2:	f00b fb19 	bl	80153e8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009db6:	4b62      	ldr	r3, [pc, #392]	@ (8009f40 <mem_trim+0x1e4>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d304      	bcc.n	8009dca <mem_trim+0x6e>
 8009dc0:	4b60      	ldr	r3, [pc, #384]	@ (8009f44 <mem_trim+0x1e8>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d301      	bcc.n	8009dce <mem_trim+0x72>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	e0b3      	b.n	8009f36 <mem_trim+0x1da>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	3b08      	subs	r3, #8
 8009dd2:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8009dd4:	69b8      	ldr	r0, [r7, #24]
 8009dd6:	f7ff fe29 	bl	8009a2c <mem_to_ptr>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	881a      	ldrh	r2, [r3, #0]
 8009de2:	8afb      	ldrh	r3, [r7, #22]
 8009de4:	1ad3      	subs	r3, r2, r3
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	3b08      	subs	r3, #8
 8009dea:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009dec:	8bfa      	ldrh	r2, [r7, #30]
 8009dee:	8abb      	ldrh	r3, [r7, #20]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d906      	bls.n	8009e02 <mem_trim+0xa6>
 8009df4:	4b54      	ldr	r3, [pc, #336]	@ (8009f48 <mem_trim+0x1ec>)
 8009df6:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8009dfa:	4956      	ldr	r1, [pc, #344]	@ (8009f54 <mem_trim+0x1f8>)
 8009dfc:	4854      	ldr	r0, [pc, #336]	@ (8009f50 <mem_trim+0x1f4>)
 8009dfe:	f00b faf3 	bl	80153e8 <iprintf>
  if (newsize > size) {
 8009e02:	8bfa      	ldrh	r2, [r7, #30]
 8009e04:	8abb      	ldrh	r3, [r7, #20]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d901      	bls.n	8009e0e <mem_trim+0xb2>
    /* not supported */
    return NULL;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	e093      	b.n	8009f36 <mem_trim+0x1da>
  }
  if (newsize == size) {
 8009e0e:	8bfa      	ldrh	r2, [r7, #30]
 8009e10:	8abb      	ldrh	r3, [r7, #20]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d101      	bne.n	8009e1a <mem_trim+0xbe>
    /* No change in size, simply return */
    return rmem;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	e08d      	b.n	8009f36 <mem_trim+0x1da>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8009e1a:	69bb      	ldr	r3, [r7, #24]
 8009e1c:	881b      	ldrh	r3, [r3, #0]
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7ff fdf2 	bl	8009a08 <ptr_to_mem>
 8009e24:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	791b      	ldrb	r3, [r3, #4]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d141      	bne.n	8009eb2 <mem_trim+0x156>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	881b      	ldrh	r3, [r3, #0]
 8009e32:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d106      	bne.n	8009e48 <mem_trim+0xec>
 8009e3a:	4b43      	ldr	r3, [pc, #268]	@ (8009f48 <mem_trim+0x1ec>)
 8009e3c:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8009e40:	4945      	ldr	r1, [pc, #276]	@ (8009f58 <mem_trim+0x1fc>)
 8009e42:	4843      	ldr	r0, [pc, #268]	@ (8009f50 <mem_trim+0x1f4>)
 8009e44:	f00b fad0 	bl	80153e8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	881b      	ldrh	r3, [r3, #0]
 8009e4c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009e4e:	8afa      	ldrh	r2, [r7, #22]
 8009e50:	8bfb      	ldrh	r3, [r7, #30]
 8009e52:	4413      	add	r3, r2
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	3308      	adds	r3, #8
 8009e58:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8009e5a:	4b40      	ldr	r3, [pc, #256]	@ (8009f5c <mem_trim+0x200>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	693a      	ldr	r2, [r7, #16]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d106      	bne.n	8009e72 <mem_trim+0x116>
      lfree = ptr_to_mem(ptr2);
 8009e64:	89fb      	ldrh	r3, [r7, #14]
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7ff fdce 	bl	8009a08 <ptr_to_mem>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	4a3b      	ldr	r2, [pc, #236]	@ (8009f5c <mem_trim+0x200>)
 8009e70:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8009e72:	89fb      	ldrh	r3, [r7, #14]
 8009e74:	4618      	mov	r0, r3
 8009e76:	f7ff fdc7 	bl	8009a08 <ptr_to_mem>
 8009e7a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	89ba      	ldrh	r2, [r7, #12]
 8009e86:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	8afa      	ldrh	r2, [r7, #22]
 8009e8c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	89fa      	ldrh	r2, [r7, #14]
 8009e92:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	881b      	ldrh	r3, [r3, #0]
 8009e98:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d049      	beq.n	8009f34 <mem_trim+0x1d8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	881b      	ldrh	r3, [r3, #0]
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7ff fdaf 	bl	8009a08 <ptr_to_mem>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	89fb      	ldrh	r3, [r7, #14]
 8009eae:	8053      	strh	r3, [r2, #2]
 8009eb0:	e040      	b.n	8009f34 <mem_trim+0x1d8>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009eb2:	8bfb      	ldrh	r3, [r7, #30]
 8009eb4:	f103 0214 	add.w	r2, r3, #20
 8009eb8:	8abb      	ldrh	r3, [r7, #20]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d83a      	bhi.n	8009f34 <mem_trim+0x1d8>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009ebe:	8afa      	ldrh	r2, [r7, #22]
 8009ec0:	8bfb      	ldrh	r3, [r7, #30]
 8009ec2:	4413      	add	r3, r2
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	3308      	adds	r3, #8
 8009ec8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	881b      	ldrh	r3, [r3, #0]
 8009ece:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d106      	bne.n	8009ee4 <mem_trim+0x188>
 8009ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8009f48 <mem_trim+0x1ec>)
 8009ed8:	f240 3216 	movw	r2, #790	@ 0x316
 8009edc:	491e      	ldr	r1, [pc, #120]	@ (8009f58 <mem_trim+0x1fc>)
 8009ede:	481c      	ldr	r0, [pc, #112]	@ (8009f50 <mem_trim+0x1f4>)
 8009ee0:	f00b fa82 	bl	80153e8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8009ee4:	89fb      	ldrh	r3, [r7, #14]
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7ff fd8e 	bl	8009a08 <ptr_to_mem>
 8009eec:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8009eee:	4b1b      	ldr	r3, [pc, #108]	@ (8009f5c <mem_trim+0x200>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	693a      	ldr	r2, [r7, #16]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d202      	bcs.n	8009efe <mem_trim+0x1a2>
      lfree = mem2;
 8009ef8:	4a18      	ldr	r2, [pc, #96]	@ (8009f5c <mem_trim+0x200>)
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	2200      	movs	r2, #0
 8009f02:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	881a      	ldrh	r2, [r3, #0]
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	8afa      	ldrh	r2, [r7, #22]
 8009f10:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009f12:	69bb      	ldr	r3, [r7, #24]
 8009f14:	89fa      	ldrh	r2, [r7, #14]
 8009f16:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	881b      	ldrh	r3, [r3, #0]
 8009f1c:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d007      	beq.n	8009f34 <mem_trim+0x1d8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	881b      	ldrh	r3, [r3, #0]
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f7ff fd6d 	bl	8009a08 <ptr_to_mem>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	89fb      	ldrh	r3, [r7, #14]
 8009f32:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8009f34:	687b      	ldr	r3, [r7, #4]
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3720      	adds	r7, #32
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	24000384 	.word	0x24000384
 8009f44:	24000388 	.word	0x24000388
 8009f48:	08016518 	.word	0x08016518
 8009f4c:	08016688 	.word	0x08016688
 8009f50:	08016560 	.word	0x08016560
 8009f54:	080166a0 	.word	0x080166a0
 8009f58:	080166c0 	.word	0x080166c0
 8009f5c:	2400038c 	.word	0x2400038c

08009f60 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b088      	sub	sp, #32
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	4603      	mov	r3, r0
 8009f68:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009f6a:	88fb      	ldrh	r3, [r7, #6]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d101      	bne.n	8009f74 <mem_malloc+0x14>
    return NULL;
 8009f70:	2300      	movs	r3, #0
 8009f72:	e0dd      	b.n	800a130 <mem_malloc+0x1d0>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009f74:	88fb      	ldrh	r3, [r7, #6]
 8009f76:	3303      	adds	r3, #3
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	f023 0303 	bic.w	r3, r3, #3
 8009f7e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8009f80:	8bbb      	ldrh	r3, [r7, #28]
 8009f82:	2b0b      	cmp	r3, #11
 8009f84:	d801      	bhi.n	8009f8a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8009f86:	230c      	movs	r3, #12
 8009f88:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009f8a:	8bbb      	ldrh	r3, [r7, #28]
 8009f8c:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d803      	bhi.n	8009f9c <mem_malloc+0x3c>
 8009f94:	8bba      	ldrh	r2, [r7, #28]
 8009f96:	88fb      	ldrh	r3, [r7, #6]
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d201      	bcs.n	8009fa0 <mem_malloc+0x40>
    return NULL;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	e0c7      	b.n	800a130 <mem_malloc+0x1d0>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009fa0:	4b65      	ldr	r3, [pc, #404]	@ (800a138 <mem_malloc+0x1d8>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f7ff fd41 	bl	8009a2c <mem_to_ptr>
 8009faa:	4603      	mov	r3, r0
 8009fac:	83fb      	strh	r3, [r7, #30]
 8009fae:	e0b6      	b.n	800a11e <mem_malloc+0x1be>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8009fb0:	8bfb      	ldrh	r3, [r7, #30]
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7ff fd28 	bl	8009a08 <ptr_to_mem>
 8009fb8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	791b      	ldrb	r3, [r3, #4]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	f040 80a6 	bne.w	800a110 <mem_malloc+0x1b0>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	881b      	ldrh	r3, [r3, #0]
 8009fc8:	461a      	mov	r2, r3
 8009fca:	8bfb      	ldrh	r3, [r7, #30]
 8009fcc:	1ad3      	subs	r3, r2, r3
 8009fce:	f1a3 0208 	sub.w	r2, r3, #8
 8009fd2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	f0c0 809b 	bcc.w	800a110 <mem_malloc+0x1b0>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	881b      	ldrh	r3, [r3, #0]
 8009fde:	461a      	mov	r2, r3
 8009fe0:	8bfb      	ldrh	r3, [r7, #30]
 8009fe2:	1ad3      	subs	r3, r2, r3
 8009fe4:	f1a3 0208 	sub.w	r2, r3, #8
 8009fe8:	8bbb      	ldrh	r3, [r7, #28]
 8009fea:	3314      	adds	r3, #20
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d335      	bcc.n	800a05c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009ff0:	8bfa      	ldrh	r2, [r7, #30]
 8009ff2:	8bbb      	ldrh	r3, [r7, #28]
 8009ff4:	4413      	add	r3, r2
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	3308      	adds	r3, #8
 8009ffa:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009ffc:	8a7b      	ldrh	r3, [r7, #18]
 8009ffe:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800a002:	4293      	cmp	r3, r2
 800a004:	d106      	bne.n	800a014 <mem_malloc+0xb4>
 800a006:	4b4d      	ldr	r3, [pc, #308]	@ (800a13c <mem_malloc+0x1dc>)
 800a008:	f240 3287 	movw	r2, #903	@ 0x387
 800a00c:	494c      	ldr	r1, [pc, #304]	@ (800a140 <mem_malloc+0x1e0>)
 800a00e:	484d      	ldr	r0, [pc, #308]	@ (800a144 <mem_malloc+0x1e4>)
 800a010:	f00b f9ea 	bl	80153e8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a014:	8a7b      	ldrh	r3, [r7, #18]
 800a016:	4618      	mov	r0, r3
 800a018:	f7ff fcf6 	bl	8009a08 <ptr_to_mem>
 800a01c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2200      	movs	r2, #0
 800a022:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	881a      	ldrh	r2, [r3, #0]
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	8bfa      	ldrh	r2, [r7, #30]
 800a030:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	8a7a      	ldrh	r2, [r7, #18]
 800a036:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	2201      	movs	r2, #1
 800a03c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	881b      	ldrh	r3, [r3, #0]
 800a042:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800a046:	4293      	cmp	r3, r2
 800a048:	d00b      	beq.n	800a062 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	881b      	ldrh	r3, [r3, #0]
 800a04e:	4618      	mov	r0, r3
 800a050:	f7ff fcda 	bl	8009a08 <ptr_to_mem>
 800a054:	4602      	mov	r2, r0
 800a056:	8a7b      	ldrh	r3, [r7, #18]
 800a058:	8053      	strh	r3, [r2, #2]
 800a05a:	e002      	b.n	800a062 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	2201      	movs	r2, #1
 800a060:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a062:	4b35      	ldr	r3, [pc, #212]	@ (800a138 <mem_malloc+0x1d8>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	697a      	ldr	r2, [r7, #20]
 800a068:	429a      	cmp	r2, r3
 800a06a:	d127      	bne.n	800a0bc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800a06c:	4b32      	ldr	r3, [pc, #200]	@ (800a138 <mem_malloc+0x1d8>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a072:	e005      	b.n	800a080 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	881b      	ldrh	r3, [r3, #0]
 800a078:	4618      	mov	r0, r3
 800a07a:	f7ff fcc5 	bl	8009a08 <ptr_to_mem>
 800a07e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	791b      	ldrb	r3, [r3, #4]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d004      	beq.n	800a092 <mem_malloc+0x132>
 800a088:	4b2f      	ldr	r3, [pc, #188]	@ (800a148 <mem_malloc+0x1e8>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	69ba      	ldr	r2, [r7, #24]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d1f0      	bne.n	800a074 <mem_malloc+0x114>
          }
          lfree = cur;
 800a092:	4a29      	ldr	r2, [pc, #164]	@ (800a138 <mem_malloc+0x1d8>)
 800a094:	69bb      	ldr	r3, [r7, #24]
 800a096:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a098:	4b27      	ldr	r3, [pc, #156]	@ (800a138 <mem_malloc+0x1d8>)
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	4b2a      	ldr	r3, [pc, #168]	@ (800a148 <mem_malloc+0x1e8>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d00b      	beq.n	800a0bc <mem_malloc+0x15c>
 800a0a4:	4b24      	ldr	r3, [pc, #144]	@ (800a138 <mem_malloc+0x1d8>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	791b      	ldrb	r3, [r3, #4]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d006      	beq.n	800a0bc <mem_malloc+0x15c>
 800a0ae:	4b23      	ldr	r3, [pc, #140]	@ (800a13c <mem_malloc+0x1dc>)
 800a0b0:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800a0b4:	4925      	ldr	r1, [pc, #148]	@ (800a14c <mem_malloc+0x1ec>)
 800a0b6:	4823      	ldr	r0, [pc, #140]	@ (800a144 <mem_malloc+0x1e4>)
 800a0b8:	f00b f996 	bl	80153e8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a0bc:	8bba      	ldrh	r2, [r7, #28]
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	3308      	adds	r3, #8
 800a0c4:	4a20      	ldr	r2, [pc, #128]	@ (800a148 <mem_malloc+0x1e8>)
 800a0c6:	6812      	ldr	r2, [r2, #0]
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d906      	bls.n	800a0da <mem_malloc+0x17a>
 800a0cc:	4b1b      	ldr	r3, [pc, #108]	@ (800a13c <mem_malloc+0x1dc>)
 800a0ce:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800a0d2:	491f      	ldr	r1, [pc, #124]	@ (800a150 <mem_malloc+0x1f0>)
 800a0d4:	481b      	ldr	r0, [pc, #108]	@ (800a144 <mem_malloc+0x1e4>)
 800a0d6:	f00b f987 	bl	80153e8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	f003 0303 	and.w	r3, r3, #3
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d006      	beq.n	800a0f2 <mem_malloc+0x192>
 800a0e4:	4b15      	ldr	r3, [pc, #84]	@ (800a13c <mem_malloc+0x1dc>)
 800a0e6:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800a0ea:	491a      	ldr	r1, [pc, #104]	@ (800a154 <mem_malloc+0x1f4>)
 800a0ec:	4815      	ldr	r0, [pc, #84]	@ (800a144 <mem_malloc+0x1e4>)
 800a0ee:	f00b f97b 	bl	80153e8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	f003 0303 	and.w	r3, r3, #3
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d006      	beq.n	800a10a <mem_malloc+0x1aa>
 800a0fc:	4b0f      	ldr	r3, [pc, #60]	@ (800a13c <mem_malloc+0x1dc>)
 800a0fe:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800a102:	4915      	ldr	r1, [pc, #84]	@ (800a158 <mem_malloc+0x1f8>)
 800a104:	480f      	ldr	r0, [pc, #60]	@ (800a144 <mem_malloc+0x1e4>)
 800a106:	f00b f96f 	bl	80153e8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	3308      	adds	r3, #8
 800a10e:	e00f      	b.n	800a130 <mem_malloc+0x1d0>
         ptr = ptr_to_mem(ptr)->next) {
 800a110:	8bfb      	ldrh	r3, [r7, #30]
 800a112:	4618      	mov	r0, r3
 800a114:	f7ff fc78 	bl	8009a08 <ptr_to_mem>
 800a118:	4603      	mov	r3, r0
 800a11a:	881b      	ldrh	r3, [r3, #0]
 800a11c:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a11e:	8bfa      	ldrh	r2, [r7, #30]
 800a120:	8bb9      	ldrh	r1, [r7, #28]
 800a122:	f643 73e8 	movw	r3, #16360	@ 0x3fe8
 800a126:	1a5b      	subs	r3, r3, r1
 800a128:	429a      	cmp	r2, r3
 800a12a:	f4ff af41 	bcc.w	8009fb0 <mem_malloc+0x50>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3720      	adds	r7, #32
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}
 800a138:	2400038c 	.word	0x2400038c
 800a13c:	08016518 	.word	0x08016518
 800a140:	080166c0 	.word	0x080166c0
 800a144:	08016560 	.word	0x08016560
 800a148:	24000388 	.word	0x24000388
 800a14c:	080166d4 	.word	0x080166d4
 800a150:	080166f0 	.word	0x080166f0
 800a154:	08016720 	.word	0x08016720
 800a158:	08016750 	.word	0x08016750

0800a15c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b085      	sub	sp, #20
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	2200      	movs	r2, #0
 800a16a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	3303      	adds	r3, #3
 800a172:	f023 0303 	bic.w	r3, r3, #3
 800a176:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a178:	2300      	movs	r3, #0
 800a17a:	60fb      	str	r3, [r7, #12]
 800a17c:	e011      	b.n	800a1a2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	68ba      	ldr	r2, [r7, #8]
 800a18e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	889b      	ldrh	r3, [r3, #4]
 800a194:	461a      	mov	r2, r3
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	4413      	add	r3, r2
 800a19a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	60fb      	str	r3, [r7, #12]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	88db      	ldrh	r3, [r3, #6]
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	dbe7      	blt.n	800a17e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a1ae:	bf00      	nop
 800a1b0:	bf00      	nop
 800a1b2:	3714      	adds	r7, #20
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	80fb      	strh	r3, [r7, #6]
 800a1c6:	e009      	b.n	800a1dc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a1c8:	88fb      	ldrh	r3, [r7, #6]
 800a1ca:	4a08      	ldr	r2, [pc, #32]	@ (800a1ec <memp_init+0x30>)
 800a1cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f7ff ffc3 	bl	800a15c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a1d6:	88fb      	ldrh	r3, [r7, #6]
 800a1d8:	3301      	adds	r3, #1
 800a1da:	80fb      	strh	r3, [r7, #6]
 800a1dc:	88fb      	ldrh	r3, [r7, #6]
 800a1de:	2b08      	cmp	r3, #8
 800a1e0:	d9f2      	bls.n	800a1c8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a1e2:	bf00      	nop
 800a1e4:	bf00      	nop
 800a1e6:	3708      	adds	r7, #8
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	0801b190 	.word	0x0801b190

0800a1f0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d012      	beq.n	800a22c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	68db      	ldr	r3, [r3, #12]
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	6812      	ldr	r2, [r2, #0]
 800a20e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f003 0303 	and.w	r3, r3, #3
 800a216:	2b00      	cmp	r3, #0
 800a218:	d006      	beq.n	800a228 <do_memp_malloc_pool+0x38>
 800a21a:	4b07      	ldr	r3, [pc, #28]	@ (800a238 <do_memp_malloc_pool+0x48>)
 800a21c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800a220:	4906      	ldr	r1, [pc, #24]	@ (800a23c <do_memp_malloc_pool+0x4c>)
 800a222:	4807      	ldr	r0, [pc, #28]	@ (800a240 <do_memp_malloc_pool+0x50>)
 800a224:	f00b f8e0 	bl	80153e8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	e000      	b.n	800a22e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a22c:	2300      	movs	r3, #0
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	080167dc 	.word	0x080167dc
 800a23c:	0801680c 	.word	0x0801680c
 800a240:	08016830 	.word	0x08016830

0800a244 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b082      	sub	sp, #8
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d106      	bne.n	800a260 <memp_malloc_pool+0x1c>
 800a252:	4b0a      	ldr	r3, [pc, #40]	@ (800a27c <memp_malloc_pool+0x38>)
 800a254:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800a258:	4909      	ldr	r1, [pc, #36]	@ (800a280 <memp_malloc_pool+0x3c>)
 800a25a:	480a      	ldr	r0, [pc, #40]	@ (800a284 <memp_malloc_pool+0x40>)
 800a25c:	f00b f8c4 	bl	80153e8 <iprintf>
  if (desc == NULL) {
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d101      	bne.n	800a26a <memp_malloc_pool+0x26>
    return NULL;
 800a266:	2300      	movs	r3, #0
 800a268:	e003      	b.n	800a272 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f7ff ffc0 	bl	800a1f0 <do_memp_malloc_pool>
 800a270:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800a272:	4618      	mov	r0, r3
 800a274:	3708      	adds	r7, #8
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	080167dc 	.word	0x080167dc
 800a280:	08016858 	.word	0x08016858
 800a284:	08016830 	.word	0x08016830

0800a288 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	4603      	mov	r3, r0
 800a290:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a292:	79fb      	ldrb	r3, [r7, #7]
 800a294:	2b08      	cmp	r3, #8
 800a296:	d908      	bls.n	800a2aa <memp_malloc+0x22>
 800a298:	4b0a      	ldr	r3, [pc, #40]	@ (800a2c4 <memp_malloc+0x3c>)
 800a29a:	f240 1257 	movw	r2, #343	@ 0x157
 800a29e:	490a      	ldr	r1, [pc, #40]	@ (800a2c8 <memp_malloc+0x40>)
 800a2a0:	480a      	ldr	r0, [pc, #40]	@ (800a2cc <memp_malloc+0x44>)
 800a2a2:	f00b f8a1 	bl	80153e8 <iprintf>
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	e008      	b.n	800a2bc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a2aa:	79fb      	ldrb	r3, [r7, #7]
 800a2ac:	4a08      	ldr	r2, [pc, #32]	@ (800a2d0 <memp_malloc+0x48>)
 800a2ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7ff ff9c 	bl	800a1f0 <do_memp_malloc_pool>
 800a2b8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3710      	adds	r7, #16
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}
 800a2c4:	080167dc 	.word	0x080167dc
 800a2c8:	0801686c 	.word	0x0801686c
 800a2cc:	08016830 	.word	0x08016830
 800a2d0:	0801b190 	.word	0x0801b190

0800a2d4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	f003 0303 	and.w	r3, r3, #3
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d006      	beq.n	800a2f6 <do_memp_free_pool+0x22>
 800a2e8:	4b0a      	ldr	r3, [pc, #40]	@ (800a314 <do_memp_free_pool+0x40>)
 800a2ea:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800a2ee:	490a      	ldr	r1, [pc, #40]	@ (800a318 <do_memp_free_pool+0x44>)
 800a2f0:	480a      	ldr	r0, [pc, #40]	@ (800a31c <do_memp_free_pool+0x48>)
 800a2f2:	f00b f879 	bl	80153e8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	68db      	ldr	r3, [r3, #12]
 800a308:	68fa      	ldr	r2, [r7, #12]
 800a30a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800a30c:	bf00      	nop
 800a30e:	3710      	adds	r7, #16
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	080167dc 	.word	0x080167dc
 800a318:	0801688c 	.word	0x0801688c
 800a31c:	08016830 	.word	0x08016830

0800a320 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d106      	bne.n	800a33e <memp_free_pool+0x1e>
 800a330:	4b0a      	ldr	r3, [pc, #40]	@ (800a35c <memp_free_pool+0x3c>)
 800a332:	f240 1295 	movw	r2, #405	@ 0x195
 800a336:	490a      	ldr	r1, [pc, #40]	@ (800a360 <memp_free_pool+0x40>)
 800a338:	480a      	ldr	r0, [pc, #40]	@ (800a364 <memp_free_pool+0x44>)
 800a33a:	f00b f855 	bl	80153e8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d007      	beq.n	800a354 <memp_free_pool+0x34>
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d004      	beq.n	800a354 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800a34a:	6839      	ldr	r1, [r7, #0]
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f7ff ffc1 	bl	800a2d4 <do_memp_free_pool>
 800a352:	e000      	b.n	800a356 <memp_free_pool+0x36>
    return;
 800a354:	bf00      	nop
}
 800a356:	3708      	adds	r7, #8
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	080167dc 	.word	0x080167dc
 800a360:	08016858 	.word	0x08016858
 800a364:	08016830 	.word	0x08016830

0800a368 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	4603      	mov	r3, r0
 800a370:	6039      	str	r1, [r7, #0]
 800a372:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a374:	79fb      	ldrb	r3, [r7, #7]
 800a376:	2b08      	cmp	r3, #8
 800a378:	d907      	bls.n	800a38a <memp_free+0x22>
 800a37a:	4b0c      	ldr	r3, [pc, #48]	@ (800a3ac <memp_free+0x44>)
 800a37c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800a380:	490b      	ldr	r1, [pc, #44]	@ (800a3b0 <memp_free+0x48>)
 800a382:	480c      	ldr	r0, [pc, #48]	@ (800a3b4 <memp_free+0x4c>)
 800a384:	f00b f830 	bl	80153e8 <iprintf>
 800a388:	e00c      	b.n	800a3a4 <memp_free+0x3c>

  if (mem == NULL) {
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d008      	beq.n	800a3a2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a390:	79fb      	ldrb	r3, [r7, #7]
 800a392:	4a09      	ldr	r2, [pc, #36]	@ (800a3b8 <memp_free+0x50>)
 800a394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a398:	6839      	ldr	r1, [r7, #0]
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7ff ff9a 	bl	800a2d4 <do_memp_free_pool>
 800a3a0:	e000      	b.n	800a3a4 <memp_free+0x3c>
    return;
 800a3a2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a3a4:	3708      	adds	r7, #8
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	080167dc 	.word	0x080167dc
 800a3b0:	080168ac 	.word	0x080168ac
 800a3b4:	08016830 	.word	0x08016830
 800a3b8:	0801b190 	.word	0x0801b190

0800a3bc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a3c0:	bf00      	nop
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr
	...

0800a3cc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b086      	sub	sp, #24
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	60b9      	str	r1, [r7, #8]
 800a3d6:	607a      	str	r2, [r7, #4]
 800a3d8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d108      	bne.n	800a3f2 <netif_add+0x26>
 800a3e0:	4b57      	ldr	r3, [pc, #348]	@ (800a540 <netif_add+0x174>)
 800a3e2:	f240 1227 	movw	r2, #295	@ 0x127
 800a3e6:	4957      	ldr	r1, [pc, #348]	@ (800a544 <netif_add+0x178>)
 800a3e8:	4857      	ldr	r0, [pc, #348]	@ (800a548 <netif_add+0x17c>)
 800a3ea:	f00a fffd 	bl	80153e8 <iprintf>
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	e0a2      	b.n	800a538 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d108      	bne.n	800a40a <netif_add+0x3e>
 800a3f8:	4b51      	ldr	r3, [pc, #324]	@ (800a540 <netif_add+0x174>)
 800a3fa:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800a3fe:	4953      	ldr	r1, [pc, #332]	@ (800a54c <netif_add+0x180>)
 800a400:	4851      	ldr	r0, [pc, #324]	@ (800a548 <netif_add+0x17c>)
 800a402:	f00a fff1 	bl	80153e8 <iprintf>
 800a406:	2300      	movs	r3, #0
 800a408:	e096      	b.n	800a538 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d101      	bne.n	800a414 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a410:	4b4f      	ldr	r3, [pc, #316]	@ (800a550 <netif_add+0x184>)
 800a412:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d101      	bne.n	800a41e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a41a:	4b4d      	ldr	r3, [pc, #308]	@ (800a550 <netif_add+0x184>)
 800a41c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d101      	bne.n	800a428 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a424:	4b4a      	ldr	r3, [pc, #296]	@ (800a550 <netif_add+0x184>)
 800a426:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2200      	movs	r2, #0
 800a42c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2200      	movs	r2, #0
 800a432:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2200      	movs	r2, #0
 800a438:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	4a45      	ldr	r2, [pc, #276]	@ (800a554 <netif_add+0x188>)
 800a43e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2200      	movs	r2, #0
 800a444:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2200      	movs	r2, #0
 800a44a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2200      	movs	r2, #0
 800a452:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6a3a      	ldr	r2, [r7, #32]
 800a458:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a45a:	4b3f      	ldr	r3, [pc, #252]	@ (800a558 <netif_add+0x18c>)
 800a45c:	781a      	ldrb	r2, [r3, #0]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a468:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	68b9      	ldr	r1, [r7, #8]
 800a470:	68f8      	ldr	r0, [r7, #12]
 800a472:	f000 f913 	bl	800a69c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a478:	68f8      	ldr	r0, [r7, #12]
 800a47a:	4798      	blx	r3
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d001      	beq.n	800a486 <netif_add+0xba>
    return NULL;
 800a482:	2300      	movs	r3, #0
 800a484:	e058      	b.n	800a538 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a48c:	2bff      	cmp	r3, #255	@ 0xff
 800a48e:	d103      	bne.n	800a498 <netif_add+0xcc>
        netif->num = 0;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2200      	movs	r2, #0
 800a494:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800a498:	2300      	movs	r3, #0
 800a49a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a49c:	4b2f      	ldr	r3, [pc, #188]	@ (800a55c <netif_add+0x190>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	617b      	str	r3, [r7, #20]
 800a4a2:	e02b      	b.n	800a4fc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a4a4:	697a      	ldr	r2, [r7, #20]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d106      	bne.n	800a4ba <netif_add+0xee>
 800a4ac:	4b24      	ldr	r3, [pc, #144]	@ (800a540 <netif_add+0x174>)
 800a4ae:	f240 128b 	movw	r2, #395	@ 0x18b
 800a4b2:	492b      	ldr	r1, [pc, #172]	@ (800a560 <netif_add+0x194>)
 800a4b4:	4824      	ldr	r0, [pc, #144]	@ (800a548 <netif_add+0x17c>)
 800a4b6:	f00a ff97 	bl	80153e8 <iprintf>
        num_netifs++;
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	3301      	adds	r3, #1
 800a4be:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	2bff      	cmp	r3, #255	@ 0xff
 800a4c4:	dd06      	ble.n	800a4d4 <netif_add+0x108>
 800a4c6:	4b1e      	ldr	r3, [pc, #120]	@ (800a540 <netif_add+0x174>)
 800a4c8:	f240 128d 	movw	r2, #397	@ 0x18d
 800a4cc:	4925      	ldr	r1, [pc, #148]	@ (800a564 <netif_add+0x198>)
 800a4ce:	481e      	ldr	r0, [pc, #120]	@ (800a548 <netif_add+0x17c>)
 800a4d0:	f00a ff8a 	bl	80153e8 <iprintf>
        if (netif2->num == netif->num) {
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d108      	bne.n	800a4f6 <netif_add+0x12a>
          netif->num++;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	b2da      	uxtb	r2, r3
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800a4f4:	e005      	b.n	800a502 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	617b      	str	r3, [r7, #20]
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d1d0      	bne.n	800a4a4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d1be      	bne.n	800a486 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a50e:	2bfe      	cmp	r3, #254	@ 0xfe
 800a510:	d103      	bne.n	800a51a <netif_add+0x14e>
    netif_num = 0;
 800a512:	4b11      	ldr	r3, [pc, #68]	@ (800a558 <netif_add+0x18c>)
 800a514:	2200      	movs	r2, #0
 800a516:	701a      	strb	r2, [r3, #0]
 800a518:	e006      	b.n	800a528 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a520:	3301      	adds	r3, #1
 800a522:	b2da      	uxtb	r2, r3
 800a524:	4b0c      	ldr	r3, [pc, #48]	@ (800a558 <netif_add+0x18c>)
 800a526:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a528:	4b0c      	ldr	r3, [pc, #48]	@ (800a55c <netif_add+0x190>)
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a530:	4a0a      	ldr	r2, [pc, #40]	@ (800a55c <netif_add+0x190>)
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a536:	68fb      	ldr	r3, [r7, #12]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3718      	adds	r7, #24
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	080168c8 	.word	0x080168c8
 800a544:	0801695c 	.word	0x0801695c
 800a548:	08016918 	.word	0x08016918
 800a54c:	08016978 	.word	0x08016978
 800a550:	0801b22c 	.word	0x0801b22c
 800a554:	0800a977 	.word	0x0800a977
 800a558:	240032d0 	.word	0x240032d0
 800a55c:	240032c8 	.word	0x240032c8
 800a560:	0801699c 	.word	0x0801699c
 800a564:	080169b0 	.word	0x080169b0

0800a568 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a572:	6839      	ldr	r1, [r7, #0]
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f002 fec9 	bl	800d30c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a57a:	6839      	ldr	r1, [r7, #0]
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f007 fec3 	bl	8012308 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a582:	bf00      	nop
 800a584:	3708      	adds	r7, #8
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
	...

0800a58c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b086      	sub	sp, #24
 800a590:	af00      	add	r7, sp, #0
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d106      	bne.n	800a5ac <netif_do_set_ipaddr+0x20>
 800a59e:	4b1d      	ldr	r3, [pc, #116]	@ (800a614 <netif_do_set_ipaddr+0x88>)
 800a5a0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800a5a4:	491c      	ldr	r1, [pc, #112]	@ (800a618 <netif_do_set_ipaddr+0x8c>)
 800a5a6:	481d      	ldr	r0, [pc, #116]	@ (800a61c <netif_do_set_ipaddr+0x90>)
 800a5a8:	f00a ff1e 	bl	80153e8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d106      	bne.n	800a5c0 <netif_do_set_ipaddr+0x34>
 800a5b2:	4b18      	ldr	r3, [pc, #96]	@ (800a614 <netif_do_set_ipaddr+0x88>)
 800a5b4:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800a5b8:	4917      	ldr	r1, [pc, #92]	@ (800a618 <netif_do_set_ipaddr+0x8c>)
 800a5ba:	4818      	ldr	r0, [pc, #96]	@ (800a61c <netif_do_set_ipaddr+0x90>)
 800a5bc:	f00a ff14 	bl	80153e8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	3304      	adds	r3, #4
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d01c      	beq.n	800a608 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	3304      	adds	r3, #4
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a5de:	f107 0314 	add.w	r3, r7, #20
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f7ff ffbf 	bl	800a568 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d002      	beq.n	800a5f6 <netif_do_set_ipaddr+0x6a>
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	e000      	b.n	800a5f8 <netif_do_set_ipaddr+0x6c>
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a5fc:	2101      	movs	r1, #1
 800a5fe:	68f8      	ldr	r0, [r7, #12]
 800a600:	f000 f8d2 	bl	800a7a8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a604:	2301      	movs	r3, #1
 800a606:	e000      	b.n	800a60a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3718      	adds	r7, #24
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	080168c8 	.word	0x080168c8
 800a618:	080169e0 	.word	0x080169e0
 800a61c:	08016918 	.word	0x08016918

0800a620 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a620:	b480      	push	{r7}
 800a622:	b085      	sub	sp, #20
 800a624:	af00      	add	r7, sp, #0
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	60b9      	str	r1, [r7, #8]
 800a62a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	3308      	adds	r3, #8
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	429a      	cmp	r2, r3
 800a638:	d00a      	beq.n	800a650 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d002      	beq.n	800a646 <netif_do_set_netmask+0x26>
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	e000      	b.n	800a648 <netif_do_set_netmask+0x28>
 800a646:	2300      	movs	r3, #0
 800a648:	68fa      	ldr	r2, [r7, #12]
 800a64a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a64c:	2301      	movs	r3, #1
 800a64e:	e000      	b.n	800a652 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800a650:	2300      	movs	r3, #0
}
 800a652:	4618      	mov	r0, r3
 800a654:	3714      	adds	r7, #20
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr

0800a65e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800a65e:	b480      	push	{r7}
 800a660:	b085      	sub	sp, #20
 800a662:	af00      	add	r7, sp, #0
 800a664:	60f8      	str	r0, [r7, #12]
 800a666:	60b9      	str	r1, [r7, #8]
 800a668:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	330c      	adds	r3, #12
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	429a      	cmp	r2, r3
 800a676:	d00a      	beq.n	800a68e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d002      	beq.n	800a684 <netif_do_set_gw+0x26>
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	e000      	b.n	800a686 <netif_do_set_gw+0x28>
 800a684:	2300      	movs	r3, #0
 800a686:	68fa      	ldr	r2, [r7, #12]
 800a688:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800a68a:	2301      	movs	r3, #1
 800a68c:	e000      	b.n	800a690 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800a68e:	2300      	movs	r3, #0
}
 800a690:	4618      	mov	r0, r3
 800a692:	3714      	adds	r7, #20
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b088      	sub	sp, #32
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	607a      	str	r2, [r7, #4]
 800a6a8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d101      	bne.n	800a6bc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800a6b8:	4b1c      	ldr	r3, [pc, #112]	@ (800a72c <netif_set_addr+0x90>)
 800a6ba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d101      	bne.n	800a6c6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800a6c2:	4b1a      	ldr	r3, [pc, #104]	@ (800a72c <netif_set_addr+0x90>)
 800a6c4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d101      	bne.n	800a6d0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800a6cc:	4b17      	ldr	r3, [pc, #92]	@ (800a72c <netif_set_addr+0x90>)
 800a6ce:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d003      	beq.n	800a6de <netif_set_addr+0x42>
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d101      	bne.n	800a6e2 <netif_set_addr+0x46>
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e000      	b.n	800a6e4 <netif_set_addr+0x48>
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	617b      	str	r3, [r7, #20]
  if (remove) {
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d006      	beq.n	800a6fa <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a6ec:	f107 0310 	add.w	r3, r7, #16
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	68b9      	ldr	r1, [r7, #8]
 800a6f4:	68f8      	ldr	r0, [r7, #12]
 800a6f6:	f7ff ff49 	bl	800a58c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800a6fa:	69fa      	ldr	r2, [r7, #28]
 800a6fc:	6879      	ldr	r1, [r7, #4]
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	f7ff ff8e 	bl	800a620 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800a704:	69ba      	ldr	r2, [r7, #24]
 800a706:	6839      	ldr	r1, [r7, #0]
 800a708:	68f8      	ldr	r0, [r7, #12]
 800a70a:	f7ff ffa8 	bl	800a65e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d106      	bne.n	800a722 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a714:	f107 0310 	add.w	r3, r7, #16
 800a718:	461a      	mov	r2, r3
 800a71a:	68b9      	ldr	r1, [r7, #8]
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	f7ff ff35 	bl	800a58c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800a722:	bf00      	nop
 800a724:	3720      	adds	r7, #32
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	bf00      	nop
 800a72c:	0801b22c 	.word	0x0801b22c

0800a730 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a738:	4a04      	ldr	r2, [pc, #16]	@ (800a74c <netif_set_default+0x1c>)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a73e:	bf00      	nop
 800a740:	370c      	adds	r7, #12
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr
 800a74a:	bf00      	nop
 800a74c:	240032cc 	.word	0x240032cc

0800a750 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d107      	bne.n	800a76e <netif_set_up+0x1e>
 800a75e:	4b0f      	ldr	r3, [pc, #60]	@ (800a79c <netif_set_up+0x4c>)
 800a760:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800a764:	490e      	ldr	r1, [pc, #56]	@ (800a7a0 <netif_set_up+0x50>)
 800a766:	480f      	ldr	r0, [pc, #60]	@ (800a7a4 <netif_set_up+0x54>)
 800a768:	f00a fe3e 	bl	80153e8 <iprintf>
 800a76c:	e013      	b.n	800a796 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a774:	f003 0301 	and.w	r3, r3, #1
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d10c      	bne.n	800a796 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a782:	f043 0301 	orr.w	r3, r3, #1
 800a786:	b2da      	uxtb	r2, r3
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a78e:	2103      	movs	r1, #3
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f000 f809 	bl	800a7a8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	080168c8 	.word	0x080168c8
 800a7a0:	08016a50 	.word	0x08016a50
 800a7a4:	08016918 	.word	0x08016918

0800a7a8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d106      	bne.n	800a7c8 <netif_issue_reports+0x20>
 800a7ba:	4b18      	ldr	r3, [pc, #96]	@ (800a81c <netif_issue_reports+0x74>)
 800a7bc:	f240 326d 	movw	r2, #877	@ 0x36d
 800a7c0:	4917      	ldr	r1, [pc, #92]	@ (800a820 <netif_issue_reports+0x78>)
 800a7c2:	4818      	ldr	r0, [pc, #96]	@ (800a824 <netif_issue_reports+0x7c>)
 800a7c4:	f00a fe10 	bl	80153e8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a7ce:	f003 0304 	and.w	r3, r3, #4
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d01e      	beq.n	800a814 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a7dc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d017      	beq.n	800a814 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a7e4:	78fb      	ldrb	r3, [r7, #3]
 800a7e6:	f003 0301 	and.w	r3, r3, #1
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d013      	beq.n	800a816 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	3304      	adds	r3, #4
 800a7f2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d00e      	beq.n	800a816 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a7fe:	f003 0308 	and.w	r3, r3, #8
 800a802:	2b00      	cmp	r3, #0
 800a804:	d007      	beq.n	800a816 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	3304      	adds	r3, #4
 800a80a:	4619      	mov	r1, r3
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f008 fe7b 	bl	8013508 <etharp_request>
 800a812:	e000      	b.n	800a816 <netif_issue_reports+0x6e>
    return;
 800a814:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800a816:	3708      	adds	r7, #8
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	080168c8 	.word	0x080168c8
 800a820:	08016a6c 	.word	0x08016a6c
 800a824:	08016918 	.word	0x08016918

0800a828 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d107      	bne.n	800a846 <netif_set_down+0x1e>
 800a836:	4b12      	ldr	r3, [pc, #72]	@ (800a880 <netif_set_down+0x58>)
 800a838:	f240 329b 	movw	r2, #923	@ 0x39b
 800a83c:	4911      	ldr	r1, [pc, #68]	@ (800a884 <netif_set_down+0x5c>)
 800a83e:	4812      	ldr	r0, [pc, #72]	@ (800a888 <netif_set_down+0x60>)
 800a840:	f00a fdd2 	bl	80153e8 <iprintf>
 800a844:	e019      	b.n	800a87a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a84c:	f003 0301 	and.w	r3, r3, #1
 800a850:	2b00      	cmp	r3, #0
 800a852:	d012      	beq.n	800a87a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a85a:	f023 0301 	bic.w	r3, r3, #1
 800a85e:	b2da      	uxtb	r2, r3
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a86c:	f003 0308 	and.w	r3, r3, #8
 800a870:	2b00      	cmp	r3, #0
 800a872:	d002      	beq.n	800a87a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f008 f999 	bl	8012bac <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a87a:	3708      	adds	r7, #8
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	080168c8 	.word	0x080168c8
 800a884:	08016a90 	.word	0x08016a90
 800a888:	08016918 	.word	0x08016918

0800a88c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b082      	sub	sp, #8
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d107      	bne.n	800a8aa <netif_set_link_up+0x1e>
 800a89a:	4b13      	ldr	r3, [pc, #76]	@ (800a8e8 <netif_set_link_up+0x5c>)
 800a89c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800a8a0:	4912      	ldr	r1, [pc, #72]	@ (800a8ec <netif_set_link_up+0x60>)
 800a8a2:	4813      	ldr	r0, [pc, #76]	@ (800a8f0 <netif_set_link_up+0x64>)
 800a8a4:	f00a fda0 	bl	80153e8 <iprintf>
 800a8a8:	e01b      	b.n	800a8e2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a8b0:	f003 0304 	and.w	r3, r3, #4
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d114      	bne.n	800a8e2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a8be:	f043 0304 	orr.w	r3, r3, #4
 800a8c2:	b2da      	uxtb	r2, r3
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a8ca:	2103      	movs	r1, #3
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f7ff ff6b 	bl	800a7a8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	69db      	ldr	r3, [r3, #28]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d003      	beq.n	800a8e2 <netif_set_link_up+0x56>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	69db      	ldr	r3, [r3, #28]
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a8e2:	3708      	adds	r7, #8
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}
 800a8e8:	080168c8 	.word	0x080168c8
 800a8ec:	08016ab0 	.word	0x08016ab0
 800a8f0:	08016918 	.word	0x08016918

0800a8f4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d107      	bne.n	800a912 <netif_set_link_down+0x1e>
 800a902:	4b11      	ldr	r3, [pc, #68]	@ (800a948 <netif_set_link_down+0x54>)
 800a904:	f240 4206 	movw	r2, #1030	@ 0x406
 800a908:	4910      	ldr	r1, [pc, #64]	@ (800a94c <netif_set_link_down+0x58>)
 800a90a:	4811      	ldr	r0, [pc, #68]	@ (800a950 <netif_set_link_down+0x5c>)
 800a90c:	f00a fd6c 	bl	80153e8 <iprintf>
 800a910:	e017      	b.n	800a942 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a918:	f003 0304 	and.w	r3, r3, #4
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d010      	beq.n	800a942 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a926:	f023 0304 	bic.w	r3, r3, #4
 800a92a:	b2da      	uxtb	r2, r3
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	69db      	ldr	r3, [r3, #28]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d003      	beq.n	800a942 <netif_set_link_down+0x4e>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	69db      	ldr	r3, [r3, #28]
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a942:	3708      	adds	r7, #8
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}
 800a948:	080168c8 	.word	0x080168c8
 800a94c:	08016ad4 	.word	0x08016ad4
 800a950:	08016918 	.word	0x08016918

0800a954 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d002      	beq.n	800a96a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	683a      	ldr	r2, [r7, #0]
 800a968:	61da      	str	r2, [r3, #28]
  }
}
 800a96a:	bf00      	nop
 800a96c:	370c      	adds	r7, #12
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr

0800a976 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800a976:	b480      	push	{r7}
 800a978:	b085      	sub	sp, #20
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	60f8      	str	r0, [r7, #12]
 800a97e:	60b9      	str	r1, [r7, #8]
 800a980:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800a982:	f06f 030b 	mvn.w	r3, #11
}
 800a986:	4618      	mov	r0, r3
 800a988:	3714      	adds	r7, #20
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr
	...

0800a994 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	4603      	mov	r3, r0
 800a99c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a99e:	79fb      	ldrb	r3, [r7, #7]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d013      	beq.n	800a9cc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800a9a4:	4b0d      	ldr	r3, [pc, #52]	@ (800a9dc <netif_get_by_index+0x48>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	60fb      	str	r3, [r7, #12]
 800a9aa:	e00c      	b.n	800a9c6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	79fa      	ldrb	r2, [r7, #7]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d101      	bne.n	800a9c0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	e006      	b.n	800a9ce <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	60fb      	str	r3, [r7, #12]
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d1ef      	bne.n	800a9ac <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800a9cc:	2300      	movs	r3, #0
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3714      	adds	r7, #20
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr
 800a9da:	bf00      	nop
 800a9dc:	240032c8 	.word	0x240032c8

0800a9e0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a9e6:	4b0d      	ldr	r3, [pc, #52]	@ (800aa1c <pbuf_free_ooseq+0x3c>)
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a9ec:	4b0c      	ldr	r3, [pc, #48]	@ (800aa20 <pbuf_free_ooseq+0x40>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	607b      	str	r3, [r7, #4]
 800a9f2:	e00d      	b.n	800aa10 <pbuf_free_ooseq+0x30>
    if (pcb->ooseq != NULL) {
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d006      	beq.n	800aa0a <pbuf_free_ooseq+0x2a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
 800a9fc:	4809      	ldr	r0, [pc, #36]	@ (800aa24 <pbuf_free_ooseq+0x44>)
 800a9fe:	f00a fd63 	bl	80154c8 <puts>
      tcp_free_ooseq(pcb);
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f002 fcc0 	bl	800d388 <tcp_free_ooseq>
      return;
 800aa08:	e005      	b.n	800aa16 <pbuf_free_ooseq+0x36>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	68db      	ldr	r3, [r3, #12]
 800aa0e:	607b      	str	r3, [r7, #4]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d1ee      	bne.n	800a9f4 <pbuf_free_ooseq+0x14>
    }
  }
}
 800aa16:	3708      	adds	r7, #8
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	240032d1 	.word	0x240032d1
 800aa20:	240032e0 	.word	0x240032e0
 800aa24:	08016af8 	.word	0x08016af8

0800aa28 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800aa2c:	4b03      	ldr	r3, [pc, #12]	@ (800aa3c <pbuf_pool_is_empty+0x14>)
 800aa2e:	2201      	movs	r2, #1
 800aa30:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800aa32:	bf00      	nop
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr
 800aa3c:	240032d1 	.word	0x240032d1

0800aa40 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b085      	sub	sp, #20
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	4611      	mov	r1, r2
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	460b      	mov	r3, r1
 800aa50:	80fb      	strh	r3, [r7, #6]
 800aa52:	4613      	mov	r3, r2
 800aa54:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	68ba      	ldr	r2, [r7, #8]
 800aa60:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	88fa      	ldrh	r2, [r7, #6]
 800aa66:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	88ba      	ldrh	r2, [r7, #4]
 800aa6c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800aa6e:	8b3b      	ldrh	r3, [r7, #24]
 800aa70:	b2da      	uxtb	r2, r3
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	7f3a      	ldrb	r2, [r7, #28]
 800aa7a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2200      	movs	r2, #0
 800aa86:	73da      	strb	r2, [r3, #15]
}
 800aa88:	bf00      	nop
 800aa8a:	3714      	adds	r7, #20
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b08c      	sub	sp, #48	@ 0x30
 800aa98:	af02      	add	r7, sp, #8
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	71fb      	strb	r3, [r7, #7]
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	80bb      	strh	r3, [r7, #4]
 800aaa2:	4613      	mov	r3, r2
 800aaa4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800aaa6:	79fb      	ldrb	r3, [r7, #7]
 800aaa8:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));
 800aaaa:	88bb      	ldrh	r3, [r7, #4]
 800aaac:	4619      	mov	r1, r3
 800aaae:	4874      	ldr	r0, [pc, #464]	@ (800ac80 <pbuf_alloc+0x1ec>)
 800aab0:	f00a fc9a 	bl	80153e8 <iprintf>

  switch (type) {
 800aab4:	887b      	ldrh	r3, [r7, #2]
 800aab6:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800aaba:	d07f      	beq.n	800abbc <pbuf_alloc+0x128>
 800aabc:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800aac0:	f300 80c8 	bgt.w	800ac54 <pbuf_alloc+0x1c0>
 800aac4:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800aac8:	d010      	beq.n	800aaec <pbuf_alloc+0x58>
 800aaca:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800aace:	f300 80c1 	bgt.w	800ac54 <pbuf_alloc+0x1c0>
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d002      	beq.n	800aadc <pbuf_alloc+0x48>
 800aad6:	2b41      	cmp	r3, #65	@ 0x41
 800aad8:	f040 80bc 	bne.w	800ac54 <pbuf_alloc+0x1c0>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800aadc:	887a      	ldrh	r2, [r7, #2]
 800aade:	88bb      	ldrh	r3, [r7, #4]
 800aae0:	4619      	mov	r1, r3
 800aae2:	2000      	movs	r0, #0
 800aae4:	f000 f8dc 	bl	800aca0 <pbuf_alloc_reference>
 800aae8:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800aaea:	e0bd      	b.n	800ac68 <pbuf_alloc+0x1d4>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800aaec:	2300      	movs	r3, #0
 800aaee:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800aaf4:	88bb      	ldrh	r3, [r7, #4]
 800aaf6:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800aaf8:	2008      	movs	r0, #8
 800aafa:	f7ff fbc5 	bl	800a288 <memp_malloc>
 800aafe:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d109      	bne.n	800ab1a <pbuf_alloc+0x86>
          PBUF_POOL_IS_EMPTY();
 800ab06:	f7ff ff8f 	bl	800aa28 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d002      	beq.n	800ab16 <pbuf_alloc+0x82>
            pbuf_free(p);
 800ab10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ab12:	f000 faeb 	bl	800b0ec <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ab16:	2300      	movs	r3, #0
 800ab18:	e0ad      	b.n	800ac76 <pbuf_alloc+0x1e2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ab1a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ab1c:	3303      	adds	r3, #3
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	f023 0303 	bic.w	r3, r3, #3
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	8b7a      	ldrh	r2, [r7, #26]
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	bf28      	it	cs
 800ab32:	4613      	movcs	r3, r2
 800ab34:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ab36:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ab38:	3310      	adds	r3, #16
 800ab3a:	693a      	ldr	r2, [r7, #16]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	3303      	adds	r3, #3
 800ab40:	f023 0303 	bic.w	r3, r3, #3
 800ab44:	4618      	mov	r0, r3
 800ab46:	89f9      	ldrh	r1, [r7, #14]
 800ab48:	8b7a      	ldrh	r2, [r7, #26]
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	9301      	str	r3, [sp, #4]
 800ab4e:	887b      	ldrh	r3, [r7, #2]
 800ab50:	9300      	str	r3, [sp, #0]
 800ab52:	460b      	mov	r3, r1
 800ab54:	4601      	mov	r1, r0
 800ab56:	6938      	ldr	r0, [r7, #16]
 800ab58:	f7ff ff72 	bl	800aa40 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	f003 0303 	and.w	r3, r3, #3
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d006      	beq.n	800ab76 <pbuf_alloc+0xe2>
 800ab68:	4b46      	ldr	r3, [pc, #280]	@ (800ac84 <pbuf_alloc+0x1f0>)
 800ab6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ab6e:	4946      	ldr	r1, [pc, #280]	@ (800ac88 <pbuf_alloc+0x1f4>)
 800ab70:	4846      	ldr	r0, [pc, #280]	@ (800ac8c <pbuf_alloc+0x1f8>)
 800ab72:	f00a fc39 	bl	80153e8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ab76:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ab78:	3303      	adds	r3, #3
 800ab7a:	f023 0303 	bic.w	r3, r3, #3
 800ab7e:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800ab82:	d106      	bne.n	800ab92 <pbuf_alloc+0xfe>
 800ab84:	4b3f      	ldr	r3, [pc, #252]	@ (800ac84 <pbuf_alloc+0x1f0>)
 800ab86:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800ab8a:	4941      	ldr	r1, [pc, #260]	@ (800ac90 <pbuf_alloc+0x1fc>)
 800ab8c:	483f      	ldr	r0, [pc, #252]	@ (800ac8c <pbuf_alloc+0x1f8>)
 800ab8e:	f00a fc2b 	bl	80153e8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ab92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d102      	bne.n	800ab9e <pbuf_alloc+0x10a>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab9c:	e002      	b.n	800aba4 <pbuf_alloc+0x110>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	693a      	ldr	r2, [r7, #16]
 800aba2:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800aba8:	8b7a      	ldrh	r2, [r7, #26]
 800abaa:	89fb      	ldrh	r3, [r7, #14]
 800abac:	1ad3      	subs	r3, r2, r3
 800abae:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800abb0:	2300      	movs	r3, #0
 800abb2:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800abb4:	8b7b      	ldrh	r3, [r7, #26]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d19e      	bne.n	800aaf8 <pbuf_alloc+0x64>
      break;
 800abba:	e055      	b.n	800ac68 <pbuf_alloc+0x1d4>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800abbc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800abbe:	3303      	adds	r3, #3
 800abc0:	b29b      	uxth	r3, r3
 800abc2:	f023 0303 	bic.w	r3, r3, #3
 800abc6:	b29a      	uxth	r2, r3
 800abc8:	88bb      	ldrh	r3, [r7, #4]
 800abca:	3303      	adds	r3, #3
 800abcc:	b29b      	uxth	r3, r3
 800abce:	f023 0303 	bic.w	r3, r3, #3
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	4413      	add	r3, r2
 800abd6:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800abd8:	8b3b      	ldrh	r3, [r7, #24]
 800abda:	3310      	adds	r3, #16
 800abdc:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800abde:	8b3a      	ldrh	r2, [r7, #24]
 800abe0:	88bb      	ldrh	r3, [r7, #4]
 800abe2:	3303      	adds	r3, #3
 800abe4:	f023 0303 	bic.w	r3, r3, #3
 800abe8:	429a      	cmp	r2, r3
 800abea:	d306      	bcc.n	800abfa <pbuf_alloc+0x166>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800abec:	8afa      	ldrh	r2, [r7, #22]
 800abee:	88bb      	ldrh	r3, [r7, #4]
 800abf0:	3303      	adds	r3, #3
 800abf2:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d201      	bcs.n	800abfe <pbuf_alloc+0x16a>
        return NULL;
 800abfa:	2300      	movs	r3, #0
 800abfc:	e03b      	b.n	800ac76 <pbuf_alloc+0x1e2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800abfe:	8afb      	ldrh	r3, [r7, #22]
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7ff f9ad 	bl	8009f60 <mem_malloc>
 800ac06:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800ac08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d101      	bne.n	800ac12 <pbuf_alloc+0x17e>
        return NULL;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	e031      	b.n	800ac76 <pbuf_alloc+0x1e2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ac12:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ac14:	3310      	adds	r3, #16
 800ac16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac18:	4413      	add	r3, r2
 800ac1a:	3303      	adds	r3, #3
 800ac1c:	f023 0303 	bic.w	r3, r3, #3
 800ac20:	4618      	mov	r0, r3
 800ac22:	88b9      	ldrh	r1, [r7, #4]
 800ac24:	88ba      	ldrh	r2, [r7, #4]
 800ac26:	2300      	movs	r3, #0
 800ac28:	9301      	str	r3, [sp, #4]
 800ac2a:	887b      	ldrh	r3, [r7, #2]
 800ac2c:	9300      	str	r3, [sp, #0]
 800ac2e:	460b      	mov	r3, r1
 800ac30:	4601      	mov	r1, r0
 800ac32:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ac34:	f7ff ff04 	bl	800aa40 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ac38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	f003 0303 	and.w	r3, r3, #3
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d010      	beq.n	800ac66 <pbuf_alloc+0x1d2>
 800ac44:	4b0f      	ldr	r3, [pc, #60]	@ (800ac84 <pbuf_alloc+0x1f0>)
 800ac46:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800ac4a:	4912      	ldr	r1, [pc, #72]	@ (800ac94 <pbuf_alloc+0x200>)
 800ac4c:	480f      	ldr	r0, [pc, #60]	@ (800ac8c <pbuf_alloc+0x1f8>)
 800ac4e:	f00a fbcb 	bl	80153e8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ac52:	e008      	b.n	800ac66 <pbuf_alloc+0x1d2>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ac54:	4b0b      	ldr	r3, [pc, #44]	@ (800ac84 <pbuf_alloc+0x1f0>)
 800ac56:	f240 1227 	movw	r2, #295	@ 0x127
 800ac5a:	490f      	ldr	r1, [pc, #60]	@ (800ac98 <pbuf_alloc+0x204>)
 800ac5c:	480b      	ldr	r0, [pc, #44]	@ (800ac8c <pbuf_alloc+0x1f8>)
 800ac5e:	f00a fbc3 	bl	80153e8 <iprintf>
      return NULL;
 800ac62:	2300      	movs	r3, #0
 800ac64:	e007      	b.n	800ac76 <pbuf_alloc+0x1e2>
      break;
 800ac66:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
 800ac68:	88bb      	ldrh	r3, [r7, #4]
 800ac6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	480b      	ldr	r0, [pc, #44]	@ (800ac9c <pbuf_alloc+0x208>)
 800ac70:	f00a fbba 	bl	80153e8 <iprintf>
  return p;
 800ac74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3728      	adds	r7, #40	@ 0x28
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	08016b28 	.word	0x08016b28
 800ac84:	08016b40 	.word	0x08016b40
 800ac88:	08016b70 	.word	0x08016b70
 800ac8c:	08016ba0 	.word	0x08016ba0
 800ac90:	08016bc8 	.word	0x08016bc8
 800ac94:	08016bfc 	.word	0x08016bfc
 800ac98:	08016c28 	.word	0x08016c28
 800ac9c:	08016c44 	.word	0x08016c44

0800aca0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af02      	add	r7, sp, #8
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	460b      	mov	r3, r1
 800acaa:	807b      	strh	r3, [r7, #2]
 800acac:	4613      	mov	r3, r2
 800acae:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800acb0:	883b      	ldrh	r3, [r7, #0]
 800acb2:	2b41      	cmp	r3, #65	@ 0x41
 800acb4:	d009      	beq.n	800acca <pbuf_alloc_reference+0x2a>
 800acb6:	883b      	ldrh	r3, [r7, #0]
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d006      	beq.n	800acca <pbuf_alloc_reference+0x2a>
 800acbc:	4b14      	ldr	r3, [pc, #80]	@ (800ad10 <pbuf_alloc_reference+0x70>)
 800acbe:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800acc2:	4914      	ldr	r1, [pc, #80]	@ (800ad14 <pbuf_alloc_reference+0x74>)
 800acc4:	4814      	ldr	r0, [pc, #80]	@ (800ad18 <pbuf_alloc_reference+0x78>)
 800acc6:	f00a fb8f 	bl	80153e8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800acca:	2007      	movs	r0, #7
 800accc:	f7ff fadc 	bl	800a288 <memp_malloc>
 800acd0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d10b      	bne.n	800acf0 <pbuf_alloc_reference+0x50>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 800acd8:	883b      	ldrh	r3, [r7, #0]
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d101      	bne.n	800ace2 <pbuf_alloc_reference+0x42>
 800acde:	4b0f      	ldr	r3, [pc, #60]	@ (800ad1c <pbuf_alloc_reference+0x7c>)
 800ace0:	e000      	b.n	800ace4 <pbuf_alloc_reference+0x44>
 800ace2:	4b0f      	ldr	r3, [pc, #60]	@ (800ad20 <pbuf_alloc_reference+0x80>)
 800ace4:	4619      	mov	r1, r3
 800ace6:	480f      	ldr	r0, [pc, #60]	@ (800ad24 <pbuf_alloc_reference+0x84>)
 800ace8:	f00a fb7e 	bl	80153e8 <iprintf>
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800acec:	2300      	movs	r3, #0
 800acee:	e00b      	b.n	800ad08 <pbuf_alloc_reference+0x68>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800acf0:	8879      	ldrh	r1, [r7, #2]
 800acf2:	887a      	ldrh	r2, [r7, #2]
 800acf4:	2300      	movs	r3, #0
 800acf6:	9301      	str	r3, [sp, #4]
 800acf8:	883b      	ldrh	r3, [r7, #0]
 800acfa:	9300      	str	r3, [sp, #0]
 800acfc:	460b      	mov	r3, r1
 800acfe:	6879      	ldr	r1, [r7, #4]
 800ad00:	68f8      	ldr	r0, [r7, #12]
 800ad02:	f7ff fe9d 	bl	800aa40 <pbuf_init_alloced_pbuf>
  return p;
 800ad06:	68fb      	ldr	r3, [r7, #12]
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3710      	adds	r7, #16
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	08016b40 	.word	0x08016b40
 800ad14:	08016c64 	.word	0x08016c64
 800ad18:	08016ba0 	.word	0x08016ba0
 800ad1c:	08016c78 	.word	0x08016c78
 800ad20:	08016c7c 	.word	0x08016c7c
 800ad24:	08016c80 	.word	0x08016c80

0800ad28 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b088      	sub	sp, #32
 800ad2c:	af02      	add	r7, sp, #8
 800ad2e:	607b      	str	r3, [r7, #4]
 800ad30:	4603      	mov	r3, r0
 800ad32:	73fb      	strb	r3, [r7, #15]
 800ad34:	460b      	mov	r3, r1
 800ad36:	81bb      	strh	r3, [r7, #12]
 800ad38:	4613      	mov	r3, r2
 800ad3a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ad3c:	7bfb      	ldrb	r3, [r7, #15]
 800ad3e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));
 800ad40:	89bb      	ldrh	r3, [r7, #12]
 800ad42:	4619      	mov	r1, r3
 800ad44:	4817      	ldr	r0, [pc, #92]	@ (800ada4 <pbuf_alloced_custom+0x7c>)
 800ad46:	f00a fb4f 	bl	80153e8 <iprintf>

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ad4a:	8a7b      	ldrh	r3, [r7, #18]
 800ad4c:	3303      	adds	r3, #3
 800ad4e:	f023 0203 	bic.w	r2, r3, #3
 800ad52:	89bb      	ldrh	r3, [r7, #12]
 800ad54:	441a      	add	r2, r3
 800ad56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d906      	bls.n	800ad6a <pbuf_alloced_custom+0x42>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
 800ad5c:	89bb      	ldrh	r3, [r7, #12]
 800ad5e:	4619      	mov	r1, r3
 800ad60:	4811      	ldr	r0, [pc, #68]	@ (800ada8 <pbuf_alloced_custom+0x80>)
 800ad62:	f00a fb41 	bl	80153e8 <iprintf>
    return NULL;
 800ad66:	2300      	movs	r3, #0
 800ad68:	e018      	b.n	800ad9c <pbuf_alloced_custom+0x74>
  }

  if (payload_mem != NULL) {
 800ad6a:	6a3b      	ldr	r3, [r7, #32]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d007      	beq.n	800ad80 <pbuf_alloced_custom+0x58>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ad70:	8a7b      	ldrh	r3, [r7, #18]
 800ad72:	3303      	adds	r3, #3
 800ad74:	f023 0303 	bic.w	r3, r3, #3
 800ad78:	6a3a      	ldr	r2, [r7, #32]
 800ad7a:	4413      	add	r3, r2
 800ad7c:	617b      	str	r3, [r7, #20]
 800ad7e:	e001      	b.n	800ad84 <pbuf_alloced_custom+0x5c>
  } else {
    payload = NULL;
 800ad80:	2300      	movs	r3, #0
 800ad82:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	89b9      	ldrh	r1, [r7, #12]
 800ad88:	89ba      	ldrh	r2, [r7, #12]
 800ad8a:	2302      	movs	r3, #2
 800ad8c:	9301      	str	r3, [sp, #4]
 800ad8e:	897b      	ldrh	r3, [r7, #10]
 800ad90:	9300      	str	r3, [sp, #0]
 800ad92:	460b      	mov	r3, r1
 800ad94:	6979      	ldr	r1, [r7, #20]
 800ad96:	f7ff fe53 	bl	800aa40 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ad9a:	687b      	ldr	r3, [r7, #4]
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3718      	adds	r7, #24
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	08016cc4 	.word	0x08016cc4
 800ada8:	08016ce8 	.word	0x08016ce8

0800adac <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	460b      	mov	r3, r1
 800adb6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d106      	bne.n	800adcc <pbuf_realloc+0x20>
 800adbe:	4b3a      	ldr	r3, [pc, #232]	@ (800aea8 <pbuf_realloc+0xfc>)
 800adc0:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800adc4:	4939      	ldr	r1, [pc, #228]	@ (800aeac <pbuf_realloc+0x100>)
 800adc6:	483a      	ldr	r0, [pc, #232]	@ (800aeb0 <pbuf_realloc+0x104>)
 800adc8:	f00a fb0e 	bl	80153e8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	891b      	ldrh	r3, [r3, #8]
 800add0:	887a      	ldrh	r2, [r7, #2]
 800add2:	429a      	cmp	r2, r3
 800add4:	d263      	bcs.n	800ae9e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	891a      	ldrh	r2, [r3, #8]
 800adda:	887b      	ldrh	r3, [r7, #2]
 800addc:	1ad3      	subs	r3, r2, r3
 800adde:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ade0:	887b      	ldrh	r3, [r7, #2]
 800ade2:	817b      	strh	r3, [r7, #10]
  q = p;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ade8:	e018      	b.n	800ae1c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	895b      	ldrh	r3, [r3, #10]
 800adee:	897a      	ldrh	r2, [r7, #10]
 800adf0:	1ad3      	subs	r3, r2, r3
 800adf2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	891a      	ldrh	r2, [r3, #8]
 800adf8:	893b      	ldrh	r3, [r7, #8]
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	b29a      	uxth	r2, r3
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d106      	bne.n	800ae1c <pbuf_realloc+0x70>
 800ae0e:	4b26      	ldr	r3, [pc, #152]	@ (800aea8 <pbuf_realloc+0xfc>)
 800ae10:	f240 12af 	movw	r2, #431	@ 0x1af
 800ae14:	4927      	ldr	r1, [pc, #156]	@ (800aeb4 <pbuf_realloc+0x108>)
 800ae16:	4826      	ldr	r0, [pc, #152]	@ (800aeb0 <pbuf_realloc+0x104>)
 800ae18:	f00a fae6 	bl	80153e8 <iprintf>
  while (rem_len > q->len) {
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	895b      	ldrh	r3, [r3, #10]
 800ae20:	897a      	ldrh	r2, [r7, #10]
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d8e1      	bhi.n	800adea <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	7b1b      	ldrb	r3, [r3, #12]
 800ae2a:	f003 030f 	and.w	r3, r3, #15
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d121      	bne.n	800ae76 <pbuf_realloc+0xca>
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	895b      	ldrh	r3, [r3, #10]
 800ae36:	897a      	ldrh	r2, [r7, #10]
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d01c      	beq.n	800ae76 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	7b5b      	ldrb	r3, [r3, #13]
 800ae40:	f003 0302 	and.w	r3, r3, #2
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d116      	bne.n	800ae76 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	685a      	ldr	r2, [r3, #4]
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	1ad3      	subs	r3, r2, r3
 800ae50:	b29a      	uxth	r2, r3
 800ae52:	897b      	ldrh	r3, [r7, #10]
 800ae54:	4413      	add	r3, r2
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	4619      	mov	r1, r3
 800ae5a:	68f8      	ldr	r0, [r7, #12]
 800ae5c:	f7fe ff7e 	bl	8009d5c <mem_trim>
 800ae60:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d106      	bne.n	800ae76 <pbuf_realloc+0xca>
 800ae68:	4b0f      	ldr	r3, [pc, #60]	@ (800aea8 <pbuf_realloc+0xfc>)
 800ae6a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800ae6e:	4912      	ldr	r1, [pc, #72]	@ (800aeb8 <pbuf_realloc+0x10c>)
 800ae70:	480f      	ldr	r0, [pc, #60]	@ (800aeb0 <pbuf_realloc+0x104>)
 800ae72:	f00a fab9 	bl	80153e8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	897a      	ldrh	r2, [r7, #10]
 800ae7a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	895a      	ldrh	r2, [r3, #10]
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d004      	beq.n	800ae96 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4618      	mov	r0, r3
 800ae92:	f000 f92b 	bl	800b0ec <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	601a      	str	r2, [r3, #0]
 800ae9c:	e000      	b.n	800aea0 <pbuf_realloc+0xf4>
    return;
 800ae9e:	bf00      	nop

}
 800aea0:	3710      	adds	r7, #16
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	08016b40 	.word	0x08016b40
 800aeac:	08016d1c 	.word	0x08016d1c
 800aeb0:	08016ba0 	.word	0x08016ba0
 800aeb4:	08016d34 	.word	0x08016d34
 800aeb8:	08016d4c 	.word	0x08016d4c

0800aebc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b086      	sub	sp, #24
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	60f8      	str	r0, [r7, #12]
 800aec4:	60b9      	str	r1, [r7, #8]
 800aec6:	4613      	mov	r3, r2
 800aec8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d106      	bne.n	800aede <pbuf_add_header_impl+0x22>
 800aed0:	4b32      	ldr	r3, [pc, #200]	@ (800af9c <pbuf_add_header_impl+0xe0>)
 800aed2:	f240 12df 	movw	r2, #479	@ 0x1df
 800aed6:	4932      	ldr	r1, [pc, #200]	@ (800afa0 <pbuf_add_header_impl+0xe4>)
 800aed8:	4832      	ldr	r0, [pc, #200]	@ (800afa4 <pbuf_add_header_impl+0xe8>)
 800aeda:	f00a fa85 	bl	80153e8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d003      	beq.n	800aeec <pbuf_add_header_impl+0x30>
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aeea:	d301      	bcc.n	800aef0 <pbuf_add_header_impl+0x34>
    return 1;
 800aeec:	2301      	movs	r3, #1
 800aeee:	e051      	b.n	800af94 <pbuf_add_header_impl+0xd8>
  }
  if (header_size_increment == 0) {
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d101      	bne.n	800aefa <pbuf_add_header_impl+0x3e>
    return 0;
 800aef6:	2300      	movs	r3, #0
 800aef8:	e04c      	b.n	800af94 <pbuf_add_header_impl+0xd8>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	891a      	ldrh	r2, [r3, #8]
 800af02:	8a7b      	ldrh	r3, [r7, #18]
 800af04:	4413      	add	r3, r2
 800af06:	b29b      	uxth	r3, r3
 800af08:	8a7a      	ldrh	r2, [r7, #18]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d901      	bls.n	800af12 <pbuf_add_header_impl+0x56>
    return 1;
 800af0e:	2301      	movs	r3, #1
 800af10:	e040      	b.n	800af94 <pbuf_add_header_impl+0xd8>
  }

  type_internal = p->type_internal;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	7b1b      	ldrb	r3, [r3, #12]
 800af16:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800af18:	8a3b      	ldrh	r3, [r7, #16]
 800af1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d013      	beq.n	800af4a <pbuf_add_header_impl+0x8e>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	685a      	ldr	r2, [r3, #4]
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	425b      	negs	r3, r3
 800af2a:	4413      	add	r3, r2
 800af2c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	3310      	adds	r3, #16
 800af32:	697a      	ldr	r2, [r7, #20]
 800af34:	429a      	cmp	r2, r3
 800af36:	d214      	bcs.n	800af62 <pbuf_add_header_impl+0xa6>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	3310      	adds	r3, #16
 800af3c:	461a      	mov	r2, r3
 800af3e:	6979      	ldr	r1, [r7, #20]
 800af40:	4819      	ldr	r0, [pc, #100]	@ (800afa8 <pbuf_add_header_impl+0xec>)
 800af42:	f00a fa51 	bl	80153e8 <iprintf>
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800af46:	2301      	movs	r3, #1
 800af48:	e024      	b.n	800af94 <pbuf_add_header_impl+0xd8>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800af4a:	79fb      	ldrb	r3, [r7, #7]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d006      	beq.n	800af5e <pbuf_add_header_impl+0xa2>
      payload = (u8_t *)p->payload - header_size_increment;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	685a      	ldr	r2, [r3, #4]
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	425b      	negs	r3, r3
 800af58:	4413      	add	r3, r2
 800af5a:	617b      	str	r3, [r7, #20]
 800af5c:	e001      	b.n	800af62 <pbuf_add_header_impl+0xa6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800af5e:	2301      	movs	r3, #1
 800af60:	e018      	b.n	800af94 <pbuf_add_header_impl+0xd8>
    }
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	6859      	ldr	r1, [r3, #4]
 800af66:	8a7b      	ldrh	r3, [r7, #18]
 800af68:	697a      	ldr	r2, [r7, #20]
 800af6a:	4810      	ldr	r0, [pc, #64]	@ (800afac <pbuf_add_header_impl+0xf0>)
 800af6c:	f00a fa3c 	bl	80153e8 <iprintf>
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	697a      	ldr	r2, [r7, #20]
 800af74:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	895a      	ldrh	r2, [r3, #10]
 800af7a:	8a7b      	ldrh	r3, [r7, #18]
 800af7c:	4413      	add	r3, r2
 800af7e:	b29a      	uxth	r2, r3
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	891a      	ldrh	r2, [r3, #8]
 800af88:	8a7b      	ldrh	r3, [r7, #18]
 800af8a:	4413      	add	r3, r2
 800af8c:	b29a      	uxth	r2, r3
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	811a      	strh	r2, [r3, #8]


  return 0;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	3718      	adds	r7, #24
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	08016b40 	.word	0x08016b40
 800afa0:	08016d68 	.word	0x08016d68
 800afa4:	08016ba0 	.word	0x08016ba0
 800afa8:	08016d74 	.word	0x08016d74
 800afac:	08016dc0 	.word	0x08016dc0

0800afb0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800afba:	2200      	movs	r2, #0
 800afbc:	6839      	ldr	r1, [r7, #0]
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7ff ff7c 	bl	800aebc <pbuf_add_header_impl>
 800afc4:	4603      	mov	r3, r0
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3708      	adds	r7, #8
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
	...

0800afd0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b084      	sub	sp, #16
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d106      	bne.n	800afee <pbuf_remove_header+0x1e>
 800afe0:	4b23      	ldr	r3, [pc, #140]	@ (800b070 <pbuf_remove_header+0xa0>)
 800afe2:	f240 224b 	movw	r2, #587	@ 0x24b
 800afe6:	4923      	ldr	r1, [pc, #140]	@ (800b074 <pbuf_remove_header+0xa4>)
 800afe8:	4823      	ldr	r0, [pc, #140]	@ (800b078 <pbuf_remove_header+0xa8>)
 800afea:	f00a f9fd 	bl	80153e8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d003      	beq.n	800affc <pbuf_remove_header+0x2c>
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800affa:	d301      	bcc.n	800b000 <pbuf_remove_header+0x30>
    return 1;
 800affc:	2301      	movs	r3, #1
 800affe:	e033      	b.n	800b068 <pbuf_remove_header+0x98>
  }
  if (header_size_decrement == 0) {
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d101      	bne.n	800b00a <pbuf_remove_header+0x3a>
    return 0;
 800b006:	2300      	movs	r3, #0
 800b008:	e02e      	b.n	800b068 <pbuf_remove_header+0x98>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	895b      	ldrh	r3, [r3, #10]
 800b012:	89fa      	ldrh	r2, [r7, #14]
 800b014:	429a      	cmp	r2, r3
 800b016:	d908      	bls.n	800b02a <pbuf_remove_header+0x5a>
 800b018:	4b15      	ldr	r3, [pc, #84]	@ (800b070 <pbuf_remove_header+0xa0>)
 800b01a:	f240 2255 	movw	r2, #597	@ 0x255
 800b01e:	4917      	ldr	r1, [pc, #92]	@ (800b07c <pbuf_remove_header+0xac>)
 800b020:	4815      	ldr	r0, [pc, #84]	@ (800b078 <pbuf_remove_header+0xa8>)
 800b022:	f00a f9e1 	bl	80153e8 <iprintf>
 800b026:	2301      	movs	r3, #1
 800b028:	e01e      	b.n	800b068 <pbuf_remove_header+0x98>

  /* remember current payload pointer */
  payload = p->payload;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	685a      	ldr	r2, [r3, #4]
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	441a      	add	r2, r3
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	895a      	ldrh	r2, [r3, #10]
 800b040:	89fb      	ldrh	r3, [r7, #14]
 800b042:	1ad3      	subs	r3, r2, r3
 800b044:	b29a      	uxth	r2, r3
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	891a      	ldrh	r2, [r3, #8]
 800b04e:	89fb      	ldrh	r3, [r7, #14]
 800b050:	1ad3      	subs	r3, r2, r3
 800b052:	b29a      	uxth	r2, r3
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	685a      	ldr	r2, [r3, #4]
 800b05c:	89fb      	ldrh	r3, [r7, #14]
 800b05e:	68b9      	ldr	r1, [r7, #8]
 800b060:	4807      	ldr	r0, [pc, #28]	@ (800b080 <pbuf_remove_header+0xb0>)
 800b062:	f00a f9c1 	bl	80153e8 <iprintf>
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b066:	2300      	movs	r3, #0
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3710      	adds	r7, #16
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	08016b40 	.word	0x08016b40
 800b074:	08016d68 	.word	0x08016d68
 800b078:	08016ba0 	.word	0x08016ba0
 800b07c:	08016de8 	.word	0x08016de8
 800b080:	08016e08 	.word	0x08016e08

0800b084 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	460b      	mov	r3, r1
 800b08e:	807b      	strh	r3, [r7, #2]
 800b090:	4613      	mov	r3, r2
 800b092:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b094:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	da08      	bge.n	800b0ae <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b09c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b0a0:	425b      	negs	r3, r3
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f7ff ff93 	bl	800afd0 <pbuf_remove_header>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	e007      	b.n	800b0be <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b0ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b0b2:	787a      	ldrb	r2, [r7, #1]
 800b0b4:	4619      	mov	r1, r3
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f7ff ff00 	bl	800aebc <pbuf_add_header_impl>
 800b0bc:	4603      	mov	r3, r0
  }
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3708      	adds	r7, #8
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b082      	sub	sp, #8
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b0d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	4619      	mov	r1, r3
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f7ff ffd2 	bl	800b084 <pbuf_header_impl>
 800b0e0:	4603      	mov	r3, r0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3708      	adds	r7, #8
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
	...

0800b0ec <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b086      	sub	sp, #24
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d10e      	bne.n	800b118 <pbuf_free+0x2c>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d106      	bne.n	800b10e <pbuf_free+0x22>
 800b100:	4b40      	ldr	r3, [pc, #256]	@ (800b204 <pbuf_free+0x118>)
 800b102:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800b106:	4940      	ldr	r1, [pc, #256]	@ (800b208 <pbuf_free+0x11c>)
 800b108:	4840      	ldr	r0, [pc, #256]	@ (800b20c <pbuf_free+0x120>)
 800b10a:	f00a f96d 	bl	80153e8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 800b10e:	4840      	ldr	r0, [pc, #256]	@ (800b210 <pbuf_free+0x124>)
 800b110:	f00a f9da 	bl	80154c8 <puts>
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b114:	2300      	movs	r3, #0
 800b116:	e071      	b.n	800b1fc <pbuf_free+0x110>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));
 800b118:	6879      	ldr	r1, [r7, #4]
 800b11a:	483e      	ldr	r0, [pc, #248]	@ (800b214 <pbuf_free+0x128>)
 800b11c:	f00a f964 	bl	80153e8 <iprintf>

  PERF_START;

  count = 0;
 800b120:	2300      	movs	r3, #0
 800b122:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b124:	e066      	b.n	800b1f4 <pbuf_free+0x108>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	7b9b      	ldrb	r3, [r3, #14]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d106      	bne.n	800b13c <pbuf_free+0x50>
 800b12e:	4b35      	ldr	r3, [pc, #212]	@ (800b204 <pbuf_free+0x118>)
 800b130:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800b134:	4938      	ldr	r1, [pc, #224]	@ (800b218 <pbuf_free+0x12c>)
 800b136:	4835      	ldr	r0, [pc, #212]	@ (800b20c <pbuf_free+0x120>)
 800b138:	f00a f956 	bl	80153e8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	7b9b      	ldrb	r3, [r3, #14]
 800b140:	3b01      	subs	r3, #1
 800b142:	b2da      	uxtb	r2, r3
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	739a      	strb	r2, [r3, #14]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	7b9b      	ldrb	r3, [r3, #14]
 800b14c:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b14e:	7dbb      	ldrb	r3, [r7, #22]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d147      	bne.n	800b1e4 <pbuf_free+0xf8>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
 800b15a:	6879      	ldr	r1, [r7, #4]
 800b15c:	482f      	ldr	r0, [pc, #188]	@ (800b21c <pbuf_free+0x130>)
 800b15e:	f00a f943 	bl	80153e8 <iprintf>
      alloc_src = pbuf_get_allocsrc(p);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	7b1b      	ldrb	r3, [r3, #12]
 800b166:	f003 030f 	and.w	r3, r3, #15
 800b16a:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	7b5b      	ldrb	r3, [r3, #13]
 800b170:	f003 0302 	and.w	r3, r3, #2
 800b174:	2b00      	cmp	r3, #0
 800b176:	d011      	beq.n	800b19c <pbuf_free+0xb0>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	691b      	ldr	r3, [r3, #16]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d106      	bne.n	800b192 <pbuf_free+0xa6>
 800b184:	4b1f      	ldr	r3, [pc, #124]	@ (800b204 <pbuf_free+0x118>)
 800b186:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800b18a:	4925      	ldr	r1, [pc, #148]	@ (800b220 <pbuf_free+0x134>)
 800b18c:	481f      	ldr	r0, [pc, #124]	@ (800b20c <pbuf_free+0x120>)
 800b18e:	f00a f92b 	bl	80153e8 <iprintf>
        pc->custom_free_function(p);
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	691b      	ldr	r3, [r3, #16]
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	4798      	blx	r3
 800b19a:	e01d      	b.n	800b1d8 <pbuf_free+0xec>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b19c:	7bfb      	ldrb	r3, [r7, #15]
 800b19e:	2b02      	cmp	r3, #2
 800b1a0:	d104      	bne.n	800b1ac <pbuf_free+0xc0>
          memp_free(MEMP_PBUF_POOL, p);
 800b1a2:	6879      	ldr	r1, [r7, #4]
 800b1a4:	2008      	movs	r0, #8
 800b1a6:	f7ff f8df 	bl	800a368 <memp_free>
 800b1aa:	e015      	b.n	800b1d8 <pbuf_free+0xec>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b1ac:	7bfb      	ldrb	r3, [r7, #15]
 800b1ae:	2b01      	cmp	r3, #1
 800b1b0:	d104      	bne.n	800b1bc <pbuf_free+0xd0>
          memp_free(MEMP_PBUF, p);
 800b1b2:	6879      	ldr	r1, [r7, #4]
 800b1b4:	2007      	movs	r0, #7
 800b1b6:	f7ff f8d7 	bl	800a368 <memp_free>
 800b1ba:	e00d      	b.n	800b1d8 <pbuf_free+0xec>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b1bc:	7bfb      	ldrb	r3, [r7, #15]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d103      	bne.n	800b1ca <pbuf_free+0xde>
          mem_free(p);
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f7fe fd60 	bl	8009c88 <mem_free>
 800b1c8:	e006      	b.n	800b1d8 <pbuf_free+0xec>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b1ca:	4b0e      	ldr	r3, [pc, #56]	@ (800b204 <pbuf_free+0x118>)
 800b1cc:	f240 320f 	movw	r2, #783	@ 0x30f
 800b1d0:	4914      	ldr	r1, [pc, #80]	@ (800b224 <pbuf_free+0x138>)
 800b1d2:	480e      	ldr	r0, [pc, #56]	@ (800b20c <pbuf_free+0x120>)
 800b1d4:	f00a f908 	bl	80153e8 <iprintf>
        }
      }
      count++;
 800b1d8:	7dfb      	ldrb	r3, [r7, #23]
 800b1da:	3301      	adds	r3, #1
 800b1dc:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	607b      	str	r3, [r7, #4]
 800b1e2:	e007      	b.n	800b1f4 <pbuf_free+0x108>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
 800b1e4:	7dbb      	ldrb	r3, [r7, #22]
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	6879      	ldr	r1, [r7, #4]
 800b1ea:	480f      	ldr	r0, [pc, #60]	@ (800b228 <pbuf_free+0x13c>)
 800b1ec:	f00a f8fc 	bl	80153e8 <iprintf>
      /* stop walking through the chain */
      p = NULL;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d195      	bne.n	800b126 <pbuf_free+0x3a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b1fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3718      	adds	r7, #24
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}
 800b204:	08016b40 	.word	0x08016b40
 800b208:	08016d68 	.word	0x08016d68
 800b20c:	08016ba0 	.word	0x08016ba0
 800b210:	08016e34 	.word	0x08016e34
 800b214:	08016e58 	.word	0x08016e58
 800b218:	08016e68 	.word	0x08016e68
 800b21c:	08016e80 	.word	0x08016e80
 800b220:	08016e9c 	.word	0x08016e9c
 800b224:	08016ec0 	.word	0x08016ec0
 800b228:	08016ed4 	.word	0x08016ed4

0800b22c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b085      	sub	sp, #20
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b234:	2300      	movs	r3, #0
 800b236:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b238:	e005      	b.n	800b246 <pbuf_clen+0x1a>
    ++len;
 800b23a:	89fb      	ldrh	r3, [r7, #14]
 800b23c:	3301      	adds	r3, #1
 800b23e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d1f6      	bne.n	800b23a <pbuf_clen+0xe>
  }
  return len;
 800b24c:	89fb      	ldrh	r3, [r7, #14]
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3714      	adds	r7, #20
 800b252:	46bd      	mov	sp, r7
 800b254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b258:	4770      	bx	lr
	...

0800b25c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d010      	beq.n	800b28c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	7b9b      	ldrb	r3, [r3, #14]
 800b26e:	3301      	adds	r3, #1
 800b270:	b2da      	uxtb	r2, r3
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	7b9b      	ldrb	r3, [r3, #14]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d106      	bne.n	800b28c <pbuf_ref+0x30>
 800b27e:	4b05      	ldr	r3, [pc, #20]	@ (800b294 <pbuf_ref+0x38>)
 800b280:	f240 3242 	movw	r2, #834	@ 0x342
 800b284:	4904      	ldr	r1, [pc, #16]	@ (800b298 <pbuf_ref+0x3c>)
 800b286:	4805      	ldr	r0, [pc, #20]	@ (800b29c <pbuf_ref+0x40>)
 800b288:	f00a f8ae 	bl	80153e8 <iprintf>
  }
}
 800b28c:	bf00      	nop
 800b28e:	3708      	adds	r7, #8
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}
 800b294:	08016b40 	.word	0x08016b40
 800b298:	08016f00 	.word	0x08016f00
 800b29c:	08016ba0 	.word	0x08016ba0

0800b2a0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d002      	beq.n	800b2b6 <pbuf_cat+0x16>
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d107      	bne.n	800b2c6 <pbuf_cat+0x26>
 800b2b6:	4b20      	ldr	r3, [pc, #128]	@ (800b338 <pbuf_cat+0x98>)
 800b2b8:	f240 3259 	movw	r2, #857	@ 0x359
 800b2bc:	491f      	ldr	r1, [pc, #124]	@ (800b33c <pbuf_cat+0x9c>)
 800b2be:	4820      	ldr	r0, [pc, #128]	@ (800b340 <pbuf_cat+0xa0>)
 800b2c0:	f00a f892 	bl	80153e8 <iprintf>
 800b2c4:	e034      	b.n	800b330 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	60fb      	str	r3, [r7, #12]
 800b2ca:	e00a      	b.n	800b2e2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	891a      	ldrh	r2, [r3, #8]
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	891b      	ldrh	r3, [r3, #8]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	b29a      	uxth	r2, r3
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	60fb      	str	r3, [r7, #12]
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d1f0      	bne.n	800b2cc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	891a      	ldrh	r2, [r3, #8]
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	895b      	ldrh	r3, [r3, #10]
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d006      	beq.n	800b304 <pbuf_cat+0x64>
 800b2f6:	4b10      	ldr	r3, [pc, #64]	@ (800b338 <pbuf_cat+0x98>)
 800b2f8:	f240 3262 	movw	r2, #866	@ 0x362
 800b2fc:	4911      	ldr	r1, [pc, #68]	@ (800b344 <pbuf_cat+0xa4>)
 800b2fe:	4810      	ldr	r0, [pc, #64]	@ (800b340 <pbuf_cat+0xa0>)
 800b300:	f00a f872 	bl	80153e8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d006      	beq.n	800b31a <pbuf_cat+0x7a>
 800b30c:	4b0a      	ldr	r3, [pc, #40]	@ (800b338 <pbuf_cat+0x98>)
 800b30e:	f240 3263 	movw	r2, #867	@ 0x363
 800b312:	490d      	ldr	r1, [pc, #52]	@ (800b348 <pbuf_cat+0xa8>)
 800b314:	480a      	ldr	r0, [pc, #40]	@ (800b340 <pbuf_cat+0xa0>)
 800b316:	f00a f867 	bl	80153e8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	891a      	ldrh	r2, [r3, #8]
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	891b      	ldrh	r3, [r3, #8]
 800b322:	4413      	add	r3, r2
 800b324:	b29a      	uxth	r2, r3
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	683a      	ldr	r2, [r7, #0]
 800b32e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	08016b40 	.word	0x08016b40
 800b33c:	08016f14 	.word	0x08016f14
 800b340:	08016ba0 	.word	0x08016ba0
 800b344:	08016f4c 	.word	0x08016f4c
 800b348:	08016f7c 	.word	0x08016f7c

0800b34c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b086      	sub	sp, #24
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b356:	2300      	movs	r3, #0
 800b358:	617b      	str	r3, [r7, #20]
 800b35a:	2300      	movs	r3, #0
 800b35c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
 800b35e:	683a      	ldr	r2, [r7, #0]
 800b360:	6879      	ldr	r1, [r7, #4]
 800b362:	4860      	ldr	r0, [pc, #384]	@ (800b4e4 <pbuf_copy+0x198>)
 800b364:	f00a f840 	bl	80153e8 <iprintf>
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d008      	beq.n	800b380 <pbuf_copy+0x34>
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d005      	beq.n	800b380 <pbuf_copy+0x34>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	891a      	ldrh	r2, [r3, #8]
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	891b      	ldrh	r3, [r3, #8]
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d209      	bcs.n	800b394 <pbuf_copy+0x48>
 800b380:	4b59      	ldr	r3, [pc, #356]	@ (800b4e8 <pbuf_copy+0x19c>)
 800b382:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800b386:	4959      	ldr	r1, [pc, #356]	@ (800b4ec <pbuf_copy+0x1a0>)
 800b388:	4859      	ldr	r0, [pc, #356]	@ (800b4f0 <pbuf_copy+0x1a4>)
 800b38a:	f00a f82d 	bl	80153e8 <iprintf>
 800b38e:	f06f 030f 	mvn.w	r3, #15
 800b392:	e0a2      	b.n	800b4da <pbuf_copy+0x18e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	895b      	ldrh	r3, [r3, #10]
 800b398:	461a      	mov	r2, r3
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	1ad2      	subs	r2, r2, r3
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	895b      	ldrh	r3, [r3, #10]
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	1acb      	subs	r3, r1, r3
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d306      	bcc.n	800b3ba <pbuf_copy+0x6e>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	895b      	ldrh	r3, [r3, #10]
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	1ad3      	subs	r3, r2, r3
 800b3b6:	60fb      	str	r3, [r7, #12]
 800b3b8:	e005      	b.n	800b3c6 <pbuf_copy+0x7a>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	895b      	ldrh	r3, [r3, #10]
 800b3be:	461a      	mov	r2, r3
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	1ad3      	subs	r3, r2, r3
 800b3c4:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	685a      	ldr	r2, [r3, #4]
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	18d0      	adds	r0, r2, r3
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	685a      	ldr	r2, [r3, #4]
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	4413      	add	r3, r2
 800b3d6:	68fa      	ldr	r2, [r7, #12]
 800b3d8:	4619      	mov	r1, r3
 800b3da:	f00a f9da 	bl	8015792 <memcpy>
    offset_to += len;
 800b3de:	697a      	ldr	r2, [r7, #20]
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	4413      	add	r3, r2
 800b3e4:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b3e6:	693a      	ldr	r2, [r7, #16]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	4413      	add	r3, r2
 800b3ec:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	895b      	ldrh	r3, [r3, #10]
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d906      	bls.n	800b408 <pbuf_copy+0xbc>
 800b3fa:	4b3b      	ldr	r3, [pc, #236]	@ (800b4e8 <pbuf_copy+0x19c>)
 800b3fc:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800b400:	493c      	ldr	r1, [pc, #240]	@ (800b4f4 <pbuf_copy+0x1a8>)
 800b402:	483b      	ldr	r0, [pc, #236]	@ (800b4f0 <pbuf_copy+0x1a4>)
 800b404:	f009 fff0 	bl	80153e8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	895b      	ldrh	r3, [r3, #10]
 800b40c:	461a      	mov	r2, r3
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	4293      	cmp	r3, r2
 800b412:	d906      	bls.n	800b422 <pbuf_copy+0xd6>
 800b414:	4b34      	ldr	r3, [pc, #208]	@ (800b4e8 <pbuf_copy+0x19c>)
 800b416:	f240 32da 	movw	r2, #986	@ 0x3da
 800b41a:	4937      	ldr	r1, [pc, #220]	@ (800b4f8 <pbuf_copy+0x1ac>)
 800b41c:	4834      	ldr	r0, [pc, #208]	@ (800b4f0 <pbuf_copy+0x1a4>)
 800b41e:	f009 ffe3 	bl	80153e8 <iprintf>
    if (offset_from >= p_from->len) {
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	895b      	ldrh	r3, [r3, #10]
 800b426:	461a      	mov	r2, r3
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d304      	bcc.n	800b438 <pbuf_copy+0xec>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b42e:	2300      	movs	r3, #0
 800b430:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	895b      	ldrh	r3, [r3, #10]
 800b43c:	461a      	mov	r2, r3
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	4293      	cmp	r3, r2
 800b442:	d114      	bne.n	800b46e <pbuf_copy+0x122>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b444:	2300      	movs	r3, #0
 800b446:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d10c      	bne.n	800b46e <pbuf_copy+0x122>
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d009      	beq.n	800b46e <pbuf_copy+0x122>
 800b45a:	4b23      	ldr	r3, [pc, #140]	@ (800b4e8 <pbuf_copy+0x19c>)
 800b45c:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800b460:	4926      	ldr	r1, [pc, #152]	@ (800b4fc <pbuf_copy+0x1b0>)
 800b462:	4823      	ldr	r0, [pc, #140]	@ (800b4f0 <pbuf_copy+0x1a4>)
 800b464:	f009 ffc0 	bl	80153e8 <iprintf>
 800b468:	f06f 030f 	mvn.w	r3, #15
 800b46c:	e035      	b.n	800b4da <pbuf_copy+0x18e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d013      	beq.n	800b49c <pbuf_copy+0x150>
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	895a      	ldrh	r2, [r3, #10]
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	891b      	ldrh	r3, [r3, #8]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d10d      	bne.n	800b49c <pbuf_copy+0x150>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d009      	beq.n	800b49c <pbuf_copy+0x150>
 800b488:	4b17      	ldr	r3, [pc, #92]	@ (800b4e8 <pbuf_copy+0x19c>)
 800b48a:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800b48e:	491c      	ldr	r1, [pc, #112]	@ (800b500 <pbuf_copy+0x1b4>)
 800b490:	4817      	ldr	r0, [pc, #92]	@ (800b4f0 <pbuf_copy+0x1a4>)
 800b492:	f009 ffa9 	bl	80153e8 <iprintf>
 800b496:	f06f 0305 	mvn.w	r3, #5
 800b49a:	e01e      	b.n	800b4da <pbuf_copy+0x18e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d013      	beq.n	800b4ca <pbuf_copy+0x17e>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	895a      	ldrh	r2, [r3, #10]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	891b      	ldrh	r3, [r3, #8]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d10d      	bne.n	800b4ca <pbuf_copy+0x17e>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d009      	beq.n	800b4ca <pbuf_copy+0x17e>
 800b4b6:	4b0c      	ldr	r3, [pc, #48]	@ (800b4e8 <pbuf_copy+0x19c>)
 800b4b8:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800b4bc:	4910      	ldr	r1, [pc, #64]	@ (800b500 <pbuf_copy+0x1b4>)
 800b4be:	480c      	ldr	r0, [pc, #48]	@ (800b4f0 <pbuf_copy+0x1a4>)
 800b4c0:	f009 ff92 	bl	80153e8 <iprintf>
 800b4c4:	f06f 0305 	mvn.w	r3, #5
 800b4c8:	e007      	b.n	800b4da <pbuf_copy+0x18e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	f47f af61 	bne.w	800b394 <pbuf_copy+0x48>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
 800b4d2:	480c      	ldr	r0, [pc, #48]	@ (800b504 <pbuf_copy+0x1b8>)
 800b4d4:	f009 fff8 	bl	80154c8 <puts>
  return ERR_OK;
 800b4d8:	2300      	movs	r3, #0
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3718      	adds	r7, #24
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	08017048 	.word	0x08017048
 800b4e8:	08016b40 	.word	0x08016b40
 800b4ec:	0801705c 	.word	0x0801705c
 800b4f0:	08016ba0 	.word	0x08016ba0
 800b4f4:	0801708c 	.word	0x0801708c
 800b4f8:	080170a4 	.word	0x080170a4
 800b4fc:	080170c0 	.word	0x080170c0
 800b500:	080170d0 	.word	0x080170d0
 800b504:	080170fc 	.word	0x080170fc

0800b508 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b088      	sub	sp, #32
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	4611      	mov	r1, r2
 800b514:	461a      	mov	r2, r3
 800b516:	460b      	mov	r3, r1
 800b518:	80fb      	strh	r3, [r7, #6]
 800b51a:	4613      	mov	r3, r2
 800b51c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b51e:	2300      	movs	r3, #0
 800b520:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b522:	2300      	movs	r3, #0
 800b524:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d108      	bne.n	800b53e <pbuf_copy_partial+0x36>
 800b52c:	4b2b      	ldr	r3, [pc, #172]	@ (800b5dc <pbuf_copy_partial+0xd4>)
 800b52e:	f240 420a 	movw	r2, #1034	@ 0x40a
 800b532:	492b      	ldr	r1, [pc, #172]	@ (800b5e0 <pbuf_copy_partial+0xd8>)
 800b534:	482b      	ldr	r0, [pc, #172]	@ (800b5e4 <pbuf_copy_partial+0xdc>)
 800b536:	f009 ff57 	bl	80153e8 <iprintf>
 800b53a:	2300      	movs	r3, #0
 800b53c:	e04a      	b.n	800b5d4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d108      	bne.n	800b556 <pbuf_copy_partial+0x4e>
 800b544:	4b25      	ldr	r3, [pc, #148]	@ (800b5dc <pbuf_copy_partial+0xd4>)
 800b546:	f240 420b 	movw	r2, #1035	@ 0x40b
 800b54a:	4927      	ldr	r1, [pc, #156]	@ (800b5e8 <pbuf_copy_partial+0xe0>)
 800b54c:	4825      	ldr	r0, [pc, #148]	@ (800b5e4 <pbuf_copy_partial+0xdc>)
 800b54e:	f009 ff4b 	bl	80153e8 <iprintf>
 800b552:	2300      	movs	r3, #0
 800b554:	e03e      	b.n	800b5d4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	61fb      	str	r3, [r7, #28]
 800b55a:	e034      	b.n	800b5c6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b55c:	88bb      	ldrh	r3, [r7, #4]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d00a      	beq.n	800b578 <pbuf_copy_partial+0x70>
 800b562:	69fb      	ldr	r3, [r7, #28]
 800b564:	895b      	ldrh	r3, [r3, #10]
 800b566:	88ba      	ldrh	r2, [r7, #4]
 800b568:	429a      	cmp	r2, r3
 800b56a:	d305      	bcc.n	800b578 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800b56c:	69fb      	ldr	r3, [r7, #28]
 800b56e:	895b      	ldrh	r3, [r3, #10]
 800b570:	88ba      	ldrh	r2, [r7, #4]
 800b572:	1ad3      	subs	r3, r2, r3
 800b574:	80bb      	strh	r3, [r7, #4]
 800b576:	e023      	b.n	800b5c0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800b578:	69fb      	ldr	r3, [r7, #28]
 800b57a:	895a      	ldrh	r2, [r3, #10]
 800b57c:	88bb      	ldrh	r3, [r7, #4]
 800b57e:	1ad3      	subs	r3, r2, r3
 800b580:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b582:	8b3a      	ldrh	r2, [r7, #24]
 800b584:	88fb      	ldrh	r3, [r7, #6]
 800b586:	429a      	cmp	r2, r3
 800b588:	d901      	bls.n	800b58e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b58a:	88fb      	ldrh	r3, [r7, #6]
 800b58c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b58e:	8b7b      	ldrh	r3, [r7, #26]
 800b590:	68ba      	ldr	r2, [r7, #8]
 800b592:	18d0      	adds	r0, r2, r3
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	685a      	ldr	r2, [r3, #4]
 800b598:	88bb      	ldrh	r3, [r7, #4]
 800b59a:	4413      	add	r3, r2
 800b59c:	8b3a      	ldrh	r2, [r7, #24]
 800b59e:	4619      	mov	r1, r3
 800b5a0:	f00a f8f7 	bl	8015792 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b5a4:	8afa      	ldrh	r2, [r7, #22]
 800b5a6:	8b3b      	ldrh	r3, [r7, #24]
 800b5a8:	4413      	add	r3, r2
 800b5aa:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b5ac:	8b7a      	ldrh	r2, [r7, #26]
 800b5ae:	8b3b      	ldrh	r3, [r7, #24]
 800b5b0:	4413      	add	r3, r2
 800b5b2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b5b4:	88fa      	ldrh	r2, [r7, #6]
 800b5b6:	8b3b      	ldrh	r3, [r7, #24]
 800b5b8:	1ad3      	subs	r3, r2, r3
 800b5ba:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b5c0:	69fb      	ldr	r3, [r7, #28]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	61fb      	str	r3, [r7, #28]
 800b5c6:	88fb      	ldrh	r3, [r7, #6]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d002      	beq.n	800b5d2 <pbuf_copy_partial+0xca>
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d1c4      	bne.n	800b55c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b5d2:	8afb      	ldrh	r3, [r7, #22]
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3720      	adds	r7, #32
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}
 800b5dc:	08016b40 	.word	0x08016b40
 800b5e0:	08017120 	.word	0x08017120
 800b5e4:	08016ba0 	.word	0x08016ba0
 800b5e8:	08017140 	.word	0x08017140

0800b5ec <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	603a      	str	r2, [r7, #0]
 800b5f6:	71fb      	strb	r3, [r7, #7]
 800b5f8:	460b      	mov	r3, r1
 800b5fa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	8919      	ldrh	r1, [r3, #8]
 800b600:	88ba      	ldrh	r2, [r7, #4]
 800b602:	79fb      	ldrb	r3, [r7, #7]
 800b604:	4618      	mov	r0, r3
 800b606:	f7ff fa45 	bl	800aa94 <pbuf_alloc>
 800b60a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d101      	bne.n	800b616 <pbuf_clone+0x2a>
    return NULL;
 800b612:	2300      	movs	r3, #0
 800b614:	e011      	b.n	800b63a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b616:	6839      	ldr	r1, [r7, #0]
 800b618:	68f8      	ldr	r0, [r7, #12]
 800b61a:	f7ff fe97 	bl	800b34c <pbuf_copy>
 800b61e:	4603      	mov	r3, r0
 800b620:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b622:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d006      	beq.n	800b638 <pbuf_clone+0x4c>
 800b62a:	4b06      	ldr	r3, [pc, #24]	@ (800b644 <pbuf_clone+0x58>)
 800b62c:	f240 5224 	movw	r2, #1316	@ 0x524
 800b630:	4905      	ldr	r1, [pc, #20]	@ (800b648 <pbuf_clone+0x5c>)
 800b632:	4806      	ldr	r0, [pc, #24]	@ (800b64c <pbuf_clone+0x60>)
 800b634:	f009 fed8 	bl	80153e8 <iprintf>
  return q;
 800b638:	68fb      	ldr	r3, [r7, #12]
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3710      	adds	r7, #16
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	08016b40 	.word	0x08016b40
 800b648:	0801724c 	.word	0x0801724c
 800b64c:	08016ba0 	.word	0x08016ba0

0800b650 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b654:	f009 fdc8 	bl	80151e8 <rand>
 800b658:	4603      	mov	r3, r0
 800b65a:	b29b      	uxth	r3, r3
 800b65c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b660:	b29b      	uxth	r3, r3
 800b662:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800b666:	b29a      	uxth	r2, r3
 800b668:	4b01      	ldr	r3, [pc, #4]	@ (800b670 <tcp_init+0x20>)
 800b66a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b66c:	bf00      	nop
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	2400007c 	.word	0x2400007c

0800b674 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b082      	sub	sp, #8
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	7d1b      	ldrb	r3, [r3, #20]
 800b680:	2b01      	cmp	r3, #1
 800b682:	d105      	bne.n	800b690 <tcp_free+0x1c>
 800b684:	4b06      	ldr	r3, [pc, #24]	@ (800b6a0 <tcp_free+0x2c>)
 800b686:	22d4      	movs	r2, #212	@ 0xd4
 800b688:	4906      	ldr	r1, [pc, #24]	@ (800b6a4 <tcp_free+0x30>)
 800b68a:	4807      	ldr	r0, [pc, #28]	@ (800b6a8 <tcp_free+0x34>)
 800b68c:	f009 feac 	bl	80153e8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b690:	6879      	ldr	r1, [r7, #4]
 800b692:	2001      	movs	r0, #1
 800b694:	f7fe fe68 	bl	800a368 <memp_free>
}
 800b698:	bf00      	nop
 800b69a:	3708      	adds	r7, #8
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}
 800b6a0:	080172d8 	.word	0x080172d8
 800b6a4:	08017308 	.word	0x08017308
 800b6a8:	0801731c 	.word	0x0801731c

0800b6ac <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	7d1b      	ldrb	r3, [r3, #20]
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d105      	bne.n	800b6c8 <tcp_free_listen+0x1c>
 800b6bc:	4b06      	ldr	r3, [pc, #24]	@ (800b6d8 <tcp_free_listen+0x2c>)
 800b6be:	22df      	movs	r2, #223	@ 0xdf
 800b6c0:	4906      	ldr	r1, [pc, #24]	@ (800b6dc <tcp_free_listen+0x30>)
 800b6c2:	4807      	ldr	r0, [pc, #28]	@ (800b6e0 <tcp_free_listen+0x34>)
 800b6c4:	f009 fe90 	bl	80153e8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b6c8:	6879      	ldr	r1, [r7, #4]
 800b6ca:	2002      	movs	r0, #2
 800b6cc:	f7fe fe4c 	bl	800a368 <memp_free>
}
 800b6d0:	bf00      	nop
 800b6d2:	3708      	adds	r7, #8
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	080172d8 	.word	0x080172d8
 800b6dc:	08017344 	.word	0x08017344
 800b6e0:	0801731c 	.word	0x0801731c

0800b6e4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b6e8:	f001 f8d0 	bl	800c88c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b6ec:	4b07      	ldr	r3, [pc, #28]	@ (800b70c <tcp_tmr+0x28>)
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	b2da      	uxtb	r2, r3
 800b6f4:	4b05      	ldr	r3, [pc, #20]	@ (800b70c <tcp_tmr+0x28>)
 800b6f6:	701a      	strb	r2, [r3, #0]
 800b6f8:	4b04      	ldr	r3, [pc, #16]	@ (800b70c <tcp_tmr+0x28>)
 800b6fa:	781b      	ldrb	r3, [r3, #0]
 800b6fc:	f003 0301 	and.w	r3, r3, #1
 800b700:	2b00      	cmp	r3, #0
 800b702:	d001      	beq.n	800b708 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b704:	f000 fd32 	bl	800c16c <tcp_slowtmr>
  }
}
 800b708:	bf00      	nop
 800b70a:	bd80      	pop	{r7, pc}
 800b70c:	240032e9 	.word	0x240032e9

0800b710 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d105      	bne.n	800b72c <tcp_remove_listener+0x1c>
 800b720:	4b0d      	ldr	r3, [pc, #52]	@ (800b758 <tcp_remove_listener+0x48>)
 800b722:	22ff      	movs	r2, #255	@ 0xff
 800b724:	490d      	ldr	r1, [pc, #52]	@ (800b75c <tcp_remove_listener+0x4c>)
 800b726:	480e      	ldr	r0, [pc, #56]	@ (800b760 <tcp_remove_listener+0x50>)
 800b728:	f009 fe5e 	bl	80153e8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	60fb      	str	r3, [r7, #12]
 800b730:	e00a      	b.n	800b748 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b736:	683a      	ldr	r2, [r7, #0]
 800b738:	429a      	cmp	r2, r3
 800b73a:	d102      	bne.n	800b742 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	2200      	movs	r2, #0
 800b740:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	68db      	ldr	r3, [r3, #12]
 800b746:	60fb      	str	r3, [r7, #12]
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d1f1      	bne.n	800b732 <tcp_remove_listener+0x22>
    }
  }
}
 800b74e:	bf00      	nop
 800b750:	bf00      	nop
 800b752:	3710      	adds	r7, #16
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}
 800b758:	080172d8 	.word	0x080172d8
 800b75c:	08017360 	.word	0x08017360
 800b760:	0801731c 	.word	0x0801731c

0800b764 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d106      	bne.n	800b780 <tcp_listen_closed+0x1c>
 800b772:	4b14      	ldr	r3, [pc, #80]	@ (800b7c4 <tcp_listen_closed+0x60>)
 800b774:	f240 1211 	movw	r2, #273	@ 0x111
 800b778:	4913      	ldr	r1, [pc, #76]	@ (800b7c8 <tcp_listen_closed+0x64>)
 800b77a:	4814      	ldr	r0, [pc, #80]	@ (800b7cc <tcp_listen_closed+0x68>)
 800b77c:	f009 fe34 	bl	80153e8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	7d1b      	ldrb	r3, [r3, #20]
 800b784:	2b01      	cmp	r3, #1
 800b786:	d006      	beq.n	800b796 <tcp_listen_closed+0x32>
 800b788:	4b0e      	ldr	r3, [pc, #56]	@ (800b7c4 <tcp_listen_closed+0x60>)
 800b78a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800b78e:	4910      	ldr	r1, [pc, #64]	@ (800b7d0 <tcp_listen_closed+0x6c>)
 800b790:	480e      	ldr	r0, [pc, #56]	@ (800b7cc <tcp_listen_closed+0x68>)
 800b792:	f009 fe29 	bl	80153e8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b796:	2301      	movs	r3, #1
 800b798:	60fb      	str	r3, [r7, #12]
 800b79a:	e00b      	b.n	800b7b4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b79c:	4a0d      	ldr	r2, [pc, #52]	@ (800b7d4 <tcp_listen_closed+0x70>)
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	6879      	ldr	r1, [r7, #4]
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f7ff ffb1 	bl	800b710 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	60fb      	str	r3, [r7, #12]
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2b03      	cmp	r3, #3
 800b7b8:	d9f0      	bls.n	800b79c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800b7ba:	bf00      	nop
 800b7bc:	bf00      	nop
 800b7be:	3710      	adds	r7, #16
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}
 800b7c4:	080172d8 	.word	0x080172d8
 800b7c8:	08017388 	.word	0x08017388
 800b7cc:	0801731c 	.word	0x0801731c
 800b7d0:	08017394 	.word	0x08017394
 800b7d4:	0801b1f8 	.word	0x0801b1f8

0800b7d8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b7d8:	b5b0      	push	{r4, r5, r7, lr}
 800b7da:	b088      	sub	sp, #32
 800b7dc:	af04      	add	r7, sp, #16
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d106      	bne.n	800b7f8 <tcp_close_shutdown+0x20>
 800b7ea:	4b63      	ldr	r3, [pc, #396]	@ (800b978 <tcp_close_shutdown+0x1a0>)
 800b7ec:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800b7f0:	4962      	ldr	r1, [pc, #392]	@ (800b97c <tcp_close_shutdown+0x1a4>)
 800b7f2:	4863      	ldr	r0, [pc, #396]	@ (800b980 <tcp_close_shutdown+0x1a8>)
 800b7f4:	f009 fdf8 	bl	80153e8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b7f8:	78fb      	ldrb	r3, [r7, #3]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d066      	beq.n	800b8cc <tcp_close_shutdown+0xf4>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	7d1b      	ldrb	r3, [r3, #20]
 800b802:	2b04      	cmp	r3, #4
 800b804:	d003      	beq.n	800b80e <tcp_close_shutdown+0x36>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	7d1b      	ldrb	r3, [r3, #20]
 800b80a:	2b07      	cmp	r3, #7
 800b80c:	d15e      	bne.n	800b8cc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b812:	2b00      	cmp	r3, #0
 800b814:	d104      	bne.n	800b820 <tcp_close_shutdown+0x48>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b81a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800b81e:	d055      	beq.n	800b8cc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	8b5b      	ldrh	r3, [r3, #26]
 800b824:	f003 0310 	and.w	r3, r3, #16
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d106      	bne.n	800b83a <tcp_close_shutdown+0x62>
 800b82c:	4b52      	ldr	r3, [pc, #328]	@ (800b978 <tcp_close_shutdown+0x1a0>)
 800b82e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800b832:	4954      	ldr	r1, [pc, #336]	@ (800b984 <tcp_close_shutdown+0x1ac>)
 800b834:	4852      	ldr	r0, [pc, #328]	@ (800b980 <tcp_close_shutdown+0x1a8>)
 800b836:	f009 fdd7 	bl	80153e8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800b842:	687d      	ldr	r5, [r7, #4]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	3304      	adds	r3, #4
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	8ad2      	ldrh	r2, [r2, #22]
 800b84c:	6879      	ldr	r1, [r7, #4]
 800b84e:	8b09      	ldrh	r1, [r1, #24]
 800b850:	9102      	str	r1, [sp, #8]
 800b852:	9201      	str	r2, [sp, #4]
 800b854:	9300      	str	r3, [sp, #0]
 800b856:	462b      	mov	r3, r5
 800b858:	4622      	mov	r2, r4
 800b85a:	4601      	mov	r1, r0
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f005 ff6b 	bl	8011738 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f001 fbac 	bl	800cfc0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b868:	4b47      	ldr	r3, [pc, #284]	@ (800b988 <tcp_close_shutdown+0x1b0>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	429a      	cmp	r2, r3
 800b870:	d105      	bne.n	800b87e <tcp_close_shutdown+0xa6>
 800b872:	4b45      	ldr	r3, [pc, #276]	@ (800b988 <tcp_close_shutdown+0x1b0>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	68db      	ldr	r3, [r3, #12]
 800b878:	4a43      	ldr	r2, [pc, #268]	@ (800b988 <tcp_close_shutdown+0x1b0>)
 800b87a:	6013      	str	r3, [r2, #0]
 800b87c:	e013      	b.n	800b8a6 <tcp_close_shutdown+0xce>
 800b87e:	4b42      	ldr	r3, [pc, #264]	@ (800b988 <tcp_close_shutdown+0x1b0>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	60fb      	str	r3, [r7, #12]
 800b884:	e00c      	b.n	800b8a0 <tcp_close_shutdown+0xc8>
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	68db      	ldr	r3, [r3, #12]
 800b88a:	687a      	ldr	r2, [r7, #4]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d104      	bne.n	800b89a <tcp_close_shutdown+0xc2>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	68da      	ldr	r2, [r3, #12]
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	60da      	str	r2, [r3, #12]
 800b898:	e005      	b.n	800b8a6 <tcp_close_shutdown+0xce>
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	68db      	ldr	r3, [r3, #12]
 800b89e:	60fb      	str	r3, [r7, #12]
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d1ef      	bne.n	800b886 <tcp_close_shutdown+0xae>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	60da      	str	r2, [r3, #12]
 800b8ac:	4b37      	ldr	r3, [pc, #220]	@ (800b98c <tcp_close_shutdown+0x1b4>)
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800b8b2:	4b37      	ldr	r3, [pc, #220]	@ (800b990 <tcp_close_shutdown+0x1b8>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d102      	bne.n	800b8c2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800b8bc:	f004 f974 	bl	800fba8 <tcp_trigger_input_pcb_close>
 800b8c0:	e002      	b.n	800b8c8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f7ff fed6 	bl	800b674 <tcp_free>
      }
      return ERR_OK;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	e050      	b.n	800b96e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	7d1b      	ldrb	r3, [r3, #20]
 800b8d0:	2b02      	cmp	r3, #2
 800b8d2:	d03b      	beq.n	800b94c <tcp_close_shutdown+0x174>
 800b8d4:	2b02      	cmp	r3, #2
 800b8d6:	dc44      	bgt.n	800b962 <tcp_close_shutdown+0x18a>
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d002      	beq.n	800b8e2 <tcp_close_shutdown+0x10a>
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	d02a      	beq.n	800b936 <tcp_close_shutdown+0x15e>
 800b8e0:	e03f      	b.n	800b962 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	8adb      	ldrh	r3, [r3, #22]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d021      	beq.n	800b92e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b8ea:	4b2a      	ldr	r3, [pc, #168]	@ (800b994 <tcp_close_shutdown+0x1bc>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d105      	bne.n	800b900 <tcp_close_shutdown+0x128>
 800b8f4:	4b27      	ldr	r3, [pc, #156]	@ (800b994 <tcp_close_shutdown+0x1bc>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	68db      	ldr	r3, [r3, #12]
 800b8fa:	4a26      	ldr	r2, [pc, #152]	@ (800b994 <tcp_close_shutdown+0x1bc>)
 800b8fc:	6013      	str	r3, [r2, #0]
 800b8fe:	e013      	b.n	800b928 <tcp_close_shutdown+0x150>
 800b900:	4b24      	ldr	r3, [pc, #144]	@ (800b994 <tcp_close_shutdown+0x1bc>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	60bb      	str	r3, [r7, #8]
 800b906:	e00c      	b.n	800b922 <tcp_close_shutdown+0x14a>
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	68db      	ldr	r3, [r3, #12]
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d104      	bne.n	800b91c <tcp_close_shutdown+0x144>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	68da      	ldr	r2, [r3, #12]
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	60da      	str	r2, [r3, #12]
 800b91a:	e005      	b.n	800b928 <tcp_close_shutdown+0x150>
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	68db      	ldr	r3, [r3, #12]
 800b920:	60bb      	str	r3, [r7, #8]
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d1ef      	bne.n	800b908 <tcp_close_shutdown+0x130>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f7ff fea0 	bl	800b674 <tcp_free>
      break;
 800b934:	e01a      	b.n	800b96c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f7ff ff14 	bl	800b764 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b93c:	6879      	ldr	r1, [r7, #4]
 800b93e:	4816      	ldr	r0, [pc, #88]	@ (800b998 <tcp_close_shutdown+0x1c0>)
 800b940:	f001 fbb0 	bl	800d0a4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f7ff feb1 	bl	800b6ac <tcp_free_listen>
      break;
 800b94a:	e00f      	b.n	800b96c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b94c:	6879      	ldr	r1, [r7, #4]
 800b94e:	480e      	ldr	r0, [pc, #56]	@ (800b988 <tcp_close_shutdown+0x1b0>)
 800b950:	f001 fba8 	bl	800d0a4 <tcp_pcb_remove>
 800b954:	4b0d      	ldr	r3, [pc, #52]	@ (800b98c <tcp_close_shutdown+0x1b4>)
 800b956:	2201      	movs	r2, #1
 800b958:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f7ff fe8a 	bl	800b674 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800b960:	e004      	b.n	800b96c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 f81a 	bl	800b99c <tcp_close_shutdown_fin>
 800b968:	4603      	mov	r3, r0
 800b96a:	e000      	b.n	800b96e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800b96c:	2300      	movs	r3, #0
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3710      	adds	r7, #16
 800b972:	46bd      	mov	sp, r7
 800b974:	bdb0      	pop	{r4, r5, r7, pc}
 800b976:	bf00      	nop
 800b978:	080172d8 	.word	0x080172d8
 800b97c:	080173ac 	.word	0x080173ac
 800b980:	0801731c 	.word	0x0801731c
 800b984:	080173cc 	.word	0x080173cc
 800b988:	240032e0 	.word	0x240032e0
 800b98c:	240032e8 	.word	0x240032e8
 800b990:	24003324 	.word	0x24003324
 800b994:	240032d8 	.word	0x240032d8
 800b998:	240032dc 	.word	0x240032dc

0800b99c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b084      	sub	sp, #16
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d106      	bne.n	800b9b8 <tcp_close_shutdown_fin+0x1c>
 800b9aa:	4b2e      	ldr	r3, [pc, #184]	@ (800ba64 <tcp_close_shutdown_fin+0xc8>)
 800b9ac:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800b9b0:	492d      	ldr	r1, [pc, #180]	@ (800ba68 <tcp_close_shutdown_fin+0xcc>)
 800b9b2:	482e      	ldr	r0, [pc, #184]	@ (800ba6c <tcp_close_shutdown_fin+0xd0>)
 800b9b4:	f009 fd18 	bl	80153e8 <iprintf>

  switch (pcb->state) {
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	7d1b      	ldrb	r3, [r3, #20]
 800b9bc:	2b07      	cmp	r3, #7
 800b9be:	d020      	beq.n	800ba02 <tcp_close_shutdown_fin+0x66>
 800b9c0:	2b07      	cmp	r3, #7
 800b9c2:	dc2b      	bgt.n	800ba1c <tcp_close_shutdown_fin+0x80>
 800b9c4:	2b03      	cmp	r3, #3
 800b9c6:	d002      	beq.n	800b9ce <tcp_close_shutdown_fin+0x32>
 800b9c8:	2b04      	cmp	r3, #4
 800b9ca:	d00d      	beq.n	800b9e8 <tcp_close_shutdown_fin+0x4c>
 800b9cc:	e026      	b.n	800ba1c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f004 ffb4 	bl	801093c <tcp_send_fin>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b9d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d11f      	bne.n	800ba20 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2205      	movs	r2, #5
 800b9e4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b9e6:	e01b      	b.n	800ba20 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f004 ffa7 	bl	801093c <tcp_send_fin>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b9f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d114      	bne.n	800ba24 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2205      	movs	r2, #5
 800b9fe:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ba00:	e010      	b.n	800ba24 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f004 ff9a 	bl	801093c <tcp_send_fin>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ba0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d109      	bne.n	800ba28 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2209      	movs	r2, #9
 800ba18:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ba1a:	e005      	b.n	800ba28 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	e01c      	b.n	800ba5a <tcp_close_shutdown_fin+0xbe>
      break;
 800ba20:	bf00      	nop
 800ba22:	e002      	b.n	800ba2a <tcp_close_shutdown_fin+0x8e>
      break;
 800ba24:	bf00      	nop
 800ba26:	e000      	b.n	800ba2a <tcp_close_shutdown_fin+0x8e>
      break;
 800ba28:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ba2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d103      	bne.n	800ba3a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f005 f8c0 	bl	8010bb8 <tcp_output>
 800ba38:	e00d      	b.n	800ba56 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ba3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ba42:	d108      	bne.n	800ba56 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	8b5b      	ldrh	r3, [r3, #26]
 800ba48:	f043 0308 	orr.w	r3, r3, #8
 800ba4c:	b29a      	uxth	r2, r3
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ba52:	2300      	movs	r3, #0
 800ba54:	e001      	b.n	800ba5a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ba56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3710      	adds	r7, #16
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop
 800ba64:	080172d8 	.word	0x080172d8
 800ba68:	08017388 	.word	0x08017388
 800ba6c:	0801731c 	.word	0x0801731c

0800ba70 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d109      	bne.n	800ba92 <tcp_close+0x22>
 800ba7e:	4b13      	ldr	r3, [pc, #76]	@ (800bacc <tcp_close+0x5c>)
 800ba80:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800ba84:	4912      	ldr	r1, [pc, #72]	@ (800bad0 <tcp_close+0x60>)
 800ba86:	4813      	ldr	r0, [pc, #76]	@ (800bad4 <tcp_close+0x64>)
 800ba88:	f009 fcae 	bl	80153e8 <iprintf>
 800ba8c:	f06f 030f 	mvn.w	r3, #15
 800ba90:	e017      	b.n	800bac2 <tcp_close+0x52>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
 800ba92:	4811      	ldr	r0, [pc, #68]	@ (800bad8 <tcp_close+0x68>)
 800ba94:	f009 fca8 	bl	80153e8 <iprintf>

  tcp_debug_print_state(pcb->state);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	7d1b      	ldrb	r3, [r3, #20]
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f001 fc87 	bl	800d3b0 <tcp_debug_print_state>

  if (pcb->state != LISTEN) {
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	7d1b      	ldrb	r3, [r3, #20]
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d006      	beq.n	800bab8 <tcp_close+0x48>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	8b5b      	ldrh	r3, [r3, #26]
 800baae:	f043 0310 	orr.w	r3, r3, #16
 800bab2:	b29a      	uxth	r2, r3
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800bab8:	2101      	movs	r1, #1
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f7ff fe8c 	bl	800b7d8 <tcp_close_shutdown>
 800bac0:	4603      	mov	r3, r0
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3708      	adds	r7, #8
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop
 800bacc:	080172d8 	.word	0x080172d8
 800bad0:	080173e8 	.word	0x080173e8
 800bad4:	0801731c 	.word	0x0801731c
 800bad8:	08017400 	.word	0x08017400

0800badc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b08e      	sub	sp, #56	@ 0x38
 800bae0:	af04      	add	r7, sp, #16
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d107      	bne.n	800bafc <tcp_abandon+0x20>
 800baec:	4b52      	ldr	r3, [pc, #328]	@ (800bc38 <tcp_abandon+0x15c>)
 800baee:	f240 223d 	movw	r2, #573	@ 0x23d
 800baf2:	4952      	ldr	r1, [pc, #328]	@ (800bc3c <tcp_abandon+0x160>)
 800baf4:	4852      	ldr	r0, [pc, #328]	@ (800bc40 <tcp_abandon+0x164>)
 800baf6:	f009 fc77 	bl	80153e8 <iprintf>
 800bafa:	e099      	b.n	800bc30 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	7d1b      	ldrb	r3, [r3, #20]
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d106      	bne.n	800bb12 <tcp_abandon+0x36>
 800bb04:	4b4c      	ldr	r3, [pc, #304]	@ (800bc38 <tcp_abandon+0x15c>)
 800bb06:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800bb0a:	494e      	ldr	r1, [pc, #312]	@ (800bc44 <tcp_abandon+0x168>)
 800bb0c:	484c      	ldr	r0, [pc, #304]	@ (800bc40 <tcp_abandon+0x164>)
 800bb0e:	f009 fc6b 	bl	80153e8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	7d1b      	ldrb	r3, [r3, #20]
 800bb16:	2b0a      	cmp	r3, #10
 800bb18:	d107      	bne.n	800bb2a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800bb1a:	6879      	ldr	r1, [r7, #4]
 800bb1c:	484a      	ldr	r0, [pc, #296]	@ (800bc48 <tcp_abandon+0x16c>)
 800bb1e:	f001 fac1 	bl	800d0a4 <tcp_pcb_remove>
    tcp_free(pcb);
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f7ff fda6 	bl	800b674 <tcp_free>
 800bb28:	e082      	b.n	800bc30 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb36:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb3c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb44:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	691b      	ldr	r3, [r3, #16]
 800bb4a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	7d1b      	ldrb	r3, [r3, #20]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d126      	bne.n	800bba2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	8adb      	ldrh	r3, [r3, #22]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d02e      	beq.n	800bbba <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bb5c:	4b3b      	ldr	r3, [pc, #236]	@ (800bc4c <tcp_abandon+0x170>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	687a      	ldr	r2, [r7, #4]
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d105      	bne.n	800bb72 <tcp_abandon+0x96>
 800bb66:	4b39      	ldr	r3, [pc, #228]	@ (800bc4c <tcp_abandon+0x170>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	68db      	ldr	r3, [r3, #12]
 800bb6c:	4a37      	ldr	r2, [pc, #220]	@ (800bc4c <tcp_abandon+0x170>)
 800bb6e:	6013      	str	r3, [r2, #0]
 800bb70:	e013      	b.n	800bb9a <tcp_abandon+0xbe>
 800bb72:	4b36      	ldr	r3, [pc, #216]	@ (800bc4c <tcp_abandon+0x170>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	61fb      	str	r3, [r7, #28]
 800bb78:	e00c      	b.n	800bb94 <tcp_abandon+0xb8>
 800bb7a:	69fb      	ldr	r3, [r7, #28]
 800bb7c:	68db      	ldr	r3, [r3, #12]
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d104      	bne.n	800bb8e <tcp_abandon+0xb2>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	68da      	ldr	r2, [r3, #12]
 800bb88:	69fb      	ldr	r3, [r7, #28]
 800bb8a:	60da      	str	r2, [r3, #12]
 800bb8c:	e005      	b.n	800bb9a <tcp_abandon+0xbe>
 800bb8e:	69fb      	ldr	r3, [r7, #28]
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	61fb      	str	r3, [r7, #28]
 800bb94:	69fb      	ldr	r3, [r7, #28]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d1ef      	bne.n	800bb7a <tcp_abandon+0x9e>
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	60da      	str	r2, [r3, #12]
 800bba0:	e00b      	b.n	800bbba <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	8adb      	ldrh	r3, [r3, #22]
 800bbaa:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bbac:	6879      	ldr	r1, [r7, #4]
 800bbae:	4828      	ldr	r0, [pc, #160]	@ (800bc50 <tcp_abandon+0x174>)
 800bbb0:	f001 fa78 	bl	800d0a4 <tcp_pcb_remove>
 800bbb4:	4b27      	ldr	r3, [pc, #156]	@ (800bc54 <tcp_abandon+0x178>)
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d004      	beq.n	800bbcc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f000 ff4a 	bl	800ca60 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d004      	beq.n	800bbde <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f000 ff41 	bl	800ca60 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d004      	beq.n	800bbf0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bbea:	4618      	mov	r0, r3
 800bbec:	f000 ff38 	bl	800ca60 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800bbf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d00e      	beq.n	800bc14 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800bbf6:	6879      	ldr	r1, [r7, #4]
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	3304      	adds	r3, #4
 800bbfc:	687a      	ldr	r2, [r7, #4]
 800bbfe:	8b12      	ldrh	r2, [r2, #24]
 800bc00:	9202      	str	r2, [sp, #8]
 800bc02:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800bc04:	9201      	str	r2, [sp, #4]
 800bc06:	9300      	str	r3, [sp, #0]
 800bc08:	460b      	mov	r3, r1
 800bc0a:	697a      	ldr	r2, [r7, #20]
 800bc0c:	69b9      	ldr	r1, [r7, #24]
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f005 fd92 	bl	8011738 <tcp_rst>
    }
    last_state = pcb->state;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	7d1b      	ldrb	r3, [r3, #20]
 800bc18:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f7ff fd2a 	bl	800b674 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d004      	beq.n	800bc30 <tcp_abandon+0x154>
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	f06f 010c 	mvn.w	r1, #12
 800bc2c:	68f8      	ldr	r0, [r7, #12]
 800bc2e:	4798      	blx	r3
  }
}
 800bc30:	3728      	adds	r7, #40	@ 0x28
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
 800bc36:	bf00      	nop
 800bc38:	080172d8 	.word	0x080172d8
 800bc3c:	08017434 	.word	0x08017434
 800bc40:	0801731c 	.word	0x0801731c
 800bc44:	08017450 	.word	0x08017450
 800bc48:	240032e4 	.word	0x240032e4
 800bc4c:	240032d8 	.word	0x240032d8
 800bc50:	240032e0 	.word	0x240032e0
 800bc54:	240032e8 	.word	0x240032e8

0800bc58 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800bc60:	2101      	movs	r1, #1
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f7ff ff3a 	bl	800badc <tcp_abandon>
}
 800bc68:	bf00      	nop
 800bc6a:	3708      	adds	r7, #8
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}

0800bc70 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b088      	sub	sp, #32
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	60f8      	str	r0, [r7, #12]
 800bc78:	60b9      	str	r1, [r7, #8]
 800bc7a:	4613      	mov	r3, r2
 800bc7c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800bc7e:	2304      	movs	r3, #4
 800bc80:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d101      	bne.n	800bc8c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800bc88:	4b41      	ldr	r3, [pc, #260]	@ (800bd90 <tcp_bind+0x120>)
 800bc8a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d109      	bne.n	800bca6 <tcp_bind+0x36>
 800bc92:	4b40      	ldr	r3, [pc, #256]	@ (800bd94 <tcp_bind+0x124>)
 800bc94:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800bc98:	493f      	ldr	r1, [pc, #252]	@ (800bd98 <tcp_bind+0x128>)
 800bc9a:	4840      	ldr	r0, [pc, #256]	@ (800bd9c <tcp_bind+0x12c>)
 800bc9c:	f009 fba4 	bl	80153e8 <iprintf>
 800bca0:	f06f 030f 	mvn.w	r3, #15
 800bca4:	e06f      	b.n	800bd86 <tcp_bind+0x116>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	7d1b      	ldrb	r3, [r3, #20]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d009      	beq.n	800bcc2 <tcp_bind+0x52>
 800bcae:	4b39      	ldr	r3, [pc, #228]	@ (800bd94 <tcp_bind+0x124>)
 800bcb0:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800bcb4:	493a      	ldr	r1, [pc, #232]	@ (800bda0 <tcp_bind+0x130>)
 800bcb6:	4839      	ldr	r0, [pc, #228]	@ (800bd9c <tcp_bind+0x12c>)
 800bcb8:	f009 fb96 	bl	80153e8 <iprintf>
 800bcbc:	f06f 0305 	mvn.w	r3, #5
 800bcc0:	e061      	b.n	800bd86 <tcp_bind+0x116>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800bcc2:	88fb      	ldrh	r3, [r7, #6]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d109      	bne.n	800bcdc <tcp_bind+0x6c>
    port = tcp_new_port();
 800bcc8:	f000 fa0a 	bl	800c0e0 <tcp_new_port>
 800bccc:	4603      	mov	r3, r0
 800bcce:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800bcd0:	88fb      	ldrh	r3, [r7, #6]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d135      	bne.n	800bd42 <tcp_bind+0xd2>
      return ERR_BUF;
 800bcd6:	f06f 0301 	mvn.w	r3, #1
 800bcda:	e054      	b.n	800bd86 <tcp_bind+0x116>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800bcdc:	2300      	movs	r3, #0
 800bcde:	61fb      	str	r3, [r7, #28]
 800bce0:	e02b      	b.n	800bd3a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800bce2:	4a30      	ldr	r2, [pc, #192]	@ (800bda4 <tcp_bind+0x134>)
 800bce4:	69fb      	ldr	r3, [r7, #28]
 800bce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	61bb      	str	r3, [r7, #24]
 800bcee:	e01e      	b.n	800bd2e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800bcf0:	69bb      	ldr	r3, [r7, #24]
 800bcf2:	8adb      	ldrh	r3, [r3, #22]
 800bcf4:	88fa      	ldrh	r2, [r7, #6]
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	d116      	bne.n	800bd28 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800bcfa:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d010      	beq.n	800bd22 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800bd00:	69bb      	ldr	r3, [r7, #24]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d00c      	beq.n	800bd22 <tcp_bind+0xb2>
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d009      	beq.n	800bd22 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d005      	beq.n	800bd22 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800bd16:	69bb      	ldr	r3, [r7, #24]
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d102      	bne.n	800bd28 <tcp_bind+0xb8>
              return ERR_USE;
 800bd22:	f06f 0307 	mvn.w	r3, #7
 800bd26:	e02e      	b.n	800bd86 <tcp_bind+0x116>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800bd28:	69bb      	ldr	r3, [r7, #24]
 800bd2a:	68db      	ldr	r3, [r3, #12]
 800bd2c:	61bb      	str	r3, [r7, #24]
 800bd2e:	69bb      	ldr	r3, [r7, #24]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d1dd      	bne.n	800bcf0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800bd34:	69fb      	ldr	r3, [r7, #28]
 800bd36:	3301      	adds	r3, #1
 800bd38:	61fb      	str	r3, [r7, #28]
 800bd3a:	69fa      	ldr	r2, [r7, #28]
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	dbcf      	blt.n	800bce2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d00c      	beq.n	800bd62 <tcp_bind+0xf2>
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d008      	beq.n	800bd62 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d002      	beq.n	800bd5c <tcp_bind+0xec>
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	e000      	b.n	800bd5e <tcp_bind+0xee>
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	68fa      	ldr	r2, [r7, #12]
 800bd60:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	88fa      	ldrh	r2, [r7, #6]
 800bd66:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800bd68:	4b0f      	ldr	r3, [pc, #60]	@ (800bda8 <tcp_bind+0x138>)
 800bd6a:	681a      	ldr	r2, [r3, #0]
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	60da      	str	r2, [r3, #12]
 800bd70:	4a0d      	ldr	r2, [pc, #52]	@ (800bda8 <tcp_bind+0x138>)
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	6013      	str	r3, [r2, #0]
 800bd76:	f005 ff29 	bl	8011bcc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
 800bd7a:	88fb      	ldrh	r3, [r7, #6]
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	480b      	ldr	r0, [pc, #44]	@ (800bdac <tcp_bind+0x13c>)
 800bd80:	f009 fb32 	bl	80153e8 <iprintf>
  return ERR_OK;
 800bd84:	2300      	movs	r3, #0
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3720      	adds	r7, #32
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
 800bd8e:	bf00      	nop
 800bd90:	0801b22c 	.word	0x0801b22c
 800bd94:	080172d8 	.word	0x080172d8
 800bd98:	08017484 	.word	0x08017484
 800bd9c:	0801731c 	.word	0x0801731c
 800bda0:	0801749c 	.word	0x0801749c
 800bda4:	0801b1f8 	.word	0x0801b1f8
 800bda8:	240032d8 	.word	0x240032d8
 800bdac:	080174c4 	.word	0x080174c4

0800bdb0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b084      	sub	sp, #16
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	60f8      	str	r0, [r7, #12]
 800bdb8:	60b9      	str	r1, [r7, #8]
 800bdba:	4613      	mov	r3, r2
 800bdbc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d106      	bne.n	800bdd2 <tcp_accept_null+0x22>
 800bdc4:	4b07      	ldr	r3, [pc, #28]	@ (800bde4 <tcp_accept_null+0x34>)
 800bdc6:	f240 320f 	movw	r2, #783	@ 0x30f
 800bdca:	4907      	ldr	r1, [pc, #28]	@ (800bde8 <tcp_accept_null+0x38>)
 800bdcc:	4807      	ldr	r0, [pc, #28]	@ (800bdec <tcp_accept_null+0x3c>)
 800bdce:	f009 fb0b 	bl	80153e8 <iprintf>

  tcp_abort(pcb);
 800bdd2:	68b8      	ldr	r0, [r7, #8]
 800bdd4:	f7ff ff40 	bl	800bc58 <tcp_abort>

  return ERR_ABRT;
 800bdd8:	f06f 030c 	mvn.w	r3, #12
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3710      	adds	r7, #16
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	080172d8 	.word	0x080172d8
 800bde8:	080174e0 	.word	0x080174e0
 800bdec:	0801731c 	.word	0x0801731c

0800bdf0 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800bdfc:	78fb      	ldrb	r3, [r7, #3]
 800bdfe:	2200      	movs	r2, #0
 800be00:	4619      	mov	r1, r3
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f000 f806 	bl	800be14 <tcp_listen_with_backlog_and_err>
 800be08:	4603      	mov	r3, r0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3708      	adds	r7, #8
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
	...

0800be14 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b088      	sub	sp, #32
 800be18:	af00      	add	r7, sp, #0
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	460b      	mov	r3, r1
 800be1e:	607a      	str	r2, [r7, #4]
 800be20:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800be22:	2300      	movs	r3, #0
 800be24:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d109      	bne.n	800be40 <tcp_listen_with_backlog_and_err+0x2c>
 800be2c:	4b47      	ldr	r3, [pc, #284]	@ (800bf4c <tcp_listen_with_backlog_and_err+0x138>)
 800be2e:	f240 3259 	movw	r2, #857	@ 0x359
 800be32:	4947      	ldr	r1, [pc, #284]	@ (800bf50 <tcp_listen_with_backlog_and_err+0x13c>)
 800be34:	4847      	ldr	r0, [pc, #284]	@ (800bf54 <tcp_listen_with_backlog_and_err+0x140>)
 800be36:	f009 fad7 	bl	80153e8 <iprintf>
 800be3a:	23f0      	movs	r3, #240	@ 0xf0
 800be3c:	76fb      	strb	r3, [r7, #27]
 800be3e:	e079      	b.n	800bf34 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	7d1b      	ldrb	r3, [r3, #20]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d009      	beq.n	800be5c <tcp_listen_with_backlog_and_err+0x48>
 800be48:	4b40      	ldr	r3, [pc, #256]	@ (800bf4c <tcp_listen_with_backlog_and_err+0x138>)
 800be4a:	f240 325a 	movw	r2, #858	@ 0x35a
 800be4e:	4942      	ldr	r1, [pc, #264]	@ (800bf58 <tcp_listen_with_backlog_and_err+0x144>)
 800be50:	4840      	ldr	r0, [pc, #256]	@ (800bf54 <tcp_listen_with_backlog_and_err+0x140>)
 800be52:	f009 fac9 	bl	80153e8 <iprintf>
 800be56:	23f1      	movs	r3, #241	@ 0xf1
 800be58:	76fb      	strb	r3, [r7, #27]
 800be5a:	e06b      	b.n	800bf34 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	7d1b      	ldrb	r3, [r3, #20]
 800be60:	2b01      	cmp	r3, #1
 800be62:	d104      	bne.n	800be6e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800be68:	23f7      	movs	r3, #247	@ 0xf7
 800be6a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800be6c:	e062      	b.n	800bf34 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800be6e:	2002      	movs	r0, #2
 800be70:	f7fe fa0a 	bl	800a288 <memp_malloc>
 800be74:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800be76:	69fb      	ldr	r3, [r7, #28]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d102      	bne.n	800be82 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800be7c:	23ff      	movs	r3, #255	@ 0xff
 800be7e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800be80:	e058      	b.n	800bf34 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	691a      	ldr	r2, [r3, #16]
 800be86:	69fb      	ldr	r3, [r7, #28]
 800be88:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	8ada      	ldrh	r2, [r3, #22]
 800be8e:	69fb      	ldr	r3, [r7, #28]
 800be90:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800be92:	69fb      	ldr	r3, [r7, #28]
 800be94:	2201      	movs	r2, #1
 800be96:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	7d5a      	ldrb	r2, [r3, #21]
 800be9c:	69fb      	ldr	r3, [r7, #28]
 800be9e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	7a5a      	ldrb	r2, [r3, #9]
 800bea4:	69fb      	ldr	r3, [r7, #28]
 800bea6:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800bea8:	69fb      	ldr	r3, [r7, #28]
 800beaa:	2200      	movs	r2, #0
 800beac:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	7ada      	ldrb	r2, [r3, #11]
 800beb2:	69fb      	ldr	r3, [r7, #28]
 800beb4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	7a9a      	ldrb	r2, [r3, #10]
 800beba:	69fb      	ldr	r3, [r7, #28]
 800bebc:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681a      	ldr	r2, [r3, #0]
 800bec2:	69fb      	ldr	r3, [r7, #28]
 800bec4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	8adb      	ldrh	r3, [r3, #22]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d021      	beq.n	800bf12 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800bece:	4b23      	ldr	r3, [pc, #140]	@ (800bf5c <tcp_listen_with_backlog_and_err+0x148>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	68fa      	ldr	r2, [r7, #12]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d105      	bne.n	800bee4 <tcp_listen_with_backlog_and_err+0xd0>
 800bed8:	4b20      	ldr	r3, [pc, #128]	@ (800bf5c <tcp_listen_with_backlog_and_err+0x148>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	68db      	ldr	r3, [r3, #12]
 800bede:	4a1f      	ldr	r2, [pc, #124]	@ (800bf5c <tcp_listen_with_backlog_and_err+0x148>)
 800bee0:	6013      	str	r3, [r2, #0]
 800bee2:	e013      	b.n	800bf0c <tcp_listen_with_backlog_and_err+0xf8>
 800bee4:	4b1d      	ldr	r3, [pc, #116]	@ (800bf5c <tcp_listen_with_backlog_and_err+0x148>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	617b      	str	r3, [r7, #20]
 800beea:	e00c      	b.n	800bf06 <tcp_listen_with_backlog_and_err+0xf2>
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	68db      	ldr	r3, [r3, #12]
 800bef0:	68fa      	ldr	r2, [r7, #12]
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d104      	bne.n	800bf00 <tcp_listen_with_backlog_and_err+0xec>
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	68da      	ldr	r2, [r3, #12]
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	60da      	str	r2, [r3, #12]
 800befe:	e005      	b.n	800bf0c <tcp_listen_with_backlog_and_err+0xf8>
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	617b      	str	r3, [r7, #20]
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d1ef      	bne.n	800beec <tcp_listen_with_backlog_and_err+0xd8>
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800bf12:	68f8      	ldr	r0, [r7, #12]
 800bf14:	f7ff fbae 	bl	800b674 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800bf18:	69fb      	ldr	r3, [r7, #28]
 800bf1a:	4a11      	ldr	r2, [pc, #68]	@ (800bf60 <tcp_listen_with_backlog_and_err+0x14c>)
 800bf1c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800bf1e:	4b11      	ldr	r3, [pc, #68]	@ (800bf64 <tcp_listen_with_backlog_and_err+0x150>)
 800bf20:	681a      	ldr	r2, [r3, #0]
 800bf22:	69fb      	ldr	r3, [r7, #28]
 800bf24:	60da      	str	r2, [r3, #12]
 800bf26:	4a0f      	ldr	r2, [pc, #60]	@ (800bf64 <tcp_listen_with_backlog_and_err+0x150>)
 800bf28:	69fb      	ldr	r3, [r7, #28]
 800bf2a:	6013      	str	r3, [r2, #0]
 800bf2c:	f005 fe4e 	bl	8011bcc <tcp_timer_needed>
  res = ERR_OK;
 800bf30:	2300      	movs	r3, #0
 800bf32:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d002      	beq.n	800bf40 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	7efa      	ldrb	r2, [r7, #27]
 800bf3e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800bf40:	69fb      	ldr	r3, [r7, #28]
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3720      	adds	r7, #32
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	080172d8 	.word	0x080172d8
 800bf50:	08017500 	.word	0x08017500
 800bf54:	0801731c 	.word	0x0801731c
 800bf58:	08017530 	.word	0x08017530
 800bf5c:	240032d8 	.word	0x240032d8
 800bf60:	0800bdb1 	.word	0x0800bdb1
 800bf64:	240032dc 	.word	0x240032dc

0800bf68 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d106      	bne.n	800bf84 <tcp_update_rcv_ann_wnd+0x1c>
 800bf76:	4b25      	ldr	r3, [pc, #148]	@ (800c00c <tcp_update_rcv_ann_wnd+0xa4>)
 800bf78:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800bf7c:	4924      	ldr	r1, [pc, #144]	@ (800c010 <tcp_update_rcv_ann_wnd+0xa8>)
 800bf7e:	4825      	ldr	r0, [pc, #148]	@ (800c014 <tcp_update_rcv_ann_wnd+0xac>)
 800bf80:	f009 fa32 	bl	80153e8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800bf8c:	4413      	add	r3, r2
 800bf8e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf94:	687a      	ldr	r2, [r7, #4]
 800bf96:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800bf98:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800bf9c:	bf28      	it	cs
 800bf9e:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800bfa2:	b292      	uxth	r2, r2
 800bfa4:	4413      	add	r3, r2
 800bfa6:	68fa      	ldr	r2, [r7, #12]
 800bfa8:	1ad3      	subs	r3, r2, r3
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	db08      	blt.n	800bfc0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfba:	68fa      	ldr	r2, [r7, #12]
 800bfbc:	1ad3      	subs	r3, r2, r3
 800bfbe:	e020      	b.n	800c002 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfc8:	1ad3      	subs	r3, r2, r3
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	dd03      	ble.n	800bfd6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bfd4:	e014      	b.n	800c000 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfde:	1ad3      	subs	r3, r2, r3
 800bfe0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bfe8:	d306      	bcc.n	800bff8 <tcp_update_rcv_ann_wnd+0x90>
 800bfea:	4b08      	ldr	r3, [pc, #32]	@ (800c00c <tcp_update_rcv_ann_wnd+0xa4>)
 800bfec:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800bff0:	4909      	ldr	r1, [pc, #36]	@ (800c018 <tcp_update_rcv_ann_wnd+0xb0>)
 800bff2:	4808      	ldr	r0, [pc, #32]	@ (800c014 <tcp_update_rcv_ann_wnd+0xac>)
 800bff4:	f009 f9f8 	bl	80153e8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	b29a      	uxth	r2, r3
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800c000:	2300      	movs	r3, #0
  }
}
 800c002:	4618      	mov	r0, r3
 800c004:	3710      	adds	r7, #16
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
 800c00a:	bf00      	nop
 800c00c:	080172d8 	.word	0x080172d8
 800c010:	08017568 	.word	0x08017568
 800c014:	0801731c 	.word	0x0801731c
 800c018:	0801758c 	.word	0x0801758c

0800c01c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b084      	sub	sp, #16
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	460b      	mov	r3, r1
 800c026:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d107      	bne.n	800c03e <tcp_recved+0x22>
 800c02e:	4b26      	ldr	r3, [pc, #152]	@ (800c0c8 <tcp_recved+0xac>)
 800c030:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800c034:	4925      	ldr	r1, [pc, #148]	@ (800c0cc <tcp_recved+0xb0>)
 800c036:	4826      	ldr	r0, [pc, #152]	@ (800c0d0 <tcp_recved+0xb4>)
 800c038:	f009 f9d6 	bl	80153e8 <iprintf>
 800c03c:	e041      	b.n	800c0c2 <tcp_recved+0xa6>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	7d1b      	ldrb	r3, [r3, #20]
 800c042:	2b01      	cmp	r3, #1
 800c044:	d106      	bne.n	800c054 <tcp_recved+0x38>
 800c046:	4b20      	ldr	r3, [pc, #128]	@ (800c0c8 <tcp_recved+0xac>)
 800c048:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800c04c:	4921      	ldr	r1, [pc, #132]	@ (800c0d4 <tcp_recved+0xb8>)
 800c04e:	4820      	ldr	r0, [pc, #128]	@ (800c0d0 <tcp_recved+0xb4>)
 800c050:	f009 f9ca 	bl	80153e8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c058:	887b      	ldrh	r3, [r7, #2]
 800c05a:	4413      	add	r3, r2
 800c05c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c05e:	89fb      	ldrh	r3, [r7, #14]
 800c060:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c064:	d804      	bhi.n	800c070 <tcp_recved+0x54>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c06a:	89fa      	ldrh	r2, [r7, #14]
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d207      	bcs.n	800c080 <tcp_recved+0x64>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
 800c070:	4819      	ldr	r0, [pc, #100]	@ (800c0d8 <tcp_recved+0xbc>)
 800c072:	f009 fa29 	bl	80154c8 <puts>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800c07c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c07e:	e002      	b.n	800c086 <tcp_recved+0x6a>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	89fa      	ldrh	r2, [r7, #14]
 800c084:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f7ff ff6e 	bl	800bf68 <tcp_update_rcv_ann_wnd>
 800c08c:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800c094:	d309      	bcc.n	800c0aa <tcp_recved+0x8e>
    tcp_ack_now(pcb);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	8b5b      	ldrh	r3, [r3, #26]
 800c09a:	f043 0302 	orr.w	r3, r3, #2
 800c09e:	b29a      	uxth	r2, r3
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f004 fd87 	bl	8010bb8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
 800c0aa:	8879      	ldrh	r1, [r7, #2]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c0b6:	f5c3 6306 	rsb	r3, r3, #2144	@ 0x860
 800c0ba:	b29b      	uxth	r3, r3
 800c0bc:	4807      	ldr	r0, [pc, #28]	@ (800c0dc <tcp_recved+0xc0>)
 800c0be:	f009 f993 	bl	80153e8 <iprintf>
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c0c2:	3710      	adds	r7, #16
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}
 800c0c8:	080172d8 	.word	0x080172d8
 800c0cc:	080175a8 	.word	0x080175a8
 800c0d0:	0801731c 	.word	0x0801731c
 800c0d4:	080175c0 	.word	0x080175c0
 800c0d8:	080175e8 	.word	0x080175e8
 800c0dc:	08017624 	.word	0x08017624

0800c0e0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b083      	sub	sp, #12
 800c0e4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800c0ea:	4b1e      	ldr	r3, [pc, #120]	@ (800c164 <tcp_new_port+0x84>)
 800c0ec:	881b      	ldrh	r3, [r3, #0]
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	b29a      	uxth	r2, r3
 800c0f2:	4b1c      	ldr	r3, [pc, #112]	@ (800c164 <tcp_new_port+0x84>)
 800c0f4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800c0f6:	4b1b      	ldr	r3, [pc, #108]	@ (800c164 <tcp_new_port+0x84>)
 800c0f8:	881b      	ldrh	r3, [r3, #0]
 800c0fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c0fe:	4293      	cmp	r3, r2
 800c100:	d103      	bne.n	800c10a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800c102:	4b18      	ldr	r3, [pc, #96]	@ (800c164 <tcp_new_port+0x84>)
 800c104:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800c108:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c10a:	2300      	movs	r3, #0
 800c10c:	71fb      	strb	r3, [r7, #7]
 800c10e:	e01e      	b.n	800c14e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c110:	79fb      	ldrb	r3, [r7, #7]
 800c112:	4a15      	ldr	r2, [pc, #84]	@ (800c168 <tcp_new_port+0x88>)
 800c114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	603b      	str	r3, [r7, #0]
 800c11c:	e011      	b.n	800c142 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	8ada      	ldrh	r2, [r3, #22]
 800c122:	4b10      	ldr	r3, [pc, #64]	@ (800c164 <tcp_new_port+0x84>)
 800c124:	881b      	ldrh	r3, [r3, #0]
 800c126:	429a      	cmp	r2, r3
 800c128:	d108      	bne.n	800c13c <tcp_new_port+0x5c>
        n++;
 800c12a:	88bb      	ldrh	r3, [r7, #4]
 800c12c:	3301      	adds	r3, #1
 800c12e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800c130:	88bb      	ldrh	r3, [r7, #4]
 800c132:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c136:	d3d8      	bcc.n	800c0ea <tcp_new_port+0xa>
          return 0;
 800c138:	2300      	movs	r3, #0
 800c13a:	e00d      	b.n	800c158 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	68db      	ldr	r3, [r3, #12]
 800c140:	603b      	str	r3, [r7, #0]
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d1ea      	bne.n	800c11e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c148:	79fb      	ldrb	r3, [r7, #7]
 800c14a:	3301      	adds	r3, #1
 800c14c:	71fb      	strb	r3, [r7, #7]
 800c14e:	79fb      	ldrb	r3, [r7, #7]
 800c150:	2b03      	cmp	r3, #3
 800c152:	d9dd      	bls.n	800c110 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800c154:	4b03      	ldr	r3, [pc, #12]	@ (800c164 <tcp_new_port+0x84>)
 800c156:	881b      	ldrh	r3, [r3, #0]
}
 800c158:	4618      	mov	r0, r3
 800c15a:	370c      	adds	r7, #12
 800c15c:	46bd      	mov	sp, r7
 800c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c162:	4770      	bx	lr
 800c164:	2400007c 	.word	0x2400007c
 800c168:	0801b1f8 	.word	0x0801b1f8

0800c16c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c16c:	b5b0      	push	{r4, r5, r7, lr}
 800c16e:	b092      	sub	sp, #72	@ 0x48
 800c170:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c172:	2300      	movs	r3, #0
 800c174:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

  ++tcp_ticks;
 800c178:	4b9e      	ldr	r3, [pc, #632]	@ (800c3f4 <tcp_slowtmr+0x288>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	3301      	adds	r3, #1
 800c17e:	4a9d      	ldr	r2, [pc, #628]	@ (800c3f4 <tcp_slowtmr+0x288>)
 800c180:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c182:	4b9d      	ldr	r3, [pc, #628]	@ (800c3f8 <tcp_slowtmr+0x28c>)
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	3301      	adds	r3, #1
 800c188:	b2da      	uxtb	r2, r3
 800c18a:	4b9b      	ldr	r3, [pc, #620]	@ (800c3f8 <tcp_slowtmr+0x28c>)
 800c18c:	701a      	strb	r2, [r3, #0]
 800c18e:	e000      	b.n	800c192 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800c190:	bf00      	nop
  prev = NULL;
 800c192:	2300      	movs	r3, #0
 800c194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pcb = tcp_active_pcbs;
 800c196:	4b99      	ldr	r3, [pc, #612]	@ (800c3fc <tcp_slowtmr+0x290>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (pcb == NULL) {
 800c19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	f040 82fc 	bne.w	800c79c <tcp_slowtmr+0x630>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
 800c1a4:	4896      	ldr	r0, [pc, #600]	@ (800c400 <tcp_slowtmr+0x294>)
 800c1a6:	f009 f98f 	bl	80154c8 <puts>
  while (pcb != NULL) {
 800c1aa:	e2f7      	b.n	800c79c <tcp_slowtmr+0x630>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
 800c1ac:	4895      	ldr	r0, [pc, #596]	@ (800c404 <tcp_slowtmr+0x298>)
 800c1ae:	f009 f98b 	bl	80154c8 <puts>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1b4:	7d1b      	ldrb	r3, [r3, #20]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d106      	bne.n	800c1c8 <tcp_slowtmr+0x5c>
 800c1ba:	4b93      	ldr	r3, [pc, #588]	@ (800c408 <tcp_slowtmr+0x29c>)
 800c1bc:	f240 42be 	movw	r2, #1214	@ 0x4be
 800c1c0:	4992      	ldr	r1, [pc, #584]	@ (800c40c <tcp_slowtmr+0x2a0>)
 800c1c2:	4893      	ldr	r0, [pc, #588]	@ (800c410 <tcp_slowtmr+0x2a4>)
 800c1c4:	f009 f910 	bl	80153e8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c1c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1ca:	7d1b      	ldrb	r3, [r3, #20]
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	d106      	bne.n	800c1de <tcp_slowtmr+0x72>
 800c1d0:	4b8d      	ldr	r3, [pc, #564]	@ (800c408 <tcp_slowtmr+0x29c>)
 800c1d2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800c1d6:	498f      	ldr	r1, [pc, #572]	@ (800c414 <tcp_slowtmr+0x2a8>)
 800c1d8:	488d      	ldr	r0, [pc, #564]	@ (800c410 <tcp_slowtmr+0x2a4>)
 800c1da:	f009 f905 	bl	80153e8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1e0:	7d1b      	ldrb	r3, [r3, #20]
 800c1e2:	2b0a      	cmp	r3, #10
 800c1e4:	d106      	bne.n	800c1f4 <tcp_slowtmr+0x88>
 800c1e6:	4b88      	ldr	r3, [pc, #544]	@ (800c408 <tcp_slowtmr+0x29c>)
 800c1e8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800c1ec:	498a      	ldr	r1, [pc, #552]	@ (800c418 <tcp_slowtmr+0x2ac>)
 800c1ee:	4888      	ldr	r0, [pc, #544]	@ (800c410 <tcp_slowtmr+0x2a4>)
 800c1f0:	f009 f8fa 	bl	80153e8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c1f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1f6:	7f9a      	ldrb	r2, [r3, #30]
 800c1f8:	4b7f      	ldr	r3, [pc, #508]	@ (800c3f8 <tcp_slowtmr+0x28c>)
 800c1fa:	781b      	ldrb	r3, [r3, #0]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d105      	bne.n	800c20c <tcp_slowtmr+0xa0>
      prev = pcb;
 800c200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c202:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pcb = pcb->next;
 800c204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c206:	68db      	ldr	r3, [r3, #12]
 800c208:	633b      	str	r3, [r7, #48]	@ 0x30
      continue;
 800c20a:	e2c7      	b.n	800c79c <tcp_slowtmr+0x630>
    pcb->last_timer = tcp_timer_ctr;
 800c20c:	4b7a      	ldr	r3, [pc, #488]	@ (800c3f8 <tcp_slowtmr+0x28c>)
 800c20e:	781a      	ldrb	r2, [r3, #0]
 800c210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c212:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800c214:	2300      	movs	r3, #0
 800c216:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    pcb_reset = 0;
 800c21a:	2300      	movs	r3, #0
 800c21c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c222:	7d1b      	ldrb	r3, [r3, #20]
 800c224:	2b02      	cmp	r3, #2
 800c226:	d10d      	bne.n	800c244 <tcp_slowtmr+0xd8>
 800c228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c22a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c22e:	2b05      	cmp	r3, #5
 800c230:	d908      	bls.n	800c244 <tcp_slowtmr+0xd8>
      ++pcb_remove;
 800c232:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c236:	3301      	adds	r3, #1
 800c238:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 800c23c:	4877      	ldr	r0, [pc, #476]	@ (800c41c <tcp_slowtmr+0x2b0>)
 800c23e:	f009 f943 	bl	80154c8 <puts>
 800c242:	e12b      	b.n	800c49c <tcp_slowtmr+0x330>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c246:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c24a:	2b0b      	cmp	r3, #11
 800c24c:	d908      	bls.n	800c260 <tcp_slowtmr+0xf4>
      ++pcb_remove;
 800c24e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c252:	3301      	adds	r3, #1
 800c254:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
 800c258:	4871      	ldr	r0, [pc, #452]	@ (800c420 <tcp_slowtmr+0x2b4>)
 800c25a:	f009 f935 	bl	80154c8 <puts>
 800c25e:	e11d      	b.n	800c49c <tcp_slowtmr+0x330>
      if (pcb->persist_backoff > 0) {
 800c260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c262:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c266:	2b00      	cmp	r3, #0
 800c268:	d075      	beq.n	800c356 <tcp_slowtmr+0x1ea>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c26c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d006      	beq.n	800c280 <tcp_slowtmr+0x114>
 800c272:	4b65      	ldr	r3, [pc, #404]	@ (800c408 <tcp_slowtmr+0x29c>)
 800c274:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800c278:	496a      	ldr	r1, [pc, #424]	@ (800c424 <tcp_slowtmr+0x2b8>)
 800c27a:	4865      	ldr	r0, [pc, #404]	@ (800c410 <tcp_slowtmr+0x2a4>)
 800c27c:	f009 f8b4 	bl	80153e8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c282:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c284:	2b00      	cmp	r3, #0
 800c286:	d106      	bne.n	800c296 <tcp_slowtmr+0x12a>
 800c288:	4b5f      	ldr	r3, [pc, #380]	@ (800c408 <tcp_slowtmr+0x29c>)
 800c28a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800c28e:	4966      	ldr	r1, [pc, #408]	@ (800c428 <tcp_slowtmr+0x2bc>)
 800c290:	485f      	ldr	r0, [pc, #380]	@ (800c410 <tcp_slowtmr+0x2a4>)
 800c292:	f009 f8a9 	bl	80153e8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c298:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c29c:	2b0b      	cmp	r3, #11
 800c29e:	d905      	bls.n	800c2ac <tcp_slowtmr+0x140>
          ++pcb_remove; /* max probes reached */
 800c2a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c2aa:	e0f7      	b.n	800c49c <tcp_slowtmr+0x330>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ae:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c2b2:	3b01      	subs	r3, #1
 800c2b4:	4a5d      	ldr	r2, [pc, #372]	@ (800c42c <tcp_slowtmr+0x2c0>)
 800c2b6:	5cd3      	ldrb	r3, [r2, r3]
 800c2b8:	757b      	strb	r3, [r7, #21]
          if (pcb->persist_cnt < backoff_cnt) {
 800c2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2bc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c2c0:	7d7a      	ldrb	r2, [r7, #21]
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d907      	bls.n	800c2d6 <tcp_slowtmr+0x16a>
            pcb->persist_cnt++;
 800c2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2c8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	b2da      	uxtb	r2, r3
 800c2d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2d2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800c2d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2d8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c2dc:	7d7a      	ldrb	r2, [r7, #21]
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	f200 80dc 	bhi.w	800c49c <tcp_slowtmr+0x330>
            int next_slot = 1; /* increment timer to next slot */
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	627b      	str	r3, [r7, #36]	@ 0x24
            if (pcb->snd_wnd == 0) {
 800c2e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d108      	bne.n	800c304 <tcp_slowtmr+0x198>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c2f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c2f4:	f005 fb58 	bl	80119a8 <tcp_zero_window_probe>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d014      	beq.n	800c328 <tcp_slowtmr+0x1bc>
                next_slot = 0; /* try probe again with current slot */
 800c2fe:	2300      	movs	r3, #0
 800c300:	627b      	str	r3, [r7, #36]	@ 0x24
 800c302:	e011      	b.n	800c328 <tcp_slowtmr+0x1bc>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c306:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c30a:	4619      	mov	r1, r3
 800c30c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c30e:	f004 f9c9 	bl	80106a4 <tcp_split_unsent_seg>
 800c312:	4603      	mov	r3, r0
 800c314:	2b00      	cmp	r3, #0
 800c316:	d107      	bne.n	800c328 <tcp_slowtmr+0x1bc>
                if (tcp_output(pcb) == ERR_OK) {
 800c318:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c31a:	f004 fc4d 	bl	8010bb8 <tcp_output>
 800c31e:	4603      	mov	r3, r0
 800c320:	2b00      	cmp	r3, #0
 800c322:	d101      	bne.n	800c328 <tcp_slowtmr+0x1bc>
                  next_slot = 0;
 800c324:	2300      	movs	r3, #0
 800c326:	627b      	str	r3, [r7, #36]	@ 0x24
            if (next_slot) {
 800c328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	f000 80b6 	beq.w	800c49c <tcp_slowtmr+0x330>
              pcb->persist_cnt = 0;
 800c330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c332:	2200      	movs	r2, #0
 800c334:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c33a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c33e:	2b06      	cmp	r3, #6
 800c340:	f200 80ac 	bhi.w	800c49c <tcp_slowtmr+0x330>
                pcb->persist_backoff++;
 800c344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c346:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c34a:	3301      	adds	r3, #1
 800c34c:	b2da      	uxtb	r2, r3
 800c34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c350:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800c354:	e0a2      	b.n	800c49c <tcp_slowtmr+0x330>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c358:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	db0f      	blt.n	800c380 <tcp_slowtmr+0x214>
 800c360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c362:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c366:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d008      	beq.n	800c380 <tcp_slowtmr+0x214>
          ++pcb->rtime;
 800c36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c370:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c374:	b29b      	uxth	r3, r3
 800c376:	3301      	adds	r3, #1
 800c378:	b29b      	uxth	r3, r3
 800c37a:	b21a      	sxth	r2, r3
 800c37c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c37e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800c380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c382:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800c386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c388:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800c38c:	429a      	cmp	r2, r3
 800c38e:	f2c0 8085 	blt.w	800c49c <tcp_slowtmr+0x330>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c392:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c394:	f004 ff06 	bl	80111a4 <tcp_rexmit_rto_prepare>
 800c398:	4603      	mov	r3, r0
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d007      	beq.n	800c3ae <tcp_slowtmr+0x242>
 800c39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d17a      	bne.n	800c49c <tcp_slowtmr+0x330>
 800c3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d076      	beq.n	800c49c <tcp_slowtmr+0x330>
            if (pcb->state != SYN_SENT) {
 800c3ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3b0:	7d1b      	ldrb	r3, [r3, #20]
 800c3b2:	2b02      	cmp	r3, #2
 800c3b4:	d043      	beq.n	800c43e <tcp_slowtmr+0x2d2>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c3bc:	2b0c      	cmp	r3, #12
 800c3be:	bf28      	it	cs
 800c3c0:	230c      	movcs	r3, #12
 800c3c2:	77fb      	strb	r3, [r7, #31]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c3c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3c6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c3ca:	10db      	asrs	r3, r3, #3
 800c3cc:	b21b      	sxth	r3, r3
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c3d6:	4413      	add	r3, r2
 800c3d8:	7ffa      	ldrb	r2, [r7, #31]
 800c3da:	4915      	ldr	r1, [pc, #84]	@ (800c430 <tcp_slowtmr+0x2c4>)
 800c3dc:	5c8a      	ldrb	r2, [r1, r2]
 800c3de:	4093      	lsls	r3, r2
 800c3e0:	61bb      	str	r3, [r7, #24]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c3e2:	69bb      	ldr	r3, [r7, #24]
 800c3e4:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	dc23      	bgt.n	800c434 <tcp_slowtmr+0x2c8>
 800c3ec:	69bb      	ldr	r3, [r7, #24]
 800c3ee:	b21a      	sxth	r2, r3
 800c3f0:	e022      	b.n	800c438 <tcp_slowtmr+0x2cc>
 800c3f2:	bf00      	nop
 800c3f4:	240032d4 	.word	0x240032d4
 800c3f8:	240032ea 	.word	0x240032ea
 800c3fc:	240032e0 	.word	0x240032e0
 800c400:	080176d8 	.word	0x080176d8
 800c404:	080176f4 	.word	0x080176f4
 800c408:	080172d8 	.word	0x080172d8
 800c40c:	08017718 	.word	0x08017718
 800c410:	0801731c 	.word	0x0801731c
 800c414:	08017744 	.word	0x08017744
 800c418:	08017770 	.word	0x08017770
 800c41c:	080177a0 	.word	0x080177a0
 800c420:	080177c8 	.word	0x080177c8
 800c424:	080177f0 	.word	0x080177f0
 800c428:	08017824 	.word	0x08017824
 800c42c:	0801b1f0 	.word	0x0801b1f0
 800c430:	0801b1e0 	.word	0x0801b1e0
 800c434:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c43a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800c43e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c440:	2200      	movs	r2, #0
 800c442:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c446:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800c44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c44c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c450:	4293      	cmp	r3, r2
 800c452:	bf28      	it	cs
 800c454:	4613      	movcs	r3, r2
 800c456:	82fb      	strh	r3, [r7, #22]
            pcb->ssthresh = eff_wnd >> 1;
 800c458:	8afb      	ldrh	r3, [r7, #22]
 800c45a:	085b      	lsrs	r3, r3, #1
 800c45c:	b29a      	uxth	r2, r3
 800c45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c460:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c466:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800c46a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c46c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c46e:	005b      	lsls	r3, r3, #1
 800c470:	b29b      	uxth	r3, r3
 800c472:	429a      	cmp	r2, r3
 800c474:	d206      	bcs.n	800c484 <tcp_slowtmr+0x318>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c478:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c47a:	005b      	lsls	r3, r3, #1
 800c47c:	b29a      	uxth	r2, r3
 800c47e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c480:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800c484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c486:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800c488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c48a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800c48e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c490:	2200      	movs	r2, #0
 800c492:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800c496:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c498:	f004 fefe 	bl	8011298 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800c49c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c49e:	7d1b      	ldrb	r3, [r3, #20]
 800c4a0:	2b06      	cmp	r3, #6
 800c4a2:	d114      	bne.n	800c4ce <tcp_slowtmr+0x362>
      if (pcb->flags & TF_RXCLOSED) {
 800c4a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4a6:	8b5b      	ldrh	r3, [r3, #26]
 800c4a8:	f003 0310 	and.w	r3, r3, #16
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d00e      	beq.n	800c4ce <tcp_slowtmr+0x362>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c4b0:	4b8e      	ldr	r3, [pc, #568]	@ (800c6ec <tcp_slowtmr+0x580>)
 800c4b2:	681a      	ldr	r2, [r3, #0]
 800c4b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4b6:	6a1b      	ldr	r3, [r3, #32]
 800c4b8:	1ad3      	subs	r3, r2, r3
 800c4ba:	2b28      	cmp	r3, #40	@ 0x28
 800c4bc:	d907      	bls.n	800c4ce <tcp_slowtmr+0x362>
          ++pcb_remove;
 800c4be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in FIN-WAIT-2\n"));
 800c4c8:	4889      	ldr	r0, [pc, #548]	@ (800c6f0 <tcp_slowtmr+0x584>)
 800c4ca:	f008 fffd 	bl	80154c8 <puts>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4d0:	7a5b      	ldrb	r3, [r3, #9]
 800c4d2:	f003 0308 	and.w	r3, r3, #8
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d067      	beq.n	800c5aa <tcp_slowtmr+0x43e>
        ((pcb->state == ESTABLISHED) ||
 800c4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4dc:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c4de:	2b04      	cmp	r3, #4
 800c4e0:	d003      	beq.n	800c4ea <tcp_slowtmr+0x37e>
         (pcb->state == CLOSE_WAIT))) {
 800c4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4e4:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c4e6:	2b07      	cmp	r3, #7
 800c4e8:	d15f      	bne.n	800c5aa <tcp_slowtmr+0x43e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c4ea:	4b80      	ldr	r3, [pc, #512]	@ (800c6ec <tcp_slowtmr+0x580>)
 800c4ec:	681a      	ldr	r2, [r3, #0]
 800c4ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4f0:	6a1b      	ldr	r3, [r3, #32]
 800c4f2:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4f6:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800c4fa:	4b7e      	ldr	r3, [pc, #504]	@ (800c6f4 <tcp_slowtmr+0x588>)
 800c4fc:	440b      	add	r3, r1
 800c4fe:	497e      	ldr	r1, [pc, #504]	@ (800c6f8 <tcp_slowtmr+0x58c>)
 800c500:	fba1 1303 	umull	r1, r3, r1, r3
 800c504:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c506:	429a      	cmp	r2, r3
 800c508:	d927      	bls.n	800c55a <tcp_slowtmr+0x3ee>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
 800c50a:	487c      	ldr	r0, [pc, #496]	@ (800c6fc <tcp_slowtmr+0x590>)
 800c50c:	f008 ff6c 	bl	80153e8 <iprintf>
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
 800c510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c512:	685b      	ldr	r3, [r3, #4]
 800c514:	b2db      	uxtb	r3, r3
 800c516:	4619      	mov	r1, r3
 800c518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	0a1b      	lsrs	r3, r3, #8
 800c51e:	b2db      	uxtb	r3, r3
 800c520:	461a      	mov	r2, r3
 800c522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c524:	685b      	ldr	r3, [r3, #4]
 800c526:	0c1b      	lsrs	r3, r3, #16
 800c528:	b2db      	uxtb	r3, r3
 800c52a:	4618      	mov	r0, r3
 800c52c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	0e1b      	lsrs	r3, r3, #24
 800c532:	b2db      	uxtb	r3, r3
 800c534:	9300      	str	r3, [sp, #0]
 800c536:	4603      	mov	r3, r0
 800c538:	4871      	ldr	r0, [pc, #452]	@ (800c700 <tcp_slowtmr+0x594>)
 800c53a:	f008 ff55 	bl	80153e8 <iprintf>
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));
 800c53e:	200a      	movs	r0, #10
 800c540:	f008 ff64 	bl	801540c <putchar>
        ++pcb_remove;
 800c544:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c548:	3301      	adds	r3, #1
 800c54a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        ++pcb_reset;
 800c54e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c552:	3301      	adds	r3, #1
 800c554:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c558:	e027      	b.n	800c5aa <tcp_slowtmr+0x43e>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c55a:	4b64      	ldr	r3, [pc, #400]	@ (800c6ec <tcp_slowtmr+0x580>)
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c560:	6a1b      	ldr	r3, [r3, #32]
 800c562:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c566:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800c56a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c56c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800c570:	4618      	mov	r0, r3
 800c572:	4b64      	ldr	r3, [pc, #400]	@ (800c704 <tcp_slowtmr+0x598>)
 800c574:	fb00 f303 	mul.w	r3, r0, r3
 800c578:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c57a:	495f      	ldr	r1, [pc, #380]	@ (800c6f8 <tcp_slowtmr+0x58c>)
 800c57c:	fba1 1303 	umull	r1, r3, r1, r3
 800c580:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c582:	429a      	cmp	r2, r3
 800c584:	d911      	bls.n	800c5aa <tcp_slowtmr+0x43e>
        err = tcp_keepalive(pcb);
 800c586:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c588:	f005 f98e 	bl	80118a8 <tcp_keepalive>
 800c58c:	4603      	mov	r3, r0
 800c58e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        if (err == ERR_OK) {
 800c592:	f997 302a 	ldrsb.w	r3, [r7, #42]	@ 0x2a
 800c596:	2b00      	cmp	r3, #0
 800c598:	d107      	bne.n	800c5aa <tcp_slowtmr+0x43e>
          pcb->keep_cnt_sent++;
 800c59a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c59c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800c5a0:	3301      	adds	r3, #1
 800c5a2:	b2da      	uxtb	r2, r3
 800c5a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5a6:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800c5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d011      	beq.n	800c5d6 <tcp_slowtmr+0x46a>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c5b2:	4b4e      	ldr	r3, [pc, #312]	@ (800c6ec <tcp_slowtmr+0x580>)
 800c5b4:	681a      	ldr	r2, [r3, #0]
 800c5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b8:	6a1b      	ldr	r3, [r3, #32]
 800c5ba:	1ad2      	subs	r2, r2, r3
 800c5bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5be:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800c5c2:	4619      	mov	r1, r3
 800c5c4:	460b      	mov	r3, r1
 800c5c6:	005b      	lsls	r3, r3, #1
 800c5c8:	440b      	add	r3, r1
 800c5ca:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d302      	bcc.n	800c5d6 <tcp_slowtmr+0x46a>
      tcp_free_ooseq(pcb);
 800c5d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5d2:	f000 fed9 	bl	800d388 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800c5d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5d8:	7d1b      	ldrb	r3, [r3, #20]
 800c5da:	2b03      	cmp	r3, #3
 800c5dc:	d10e      	bne.n	800c5fc <tcp_slowtmr+0x490>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c5de:	4b43      	ldr	r3, [pc, #268]	@ (800c6ec <tcp_slowtmr+0x580>)
 800c5e0:	681a      	ldr	r2, [r3, #0]
 800c5e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e4:	6a1b      	ldr	r3, [r3, #32]
 800c5e6:	1ad3      	subs	r3, r2, r3
 800c5e8:	2b28      	cmp	r3, #40	@ 0x28
 800c5ea:	d907      	bls.n	800c5fc <tcp_slowtmr+0x490>
        ++pcb_remove;
 800c5ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c5f0:	3301      	adds	r3, #1
 800c5f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
 800c5f6:	4844      	ldr	r0, [pc, #272]	@ (800c708 <tcp_slowtmr+0x59c>)
 800c5f8:	f008 ff66 	bl	80154c8 <puts>
    if (pcb->state == LAST_ACK) {
 800c5fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5fe:	7d1b      	ldrb	r3, [r3, #20]
 800c600:	2b09      	cmp	r3, #9
 800c602:	d10e      	bne.n	800c622 <tcp_slowtmr+0x4b6>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c604:	4b39      	ldr	r3, [pc, #228]	@ (800c6ec <tcp_slowtmr+0x580>)
 800c606:	681a      	ldr	r2, [r3, #0]
 800c608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c60a:	6a1b      	ldr	r3, [r3, #32]
 800c60c:	1ad3      	subs	r3, r2, r3
 800c60e:	2bf0      	cmp	r3, #240	@ 0xf0
 800c610:	d907      	bls.n	800c622 <tcp_slowtmr+0x4b6>
        ++pcb_remove;
 800c612:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c616:	3301      	adds	r3, #1
 800c618:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
 800c61c:	483b      	ldr	r0, [pc, #236]	@ (800c70c <tcp_slowtmr+0x5a0>)
 800c61e:	f008 ff53 	bl	80154c8 <puts>
    if (pcb_remove) {
 800c622:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c626:	2b00      	cmp	r3, #0
 800c628:	d07e      	beq.n	800c728 <tcp_slowtmr+0x5bc>
      tcp_err_fn err_fn = pcb->errf;
 800c62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c62c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c630:	613b      	str	r3, [r7, #16]
      tcp_pcb_purge(pcb);
 800c632:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c634:	f000 fcc4 	bl	800cfc0 <tcp_pcb_purge>
      if (prev != NULL) {
 800c638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d010      	beq.n	800c660 <tcp_slowtmr+0x4f4>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c63e:	4b34      	ldr	r3, [pc, #208]	@ (800c710 <tcp_slowtmr+0x5a4>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c644:	429a      	cmp	r2, r3
 800c646:	d106      	bne.n	800c656 <tcp_slowtmr+0x4ea>
 800c648:	4b32      	ldr	r3, [pc, #200]	@ (800c714 <tcp_slowtmr+0x5a8>)
 800c64a:	f240 526d 	movw	r2, #1389	@ 0x56d
 800c64e:	4932      	ldr	r1, [pc, #200]	@ (800c718 <tcp_slowtmr+0x5ac>)
 800c650:	4832      	ldr	r0, [pc, #200]	@ (800c71c <tcp_slowtmr+0x5b0>)
 800c652:	f008 fec9 	bl	80153e8 <iprintf>
        prev->next = pcb->next;
 800c656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c658:	68da      	ldr	r2, [r3, #12]
 800c65a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c65c:	60da      	str	r2, [r3, #12]
 800c65e:	e00f      	b.n	800c680 <tcp_slowtmr+0x514>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c660:	4b2b      	ldr	r3, [pc, #172]	@ (800c710 <tcp_slowtmr+0x5a4>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c666:	429a      	cmp	r2, r3
 800c668:	d006      	beq.n	800c678 <tcp_slowtmr+0x50c>
 800c66a:	4b2a      	ldr	r3, [pc, #168]	@ (800c714 <tcp_slowtmr+0x5a8>)
 800c66c:	f240 5271 	movw	r2, #1393	@ 0x571
 800c670:	492b      	ldr	r1, [pc, #172]	@ (800c720 <tcp_slowtmr+0x5b4>)
 800c672:	482a      	ldr	r0, [pc, #168]	@ (800c71c <tcp_slowtmr+0x5b0>)
 800c674:	f008 feb8 	bl	80153e8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800c678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c67a:	68db      	ldr	r3, [r3, #12]
 800c67c:	4a24      	ldr	r2, [pc, #144]	@ (800c710 <tcp_slowtmr+0x5a4>)
 800c67e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800c680:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c684:	2b00      	cmp	r3, #0
 800c686:	d013      	beq.n	800c6b0 <tcp_slowtmr+0x544>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c68a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800c68c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c68e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c690:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
 800c692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c694:	3304      	adds	r3, #4
 800c696:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c698:	8ad2      	ldrh	r2, [r2, #22]
 800c69a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c69c:	8b09      	ldrh	r1, [r1, #24]
 800c69e:	9102      	str	r1, [sp, #8]
 800c6a0:	9201      	str	r2, [sp, #4]
 800c6a2:	9300      	str	r3, [sp, #0]
 800c6a4:	462b      	mov	r3, r5
 800c6a6:	4622      	mov	r2, r4
 800c6a8:	4601      	mov	r1, r0
 800c6aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c6ac:	f005 f844 	bl	8011738 <tcp_rst>
      err_arg = pcb->callback_arg;
 800c6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6b2:	691b      	ldr	r3, [r3, #16]
 800c6b4:	60fb      	str	r3, [r7, #12]
      last_state = pcb->state;
 800c6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6b8:	7d1b      	ldrb	r3, [r3, #20]
 800c6ba:	72fb      	strb	r3, [r7, #11]
      pcb2 = pcb;
 800c6bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6be:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 800c6c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	633b      	str	r3, [r7, #48]	@ 0x30
      tcp_free(pcb2);
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f7fe ffd4 	bl	800b674 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800c6cc:	4b15      	ldr	r3, [pc, #84]	@ (800c724 <tcp_slowtmr+0x5b8>)
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d004      	beq.n	800c6e2 <tcp_slowtmr+0x576>
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	f06f 010c 	mvn.w	r1, #12
 800c6de:	68f8      	ldr	r0, [r7, #12]
 800c6e0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c6e2:	4b10      	ldr	r3, [pc, #64]	@ (800c724 <tcp_slowtmr+0x5b8>)
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d058      	beq.n	800c79c <tcp_slowtmr+0x630>
        goto tcp_slowtmr_start;
 800c6ea:	e552      	b.n	800c192 <tcp_slowtmr+0x26>
 800c6ec:	240032d4 	.word	0x240032d4
 800c6f0:	0801785c 	.word	0x0801785c
 800c6f4:	000a4cb8 	.word	0x000a4cb8
 800c6f8:	10624dd3 	.word	0x10624dd3
 800c6fc:	0801788c 	.word	0x0801788c
 800c700:	080178c4 	.word	0x080178c4
 800c704:	000124f8 	.word	0x000124f8
 800c708:	080178d4 	.word	0x080178d4
 800c70c:	08017900 	.word	0x08017900
 800c710:	240032e0 	.word	0x240032e0
 800c714:	080172d8 	.word	0x080172d8
 800c718:	0801792c 	.word	0x0801792c
 800c71c:	0801731c 	.word	0x0801731c
 800c720:	08017958 	.word	0x08017958
 800c724:	240032e8 	.word	0x240032e8
      prev = pcb;
 800c728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c72a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pcb = pcb->next;
 800c72c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c72e:	68db      	ldr	r3, [r3, #12]
 800c730:	633b      	str	r3, [r7, #48]	@ 0x30
      ++prev->polltmr;
 800c732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c734:	7f1b      	ldrb	r3, [r3, #28]
 800c736:	3301      	adds	r3, #1
 800c738:	b2da      	uxtb	r2, r3
 800c73a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c73c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c73e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c740:	7f1a      	ldrb	r2, [r3, #28]
 800c742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c744:	7f5b      	ldrb	r3, [r3, #29]
 800c746:	429a      	cmp	r2, r3
 800c748:	d328      	bcc.n	800c79c <tcp_slowtmr+0x630>
        prev->polltmr = 0;
 800c74a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c74c:	2200      	movs	r2, #0
 800c74e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
 800c750:	4845      	ldr	r0, [pc, #276]	@ (800c868 <tcp_slowtmr+0x6fc>)
 800c752:	f008 feb9 	bl	80154c8 <puts>
        tcp_active_pcbs_changed = 0;
 800c756:	4b45      	ldr	r3, [pc, #276]	@ (800c86c <tcp_slowtmr+0x700>)
 800c758:	2200      	movs	r2, #0
 800c75a:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c75c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c75e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c762:	2b00      	cmp	r3, #0
 800c764:	d00b      	beq.n	800c77e <tcp_slowtmr+0x612>
 800c766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c768:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c76c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c76e:	6912      	ldr	r2, [r2, #16]
 800c770:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c772:	4610      	mov	r0, r2
 800c774:	4798      	blx	r3
 800c776:	4603      	mov	r3, r0
 800c778:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c77c:	e002      	b.n	800c784 <tcp_slowtmr+0x618>
 800c77e:	2300      	movs	r3, #0
 800c780:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        if (tcp_active_pcbs_changed) {
 800c784:	4b39      	ldr	r3, [pc, #228]	@ (800c86c <tcp_slowtmr+0x700>)
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	f47f ad01 	bne.w	800c190 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c78e:	f997 302a 	ldrsb.w	r3, [r7, #42]	@ 0x2a
 800c792:	2b00      	cmp	r3, #0
 800c794:	d102      	bne.n	800c79c <tcp_slowtmr+0x630>
          tcp_output(prev);
 800c796:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c798:	f004 fa0e 	bl	8010bb8 <tcp_output>
  while (pcb != NULL) {
 800c79c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	f47f ad04 	bne.w	800c1ac <tcp_slowtmr+0x40>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pcb = tcp_tw_pcbs;
 800c7a8:	4b31      	ldr	r3, [pc, #196]	@ (800c870 <tcp_slowtmr+0x704>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	633b      	str	r3, [r7, #48]	@ 0x30
  while (pcb != NULL) {
 800c7ae:	e052      	b.n	800c856 <tcp_slowtmr+0x6ea>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7b2:	7d1b      	ldrb	r3, [r3, #20]
 800c7b4:	2b0a      	cmp	r3, #10
 800c7b6:	d006      	beq.n	800c7c6 <tcp_slowtmr+0x65a>
 800c7b8:	4b2e      	ldr	r3, [pc, #184]	@ (800c874 <tcp_slowtmr+0x708>)
 800c7ba:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800c7be:	492e      	ldr	r1, [pc, #184]	@ (800c878 <tcp_slowtmr+0x70c>)
 800c7c0:	482e      	ldr	r0, [pc, #184]	@ (800c87c <tcp_slowtmr+0x710>)
 800c7c2:	f008 fe11 	bl	80153e8 <iprintf>
    pcb_remove = 0;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c7cc:	4b2c      	ldr	r3, [pc, #176]	@ (800c880 <tcp_slowtmr+0x714>)
 800c7ce:	681a      	ldr	r2, [r3, #0]
 800c7d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7d2:	6a1b      	ldr	r3, [r3, #32]
 800c7d4:	1ad3      	subs	r3, r2, r3
 800c7d6:	2bf0      	cmp	r3, #240	@ 0xf0
 800c7d8:	d904      	bls.n	800c7e4 <tcp_slowtmr+0x678>
      ++pcb_remove;
 800c7da:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c7de:	3301      	adds	r3, #1
 800c7e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c7e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d02f      	beq.n	800c84c <tcp_slowtmr+0x6e0>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c7ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c7ee:	f000 fbe7 	bl	800cfc0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c7f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d010      	beq.n	800c81a <tcp_slowtmr+0x6ae>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c7f8:	4b1d      	ldr	r3, [pc, #116]	@ (800c870 <tcp_slowtmr+0x704>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7fe:	429a      	cmp	r2, r3
 800c800:	d106      	bne.n	800c810 <tcp_slowtmr+0x6a4>
 800c802:	4b1c      	ldr	r3, [pc, #112]	@ (800c874 <tcp_slowtmr+0x708>)
 800c804:	f240 52af 	movw	r2, #1455	@ 0x5af
 800c808:	491e      	ldr	r1, [pc, #120]	@ (800c884 <tcp_slowtmr+0x718>)
 800c80a:	481c      	ldr	r0, [pc, #112]	@ (800c87c <tcp_slowtmr+0x710>)
 800c80c:	f008 fdec 	bl	80153e8 <iprintf>
        prev->next = pcb->next;
 800c810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c812:	68da      	ldr	r2, [r3, #12]
 800c814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c816:	60da      	str	r2, [r3, #12]
 800c818:	e00f      	b.n	800c83a <tcp_slowtmr+0x6ce>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c81a:	4b15      	ldr	r3, [pc, #84]	@ (800c870 <tcp_slowtmr+0x704>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c820:	429a      	cmp	r2, r3
 800c822:	d006      	beq.n	800c832 <tcp_slowtmr+0x6c6>
 800c824:	4b13      	ldr	r3, [pc, #76]	@ (800c874 <tcp_slowtmr+0x708>)
 800c826:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800c82a:	4917      	ldr	r1, [pc, #92]	@ (800c888 <tcp_slowtmr+0x71c>)
 800c82c:	4813      	ldr	r0, [pc, #76]	@ (800c87c <tcp_slowtmr+0x710>)
 800c82e:	f008 fddb 	bl	80153e8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c834:	68db      	ldr	r3, [r3, #12]
 800c836:	4a0e      	ldr	r2, [pc, #56]	@ (800c870 <tcp_slowtmr+0x704>)
 800c838:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c83c:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800c83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c840:	68db      	ldr	r3, [r3, #12]
 800c842:	633b      	str	r3, [r7, #48]	@ 0x30
      tcp_free(pcb2);
 800c844:	6a38      	ldr	r0, [r7, #32]
 800c846:	f7fe ff15 	bl	800b674 <tcp_free>
 800c84a:	e004      	b.n	800c856 <tcp_slowtmr+0x6ea>
    } else {
      prev = pcb;
 800c84c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c84e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pcb = pcb->next;
 800c850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c852:	68db      	ldr	r3, [r3, #12]
 800c854:	633b      	str	r3, [r7, #48]	@ 0x30
  while (pcb != NULL) {
 800c856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d1a9      	bne.n	800c7b0 <tcp_slowtmr+0x644>
    }
  }
}
 800c85c:	bf00      	nop
 800c85e:	bf00      	nop
 800c860:	3738      	adds	r7, #56	@ 0x38
 800c862:	46bd      	mov	sp, r7
 800c864:	bdb0      	pop	{r4, r5, r7, pc}
 800c866:	bf00      	nop
 800c868:	08017984 	.word	0x08017984
 800c86c:	240032e8 	.word	0x240032e8
 800c870:	240032e4 	.word	0x240032e4
 800c874:	080172d8 	.word	0x080172d8
 800c878:	080179a8 	.word	0x080179a8
 800c87c:	0801731c 	.word	0x0801731c
 800c880:	240032d4 	.word	0x240032d4
 800c884:	080179d8 	.word	0x080179d8
 800c888:	08017a00 	.word	0x08017a00

0800c88c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c892:	4b30      	ldr	r3, [pc, #192]	@ (800c954 <tcp_fasttmr+0xc8>)
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	3301      	adds	r3, #1
 800c898:	b2da      	uxtb	r2, r3
 800c89a:	4b2e      	ldr	r3, [pc, #184]	@ (800c954 <tcp_fasttmr+0xc8>)
 800c89c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c89e:	4b2e      	ldr	r3, [pc, #184]	@ (800c958 <tcp_fasttmr+0xcc>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c8a4:	e04e      	b.n	800c944 <tcp_fasttmr+0xb8>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	7f9a      	ldrb	r2, [r3, #30]
 800c8aa:	4b2a      	ldr	r3, [pc, #168]	@ (800c954 <tcp_fasttmr+0xc8>)
 800c8ac:	781b      	ldrb	r3, [r3, #0]
 800c8ae:	429a      	cmp	r2, r3
 800c8b0:	d045      	beq.n	800c93e <tcp_fasttmr+0xb2>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c8b2:	4b28      	ldr	r3, [pc, #160]	@ (800c954 <tcp_fasttmr+0xc8>)
 800c8b4:	781a      	ldrb	r2, [r3, #0]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	8b5b      	ldrh	r3, [r3, #26]
 800c8be:	f003 0301 	and.w	r3, r3, #1
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d013      	beq.n	800c8ee <tcp_fasttmr+0x62>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
 800c8c6:	4825      	ldr	r0, [pc, #148]	@ (800c95c <tcp_fasttmr+0xd0>)
 800c8c8:	f008 fdfe 	bl	80154c8 <puts>
        tcp_ack_now(pcb);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	8b5b      	ldrh	r3, [r3, #26]
 800c8d0:	f043 0302 	orr.w	r3, r3, #2
 800c8d4:	b29a      	uxth	r2, r3
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f004 f96c 	bl	8010bb8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	8b5b      	ldrh	r3, [r3, #26]
 800c8e4:	f023 0303 	bic.w	r3, r3, #3
 800c8e8:	b29a      	uxth	r2, r3
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	8b5b      	ldrh	r3, [r3, #26]
 800c8f2:	f003 0308 	and.w	r3, r3, #8
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d00c      	beq.n	800c914 <tcp_fasttmr+0x88>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
 800c8fa:	4819      	ldr	r0, [pc, #100]	@ (800c960 <tcp_fasttmr+0xd4>)
 800c8fc:	f008 fde4 	bl	80154c8 <puts>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	8b5b      	ldrh	r3, [r3, #26]
 800c904:	f023 0308 	bic.w	r3, r3, #8
 800c908:	b29a      	uxth	r2, r3
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f7ff f844 	bl	800b99c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	68db      	ldr	r3, [r3, #12]
 800c918:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d00a      	beq.n	800c938 <tcp_fasttmr+0xac>
        tcp_active_pcbs_changed = 0;
 800c922:	4b10      	ldr	r3, [pc, #64]	@ (800c964 <tcp_fasttmr+0xd8>)
 800c924:	2200      	movs	r2, #0
 800c926:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f000 f81d 	bl	800c968 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c92e:	4b0d      	ldr	r3, [pc, #52]	@ (800c964 <tcp_fasttmr+0xd8>)
 800c930:	781b      	ldrb	r3, [r3, #0]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d000      	beq.n	800c938 <tcp_fasttmr+0xac>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c936:	e7b2      	b.n	800c89e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	607b      	str	r3, [r7, #4]
 800c93c:	e002      	b.n	800c944 <tcp_fasttmr+0xb8>
    } else {
      pcb = pcb->next;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	68db      	ldr	r3, [r3, #12]
 800c942:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d1ad      	bne.n	800c8a6 <tcp_fasttmr+0x1a>
    }
  }
}
 800c94a:	bf00      	nop
 800c94c:	bf00      	nop
 800c94e:	3708      	adds	r7, #8
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}
 800c954:	240032ea 	.word	0x240032ea
 800c958:	240032e0 	.word	0x240032e0
 800c95c:	08017a28 	.word	0x08017a28
 800c960:	08017a44 	.word	0x08017a44
 800c964:	240032e8 	.word	0x240032e8

0800c968 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c968:	b590      	push	{r4, r7, lr}
 800c96a:	b085      	sub	sp, #20
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d109      	bne.n	800c98a <tcp_process_refused_data+0x22>
 800c976:	4b37      	ldr	r3, [pc, #220]	@ (800ca54 <tcp_process_refused_data+0xec>)
 800c978:	f240 6209 	movw	r2, #1545	@ 0x609
 800c97c:	4936      	ldr	r1, [pc, #216]	@ (800ca58 <tcp_process_refused_data+0xf0>)
 800c97e:	4837      	ldr	r0, [pc, #220]	@ (800ca5c <tcp_process_refused_data+0xf4>)
 800c980:	f008 fd32 	bl	80153e8 <iprintf>
 800c984:	f06f 030f 	mvn.w	r3, #15
 800c988:	e060      	b.n	800ca4c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c98e:	7b5b      	ldrb	r3, [r3, #13]
 800c990:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c996:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2200      	movs	r2, #0
 800c99c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d00b      	beq.n	800c9c0 <tcp_process_refused_data+0x58>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6918      	ldr	r0, [r3, #16]
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	68ba      	ldr	r2, [r7, #8]
 800c9b6:	6879      	ldr	r1, [r7, #4]
 800c9b8:	47a0      	blx	r4
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	73fb      	strb	r3, [r7, #15]
 800c9be:	e007      	b.n	800c9d0 <tcp_process_refused_data+0x68>
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	68ba      	ldr	r2, [r7, #8]
 800c9c4:	6879      	ldr	r1, [r7, #4]
 800c9c6:	2000      	movs	r0, #0
 800c9c8:	f000 f8a6 	bl	800cb18 <tcp_recv_null>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c9d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d12a      	bne.n	800ca2e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c9d8:	7bbb      	ldrb	r3, [r7, #14]
 800c9da:	f003 0320 	and.w	r3, r3, #32
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d033      	beq.n	800ca4a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c9e6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c9ea:	d005      	beq.n	800c9f8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	b29a      	uxth	r2, r3
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d00b      	beq.n	800ca1a <tcp_process_refused_data+0xb2>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6918      	ldr	r0, [r3, #16]
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	2200      	movs	r2, #0
 800ca10:	6879      	ldr	r1, [r7, #4]
 800ca12:	47a0      	blx	r4
 800ca14:	4603      	mov	r3, r0
 800ca16:	73fb      	strb	r3, [r7, #15]
 800ca18:	e001      	b.n	800ca1e <tcp_process_refused_data+0xb6>
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ca1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca22:	f113 0f0d 	cmn.w	r3, #13
 800ca26:	d110      	bne.n	800ca4a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ca28:	f06f 030c 	mvn.w	r3, #12
 800ca2c:	e00e      	b.n	800ca4c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ca2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca32:	f113 0f0d 	cmn.w	r3, #13
 800ca36:	d102      	bne.n	800ca3e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ca38:	f06f 030c 	mvn.w	r3, #12
 800ca3c:	e006      	b.n	800ca4c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	68ba      	ldr	r2, [r7, #8]
 800ca42:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800ca44:	f06f 0304 	mvn.w	r3, #4
 800ca48:	e000      	b.n	800ca4c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ca4a:	2300      	movs	r3, #0
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3714      	adds	r7, #20
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd90      	pop	{r4, r7, pc}
 800ca54:	080172d8 	.word	0x080172d8
 800ca58:	08017a60 	.word	0x08017a60
 800ca5c:	0801731c 	.word	0x0801731c

0800ca60 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b084      	sub	sp, #16
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ca68:	e007      	b.n	800ca7a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f000 f80a 	bl	800ca8a <tcp_seg_free>
    seg = next;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d1f4      	bne.n	800ca6a <tcp_segs_free+0xa>
  }
}
 800ca80:	bf00      	nop
 800ca82:	bf00      	nop
 800ca84:	3710      	adds	r7, #16
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}

0800ca8a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ca8a:	b580      	push	{r7, lr}
 800ca8c:	b082      	sub	sp, #8
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d00f      	beq.n	800cab8 <tcp_seg_free+0x2e>
    if (seg->p != NULL) {
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	685b      	ldr	r3, [r3, #4]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d007      	beq.n	800cab0 <tcp_seg_free+0x26>
      pbuf_free(seg->p);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	4618      	mov	r0, r3
 800caa6:	f7fe fb21 	bl	800b0ec <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2200      	movs	r2, #0
 800caae:	605a      	str	r2, [r3, #4]
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800cab0:	6879      	ldr	r1, [r7, #4]
 800cab2:	2003      	movs	r0, #3
 800cab4:	f7fd fc58 	bl	800a368 <memp_free>
  }
}
 800cab8:	bf00      	nop
 800caba:	3708      	adds	r7, #8
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b084      	sub	sp, #16
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d106      	bne.n	800cadc <tcp_seg_copy+0x1c>
 800cace:	4b0f      	ldr	r3, [pc, #60]	@ (800cb0c <tcp_seg_copy+0x4c>)
 800cad0:	f240 6282 	movw	r2, #1666	@ 0x682
 800cad4:	490e      	ldr	r1, [pc, #56]	@ (800cb10 <tcp_seg_copy+0x50>)
 800cad6:	480f      	ldr	r0, [pc, #60]	@ (800cb14 <tcp_seg_copy+0x54>)
 800cad8:	f008 fc86 	bl	80153e8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800cadc:	2003      	movs	r0, #3
 800cade:	f7fd fbd3 	bl	800a288 <memp_malloc>
 800cae2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d101      	bne.n	800caee <tcp_seg_copy+0x2e>
    return NULL;
 800caea:	2300      	movs	r3, #0
 800caec:	e00a      	b.n	800cb04 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800caee:	2214      	movs	r2, #20
 800caf0:	6879      	ldr	r1, [r7, #4]
 800caf2:	68f8      	ldr	r0, [r7, #12]
 800caf4:	f008 fe4d 	bl	8015792 <memcpy>
  pbuf_ref(cseg->p);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	685b      	ldr	r3, [r3, #4]
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7fe fbad 	bl	800b25c <pbuf_ref>
  return cseg;
 800cb02:	68fb      	ldr	r3, [r7, #12]
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3710      	adds	r7, #16
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}
 800cb0c:	080172d8 	.word	0x080172d8
 800cb10:	08017aa4 	.word	0x08017aa4
 800cb14:	0801731c 	.word	0x0801731c

0800cb18 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b084      	sub	sp, #16
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	60f8      	str	r0, [r7, #12]
 800cb20:	60b9      	str	r1, [r7, #8]
 800cb22:	607a      	str	r2, [r7, #4]
 800cb24:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d109      	bne.n	800cb40 <tcp_recv_null+0x28>
 800cb2c:	4b12      	ldr	r3, [pc, #72]	@ (800cb78 <tcp_recv_null+0x60>)
 800cb2e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800cb32:	4912      	ldr	r1, [pc, #72]	@ (800cb7c <tcp_recv_null+0x64>)
 800cb34:	4812      	ldr	r0, [pc, #72]	@ (800cb80 <tcp_recv_null+0x68>)
 800cb36:	f008 fc57 	bl	80153e8 <iprintf>
 800cb3a:	f06f 030f 	mvn.w	r3, #15
 800cb3e:	e016      	b.n	800cb6e <tcp_recv_null+0x56>

  if (p != NULL) {
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d009      	beq.n	800cb5a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	891b      	ldrh	r3, [r3, #8]
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	68b8      	ldr	r0, [r7, #8]
 800cb4e:	f7ff fa65 	bl	800c01c <tcp_recved>
    pbuf_free(p);
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f7fe faca 	bl	800b0ec <pbuf_free>
 800cb58:	e008      	b.n	800cb6c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800cb5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d104      	bne.n	800cb6c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800cb62:	68b8      	ldr	r0, [r7, #8]
 800cb64:	f7fe ff84 	bl	800ba70 <tcp_close>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	e000      	b.n	800cb6e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800cb6c:	2300      	movs	r3, #0
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3710      	adds	r7, #16
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}
 800cb76:	bf00      	nop
 800cb78:	080172d8 	.word	0x080172d8
 800cb7c:	08017ac0 	.word	0x08017ac0
 800cb80:	0801731c 	.word	0x0801731c

0800cb84 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b086      	sub	sp, #24
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800cb8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	db01      	blt.n	800cb9a <tcp_kill_prio+0x16>
 800cb96:	79fb      	ldrb	r3, [r7, #7]
 800cb98:	e000      	b.n	800cb9c <tcp_kill_prio+0x18>
 800cb9a:	237f      	movs	r3, #127	@ 0x7f
 800cb9c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800cb9e:	7afb      	ldrb	r3, [r7, #11]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d039      	beq.n	800cc18 <tcp_kill_prio+0x94>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800cba4:	7afb      	ldrb	r3, [r7, #11]
 800cba6:	3b01      	subs	r3, #1
 800cba8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cbb2:	4b1b      	ldr	r3, [pc, #108]	@ (800cc20 <tcp_kill_prio+0x9c>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	617b      	str	r3, [r7, #20]
 800cbb8:	e01f      	b.n	800cbfa <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	7d5b      	ldrb	r3, [r3, #21]
 800cbbe:	7afa      	ldrb	r2, [r7, #11]
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d80c      	bhi.n	800cbde <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800cbc8:	7afa      	ldrb	r2, [r7, #11]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d112      	bne.n	800cbf4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cbce:	4b15      	ldr	r3, [pc, #84]	@ (800cc24 <tcp_kill_prio+0xa0>)
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	6a1b      	ldr	r3, [r3, #32]
 800cbd6:	1ad3      	subs	r3, r2, r3
 800cbd8:	68fa      	ldr	r2, [r7, #12]
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d80a      	bhi.n	800cbf4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800cbde:	4b11      	ldr	r3, [pc, #68]	@ (800cc24 <tcp_kill_prio+0xa0>)
 800cbe0:	681a      	ldr	r2, [r3, #0]
 800cbe2:	697b      	ldr	r3, [r7, #20]
 800cbe4:	6a1b      	ldr	r3, [r3, #32]
 800cbe6:	1ad3      	subs	r3, r2, r3
 800cbe8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800cbee:	697b      	ldr	r3, [r7, #20]
 800cbf0:	7d5b      	ldrb	r3, [r3, #21]
 800cbf2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	68db      	ldr	r3, [r3, #12]
 800cbf8:	617b      	str	r3, [r7, #20]
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d1dc      	bne.n	800cbba <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d009      	beq.n	800cc1a <tcp_kill_prio+0x96>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
 800cc06:	68fa      	ldr	r2, [r7, #12]
 800cc08:	6939      	ldr	r1, [r7, #16]
 800cc0a:	4807      	ldr	r0, [pc, #28]	@ (800cc28 <tcp_kill_prio+0xa4>)
 800cc0c:	f008 fbec 	bl	80153e8 <iprintf>
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cc10:	6938      	ldr	r0, [r7, #16]
 800cc12:	f7ff f821 	bl	800bc58 <tcp_abort>
 800cc16:	e000      	b.n	800cc1a <tcp_kill_prio+0x96>
    return;
 800cc18:	bf00      	nop
  }
}
 800cc1a:	3718      	adds	r7, #24
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}
 800cc20:	240032e0 	.word	0x240032e0
 800cc24:	240032d4 	.word	0x240032d4
 800cc28:	08017adc 	.word	0x08017adc

0800cc2c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b086      	sub	sp, #24
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	4603      	mov	r3, r0
 800cc34:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800cc36:	79fb      	ldrb	r3, [r7, #7]
 800cc38:	2b08      	cmp	r3, #8
 800cc3a:	d009      	beq.n	800cc50 <tcp_kill_state+0x24>
 800cc3c:	79fb      	ldrb	r3, [r7, #7]
 800cc3e:	2b09      	cmp	r3, #9
 800cc40:	d006      	beq.n	800cc50 <tcp_kill_state+0x24>
 800cc42:	4b1f      	ldr	r3, [pc, #124]	@ (800ccc0 <tcp_kill_state+0x94>)
 800cc44:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800cc48:	491e      	ldr	r1, [pc, #120]	@ (800ccc4 <tcp_kill_state+0x98>)
 800cc4a:	481f      	ldr	r0, [pc, #124]	@ (800ccc8 <tcp_kill_state+0x9c>)
 800cc4c:	f008 fbcc 	bl	80153e8 <iprintf>

  inactivity = 0;
 800cc50:	2300      	movs	r3, #0
 800cc52:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cc54:	2300      	movs	r3, #0
 800cc56:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc58:	4b1c      	ldr	r3, [pc, #112]	@ (800cccc <tcp_kill_state+0xa0>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	617b      	str	r3, [r7, #20]
 800cc5e:	e017      	b.n	800cc90 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800cc60:	697b      	ldr	r3, [r7, #20]
 800cc62:	7d1b      	ldrb	r3, [r3, #20]
 800cc64:	79fa      	ldrb	r2, [r7, #7]
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d10f      	bne.n	800cc8a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cc6a:	4b19      	ldr	r3, [pc, #100]	@ (800ccd0 <tcp_kill_state+0xa4>)
 800cc6c:	681a      	ldr	r2, [r3, #0]
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	6a1b      	ldr	r3, [r3, #32]
 800cc72:	1ad3      	subs	r3, r2, r3
 800cc74:	68fa      	ldr	r2, [r7, #12]
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d807      	bhi.n	800cc8a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800cc7a:	4b15      	ldr	r3, [pc, #84]	@ (800ccd0 <tcp_kill_state+0xa4>)
 800cc7c:	681a      	ldr	r2, [r3, #0]
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	6a1b      	ldr	r3, [r3, #32]
 800cc82:	1ad3      	subs	r3, r2, r3
 800cc84:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	68db      	ldr	r3, [r3, #12]
 800cc8e:	617b      	str	r3, [r7, #20]
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d1e4      	bne.n	800cc60 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d00c      	beq.n	800ccb6 <tcp_kill_state+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
 800cc9c:	79fb      	ldrb	r3, [r7, #7]
 800cc9e:	4a0d      	ldr	r2, [pc, #52]	@ (800ccd4 <tcp_kill_state+0xa8>)
 800cca0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	693a      	ldr	r2, [r7, #16]
 800cca8:	480b      	ldr	r0, [pc, #44]	@ (800ccd8 <tcp_kill_state+0xac>)
 800ccaa:	f008 fb9d 	bl	80153e8 <iprintf>
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ccae:	2100      	movs	r1, #0
 800ccb0:	6938      	ldr	r0, [r7, #16]
 800ccb2:	f7fe ff13 	bl	800badc <tcp_abandon>
  }
}
 800ccb6:	bf00      	nop
 800ccb8:	3718      	adds	r7, #24
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}
 800ccbe:	bf00      	nop
 800ccc0:	080172d8 	.word	0x080172d8
 800ccc4:	08017b08 	.word	0x08017b08
 800ccc8:	0801731c 	.word	0x0801731c
 800cccc:	240032e0 	.word	0x240032e0
 800ccd0:	240032d4 	.word	0x240032d4
 800ccd4:	0801b1b4 	.word	0x0801b1b4
 800ccd8:	08017b18 	.word	0x08017b18

0800ccdc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b084      	sub	sp, #16
 800cce0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800cce2:	2300      	movs	r3, #0
 800cce4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800cce6:	2300      	movs	r3, #0
 800cce8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ccea:	4b14      	ldr	r3, [pc, #80]	@ (800cd3c <tcp_kill_timewait+0x60>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	60fb      	str	r3, [r7, #12]
 800ccf0:	e012      	b.n	800cd18 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ccf2:	4b13      	ldr	r3, [pc, #76]	@ (800cd40 <tcp_kill_timewait+0x64>)
 800ccf4:	681a      	ldr	r2, [r3, #0]
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	6a1b      	ldr	r3, [r3, #32]
 800ccfa:	1ad3      	subs	r3, r2, r3
 800ccfc:	687a      	ldr	r2, [r7, #4]
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d807      	bhi.n	800cd12 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800cd02:	4b0f      	ldr	r3, [pc, #60]	@ (800cd40 <tcp_kill_timewait+0x64>)
 800cd04:	681a      	ldr	r2, [r3, #0]
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	6a1b      	ldr	r3, [r3, #32]
 800cd0a:	1ad3      	subs	r3, r2, r3
 800cd0c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	68db      	ldr	r3, [r3, #12]
 800cd16:	60fb      	str	r3, [r7, #12]
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d1e9      	bne.n	800ccf2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d007      	beq.n	800cd34 <tcp_kill_timewait+0x58>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	68b9      	ldr	r1, [r7, #8]
 800cd28:	4806      	ldr	r0, [pc, #24]	@ (800cd44 <tcp_kill_timewait+0x68>)
 800cd2a:	f008 fb5d 	bl	80153e8 <iprintf>
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cd2e:	68b8      	ldr	r0, [r7, #8]
 800cd30:	f7fe ff92 	bl	800bc58 <tcp_abort>
  }
}
 800cd34:	bf00      	nop
 800cd36:	3710      	adds	r7, #16
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}
 800cd3c:	240032e4 	.word	0x240032e4
 800cd40:	240032d4 	.word	0x240032d4
 800cd44:	08017b4c 	.word	0x08017b4c

0800cd48 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800cd4e:	4b12      	ldr	r3, [pc, #72]	@ (800cd98 <tcp_handle_closepend+0x50>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cd54:	e017      	b.n	800cd86 <tcp_handle_closepend+0x3e>
    struct tcp_pcb *next = pcb->next;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	68db      	ldr	r3, [r3, #12]
 800cd5a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	8b5b      	ldrh	r3, [r3, #26]
 800cd60:	f003 0308 	and.w	r3, r3, #8
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d00c      	beq.n	800cd82 <tcp_handle_closepend+0x3a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
 800cd68:	480c      	ldr	r0, [pc, #48]	@ (800cd9c <tcp_handle_closepend+0x54>)
 800cd6a:	f008 fbad 	bl	80154c8 <puts>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	8b5b      	ldrh	r3, [r3, #26]
 800cd72:	f023 0308 	bic.w	r3, r3, #8
 800cd76:	b29a      	uxth	r2, r3
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f7fe fe0d 	bl	800b99c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d1e4      	bne.n	800cd56 <tcp_handle_closepend+0xe>
  }
}
 800cd8c:	bf00      	nop
 800cd8e:	bf00      	nop
 800cd90:	3708      	adds	r7, #8
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
 800cd96:	bf00      	nop
 800cd98:	240032e0 	.word	0x240032e0
 800cd9c:	08017b88 	.word	0x08017b88

0800cda0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b084      	sub	sp, #16
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	4603      	mov	r3, r0
 800cda8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cdaa:	2001      	movs	r0, #1
 800cdac:	f7fd fa6c 	bl	800a288 <memp_malloc>
 800cdb0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d134      	bne.n	800ce22 <tcp_alloc+0x82>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800cdb8:	f7ff ffc6 	bl	800cd48 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
 800cdbc:	483d      	ldr	r0, [pc, #244]	@ (800ceb4 <tcp_alloc+0x114>)
 800cdbe:	f008 fb83 	bl	80154c8 <puts>
    tcp_kill_timewait();
 800cdc2:	f7ff ff8b 	bl	800ccdc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cdc6:	2001      	movs	r0, #1
 800cdc8:	f7fd fa5e 	bl	800a288 <memp_malloc>
 800cdcc:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d126      	bne.n	800ce22 <tcp_alloc+0x82>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
 800cdd4:	4838      	ldr	r0, [pc, #224]	@ (800ceb8 <tcp_alloc+0x118>)
 800cdd6:	f008 fb77 	bl	80154c8 <puts>
      tcp_kill_state(LAST_ACK);
 800cdda:	2009      	movs	r0, #9
 800cddc:	f7ff ff26 	bl	800cc2c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cde0:	2001      	movs	r0, #1
 800cde2:	f7fd fa51 	bl	800a288 <memp_malloc>
 800cde6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d119      	bne.n	800ce22 <tcp_alloc+0x82>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
 800cdee:	4833      	ldr	r0, [pc, #204]	@ (800cebc <tcp_alloc+0x11c>)
 800cdf0:	f008 fb6a 	bl	80154c8 <puts>
        tcp_kill_state(CLOSING);
 800cdf4:	2008      	movs	r0, #8
 800cdf6:	f7ff ff19 	bl	800cc2c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cdfa:	2001      	movs	r0, #1
 800cdfc:	f7fd fa44 	bl	800a288 <memp_malloc>
 800ce00:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d10c      	bne.n	800ce22 <tcp_alloc+0x82>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
 800ce08:	79fb      	ldrb	r3, [r7, #7]
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	482c      	ldr	r0, [pc, #176]	@ (800cec0 <tcp_alloc+0x120>)
 800ce0e:	f008 faeb 	bl	80153e8 <iprintf>
          tcp_kill_prio(prio);
 800ce12:	79fb      	ldrb	r3, [r7, #7]
 800ce14:	4618      	mov	r0, r3
 800ce16:	f7ff feb5 	bl	800cb84 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ce1a:	2001      	movs	r0, #1
 800ce1c:	f7fd fa34 	bl	800a288 <memp_malloc>
 800ce20:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d03f      	beq.n	800cea8 <tcp_alloc+0x108>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ce28:	229c      	movs	r2, #156	@ 0x9c
 800ce2a:	2100      	movs	r1, #0
 800ce2c:	68f8      	ldr	r0, [r7, #12]
 800ce2e:	f008 fc3b 	bl	80156a8 <memset>
    pcb->prio = prio;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	79fa      	ldrb	r2, [r7, #7]
 800ce36:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800ce3e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800ce48:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	22ff      	movs	r2, #255	@ 0xff
 800ce56:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800ce5e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	2206      	movs	r2, #6
 800ce64:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	2206      	movs	r2, #6
 800ce6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ce74:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2201      	movs	r2, #1
 800ce7a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800ce7e:	4b11      	ldr	r3, [pc, #68]	@ (800cec4 <tcp_alloc+0x124>)
 800ce80:	681a      	ldr	r2, [r3, #0]
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ce86:	4b10      	ldr	r3, [pc, #64]	@ (800cec8 <tcp_alloc+0x128>)
 800ce88:	781a      	ldrb	r2, [r3, #0]
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800ce94:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	4a0c      	ldr	r2, [pc, #48]	@ (800cecc <tcp_alloc+0x12c>)
 800ce9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	4a0b      	ldr	r2, [pc, #44]	@ (800ced0 <tcp_alloc+0x130>)
 800cea4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800cea8:	68fb      	ldr	r3, [r7, #12]
}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	3710      	adds	r7, #16
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}
 800ceb2:	bf00      	nop
 800ceb4:	08017bac 	.word	0x08017bac
 800ceb8:	08017be0 	.word	0x08017be0
 800cebc:	08017c14 	.word	0x08017c14
 800cec0:	08017c48 	.word	0x08017c48
 800cec4:	240032d4 	.word	0x240032d4
 800cec8:	240032ea 	.word	0x240032ea
 800cecc:	0800cb19 	.word	0x0800cb19
 800ced0:	006ddd00 	.word	0x006ddd00

0800ced4 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800ced8:	2040      	movs	r0, #64	@ 0x40
 800ceda:	f7ff ff61 	bl	800cda0 <tcp_alloc>
 800cede:	4603      	mov	r3, r0
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b083      	sub	sp, #12
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d002      	beq.n	800cefa <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	683a      	ldr	r2, [r7, #0]
 800cef8:	611a      	str	r2, [r3, #16]
  }
}
 800cefa:	bf00      	nop
 800cefc:	370c      	adds	r7, #12
 800cefe:	46bd      	mov	sp, r7
 800cf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf04:	4770      	bx	lr
	...

0800cf08 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d00e      	beq.n	800cf36 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	7d1b      	ldrb	r3, [r3, #20]
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	d106      	bne.n	800cf2e <tcp_recv+0x26>
 800cf20:	4b07      	ldr	r3, [pc, #28]	@ (800cf40 <tcp_recv+0x38>)
 800cf22:	f240 72df 	movw	r2, #2015	@ 0x7df
 800cf26:	4907      	ldr	r1, [pc, #28]	@ (800cf44 <tcp_recv+0x3c>)
 800cf28:	4807      	ldr	r0, [pc, #28]	@ (800cf48 <tcp_recv+0x40>)
 800cf2a:	f008 fa5d 	bl	80153e8 <iprintf>
    pcb->recv = recv;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	683a      	ldr	r2, [r7, #0]
 800cf32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800cf36:	bf00      	nop
 800cf38:	3708      	adds	r7, #8
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}
 800cf3e:	bf00      	nop
 800cf40:	080172d8 	.word	0x080172d8
 800cf44:	08017c88 	.word	0x08017c88
 800cf48:	0801731c 	.word	0x0801731c

0800cf4c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b082      	sub	sp, #8
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d00e      	beq.n	800cf7a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	7d1b      	ldrb	r3, [r3, #20]
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d106      	bne.n	800cf72 <tcp_err+0x26>
 800cf64:	4b07      	ldr	r3, [pc, #28]	@ (800cf84 <tcp_err+0x38>)
 800cf66:	f640 020d 	movw	r2, #2061	@ 0x80d
 800cf6a:	4907      	ldr	r1, [pc, #28]	@ (800cf88 <tcp_err+0x3c>)
 800cf6c:	4807      	ldr	r0, [pc, #28]	@ (800cf8c <tcp_err+0x40>)
 800cf6e:	f008 fa3b 	bl	80153e8 <iprintf>
    pcb->errf = err;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	683a      	ldr	r2, [r7, #0]
 800cf76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800cf7a:	bf00      	nop
 800cf7c:	3708      	adds	r7, #8
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}
 800cf82:	bf00      	nop
 800cf84:	080172d8 	.word	0x080172d8
 800cf88:	08017cd8 	.word	0x08017cd8
 800cf8c:	0801731c 	.word	0x0801731c

0800cf90 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800cf90:	b480      	push	{r7}
 800cf92:	b085      	sub	sp, #20
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d008      	beq.n	800cfb2 <tcp_accept+0x22>
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	7d1b      	ldrb	r3, [r3, #20]
 800cfa4:	2b01      	cmp	r3, #1
 800cfa6:	d104      	bne.n	800cfb2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	683a      	ldr	r2, [r7, #0]
 800cfb0:	619a      	str	r2, [r3, #24]
  }
}
 800cfb2:	bf00      	nop
 800cfb4:	3714      	adds	r7, #20
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbc:	4770      	bx	lr
	...

0800cfc0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b082      	sub	sp, #8
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d107      	bne.n	800cfde <tcp_pcb_purge+0x1e>
 800cfce:	4b2d      	ldr	r3, [pc, #180]	@ (800d084 <tcp_pcb_purge+0xc4>)
 800cfd0:	f640 0251 	movw	r2, #2129	@ 0x851
 800cfd4:	492c      	ldr	r1, [pc, #176]	@ (800d088 <tcp_pcb_purge+0xc8>)
 800cfd6:	482d      	ldr	r0, [pc, #180]	@ (800d08c <tcp_pcb_purge+0xcc>)
 800cfd8:	f008 fa06 	bl	80153e8 <iprintf>
 800cfdc:	e04e      	b.n	800d07c <tcp_pcb_purge+0xbc>

  if (pcb->state != CLOSED &&
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	7d1b      	ldrb	r3, [r3, #20]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d04a      	beq.n	800d07c <tcp_pcb_purge+0xbc>
      pcb->state != TIME_WAIT &&
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800cfea:	2b0a      	cmp	r3, #10
 800cfec:	d046      	beq.n	800d07c <tcp_pcb_purge+0xbc>
      pcb->state != LISTEN) {
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800cff2:	2b01      	cmp	r3, #1
 800cff4:	d042      	beq.n	800d07c <tcp_pcb_purge+0xbc>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));
 800cff6:	4826      	ldr	r0, [pc, #152]	@ (800d090 <tcp_pcb_purge+0xd0>)
 800cff8:	f008 fa66 	bl	80154c8 <puts>

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d000:	2b00      	cmp	r3, #0
 800d002:	d00a      	beq.n	800d01a <tcp_pcb_purge+0x5a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
 800d004:	4823      	ldr	r0, [pc, #140]	@ (800d094 <tcp_pcb_purge+0xd4>)
 800d006:	f008 fa5f 	bl	80154c8 <puts>
      pbuf_free(pcb->refused_data);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d00e:	4618      	mov	r0, r3
 800d010:	f7fe f86c 	bl	800b0ec <pbuf_free>
      pcb->refused_data = NULL;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2200      	movs	r2, #0
 800d018:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unsent != NULL) {
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d002      	beq.n	800d028 <tcp_pcb_purge+0x68>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: not all data sent\n"));
 800d022:	481d      	ldr	r0, [pc, #116]	@ (800d098 <tcp_pcb_purge+0xd8>)
 800d024:	f008 fa50 	bl	80154c8 <puts>
    }
    if (pcb->unacked != NULL) {
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d002      	beq.n	800d036 <tcp_pcb_purge+0x76>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
 800d030:	481a      	ldr	r0, [pc, #104]	@ (800d09c <tcp_pcb_purge+0xdc>)
 800d032:	f008 fa49 	bl	80154c8 <puts>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d005      	beq.n	800d04a <tcp_pcb_purge+0x8a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
 800d03e:	4818      	ldr	r0, [pc, #96]	@ (800d0a0 <tcp_pcb_purge+0xe0>)
 800d040:	f008 fa42 	bl	80154c8 <puts>
      tcp_free_ooseq(pcb);
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f000 f99f 	bl	800d388 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d050:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d056:	4618      	mov	r0, r3
 800d058:	f7ff fd02 	bl	800ca60 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d060:	4618      	mov	r0, r3
 800d062:	f7ff fcfd 	bl	800ca60 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2200      	movs	r2, #0
 800d06a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2200      	movs	r2, #0
 800d078:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d07c:	3708      	adds	r7, #8
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	080172d8 	.word	0x080172d8
 800d088:	08017d38 	.word	0x08017d38
 800d08c:	0801731c 	.word	0x0801731c
 800d090:	08017d54 	.word	0x08017d54
 800d094:	08017d64 	.word	0x08017d64
 800d098:	08017d90 	.word	0x08017d90
 800d09c:	08017db4 	.word	0x08017db4
 800d0a0:	08017ddc 	.word	0x08017ddc

0800d0a4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b084      	sub	sp, #16
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d106      	bne.n	800d0c2 <tcp_pcb_remove+0x1e>
 800d0b4:	4b44      	ldr	r3, [pc, #272]	@ (800d1c8 <tcp_pcb_remove+0x124>)
 800d0b6:	f640 0283 	movw	r2, #2179	@ 0x883
 800d0ba:	4944      	ldr	r1, [pc, #272]	@ (800d1cc <tcp_pcb_remove+0x128>)
 800d0bc:	4844      	ldr	r0, [pc, #272]	@ (800d1d0 <tcp_pcb_remove+0x12c>)
 800d0be:	f008 f993 	bl	80153e8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d106      	bne.n	800d0d6 <tcp_pcb_remove+0x32>
 800d0c8:	4b3f      	ldr	r3, [pc, #252]	@ (800d1c8 <tcp_pcb_remove+0x124>)
 800d0ca:	f640 0284 	movw	r2, #2180	@ 0x884
 800d0ce:	4941      	ldr	r1, [pc, #260]	@ (800d1d4 <tcp_pcb_remove+0x130>)
 800d0d0:	483f      	ldr	r0, [pc, #252]	@ (800d1d0 <tcp_pcb_remove+0x12c>)
 800d0d2:	f008 f989 	bl	80153e8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	683a      	ldr	r2, [r7, #0]
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d105      	bne.n	800d0ec <tcp_pcb_remove+0x48>
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	68da      	ldr	r2, [r3, #12]
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	601a      	str	r2, [r3, #0]
 800d0ea:	e013      	b.n	800d114 <tcp_pcb_remove+0x70>
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	60fb      	str	r3, [r7, #12]
 800d0f2:	e00c      	b.n	800d10e <tcp_pcb_remove+0x6a>
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	68db      	ldr	r3, [r3, #12]
 800d0f8:	683a      	ldr	r2, [r7, #0]
 800d0fa:	429a      	cmp	r2, r3
 800d0fc:	d104      	bne.n	800d108 <tcp_pcb_remove+0x64>
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	68da      	ldr	r2, [r3, #12]
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	60da      	str	r2, [r3, #12]
 800d106:	e005      	b.n	800d114 <tcp_pcb_remove+0x70>
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	68db      	ldr	r3, [r3, #12]
 800d10c:	60fb      	str	r3, [r7, #12]
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d1ef      	bne.n	800d0f4 <tcp_pcb_remove+0x50>
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	2200      	movs	r2, #0
 800d118:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d11a:	6838      	ldr	r0, [r7, #0]
 800d11c:	f7ff ff50 	bl	800cfc0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	7d1b      	ldrb	r3, [r3, #20]
 800d124:	2b0a      	cmp	r3, #10
 800d126:	d013      	beq.n	800d150 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d00f      	beq.n	800d150 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	8b5b      	ldrh	r3, [r3, #26]
 800d134:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d009      	beq.n	800d150 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	8b5b      	ldrh	r3, [r3, #26]
 800d140:	f043 0302 	orr.w	r3, r3, #2
 800d144:	b29a      	uxth	r2, r3
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d14a:	6838      	ldr	r0, [r7, #0]
 800d14c:	f003 fd34 	bl	8010bb8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	7d1b      	ldrb	r3, [r3, #20]
 800d154:	2b01      	cmp	r3, #1
 800d156:	d020      	beq.n	800d19a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d006      	beq.n	800d16e <tcp_pcb_remove+0xca>
 800d160:	4b19      	ldr	r3, [pc, #100]	@ (800d1c8 <tcp_pcb_remove+0x124>)
 800d162:	f640 0293 	movw	r2, #2195	@ 0x893
 800d166:	491c      	ldr	r1, [pc, #112]	@ (800d1d8 <tcp_pcb_remove+0x134>)
 800d168:	4819      	ldr	r0, [pc, #100]	@ (800d1d0 <tcp_pcb_remove+0x12c>)
 800d16a:	f008 f93d 	bl	80153e8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d172:	2b00      	cmp	r3, #0
 800d174:	d006      	beq.n	800d184 <tcp_pcb_remove+0xe0>
 800d176:	4b14      	ldr	r3, [pc, #80]	@ (800d1c8 <tcp_pcb_remove+0x124>)
 800d178:	f640 0294 	movw	r2, #2196	@ 0x894
 800d17c:	4917      	ldr	r1, [pc, #92]	@ (800d1dc <tcp_pcb_remove+0x138>)
 800d17e:	4814      	ldr	r0, [pc, #80]	@ (800d1d0 <tcp_pcb_remove+0x12c>)
 800d180:	f008 f932 	bl	80153e8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d006      	beq.n	800d19a <tcp_pcb_remove+0xf6>
 800d18c:	4b0e      	ldr	r3, [pc, #56]	@ (800d1c8 <tcp_pcb_remove+0x124>)
 800d18e:	f640 0296 	movw	r2, #2198	@ 0x896
 800d192:	4913      	ldr	r1, [pc, #76]	@ (800d1e0 <tcp_pcb_remove+0x13c>)
 800d194:	480e      	ldr	r0, [pc, #56]	@ (800d1d0 <tcp_pcb_remove+0x12c>)
 800d196:	f008 f927 	bl	80153e8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	2200      	movs	r2, #0
 800d19e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
 800d1a6:	f000 f919 	bl	800d3dc <tcp_pcbs_sane>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d106      	bne.n	800d1be <tcp_pcb_remove+0x11a>
 800d1b0:	4b05      	ldr	r3, [pc, #20]	@ (800d1c8 <tcp_pcb_remove+0x124>)
 800d1b2:	f640 029e 	movw	r2, #2206	@ 0x89e
 800d1b6:	490b      	ldr	r1, [pc, #44]	@ (800d1e4 <tcp_pcb_remove+0x140>)
 800d1b8:	4805      	ldr	r0, [pc, #20]	@ (800d1d0 <tcp_pcb_remove+0x12c>)
 800d1ba:	f008 f915 	bl	80153e8 <iprintf>
}
 800d1be:	bf00      	nop
 800d1c0:	3710      	adds	r7, #16
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	080172d8 	.word	0x080172d8
 800d1cc:	08017e00 	.word	0x08017e00
 800d1d0:	0801731c 	.word	0x0801731c
 800d1d4:	08017e1c 	.word	0x08017e1c
 800d1d8:	08017e3c 	.word	0x08017e3c
 800d1dc:	08017e54 	.word	0x08017e54
 800d1e0:	08017e70 	.word	0x08017e70
 800d1e4:	08017e88 	.word	0x08017e88

0800d1e8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b082      	sub	sp, #8
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d106      	bne.n	800d204 <tcp_next_iss+0x1c>
 800d1f6:	4b0a      	ldr	r3, [pc, #40]	@ (800d220 <tcp_next_iss+0x38>)
 800d1f8:	f640 02af 	movw	r2, #2223	@ 0x8af
 800d1fc:	4909      	ldr	r1, [pc, #36]	@ (800d224 <tcp_next_iss+0x3c>)
 800d1fe:	480a      	ldr	r0, [pc, #40]	@ (800d228 <tcp_next_iss+0x40>)
 800d200:	f008 f8f2 	bl	80153e8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d204:	4b09      	ldr	r3, [pc, #36]	@ (800d22c <tcp_next_iss+0x44>)
 800d206:	681a      	ldr	r2, [r3, #0]
 800d208:	4b09      	ldr	r3, [pc, #36]	@ (800d230 <tcp_next_iss+0x48>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	4413      	add	r3, r2
 800d20e:	4a07      	ldr	r2, [pc, #28]	@ (800d22c <tcp_next_iss+0x44>)
 800d210:	6013      	str	r3, [r2, #0]
  return iss;
 800d212:	4b06      	ldr	r3, [pc, #24]	@ (800d22c <tcp_next_iss+0x44>)
 800d214:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d216:	4618      	mov	r0, r3
 800d218:	3708      	adds	r7, #8
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}
 800d21e:	bf00      	nop
 800d220:	080172d8 	.word	0x080172d8
 800d224:	08017ea8 	.word	0x08017ea8
 800d228:	0801731c 	.word	0x0801731c
 800d22c:	24000080 	.word	0x24000080
 800d230:	240032d4 	.word	0x240032d4

0800d234 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b086      	sub	sp, #24
 800d238:	af00      	add	r7, sp, #0
 800d23a:	4603      	mov	r3, r0
 800d23c:	60b9      	str	r1, [r7, #8]
 800d23e:	607a      	str	r2, [r7, #4]
 800d240:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d106      	bne.n	800d256 <tcp_eff_send_mss_netif+0x22>
 800d248:	4b14      	ldr	r3, [pc, #80]	@ (800d29c <tcp_eff_send_mss_netif+0x68>)
 800d24a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800d24e:	4914      	ldr	r1, [pc, #80]	@ (800d2a0 <tcp_eff_send_mss_netif+0x6c>)
 800d250:	4814      	ldr	r0, [pc, #80]	@ (800d2a4 <tcp_eff_send_mss_netif+0x70>)
 800d252:	f008 f8c9 	bl	80153e8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d101      	bne.n	800d260 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d25c:	89fb      	ldrh	r3, [r7, #14]
 800d25e:	e019      	b.n	800d294 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d264:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d266:	8afb      	ldrh	r3, [r7, #22]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d012      	beq.n	800d292 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d26c:	2328      	movs	r3, #40	@ 0x28
 800d26e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d270:	8afa      	ldrh	r2, [r7, #22]
 800d272:	8abb      	ldrh	r3, [r7, #20]
 800d274:	429a      	cmp	r2, r3
 800d276:	d904      	bls.n	800d282 <tcp_eff_send_mss_netif+0x4e>
 800d278:	8afa      	ldrh	r2, [r7, #22]
 800d27a:	8abb      	ldrh	r3, [r7, #20]
 800d27c:	1ad3      	subs	r3, r2, r3
 800d27e:	b29b      	uxth	r3, r3
 800d280:	e000      	b.n	800d284 <tcp_eff_send_mss_netif+0x50>
 800d282:	2300      	movs	r3, #0
 800d284:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d286:	8a7a      	ldrh	r2, [r7, #18]
 800d288:	89fb      	ldrh	r3, [r7, #14]
 800d28a:	4293      	cmp	r3, r2
 800d28c:	bf28      	it	cs
 800d28e:	4613      	movcs	r3, r2
 800d290:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d292:	89fb      	ldrh	r3, [r7, #14]
}
 800d294:	4618      	mov	r0, r3
 800d296:	3718      	adds	r7, #24
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}
 800d29c:	080172d8 	.word	0x080172d8
 800d2a0:	08017ec4 	.word	0x08017ec4
 800d2a4:	0801731c 	.word	0x0801731c

0800d2a8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b084      	sub	sp, #16
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
 800d2b0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d119      	bne.n	800d2f0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d2bc:	4b10      	ldr	r3, [pc, #64]	@ (800d300 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d2be:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800d2c2:	4910      	ldr	r1, [pc, #64]	@ (800d304 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d2c4:	4810      	ldr	r0, [pc, #64]	@ (800d308 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d2c6:	f008 f88f 	bl	80153e8 <iprintf>

  while (pcb != NULL) {
 800d2ca:	e011      	b.n	800d2f0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d108      	bne.n	800d2ea <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	68db      	ldr	r3, [r3, #12]
 800d2dc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d2de:	68f8      	ldr	r0, [r7, #12]
 800d2e0:	f7fe fcba 	bl	800bc58 <tcp_abort>
      pcb = next;
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	60fb      	str	r3, [r7, #12]
 800d2e8:	e002      	b.n	800d2f0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	68db      	ldr	r3, [r3, #12]
 800d2ee:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d1ea      	bne.n	800d2cc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d2f6:	bf00      	nop
 800d2f8:	bf00      	nop
 800d2fa:	3710      	adds	r7, #16
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}
 800d300:	080172d8 	.word	0x080172d8
 800d304:	08017eec 	.word	0x08017eec
 800d308:	0801731c 	.word	0x0801731c

0800d30c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b084      	sub	sp, #16
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d02a      	beq.n	800d372 <tcp_netif_ip_addr_changed+0x66>
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d026      	beq.n	800d372 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d324:	4b15      	ldr	r3, [pc, #84]	@ (800d37c <tcp_netif_ip_addr_changed+0x70>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	4619      	mov	r1, r3
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f7ff ffbc 	bl	800d2a8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d330:	4b13      	ldr	r3, [pc, #76]	@ (800d380 <tcp_netif_ip_addr_changed+0x74>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	4619      	mov	r1, r3
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f7ff ffb6 	bl	800d2a8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d017      	beq.n	800d372 <tcp_netif_ip_addr_changed+0x66>
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d013      	beq.n	800d372 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d34a:	4b0e      	ldr	r3, [pc, #56]	@ (800d384 <tcp_netif_ip_addr_changed+0x78>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	60fb      	str	r3, [r7, #12]
 800d350:	e00c      	b.n	800d36c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	681a      	ldr	r2, [r3, #0]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d103      	bne.n	800d366 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	681a      	ldr	r2, [r3, #0]
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	68db      	ldr	r3, [r3, #12]
 800d36a:	60fb      	str	r3, [r7, #12]
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d1ef      	bne.n	800d352 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d372:	bf00      	nop
 800d374:	3710      	adds	r7, #16
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}
 800d37a:	bf00      	nop
 800d37c:	240032e0 	.word	0x240032e0
 800d380:	240032d8 	.word	0x240032d8
 800d384:	240032dc 	.word	0x240032dc

0800d388 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b082      	sub	sp, #8
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d394:	2b00      	cmp	r3, #0
 800d396:	d007      	beq.n	800d3a8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d39c:	4618      	mov	r0, r3
 800d39e:	f7ff fb5f 	bl	800ca60 <tcp_segs_free>
    pcb->ooseq = NULL;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d3a8:	bf00      	nop
 800d3aa:	3708      	adds	r7, #8
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}

0800d3b0 <tcp_debug_print_state>:
 *
 * @param s enum tcp_state to print
 */
void
tcp_debug_print_state(enum tcp_state s)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b082      	sub	sp, #8
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	71fb      	strb	r3, [r7, #7]
  LWIP_DEBUGF(TCP_DEBUG, ("State: %s\n", tcp_state_str[s]));
 800d3ba:	79fb      	ldrb	r3, [r7, #7]
 800d3bc:	4a05      	ldr	r2, [pc, #20]	@ (800d3d4 <tcp_debug_print_state+0x24>)
 800d3be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3c2:	4619      	mov	r1, r3
 800d3c4:	4804      	ldr	r0, [pc, #16]	@ (800d3d8 <tcp_debug_print_state+0x28>)
 800d3c6:	f008 f80f 	bl	80153e8 <iprintf>
}
 800d3ca:	bf00      	nop
 800d3cc:	3708      	adds	r7, #8
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}
 800d3d2:	bf00      	nop
 800d3d4:	0801b1b4 	.word	0x0801b1b4
 800d3d8:	08018054 	.word	0x08018054

0800d3dc <tcp_pcbs_sane>:
/**
 * Check state consistency of the tcp_pcb lists.
 */
s16_t
tcp_pcbs_sane(void)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b082      	sub	sp, #8
 800d3e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d3e2:	4b22      	ldr	r3, [pc, #136]	@ (800d46c <tcp_pcbs_sane+0x90>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	607b      	str	r3, [r7, #4]
 800d3e8:	e023      	b.n	800d432 <tcp_pcbs_sane+0x56>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	7d1b      	ldrb	r3, [r3, #20]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d106      	bne.n	800d400 <tcp_pcbs_sane+0x24>
 800d3f2:	4b1f      	ldr	r3, [pc, #124]	@ (800d470 <tcp_pcbs_sane+0x94>)
 800d3f4:	f640 12d9 	movw	r2, #2521	@ 0x9d9
 800d3f8:	491e      	ldr	r1, [pc, #120]	@ (800d474 <tcp_pcbs_sane+0x98>)
 800d3fa:	481f      	ldr	r0, [pc, #124]	@ (800d478 <tcp_pcbs_sane+0x9c>)
 800d3fc:	f007 fff4 	bl	80153e8 <iprintf>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	7d1b      	ldrb	r3, [r3, #20]
 800d404:	2b01      	cmp	r3, #1
 800d406:	d106      	bne.n	800d416 <tcp_pcbs_sane+0x3a>
 800d408:	4b19      	ldr	r3, [pc, #100]	@ (800d470 <tcp_pcbs_sane+0x94>)
 800d40a:	f640 12da 	movw	r2, #2522	@ 0x9da
 800d40e:	491b      	ldr	r1, [pc, #108]	@ (800d47c <tcp_pcbs_sane+0xa0>)
 800d410:	4819      	ldr	r0, [pc, #100]	@ (800d478 <tcp_pcbs_sane+0x9c>)
 800d412:	f007 ffe9 	bl	80153e8 <iprintf>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	7d1b      	ldrb	r3, [r3, #20]
 800d41a:	2b0a      	cmp	r3, #10
 800d41c:	d106      	bne.n	800d42c <tcp_pcbs_sane+0x50>
 800d41e:	4b14      	ldr	r3, [pc, #80]	@ (800d470 <tcp_pcbs_sane+0x94>)
 800d420:	f640 12db 	movw	r2, #2523	@ 0x9db
 800d424:	4916      	ldr	r1, [pc, #88]	@ (800d480 <tcp_pcbs_sane+0xa4>)
 800d426:	4814      	ldr	r0, [pc, #80]	@ (800d478 <tcp_pcbs_sane+0x9c>)
 800d428:	f007 ffde 	bl	80153e8 <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	68db      	ldr	r3, [r3, #12]
 800d430:	607b      	str	r3, [r7, #4]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d1d8      	bne.n	800d3ea <tcp_pcbs_sane+0xe>
  }
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d438:	4b12      	ldr	r3, [pc, #72]	@ (800d484 <tcp_pcbs_sane+0xa8>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	607b      	str	r3, [r7, #4]
 800d43e:	e00d      	b.n	800d45c <tcp_pcbs_sane+0x80>
    LWIP_ASSERT("tcp_pcbs_sane: tw pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	7d1b      	ldrb	r3, [r3, #20]
 800d444:	2b0a      	cmp	r3, #10
 800d446:	d006      	beq.n	800d456 <tcp_pcbs_sane+0x7a>
 800d448:	4b09      	ldr	r3, [pc, #36]	@ (800d470 <tcp_pcbs_sane+0x94>)
 800d44a:	f640 12de 	movw	r2, #2526	@ 0x9de
 800d44e:	490e      	ldr	r1, [pc, #56]	@ (800d488 <tcp_pcbs_sane+0xac>)
 800d450:	4809      	ldr	r0, [pc, #36]	@ (800d478 <tcp_pcbs_sane+0x9c>)
 800d452:	f007 ffc9 	bl	80153e8 <iprintf>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	68db      	ldr	r3, [r3, #12]
 800d45a:	607b      	str	r3, [r7, #4]
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d1ee      	bne.n	800d440 <tcp_pcbs_sane+0x64>
  }
  return 1;
 800d462:	2301      	movs	r3, #1
}
 800d464:	4618      	mov	r0, r3
 800d466:	3708      	adds	r7, #8
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}
 800d46c:	240032e0 	.word	0x240032e0
 800d470:	080172d8 	.word	0x080172d8
 800d474:	0801812c 	.word	0x0801812c
 800d478:	0801731c 	.word	0x0801731c
 800d47c:	08018158 	.word	0x08018158
 800d480:	08018184 	.word	0x08018184
 800d484:	240032e4 	.word	0x240032e4
 800d488:	080181b4 	.word	0x080181b4

0800d48c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d48c:	b590      	push	{r4, r7, lr}
 800d48e:	b08d      	sub	sp, #52	@ 0x34
 800d490:	af04      	add	r7, sp, #16
 800d492:	6078      	str	r0, [r7, #4]
 800d494:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d105      	bne.n	800d4a8 <tcp_input+0x1c>
 800d49c:	4b9b      	ldr	r3, [pc, #620]	@ (800d70c <tcp_input+0x280>)
 800d49e:	2283      	movs	r2, #131	@ 0x83
 800d4a0:	499b      	ldr	r1, [pc, #620]	@ (800d710 <tcp_input+0x284>)
 800d4a2:	489c      	ldr	r0, [pc, #624]	@ (800d714 <tcp_input+0x288>)
 800d4a4:	f007 ffa0 	bl	80153e8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	685b      	ldr	r3, [r3, #4]
 800d4ac:	4a9a      	ldr	r2, [pc, #616]	@ (800d718 <tcp_input+0x28c>)
 800d4ae:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	895b      	ldrh	r3, [r3, #10]
 800d4b4:	2b13      	cmp	r3, #19
 800d4b6:	f240 83dd 	bls.w	800dc74 <tcp_input+0x7e8>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d4ba:	4b98      	ldr	r3, [pc, #608]	@ (800d71c <tcp_input+0x290>)
 800d4bc:	695b      	ldr	r3, [r3, #20]
 800d4be:	4a97      	ldr	r2, [pc, #604]	@ (800d71c <tcp_input+0x290>)
 800d4c0:	6812      	ldr	r2, [r2, #0]
 800d4c2:	4611      	mov	r1, r2
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f006 fecf 	bl	8014268 <ip4_addr_isbroadcast_u32>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	f040 83d3 	bne.w	800dc78 <tcp_input+0x7ec>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d4d2:	4b92      	ldr	r3, [pc, #584]	@ (800d71c <tcp_input+0x290>)
 800d4d4:	695b      	ldr	r3, [r3, #20]
 800d4d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d4da:	2be0      	cmp	r3, #224	@ 0xe0
 800d4dc:	f000 83cc 	beq.w	800dc78 <tcp_input+0x7ec>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d4e0:	4b8d      	ldr	r3, [pc, #564]	@ (800d718 <tcp_input+0x28c>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	899b      	ldrh	r3, [r3, #12]
 800d4e6:	b29b      	uxth	r3, r3
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f7fc f98d 	bl	8009808 <lwip_htons>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	0b1b      	lsrs	r3, r3, #12
 800d4f2:	b29b      	uxth	r3, r3
 800d4f4:	b2db      	uxtb	r3, r3
 800d4f6:	009b      	lsls	r3, r3, #2
 800d4f8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d4fa:	7cbb      	ldrb	r3, [r7, #18]
 800d4fc:	2b13      	cmp	r3, #19
 800d4fe:	f240 83bd 	bls.w	800dc7c <tcp_input+0x7f0>
 800d502:	7cbb      	ldrb	r3, [r7, #18]
 800d504:	b29a      	uxth	r2, r3
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	891b      	ldrh	r3, [r3, #8]
 800d50a:	429a      	cmp	r2, r3
 800d50c:	f200 83b6 	bhi.w	800dc7c <tcp_input+0x7f0>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d510:	7cbb      	ldrb	r3, [r7, #18]
 800d512:	b29b      	uxth	r3, r3
 800d514:	3b14      	subs	r3, #20
 800d516:	b29a      	uxth	r2, r3
 800d518:	4b81      	ldr	r3, [pc, #516]	@ (800d720 <tcp_input+0x294>)
 800d51a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d51c:	4b81      	ldr	r3, [pc, #516]	@ (800d724 <tcp_input+0x298>)
 800d51e:	2200      	movs	r2, #0
 800d520:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	895a      	ldrh	r2, [r3, #10]
 800d526:	7cbb      	ldrb	r3, [r7, #18]
 800d528:	b29b      	uxth	r3, r3
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d309      	bcc.n	800d542 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d52e:	4b7c      	ldr	r3, [pc, #496]	@ (800d720 <tcp_input+0x294>)
 800d530:	881a      	ldrh	r2, [r3, #0]
 800d532:	4b7d      	ldr	r3, [pc, #500]	@ (800d728 <tcp_input+0x29c>)
 800d534:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d536:	7cbb      	ldrb	r3, [r7, #18]
 800d538:	4619      	mov	r1, r3
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f7fd fd48 	bl	800afd0 <pbuf_remove_header>
 800d540:	e04e      	b.n	800d5e0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d105      	bne.n	800d556 <tcp_input+0xca>
 800d54a:	4b70      	ldr	r3, [pc, #448]	@ (800d70c <tcp_input+0x280>)
 800d54c:	22c2      	movs	r2, #194	@ 0xc2
 800d54e:	4977      	ldr	r1, [pc, #476]	@ (800d72c <tcp_input+0x2a0>)
 800d550:	4870      	ldr	r0, [pc, #448]	@ (800d714 <tcp_input+0x288>)
 800d552:	f007 ff49 	bl	80153e8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d556:	2114      	movs	r1, #20
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f7fd fd39 	bl	800afd0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	895a      	ldrh	r2, [r3, #10]
 800d562:	4b71      	ldr	r3, [pc, #452]	@ (800d728 <tcp_input+0x29c>)
 800d564:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d566:	4b6e      	ldr	r3, [pc, #440]	@ (800d720 <tcp_input+0x294>)
 800d568:	881a      	ldrh	r2, [r3, #0]
 800d56a:	4b6f      	ldr	r3, [pc, #444]	@ (800d728 <tcp_input+0x29c>)
 800d56c:	881b      	ldrh	r3, [r3, #0]
 800d56e:	1ad3      	subs	r3, r2, r3
 800d570:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d572:	4b6d      	ldr	r3, [pc, #436]	@ (800d728 <tcp_input+0x29c>)
 800d574:	881b      	ldrh	r3, [r3, #0]
 800d576:	4619      	mov	r1, r3
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f7fd fd29 	bl	800afd0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	895b      	ldrh	r3, [r3, #10]
 800d584:	8a3a      	ldrh	r2, [r7, #16]
 800d586:	429a      	cmp	r2, r3
 800d588:	f200 837a 	bhi.w	800dc80 <tcp_input+0x7f4>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	685b      	ldr	r3, [r3, #4]
 800d592:	4a64      	ldr	r2, [pc, #400]	@ (800d724 <tcp_input+0x298>)
 800d594:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	8a3a      	ldrh	r2, [r7, #16]
 800d59c:	4611      	mov	r1, r2
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f7fd fd16 	bl	800afd0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	891a      	ldrh	r2, [r3, #8]
 800d5a8:	8a3b      	ldrh	r3, [r7, #16]
 800d5aa:	1ad3      	subs	r3, r2, r3
 800d5ac:	b29a      	uxth	r2, r3
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	895b      	ldrh	r3, [r3, #10]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d005      	beq.n	800d5c6 <tcp_input+0x13a>
 800d5ba:	4b54      	ldr	r3, [pc, #336]	@ (800d70c <tcp_input+0x280>)
 800d5bc:	22df      	movs	r2, #223	@ 0xdf
 800d5be:	495c      	ldr	r1, [pc, #368]	@ (800d730 <tcp_input+0x2a4>)
 800d5c0:	4854      	ldr	r0, [pc, #336]	@ (800d714 <tcp_input+0x288>)
 800d5c2:	f007 ff11 	bl	80153e8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	891a      	ldrh	r2, [r3, #8]
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	891b      	ldrh	r3, [r3, #8]
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d005      	beq.n	800d5e0 <tcp_input+0x154>
 800d5d4:	4b4d      	ldr	r3, [pc, #308]	@ (800d70c <tcp_input+0x280>)
 800d5d6:	22e0      	movs	r2, #224	@ 0xe0
 800d5d8:	4956      	ldr	r1, [pc, #344]	@ (800d734 <tcp_input+0x2a8>)
 800d5da:	484e      	ldr	r0, [pc, #312]	@ (800d714 <tcp_input+0x288>)
 800d5dc:	f007 ff04 	bl	80153e8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d5e0:	4b4d      	ldr	r3, [pc, #308]	@ (800d718 <tcp_input+0x28c>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	881b      	ldrh	r3, [r3, #0]
 800d5e6:	b29b      	uxth	r3, r3
 800d5e8:	4a4b      	ldr	r2, [pc, #300]	@ (800d718 <tcp_input+0x28c>)
 800d5ea:	6814      	ldr	r4, [r2, #0]
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f7fc f90b 	bl	8009808 <lwip_htons>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d5f6:	4b48      	ldr	r3, [pc, #288]	@ (800d718 <tcp_input+0x28c>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	885b      	ldrh	r3, [r3, #2]
 800d5fc:	b29b      	uxth	r3, r3
 800d5fe:	4a46      	ldr	r2, [pc, #280]	@ (800d718 <tcp_input+0x28c>)
 800d600:	6814      	ldr	r4, [r2, #0]
 800d602:	4618      	mov	r0, r3
 800d604:	f7fc f900 	bl	8009808 <lwip_htons>
 800d608:	4603      	mov	r3, r0
 800d60a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d60c:	4b42      	ldr	r3, [pc, #264]	@ (800d718 <tcp_input+0x28c>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	685b      	ldr	r3, [r3, #4]
 800d612:	4a41      	ldr	r2, [pc, #260]	@ (800d718 <tcp_input+0x28c>)
 800d614:	6814      	ldr	r4, [r2, #0]
 800d616:	4618      	mov	r0, r3
 800d618:	f7fc f90b 	bl	8009832 <lwip_htonl>
 800d61c:	4603      	mov	r3, r0
 800d61e:	6063      	str	r3, [r4, #4]
 800d620:	6863      	ldr	r3, [r4, #4]
 800d622:	4a45      	ldr	r2, [pc, #276]	@ (800d738 <tcp_input+0x2ac>)
 800d624:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d626:	4b3c      	ldr	r3, [pc, #240]	@ (800d718 <tcp_input+0x28c>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	689b      	ldr	r3, [r3, #8]
 800d62c:	4a3a      	ldr	r2, [pc, #232]	@ (800d718 <tcp_input+0x28c>)
 800d62e:	6814      	ldr	r4, [r2, #0]
 800d630:	4618      	mov	r0, r3
 800d632:	f7fc f8fe 	bl	8009832 <lwip_htonl>
 800d636:	4603      	mov	r3, r0
 800d638:	60a3      	str	r3, [r4, #8]
 800d63a:	68a3      	ldr	r3, [r4, #8]
 800d63c:	4a3f      	ldr	r2, [pc, #252]	@ (800d73c <tcp_input+0x2b0>)
 800d63e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d640:	4b35      	ldr	r3, [pc, #212]	@ (800d718 <tcp_input+0x28c>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	89db      	ldrh	r3, [r3, #14]
 800d646:	b29b      	uxth	r3, r3
 800d648:	4a33      	ldr	r2, [pc, #204]	@ (800d718 <tcp_input+0x28c>)
 800d64a:	6814      	ldr	r4, [r2, #0]
 800d64c:	4618      	mov	r0, r3
 800d64e:	f7fc f8db 	bl	8009808 <lwip_htons>
 800d652:	4603      	mov	r3, r0
 800d654:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d656:	4b30      	ldr	r3, [pc, #192]	@ (800d718 <tcp_input+0x28c>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	899b      	ldrh	r3, [r3, #12]
 800d65c:	b29b      	uxth	r3, r3
 800d65e:	4618      	mov	r0, r3
 800d660:	f7fc f8d2 	bl	8009808 <lwip_htons>
 800d664:	4603      	mov	r3, r0
 800d666:	b2db      	uxtb	r3, r3
 800d668:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d66c:	b2da      	uxtb	r2, r3
 800d66e:	4b34      	ldr	r3, [pc, #208]	@ (800d740 <tcp_input+0x2b4>)
 800d670:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	891a      	ldrh	r2, [r3, #8]
 800d676:	4b33      	ldr	r3, [pc, #204]	@ (800d744 <tcp_input+0x2b8>)
 800d678:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d67a:	4b31      	ldr	r3, [pc, #196]	@ (800d740 <tcp_input+0x2b4>)
 800d67c:	781b      	ldrb	r3, [r3, #0]
 800d67e:	f003 0303 	and.w	r3, r3, #3
 800d682:	2b00      	cmp	r3, #0
 800d684:	d00c      	beq.n	800d6a0 <tcp_input+0x214>
    tcplen++;
 800d686:	4b2f      	ldr	r3, [pc, #188]	@ (800d744 <tcp_input+0x2b8>)
 800d688:	881b      	ldrh	r3, [r3, #0]
 800d68a:	3301      	adds	r3, #1
 800d68c:	b29a      	uxth	r2, r3
 800d68e:	4b2d      	ldr	r3, [pc, #180]	@ (800d744 <tcp_input+0x2b8>)
 800d690:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	891a      	ldrh	r2, [r3, #8]
 800d696:	4b2b      	ldr	r3, [pc, #172]	@ (800d744 <tcp_input+0x2b8>)
 800d698:	881b      	ldrh	r3, [r3, #0]
 800d69a:	429a      	cmp	r2, r3
 800d69c:	f200 82f2 	bhi.w	800dc84 <tcp_input+0x7f8>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d6a4:	4b28      	ldr	r3, [pc, #160]	@ (800d748 <tcp_input+0x2bc>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	61bb      	str	r3, [r7, #24]
 800d6aa:	e09d      	b.n	800d7e8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d6ac:	69bb      	ldr	r3, [r7, #24]
 800d6ae:	7d1b      	ldrb	r3, [r3, #20]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d105      	bne.n	800d6c0 <tcp_input+0x234>
 800d6b4:	4b15      	ldr	r3, [pc, #84]	@ (800d70c <tcp_input+0x280>)
 800d6b6:	22fb      	movs	r2, #251	@ 0xfb
 800d6b8:	4924      	ldr	r1, [pc, #144]	@ (800d74c <tcp_input+0x2c0>)
 800d6ba:	4816      	ldr	r0, [pc, #88]	@ (800d714 <tcp_input+0x288>)
 800d6bc:	f007 fe94 	bl	80153e8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d6c0:	69bb      	ldr	r3, [r7, #24]
 800d6c2:	7d1b      	ldrb	r3, [r3, #20]
 800d6c4:	2b0a      	cmp	r3, #10
 800d6c6:	d105      	bne.n	800d6d4 <tcp_input+0x248>
 800d6c8:	4b10      	ldr	r3, [pc, #64]	@ (800d70c <tcp_input+0x280>)
 800d6ca:	22fc      	movs	r2, #252	@ 0xfc
 800d6cc:	4920      	ldr	r1, [pc, #128]	@ (800d750 <tcp_input+0x2c4>)
 800d6ce:	4811      	ldr	r0, [pc, #68]	@ (800d714 <tcp_input+0x288>)
 800d6d0:	f007 fe8a 	bl	80153e8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d6d4:	69bb      	ldr	r3, [r7, #24]
 800d6d6:	7d1b      	ldrb	r3, [r3, #20]
 800d6d8:	2b01      	cmp	r3, #1
 800d6da:	d105      	bne.n	800d6e8 <tcp_input+0x25c>
 800d6dc:	4b0b      	ldr	r3, [pc, #44]	@ (800d70c <tcp_input+0x280>)
 800d6de:	22fd      	movs	r2, #253	@ 0xfd
 800d6e0:	491c      	ldr	r1, [pc, #112]	@ (800d754 <tcp_input+0x2c8>)
 800d6e2:	480c      	ldr	r0, [pc, #48]	@ (800d714 <tcp_input+0x288>)
 800d6e4:	f007 fe80 	bl	80153e8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d6e8:	69bb      	ldr	r3, [r7, #24]
 800d6ea:	7a1b      	ldrb	r3, [r3, #8]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d033      	beq.n	800d758 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d6f0:	69bb      	ldr	r3, [r7, #24]
 800d6f2:	7a1a      	ldrb	r2, [r3, #8]
 800d6f4:	4b09      	ldr	r3, [pc, #36]	@ (800d71c <tcp_input+0x290>)
 800d6f6:	685b      	ldr	r3, [r3, #4]
 800d6f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d700:	429a      	cmp	r2, r3
 800d702:	d029      	beq.n	800d758 <tcp_input+0x2cc>
      prev = pcb;
 800d704:	69bb      	ldr	r3, [r7, #24]
 800d706:	61fb      	str	r3, [r7, #28]
      continue;
 800d708:	e06b      	b.n	800d7e2 <tcp_input+0x356>
 800d70a:	bf00      	nop
 800d70c:	080181e0 	.word	0x080181e0
 800d710:	08018214 	.word	0x08018214
 800d714:	0801822c 	.word	0x0801822c
 800d718:	24003300 	.word	0x24003300
 800d71c:	2400036c 	.word	0x2400036c
 800d720:	24003304 	.word	0x24003304
 800d724:	24003308 	.word	0x24003308
 800d728:	24003306 	.word	0x24003306
 800d72c:	08018254 	.word	0x08018254
 800d730:	08018264 	.word	0x08018264
 800d734:	08018270 	.word	0x08018270
 800d738:	24003310 	.word	0x24003310
 800d73c:	24003314 	.word	0x24003314
 800d740:	2400331c 	.word	0x2400331c
 800d744:	2400331a 	.word	0x2400331a
 800d748:	240032e0 	.word	0x240032e0
 800d74c:	08018290 	.word	0x08018290
 800d750:	080182b8 	.word	0x080182b8
 800d754:	080182e4 	.word	0x080182e4
    }

    if (pcb->remote_port == tcphdr->src &&
 800d758:	69bb      	ldr	r3, [r7, #24]
 800d75a:	8b1a      	ldrh	r2, [r3, #24]
 800d75c:	4b72      	ldr	r3, [pc, #456]	@ (800d928 <tcp_input+0x49c>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	881b      	ldrh	r3, [r3, #0]
 800d762:	b29b      	uxth	r3, r3
 800d764:	429a      	cmp	r2, r3
 800d766:	d13a      	bne.n	800d7de <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d768:	69bb      	ldr	r3, [r7, #24]
 800d76a:	8ada      	ldrh	r2, [r3, #22]
 800d76c:	4b6e      	ldr	r3, [pc, #440]	@ (800d928 <tcp_input+0x49c>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	885b      	ldrh	r3, [r3, #2]
 800d772:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d774:	429a      	cmp	r2, r3
 800d776:	d132      	bne.n	800d7de <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d778:	69bb      	ldr	r3, [r7, #24]
 800d77a:	685a      	ldr	r2, [r3, #4]
 800d77c:	4b6b      	ldr	r3, [pc, #428]	@ (800d92c <tcp_input+0x4a0>)
 800d77e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d780:	429a      	cmp	r2, r3
 800d782:	d12c      	bne.n	800d7de <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d784:	69bb      	ldr	r3, [r7, #24]
 800d786:	681a      	ldr	r2, [r3, #0]
 800d788:	4b68      	ldr	r3, [pc, #416]	@ (800d92c <tcp_input+0x4a0>)
 800d78a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d78c:	429a      	cmp	r2, r3
 800d78e:	d126      	bne.n	800d7de <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d790:	69bb      	ldr	r3, [r7, #24]
 800d792:	68db      	ldr	r3, [r3, #12]
 800d794:	69ba      	ldr	r2, [r7, #24]
 800d796:	429a      	cmp	r2, r3
 800d798:	d106      	bne.n	800d7a8 <tcp_input+0x31c>
 800d79a:	4b65      	ldr	r3, [pc, #404]	@ (800d930 <tcp_input+0x4a4>)
 800d79c:	f240 120d 	movw	r2, #269	@ 0x10d
 800d7a0:	4964      	ldr	r1, [pc, #400]	@ (800d934 <tcp_input+0x4a8>)
 800d7a2:	4865      	ldr	r0, [pc, #404]	@ (800d938 <tcp_input+0x4ac>)
 800d7a4:	f007 fe20 	bl	80153e8 <iprintf>
      if (prev != NULL) {
 800d7a8:	69fb      	ldr	r3, [r7, #28]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d00a      	beq.n	800d7c4 <tcp_input+0x338>
        prev->next = pcb->next;
 800d7ae:	69bb      	ldr	r3, [r7, #24]
 800d7b0:	68da      	ldr	r2, [r3, #12]
 800d7b2:	69fb      	ldr	r3, [r7, #28]
 800d7b4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d7b6:	4b61      	ldr	r3, [pc, #388]	@ (800d93c <tcp_input+0x4b0>)
 800d7b8:	681a      	ldr	r2, [r3, #0]
 800d7ba:	69bb      	ldr	r3, [r7, #24]
 800d7bc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d7be:	4a5f      	ldr	r2, [pc, #380]	@ (800d93c <tcp_input+0x4b0>)
 800d7c0:	69bb      	ldr	r3, [r7, #24]
 800d7c2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d7c4:	69bb      	ldr	r3, [r7, #24]
 800d7c6:	68db      	ldr	r3, [r3, #12]
 800d7c8:	69ba      	ldr	r2, [r7, #24]
 800d7ca:	429a      	cmp	r2, r3
 800d7cc:	d111      	bne.n	800d7f2 <tcp_input+0x366>
 800d7ce:	4b58      	ldr	r3, [pc, #352]	@ (800d930 <tcp_input+0x4a4>)
 800d7d0:	f240 1215 	movw	r2, #277	@ 0x115
 800d7d4:	495a      	ldr	r1, [pc, #360]	@ (800d940 <tcp_input+0x4b4>)
 800d7d6:	4858      	ldr	r0, [pc, #352]	@ (800d938 <tcp_input+0x4ac>)
 800d7d8:	f007 fe06 	bl	80153e8 <iprintf>
      break;
 800d7dc:	e009      	b.n	800d7f2 <tcp_input+0x366>
    }
    prev = pcb;
 800d7de:	69bb      	ldr	r3, [r7, #24]
 800d7e0:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d7e2:	69bb      	ldr	r3, [r7, #24]
 800d7e4:	68db      	ldr	r3, [r3, #12]
 800d7e6:	61bb      	str	r3, [r7, #24]
 800d7e8:	69bb      	ldr	r3, [r7, #24]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	f47f af5e 	bne.w	800d6ac <tcp_input+0x220>
 800d7f0:	e000      	b.n	800d7f4 <tcp_input+0x368>
      break;
 800d7f2:	bf00      	nop
  }

  if (pcb == NULL) {
 800d7f4:	69bb      	ldr	r3, [r7, #24]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	f040 80aa 	bne.w	800d950 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d7fc:	4b51      	ldr	r3, [pc, #324]	@ (800d944 <tcp_input+0x4b8>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	61bb      	str	r3, [r7, #24]
 800d802:	e03f      	b.n	800d884 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d804:	69bb      	ldr	r3, [r7, #24]
 800d806:	7d1b      	ldrb	r3, [r3, #20]
 800d808:	2b0a      	cmp	r3, #10
 800d80a:	d006      	beq.n	800d81a <tcp_input+0x38e>
 800d80c:	4b48      	ldr	r3, [pc, #288]	@ (800d930 <tcp_input+0x4a4>)
 800d80e:	f240 121f 	movw	r2, #287	@ 0x11f
 800d812:	494d      	ldr	r1, [pc, #308]	@ (800d948 <tcp_input+0x4bc>)
 800d814:	4848      	ldr	r0, [pc, #288]	@ (800d938 <tcp_input+0x4ac>)
 800d816:	f007 fde7 	bl	80153e8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d81a:	69bb      	ldr	r3, [r7, #24]
 800d81c:	7a1b      	ldrb	r3, [r3, #8]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d009      	beq.n	800d836 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d822:	69bb      	ldr	r3, [r7, #24]
 800d824:	7a1a      	ldrb	r2, [r3, #8]
 800d826:	4b41      	ldr	r3, [pc, #260]	@ (800d92c <tcp_input+0x4a0>)
 800d828:	685b      	ldr	r3, [r3, #4]
 800d82a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d82e:	3301      	adds	r3, #1
 800d830:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d832:	429a      	cmp	r2, r3
 800d834:	d122      	bne.n	800d87c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800d836:	69bb      	ldr	r3, [r7, #24]
 800d838:	8b1a      	ldrh	r2, [r3, #24]
 800d83a:	4b3b      	ldr	r3, [pc, #236]	@ (800d928 <tcp_input+0x49c>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	881b      	ldrh	r3, [r3, #0]
 800d840:	b29b      	uxth	r3, r3
 800d842:	429a      	cmp	r2, r3
 800d844:	d11b      	bne.n	800d87e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800d846:	69bb      	ldr	r3, [r7, #24]
 800d848:	8ada      	ldrh	r2, [r3, #22]
 800d84a:	4b37      	ldr	r3, [pc, #220]	@ (800d928 <tcp_input+0x49c>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	885b      	ldrh	r3, [r3, #2]
 800d850:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d852:	429a      	cmp	r2, r3
 800d854:	d113      	bne.n	800d87e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d856:	69bb      	ldr	r3, [r7, #24]
 800d858:	685a      	ldr	r2, [r3, #4]
 800d85a:	4b34      	ldr	r3, [pc, #208]	@ (800d92c <tcp_input+0x4a0>)
 800d85c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800d85e:	429a      	cmp	r2, r3
 800d860:	d10d      	bne.n	800d87e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d862:	69bb      	ldr	r3, [r7, #24]
 800d864:	681a      	ldr	r2, [r3, #0]
 800d866:	4b31      	ldr	r3, [pc, #196]	@ (800d92c <tcp_input+0x4a0>)
 800d868:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d86a:	429a      	cmp	r2, r3
 800d86c:	d107      	bne.n	800d87e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800d86e:	69b8      	ldr	r0, [r7, #24]
 800d870:	f000 fb7c 	bl	800df6c <tcp_timewait_input>
        }
        pbuf_free(p);
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f7fd fc39 	bl	800b0ec <pbuf_free>
        return;
 800d87a:	e209      	b.n	800dc90 <tcp_input+0x804>
        continue;
 800d87c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d87e:	69bb      	ldr	r3, [r7, #24]
 800d880:	68db      	ldr	r3, [r3, #12]
 800d882:	61bb      	str	r3, [r7, #24]
 800d884:	69bb      	ldr	r3, [r7, #24]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d1bc      	bne.n	800d804 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800d88a:	2300      	movs	r3, #0
 800d88c:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d88e:	4b2f      	ldr	r3, [pc, #188]	@ (800d94c <tcp_input+0x4c0>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	617b      	str	r3, [r7, #20]
 800d894:	e02a      	b.n	800d8ec <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	7a1b      	ldrb	r3, [r3, #8]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d00c      	beq.n	800d8b8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d89e:	697b      	ldr	r3, [r7, #20]
 800d8a0:	7a1a      	ldrb	r2, [r3, #8]
 800d8a2:	4b22      	ldr	r3, [pc, #136]	@ (800d92c <tcp_input+0x4a0>)
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d8aa:	3301      	adds	r3, #1
 800d8ac:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d8ae:	429a      	cmp	r2, r3
 800d8b0:	d002      	beq.n	800d8b8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	61fb      	str	r3, [r7, #28]
        continue;
 800d8b6:	e016      	b.n	800d8e6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800d8b8:	697b      	ldr	r3, [r7, #20]
 800d8ba:	8ada      	ldrh	r2, [r3, #22]
 800d8bc:	4b1a      	ldr	r3, [pc, #104]	@ (800d928 <tcp_input+0x49c>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	885b      	ldrh	r3, [r3, #2]
 800d8c2:	b29b      	uxth	r3, r3
 800d8c4:	429a      	cmp	r2, r3
 800d8c6:	d10c      	bne.n	800d8e2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d8c8:	697b      	ldr	r3, [r7, #20]
 800d8ca:	681a      	ldr	r2, [r3, #0]
 800d8cc:	4b17      	ldr	r3, [pc, #92]	@ (800d92c <tcp_input+0x4a0>)
 800d8ce:	695b      	ldr	r3, [r3, #20]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d00f      	beq.n	800d8f4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d00d      	beq.n	800d8f6 <tcp_input+0x46a>
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d009      	beq.n	800d8f6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	68db      	ldr	r3, [r3, #12]
 800d8ea:	617b      	str	r3, [r7, #20]
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d1d1      	bne.n	800d896 <tcp_input+0x40a>
 800d8f2:	e000      	b.n	800d8f6 <tcp_input+0x46a>
            break;
 800d8f4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d029      	beq.n	800d950 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d8fc:	69fb      	ldr	r3, [r7, #28]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d00a      	beq.n	800d918 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	68da      	ldr	r2, [r3, #12]
 800d906:	69fb      	ldr	r3, [r7, #28]
 800d908:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d90a:	4b10      	ldr	r3, [pc, #64]	@ (800d94c <tcp_input+0x4c0>)
 800d90c:	681a      	ldr	r2, [r3, #0]
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d912:	4a0e      	ldr	r2, [pc, #56]	@ (800d94c <tcp_input+0x4c0>)
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d918:	6978      	ldr	r0, [r7, #20]
 800d91a:	f000 fa15 	bl	800dd48 <tcp_listen_input>
      }
      pbuf_free(p);
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f7fd fbe4 	bl	800b0ec <pbuf_free>
      return;
 800d924:	e1b4      	b.n	800dc90 <tcp_input+0x804>
 800d926:	bf00      	nop
 800d928:	24003300 	.word	0x24003300
 800d92c:	2400036c 	.word	0x2400036c
 800d930:	080181e0 	.word	0x080181e0
 800d934:	0801830c 	.word	0x0801830c
 800d938:	0801822c 	.word	0x0801822c
 800d93c:	240032e0 	.word	0x240032e0
 800d940:	08018338 	.word	0x08018338
 800d944:	240032e4 	.word	0x240032e4
 800d948:	08018364 	.word	0x08018364
 800d94c:	240032dc 	.word	0x240032dc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d950:	69bb      	ldr	r3, [r7, #24]
 800d952:	2b00      	cmp	r3, #0
 800d954:	f000 8158 	beq.w	800dc08 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d958:	4b95      	ldr	r3, [pc, #596]	@ (800dbb0 <tcp_input+0x724>)
 800d95a:	2200      	movs	r2, #0
 800d95c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	891a      	ldrh	r2, [r3, #8]
 800d962:	4b93      	ldr	r3, [pc, #588]	@ (800dbb0 <tcp_input+0x724>)
 800d964:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d966:	4a92      	ldr	r2, [pc, #584]	@ (800dbb0 <tcp_input+0x724>)
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d96c:	4b91      	ldr	r3, [pc, #580]	@ (800dbb4 <tcp_input+0x728>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	4a8f      	ldr	r2, [pc, #572]	@ (800dbb0 <tcp_input+0x724>)
 800d972:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 800d974:	4b90      	ldr	r3, [pc, #576]	@ (800dbb8 <tcp_input+0x72c>)
 800d976:	2200      	movs	r2, #0
 800d978:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d97a:	4b90      	ldr	r3, [pc, #576]	@ (800dbbc <tcp_input+0x730>)
 800d97c:	2200      	movs	r2, #0
 800d97e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d980:	4b8f      	ldr	r3, [pc, #572]	@ (800dbc0 <tcp_input+0x734>)
 800d982:	2200      	movs	r2, #0
 800d984:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d986:	4b8f      	ldr	r3, [pc, #572]	@ (800dbc4 <tcp_input+0x738>)
 800d988:	781b      	ldrb	r3, [r3, #0]
 800d98a:	f003 0308 	and.w	r3, r3, #8
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d006      	beq.n	800d9a0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	7b5b      	ldrb	r3, [r3, #13]
 800d996:	f043 0301 	orr.w	r3, r3, #1
 800d99a:	b2da      	uxtb	r2, r3
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d9a0:	69bb      	ldr	r3, [r7, #24]
 800d9a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d017      	beq.n	800d9d8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d9a8:	69b8      	ldr	r0, [r7, #24]
 800d9aa:	f7fe ffdd 	bl	800c968 <tcp_process_refused_data>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	f113 0f0d 	cmn.w	r3, #13
 800d9b4:	d007      	beq.n	800d9c6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d9b6:	69bb      	ldr	r3, [r7, #24]
 800d9b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d00c      	beq.n	800d9d8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d9be:	4b82      	ldr	r3, [pc, #520]	@ (800dbc8 <tcp_input+0x73c>)
 800d9c0:	881b      	ldrh	r3, [r3, #0]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d008      	beq.n	800d9d8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d9c6:	69bb      	ldr	r3, [r7, #24]
 800d9c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	f040 80e3 	bne.w	800db96 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d9d0:	69b8      	ldr	r0, [r7, #24]
 800d9d2:	f003 ff07 	bl	80117e4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d9d6:	e0de      	b.n	800db96 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800d9d8:	4a7c      	ldr	r2, [pc, #496]	@ (800dbcc <tcp_input+0x740>)
 800d9da:	69bb      	ldr	r3, [r7, #24]
 800d9dc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d9de:	69b8      	ldr	r0, [r7, #24]
 800d9e0:	f000 fb3e 	bl	800e060 <tcp_process>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d9e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d9ec:	f113 0f0d 	cmn.w	r3, #13
 800d9f0:	f000 80d3 	beq.w	800db9a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800d9f4:	4b71      	ldr	r3, [pc, #452]	@ (800dbbc <tcp_input+0x730>)
 800d9f6:	781b      	ldrb	r3, [r3, #0]
 800d9f8:	f003 0308 	and.w	r3, r3, #8
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d015      	beq.n	800da2c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800da00:	69bb      	ldr	r3, [r7, #24]
 800da02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da06:	2b00      	cmp	r3, #0
 800da08:	d008      	beq.n	800da1c <tcp_input+0x590>
 800da0a:	69bb      	ldr	r3, [r7, #24]
 800da0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da10:	69ba      	ldr	r2, [r7, #24]
 800da12:	6912      	ldr	r2, [r2, #16]
 800da14:	f06f 010d 	mvn.w	r1, #13
 800da18:	4610      	mov	r0, r2
 800da1a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800da1c:	69b9      	ldr	r1, [r7, #24]
 800da1e:	486c      	ldr	r0, [pc, #432]	@ (800dbd0 <tcp_input+0x744>)
 800da20:	f7ff fb40 	bl	800d0a4 <tcp_pcb_remove>
        tcp_free(pcb);
 800da24:	69b8      	ldr	r0, [r7, #24]
 800da26:	f7fd fe25 	bl	800b674 <tcp_free>
 800da2a:	e0da      	b.n	800dbe2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800da2c:	2300      	movs	r3, #0
 800da2e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800da30:	4b63      	ldr	r3, [pc, #396]	@ (800dbc0 <tcp_input+0x734>)
 800da32:	881b      	ldrh	r3, [r3, #0]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d01d      	beq.n	800da74 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800da38:	4b61      	ldr	r3, [pc, #388]	@ (800dbc0 <tcp_input+0x734>)
 800da3a:	881b      	ldrh	r3, [r3, #0]
 800da3c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800da3e:	69bb      	ldr	r3, [r7, #24]
 800da40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800da44:	2b00      	cmp	r3, #0
 800da46:	d00a      	beq.n	800da5e <tcp_input+0x5d2>
 800da48:	69bb      	ldr	r3, [r7, #24]
 800da4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800da4e:	69ba      	ldr	r2, [r7, #24]
 800da50:	6910      	ldr	r0, [r2, #16]
 800da52:	89fa      	ldrh	r2, [r7, #14]
 800da54:	69b9      	ldr	r1, [r7, #24]
 800da56:	4798      	blx	r3
 800da58:	4603      	mov	r3, r0
 800da5a:	74fb      	strb	r3, [r7, #19]
 800da5c:	e001      	b.n	800da62 <tcp_input+0x5d6>
 800da5e:	2300      	movs	r3, #0
 800da60:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800da62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800da66:	f113 0f0d 	cmn.w	r3, #13
 800da6a:	f000 8098 	beq.w	800db9e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800da6e:	4b54      	ldr	r3, [pc, #336]	@ (800dbc0 <tcp_input+0x734>)
 800da70:	2200      	movs	r2, #0
 800da72:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800da74:	69b8      	ldr	r0, [r7, #24]
 800da76:	f000 f927 	bl	800dcc8 <tcp_input_delayed_close>
 800da7a:	4603      	mov	r3, r0
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	f040 8090 	bne.w	800dba2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800da82:	4b4d      	ldr	r3, [pc, #308]	@ (800dbb8 <tcp_input+0x72c>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d041      	beq.n	800db0e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800da8a:	69bb      	ldr	r3, [r7, #24]
 800da8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d006      	beq.n	800daa0 <tcp_input+0x614>
 800da92:	4b50      	ldr	r3, [pc, #320]	@ (800dbd4 <tcp_input+0x748>)
 800da94:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800da98:	494f      	ldr	r1, [pc, #316]	@ (800dbd8 <tcp_input+0x74c>)
 800da9a:	4850      	ldr	r0, [pc, #320]	@ (800dbdc <tcp_input+0x750>)
 800da9c:	f007 fca4 	bl	80153e8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800daa0:	69bb      	ldr	r3, [r7, #24]
 800daa2:	8b5b      	ldrh	r3, [r3, #26]
 800daa4:	f003 0310 	and.w	r3, r3, #16
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d008      	beq.n	800dabe <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800daac:	4b42      	ldr	r3, [pc, #264]	@ (800dbb8 <tcp_input+0x72c>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	4618      	mov	r0, r3
 800dab2:	f7fd fb1b 	bl	800b0ec <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800dab6:	69b8      	ldr	r0, [r7, #24]
 800dab8:	f7fe f8ce 	bl	800bc58 <tcp_abort>
            goto aborted;
 800dabc:	e091      	b.n	800dbe2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800dabe:	69bb      	ldr	r3, [r7, #24]
 800dac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d00c      	beq.n	800dae2 <tcp_input+0x656>
 800dac8:	69bb      	ldr	r3, [r7, #24]
 800daca:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800dace:	69bb      	ldr	r3, [r7, #24]
 800dad0:	6918      	ldr	r0, [r3, #16]
 800dad2:	4b39      	ldr	r3, [pc, #228]	@ (800dbb8 <tcp_input+0x72c>)
 800dad4:	681a      	ldr	r2, [r3, #0]
 800dad6:	2300      	movs	r3, #0
 800dad8:	69b9      	ldr	r1, [r7, #24]
 800dada:	47a0      	blx	r4
 800dadc:	4603      	mov	r3, r0
 800dade:	74fb      	strb	r3, [r7, #19]
 800dae0:	e008      	b.n	800daf4 <tcp_input+0x668>
 800dae2:	4b35      	ldr	r3, [pc, #212]	@ (800dbb8 <tcp_input+0x72c>)
 800dae4:	681a      	ldr	r2, [r3, #0]
 800dae6:	2300      	movs	r3, #0
 800dae8:	69b9      	ldr	r1, [r7, #24]
 800daea:	2000      	movs	r0, #0
 800daec:	f7ff f814 	bl	800cb18 <tcp_recv_null>
 800daf0:	4603      	mov	r3, r0
 800daf2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800daf4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800daf8:	f113 0f0d 	cmn.w	r3, #13
 800dafc:	d053      	beq.n	800dba6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800dafe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d003      	beq.n	800db0e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800db06:	4b2c      	ldr	r3, [pc, #176]	@ (800dbb8 <tcp_input+0x72c>)
 800db08:	681a      	ldr	r2, [r3, #0]
 800db0a:	69bb      	ldr	r3, [r7, #24]
 800db0c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800db0e:	4b2b      	ldr	r3, [pc, #172]	@ (800dbbc <tcp_input+0x730>)
 800db10:	781b      	ldrb	r3, [r3, #0]
 800db12:	f003 0320 	and.w	r3, r3, #32
 800db16:	2b00      	cmp	r3, #0
 800db18:	d030      	beq.n	800db7c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800db1a:	69bb      	ldr	r3, [r7, #24]
 800db1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d009      	beq.n	800db36 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800db22:	69bb      	ldr	r3, [r7, #24]
 800db24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800db26:	7b5a      	ldrb	r2, [r3, #13]
 800db28:	69bb      	ldr	r3, [r7, #24]
 800db2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800db2c:	f042 0220 	orr.w	r2, r2, #32
 800db30:	b2d2      	uxtb	r2, r2
 800db32:	735a      	strb	r2, [r3, #13]
 800db34:	e022      	b.n	800db7c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800db36:	69bb      	ldr	r3, [r7, #24]
 800db38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db3a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800db3e:	d005      	beq.n	800db4c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800db40:	69bb      	ldr	r3, [r7, #24]
 800db42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db44:	3301      	adds	r3, #1
 800db46:	b29a      	uxth	r2, r3
 800db48:	69bb      	ldr	r3, [r7, #24]
 800db4a:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800db4c:	69bb      	ldr	r3, [r7, #24]
 800db4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800db52:	2b00      	cmp	r3, #0
 800db54:	d00b      	beq.n	800db6e <tcp_input+0x6e2>
 800db56:	69bb      	ldr	r3, [r7, #24]
 800db58:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800db5c:	69bb      	ldr	r3, [r7, #24]
 800db5e:	6918      	ldr	r0, [r3, #16]
 800db60:	2300      	movs	r3, #0
 800db62:	2200      	movs	r2, #0
 800db64:	69b9      	ldr	r1, [r7, #24]
 800db66:	47a0      	blx	r4
 800db68:	4603      	mov	r3, r0
 800db6a:	74fb      	strb	r3, [r7, #19]
 800db6c:	e001      	b.n	800db72 <tcp_input+0x6e6>
 800db6e:	2300      	movs	r3, #0
 800db70:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800db72:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800db76:	f113 0f0d 	cmn.w	r3, #13
 800db7a:	d016      	beq.n	800dbaa <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800db7c:	4b13      	ldr	r3, [pc, #76]	@ (800dbcc <tcp_input+0x740>)
 800db7e:	2200      	movs	r2, #0
 800db80:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800db82:	69b8      	ldr	r0, [r7, #24]
 800db84:	f000 f8a0 	bl	800dcc8 <tcp_input_delayed_close>
 800db88:	4603      	mov	r3, r0
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d128      	bne.n	800dbe0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800db8e:	69b8      	ldr	r0, [r7, #24]
 800db90:	f003 f812 	bl	8010bb8 <tcp_output>
 800db94:	e025      	b.n	800dbe2 <tcp_input+0x756>
        goto aborted;
 800db96:	bf00      	nop
 800db98:	e023      	b.n	800dbe2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800db9a:	bf00      	nop
 800db9c:	e021      	b.n	800dbe2 <tcp_input+0x756>
              goto aborted;
 800db9e:	bf00      	nop
 800dba0:	e01f      	b.n	800dbe2 <tcp_input+0x756>
          goto aborted;
 800dba2:	bf00      	nop
 800dba4:	e01d      	b.n	800dbe2 <tcp_input+0x756>
            goto aborted;
 800dba6:	bf00      	nop
 800dba8:	e01b      	b.n	800dbe2 <tcp_input+0x756>
              goto aborted;
 800dbaa:	bf00      	nop
 800dbac:	e019      	b.n	800dbe2 <tcp_input+0x756>
 800dbae:	bf00      	nop
 800dbb0:	240032ec 	.word	0x240032ec
 800dbb4:	24003300 	.word	0x24003300
 800dbb8:	24003320 	.word	0x24003320
 800dbbc:	2400331d 	.word	0x2400331d
 800dbc0:	24003318 	.word	0x24003318
 800dbc4:	2400331c 	.word	0x2400331c
 800dbc8:	2400331a 	.word	0x2400331a
 800dbcc:	24003324 	.word	0x24003324
 800dbd0:	240032e0 	.word	0x240032e0
 800dbd4:	080181e0 	.word	0x080181e0
 800dbd8:	08018394 	.word	0x08018394
 800dbdc:	0801822c 	.word	0x0801822c
          goto aborted;
 800dbe0:	bf00      	nop
    tcp_input_pcb = NULL;
 800dbe2:	4b2d      	ldr	r3, [pc, #180]	@ (800dc98 <tcp_input+0x80c>)
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800dbe8:	4b2c      	ldr	r3, [pc, #176]	@ (800dc9c <tcp_input+0x810>)
 800dbea:	2200      	movs	r2, #0
 800dbec:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800dbee:	4b2c      	ldr	r3, [pc, #176]	@ (800dca0 <tcp_input+0x814>)
 800dbf0:	685b      	ldr	r3, [r3, #4]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d031      	beq.n	800dc5a <tcp_input+0x7ce>
      pbuf_free(inseg.p);
 800dbf6:	4b2a      	ldr	r3, [pc, #168]	@ (800dca0 <tcp_input+0x814>)
 800dbf8:	685b      	ldr	r3, [r3, #4]
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f7fd fa76 	bl	800b0ec <pbuf_free>
      inseg.p = NULL;
 800dc00:	4b27      	ldr	r3, [pc, #156]	@ (800dca0 <tcp_input+0x814>)
 800dc02:	2200      	movs	r2, #0
 800dc04:	605a      	str	r2, [r3, #4]
 800dc06:	e028      	b.n	800dc5a <tcp_input+0x7ce>
    }
  } else {
    /* If no matching PCB was found, send a TCP RST (reset) to the
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800dc08:	4b26      	ldr	r3, [pc, #152]	@ (800dca4 <tcp_input+0x818>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	899b      	ldrh	r3, [r3, #12]
 800dc0e:	b29b      	uxth	r3, r3
 800dc10:	4618      	mov	r0, r3
 800dc12:	f7fb fdf9 	bl	8009808 <lwip_htons>
 800dc16:	4603      	mov	r3, r0
 800dc18:	b2db      	uxtb	r3, r3
 800dc1a:	f003 0304 	and.w	r3, r3, #4
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d118      	bne.n	800dc54 <tcp_input+0x7c8>
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dc22:	4b21      	ldr	r3, [pc, #132]	@ (800dca8 <tcp_input+0x81c>)
 800dc24:	6819      	ldr	r1, [r3, #0]
 800dc26:	4b21      	ldr	r3, [pc, #132]	@ (800dcac <tcp_input+0x820>)
 800dc28:	881b      	ldrh	r3, [r3, #0]
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	4b20      	ldr	r3, [pc, #128]	@ (800dcb0 <tcp_input+0x824>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dc32:	4b1c      	ldr	r3, [pc, #112]	@ (800dca4 <tcp_input+0x818>)
 800dc34:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dc36:	885b      	ldrh	r3, [r3, #2]
 800dc38:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dc3a:	4a1a      	ldr	r2, [pc, #104]	@ (800dca4 <tcp_input+0x818>)
 800dc3c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dc3e:	8812      	ldrh	r2, [r2, #0]
 800dc40:	b292      	uxth	r2, r2
 800dc42:	9202      	str	r2, [sp, #8]
 800dc44:	9301      	str	r3, [sp, #4]
 800dc46:	4b1b      	ldr	r3, [pc, #108]	@ (800dcb4 <tcp_input+0x828>)
 800dc48:	9300      	str	r3, [sp, #0]
 800dc4a:	4b1b      	ldr	r3, [pc, #108]	@ (800dcb8 <tcp_input+0x82c>)
 800dc4c:	4602      	mov	r2, r0
 800dc4e:	2000      	movs	r0, #0
 800dc50:	f003 fd72 	bl	8011738 <tcp_rst>
    }
    pbuf_free(p);
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f7fd fa49 	bl	800b0ec <pbuf_free>
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
 800dc5a:	f7ff fbbf 	bl	800d3dc <tcp_pcbs_sane>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d114      	bne.n	800dc8e <tcp_input+0x802>
 800dc64:	4b15      	ldr	r3, [pc, #84]	@ (800dcbc <tcp_input+0x830>)
 800dc66:	f240 2249 	movw	r2, #585	@ 0x249
 800dc6a:	4915      	ldr	r1, [pc, #84]	@ (800dcc0 <tcp_input+0x834>)
 800dc6c:	4815      	ldr	r0, [pc, #84]	@ (800dcc4 <tcp_input+0x838>)
 800dc6e:	f007 fbbb 	bl	80153e8 <iprintf>
  PERF_STOP("tcp_input");
  return;
 800dc72:	e00c      	b.n	800dc8e <tcp_input+0x802>
    goto dropped;
 800dc74:	bf00      	nop
 800dc76:	e006      	b.n	800dc86 <tcp_input+0x7fa>
    goto dropped;
 800dc78:	bf00      	nop
 800dc7a:	e004      	b.n	800dc86 <tcp_input+0x7fa>
    goto dropped;
 800dc7c:	bf00      	nop
 800dc7e:	e002      	b.n	800dc86 <tcp_input+0x7fa>
      goto dropped;
 800dc80:	bf00      	nop
 800dc82:	e000      	b.n	800dc86 <tcp_input+0x7fa>
      goto dropped;
 800dc84:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f7fd fa30 	bl	800b0ec <pbuf_free>
 800dc8c:	e000      	b.n	800dc90 <tcp_input+0x804>
  return;
 800dc8e:	bf00      	nop
}
 800dc90:	3724      	adds	r7, #36	@ 0x24
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd90      	pop	{r4, r7, pc}
 800dc96:	bf00      	nop
 800dc98:	24003324 	.word	0x24003324
 800dc9c:	24003320 	.word	0x24003320
 800dca0:	240032ec 	.word	0x240032ec
 800dca4:	24003300 	.word	0x24003300
 800dca8:	24003314 	.word	0x24003314
 800dcac:	2400331a 	.word	0x2400331a
 800dcb0:	24003310 	.word	0x24003310
 800dcb4:	2400037c 	.word	0x2400037c
 800dcb8:	24000380 	.word	0x24000380
 800dcbc:	080181e0 	.word	0x080181e0
 800dcc0:	080183b0 	.word	0x080183b0
 800dcc4:	0801822c 	.word	0x0801822c

0800dcc8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b082      	sub	sp, #8
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d106      	bne.n	800dce4 <tcp_input_delayed_close+0x1c>
 800dcd6:	4b17      	ldr	r3, [pc, #92]	@ (800dd34 <tcp_input_delayed_close+0x6c>)
 800dcd8:	f240 225a 	movw	r2, #602	@ 0x25a
 800dcdc:	4916      	ldr	r1, [pc, #88]	@ (800dd38 <tcp_input_delayed_close+0x70>)
 800dcde:	4817      	ldr	r0, [pc, #92]	@ (800dd3c <tcp_input_delayed_close+0x74>)
 800dce0:	f007 fb82 	bl	80153e8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800dce4:	4b16      	ldr	r3, [pc, #88]	@ (800dd40 <tcp_input_delayed_close+0x78>)
 800dce6:	781b      	ldrb	r3, [r3, #0]
 800dce8:	f003 0310 	and.w	r3, r3, #16
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d01c      	beq.n	800dd2a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	8b5b      	ldrh	r3, [r3, #26]
 800dcf4:	f003 0310 	and.w	r3, r3, #16
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d10d      	bne.n	800dd18 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d008      	beq.n	800dd18 <tcp_input_delayed_close+0x50>
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd0c:	687a      	ldr	r2, [r7, #4]
 800dd0e:	6912      	ldr	r2, [r2, #16]
 800dd10:	f06f 010e 	mvn.w	r1, #14
 800dd14:	4610      	mov	r0, r2
 800dd16:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dd18:	6879      	ldr	r1, [r7, #4]
 800dd1a:	480a      	ldr	r0, [pc, #40]	@ (800dd44 <tcp_input_delayed_close+0x7c>)
 800dd1c:	f7ff f9c2 	bl	800d0a4 <tcp_pcb_remove>
    tcp_free(pcb);
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f7fd fca7 	bl	800b674 <tcp_free>
    return 1;
 800dd26:	2301      	movs	r3, #1
 800dd28:	e000      	b.n	800dd2c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800dd2a:	2300      	movs	r3, #0
}
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	3708      	adds	r7, #8
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}
 800dd34:	080181e0 	.word	0x080181e0
 800dd38:	080183cc 	.word	0x080183cc
 800dd3c:	0801822c 	.word	0x0801822c
 800dd40:	2400331d 	.word	0x2400331d
 800dd44:	240032e0 	.word	0x240032e0

0800dd48 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800dd48:	b590      	push	{r4, r7, lr}
 800dd4a:	b08b      	sub	sp, #44	@ 0x2c
 800dd4c:	af04      	add	r7, sp, #16
 800dd4e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800dd50:	4b77      	ldr	r3, [pc, #476]	@ (800df30 <tcp_listen_input+0x1e8>)
 800dd52:	781b      	ldrb	r3, [r3, #0]
 800dd54:	f003 0304 	and.w	r3, r3, #4
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	f040 80e2 	bne.w	800df22 <tcp_listen_input+0x1da>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d106      	bne.n	800dd72 <tcp_listen_input+0x2a>
 800dd64:	4b73      	ldr	r3, [pc, #460]	@ (800df34 <tcp_listen_input+0x1ec>)
 800dd66:	f240 2281 	movw	r2, #641	@ 0x281
 800dd6a:	4973      	ldr	r1, [pc, #460]	@ (800df38 <tcp_listen_input+0x1f0>)
 800dd6c:	4873      	ldr	r0, [pc, #460]	@ (800df3c <tcp_listen_input+0x1f4>)
 800dd6e:	f007 fb3b 	bl	80153e8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800dd72:	4b6f      	ldr	r3, [pc, #444]	@ (800df30 <tcp_listen_input+0x1e8>)
 800dd74:	781b      	ldrb	r3, [r3, #0]
 800dd76:	f003 0310 	and.w	r3, r3, #16
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d019      	beq.n	800ddb2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd7e:	4b70      	ldr	r3, [pc, #448]	@ (800df40 <tcp_listen_input+0x1f8>)
 800dd80:	6819      	ldr	r1, [r3, #0]
 800dd82:	4b70      	ldr	r3, [pc, #448]	@ (800df44 <tcp_listen_input+0x1fc>)
 800dd84:	881b      	ldrh	r3, [r3, #0]
 800dd86:	461a      	mov	r2, r3
 800dd88:	4b6f      	ldr	r3, [pc, #444]	@ (800df48 <tcp_listen_input+0x200>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dd8e:	4b6f      	ldr	r3, [pc, #444]	@ (800df4c <tcp_listen_input+0x204>)
 800dd90:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd92:	885b      	ldrh	r3, [r3, #2]
 800dd94:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dd96:	4a6d      	ldr	r2, [pc, #436]	@ (800df4c <tcp_listen_input+0x204>)
 800dd98:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd9a:	8812      	ldrh	r2, [r2, #0]
 800dd9c:	b292      	uxth	r2, r2
 800dd9e:	9202      	str	r2, [sp, #8]
 800dda0:	9301      	str	r3, [sp, #4]
 800dda2:	4b6b      	ldr	r3, [pc, #428]	@ (800df50 <tcp_listen_input+0x208>)
 800dda4:	9300      	str	r3, [sp, #0]
 800dda6:	4b6b      	ldr	r3, [pc, #428]	@ (800df54 <tcp_listen_input+0x20c>)
 800dda8:	4602      	mov	r2, r0
 800ddaa:	6878      	ldr	r0, [r7, #4]
 800ddac:	f003 fcc4 	bl	8011738 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ddb0:	e0b9      	b.n	800df26 <tcp_listen_input+0x1de>
  } else if (flags & TCP_SYN) {
 800ddb2:	4b5f      	ldr	r3, [pc, #380]	@ (800df30 <tcp_listen_input+0x1e8>)
 800ddb4:	781b      	ldrb	r3, [r3, #0]
 800ddb6:	f003 0302 	and.w	r3, r3, #2
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	f000 80b3 	beq.w	800df26 <tcp_listen_input+0x1de>
    LWIP_DEBUGF(TCP_DEBUG, ("TCP connection request %"U16_F" -> %"U16_F".\n", tcphdr->src, tcphdr->dest));
 800ddc0:	4b62      	ldr	r3, [pc, #392]	@ (800df4c <tcp_listen_input+0x204>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	881b      	ldrh	r3, [r3, #0]
 800ddc6:	b29b      	uxth	r3, r3
 800ddc8:	4619      	mov	r1, r3
 800ddca:	4b60      	ldr	r3, [pc, #384]	@ (800df4c <tcp_listen_input+0x204>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	885b      	ldrh	r3, [r3, #2]
 800ddd0:	b29b      	uxth	r3, r3
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	4860      	ldr	r0, [pc, #384]	@ (800df58 <tcp_listen_input+0x210>)
 800ddd6:	f007 fb07 	bl	80153e8 <iprintf>
    npcb = tcp_alloc(pcb->prio);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	7d5b      	ldrb	r3, [r3, #21]
 800ddde:	4618      	mov	r0, r3
 800dde0:	f7fe ffde 	bl	800cda0 <tcp_alloc>
 800dde4:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d114      	bne.n	800de16 <tcp_listen_input+0xce>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: could not allocate PCB\n"));
 800ddec:	485b      	ldr	r0, [pc, #364]	@ (800df5c <tcp_listen_input+0x214>)
 800ddee:	f007 fb6b 	bl	80154c8 <puts>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	699b      	ldr	r3, [r3, #24]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d00a      	beq.n	800de10 <tcp_listen_input+0xc8>
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	699b      	ldr	r3, [r3, #24]
 800ddfe:	687a      	ldr	r2, [r7, #4]
 800de00:	6910      	ldr	r0, [r2, #16]
 800de02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800de06:	2100      	movs	r1, #0
 800de08:	4798      	blx	r3
 800de0a:	4603      	mov	r3, r0
 800de0c:	73bb      	strb	r3, [r7, #14]
      return;
 800de0e:	e08b      	b.n	800df28 <tcp_listen_input+0x1e0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800de10:	23f0      	movs	r3, #240	@ 0xf0
 800de12:	73bb      	strb	r3, [r7, #14]
      return;
 800de14:	e088      	b.n	800df28 <tcp_listen_input+0x1e0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800de16:	4b52      	ldr	r3, [pc, #328]	@ (800df60 <tcp_listen_input+0x218>)
 800de18:	695a      	ldr	r2, [r3, #20]
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800de1e:	4b50      	ldr	r3, [pc, #320]	@ (800df60 <tcp_listen_input+0x218>)
 800de20:	691a      	ldr	r2, [r3, #16]
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	8ada      	ldrh	r2, [r3, #22]
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800de2e:	4b47      	ldr	r3, [pc, #284]	@ (800df4c <tcp_listen_input+0x204>)
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	881b      	ldrh	r3, [r3, #0]
 800de34:	b29a      	uxth	r2, r3
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800de3a:	697b      	ldr	r3, [r7, #20]
 800de3c:	2203      	movs	r2, #3
 800de3e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800de40:	4b41      	ldr	r3, [pc, #260]	@ (800df48 <tcp_listen_input+0x200>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	1c5a      	adds	r2, r3, #1
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800de52:	6978      	ldr	r0, [r7, #20]
 800de54:	f7ff f9c8 	bl	800d1e8 <tcp_next_iss>
 800de58:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	693a      	ldr	r2, [r7, #16]
 800de5e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800de60:	697b      	ldr	r3, [r7, #20]
 800de62:	693a      	ldr	r2, [r7, #16]
 800de64:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	693a      	ldr	r2, [r7, #16]
 800de6a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	693a      	ldr	r2, [r7, #16]
 800de70:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800de72:	4b35      	ldr	r3, [pc, #212]	@ (800df48 <tcp_listen_input+0x200>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	1e5a      	subs	r2, r3, #1
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	691a      	ldr	r2, [r3, #16]
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	687a      	ldr	r2, [r7, #4]
 800de88:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	7a5b      	ldrb	r3, [r3, #9]
 800de8e:	f003 030c 	and.w	r3, r3, #12
 800de92:	b2da      	uxtb	r2, r3
 800de94:	697b      	ldr	r3, [r7, #20]
 800de96:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	7a1a      	ldrb	r2, [r3, #8]
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800dea0:	4b30      	ldr	r3, [pc, #192]	@ (800df64 <tcp_listen_input+0x21c>)
 800dea2:	681a      	ldr	r2, [r3, #0]
 800dea4:	697b      	ldr	r3, [r7, #20]
 800dea6:	60da      	str	r2, [r3, #12]
 800dea8:	4a2e      	ldr	r2, [pc, #184]	@ (800df64 <tcp_listen_input+0x21c>)
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	6013      	str	r3, [r2, #0]
 800deae:	f003 fe8d 	bl	8011bcc <tcp_timer_needed>
 800deb2:	4b2d      	ldr	r3, [pc, #180]	@ (800df68 <tcp_listen_input+0x220>)
 800deb4:	2201      	movs	r2, #1
 800deb6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800deb8:	6978      	ldr	r0, [r7, #20]
 800deba:	f001 fdff 	bl	800fabc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800debe:	4b23      	ldr	r3, [pc, #140]	@ (800df4c <tcp_listen_input+0x204>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	89db      	ldrh	r3, [r3, #14]
 800dec4:	b29a      	uxth	r2, r3
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800dedc:	697b      	ldr	r3, [r7, #20]
 800dede:	3304      	adds	r3, #4
 800dee0:	4618      	mov	r0, r3
 800dee2:	f005 fd71 	bl	80139c8 <ip4_route>
 800dee6:	4601      	mov	r1, r0
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	3304      	adds	r3, #4
 800deec:	461a      	mov	r2, r3
 800deee:	4620      	mov	r0, r4
 800def0:	f7ff f9a0 	bl	800d234 <tcp_eff_send_mss_netif>
 800def4:	4603      	mov	r3, r0
 800def6:	461a      	mov	r2, r3
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800defc:	2112      	movs	r1, #18
 800defe:	6978      	ldr	r0, [r7, #20]
 800df00:	f002 fd6c 	bl	80109dc <tcp_enqueue_flags>
 800df04:	4603      	mov	r3, r0
 800df06:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800df08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d004      	beq.n	800df1a <tcp_listen_input+0x1d2>
      tcp_abandon(npcb, 0);
 800df10:	2100      	movs	r1, #0
 800df12:	6978      	ldr	r0, [r7, #20]
 800df14:	f7fd fde2 	bl	800badc <tcp_abandon>
      return;
 800df18:	e006      	b.n	800df28 <tcp_listen_input+0x1e0>
    tcp_output(npcb);
 800df1a:	6978      	ldr	r0, [r7, #20]
 800df1c:	f002 fe4c 	bl	8010bb8 <tcp_output>
  return;
 800df20:	e001      	b.n	800df26 <tcp_listen_input+0x1de>
    return;
 800df22:	bf00      	nop
 800df24:	e000      	b.n	800df28 <tcp_listen_input+0x1e0>
  return;
 800df26:	bf00      	nop
}
 800df28:	371c      	adds	r7, #28
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd90      	pop	{r4, r7, pc}
 800df2e:	bf00      	nop
 800df30:	2400331c 	.word	0x2400331c
 800df34:	080181e0 	.word	0x080181e0
 800df38:	080183f4 	.word	0x080183f4
 800df3c:	0801822c 	.word	0x0801822c
 800df40:	24003314 	.word	0x24003314
 800df44:	2400331a 	.word	0x2400331a
 800df48:	24003310 	.word	0x24003310
 800df4c:	24003300 	.word	0x24003300
 800df50:	2400037c 	.word	0x2400037c
 800df54:	24000380 	.word	0x24000380
 800df58:	08018414 	.word	0x08018414
 800df5c:	08018438 	.word	0x08018438
 800df60:	2400036c 	.word	0x2400036c
 800df64:	240032e0 	.word	0x240032e0
 800df68:	240032e8 	.word	0x240032e8

0800df6c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b086      	sub	sp, #24
 800df70:	af04      	add	r7, sp, #16
 800df72:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800df74:	4b2f      	ldr	r3, [pc, #188]	@ (800e034 <tcp_timewait_input+0xc8>)
 800df76:	781b      	ldrb	r3, [r3, #0]
 800df78:	f003 0304 	and.w	r3, r3, #4
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d153      	bne.n	800e028 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d106      	bne.n	800df94 <tcp_timewait_input+0x28>
 800df86:	4b2c      	ldr	r3, [pc, #176]	@ (800e038 <tcp_timewait_input+0xcc>)
 800df88:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800df8c:	492b      	ldr	r1, [pc, #172]	@ (800e03c <tcp_timewait_input+0xd0>)
 800df8e:	482c      	ldr	r0, [pc, #176]	@ (800e040 <tcp_timewait_input+0xd4>)
 800df90:	f007 fa2a 	bl	80153e8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800df94:	4b27      	ldr	r3, [pc, #156]	@ (800e034 <tcp_timewait_input+0xc8>)
 800df96:	781b      	ldrb	r3, [r3, #0]
 800df98:	f003 0302 	and.w	r3, r3, #2
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d02a      	beq.n	800dff6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800dfa0:	4b28      	ldr	r3, [pc, #160]	@ (800e044 <tcp_timewait_input+0xd8>)
 800dfa2:	681a      	ldr	r2, [r3, #0]
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfa8:	1ad3      	subs	r3, r2, r3
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	db2d      	blt.n	800e00a <tcp_timewait_input+0x9e>
 800dfae:	4b25      	ldr	r3, [pc, #148]	@ (800e044 <tcp_timewait_input+0xd8>)
 800dfb0:	681a      	ldr	r2, [r3, #0]
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfb6:	6879      	ldr	r1, [r7, #4]
 800dfb8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800dfba:	440b      	add	r3, r1
 800dfbc:	1ad3      	subs	r3, r2, r3
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	dc23      	bgt.n	800e00a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dfc2:	4b21      	ldr	r3, [pc, #132]	@ (800e048 <tcp_timewait_input+0xdc>)
 800dfc4:	6819      	ldr	r1, [r3, #0]
 800dfc6:	4b21      	ldr	r3, [pc, #132]	@ (800e04c <tcp_timewait_input+0xe0>)
 800dfc8:	881b      	ldrh	r3, [r3, #0]
 800dfca:	461a      	mov	r2, r3
 800dfcc:	4b1d      	ldr	r3, [pc, #116]	@ (800e044 <tcp_timewait_input+0xd8>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dfd2:	4b1f      	ldr	r3, [pc, #124]	@ (800e050 <tcp_timewait_input+0xe4>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dfd6:	885b      	ldrh	r3, [r3, #2]
 800dfd8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dfda:	4a1d      	ldr	r2, [pc, #116]	@ (800e050 <tcp_timewait_input+0xe4>)
 800dfdc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dfde:	8812      	ldrh	r2, [r2, #0]
 800dfe0:	b292      	uxth	r2, r2
 800dfe2:	9202      	str	r2, [sp, #8]
 800dfe4:	9301      	str	r3, [sp, #4]
 800dfe6:	4b1b      	ldr	r3, [pc, #108]	@ (800e054 <tcp_timewait_input+0xe8>)
 800dfe8:	9300      	str	r3, [sp, #0]
 800dfea:	4b1b      	ldr	r3, [pc, #108]	@ (800e058 <tcp_timewait_input+0xec>)
 800dfec:	4602      	mov	r2, r0
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	f003 fba2 	bl	8011738 <tcp_rst>
      return;
 800dff4:	e01b      	b.n	800e02e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800dff6:	4b0f      	ldr	r3, [pc, #60]	@ (800e034 <tcp_timewait_input+0xc8>)
 800dff8:	781b      	ldrb	r3, [r3, #0]
 800dffa:	f003 0301 	and.w	r3, r3, #1
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d003      	beq.n	800e00a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e002:	4b16      	ldr	r3, [pc, #88]	@ (800e05c <tcp_timewait_input+0xf0>)
 800e004:	681a      	ldr	r2, [r3, #0]
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e00a:	4b10      	ldr	r3, [pc, #64]	@ (800e04c <tcp_timewait_input+0xe0>)
 800e00c:	881b      	ldrh	r3, [r3, #0]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d00c      	beq.n	800e02c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	8b5b      	ldrh	r3, [r3, #26]
 800e016:	f043 0302 	orr.w	r3, r3, #2
 800e01a:	b29a      	uxth	r2, r3
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f002 fdc9 	bl	8010bb8 <tcp_output>
  }
  return;
 800e026:	e001      	b.n	800e02c <tcp_timewait_input+0xc0>
    return;
 800e028:	bf00      	nop
 800e02a:	e000      	b.n	800e02e <tcp_timewait_input+0xc2>
  return;
 800e02c:	bf00      	nop
}
 800e02e:	3708      	adds	r7, #8
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}
 800e034:	2400331c 	.word	0x2400331c
 800e038:	080181e0 	.word	0x080181e0
 800e03c:	08018464 	.word	0x08018464
 800e040:	0801822c 	.word	0x0801822c
 800e044:	24003310 	.word	0x24003310
 800e048:	24003314 	.word	0x24003314
 800e04c:	2400331a 	.word	0x2400331a
 800e050:	24003300 	.word	0x24003300
 800e054:	2400037c 	.word	0x2400037c
 800e058:	24000380 	.word	0x24000380
 800e05c:	240032d4 	.word	0x240032d4

0800e060 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e060:	b590      	push	{r4, r7, lr}
 800e062:	b08d      	sub	sp, #52	@ 0x34
 800e064:	af04      	add	r7, sp, #16
 800e066:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e068:	2300      	movs	r3, #0
 800e06a:	73fb      	strb	r3, [r7, #15]
  err_t err;

  err = ERR_OK;
 800e06c:	2300      	movs	r3, #0
 800e06e:	73bb      	strb	r3, [r7, #14]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d106      	bne.n	800e084 <tcp_process+0x24>
 800e076:	4b88      	ldr	r3, [pc, #544]	@ (800e298 <tcp_process+0x238>)
 800e078:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800e07c:	4987      	ldr	r1, [pc, #540]	@ (800e29c <tcp_process+0x23c>)
 800e07e:	4888      	ldr	r0, [pc, #544]	@ (800e2a0 <tcp_process+0x240>)
 800e080:	f007 f9b2 	bl	80153e8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e084:	4b87      	ldr	r3, [pc, #540]	@ (800e2a4 <tcp_process+0x244>)
 800e086:	781b      	ldrb	r3, [r3, #0]
 800e088:	f003 0304 	and.w	r3, r3, #4
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d056      	beq.n	800e13e <tcp_process+0xde>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	7d1b      	ldrb	r3, [r3, #20]
 800e094:	2b02      	cmp	r3, #2
 800e096:	d108      	bne.n	800e0aa <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e09c:	4b82      	ldr	r3, [pc, #520]	@ (800e2a8 <tcp_process+0x248>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d123      	bne.n	800e0ec <tcp_process+0x8c>
        acceptable = 1;
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	73fb      	strb	r3, [r7, #15]
 800e0a8:	e020      	b.n	800e0ec <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e0ae:	4b7f      	ldr	r3, [pc, #508]	@ (800e2ac <tcp_process+0x24c>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	d102      	bne.n	800e0bc <tcp_process+0x5c>
        acceptable = 1;
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	73fb      	strb	r3, [r7, #15]
 800e0ba:	e017      	b.n	800e0ec <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e0bc:	4b7b      	ldr	r3, [pc, #492]	@ (800e2ac <tcp_process+0x24c>)
 800e0be:	681a      	ldr	r2, [r3, #0]
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0c4:	1ad3      	subs	r3, r2, r3
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	db10      	blt.n	800e0ec <tcp_process+0x8c>
 800e0ca:	4b78      	ldr	r3, [pc, #480]	@ (800e2ac <tcp_process+0x24c>)
 800e0cc:	681a      	ldr	r2, [r3, #0]
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0d2:	6879      	ldr	r1, [r7, #4]
 800e0d4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e0d6:	440b      	add	r3, r1
 800e0d8:	1ad3      	subs	r3, r2, r3
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	dc06      	bgt.n	800e0ec <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	8b5b      	ldrh	r3, [r3, #26]
 800e0e2:	f043 0302 	orr.w	r3, r3, #2
 800e0e6:	b29a      	uxth	r2, r3
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e0ec:	7bfb      	ldrb	r3, [r7, #15]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d01b      	beq.n	800e12a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	7d1b      	ldrb	r3, [r3, #20]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d106      	bne.n	800e108 <tcp_process+0xa8>
 800e0fa:	4b67      	ldr	r3, [pc, #412]	@ (800e298 <tcp_process+0x238>)
 800e0fc:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800e100:	496b      	ldr	r1, [pc, #428]	@ (800e2b0 <tcp_process+0x250>)
 800e102:	4867      	ldr	r0, [pc, #412]	@ (800e2a0 <tcp_process+0x240>)
 800e104:	f007 f970 	bl	80153e8 <iprintf>
      recv_flags |= TF_RESET;
 800e108:	4b6a      	ldr	r3, [pc, #424]	@ (800e2b4 <tcp_process+0x254>)
 800e10a:	781b      	ldrb	r3, [r3, #0]
 800e10c:	f043 0308 	orr.w	r3, r3, #8
 800e110:	b2da      	uxtb	r2, r3
 800e112:	4b68      	ldr	r3, [pc, #416]	@ (800e2b4 <tcp_process+0x254>)
 800e114:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	8b5b      	ldrh	r3, [r3, #26]
 800e11a:	f023 0301 	bic.w	r3, r3, #1
 800e11e:	b29a      	uxth	r2, r3
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e124:	f06f 030d 	mvn.w	r3, #13
 800e128:	e3e3      	b.n	800e8f2 <tcp_process+0x892>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
 800e12a:	4b60      	ldr	r3, [pc, #384]	@ (800e2ac <tcp_process+0x24c>)
 800e12c:	6819      	ldr	r1, [r3, #0]
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e132:	461a      	mov	r2, r3
 800e134:	4860      	ldr	r0, [pc, #384]	@ (800e2b8 <tcp_process+0x258>)
 800e136:	f007 f957 	bl	80153e8 <iprintf>
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e13a:	2300      	movs	r3, #0
 800e13c:	e3d9      	b.n	800e8f2 <tcp_process+0x892>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e13e:	4b59      	ldr	r3, [pc, #356]	@ (800e2a4 <tcp_process+0x244>)
 800e140:	781b      	ldrb	r3, [r3, #0]
 800e142:	f003 0302 	and.w	r3, r3, #2
 800e146:	2b00      	cmp	r3, #0
 800e148:	d010      	beq.n	800e16c <tcp_process+0x10c>
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	7d1b      	ldrb	r3, [r3, #20]
 800e14e:	2b02      	cmp	r3, #2
 800e150:	d00c      	beq.n	800e16c <tcp_process+0x10c>
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	7d1b      	ldrb	r3, [r3, #20]
 800e156:	2b03      	cmp	r3, #3
 800e158:	d008      	beq.n	800e16c <tcp_process+0x10c>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	8b5b      	ldrh	r3, [r3, #26]
 800e15e:	f043 0302 	orr.w	r3, r3, #2
 800e162:	b29a      	uxth	r2, r3
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e168:	2300      	movs	r3, #0
 800e16a:	e3c2      	b.n	800e8f2 <tcp_process+0x892>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	8b5b      	ldrh	r3, [r3, #26]
 800e170:	f003 0310 	and.w	r3, r3, #16
 800e174:	2b00      	cmp	r3, #0
 800e176:	d103      	bne.n	800e180 <tcp_process+0x120>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e178:	4b50      	ldr	r3, [pc, #320]	@ (800e2bc <tcp_process+0x25c>)
 800e17a:	681a      	ldr	r2, [r3, #0]
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2200      	movs	r2, #0
 800e184:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2200      	movs	r2, #0
 800e18c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f001 fc93 	bl	800fabc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	7d1b      	ldrb	r3, [r3, #20]
 800e19a:	3b02      	subs	r3, #2
 800e19c:	2b07      	cmp	r3, #7
 800e19e:	f200 8398 	bhi.w	800e8d2 <tcp_process+0x872>
 800e1a2:	a201      	add	r2, pc, #4	@ (adr r2, 800e1a8 <tcp_process+0x148>)
 800e1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1a8:	0800e1c9 	.word	0x0800e1c9
 800e1ac:	0800e3f3 	.word	0x0800e3f3
 800e1b0:	0800e5c9 	.word	0x0800e5c9
 800e1b4:	0800e5f3 	.word	0x0800e5f3
 800e1b8:	0800e6fb 	.word	0x0800e6fb
 800e1bc:	0800e5c9 	.word	0x0800e5c9
 800e1c0:	0800e7d9 	.word	0x0800e7d9
 800e1c4:	0800e883 	.word	0x0800e883
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e1c8:	4b36      	ldr	r3, [pc, #216]	@ (800e2a4 <tcp_process+0x244>)
 800e1ca:	781b      	ldrb	r3, [r3, #0]
 800e1cc:	f003 0310 	and.w	r3, r3, #16
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	f000 80e1 	beq.w	800e398 <tcp_process+0x338>
 800e1d6:	4b33      	ldr	r3, [pc, #204]	@ (800e2a4 <tcp_process+0x244>)
 800e1d8:	781b      	ldrb	r3, [r3, #0]
 800e1da:	f003 0302 	and.w	r3, r3, #2
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	f000 80da 	beq.w	800e398 <tcp_process+0x338>
          && (ackno == pcb->lastack + 1)) {
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e1e8:	1c5a      	adds	r2, r3, #1
 800e1ea:	4b2f      	ldr	r3, [pc, #188]	@ (800e2a8 <tcp_process+0x248>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	429a      	cmp	r2, r3
 800e1f0:	f040 80d2 	bne.w	800e398 <tcp_process+0x338>
        pcb->rcv_nxt = seqno + 1;
 800e1f4:	4b2d      	ldr	r3, [pc, #180]	@ (800e2ac <tcp_process+0x24c>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	1c5a      	adds	r2, r3, #1
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800e206:	4b28      	ldr	r3, [pc, #160]	@ (800e2a8 <tcp_process+0x248>)
 800e208:	681a      	ldr	r2, [r3, #0]
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e20e:	4b2c      	ldr	r3, [pc, #176]	@ (800e2c0 <tcp_process+0x260>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	89db      	ldrh	r3, [r3, #14]
 800e214:	b29a      	uxth	r2, r3
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e228:	4b20      	ldr	r3, [pc, #128]	@ (800e2ac <tcp_process+0x24c>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	1e5a      	subs	r2, r3, #1
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2204      	movs	r2, #4
 800e236:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	3304      	adds	r3, #4
 800e240:	4618      	mov	r0, r3
 800e242:	f005 fbc1 	bl	80139c8 <ip4_route>
 800e246:	4601      	mov	r1, r0
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	3304      	adds	r3, #4
 800e24c:	461a      	mov	r2, r3
 800e24e:	4620      	mov	r0, r4
 800e250:	f7fe fff0 	bl	800d234 <tcp_eff_send_mss_netif>
 800e254:	4603      	mov	r3, r0
 800e256:	461a      	mov	r2, r3
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e260:	009a      	lsls	r2, r3, #2
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e266:	005b      	lsls	r3, r3, #1
 800e268:	f241 111c 	movw	r1, #4380	@ 0x111c
 800e26c:	428b      	cmp	r3, r1
 800e26e:	bf38      	it	cc
 800e270:	460b      	movcc	r3, r1
 800e272:	429a      	cmp	r2, r3
 800e274:	d204      	bcs.n	800e280 <tcp_process+0x220>
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e27a:	009b      	lsls	r3, r3, #2
 800e27c:	b29b      	uxth	r3, r3
 800e27e:	e023      	b.n	800e2c8 <tcp_process+0x268>
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e284:	005b      	lsls	r3, r3, #1
 800e286:	f241 121c 	movw	r2, #4380	@ 0x111c
 800e28a:	4293      	cmp	r3, r2
 800e28c:	d91a      	bls.n	800e2c4 <tcp_process+0x264>
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e292:	005b      	lsls	r3, r3, #1
 800e294:	b29b      	uxth	r3, r3
 800e296:	e017      	b.n	800e2c8 <tcp_process+0x268>
 800e298:	080181e0 	.word	0x080181e0
 800e29c:	08018484 	.word	0x08018484
 800e2a0:	0801822c 	.word	0x0801822c
 800e2a4:	2400331c 	.word	0x2400331c
 800e2a8:	24003314 	.word	0x24003314
 800e2ac:	24003310 	.word	0x24003310
 800e2b0:	080184a0 	.word	0x080184a0
 800e2b4:	2400331d 	.word	0x2400331d
 800e2b8:	080184c0 	.word	0x080184c0
 800e2bc:	240032d4 	.word	0x240032d4
 800e2c0:	24003300 	.word	0x24003300
 800e2c4:	f241 131c 	movw	r3, #4380	@ 0x111c
 800e2c8:	687a      	ldr	r2, [r7, #4]
 800e2ca:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d106      	bne.n	800e2e6 <tcp_process+0x286>
 800e2d8:	4b94      	ldr	r3, [pc, #592]	@ (800e52c <tcp_process+0x4cc>)
 800e2da:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800e2de:	4994      	ldr	r1, [pc, #592]	@ (800e530 <tcp_process+0x4d0>)
 800e2e0:	4894      	ldr	r0, [pc, #592]	@ (800e534 <tcp_process+0x4d4>)
 800e2e2:	f007 f881 	bl	80153e8 <iprintf>
        --pcb->snd_queuelen;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e2ec:	3b01      	subs	r3, #1
 800e2ee:	b29a      	uxth	r2, r3
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e2fa:	613b      	str	r3, [r7, #16]
        if (rseg == NULL) {
 800e2fc:	693b      	ldr	r3, [r7, #16]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d111      	bne.n	800e326 <tcp_process+0x2c6>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e306:	613b      	str	r3, [r7, #16]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e308:	693b      	ldr	r3, [r7, #16]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d106      	bne.n	800e31c <tcp_process+0x2bc>
 800e30e:	4b87      	ldr	r3, [pc, #540]	@ (800e52c <tcp_process+0x4cc>)
 800e310:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800e314:	4988      	ldr	r1, [pc, #544]	@ (800e538 <tcp_process+0x4d8>)
 800e316:	4887      	ldr	r0, [pc, #540]	@ (800e534 <tcp_process+0x4d4>)
 800e318:	f007 f866 	bl	80153e8 <iprintf>
          pcb->unsent = rseg->next;
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	681a      	ldr	r2, [r3, #0]
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e324:	e003      	b.n	800e32e <tcp_process+0x2ce>
        } else {
          pcb->unacked = rseg->next;
 800e326:	693b      	ldr	r3, [r7, #16]
 800e328:	681a      	ldr	r2, [r3, #0]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800e32e:	6938      	ldr	r0, [r7, #16]
 800e330:	f7fe fbab 	bl	800ca8a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d104      	bne.n	800e346 <tcp_process+0x2e6>
          pcb->rtime = -1;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e342:	861a      	strh	r2, [r3, #48]	@ 0x30
 800e344:	e006      	b.n	800e354 <tcp_process+0x2f4>
        } else {
          pcb->rtime = 0;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2200      	movs	r2, #0
 800e34a:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2200      	movs	r2, #0
 800e350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d00a      	beq.n	800e374 <tcp_process+0x314>
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e364:	687a      	ldr	r2, [r7, #4]
 800e366:	6910      	ldr	r0, [r2, #16]
 800e368:	2200      	movs	r2, #0
 800e36a:	6879      	ldr	r1, [r7, #4]
 800e36c:	4798      	blx	r3
 800e36e:	4603      	mov	r3, r0
 800e370:	73bb      	strb	r3, [r7, #14]
 800e372:	e001      	b.n	800e378 <tcp_process+0x318>
 800e374:	2300      	movs	r3, #0
 800e376:	73bb      	strb	r3, [r7, #14]
        if (err == ERR_ABRT) {
 800e378:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e37c:	f113 0f0d 	cmn.w	r3, #13
 800e380:	d102      	bne.n	800e388 <tcp_process+0x328>
          return ERR_ABRT;
 800e382:	f06f 030c 	mvn.w	r3, #12
 800e386:	e2b4      	b.n	800e8f2 <tcp_process+0x892>
        }
        tcp_ack_now(pcb);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	8b5b      	ldrh	r3, [r3, #26]
 800e38c:	f043 0302 	orr.w	r3, r3, #2
 800e390:	b29a      	uxth	r2, r3
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e396:	e29e      	b.n	800e8d6 <tcp_process+0x876>
      else if (flags & TCP_ACK) {
 800e398:	4b68      	ldr	r3, [pc, #416]	@ (800e53c <tcp_process+0x4dc>)
 800e39a:	781b      	ldrb	r3, [r3, #0]
 800e39c:	f003 0310 	and.w	r3, r3, #16
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	f000 8298 	beq.w	800e8d6 <tcp_process+0x876>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e3a6:	4b66      	ldr	r3, [pc, #408]	@ (800e540 <tcp_process+0x4e0>)
 800e3a8:	6819      	ldr	r1, [r3, #0]
 800e3aa:	4b66      	ldr	r3, [pc, #408]	@ (800e544 <tcp_process+0x4e4>)
 800e3ac:	881b      	ldrh	r3, [r3, #0]
 800e3ae:	461a      	mov	r2, r3
 800e3b0:	4b65      	ldr	r3, [pc, #404]	@ (800e548 <tcp_process+0x4e8>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e3b6:	4b65      	ldr	r3, [pc, #404]	@ (800e54c <tcp_process+0x4ec>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e3ba:	885b      	ldrh	r3, [r3, #2]
 800e3bc:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e3be:	4a63      	ldr	r2, [pc, #396]	@ (800e54c <tcp_process+0x4ec>)
 800e3c0:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e3c2:	8812      	ldrh	r2, [r2, #0]
 800e3c4:	b292      	uxth	r2, r2
 800e3c6:	9202      	str	r2, [sp, #8]
 800e3c8:	9301      	str	r3, [sp, #4]
 800e3ca:	4b61      	ldr	r3, [pc, #388]	@ (800e550 <tcp_process+0x4f0>)
 800e3cc:	9300      	str	r3, [sp, #0]
 800e3ce:	4b61      	ldr	r3, [pc, #388]	@ (800e554 <tcp_process+0x4f4>)
 800e3d0:	4602      	mov	r2, r0
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	f003 f9b0 	bl	8011738 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e3de:	2b05      	cmp	r3, #5
 800e3e0:	f200 8279 	bhi.w	800e8d6 <tcp_process+0x876>
          pcb->rtime = 0;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f002 ff7c 	bl	80112e8 <tcp_rexmit_rto>
      break;
 800e3f0:	e271      	b.n	800e8d6 <tcp_process+0x876>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e3f2:	4b52      	ldr	r3, [pc, #328]	@ (800e53c <tcp_process+0x4dc>)
 800e3f4:	781b      	ldrb	r3, [r3, #0]
 800e3f6:	f003 0310 	and.w	r3, r3, #16
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	f000 80d0 	beq.w	800e5a0 <tcp_process+0x540>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e400:	4b4f      	ldr	r3, [pc, #316]	@ (800e540 <tcp_process+0x4e0>)
 800e402:	681a      	ldr	r2, [r3, #0]
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e408:	1ad3      	subs	r3, r2, r3
 800e40a:	3b01      	subs	r3, #1
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	f2c0 80ad 	blt.w	800e56c <tcp_process+0x50c>
 800e412:	4b4b      	ldr	r3, [pc, #300]	@ (800e540 <tcp_process+0x4e0>)
 800e414:	681a      	ldr	r2, [r3, #0]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e41a:	1ad3      	subs	r3, r2, r3
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	f300 80a5 	bgt.w	800e56c <tcp_process+0x50c>
          pcb->state = ESTABLISHED;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2204      	movs	r2, #4
 800e426:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
 800e428:	4b4b      	ldr	r3, [pc, #300]	@ (800e558 <tcp_process+0x4f8>)
 800e42a:	691b      	ldr	r3, [r3, #16]
 800e42c:	881b      	ldrh	r3, [r3, #0]
 800e42e:	b29b      	uxth	r3, r3
 800e430:	4619      	mov	r1, r3
 800e432:	4b49      	ldr	r3, [pc, #292]	@ (800e558 <tcp_process+0x4f8>)
 800e434:	691b      	ldr	r3, [r3, #16]
 800e436:	885b      	ldrh	r3, [r3, #2]
 800e438:	b29b      	uxth	r3, r3
 800e43a:	461a      	mov	r2, r3
 800e43c:	4847      	ldr	r0, [pc, #284]	@ (800e55c <tcp_process+0x4fc>)
 800e43e:	f006 ffd3 	bl	80153e8 <iprintf>
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e446:	2b00      	cmp	r3, #0
 800e448:	d102      	bne.n	800e450 <tcp_process+0x3f0>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e44a:	23fa      	movs	r3, #250	@ 0xfa
 800e44c:	73bb      	strb	r3, [r7, #14]
 800e44e:	e01d      	b.n	800e48c <tcp_process+0x42c>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e454:	699b      	ldr	r3, [r3, #24]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d106      	bne.n	800e468 <tcp_process+0x408>
 800e45a:	4b34      	ldr	r3, [pc, #208]	@ (800e52c <tcp_process+0x4cc>)
 800e45c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800e460:	493f      	ldr	r1, [pc, #252]	@ (800e560 <tcp_process+0x500>)
 800e462:	4834      	ldr	r0, [pc, #208]	@ (800e534 <tcp_process+0x4d4>)
 800e464:	f006 ffc0 	bl	80153e8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e46c:	699b      	ldr	r3, [r3, #24]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d00a      	beq.n	800e488 <tcp_process+0x428>
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e476:	699b      	ldr	r3, [r3, #24]
 800e478:	687a      	ldr	r2, [r7, #4]
 800e47a:	6910      	ldr	r0, [r2, #16]
 800e47c:	2200      	movs	r2, #0
 800e47e:	6879      	ldr	r1, [r7, #4]
 800e480:	4798      	blx	r3
 800e482:	4603      	mov	r3, r0
 800e484:	73bb      	strb	r3, [r7, #14]
 800e486:	e001      	b.n	800e48c <tcp_process+0x42c>
 800e488:	23f0      	movs	r3, #240	@ 0xf0
 800e48a:	73bb      	strb	r3, [r7, #14]
          }
          if (err != ERR_OK) {
 800e48c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d00a      	beq.n	800e4aa <tcp_process+0x44a>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e494:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e498:	f113 0f0d 	cmn.w	r3, #13
 800e49c:	d002      	beq.n	800e4a4 <tcp_process+0x444>
              tcp_abort(pcb);
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	f7fd fbda 	bl	800bc58 <tcp_abort>
            }
            return ERR_ABRT;
 800e4a4:	f06f 030c 	mvn.w	r3, #12
 800e4a8:	e223      	b.n	800e8f2 <tcp_process+0x892>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f000 fb3c 	bl	800eb28 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e4b0:	4b2c      	ldr	r3, [pc, #176]	@ (800e564 <tcp_process+0x504>)
 800e4b2:	881b      	ldrh	r3, [r3, #0]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d005      	beq.n	800e4c4 <tcp_process+0x464>
            recv_acked--;
 800e4b8:	4b2a      	ldr	r3, [pc, #168]	@ (800e564 <tcp_process+0x504>)
 800e4ba:	881b      	ldrh	r3, [r3, #0]
 800e4bc:	3b01      	subs	r3, #1
 800e4be:	b29a      	uxth	r2, r3
 800e4c0:	4b28      	ldr	r3, [pc, #160]	@ (800e564 <tcp_process+0x504>)
 800e4c2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e4c8:	009a      	lsls	r2, r3, #2
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e4ce:	005b      	lsls	r3, r3, #1
 800e4d0:	f241 111c 	movw	r1, #4380	@ 0x111c
 800e4d4:	428b      	cmp	r3, r1
 800e4d6:	bf38      	it	cc
 800e4d8:	460b      	movcc	r3, r1
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d204      	bcs.n	800e4e8 <tcp_process+0x488>
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e4e2:	009b      	lsls	r3, r3, #2
 800e4e4:	b29b      	uxth	r3, r3
 800e4e6:	e00d      	b.n	800e504 <tcp_process+0x4a4>
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e4ec:	005b      	lsls	r3, r3, #1
 800e4ee:	f241 121c 	movw	r2, #4380	@ 0x111c
 800e4f2:	4293      	cmp	r3, r2
 800e4f4:	d904      	bls.n	800e500 <tcp_process+0x4a0>
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e4fa:	005b      	lsls	r3, r3, #1
 800e4fc:	b29b      	uxth	r3, r3
 800e4fe:	e001      	b.n	800e504 <tcp_process+0x4a4>
 800e500:	f241 131c 	movw	r3, #4380	@ 0x111c
 800e504:	687a      	ldr	r2, [r7, #4]
 800e506:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e50a:	4b17      	ldr	r3, [pc, #92]	@ (800e568 <tcp_process+0x508>)
 800e50c:	781b      	ldrb	r3, [r3, #0]
 800e50e:	f003 0320 	and.w	r3, r3, #32
 800e512:	2b00      	cmp	r3, #0
 800e514:	d057      	beq.n	800e5c6 <tcp_process+0x566>
            tcp_ack_now(pcb);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	8b5b      	ldrh	r3, [r3, #26]
 800e51a:	f043 0302 	orr.w	r3, r3, #2
 800e51e:	b29a      	uxth	r2, r3
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2207      	movs	r2, #7
 800e528:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e52a:	e04c      	b.n	800e5c6 <tcp_process+0x566>
 800e52c:	080181e0 	.word	0x080181e0
 800e530:	080184f8 	.word	0x080184f8
 800e534:	0801822c 	.word	0x0801822c
 800e538:	08018510 	.word	0x08018510
 800e53c:	2400331c 	.word	0x2400331c
 800e540:	24003314 	.word	0x24003314
 800e544:	2400331a 	.word	0x2400331a
 800e548:	24003310 	.word	0x24003310
 800e54c:	24003300 	.word	0x24003300
 800e550:	2400037c 	.word	0x2400037c
 800e554:	24000380 	.word	0x24000380
 800e558:	240032ec 	.word	0x240032ec
 800e55c:	08018524 	.word	0x08018524
 800e560:	0801854c 	.word	0x0801854c
 800e564:	24003318 	.word	0x24003318
 800e568:	2400331d 	.word	0x2400331d
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e56c:	4b8c      	ldr	r3, [pc, #560]	@ (800e7a0 <tcp_process+0x740>)
 800e56e:	6819      	ldr	r1, [r3, #0]
 800e570:	4b8c      	ldr	r3, [pc, #560]	@ (800e7a4 <tcp_process+0x744>)
 800e572:	881b      	ldrh	r3, [r3, #0]
 800e574:	461a      	mov	r2, r3
 800e576:	4b8c      	ldr	r3, [pc, #560]	@ (800e7a8 <tcp_process+0x748>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e57c:	4b8b      	ldr	r3, [pc, #556]	@ (800e7ac <tcp_process+0x74c>)
 800e57e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e580:	885b      	ldrh	r3, [r3, #2]
 800e582:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e584:	4a89      	ldr	r2, [pc, #548]	@ (800e7ac <tcp_process+0x74c>)
 800e586:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e588:	8812      	ldrh	r2, [r2, #0]
 800e58a:	b292      	uxth	r2, r2
 800e58c:	9202      	str	r2, [sp, #8]
 800e58e:	9301      	str	r3, [sp, #4]
 800e590:	4b87      	ldr	r3, [pc, #540]	@ (800e7b0 <tcp_process+0x750>)
 800e592:	9300      	str	r3, [sp, #0]
 800e594:	4b87      	ldr	r3, [pc, #540]	@ (800e7b4 <tcp_process+0x754>)
 800e596:	4602      	mov	r2, r0
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	f003 f8cd 	bl	8011738 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e59e:	e19c      	b.n	800e8da <tcp_process+0x87a>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e5a0:	4b85      	ldr	r3, [pc, #532]	@ (800e7b8 <tcp_process+0x758>)
 800e5a2:	781b      	ldrb	r3, [r3, #0]
 800e5a4:	f003 0302 	and.w	r3, r3, #2
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	f000 8196 	beq.w	800e8da <tcp_process+0x87a>
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5b2:	1e5a      	subs	r2, r3, #1
 800e5b4:	4b7c      	ldr	r3, [pc, #496]	@ (800e7a8 <tcp_process+0x748>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	429a      	cmp	r2, r3
 800e5ba:	f040 818e 	bne.w	800e8da <tcp_process+0x87a>
        tcp_rexmit(pcb);
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	f002 feb4 	bl	801132c <tcp_rexmit>
      break;
 800e5c4:	e189      	b.n	800e8da <tcp_process+0x87a>
 800e5c6:	e188      	b.n	800e8da <tcp_process+0x87a>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f000 faad 	bl	800eb28 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e5ce:	4b7b      	ldr	r3, [pc, #492]	@ (800e7bc <tcp_process+0x75c>)
 800e5d0:	781b      	ldrb	r3, [r3, #0]
 800e5d2:	f003 0320 	and.w	r3, r3, #32
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	f000 8181 	beq.w	800e8de <tcp_process+0x87e>
        tcp_ack_now(pcb);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	8b5b      	ldrh	r3, [r3, #26]
 800e5e0:	f043 0302 	orr.w	r3, r3, #2
 800e5e4:	b29a      	uxth	r2, r3
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2207      	movs	r2, #7
 800e5ee:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e5f0:	e175      	b.n	800e8de <tcp_process+0x87e>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	f000 fa98 	bl	800eb28 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e5f8:	4b70      	ldr	r3, [pc, #448]	@ (800e7bc <tcp_process+0x75c>)
 800e5fa:	781b      	ldrb	r3, [r3, #0]
 800e5fc:	f003 0320 	and.w	r3, r3, #32
 800e600:	2b00      	cmp	r3, #0
 800e602:	d063      	beq.n	800e6cc <tcp_process+0x66c>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e604:	4b6c      	ldr	r3, [pc, #432]	@ (800e7b8 <tcp_process+0x758>)
 800e606:	781b      	ldrb	r3, [r3, #0]
 800e608:	f003 0310 	and.w	r3, r3, #16
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d052      	beq.n	800e6b6 <tcp_process+0x656>
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e614:	4b62      	ldr	r3, [pc, #392]	@ (800e7a0 <tcp_process+0x740>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	429a      	cmp	r2, r3
 800e61a:	d14c      	bne.n	800e6b6 <tcp_process+0x656>
            pcb->unsent == NULL) {
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e620:	2b00      	cmp	r3, #0
 800e622:	d148      	bne.n	800e6b6 <tcp_process+0x656>
          LWIP_DEBUGF(TCP_DEBUG,
 800e624:	4b66      	ldr	r3, [pc, #408]	@ (800e7c0 <tcp_process+0x760>)
 800e626:	691b      	ldr	r3, [r3, #16]
 800e628:	881b      	ldrh	r3, [r3, #0]
 800e62a:	b29b      	uxth	r3, r3
 800e62c:	4619      	mov	r1, r3
 800e62e:	4b64      	ldr	r3, [pc, #400]	@ (800e7c0 <tcp_process+0x760>)
 800e630:	691b      	ldr	r3, [r3, #16]
 800e632:	885b      	ldrh	r3, [r3, #2]
 800e634:	b29b      	uxth	r3, r3
 800e636:	461a      	mov	r2, r3
 800e638:	4862      	ldr	r0, [pc, #392]	@ (800e7c4 <tcp_process+0x764>)
 800e63a:	f006 fed5 	bl	80153e8 <iprintf>
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	8b5b      	ldrh	r3, [r3, #26]
 800e642:	f043 0302 	orr.w	r3, r3, #2
 800e646:	b29a      	uxth	r2, r3
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f7fe fcb7 	bl	800cfc0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e652:	4b5d      	ldr	r3, [pc, #372]	@ (800e7c8 <tcp_process+0x768>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	687a      	ldr	r2, [r7, #4]
 800e658:	429a      	cmp	r2, r3
 800e65a:	d105      	bne.n	800e668 <tcp_process+0x608>
 800e65c:	4b5a      	ldr	r3, [pc, #360]	@ (800e7c8 <tcp_process+0x768>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	68db      	ldr	r3, [r3, #12]
 800e662:	4a59      	ldr	r2, [pc, #356]	@ (800e7c8 <tcp_process+0x768>)
 800e664:	6013      	str	r3, [r2, #0]
 800e666:	e013      	b.n	800e690 <tcp_process+0x630>
 800e668:	4b57      	ldr	r3, [pc, #348]	@ (800e7c8 <tcp_process+0x768>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	61bb      	str	r3, [r7, #24]
 800e66e:	e00c      	b.n	800e68a <tcp_process+0x62a>
 800e670:	69bb      	ldr	r3, [r7, #24]
 800e672:	68db      	ldr	r3, [r3, #12]
 800e674:	687a      	ldr	r2, [r7, #4]
 800e676:	429a      	cmp	r2, r3
 800e678:	d104      	bne.n	800e684 <tcp_process+0x624>
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	68da      	ldr	r2, [r3, #12]
 800e67e:	69bb      	ldr	r3, [r7, #24]
 800e680:	60da      	str	r2, [r3, #12]
 800e682:	e005      	b.n	800e690 <tcp_process+0x630>
 800e684:	69bb      	ldr	r3, [r7, #24]
 800e686:	68db      	ldr	r3, [r3, #12]
 800e688:	61bb      	str	r3, [r7, #24]
 800e68a:	69bb      	ldr	r3, [r7, #24]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d1ef      	bne.n	800e670 <tcp_process+0x610>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2200      	movs	r2, #0
 800e694:	60da      	str	r2, [r3, #12]
 800e696:	4b4d      	ldr	r3, [pc, #308]	@ (800e7cc <tcp_process+0x76c>)
 800e698:	2201      	movs	r2, #1
 800e69a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	220a      	movs	r2, #10
 800e6a0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e6a2:	4b4b      	ldr	r3, [pc, #300]	@ (800e7d0 <tcp_process+0x770>)
 800e6a4:	681a      	ldr	r2, [r3, #0]
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	60da      	str	r2, [r3, #12]
 800e6aa:	4a49      	ldr	r2, [pc, #292]	@ (800e7d0 <tcp_process+0x770>)
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	6013      	str	r3, [r2, #0]
 800e6b0:	f003 fa8c 	bl	8011bcc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e6b4:	e115      	b.n	800e8e2 <tcp_process+0x882>
          tcp_ack_now(pcb);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	8b5b      	ldrh	r3, [r3, #26]
 800e6ba:	f043 0302 	orr.w	r3, r3, #2
 800e6be:	b29a      	uxth	r2, r3
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2208      	movs	r2, #8
 800e6c8:	751a      	strb	r2, [r3, #20]
      break;
 800e6ca:	e10a      	b.n	800e8e2 <tcp_process+0x882>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e6cc:	4b3a      	ldr	r3, [pc, #232]	@ (800e7b8 <tcp_process+0x758>)
 800e6ce:	781b      	ldrb	r3, [r3, #0]
 800e6d0:	f003 0310 	and.w	r3, r3, #16
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	f000 8104 	beq.w	800e8e2 <tcp_process+0x882>
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e6de:	4b30      	ldr	r3, [pc, #192]	@ (800e7a0 <tcp_process+0x740>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	f040 80fd 	bne.w	800e8e2 <tcp_process+0x882>
                 pcb->unsent == NULL) {
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	f040 80f8 	bne.w	800e8e2 <tcp_process+0x882>
        pcb->state = FIN_WAIT_2;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	2206      	movs	r2, #6
 800e6f6:	751a      	strb	r2, [r3, #20]
      break;
 800e6f8:	e0f3      	b.n	800e8e2 <tcp_process+0x882>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e6fa:	6878      	ldr	r0, [r7, #4]
 800e6fc:	f000 fa14 	bl	800eb28 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e700:	4b2e      	ldr	r3, [pc, #184]	@ (800e7bc <tcp_process+0x75c>)
 800e702:	781b      	ldrb	r3, [r3, #0]
 800e704:	f003 0320 	and.w	r3, r3, #32
 800e708:	2b00      	cmp	r3, #0
 800e70a:	f000 80ec 	beq.w	800e8e6 <tcp_process+0x886>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
 800e70e:	4b2c      	ldr	r3, [pc, #176]	@ (800e7c0 <tcp_process+0x760>)
 800e710:	691b      	ldr	r3, [r3, #16]
 800e712:	881b      	ldrh	r3, [r3, #0]
 800e714:	b29b      	uxth	r3, r3
 800e716:	4619      	mov	r1, r3
 800e718:	4b29      	ldr	r3, [pc, #164]	@ (800e7c0 <tcp_process+0x760>)
 800e71a:	691b      	ldr	r3, [r3, #16]
 800e71c:	885b      	ldrh	r3, [r3, #2]
 800e71e:	b29b      	uxth	r3, r3
 800e720:	461a      	mov	r2, r3
 800e722:	482c      	ldr	r0, [pc, #176]	@ (800e7d4 <tcp_process+0x774>)
 800e724:	f006 fe60 	bl	80153e8 <iprintf>
        tcp_ack_now(pcb);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	8b5b      	ldrh	r3, [r3, #26]
 800e72c:	f043 0302 	orr.w	r3, r3, #2
 800e730:	b29a      	uxth	r2, r3
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e736:	6878      	ldr	r0, [r7, #4]
 800e738:	f7fe fc42 	bl	800cfc0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e73c:	4b22      	ldr	r3, [pc, #136]	@ (800e7c8 <tcp_process+0x768>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	687a      	ldr	r2, [r7, #4]
 800e742:	429a      	cmp	r2, r3
 800e744:	d105      	bne.n	800e752 <tcp_process+0x6f2>
 800e746:	4b20      	ldr	r3, [pc, #128]	@ (800e7c8 <tcp_process+0x768>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	68db      	ldr	r3, [r3, #12]
 800e74c:	4a1e      	ldr	r2, [pc, #120]	@ (800e7c8 <tcp_process+0x768>)
 800e74e:	6013      	str	r3, [r2, #0]
 800e750:	e013      	b.n	800e77a <tcp_process+0x71a>
 800e752:	4b1d      	ldr	r3, [pc, #116]	@ (800e7c8 <tcp_process+0x768>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	617b      	str	r3, [r7, #20]
 800e758:	e00c      	b.n	800e774 <tcp_process+0x714>
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	68db      	ldr	r3, [r3, #12]
 800e75e:	687a      	ldr	r2, [r7, #4]
 800e760:	429a      	cmp	r2, r3
 800e762:	d104      	bne.n	800e76e <tcp_process+0x70e>
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	68da      	ldr	r2, [r3, #12]
 800e768:	697b      	ldr	r3, [r7, #20]
 800e76a:	60da      	str	r2, [r3, #12]
 800e76c:	e005      	b.n	800e77a <tcp_process+0x71a>
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	68db      	ldr	r3, [r3, #12]
 800e772:	617b      	str	r3, [r7, #20]
 800e774:	697b      	ldr	r3, [r7, #20]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d1ef      	bne.n	800e75a <tcp_process+0x6fa>
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	2200      	movs	r2, #0
 800e77e:	60da      	str	r2, [r3, #12]
 800e780:	4b12      	ldr	r3, [pc, #72]	@ (800e7cc <tcp_process+0x76c>)
 800e782:	2201      	movs	r2, #1
 800e784:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	220a      	movs	r2, #10
 800e78a:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e78c:	4b10      	ldr	r3, [pc, #64]	@ (800e7d0 <tcp_process+0x770>)
 800e78e:	681a      	ldr	r2, [r3, #0]
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	60da      	str	r2, [r3, #12]
 800e794:	4a0e      	ldr	r2, [pc, #56]	@ (800e7d0 <tcp_process+0x770>)
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6013      	str	r3, [r2, #0]
 800e79a:	f003 fa17 	bl	8011bcc <tcp_timer_needed>
      }
      break;
 800e79e:	e0a2      	b.n	800e8e6 <tcp_process+0x886>
 800e7a0:	24003314 	.word	0x24003314
 800e7a4:	2400331a 	.word	0x2400331a
 800e7a8:	24003310 	.word	0x24003310
 800e7ac:	24003300 	.word	0x24003300
 800e7b0:	2400037c 	.word	0x2400037c
 800e7b4:	24000380 	.word	0x24000380
 800e7b8:	2400331c 	.word	0x2400331c
 800e7bc:	2400331d 	.word	0x2400331d
 800e7c0:	240032ec 	.word	0x240032ec
 800e7c4:	0801856c 	.word	0x0801856c
 800e7c8:	240032e0 	.word	0x240032e0
 800e7cc:	240032e8 	.word	0x240032e8
 800e7d0:	240032e4 	.word	0x240032e4
 800e7d4:	0801859c 	.word	0x0801859c
    case CLOSING:
      tcp_receive(pcb);
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f000 f9a5 	bl	800eb28 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e7de:	4b47      	ldr	r3, [pc, #284]	@ (800e8fc <tcp_process+0x89c>)
 800e7e0:	781b      	ldrb	r3, [r3, #0]
 800e7e2:	f003 0310 	and.w	r3, r3, #16
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d07f      	beq.n	800e8ea <tcp_process+0x88a>
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e7ee:	4b44      	ldr	r3, [pc, #272]	@ (800e900 <tcp_process+0x8a0>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	d179      	bne.n	800e8ea <tcp_process+0x88a>
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d175      	bne.n	800e8ea <tcp_process+0x88a>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
 800e7fe:	4b41      	ldr	r3, [pc, #260]	@ (800e904 <tcp_process+0x8a4>)
 800e800:	691b      	ldr	r3, [r3, #16]
 800e802:	881b      	ldrh	r3, [r3, #0]
 800e804:	b29b      	uxth	r3, r3
 800e806:	4619      	mov	r1, r3
 800e808:	4b3e      	ldr	r3, [pc, #248]	@ (800e904 <tcp_process+0x8a4>)
 800e80a:	691b      	ldr	r3, [r3, #16]
 800e80c:	885b      	ldrh	r3, [r3, #2]
 800e80e:	b29b      	uxth	r3, r3
 800e810:	461a      	mov	r2, r3
 800e812:	483d      	ldr	r0, [pc, #244]	@ (800e908 <tcp_process+0x8a8>)
 800e814:	f006 fde8 	bl	80153e8 <iprintf>
        tcp_pcb_purge(pcb);
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f7fe fbd1 	bl	800cfc0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e81e:	4b3b      	ldr	r3, [pc, #236]	@ (800e90c <tcp_process+0x8ac>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	687a      	ldr	r2, [r7, #4]
 800e824:	429a      	cmp	r2, r3
 800e826:	d105      	bne.n	800e834 <tcp_process+0x7d4>
 800e828:	4b38      	ldr	r3, [pc, #224]	@ (800e90c <tcp_process+0x8ac>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	68db      	ldr	r3, [r3, #12]
 800e82e:	4a37      	ldr	r2, [pc, #220]	@ (800e90c <tcp_process+0x8ac>)
 800e830:	6013      	str	r3, [r2, #0]
 800e832:	e013      	b.n	800e85c <tcp_process+0x7fc>
 800e834:	4b35      	ldr	r3, [pc, #212]	@ (800e90c <tcp_process+0x8ac>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	61fb      	str	r3, [r7, #28]
 800e83a:	e00c      	b.n	800e856 <tcp_process+0x7f6>
 800e83c:	69fb      	ldr	r3, [r7, #28]
 800e83e:	68db      	ldr	r3, [r3, #12]
 800e840:	687a      	ldr	r2, [r7, #4]
 800e842:	429a      	cmp	r2, r3
 800e844:	d104      	bne.n	800e850 <tcp_process+0x7f0>
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	68da      	ldr	r2, [r3, #12]
 800e84a:	69fb      	ldr	r3, [r7, #28]
 800e84c:	60da      	str	r2, [r3, #12]
 800e84e:	e005      	b.n	800e85c <tcp_process+0x7fc>
 800e850:	69fb      	ldr	r3, [r7, #28]
 800e852:	68db      	ldr	r3, [r3, #12]
 800e854:	61fb      	str	r3, [r7, #28]
 800e856:	69fb      	ldr	r3, [r7, #28]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d1ef      	bne.n	800e83c <tcp_process+0x7dc>
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2200      	movs	r2, #0
 800e860:	60da      	str	r2, [r3, #12]
 800e862:	4b2b      	ldr	r3, [pc, #172]	@ (800e910 <tcp_process+0x8b0>)
 800e864:	2201      	movs	r2, #1
 800e866:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	220a      	movs	r2, #10
 800e86c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e86e:	4b29      	ldr	r3, [pc, #164]	@ (800e914 <tcp_process+0x8b4>)
 800e870:	681a      	ldr	r2, [r3, #0]
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	60da      	str	r2, [r3, #12]
 800e876:	4a27      	ldr	r2, [pc, #156]	@ (800e914 <tcp_process+0x8b4>)
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6013      	str	r3, [r2, #0]
 800e87c:	f003 f9a6 	bl	8011bcc <tcp_timer_needed>
      }
      break;
 800e880:	e033      	b.n	800e8ea <tcp_process+0x88a>
    case LAST_ACK:
      tcp_receive(pcb);
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f000 f950 	bl	800eb28 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e888:	4b1c      	ldr	r3, [pc, #112]	@ (800e8fc <tcp_process+0x89c>)
 800e88a:	781b      	ldrb	r3, [r3, #0]
 800e88c:	f003 0310 	and.w	r3, r3, #16
 800e890:	2b00      	cmp	r3, #0
 800e892:	d02c      	beq.n	800e8ee <tcp_process+0x88e>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e898:	4b19      	ldr	r3, [pc, #100]	@ (800e900 <tcp_process+0x8a0>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	429a      	cmp	r2, r3
 800e89e:	d126      	bne.n	800e8ee <tcp_process+0x88e>
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d122      	bne.n	800e8ee <tcp_process+0x88e>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
 800e8a8:	4b16      	ldr	r3, [pc, #88]	@ (800e904 <tcp_process+0x8a4>)
 800e8aa:	691b      	ldr	r3, [r3, #16]
 800e8ac:	881b      	ldrh	r3, [r3, #0]
 800e8ae:	b29b      	uxth	r3, r3
 800e8b0:	4619      	mov	r1, r3
 800e8b2:	4b14      	ldr	r3, [pc, #80]	@ (800e904 <tcp_process+0x8a4>)
 800e8b4:	691b      	ldr	r3, [r3, #16]
 800e8b6:	885b      	ldrh	r3, [r3, #2]
 800e8b8:	b29b      	uxth	r3, r3
 800e8ba:	461a      	mov	r2, r3
 800e8bc:	4816      	ldr	r0, [pc, #88]	@ (800e918 <tcp_process+0x8b8>)
 800e8be:	f006 fd93 	bl	80153e8 <iprintf>
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e8c2:	4b16      	ldr	r3, [pc, #88]	@ (800e91c <tcp_process+0x8bc>)
 800e8c4:	781b      	ldrb	r3, [r3, #0]
 800e8c6:	f043 0310 	orr.w	r3, r3, #16
 800e8ca:	b2da      	uxtb	r2, r3
 800e8cc:	4b13      	ldr	r3, [pc, #76]	@ (800e91c <tcp_process+0x8bc>)
 800e8ce:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e8d0:	e00d      	b.n	800e8ee <tcp_process+0x88e>
    default:
      break;
 800e8d2:	bf00      	nop
 800e8d4:	e00c      	b.n	800e8f0 <tcp_process+0x890>
      break;
 800e8d6:	bf00      	nop
 800e8d8:	e00a      	b.n	800e8f0 <tcp_process+0x890>
      break;
 800e8da:	bf00      	nop
 800e8dc:	e008      	b.n	800e8f0 <tcp_process+0x890>
      break;
 800e8de:	bf00      	nop
 800e8e0:	e006      	b.n	800e8f0 <tcp_process+0x890>
      break;
 800e8e2:	bf00      	nop
 800e8e4:	e004      	b.n	800e8f0 <tcp_process+0x890>
      break;
 800e8e6:	bf00      	nop
 800e8e8:	e002      	b.n	800e8f0 <tcp_process+0x890>
      break;
 800e8ea:	bf00      	nop
 800e8ec:	e000      	b.n	800e8f0 <tcp_process+0x890>
      break;
 800e8ee:	bf00      	nop
  }
  return ERR_OK;
 800e8f0:	2300      	movs	r3, #0
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	3724      	adds	r7, #36	@ 0x24
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd90      	pop	{r4, r7, pc}
 800e8fa:	bf00      	nop
 800e8fc:	2400331c 	.word	0x2400331c
 800e900:	24003314 	.word	0x24003314
 800e904:	240032ec 	.word	0x240032ec
 800e908:	080185cc 	.word	0x080185cc
 800e90c:	240032e0 	.word	0x240032e0
 800e910:	240032e8 	.word	0x240032e8
 800e914:	240032e4 	.word	0x240032e4
 800e918:	080185f8 	.word	0x080185f8
 800e91c:	2400331d 	.word	0x2400331d

0800e920 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e920:	b590      	push	{r4, r7, lr}
 800e922:	b085      	sub	sp, #20
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d106      	bne.n	800e93e <tcp_oos_insert_segment+0x1e>
 800e930:	4b3b      	ldr	r3, [pc, #236]	@ (800ea20 <tcp_oos_insert_segment+0x100>)
 800e932:	f240 421f 	movw	r2, #1055	@ 0x41f
 800e936:	493b      	ldr	r1, [pc, #236]	@ (800ea24 <tcp_oos_insert_segment+0x104>)
 800e938:	483b      	ldr	r0, [pc, #236]	@ (800ea28 <tcp_oos_insert_segment+0x108>)
 800e93a:	f006 fd55 	bl	80153e8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	691b      	ldr	r3, [r3, #16]
 800e942:	899b      	ldrh	r3, [r3, #12]
 800e944:	b29b      	uxth	r3, r3
 800e946:	4618      	mov	r0, r3
 800e948:	f7fa ff5e 	bl	8009808 <lwip_htons>
 800e94c:	4603      	mov	r3, r0
 800e94e:	b2db      	uxtb	r3, r3
 800e950:	f003 0301 	and.w	r3, r3, #1
 800e954:	2b00      	cmp	r3, #0
 800e956:	d028      	beq.n	800e9aa <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e958:	6838      	ldr	r0, [r7, #0]
 800e95a:	f7fe f881 	bl	800ca60 <tcp_segs_free>
    next = NULL;
 800e95e:	2300      	movs	r3, #0
 800e960:	603b      	str	r3, [r7, #0]
 800e962:	e056      	b.n	800ea12 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	691b      	ldr	r3, [r3, #16]
 800e968:	899b      	ldrh	r3, [r3, #12]
 800e96a:	b29b      	uxth	r3, r3
 800e96c:	4618      	mov	r0, r3
 800e96e:	f7fa ff4b 	bl	8009808 <lwip_htons>
 800e972:	4603      	mov	r3, r0
 800e974:	b2db      	uxtb	r3, r3
 800e976:	f003 0301 	and.w	r3, r3, #1
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d00d      	beq.n	800e99a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	691b      	ldr	r3, [r3, #16]
 800e982:	899b      	ldrh	r3, [r3, #12]
 800e984:	b29c      	uxth	r4, r3
 800e986:	2001      	movs	r0, #1
 800e988:	f7fa ff3e 	bl	8009808 <lwip_htons>
 800e98c:	4603      	mov	r3, r0
 800e98e:	461a      	mov	r2, r3
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	691b      	ldr	r3, [r3, #16]
 800e994:	4322      	orrs	r2, r4
 800e996:	b292      	uxth	r2, r2
 800e998:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800e9a4:	68f8      	ldr	r0, [r7, #12]
 800e9a6:	f7fe f870 	bl	800ca8a <tcp_seg_free>
    while (next &&
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d00e      	beq.n	800e9ce <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	891b      	ldrh	r3, [r3, #8]
 800e9b4:	461a      	mov	r2, r3
 800e9b6:	4b1d      	ldr	r3, [pc, #116]	@ (800ea2c <tcp_oos_insert_segment+0x10c>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	441a      	add	r2, r3
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	691b      	ldr	r3, [r3, #16]
 800e9c0:	685b      	ldr	r3, [r3, #4]
 800e9c2:	6839      	ldr	r1, [r7, #0]
 800e9c4:	8909      	ldrh	r1, [r1, #8]
 800e9c6:	440b      	add	r3, r1
 800e9c8:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	daca      	bge.n	800e964 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d01e      	beq.n	800ea12 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	891b      	ldrh	r3, [r3, #8]
 800e9d8:	461a      	mov	r2, r3
 800e9da:	4b14      	ldr	r3, [pc, #80]	@ (800ea2c <tcp_oos_insert_segment+0x10c>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	441a      	add	r2, r3
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	691b      	ldr	r3, [r3, #16]
 800e9e4:	685b      	ldr	r3, [r3, #4]
 800e9e6:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	dd12      	ble.n	800ea12 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	691b      	ldr	r3, [r3, #16]
 800e9f0:	685b      	ldr	r3, [r3, #4]
 800e9f2:	b29a      	uxth	r2, r3
 800e9f4:	4b0d      	ldr	r3, [pc, #52]	@ (800ea2c <tcp_oos_insert_segment+0x10c>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	b29b      	uxth	r3, r3
 800e9fa:	1ad3      	subs	r3, r2, r3
 800e9fc:	b29a      	uxth	r2, r3
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	685a      	ldr	r2, [r3, #4]
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	891b      	ldrh	r3, [r3, #8]
 800ea0a:	4619      	mov	r1, r3
 800ea0c:	4610      	mov	r0, r2
 800ea0e:	f7fc f9cd 	bl	800adac <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	683a      	ldr	r2, [r7, #0]
 800ea16:	601a      	str	r2, [r3, #0]
}
 800ea18:	bf00      	nop
 800ea1a:	3714      	adds	r7, #20
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd90      	pop	{r4, r7, pc}
 800ea20:	080181e0 	.word	0x080181e0
 800ea24:	08018628 	.word	0x08018628
 800ea28:	0801822c 	.word	0x0801822c
 800ea2c:	24003310 	.word	0x24003310

0800ea30 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ea30:	b5b0      	push	{r4, r5, r7, lr}
 800ea32:	b086      	sub	sp, #24
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	60f8      	str	r0, [r7, #12]
 800ea38:	60b9      	str	r1, [r7, #8]
 800ea3a:	607a      	str	r2, [r7, #4]
 800ea3c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ea3e:	e03e      	b.n	800eabe <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ea40:	68bb      	ldr	r3, [r7, #8]
 800ea42:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ea44:	68bb      	ldr	r3, [r7, #8]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	685b      	ldr	r3, [r3, #4]
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f7fc fbec 	bl	800b22c <pbuf_clen>
 800ea54:	4603      	mov	r3, r0
 800ea56:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ea5e:	8a7a      	ldrh	r2, [r7, #18]
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d906      	bls.n	800ea72 <tcp_free_acked_segments+0x42>
 800ea64:	4b2a      	ldr	r3, [pc, #168]	@ (800eb10 <tcp_free_acked_segments+0xe0>)
 800ea66:	f240 4257 	movw	r2, #1111	@ 0x457
 800ea6a:	492a      	ldr	r1, [pc, #168]	@ (800eb14 <tcp_free_acked_segments+0xe4>)
 800ea6c:	482a      	ldr	r0, [pc, #168]	@ (800eb18 <tcp_free_acked_segments+0xe8>)
 800ea6e:	f006 fcbb 	bl	80153e8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800ea78:	8a7b      	ldrh	r3, [r7, #18]
 800ea7a:	1ad3      	subs	r3, r2, r3
 800ea7c:	b29a      	uxth	r2, r3
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	891a      	ldrh	r2, [r3, #8]
 800ea88:	4b24      	ldr	r3, [pc, #144]	@ (800eb1c <tcp_free_acked_segments+0xec>)
 800ea8a:	881b      	ldrh	r3, [r3, #0]
 800ea8c:	4413      	add	r3, r2
 800ea8e:	b29a      	uxth	r2, r3
 800ea90:	4b22      	ldr	r3, [pc, #136]	@ (800eb1c <tcp_free_acked_segments+0xec>)
 800ea92:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ea94:	6978      	ldr	r0, [r7, #20]
 800ea96:	f7fd fff8 	bl	800ca8a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d00c      	beq.n	800eabe <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d109      	bne.n	800eabe <tcp_free_acked_segments+0x8e>
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d106      	bne.n	800eabe <tcp_free_acked_segments+0x8e>
 800eab0:	4b17      	ldr	r3, [pc, #92]	@ (800eb10 <tcp_free_acked_segments+0xe0>)
 800eab2:	f240 4261 	movw	r2, #1121	@ 0x461
 800eab6:	491a      	ldr	r1, [pc, #104]	@ (800eb20 <tcp_free_acked_segments+0xf0>)
 800eab8:	4817      	ldr	r0, [pc, #92]	@ (800eb18 <tcp_free_acked_segments+0xe8>)
 800eaba:	f006 fc95 	bl	80153e8 <iprintf>
  while (seg_list != NULL &&
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d020      	beq.n	800eb06 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	691b      	ldr	r3, [r3, #16]
 800eac8:	685b      	ldr	r3, [r3, #4]
 800eaca:	4618      	mov	r0, r3
 800eacc:	f7fa feb1 	bl	8009832 <lwip_htonl>
 800ead0:	4604      	mov	r4, r0
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	891b      	ldrh	r3, [r3, #8]
 800ead6:	461d      	mov	r5, r3
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	691b      	ldr	r3, [r3, #16]
 800eadc:	899b      	ldrh	r3, [r3, #12]
 800eade:	b29b      	uxth	r3, r3
 800eae0:	4618      	mov	r0, r3
 800eae2:	f7fa fe91 	bl	8009808 <lwip_htons>
 800eae6:	4603      	mov	r3, r0
 800eae8:	b2db      	uxtb	r3, r3
 800eaea:	f003 0303 	and.w	r3, r3, #3
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d001      	beq.n	800eaf6 <tcp_free_acked_segments+0xc6>
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	e000      	b.n	800eaf8 <tcp_free_acked_segments+0xc8>
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	442b      	add	r3, r5
 800eafa:	18e2      	adds	r2, r4, r3
 800eafc:	4b09      	ldr	r3, [pc, #36]	@ (800eb24 <tcp_free_acked_segments+0xf4>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	dd9c      	ble.n	800ea40 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800eb06:	68bb      	ldr	r3, [r7, #8]
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3718      	adds	r7, #24
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bdb0      	pop	{r4, r5, r7, pc}
 800eb10:	080181e0 	.word	0x080181e0
 800eb14:	08018650 	.word	0x08018650
 800eb18:	0801822c 	.word	0x0801822c
 800eb1c:	24003318 	.word	0x24003318
 800eb20:	08018678 	.word	0x08018678
 800eb24:	24003314 	.word	0x24003314

0800eb28 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800eb28:	b5b0      	push	{r4, r5, r7, lr}
 800eb2a:	b094      	sub	sp, #80	@ 0x50
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800eb30:	2300      	movs	r3, #0
 800eb32:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d106      	bne.n	800eb48 <tcp_receive+0x20>
 800eb3a:	4b91      	ldr	r3, [pc, #580]	@ (800ed80 <tcp_receive+0x258>)
 800eb3c:	f240 427b 	movw	r2, #1147	@ 0x47b
 800eb40:	4990      	ldr	r1, [pc, #576]	@ (800ed84 <tcp_receive+0x25c>)
 800eb42:	4891      	ldr	r0, [pc, #580]	@ (800ed88 <tcp_receive+0x260>)
 800eb44:	f006 fc50 	bl	80153e8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	7d1b      	ldrb	r3, [r3, #20]
 800eb4c:	2b03      	cmp	r3, #3
 800eb4e:	d806      	bhi.n	800eb5e <tcp_receive+0x36>
 800eb50:	4b8b      	ldr	r3, [pc, #556]	@ (800ed80 <tcp_receive+0x258>)
 800eb52:	f240 427c 	movw	r2, #1148	@ 0x47c
 800eb56:	498d      	ldr	r1, [pc, #564]	@ (800ed8c <tcp_receive+0x264>)
 800eb58:	488b      	ldr	r0, [pc, #556]	@ (800ed88 <tcp_receive+0x260>)
 800eb5a:	f006 fc45 	bl	80153e8 <iprintf>

  if (flags & TCP_ACK) {
 800eb5e:	4b8c      	ldr	r3, [pc, #560]	@ (800ed90 <tcp_receive+0x268>)
 800eb60:	781b      	ldrb	r3, [r3, #0]
 800eb62:	f003 0310 	and.w	r3, r3, #16
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	f000 8264 	beq.w	800f034 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800eb72:	461a      	mov	r2, r3
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb78:	4413      	add	r3, r2
 800eb7a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eb80:	4b84      	ldr	r3, [pc, #528]	@ (800ed94 <tcp_receive+0x26c>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	1ad3      	subs	r3, r2, r3
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	db1b      	blt.n	800ebc2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eb8e:	4b81      	ldr	r3, [pc, #516]	@ (800ed94 <tcp_receive+0x26c>)
 800eb90:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800eb92:	429a      	cmp	r2, r3
 800eb94:	d106      	bne.n	800eba4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800eb9a:	4b7f      	ldr	r3, [pc, #508]	@ (800ed98 <tcp_receive+0x270>)
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	1ad3      	subs	r3, r2, r3
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	db0e      	blt.n	800ebc2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800eba8:	4b7b      	ldr	r3, [pc, #492]	@ (800ed98 <tcp_receive+0x270>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ebac:	429a      	cmp	r2, r3
 800ebae:	d125      	bne.n	800ebfc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ebb0:	4b7a      	ldr	r3, [pc, #488]	@ (800ed9c <tcp_receive+0x274>)
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	89db      	ldrh	r3, [r3, #14]
 800ebb6:	b29a      	uxth	r2, r3
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d91c      	bls.n	800ebfc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ebc2:	4b76      	ldr	r3, [pc, #472]	@ (800ed9c <tcp_receive+0x274>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	89db      	ldrh	r3, [r3, #14]
 800ebc8:	b29a      	uxth	r2, r3
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ebdc:	429a      	cmp	r2, r3
 800ebde:	d205      	bcs.n	800ebec <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800ebec:	4b69      	ldr	r3, [pc, #420]	@ (800ed94 <tcp_receive+0x26c>)
 800ebee:	681a      	ldr	r2, [r3, #0]
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800ebf4:	4b68      	ldr	r3, [pc, #416]	@ (800ed98 <tcp_receive+0x270>)
 800ebf6:	681a      	ldr	r2, [r3, #0]
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ebfc:	4b66      	ldr	r3, [pc, #408]	@ (800ed98 <tcp_receive+0x270>)
 800ebfe:	681a      	ldr	r2, [r3, #0]
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec04:	1ad3      	subs	r3, r2, r3
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	dc58      	bgt.n	800ecbc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ec0a:	4b65      	ldr	r3, [pc, #404]	@ (800eda0 <tcp_receive+0x278>)
 800ec0c:	881b      	ldrh	r3, [r3, #0]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d14b      	bne.n	800ecaa <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec16:	687a      	ldr	r2, [r7, #4]
 800ec18:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800ec1c:	4413      	add	r3, r2
 800ec1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec20:	429a      	cmp	r2, r3
 800ec22:	d142      	bne.n	800ecaa <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	db3d      	blt.n	800ecaa <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ec32:	4b59      	ldr	r3, [pc, #356]	@ (800ed98 <tcp_receive+0x270>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	429a      	cmp	r2, r3
 800ec38:	d137      	bne.n	800ecaa <tcp_receive+0x182>
              found_dupack = 1;
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ec44:	2bff      	cmp	r3, #255	@ 0xff
 800ec46:	d007      	beq.n	800ec58 <tcp_receive+0x130>
                ++pcb->dupacks;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ec4e:	3301      	adds	r3, #1
 800ec50:	b2da      	uxtb	r2, r3
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ec5e:	2b03      	cmp	r3, #3
 800ec60:	d91b      	bls.n	800ec9a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ec6c:	4413      	add	r3, r2
 800ec6e:	b29a      	uxth	r2, r3
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ec76:	429a      	cmp	r2, r3
 800ec78:	d30a      	bcc.n	800ec90 <tcp_receive+0x168>
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ec84:	4413      	add	r3, r2
 800ec86:	b29a      	uxth	r2, r3
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ec8e:	e004      	b.n	800ec9a <tcp_receive+0x172>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ec96:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800eca0:	2b02      	cmp	r3, #2
 800eca2:	d902      	bls.n	800ecaa <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f002 fbad 	bl	8011404 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ecaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	f040 8161 	bne.w	800ef74 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ecba:	e15b      	b.n	800ef74 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ecbc:	4b36      	ldr	r3, [pc, #216]	@ (800ed98 <tcp_receive+0x270>)
 800ecbe:	681a      	ldr	r2, [r3, #0]
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ecc4:	1ad3      	subs	r3, r2, r3
 800ecc6:	3b01      	subs	r3, #1
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	f2c0 814e 	blt.w	800ef6a <tcp_receive+0x442>
 800ecce:	4b32      	ldr	r3, [pc, #200]	@ (800ed98 <tcp_receive+0x270>)
 800ecd0:	681a      	ldr	r2, [r3, #0]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ecd6:	1ad3      	subs	r3, r2, r3
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	f300 8146 	bgt.w	800ef6a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	8b5b      	ldrh	r3, [r3, #26]
 800ece2:	f003 0304 	and.w	r3, r3, #4
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d010      	beq.n	800ed0c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	8b5b      	ldrh	r3, [r3, #26]
 800ecee:	f023 0304 	bic.w	r3, r3, #4
 800ecf2:	b29a      	uxth	r2, r3
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2200      	movs	r2, #0
 800ed08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2200      	movs	r2, #0
 800ed10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ed1a:	10db      	asrs	r3, r3, #3
 800ed1c:	b21b      	sxth	r3, r3
 800ed1e:	b29a      	uxth	r2, r3
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ed26:	b29b      	uxth	r3, r3
 800ed28:	4413      	add	r3, r2
 800ed2a:	b29b      	uxth	r3, r3
 800ed2c:	b21a      	sxth	r2, r3
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800ed34:	4b18      	ldr	r3, [pc, #96]	@ (800ed98 <tcp_receive+0x270>)
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	b29a      	uxth	r2, r3
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed3e:	b29b      	uxth	r3, r3
 800ed40:	1ad3      	subs	r3, r2, r3
 800ed42:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2200      	movs	r2, #0
 800ed48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800ed4c:	4b12      	ldr	r3, [pc, #72]	@ (800ed98 <tcp_receive+0x270>)
 800ed4e:	681a      	ldr	r2, [r3, #0]
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	7d1b      	ldrb	r3, [r3, #20]
 800ed58:	2b03      	cmp	r3, #3
 800ed5a:	f240 8097 	bls.w	800ee8c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800ed6a:	429a      	cmp	r2, r3
 800ed6c:	d245      	bcs.n	800edfa <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	8b5b      	ldrh	r3, [r3, #26]
 800ed72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d014      	beq.n	800eda4 <tcp_receive+0x27c>
 800ed7a:	2301      	movs	r3, #1
 800ed7c:	e013      	b.n	800eda6 <tcp_receive+0x27e>
 800ed7e:	bf00      	nop
 800ed80:	080181e0 	.word	0x080181e0
 800ed84:	08018698 	.word	0x08018698
 800ed88:	0801822c 	.word	0x0801822c
 800ed8c:	080186b4 	.word	0x080186b4
 800ed90:	2400331c 	.word	0x2400331c
 800ed94:	24003310 	.word	0x24003310
 800ed98:	24003314 	.word	0x24003314
 800ed9c:	24003300 	.word	0x24003300
 800eda0:	2400331a 	.word	0x2400331a
 800eda4:	2302      	movs	r3, #2
 800eda6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800edaa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800edae:	b29a      	uxth	r2, r3
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800edb4:	fb12 f303 	smulbb	r3, r2, r3
 800edb8:	b29b      	uxth	r3, r3
 800edba:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800edbc:	4293      	cmp	r3, r2
 800edbe:	bf28      	it	cs
 800edc0:	4613      	movcs	r3, r2
 800edc2:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800edca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800edcc:	4413      	add	r3, r2
 800edce:	b29a      	uxth	r2, r3
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800edd6:	429a      	cmp	r2, r3
 800edd8:	d309      	bcc.n	800edee <tcp_receive+0x2c6>
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ede0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ede2:	4413      	add	r3, r2
 800ede4:	b29a      	uxth	r2, r3
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800edec:	e04e      	b.n	800ee8c <tcp_receive+0x364>
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800edf4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800edf8:	e048      	b.n	800ee8c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800ee00:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ee02:	4413      	add	r3, r2
 800ee04:	b29a      	uxth	r2, r3
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ee0c:	429a      	cmp	r2, r3
 800ee0e:	d309      	bcc.n	800ee24 <tcp_receive+0x2fc>
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800ee16:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ee18:	4413      	add	r3, r2
 800ee1a:	b29a      	uxth	r2, r3
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ee22:	e004      	b.n	800ee2e <tcp_receive+0x306>
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ee2a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ee3a:	429a      	cmp	r2, r3
 800ee3c:	d326      	bcc.n	800ee8c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ee4a:	1ad3      	subs	r3, r2, r3
 800ee4c:	b29a      	uxth	r2, r3
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee5e:	4413      	add	r3, r2
 800ee60:	b29a      	uxth	r2, r3
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ee68:	429a      	cmp	r2, r3
 800ee6a:	d30a      	bcc.n	800ee82 <tcp_receive+0x35a>
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee76:	4413      	add	r3, r2
 800ee78:	b29a      	uxth	r2, r3
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ee80:	e004      	b.n	800ee8c <tcp_receive+0x364>
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ee88:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee94:	4a98      	ldr	r2, [pc, #608]	@ (800f0f8 <tcp_receive+0x5d0>)
 800ee96:	6878      	ldr	r0, [r7, #4]
 800ee98:	f7ff fdca 	bl	800ea30 <tcp_free_acked_segments>
 800ee9c:	4602      	mov	r2, r0
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eeaa:	4a94      	ldr	r2, [pc, #592]	@ (800f0fc <tcp_receive+0x5d4>)
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f7ff fdbf 	bl	800ea30 <tcp_free_acked_segments>
 800eeb2:	4602      	mov	r2, r0
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d104      	bne.n	800eeca <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800eec6:	861a      	strh	r2, [r3, #48]	@ 0x30
 800eec8:	e002      	b.n	800eed0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	2200      	movs	r2, #0
 800eece:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2200      	movs	r2, #0
 800eed4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d103      	bne.n	800eee6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2200      	movs	r2, #0
 800eee2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800eeec:	4b84      	ldr	r3, [pc, #528]	@ (800f100 <tcp_receive+0x5d8>)
 800eeee:	881b      	ldrh	r3, [r3, #0]
 800eef0:	4413      	add	r3, r2
 800eef2:	b29a      	uxth	r2, r3
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	8b5b      	ldrh	r3, [r3, #26]
 800eefe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d035      	beq.n	800ef72 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d118      	bne.n	800ef40 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d00c      	beq.n	800ef30 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ef1e:	691b      	ldr	r3, [r3, #16]
 800ef20:	685b      	ldr	r3, [r3, #4]
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7fa fc85 	bl	8009832 <lwip_htonl>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	dc20      	bgt.n	800ef72 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	8b5b      	ldrh	r3, [r3, #26]
 800ef34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ef38:	b29a      	uxth	r2, r3
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ef3e:	e018      	b.n	800ef72 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef48:	691b      	ldr	r3, [r3, #16]
 800ef4a:	685b      	ldr	r3, [r3, #4]
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	f7fa fc70 	bl	8009832 <lwip_htonl>
 800ef52:	4603      	mov	r3, r0
 800ef54:	1ae3      	subs	r3, r4, r3
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	dc0b      	bgt.n	800ef72 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	8b5b      	ldrh	r3, [r3, #26]
 800ef5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ef62:	b29a      	uxth	r2, r3
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ef68:	e003      	b.n	800ef72 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800ef6a:	6878      	ldr	r0, [r7, #4]
 800ef6c:	f002 fc3a 	bl	80117e4 <tcp_send_empty_ack>
 800ef70:	e000      	b.n	800ef74 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ef72:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d05b      	beq.n	800f034 <tcp_receive+0x50c>
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ef80:	4b60      	ldr	r3, [pc, #384]	@ (800f104 <tcp_receive+0x5dc>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	1ad3      	subs	r3, r2, r3
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	da54      	bge.n	800f034 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800ef8a:	4b5f      	ldr	r3, [pc, #380]	@ (800f108 <tcp_receive+0x5e0>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	b29a      	uxth	r2, r3
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef94:	b29b      	uxth	r3, r3
 800ef96:	1ad3      	subs	r3, r2, r3
 800ef98:	b29b      	uxth	r3, r3
 800ef9a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800ef9e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800efa8:	10db      	asrs	r3, r3, #3
 800efaa:	b21b      	sxth	r3, r3
 800efac:	b29b      	uxth	r3, r3
 800efae:	1ad3      	subs	r3, r2, r3
 800efb0:	b29b      	uxth	r3, r3
 800efb2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800efbc:	b29a      	uxth	r2, r3
 800efbe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800efc2:	4413      	add	r3, r2
 800efc4:	b29b      	uxth	r3, r3
 800efc6:	b21a      	sxth	r2, r3
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800efcc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	da05      	bge.n	800efe0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800efd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800efd8:	425b      	negs	r3, r3
 800efda:	b29b      	uxth	r3, r3
 800efdc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800efe0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800efea:	109b      	asrs	r3, r3, #2
 800efec:	b21b      	sxth	r3, r3
 800efee:	b29b      	uxth	r3, r3
 800eff0:	1ad3      	subs	r3, r2, r3
 800eff2:	b29b      	uxth	r3, r3
 800eff4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800effe:	b29a      	uxth	r2, r3
 800f000:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f004:	4413      	add	r3, r2
 800f006:	b29b      	uxth	r3, r3
 800f008:	b21a      	sxth	r2, r3
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f014:	10db      	asrs	r3, r3, #3
 800f016:	b21b      	sxth	r3, r3
 800f018:	b29a      	uxth	r2, r3
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f020:	b29b      	uxth	r3, r3
 800f022:	4413      	add	r3, r2
 800f024:	b29b      	uxth	r3, r3
 800f026:	b21a      	sxth	r2, r3
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2200      	movs	r2, #0
 800f032:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f034:	4b35      	ldr	r3, [pc, #212]	@ (800f10c <tcp_receive+0x5e4>)
 800f036:	881b      	ldrh	r3, [r3, #0]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	f000 84df 	beq.w	800f9fc <tcp_receive+0xed4>
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	7d1b      	ldrb	r3, [r3, #20]
 800f042:	2b06      	cmp	r3, #6
 800f044:	f200 84da 	bhi.w	800f9fc <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f04c:	4b30      	ldr	r3, [pc, #192]	@ (800f110 <tcp_receive+0x5e8>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	1ad3      	subs	r3, r2, r3
 800f052:	3b01      	subs	r3, #1
 800f054:	2b00      	cmp	r3, #0
 800f056:	f2c0 808f 	blt.w	800f178 <tcp_receive+0x650>
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f05e:	4b2b      	ldr	r3, [pc, #172]	@ (800f10c <tcp_receive+0x5e4>)
 800f060:	881b      	ldrh	r3, [r3, #0]
 800f062:	4619      	mov	r1, r3
 800f064:	4b2a      	ldr	r3, [pc, #168]	@ (800f110 <tcp_receive+0x5e8>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	440b      	add	r3, r1
 800f06a:	1ad3      	subs	r3, r2, r3
 800f06c:	3301      	adds	r3, #1
 800f06e:	2b00      	cmp	r3, #0
 800f070:	f300 8082 	bgt.w	800f178 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f074:	4b27      	ldr	r3, [pc, #156]	@ (800f114 <tcp_receive+0x5ec>)
 800f076:	685b      	ldr	r3, [r3, #4]
 800f078:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f07e:	4b24      	ldr	r3, [pc, #144]	@ (800f110 <tcp_receive+0x5e8>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	1ad3      	subs	r3, r2, r3
 800f084:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f086:	4b23      	ldr	r3, [pc, #140]	@ (800f114 <tcp_receive+0x5ec>)
 800f088:	685b      	ldr	r3, [r3, #4]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d106      	bne.n	800f09c <tcp_receive+0x574>
 800f08e:	4b22      	ldr	r3, [pc, #136]	@ (800f118 <tcp_receive+0x5f0>)
 800f090:	f240 5294 	movw	r2, #1428	@ 0x594
 800f094:	4921      	ldr	r1, [pc, #132]	@ (800f11c <tcp_receive+0x5f4>)
 800f096:	4822      	ldr	r0, [pc, #136]	@ (800f120 <tcp_receive+0x5f8>)
 800f098:	f006 f9a6 	bl	80153e8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f09e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800f0a2:	4293      	cmp	r3, r2
 800f0a4:	d906      	bls.n	800f0b4 <tcp_receive+0x58c>
 800f0a6:	4b1c      	ldr	r3, [pc, #112]	@ (800f118 <tcp_receive+0x5f0>)
 800f0a8:	f240 5295 	movw	r2, #1429	@ 0x595
 800f0ac:	491d      	ldr	r1, [pc, #116]	@ (800f124 <tcp_receive+0x5fc>)
 800f0ae:	481c      	ldr	r0, [pc, #112]	@ (800f120 <tcp_receive+0x5f8>)
 800f0b0:	f006 f99a 	bl	80153e8 <iprintf>
      off = (u16_t)off32;
 800f0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0b6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f0ba:	4b16      	ldr	r3, [pc, #88]	@ (800f114 <tcp_receive+0x5ec>)
 800f0bc:	685b      	ldr	r3, [r3, #4]
 800f0be:	891b      	ldrh	r3, [r3, #8]
 800f0c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f0c4:	429a      	cmp	r2, r3
 800f0c6:	d906      	bls.n	800f0d6 <tcp_receive+0x5ae>
 800f0c8:	4b13      	ldr	r3, [pc, #76]	@ (800f118 <tcp_receive+0x5f0>)
 800f0ca:	f240 5297 	movw	r2, #1431	@ 0x597
 800f0ce:	4916      	ldr	r1, [pc, #88]	@ (800f128 <tcp_receive+0x600>)
 800f0d0:	4813      	ldr	r0, [pc, #76]	@ (800f120 <tcp_receive+0x5f8>)
 800f0d2:	f006 f989 	bl	80153e8 <iprintf>
      inseg.len -= off;
 800f0d6:	4b0f      	ldr	r3, [pc, #60]	@ (800f114 <tcp_receive+0x5ec>)
 800f0d8:	891a      	ldrh	r2, [r3, #8]
 800f0da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f0de:	1ad3      	subs	r3, r2, r3
 800f0e0:	b29a      	uxth	r2, r3
 800f0e2:	4b0c      	ldr	r3, [pc, #48]	@ (800f114 <tcp_receive+0x5ec>)
 800f0e4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f0e6:	4b0b      	ldr	r3, [pc, #44]	@ (800f114 <tcp_receive+0x5ec>)
 800f0e8:	685b      	ldr	r3, [r3, #4]
 800f0ea:	891a      	ldrh	r2, [r3, #8]
 800f0ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f0f0:	1ad3      	subs	r3, r2, r3
 800f0f2:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800f0f4:	e02a      	b.n	800f14c <tcp_receive+0x624>
 800f0f6:	bf00      	nop
 800f0f8:	080186d0 	.word	0x080186d0
 800f0fc:	080186d8 	.word	0x080186d8
 800f100:	24003318 	.word	0x24003318
 800f104:	24003314 	.word	0x24003314
 800f108:	240032d4 	.word	0x240032d4
 800f10c:	2400331a 	.word	0x2400331a
 800f110:	24003310 	.word	0x24003310
 800f114:	240032ec 	.word	0x240032ec
 800f118:	080181e0 	.word	0x080181e0
 800f11c:	080186e0 	.word	0x080186e0
 800f120:	0801822c 	.word	0x0801822c
 800f124:	080186f0 	.word	0x080186f0
 800f128:	08018700 	.word	0x08018700
        off -= p->len;
 800f12c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f12e:	895b      	ldrh	r3, [r3, #10]
 800f130:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f134:	1ad3      	subs	r3, r2, r3
 800f136:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f13a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f13c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800f13e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f140:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f142:	2200      	movs	r2, #0
 800f144:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f146:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800f14c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f14e:	895b      	ldrh	r3, [r3, #10]
 800f150:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f154:	429a      	cmp	r2, r3
 800f156:	d8e9      	bhi.n	800f12c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f158:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f15c:	4619      	mov	r1, r3
 800f15e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f160:	f7fb ff36 	bl	800afd0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f168:	4a90      	ldr	r2, [pc, #576]	@ (800f3ac <tcp_receive+0x884>)
 800f16a:	6013      	str	r3, [r2, #0]
 800f16c:	4b90      	ldr	r3, [pc, #576]	@ (800f3b0 <tcp_receive+0x888>)
 800f16e:	691b      	ldr	r3, [r3, #16]
 800f170:	4a8e      	ldr	r2, [pc, #568]	@ (800f3ac <tcp_receive+0x884>)
 800f172:	6812      	ldr	r2, [r2, #0]
 800f174:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f176:	e00d      	b.n	800f194 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f178:	4b8c      	ldr	r3, [pc, #560]	@ (800f3ac <tcp_receive+0x884>)
 800f17a:	681a      	ldr	r2, [r3, #0]
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f180:	1ad3      	subs	r3, r2, r3
 800f182:	2b00      	cmp	r3, #0
 800f184:	da06      	bge.n	800f194 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	8b5b      	ldrh	r3, [r3, #26]
 800f18a:	f043 0302 	orr.w	r3, r3, #2
 800f18e:	b29a      	uxth	r2, r3
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f194:	4b85      	ldr	r3, [pc, #532]	@ (800f3ac <tcp_receive+0x884>)
 800f196:	681a      	ldr	r2, [r3, #0]
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f19c:	1ad3      	subs	r3, r2, r3
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	f2c0 8427 	blt.w	800f9f2 <tcp_receive+0xeca>
 800f1a4:	4b81      	ldr	r3, [pc, #516]	@ (800f3ac <tcp_receive+0x884>)
 800f1a6:	681a      	ldr	r2, [r3, #0]
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1ac:	6879      	ldr	r1, [r7, #4]
 800f1ae:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f1b0:	440b      	add	r3, r1
 800f1b2:	1ad3      	subs	r3, r2, r3
 800f1b4:	3301      	adds	r3, #1
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	f300 841b 	bgt.w	800f9f2 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f1c0:	4b7a      	ldr	r3, [pc, #488]	@ (800f3ac <tcp_receive+0x884>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	f040 8298 	bne.w	800f6fa <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f1ca:	4b79      	ldr	r3, [pc, #484]	@ (800f3b0 <tcp_receive+0x888>)
 800f1cc:	891c      	ldrh	r4, [r3, #8]
 800f1ce:	4b78      	ldr	r3, [pc, #480]	@ (800f3b0 <tcp_receive+0x888>)
 800f1d0:	691b      	ldr	r3, [r3, #16]
 800f1d2:	899b      	ldrh	r3, [r3, #12]
 800f1d4:	b29b      	uxth	r3, r3
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f7fa fb16 	bl	8009808 <lwip_htons>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	b2db      	uxtb	r3, r3
 800f1e0:	f003 0303 	and.w	r3, r3, #3
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d001      	beq.n	800f1ec <tcp_receive+0x6c4>
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	e000      	b.n	800f1ee <tcp_receive+0x6c6>
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	4423      	add	r3, r4
 800f1f0:	b29a      	uxth	r2, r3
 800f1f2:	4b70      	ldr	r3, [pc, #448]	@ (800f3b4 <tcp_receive+0x88c>)
 800f1f4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f1fa:	4b6e      	ldr	r3, [pc, #440]	@ (800f3b4 <tcp_receive+0x88c>)
 800f1fc:	881b      	ldrh	r3, [r3, #0]
 800f1fe:	429a      	cmp	r2, r3
 800f200:	d274      	bcs.n	800f2ec <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f202:	4b6b      	ldr	r3, [pc, #428]	@ (800f3b0 <tcp_receive+0x888>)
 800f204:	691b      	ldr	r3, [r3, #16]
 800f206:	899b      	ldrh	r3, [r3, #12]
 800f208:	b29b      	uxth	r3, r3
 800f20a:	4618      	mov	r0, r3
 800f20c:	f7fa fafc 	bl	8009808 <lwip_htons>
 800f210:	4603      	mov	r3, r0
 800f212:	b2db      	uxtb	r3, r3
 800f214:	f003 0301 	and.w	r3, r3, #1
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d01e      	beq.n	800f25a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f21c:	4b64      	ldr	r3, [pc, #400]	@ (800f3b0 <tcp_receive+0x888>)
 800f21e:	691b      	ldr	r3, [r3, #16]
 800f220:	899b      	ldrh	r3, [r3, #12]
 800f222:	b29b      	uxth	r3, r3
 800f224:	b21b      	sxth	r3, r3
 800f226:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f22a:	b21c      	sxth	r4, r3
 800f22c:	4b60      	ldr	r3, [pc, #384]	@ (800f3b0 <tcp_receive+0x888>)
 800f22e:	691b      	ldr	r3, [r3, #16]
 800f230:	899b      	ldrh	r3, [r3, #12]
 800f232:	b29b      	uxth	r3, r3
 800f234:	4618      	mov	r0, r3
 800f236:	f7fa fae7 	bl	8009808 <lwip_htons>
 800f23a:	4603      	mov	r3, r0
 800f23c:	b2db      	uxtb	r3, r3
 800f23e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800f242:	b29b      	uxth	r3, r3
 800f244:	4618      	mov	r0, r3
 800f246:	f7fa fadf 	bl	8009808 <lwip_htons>
 800f24a:	4603      	mov	r3, r0
 800f24c:	b21b      	sxth	r3, r3
 800f24e:	4323      	orrs	r3, r4
 800f250:	b21a      	sxth	r2, r3
 800f252:	4b57      	ldr	r3, [pc, #348]	@ (800f3b0 <tcp_receive+0x888>)
 800f254:	691b      	ldr	r3, [r3, #16]
 800f256:	b292      	uxth	r2, r2
 800f258:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f25e:	4b54      	ldr	r3, [pc, #336]	@ (800f3b0 <tcp_receive+0x888>)
 800f260:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f262:	4b53      	ldr	r3, [pc, #332]	@ (800f3b0 <tcp_receive+0x888>)
 800f264:	691b      	ldr	r3, [r3, #16]
 800f266:	899b      	ldrh	r3, [r3, #12]
 800f268:	b29b      	uxth	r3, r3
 800f26a:	4618      	mov	r0, r3
 800f26c:	f7fa facc 	bl	8009808 <lwip_htons>
 800f270:	4603      	mov	r3, r0
 800f272:	b2db      	uxtb	r3, r3
 800f274:	f003 0302 	and.w	r3, r3, #2
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d005      	beq.n	800f288 <tcp_receive+0x760>
            inseg.len -= 1;
 800f27c:	4b4c      	ldr	r3, [pc, #304]	@ (800f3b0 <tcp_receive+0x888>)
 800f27e:	891b      	ldrh	r3, [r3, #8]
 800f280:	3b01      	subs	r3, #1
 800f282:	b29a      	uxth	r2, r3
 800f284:	4b4a      	ldr	r3, [pc, #296]	@ (800f3b0 <tcp_receive+0x888>)
 800f286:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f288:	4b49      	ldr	r3, [pc, #292]	@ (800f3b0 <tcp_receive+0x888>)
 800f28a:	685b      	ldr	r3, [r3, #4]
 800f28c:	4a48      	ldr	r2, [pc, #288]	@ (800f3b0 <tcp_receive+0x888>)
 800f28e:	8912      	ldrh	r2, [r2, #8]
 800f290:	4611      	mov	r1, r2
 800f292:	4618      	mov	r0, r3
 800f294:	f7fb fd8a 	bl	800adac <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f298:	4b45      	ldr	r3, [pc, #276]	@ (800f3b0 <tcp_receive+0x888>)
 800f29a:	891c      	ldrh	r4, [r3, #8]
 800f29c:	4b44      	ldr	r3, [pc, #272]	@ (800f3b0 <tcp_receive+0x888>)
 800f29e:	691b      	ldr	r3, [r3, #16]
 800f2a0:	899b      	ldrh	r3, [r3, #12]
 800f2a2:	b29b      	uxth	r3, r3
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f7fa faaf 	bl	8009808 <lwip_htons>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	b2db      	uxtb	r3, r3
 800f2ae:	f003 0303 	and.w	r3, r3, #3
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d001      	beq.n	800f2ba <tcp_receive+0x792>
 800f2b6:	2301      	movs	r3, #1
 800f2b8:	e000      	b.n	800f2bc <tcp_receive+0x794>
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	4423      	add	r3, r4
 800f2be:	b29a      	uxth	r2, r3
 800f2c0:	4b3c      	ldr	r3, [pc, #240]	@ (800f3b4 <tcp_receive+0x88c>)
 800f2c2:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f2c4:	4b3b      	ldr	r3, [pc, #236]	@ (800f3b4 <tcp_receive+0x88c>)
 800f2c6:	881b      	ldrh	r3, [r3, #0]
 800f2c8:	461a      	mov	r2, r3
 800f2ca:	4b38      	ldr	r3, [pc, #224]	@ (800f3ac <tcp_receive+0x884>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	441a      	add	r2, r3
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2d4:	6879      	ldr	r1, [r7, #4]
 800f2d6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f2d8:	440b      	add	r3, r1
 800f2da:	429a      	cmp	r2, r3
 800f2dc:	d006      	beq.n	800f2ec <tcp_receive+0x7c4>
 800f2de:	4b36      	ldr	r3, [pc, #216]	@ (800f3b8 <tcp_receive+0x890>)
 800f2e0:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800f2e4:	4935      	ldr	r1, [pc, #212]	@ (800f3bc <tcp_receive+0x894>)
 800f2e6:	4836      	ldr	r0, [pc, #216]	@ (800f3c0 <tcp_receive+0x898>)
 800f2e8:	f006 f87e 	bl	80153e8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	f000 80e6 	beq.w	800f4c2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f2f6:	4b2e      	ldr	r3, [pc, #184]	@ (800f3b0 <tcp_receive+0x888>)
 800f2f8:	691b      	ldr	r3, [r3, #16]
 800f2fa:	899b      	ldrh	r3, [r3, #12]
 800f2fc:	b29b      	uxth	r3, r3
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7fa fa82 	bl	8009808 <lwip_htons>
 800f304:	4603      	mov	r3, r0
 800f306:	b2db      	uxtb	r3, r3
 800f308:	f003 0301 	and.w	r3, r3, #1
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d010      	beq.n	800f332 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f310:	e00a      	b.n	800f328 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f316:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f31c:	681a      	ldr	r2, [r3, #0]
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800f322:	68f8      	ldr	r0, [r7, #12]
 800f324:	f7fd fbb1 	bl	800ca8a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d1f0      	bne.n	800f312 <tcp_receive+0x7ea>
 800f330:	e0c7      	b.n	800f4c2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f336:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f338:	e051      	b.n	800f3de <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f33a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f33c:	691b      	ldr	r3, [r3, #16]
 800f33e:	899b      	ldrh	r3, [r3, #12]
 800f340:	b29b      	uxth	r3, r3
 800f342:	4618      	mov	r0, r3
 800f344:	f7fa fa60 	bl	8009808 <lwip_htons>
 800f348:	4603      	mov	r3, r0
 800f34a:	b2db      	uxtb	r3, r3
 800f34c:	f003 0301 	and.w	r3, r3, #1
 800f350:	2b00      	cmp	r3, #0
 800f352:	d03c      	beq.n	800f3ce <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f354:	4b16      	ldr	r3, [pc, #88]	@ (800f3b0 <tcp_receive+0x888>)
 800f356:	691b      	ldr	r3, [r3, #16]
 800f358:	899b      	ldrh	r3, [r3, #12]
 800f35a:	b29b      	uxth	r3, r3
 800f35c:	4618      	mov	r0, r3
 800f35e:	f7fa fa53 	bl	8009808 <lwip_htons>
 800f362:	4603      	mov	r3, r0
 800f364:	b2db      	uxtb	r3, r3
 800f366:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d12f      	bne.n	800f3ce <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f36e:	4b10      	ldr	r3, [pc, #64]	@ (800f3b0 <tcp_receive+0x888>)
 800f370:	691b      	ldr	r3, [r3, #16]
 800f372:	899b      	ldrh	r3, [r3, #12]
 800f374:	b29c      	uxth	r4, r3
 800f376:	2001      	movs	r0, #1
 800f378:	f7fa fa46 	bl	8009808 <lwip_htons>
 800f37c:	4603      	mov	r3, r0
 800f37e:	461a      	mov	r2, r3
 800f380:	4b0b      	ldr	r3, [pc, #44]	@ (800f3b0 <tcp_receive+0x888>)
 800f382:	691b      	ldr	r3, [r3, #16]
 800f384:	4322      	orrs	r2, r4
 800f386:	b292      	uxth	r2, r2
 800f388:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f38a:	4b09      	ldr	r3, [pc, #36]	@ (800f3b0 <tcp_receive+0x888>)
 800f38c:	891c      	ldrh	r4, [r3, #8]
 800f38e:	4b08      	ldr	r3, [pc, #32]	@ (800f3b0 <tcp_receive+0x888>)
 800f390:	691b      	ldr	r3, [r3, #16]
 800f392:	899b      	ldrh	r3, [r3, #12]
 800f394:	b29b      	uxth	r3, r3
 800f396:	4618      	mov	r0, r3
 800f398:	f7fa fa36 	bl	8009808 <lwip_htons>
 800f39c:	4603      	mov	r3, r0
 800f39e:	b2db      	uxtb	r3, r3
 800f3a0:	f003 0303 	and.w	r3, r3, #3
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d00d      	beq.n	800f3c4 <tcp_receive+0x89c>
 800f3a8:	2301      	movs	r3, #1
 800f3aa:	e00c      	b.n	800f3c6 <tcp_receive+0x89e>
 800f3ac:	24003310 	.word	0x24003310
 800f3b0:	240032ec 	.word	0x240032ec
 800f3b4:	2400331a 	.word	0x2400331a
 800f3b8:	080181e0 	.word	0x080181e0
 800f3bc:	08018710 	.word	0x08018710
 800f3c0:	0801822c 	.word	0x0801822c
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	4423      	add	r3, r4
 800f3c8:	b29a      	uxth	r2, r3
 800f3ca:	4b98      	ldr	r3, [pc, #608]	@ (800f62c <tcp_receive+0xb04>)
 800f3cc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f3ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3d0:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f3d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800f3d8:	6938      	ldr	r0, [r7, #16]
 800f3da:	f7fd fb56 	bl	800ca8a <tcp_seg_free>
            while (next &&
 800f3de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d00e      	beq.n	800f402 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f3e4:	4b91      	ldr	r3, [pc, #580]	@ (800f62c <tcp_receive+0xb04>)
 800f3e6:	881b      	ldrh	r3, [r3, #0]
 800f3e8:	461a      	mov	r2, r3
 800f3ea:	4b91      	ldr	r3, [pc, #580]	@ (800f630 <tcp_receive+0xb08>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	441a      	add	r2, r3
 800f3f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3f2:	691b      	ldr	r3, [r3, #16]
 800f3f4:	685b      	ldr	r3, [r3, #4]
 800f3f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f3f8:	8909      	ldrh	r1, [r1, #8]
 800f3fa:	440b      	add	r3, r1
 800f3fc:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	da9b      	bge.n	800f33a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f404:	2b00      	cmp	r3, #0
 800f406:	d059      	beq.n	800f4bc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f408:	4b88      	ldr	r3, [pc, #544]	@ (800f62c <tcp_receive+0xb04>)
 800f40a:	881b      	ldrh	r3, [r3, #0]
 800f40c:	461a      	mov	r2, r3
 800f40e:	4b88      	ldr	r3, [pc, #544]	@ (800f630 <tcp_receive+0xb08>)
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	441a      	add	r2, r3
 800f414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f416:	691b      	ldr	r3, [r3, #16]
 800f418:	685b      	ldr	r3, [r3, #4]
 800f41a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	dd4d      	ble.n	800f4bc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f422:	691b      	ldr	r3, [r3, #16]
 800f424:	685b      	ldr	r3, [r3, #4]
 800f426:	b29a      	uxth	r2, r3
 800f428:	4b81      	ldr	r3, [pc, #516]	@ (800f630 <tcp_receive+0xb08>)
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	b29b      	uxth	r3, r3
 800f42e:	1ad3      	subs	r3, r2, r3
 800f430:	b29a      	uxth	r2, r3
 800f432:	4b80      	ldr	r3, [pc, #512]	@ (800f634 <tcp_receive+0xb0c>)
 800f434:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f436:	4b7f      	ldr	r3, [pc, #508]	@ (800f634 <tcp_receive+0xb0c>)
 800f438:	691b      	ldr	r3, [r3, #16]
 800f43a:	899b      	ldrh	r3, [r3, #12]
 800f43c:	b29b      	uxth	r3, r3
 800f43e:	4618      	mov	r0, r3
 800f440:	f7fa f9e2 	bl	8009808 <lwip_htons>
 800f444:	4603      	mov	r3, r0
 800f446:	b2db      	uxtb	r3, r3
 800f448:	f003 0302 	and.w	r3, r3, #2
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d005      	beq.n	800f45c <tcp_receive+0x934>
                inseg.len -= 1;
 800f450:	4b78      	ldr	r3, [pc, #480]	@ (800f634 <tcp_receive+0xb0c>)
 800f452:	891b      	ldrh	r3, [r3, #8]
 800f454:	3b01      	subs	r3, #1
 800f456:	b29a      	uxth	r2, r3
 800f458:	4b76      	ldr	r3, [pc, #472]	@ (800f634 <tcp_receive+0xb0c>)
 800f45a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f45c:	4b75      	ldr	r3, [pc, #468]	@ (800f634 <tcp_receive+0xb0c>)
 800f45e:	685b      	ldr	r3, [r3, #4]
 800f460:	4a74      	ldr	r2, [pc, #464]	@ (800f634 <tcp_receive+0xb0c>)
 800f462:	8912      	ldrh	r2, [r2, #8]
 800f464:	4611      	mov	r1, r2
 800f466:	4618      	mov	r0, r3
 800f468:	f7fb fca0 	bl	800adac <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f46c:	4b71      	ldr	r3, [pc, #452]	@ (800f634 <tcp_receive+0xb0c>)
 800f46e:	891c      	ldrh	r4, [r3, #8]
 800f470:	4b70      	ldr	r3, [pc, #448]	@ (800f634 <tcp_receive+0xb0c>)
 800f472:	691b      	ldr	r3, [r3, #16]
 800f474:	899b      	ldrh	r3, [r3, #12]
 800f476:	b29b      	uxth	r3, r3
 800f478:	4618      	mov	r0, r3
 800f47a:	f7fa f9c5 	bl	8009808 <lwip_htons>
 800f47e:	4603      	mov	r3, r0
 800f480:	b2db      	uxtb	r3, r3
 800f482:	f003 0303 	and.w	r3, r3, #3
 800f486:	2b00      	cmp	r3, #0
 800f488:	d001      	beq.n	800f48e <tcp_receive+0x966>
 800f48a:	2301      	movs	r3, #1
 800f48c:	e000      	b.n	800f490 <tcp_receive+0x968>
 800f48e:	2300      	movs	r3, #0
 800f490:	4423      	add	r3, r4
 800f492:	b29a      	uxth	r2, r3
 800f494:	4b65      	ldr	r3, [pc, #404]	@ (800f62c <tcp_receive+0xb04>)
 800f496:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f498:	4b64      	ldr	r3, [pc, #400]	@ (800f62c <tcp_receive+0xb04>)
 800f49a:	881b      	ldrh	r3, [r3, #0]
 800f49c:	461a      	mov	r2, r3
 800f49e:	4b64      	ldr	r3, [pc, #400]	@ (800f630 <tcp_receive+0xb08>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	441a      	add	r2, r3
 800f4a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4a6:	691b      	ldr	r3, [r3, #16]
 800f4a8:	685b      	ldr	r3, [r3, #4]
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	d006      	beq.n	800f4bc <tcp_receive+0x994>
 800f4ae:	4b62      	ldr	r3, [pc, #392]	@ (800f638 <tcp_receive+0xb10>)
 800f4b0:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800f4b4:	4961      	ldr	r1, [pc, #388]	@ (800f63c <tcp_receive+0xb14>)
 800f4b6:	4862      	ldr	r0, [pc, #392]	@ (800f640 <tcp_receive+0xb18>)
 800f4b8:	f005 ff96 	bl	80153e8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f4c0:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f4c2:	4b5a      	ldr	r3, [pc, #360]	@ (800f62c <tcp_receive+0xb04>)
 800f4c4:	881b      	ldrh	r3, [r3, #0]
 800f4c6:	461a      	mov	r2, r3
 800f4c8:	4b59      	ldr	r3, [pc, #356]	@ (800f630 <tcp_receive+0xb08>)
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	441a      	add	r2, r3
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f4d6:	4b55      	ldr	r3, [pc, #340]	@ (800f62c <tcp_receive+0xb04>)
 800f4d8:	881b      	ldrh	r3, [r3, #0]
 800f4da:	429a      	cmp	r2, r3
 800f4dc:	d206      	bcs.n	800f4ec <tcp_receive+0x9c4>
 800f4de:	4b56      	ldr	r3, [pc, #344]	@ (800f638 <tcp_receive+0xb10>)
 800f4e0:	f240 6207 	movw	r2, #1543	@ 0x607
 800f4e4:	4957      	ldr	r1, [pc, #348]	@ (800f644 <tcp_receive+0xb1c>)
 800f4e6:	4856      	ldr	r0, [pc, #344]	@ (800f640 <tcp_receive+0xb18>)
 800f4e8:	f005 ff7e 	bl	80153e8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f4f0:	4b4e      	ldr	r3, [pc, #312]	@ (800f62c <tcp_receive+0xb04>)
 800f4f2:	881b      	ldrh	r3, [r3, #0]
 800f4f4:	1ad3      	subs	r3, r2, r3
 800f4f6:	b29a      	uxth	r2, r3
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f7fc fd33 	bl	800bf68 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f502:	4b4c      	ldr	r3, [pc, #304]	@ (800f634 <tcp_receive+0xb0c>)
 800f504:	685b      	ldr	r3, [r3, #4]
 800f506:	891b      	ldrh	r3, [r3, #8]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d006      	beq.n	800f51a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f50c:	4b49      	ldr	r3, [pc, #292]	@ (800f634 <tcp_receive+0xb0c>)
 800f50e:	685b      	ldr	r3, [r3, #4]
 800f510:	4a4d      	ldr	r2, [pc, #308]	@ (800f648 <tcp_receive+0xb20>)
 800f512:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f514:	4b47      	ldr	r3, [pc, #284]	@ (800f634 <tcp_receive+0xb0c>)
 800f516:	2200      	movs	r2, #0
 800f518:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f51a:	4b46      	ldr	r3, [pc, #280]	@ (800f634 <tcp_receive+0xb0c>)
 800f51c:	691b      	ldr	r3, [r3, #16]
 800f51e:	899b      	ldrh	r3, [r3, #12]
 800f520:	b29b      	uxth	r3, r3
 800f522:	4618      	mov	r0, r3
 800f524:	f7fa f970 	bl	8009808 <lwip_htons>
 800f528:	4603      	mov	r3, r0
 800f52a:	b2db      	uxtb	r3, r3
 800f52c:	f003 0301 	and.w	r3, r3, #1
 800f530:	2b00      	cmp	r3, #0
 800f532:	f000 80b8 	beq.w	800f6a6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f536:	4b45      	ldr	r3, [pc, #276]	@ (800f64c <tcp_receive+0xb24>)
 800f538:	781b      	ldrb	r3, [r3, #0]
 800f53a:	f043 0320 	orr.w	r3, r3, #32
 800f53e:	b2da      	uxtb	r2, r3
 800f540:	4b42      	ldr	r3, [pc, #264]	@ (800f64c <tcp_receive+0xb24>)
 800f542:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f544:	e0af      	b.n	800f6a6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f54a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f550:	691b      	ldr	r3, [r3, #16]
 800f552:	685b      	ldr	r3, [r3, #4]
 800f554:	4a36      	ldr	r2, [pc, #216]	@ (800f630 <tcp_receive+0xb08>)
 800f556:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f558:	68bb      	ldr	r3, [r7, #8]
 800f55a:	891b      	ldrh	r3, [r3, #8]
 800f55c:	461c      	mov	r4, r3
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	691b      	ldr	r3, [r3, #16]
 800f562:	899b      	ldrh	r3, [r3, #12]
 800f564:	b29b      	uxth	r3, r3
 800f566:	4618      	mov	r0, r3
 800f568:	f7fa f94e 	bl	8009808 <lwip_htons>
 800f56c:	4603      	mov	r3, r0
 800f56e:	b2db      	uxtb	r3, r3
 800f570:	f003 0303 	and.w	r3, r3, #3
 800f574:	2b00      	cmp	r3, #0
 800f576:	d001      	beq.n	800f57c <tcp_receive+0xa54>
 800f578:	2301      	movs	r3, #1
 800f57a:	e000      	b.n	800f57e <tcp_receive+0xa56>
 800f57c:	2300      	movs	r3, #0
 800f57e:	191a      	adds	r2, r3, r4
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f584:	441a      	add	r2, r3
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f58e:	461c      	mov	r4, r3
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	891b      	ldrh	r3, [r3, #8]
 800f594:	461d      	mov	r5, r3
 800f596:	68bb      	ldr	r3, [r7, #8]
 800f598:	691b      	ldr	r3, [r3, #16]
 800f59a:	899b      	ldrh	r3, [r3, #12]
 800f59c:	b29b      	uxth	r3, r3
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f7fa f932 	bl	8009808 <lwip_htons>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	b2db      	uxtb	r3, r3
 800f5a8:	f003 0303 	and.w	r3, r3, #3
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d001      	beq.n	800f5b4 <tcp_receive+0xa8c>
 800f5b0:	2301      	movs	r3, #1
 800f5b2:	e000      	b.n	800f5b6 <tcp_receive+0xa8e>
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	442b      	add	r3, r5
 800f5b8:	429c      	cmp	r4, r3
 800f5ba:	d206      	bcs.n	800f5ca <tcp_receive+0xaa2>
 800f5bc:	4b1e      	ldr	r3, [pc, #120]	@ (800f638 <tcp_receive+0xb10>)
 800f5be:	f240 622b 	movw	r2, #1579	@ 0x62b
 800f5c2:	4923      	ldr	r1, [pc, #140]	@ (800f650 <tcp_receive+0xb28>)
 800f5c4:	481e      	ldr	r0, [pc, #120]	@ (800f640 <tcp_receive+0xb18>)
 800f5c6:	f005 ff0f 	bl	80153e8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	891b      	ldrh	r3, [r3, #8]
 800f5ce:	461c      	mov	r4, r3
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	691b      	ldr	r3, [r3, #16]
 800f5d4:	899b      	ldrh	r3, [r3, #12]
 800f5d6:	b29b      	uxth	r3, r3
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f7fa f915 	bl	8009808 <lwip_htons>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	b2db      	uxtb	r3, r3
 800f5e2:	f003 0303 	and.w	r3, r3, #3
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d001      	beq.n	800f5ee <tcp_receive+0xac6>
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	e000      	b.n	800f5f0 <tcp_receive+0xac8>
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	1919      	adds	r1, r3, r4
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f5f6:	b28b      	uxth	r3, r1
 800f5f8:	1ad3      	subs	r3, r2, r3
 800f5fa:	b29a      	uxth	r2, r3
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f600:	6878      	ldr	r0, [r7, #4]
 800f602:	f7fc fcb1 	bl	800bf68 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f606:	68bb      	ldr	r3, [r7, #8]
 800f608:	685b      	ldr	r3, [r3, #4]
 800f60a:	891b      	ldrh	r3, [r3, #8]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d028      	beq.n	800f662 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f610:	4b0d      	ldr	r3, [pc, #52]	@ (800f648 <tcp_receive+0xb20>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d01d      	beq.n	800f654 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800f618:	4b0b      	ldr	r3, [pc, #44]	@ (800f648 <tcp_receive+0xb20>)
 800f61a:	681a      	ldr	r2, [r3, #0]
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	685b      	ldr	r3, [r3, #4]
 800f620:	4619      	mov	r1, r3
 800f622:	4610      	mov	r0, r2
 800f624:	f7fb fe3c 	bl	800b2a0 <pbuf_cat>
 800f628:	e018      	b.n	800f65c <tcp_receive+0xb34>
 800f62a:	bf00      	nop
 800f62c:	2400331a 	.word	0x2400331a
 800f630:	24003310 	.word	0x24003310
 800f634:	240032ec 	.word	0x240032ec
 800f638:	080181e0 	.word	0x080181e0
 800f63c:	08018748 	.word	0x08018748
 800f640:	0801822c 	.word	0x0801822c
 800f644:	08018784 	.word	0x08018784
 800f648:	24003320 	.word	0x24003320
 800f64c:	2400331d 	.word	0x2400331d
 800f650:	080187a4 	.word	0x080187a4
            } else {
              recv_data = cseg->p;
 800f654:	68bb      	ldr	r3, [r7, #8]
 800f656:	685b      	ldr	r3, [r3, #4]
 800f658:	4a70      	ldr	r2, [pc, #448]	@ (800f81c <tcp_receive+0xcf4>)
 800f65a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f65c:	68bb      	ldr	r3, [r7, #8]
 800f65e:	2200      	movs	r2, #0
 800f660:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	691b      	ldr	r3, [r3, #16]
 800f666:	899b      	ldrh	r3, [r3, #12]
 800f668:	b29b      	uxth	r3, r3
 800f66a:	4618      	mov	r0, r3
 800f66c:	f7fa f8cc 	bl	8009808 <lwip_htons>
 800f670:	4603      	mov	r3, r0
 800f672:	b2db      	uxtb	r3, r3
 800f674:	f003 0301 	and.w	r3, r3, #1
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d00d      	beq.n	800f698 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f67c:	4b68      	ldr	r3, [pc, #416]	@ (800f820 <tcp_receive+0xcf8>)
 800f67e:	781b      	ldrb	r3, [r3, #0]
 800f680:	f043 0320 	orr.w	r3, r3, #32
 800f684:	b2da      	uxtb	r2, r3
 800f686:	4b66      	ldr	r3, [pc, #408]	@ (800f820 <tcp_receive+0xcf8>)
 800f688:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	7d1b      	ldrb	r3, [r3, #20]
 800f68e:	2b04      	cmp	r3, #4
 800f690:	d102      	bne.n	800f698 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	2207      	movs	r2, #7
 800f696:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	681a      	ldr	r2, [r3, #0]
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800f6a0:	68b8      	ldr	r0, [r7, #8]
 800f6a2:	f7fd f9f2 	bl	800ca8a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d008      	beq.n	800f6c0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f6b2:	691b      	ldr	r3, [r3, #16]
 800f6b4:	685a      	ldr	r2, [r3, #4]
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	f43f af43 	beq.w	800f546 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	8b5b      	ldrh	r3, [r3, #26]
 800f6c4:	f003 0301 	and.w	r3, r3, #1
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d00e      	beq.n	800f6ea <tcp_receive+0xbc2>
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	8b5b      	ldrh	r3, [r3, #26]
 800f6d0:	f023 0301 	bic.w	r3, r3, #1
 800f6d4:	b29a      	uxth	r2, r3
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	835a      	strh	r2, [r3, #26]
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	8b5b      	ldrh	r3, [r3, #26]
 800f6de:	f043 0302 	orr.w	r3, r3, #2
 800f6e2:	b29a      	uxth	r2, r3
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f6e8:	e187      	b.n	800f9fa <tcp_receive+0xed2>
        tcp_ack(pcb);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	8b5b      	ldrh	r3, [r3, #26]
 800f6ee:	f043 0301 	orr.w	r3, r3, #1
 800f6f2:	b29a      	uxth	r2, r3
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f6f8:	e17f      	b.n	800f9fa <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d106      	bne.n	800f710 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f702:	4848      	ldr	r0, [pc, #288]	@ (800f824 <tcp_receive+0xcfc>)
 800f704:	f7fd f9dc 	bl	800cac0 <tcp_seg_copy>
 800f708:	4602      	mov	r2, r0
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	675a      	str	r2, [r3, #116]	@ 0x74
 800f70e:	e16c      	b.n	800f9ea <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f710:	2300      	movs	r3, #0
 800f712:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f718:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f71a:	e156      	b.n	800f9ca <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800f71c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f71e:	691b      	ldr	r3, [r3, #16]
 800f720:	685a      	ldr	r2, [r3, #4]
 800f722:	4b41      	ldr	r3, [pc, #260]	@ (800f828 <tcp_receive+0xd00>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	429a      	cmp	r2, r3
 800f728:	d11d      	bne.n	800f766 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f72a:	4b3e      	ldr	r3, [pc, #248]	@ (800f824 <tcp_receive+0xcfc>)
 800f72c:	891a      	ldrh	r2, [r3, #8]
 800f72e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f730:	891b      	ldrh	r3, [r3, #8]
 800f732:	429a      	cmp	r2, r3
 800f734:	f240 814e 	bls.w	800f9d4 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f738:	483a      	ldr	r0, [pc, #232]	@ (800f824 <tcp_receive+0xcfc>)
 800f73a:	f7fd f9c1 	bl	800cac0 <tcp_seg_copy>
 800f73e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f740:	697b      	ldr	r3, [r7, #20]
 800f742:	2b00      	cmp	r3, #0
 800f744:	f000 8148 	beq.w	800f9d8 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800f748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d003      	beq.n	800f756 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800f74e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f750:	697a      	ldr	r2, [r7, #20]
 800f752:	601a      	str	r2, [r3, #0]
 800f754:	e002      	b.n	800f75c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	697a      	ldr	r2, [r7, #20]
 800f75a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f75c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f75e:	6978      	ldr	r0, [r7, #20]
 800f760:	f7ff f8de 	bl	800e920 <tcp_oos_insert_segment>
                }
                break;
 800f764:	e138      	b.n	800f9d8 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d117      	bne.n	800f79c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f76c:	4b2e      	ldr	r3, [pc, #184]	@ (800f828 <tcp_receive+0xd00>)
 800f76e:	681a      	ldr	r2, [r3, #0]
 800f770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f772:	691b      	ldr	r3, [r3, #16]
 800f774:	685b      	ldr	r3, [r3, #4]
 800f776:	1ad3      	subs	r3, r2, r3
 800f778:	2b00      	cmp	r3, #0
 800f77a:	da57      	bge.n	800f82c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f77c:	4829      	ldr	r0, [pc, #164]	@ (800f824 <tcp_receive+0xcfc>)
 800f77e:	f7fd f99f 	bl	800cac0 <tcp_seg_copy>
 800f782:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f784:	69bb      	ldr	r3, [r7, #24]
 800f786:	2b00      	cmp	r3, #0
 800f788:	f000 8128 	beq.w	800f9dc <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	69ba      	ldr	r2, [r7, #24]
 800f790:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f792:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f794:	69b8      	ldr	r0, [r7, #24]
 800f796:	f7ff f8c3 	bl	800e920 <tcp_oos_insert_segment>
                  }
                  break;
 800f79a:	e11f      	b.n	800f9dc <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f79c:	4b22      	ldr	r3, [pc, #136]	@ (800f828 <tcp_receive+0xd00>)
 800f79e:	681a      	ldr	r2, [r3, #0]
 800f7a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7a2:	691b      	ldr	r3, [r3, #16]
 800f7a4:	685b      	ldr	r3, [r3, #4]
 800f7a6:	1ad3      	subs	r3, r2, r3
 800f7a8:	3b01      	subs	r3, #1
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	db3e      	blt.n	800f82c <tcp_receive+0xd04>
 800f7ae:	4b1e      	ldr	r3, [pc, #120]	@ (800f828 <tcp_receive+0xd00>)
 800f7b0:	681a      	ldr	r2, [r3, #0]
 800f7b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7b4:	691b      	ldr	r3, [r3, #16]
 800f7b6:	685b      	ldr	r3, [r3, #4]
 800f7b8:	1ad3      	subs	r3, r2, r3
 800f7ba:	3301      	adds	r3, #1
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	dc35      	bgt.n	800f82c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f7c0:	4818      	ldr	r0, [pc, #96]	@ (800f824 <tcp_receive+0xcfc>)
 800f7c2:	f7fd f97d 	bl	800cac0 <tcp_seg_copy>
 800f7c6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f7c8:	69fb      	ldr	r3, [r7, #28]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	f000 8108 	beq.w	800f9e0 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f7d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7d2:	691b      	ldr	r3, [r3, #16]
 800f7d4:	685b      	ldr	r3, [r3, #4]
 800f7d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f7d8:	8912      	ldrh	r2, [r2, #8]
 800f7da:	441a      	add	r2, r3
 800f7dc:	4b12      	ldr	r3, [pc, #72]	@ (800f828 <tcp_receive+0xd00>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	1ad3      	subs	r3, r2, r3
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	dd12      	ble.n	800f80c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f7e6:	4b10      	ldr	r3, [pc, #64]	@ (800f828 <tcp_receive+0xd00>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	b29a      	uxth	r2, r3
 800f7ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7ee:	691b      	ldr	r3, [r3, #16]
 800f7f0:	685b      	ldr	r3, [r3, #4]
 800f7f2:	b29b      	uxth	r3, r3
 800f7f4:	1ad3      	subs	r3, r2, r3
 800f7f6:	b29a      	uxth	r2, r3
 800f7f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7fa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f7fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7fe:	685a      	ldr	r2, [r3, #4]
 800f800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f802:	891b      	ldrh	r3, [r3, #8]
 800f804:	4619      	mov	r1, r3
 800f806:	4610      	mov	r0, r2
 800f808:	f7fb fad0 	bl	800adac <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f80c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f80e:	69fa      	ldr	r2, [r7, #28]
 800f810:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f812:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f814:	69f8      	ldr	r0, [r7, #28]
 800f816:	f7ff f883 	bl	800e920 <tcp_oos_insert_segment>
                  }
                  break;
 800f81a:	e0e1      	b.n	800f9e0 <tcp_receive+0xeb8>
 800f81c:	24003320 	.word	0x24003320
 800f820:	2400331d 	.word	0x2400331d
 800f824:	240032ec 	.word	0x240032ec
 800f828:	24003310 	.word	0x24003310
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f82e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	2b00      	cmp	r3, #0
 800f836:	f040 80c5 	bne.w	800f9c4 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f83a:	4b7f      	ldr	r3, [pc, #508]	@ (800fa38 <tcp_receive+0xf10>)
 800f83c:	681a      	ldr	r2, [r3, #0]
 800f83e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f840:	691b      	ldr	r3, [r3, #16]
 800f842:	685b      	ldr	r3, [r3, #4]
 800f844:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f846:	2b00      	cmp	r3, #0
 800f848:	f340 80bc 	ble.w	800f9c4 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f84c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f84e:	691b      	ldr	r3, [r3, #16]
 800f850:	899b      	ldrh	r3, [r3, #12]
 800f852:	b29b      	uxth	r3, r3
 800f854:	4618      	mov	r0, r3
 800f856:	f7f9 ffd7 	bl	8009808 <lwip_htons>
 800f85a:	4603      	mov	r3, r0
 800f85c:	b2db      	uxtb	r3, r3
 800f85e:	f003 0301 	and.w	r3, r3, #1
 800f862:	2b00      	cmp	r3, #0
 800f864:	f040 80be 	bne.w	800f9e4 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f868:	4874      	ldr	r0, [pc, #464]	@ (800fa3c <tcp_receive+0xf14>)
 800f86a:	f7fd f929 	bl	800cac0 <tcp_seg_copy>
 800f86e:	4602      	mov	r2, r0
 800f870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f872:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	f000 80b5 	beq.w	800f9e8 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f87e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f880:	691b      	ldr	r3, [r3, #16]
 800f882:	685b      	ldr	r3, [r3, #4]
 800f884:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f886:	8912      	ldrh	r2, [r2, #8]
 800f888:	441a      	add	r2, r3
 800f88a:	4b6b      	ldr	r3, [pc, #428]	@ (800fa38 <tcp_receive+0xf10>)
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	1ad3      	subs	r3, r2, r3
 800f890:	2b00      	cmp	r3, #0
 800f892:	dd12      	ble.n	800f8ba <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f894:	4b68      	ldr	r3, [pc, #416]	@ (800fa38 <tcp_receive+0xf10>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	b29a      	uxth	r2, r3
 800f89a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f89c:	691b      	ldr	r3, [r3, #16]
 800f89e:	685b      	ldr	r3, [r3, #4]
 800f8a0:	b29b      	uxth	r3, r3
 800f8a2:	1ad3      	subs	r3, r2, r3
 800f8a4:	b29a      	uxth	r2, r3
 800f8a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8a8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f8aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8ac:	685a      	ldr	r2, [r3, #4]
 800f8ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8b0:	891b      	ldrh	r3, [r3, #8]
 800f8b2:	4619      	mov	r1, r3
 800f8b4:	4610      	mov	r0, r2
 800f8b6:	f7fb fa79 	bl	800adac <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f8ba:	4b61      	ldr	r3, [pc, #388]	@ (800fa40 <tcp_receive+0xf18>)
 800f8bc:	881b      	ldrh	r3, [r3, #0]
 800f8be:	461a      	mov	r2, r3
 800f8c0:	4b5d      	ldr	r3, [pc, #372]	@ (800fa38 <tcp_receive+0xf10>)
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	441a      	add	r2, r3
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8ca:	6879      	ldr	r1, [r7, #4]
 800f8cc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f8ce:	440b      	add	r3, r1
 800f8d0:	1ad3      	subs	r3, r2, r3
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	f340 8088 	ble.w	800f9e8 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f8d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	691b      	ldr	r3, [r3, #16]
 800f8de:	899b      	ldrh	r3, [r3, #12]
 800f8e0:	b29b      	uxth	r3, r3
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f7f9 ff90 	bl	8009808 <lwip_htons>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	b2db      	uxtb	r3, r3
 800f8ec:	f003 0301 	and.w	r3, r3, #1
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d021      	beq.n	800f938 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f8f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	691b      	ldr	r3, [r3, #16]
 800f8fa:	899b      	ldrh	r3, [r3, #12]
 800f8fc:	b29b      	uxth	r3, r3
 800f8fe:	b21b      	sxth	r3, r3
 800f900:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f904:	b21c      	sxth	r4, r3
 800f906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	691b      	ldr	r3, [r3, #16]
 800f90c:	899b      	ldrh	r3, [r3, #12]
 800f90e:	b29b      	uxth	r3, r3
 800f910:	4618      	mov	r0, r3
 800f912:	f7f9 ff79 	bl	8009808 <lwip_htons>
 800f916:	4603      	mov	r3, r0
 800f918:	b2db      	uxtb	r3, r3
 800f91a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800f91e:	b29b      	uxth	r3, r3
 800f920:	4618      	mov	r0, r3
 800f922:	f7f9 ff71 	bl	8009808 <lwip_htons>
 800f926:	4603      	mov	r3, r0
 800f928:	b21b      	sxth	r3, r3
 800f92a:	4323      	orrs	r3, r4
 800f92c:	b21a      	sxth	r2, r3
 800f92e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	691b      	ldr	r3, [r3, #16]
 800f934:	b292      	uxth	r2, r2
 800f936:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f93c:	b29a      	uxth	r2, r3
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f942:	4413      	add	r3, r2
 800f944:	b299      	uxth	r1, r3
 800f946:	4b3c      	ldr	r3, [pc, #240]	@ (800fa38 <tcp_receive+0xf10>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	b29a      	uxth	r2, r3
 800f94c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	1a8a      	subs	r2, r1, r2
 800f952:	b292      	uxth	r2, r2
 800f954:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	685a      	ldr	r2, [r3, #4]
 800f95c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	891b      	ldrh	r3, [r3, #8]
 800f962:	4619      	mov	r1, r3
 800f964:	4610      	mov	r0, r2
 800f966:	f7fb fa21 	bl	800adac <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f96a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	891c      	ldrh	r4, [r3, #8]
 800f970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	691b      	ldr	r3, [r3, #16]
 800f976:	899b      	ldrh	r3, [r3, #12]
 800f978:	b29b      	uxth	r3, r3
 800f97a:	4618      	mov	r0, r3
 800f97c:	f7f9 ff44 	bl	8009808 <lwip_htons>
 800f980:	4603      	mov	r3, r0
 800f982:	b2db      	uxtb	r3, r3
 800f984:	f003 0303 	and.w	r3, r3, #3
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d001      	beq.n	800f990 <tcp_receive+0xe68>
 800f98c:	2301      	movs	r3, #1
 800f98e:	e000      	b.n	800f992 <tcp_receive+0xe6a>
 800f990:	2300      	movs	r3, #0
 800f992:	4423      	add	r3, r4
 800f994:	b29a      	uxth	r2, r3
 800f996:	4b2a      	ldr	r3, [pc, #168]	@ (800fa40 <tcp_receive+0xf18>)
 800f998:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f99a:	4b29      	ldr	r3, [pc, #164]	@ (800fa40 <tcp_receive+0xf18>)
 800f99c:	881b      	ldrh	r3, [r3, #0]
 800f99e:	461a      	mov	r2, r3
 800f9a0:	4b25      	ldr	r3, [pc, #148]	@ (800fa38 <tcp_receive+0xf10>)
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	441a      	add	r2, r3
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9aa:	6879      	ldr	r1, [r7, #4]
 800f9ac:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f9ae:	440b      	add	r3, r1
 800f9b0:	429a      	cmp	r2, r3
 800f9b2:	d019      	beq.n	800f9e8 <tcp_receive+0xec0>
 800f9b4:	4b23      	ldr	r3, [pc, #140]	@ (800fa44 <tcp_receive+0xf1c>)
 800f9b6:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800f9ba:	4923      	ldr	r1, [pc, #140]	@ (800fa48 <tcp_receive+0xf20>)
 800f9bc:	4823      	ldr	r0, [pc, #140]	@ (800fa4c <tcp_receive+0xf24>)
 800f9be:	f005 fd13 	bl	80153e8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f9c2:	e011      	b.n	800f9e8 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f9c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f9ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	f47f aea5 	bne.w	800f71c <tcp_receive+0xbf4>
 800f9d2:	e00a      	b.n	800f9ea <tcp_receive+0xec2>
                break;
 800f9d4:	bf00      	nop
 800f9d6:	e008      	b.n	800f9ea <tcp_receive+0xec2>
                break;
 800f9d8:	bf00      	nop
 800f9da:	e006      	b.n	800f9ea <tcp_receive+0xec2>
                  break;
 800f9dc:	bf00      	nop
 800f9de:	e004      	b.n	800f9ea <tcp_receive+0xec2>
                  break;
 800f9e0:	bf00      	nop
 800f9e2:	e002      	b.n	800f9ea <tcp_receive+0xec2>
                  break;
 800f9e4:	bf00      	nop
 800f9e6:	e000      	b.n	800f9ea <tcp_receive+0xec2>
                break;
 800f9e8:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800f9ea:	6878      	ldr	r0, [r7, #4]
 800f9ec:	f001 fefa 	bl	80117e4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800f9f0:	e003      	b.n	800f9fa <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f001 fef6 	bl	80117e4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f9f8:	e01a      	b.n	800fa30 <tcp_receive+0xf08>
 800f9fa:	e019      	b.n	800fa30 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f9fc:	4b0e      	ldr	r3, [pc, #56]	@ (800fa38 <tcp_receive+0xf10>)
 800f9fe:	681a      	ldr	r2, [r3, #0]
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa04:	1ad3      	subs	r3, r2, r3
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	db0a      	blt.n	800fa20 <tcp_receive+0xef8>
 800fa0a:	4b0b      	ldr	r3, [pc, #44]	@ (800fa38 <tcp_receive+0xf10>)
 800fa0c:	681a      	ldr	r2, [r3, #0]
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa12:	6879      	ldr	r1, [r7, #4]
 800fa14:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fa16:	440b      	add	r3, r1
 800fa18:	1ad3      	subs	r3, r2, r3
 800fa1a:	3301      	adds	r3, #1
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	dd07      	ble.n	800fa30 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	8b5b      	ldrh	r3, [r3, #26]
 800fa24:	f043 0302 	orr.w	r3, r3, #2
 800fa28:	b29a      	uxth	r2, r3
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800fa2e:	e7ff      	b.n	800fa30 <tcp_receive+0xf08>
 800fa30:	bf00      	nop
 800fa32:	3750      	adds	r7, #80	@ 0x50
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bdb0      	pop	{r4, r5, r7, pc}
 800fa38:	24003310 	.word	0x24003310
 800fa3c:	240032ec 	.word	0x240032ec
 800fa40:	2400331a 	.word	0x2400331a
 800fa44:	080181e0 	.word	0x080181e0
 800fa48:	08018710 	.word	0x08018710
 800fa4c:	0801822c 	.word	0x0801822c

0800fa50 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800fa50:	b480      	push	{r7}
 800fa52:	b083      	sub	sp, #12
 800fa54:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800fa56:	4b15      	ldr	r3, [pc, #84]	@ (800faac <tcp_get_next_optbyte+0x5c>)
 800fa58:	881b      	ldrh	r3, [r3, #0]
 800fa5a:	1c5a      	adds	r2, r3, #1
 800fa5c:	b291      	uxth	r1, r2
 800fa5e:	4a13      	ldr	r2, [pc, #76]	@ (800faac <tcp_get_next_optbyte+0x5c>)
 800fa60:	8011      	strh	r1, [r2, #0]
 800fa62:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fa64:	4b12      	ldr	r3, [pc, #72]	@ (800fab0 <tcp_get_next_optbyte+0x60>)
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d004      	beq.n	800fa76 <tcp_get_next_optbyte+0x26>
 800fa6c:	4b11      	ldr	r3, [pc, #68]	@ (800fab4 <tcp_get_next_optbyte+0x64>)
 800fa6e:	881b      	ldrh	r3, [r3, #0]
 800fa70:	88fa      	ldrh	r2, [r7, #6]
 800fa72:	429a      	cmp	r2, r3
 800fa74:	d208      	bcs.n	800fa88 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800fa76:	4b10      	ldr	r3, [pc, #64]	@ (800fab8 <tcp_get_next_optbyte+0x68>)
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	3314      	adds	r3, #20
 800fa7c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800fa7e:	88fb      	ldrh	r3, [r7, #6]
 800fa80:	683a      	ldr	r2, [r7, #0]
 800fa82:	4413      	add	r3, r2
 800fa84:	781b      	ldrb	r3, [r3, #0]
 800fa86:	e00b      	b.n	800faa0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fa88:	88fb      	ldrh	r3, [r7, #6]
 800fa8a:	b2da      	uxtb	r2, r3
 800fa8c:	4b09      	ldr	r3, [pc, #36]	@ (800fab4 <tcp_get_next_optbyte+0x64>)
 800fa8e:	881b      	ldrh	r3, [r3, #0]
 800fa90:	b2db      	uxtb	r3, r3
 800fa92:	1ad3      	subs	r3, r2, r3
 800fa94:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800fa96:	4b06      	ldr	r3, [pc, #24]	@ (800fab0 <tcp_get_next_optbyte+0x60>)
 800fa98:	681a      	ldr	r2, [r3, #0]
 800fa9a:	797b      	ldrb	r3, [r7, #5]
 800fa9c:	4413      	add	r3, r2
 800fa9e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800faa0:	4618      	mov	r0, r3
 800faa2:	370c      	adds	r7, #12
 800faa4:	46bd      	mov	sp, r7
 800faa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faaa:	4770      	bx	lr
 800faac:	2400330c 	.word	0x2400330c
 800fab0:	24003308 	.word	0x24003308
 800fab4:	24003306 	.word	0x24003306
 800fab8:	24003300 	.word	0x24003300

0800fabc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b084      	sub	sp, #16
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d106      	bne.n	800fad8 <tcp_parseopt+0x1c>
 800faca:	4b32      	ldr	r3, [pc, #200]	@ (800fb94 <tcp_parseopt+0xd8>)
 800facc:	f240 727d 	movw	r2, #1917	@ 0x77d
 800fad0:	4931      	ldr	r1, [pc, #196]	@ (800fb98 <tcp_parseopt+0xdc>)
 800fad2:	4832      	ldr	r0, [pc, #200]	@ (800fb9c <tcp_parseopt+0xe0>)
 800fad4:	f005 fc88 	bl	80153e8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fad8:	4b31      	ldr	r3, [pc, #196]	@ (800fba0 <tcp_parseopt+0xe4>)
 800fada:	881b      	ldrh	r3, [r3, #0]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d056      	beq.n	800fb8e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fae0:	4b30      	ldr	r3, [pc, #192]	@ (800fba4 <tcp_parseopt+0xe8>)
 800fae2:	2200      	movs	r2, #0
 800fae4:	801a      	strh	r2, [r3, #0]
 800fae6:	e046      	b.n	800fb76 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800fae8:	f7ff ffb2 	bl	800fa50 <tcp_get_next_optbyte>
 800faec:	4603      	mov	r3, r0
 800faee:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800faf0:	7bfb      	ldrb	r3, [r7, #15]
 800faf2:	2b02      	cmp	r3, #2
 800faf4:	d006      	beq.n	800fb04 <tcp_parseopt+0x48>
 800faf6:	2b02      	cmp	r3, #2
 800faf8:	dc2a      	bgt.n	800fb50 <tcp_parseopt+0x94>
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d042      	beq.n	800fb84 <tcp_parseopt+0xc8>
 800fafe:	2b01      	cmp	r3, #1
 800fb00:	d038      	beq.n	800fb74 <tcp_parseopt+0xb8>
 800fb02:	e025      	b.n	800fb50 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fb04:	f7ff ffa4 	bl	800fa50 <tcp_get_next_optbyte>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	2b04      	cmp	r3, #4
 800fb0c:	d13c      	bne.n	800fb88 <tcp_parseopt+0xcc>
 800fb0e:	4b25      	ldr	r3, [pc, #148]	@ (800fba4 <tcp_parseopt+0xe8>)
 800fb10:	881b      	ldrh	r3, [r3, #0]
 800fb12:	3301      	adds	r3, #1
 800fb14:	4a22      	ldr	r2, [pc, #136]	@ (800fba0 <tcp_parseopt+0xe4>)
 800fb16:	8812      	ldrh	r2, [r2, #0]
 800fb18:	4293      	cmp	r3, r2
 800fb1a:	da35      	bge.n	800fb88 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fb1c:	f7ff ff98 	bl	800fa50 <tcp_get_next_optbyte>
 800fb20:	4603      	mov	r3, r0
 800fb22:	021b      	lsls	r3, r3, #8
 800fb24:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800fb26:	f7ff ff93 	bl	800fa50 <tcp_get_next_optbyte>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	461a      	mov	r2, r3
 800fb2e:	89bb      	ldrh	r3, [r7, #12]
 800fb30:	4313      	orrs	r3, r2
 800fb32:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800fb34:	89bb      	ldrh	r3, [r7, #12]
 800fb36:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800fb3a:	d804      	bhi.n	800fb46 <tcp_parseopt+0x8a>
 800fb3c:	89bb      	ldrh	r3, [r7, #12]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d001      	beq.n	800fb46 <tcp_parseopt+0x8a>
 800fb42:	89ba      	ldrh	r2, [r7, #12]
 800fb44:	e001      	b.n	800fb4a <tcp_parseopt+0x8e>
 800fb46:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800fb4e:	e012      	b.n	800fb76 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800fb50:	f7ff ff7e 	bl	800fa50 <tcp_get_next_optbyte>
 800fb54:	4603      	mov	r3, r0
 800fb56:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800fb58:	7afb      	ldrb	r3, [r7, #11]
 800fb5a:	2b01      	cmp	r3, #1
 800fb5c:	d916      	bls.n	800fb8c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800fb5e:	7afb      	ldrb	r3, [r7, #11]
 800fb60:	b29a      	uxth	r2, r3
 800fb62:	4b10      	ldr	r3, [pc, #64]	@ (800fba4 <tcp_parseopt+0xe8>)
 800fb64:	881b      	ldrh	r3, [r3, #0]
 800fb66:	4413      	add	r3, r2
 800fb68:	b29b      	uxth	r3, r3
 800fb6a:	3b02      	subs	r3, #2
 800fb6c:	b29a      	uxth	r2, r3
 800fb6e:	4b0d      	ldr	r3, [pc, #52]	@ (800fba4 <tcp_parseopt+0xe8>)
 800fb70:	801a      	strh	r2, [r3, #0]
 800fb72:	e000      	b.n	800fb76 <tcp_parseopt+0xba>
          break;
 800fb74:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fb76:	4b0b      	ldr	r3, [pc, #44]	@ (800fba4 <tcp_parseopt+0xe8>)
 800fb78:	881a      	ldrh	r2, [r3, #0]
 800fb7a:	4b09      	ldr	r3, [pc, #36]	@ (800fba0 <tcp_parseopt+0xe4>)
 800fb7c:	881b      	ldrh	r3, [r3, #0]
 800fb7e:	429a      	cmp	r2, r3
 800fb80:	d3b2      	bcc.n	800fae8 <tcp_parseopt+0x2c>
 800fb82:	e004      	b.n	800fb8e <tcp_parseopt+0xd2>
          return;
 800fb84:	bf00      	nop
 800fb86:	e002      	b.n	800fb8e <tcp_parseopt+0xd2>
            return;
 800fb88:	bf00      	nop
 800fb8a:	e000      	b.n	800fb8e <tcp_parseopt+0xd2>
            return;
 800fb8c:	bf00      	nop
      }
    }
  }
}
 800fb8e:	3710      	adds	r7, #16
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}
 800fb94:	080181e0 	.word	0x080181e0
 800fb98:	080187cc 	.word	0x080187cc
 800fb9c:	0801822c 	.word	0x0801822c
 800fba0:	24003304 	.word	0x24003304
 800fba4:	2400330c 	.word	0x2400330c

0800fba8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800fba8:	b480      	push	{r7}
 800fbaa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800fbac:	4b05      	ldr	r3, [pc, #20]	@ (800fbc4 <tcp_trigger_input_pcb_close+0x1c>)
 800fbae:	781b      	ldrb	r3, [r3, #0]
 800fbb0:	f043 0310 	orr.w	r3, r3, #16
 800fbb4:	b2da      	uxtb	r2, r3
 800fbb6:	4b03      	ldr	r3, [pc, #12]	@ (800fbc4 <tcp_trigger_input_pcb_close+0x1c>)
 800fbb8:	701a      	strb	r2, [r3, #0]
}
 800fbba:	bf00      	nop
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc2:	4770      	bx	lr
 800fbc4:	2400331d 	.word	0x2400331d

0800fbc8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b084      	sub	sp, #16
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	60f8      	str	r0, [r7, #12]
 800fbd0:	60b9      	str	r1, [r7, #8]
 800fbd2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d00a      	beq.n	800fbf0 <tcp_route+0x28>
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	7a1b      	ldrb	r3, [r3, #8]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d006      	beq.n	800fbf0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	7a1b      	ldrb	r3, [r3, #8]
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f7fa fed4 	bl	800a994 <netif_get_by_index>
 800fbec:	4603      	mov	r3, r0
 800fbee:	e003      	b.n	800fbf8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	f003 fee9 	bl	80139c8 <ip4_route>
 800fbf6:	4603      	mov	r3, r0
  }
}
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	3710      	adds	r7, #16
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}

0800fc00 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800fc00:	b590      	push	{r4, r7, lr}
 800fc02:	b087      	sub	sp, #28
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	60f8      	str	r0, [r7, #12]
 800fc08:	60b9      	str	r1, [r7, #8]
 800fc0a:	603b      	str	r3, [r7, #0]
 800fc0c:	4613      	mov	r3, r2
 800fc0e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d105      	bne.n	800fc22 <tcp_create_segment+0x22>
 800fc16:	4b45      	ldr	r3, [pc, #276]	@ (800fd2c <tcp_create_segment+0x12c>)
 800fc18:	22a3      	movs	r2, #163	@ 0xa3
 800fc1a:	4945      	ldr	r1, [pc, #276]	@ (800fd30 <tcp_create_segment+0x130>)
 800fc1c:	4845      	ldr	r0, [pc, #276]	@ (800fd34 <tcp_create_segment+0x134>)
 800fc1e:	f005 fbe3 	bl	80153e8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800fc22:	68bb      	ldr	r3, [r7, #8]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d105      	bne.n	800fc34 <tcp_create_segment+0x34>
 800fc28:	4b40      	ldr	r3, [pc, #256]	@ (800fd2c <tcp_create_segment+0x12c>)
 800fc2a:	22a4      	movs	r2, #164	@ 0xa4
 800fc2c:	4942      	ldr	r1, [pc, #264]	@ (800fd38 <tcp_create_segment+0x138>)
 800fc2e:	4841      	ldr	r0, [pc, #260]	@ (800fd34 <tcp_create_segment+0x134>)
 800fc30:	f005 fbda 	bl	80153e8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fc34:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fc38:	009b      	lsls	r3, r3, #2
 800fc3a:	b2db      	uxtb	r3, r3
 800fc3c:	f003 0304 	and.w	r3, r3, #4
 800fc40:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800fc42:	2003      	movs	r0, #3
 800fc44:	f7fa fb20 	bl	800a288 <memp_malloc>
 800fc48:	6138      	str	r0, [r7, #16]
 800fc4a:	693b      	ldr	r3, [r7, #16]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d104      	bne.n	800fc5a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800fc50:	68b8      	ldr	r0, [r7, #8]
 800fc52:	f7fb fa4b 	bl	800b0ec <pbuf_free>
    return NULL;
 800fc56:	2300      	movs	r3, #0
 800fc58:	e063      	b.n	800fd22 <tcp_create_segment+0x122>
  }
  seg->flags = optflags;
 800fc5a:	693b      	ldr	r3, [r7, #16]
 800fc5c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800fc60:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 800fc62:	693b      	ldr	r3, [r7, #16]
 800fc64:	2200      	movs	r2, #0
 800fc66:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800fc68:	693b      	ldr	r3, [r7, #16]
 800fc6a:	68ba      	ldr	r2, [r7, #8]
 800fc6c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800fc6e:	68bb      	ldr	r3, [r7, #8]
 800fc70:	891a      	ldrh	r2, [r3, #8]
 800fc72:	7dfb      	ldrb	r3, [r7, #23]
 800fc74:	b29b      	uxth	r3, r3
 800fc76:	429a      	cmp	r2, r3
 800fc78:	d205      	bcs.n	800fc86 <tcp_create_segment+0x86>
 800fc7a:	4b2c      	ldr	r3, [pc, #176]	@ (800fd2c <tcp_create_segment+0x12c>)
 800fc7c:	22b0      	movs	r2, #176	@ 0xb0
 800fc7e:	492f      	ldr	r1, [pc, #188]	@ (800fd3c <tcp_create_segment+0x13c>)
 800fc80:	482c      	ldr	r0, [pc, #176]	@ (800fd34 <tcp_create_segment+0x134>)
 800fc82:	f005 fbb1 	bl	80153e8 <iprintf>
  seg->len = p->tot_len - optlen;
 800fc86:	68bb      	ldr	r3, [r7, #8]
 800fc88:	891a      	ldrh	r2, [r3, #8]
 800fc8a:	7dfb      	ldrb	r3, [r7, #23]
 800fc8c:	b29b      	uxth	r3, r3
 800fc8e:	1ad3      	subs	r3, r2, r3
 800fc90:	b29a      	uxth	r2, r3
 800fc92:	693b      	ldr	r3, [r7, #16]
 800fc94:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 800fc96:	693b      	ldr	r3, [r7, #16]
 800fc98:	2200      	movs	r2, #0
 800fc9a:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800fc9c:	2114      	movs	r1, #20
 800fc9e:	68b8      	ldr	r0, [r7, #8]
 800fca0:	f7fb f986 	bl	800afb0 <pbuf_add_header>
 800fca4:	4603      	mov	r3, r0
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d004      	beq.n	800fcb4 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800fcaa:	6938      	ldr	r0, [r7, #16]
 800fcac:	f7fc feed 	bl	800ca8a <tcp_seg_free>
    return NULL;
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	e036      	b.n	800fd22 <tcp_create_segment+0x122>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800fcb4:	693b      	ldr	r3, [r7, #16]
 800fcb6:	685b      	ldr	r3, [r3, #4]
 800fcb8:	685a      	ldr	r2, [r3, #4]
 800fcba:	693b      	ldr	r3, [r7, #16]
 800fcbc:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	8ada      	ldrh	r2, [r3, #22]
 800fcc2:	693b      	ldr	r3, [r7, #16]
 800fcc4:	691c      	ldr	r4, [r3, #16]
 800fcc6:	4610      	mov	r0, r2
 800fcc8:	f7f9 fd9e 	bl	8009808 <lwip_htons>
 800fccc:	4603      	mov	r3, r0
 800fcce:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	8b1a      	ldrh	r2, [r3, #24]
 800fcd4:	693b      	ldr	r3, [r7, #16]
 800fcd6:	691c      	ldr	r4, [r3, #16]
 800fcd8:	4610      	mov	r0, r2
 800fcda:	f7f9 fd95 	bl	8009808 <lwip_htons>
 800fcde:	4603      	mov	r3, r0
 800fce0:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800fce2:	693b      	ldr	r3, [r7, #16]
 800fce4:	691c      	ldr	r4, [r3, #16]
 800fce6:	6838      	ldr	r0, [r7, #0]
 800fce8:	f7f9 fda3 	bl	8009832 <lwip_htonl>
 800fcec:	4603      	mov	r3, r0
 800fcee:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800fcf0:	7dfb      	ldrb	r3, [r7, #23]
 800fcf2:	089b      	lsrs	r3, r3, #2
 800fcf4:	b2db      	uxtb	r3, r3
 800fcf6:	3305      	adds	r3, #5
 800fcf8:	b29b      	uxth	r3, r3
 800fcfa:	031b      	lsls	r3, r3, #12
 800fcfc:	b29a      	uxth	r2, r3
 800fcfe:	79fb      	ldrb	r3, [r7, #7]
 800fd00:	b29b      	uxth	r3, r3
 800fd02:	4313      	orrs	r3, r2
 800fd04:	b29a      	uxth	r2, r3
 800fd06:	693b      	ldr	r3, [r7, #16]
 800fd08:	691c      	ldr	r4, [r3, #16]
 800fd0a:	4610      	mov	r0, r2
 800fd0c:	f7f9 fd7c 	bl	8009808 <lwip_htons>
 800fd10:	4603      	mov	r3, r0
 800fd12:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	691b      	ldr	r3, [r3, #16]
 800fd18:	2200      	movs	r2, #0
 800fd1a:	749a      	strb	r2, [r3, #18]
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	74da      	strb	r2, [r3, #19]
  return seg;
 800fd20:	693b      	ldr	r3, [r7, #16]
}
 800fd22:	4618      	mov	r0, r3
 800fd24:	371c      	adds	r7, #28
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd90      	pop	{r4, r7, pc}
 800fd2a:	bf00      	nop
 800fd2c:	080187e8 	.word	0x080187e8
 800fd30:	0801881c 	.word	0x0801881c
 800fd34:	0801883c 	.word	0x0801883c
 800fd38:	08018864 	.word	0x08018864
 800fd3c:	08018888 	.word	0x08018888

0800fd40 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b086      	sub	sp, #24
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	607b      	str	r3, [r7, #4]
 800fd48:	4603      	mov	r3, r0
 800fd4a:	73fb      	strb	r3, [r7, #15]
 800fd4c:	460b      	mov	r3, r1
 800fd4e:	81bb      	strh	r3, [r7, #12]
 800fd50:	4613      	mov	r3, r2
 800fd52:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800fd54:	89bb      	ldrh	r3, [r7, #12]
 800fd56:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d105      	bne.n	800fd6a <tcp_pbuf_prealloc+0x2a>
 800fd5e:	4b30      	ldr	r3, [pc, #192]	@ (800fe20 <tcp_pbuf_prealloc+0xe0>)
 800fd60:	22e8      	movs	r2, #232	@ 0xe8
 800fd62:	4930      	ldr	r1, [pc, #192]	@ (800fe24 <tcp_pbuf_prealloc+0xe4>)
 800fd64:	4830      	ldr	r0, [pc, #192]	@ (800fe28 <tcp_pbuf_prealloc+0xe8>)
 800fd66:	f005 fb3f 	bl	80153e8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800fd6a:	6a3b      	ldr	r3, [r7, #32]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d105      	bne.n	800fd7c <tcp_pbuf_prealloc+0x3c>
 800fd70:	4b2b      	ldr	r3, [pc, #172]	@ (800fe20 <tcp_pbuf_prealloc+0xe0>)
 800fd72:	22e9      	movs	r2, #233	@ 0xe9
 800fd74:	492d      	ldr	r1, [pc, #180]	@ (800fe2c <tcp_pbuf_prealloc+0xec>)
 800fd76:	482c      	ldr	r0, [pc, #176]	@ (800fe28 <tcp_pbuf_prealloc+0xe8>)
 800fd78:	f005 fb36 	bl	80153e8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800fd7c:	89ba      	ldrh	r2, [r7, #12]
 800fd7e:	897b      	ldrh	r3, [r7, #10]
 800fd80:	429a      	cmp	r2, r3
 800fd82:	d221      	bcs.n	800fdc8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800fd84:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fd88:	f003 0302 	and.w	r3, r3, #2
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d111      	bne.n	800fdb4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800fd90:	6a3b      	ldr	r3, [r7, #32]
 800fd92:	8b5b      	ldrh	r3, [r3, #26]
 800fd94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d115      	bne.n	800fdc8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800fd9c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d007      	beq.n	800fdb4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800fda4:	6a3b      	ldr	r3, [r7, #32]
 800fda6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d103      	bne.n	800fdb4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800fdac:	6a3b      	ldr	r3, [r7, #32]
 800fdae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d009      	beq.n	800fdc8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800fdb4:	89bb      	ldrh	r3, [r7, #12]
 800fdb6:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800fdba:	f023 0203 	bic.w	r2, r3, #3
 800fdbe:	897b      	ldrh	r3, [r7, #10]
 800fdc0:	4293      	cmp	r3, r2
 800fdc2:	bf28      	it	cs
 800fdc4:	4613      	movcs	r3, r2
 800fdc6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800fdc8:	8af9      	ldrh	r1, [r7, #22]
 800fdca:	7bfb      	ldrb	r3, [r7, #15]
 800fdcc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f7fa fe5f 	bl	800aa94 <pbuf_alloc>
 800fdd6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fdd8:	693b      	ldr	r3, [r7, #16]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d101      	bne.n	800fde2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800fdde:	2300      	movs	r3, #0
 800fde0:	e019      	b.n	800fe16 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800fde2:	693b      	ldr	r3, [r7, #16]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d006      	beq.n	800fdf8 <tcp_pbuf_prealloc+0xb8>
 800fdea:	4b0d      	ldr	r3, [pc, #52]	@ (800fe20 <tcp_pbuf_prealloc+0xe0>)
 800fdec:	f240 120b 	movw	r2, #267	@ 0x10b
 800fdf0:	490f      	ldr	r1, [pc, #60]	@ (800fe30 <tcp_pbuf_prealloc+0xf0>)
 800fdf2:	480d      	ldr	r0, [pc, #52]	@ (800fe28 <tcp_pbuf_prealloc+0xe8>)
 800fdf4:	f005 faf8 	bl	80153e8 <iprintf>
  *oversize = p->len - length;
 800fdf8:	693b      	ldr	r3, [r7, #16]
 800fdfa:	895a      	ldrh	r2, [r3, #10]
 800fdfc:	89bb      	ldrh	r3, [r7, #12]
 800fdfe:	1ad3      	subs	r3, r2, r3
 800fe00:	b29a      	uxth	r2, r3
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800fe06:	693b      	ldr	r3, [r7, #16]
 800fe08:	89ba      	ldrh	r2, [r7, #12]
 800fe0a:	811a      	strh	r2, [r3, #8]
 800fe0c:	693b      	ldr	r3, [r7, #16]
 800fe0e:	891a      	ldrh	r2, [r3, #8]
 800fe10:	693b      	ldr	r3, [r7, #16]
 800fe12:	815a      	strh	r2, [r3, #10]
  return p;
 800fe14:	693b      	ldr	r3, [r7, #16]
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	3718      	adds	r7, #24
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}
 800fe1e:	bf00      	nop
 800fe20:	080187e8 	.word	0x080187e8
 800fe24:	080188a0 	.word	0x080188a0
 800fe28:	0801883c 	.word	0x0801883c
 800fe2c:	080188c4 	.word	0x080188c4
 800fe30:	080188e4 	.word	0x080188e4

0800fe34 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b082      	sub	sp, #8
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
 800fe3c:	460b      	mov	r3, r1
 800fe3e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d106      	bne.n	800fe54 <tcp_write_checks+0x20>
 800fe46:	4b33      	ldr	r3, [pc, #204]	@ (800ff14 <tcp_write_checks+0xe0>)
 800fe48:	f240 1233 	movw	r2, #307	@ 0x133
 800fe4c:	4932      	ldr	r1, [pc, #200]	@ (800ff18 <tcp_write_checks+0xe4>)
 800fe4e:	4833      	ldr	r0, [pc, #204]	@ (800ff1c <tcp_write_checks+0xe8>)
 800fe50:	f005 faca 	bl	80153e8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	7d1b      	ldrb	r3, [r3, #20]
 800fe58:	2b04      	cmp	r3, #4
 800fe5a:	d00e      	beq.n	800fe7a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800fe60:	2b07      	cmp	r3, #7
 800fe62:	d00a      	beq.n	800fe7a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800fe68:	2b02      	cmp	r3, #2
 800fe6a:	d006      	beq.n	800fe7a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800fe70:	2b03      	cmp	r3, #3
 800fe72:	d002      	beq.n	800fe7a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800fe74:	f06f 030a 	mvn.w	r3, #10
 800fe78:	e048      	b.n	800ff0c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800fe7a:	887b      	ldrh	r3, [r7, #2]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d101      	bne.n	800fe84 <tcp_write_checks+0x50>
    return ERR_OK;
 800fe80:	2300      	movs	r3, #0
 800fe82:	e043      	b.n	800ff0c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800fe8a:	887a      	ldrh	r2, [r7, #2]
 800fe8c:	429a      	cmp	r2, r3
 800fe8e:	d909      	bls.n	800fea4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	8b5b      	ldrh	r3, [r3, #26]
 800fe94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe98:	b29a      	uxth	r2, r3
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800fe9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fea2:	e033      	b.n	800ff0c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800feaa:	2b08      	cmp	r3, #8
 800feac:	d909      	bls.n	800fec2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	8b5b      	ldrh	r3, [r3, #26]
 800feb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800feb6:	b29a      	uxth	r2, r3
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800febc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fec0:	e024      	b.n	800ff0c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d00f      	beq.n	800feec <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d11a      	bne.n	800ff0a <tcp_write_checks+0xd6>
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d116      	bne.n	800ff0a <tcp_write_checks+0xd6>
 800fedc:	4b0d      	ldr	r3, [pc, #52]	@ (800ff14 <tcp_write_checks+0xe0>)
 800fede:	f240 1255 	movw	r2, #341	@ 0x155
 800fee2:	490f      	ldr	r1, [pc, #60]	@ (800ff20 <tcp_write_checks+0xec>)
 800fee4:	480d      	ldr	r0, [pc, #52]	@ (800ff1c <tcp_write_checks+0xe8>)
 800fee6:	f005 fa7f 	bl	80153e8 <iprintf>
 800feea:	e00e      	b.n	800ff0a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d103      	bne.n	800fefc <tcp_write_checks+0xc8>
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d006      	beq.n	800ff0a <tcp_write_checks+0xd6>
 800fefc:	4b05      	ldr	r3, [pc, #20]	@ (800ff14 <tcp_write_checks+0xe0>)
 800fefe:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800ff02:	4908      	ldr	r1, [pc, #32]	@ (800ff24 <tcp_write_checks+0xf0>)
 800ff04:	4805      	ldr	r0, [pc, #20]	@ (800ff1c <tcp_write_checks+0xe8>)
 800ff06:	f005 fa6f 	bl	80153e8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800ff0a:	2300      	movs	r3, #0
}
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	3708      	adds	r7, #8
 800ff10:	46bd      	mov	sp, r7
 800ff12:	bd80      	pop	{r7, pc}
 800ff14:	080187e8 	.word	0x080187e8
 800ff18:	080188f8 	.word	0x080188f8
 800ff1c:	0801883c 	.word	0x0801883c
 800ff20:	08018918 	.word	0x08018918
 800ff24:	08018954 	.word	0x08018954

0800ff28 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800ff28:	b590      	push	{r4, r7, lr}
 800ff2a:	b09d      	sub	sp, #116	@ 0x74
 800ff2c:	af04      	add	r7, sp, #16
 800ff2e:	60f8      	str	r0, [r7, #12]
 800ff30:	60b9      	str	r1, [r7, #8]
 800ff32:	4611      	mov	r1, r2
 800ff34:	461a      	mov	r2, r3
 800ff36:	460b      	mov	r3, r1
 800ff38:	80fb      	strh	r3, [r7, #6]
 800ff3a:	4613      	mov	r3, r2
 800ff3c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800ff42:	2300      	movs	r3, #0
 800ff44:	643b      	str	r3, [r7, #64]	@ 0x40
 800ff46:	2300      	movs	r3, #0
 800ff48:	657b      	str	r3, [r7, #84]	@ 0x54
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	653b      	str	r3, [r7, #80]	@ 0x50
 800ff4e:	2300      	movs	r3, #0
 800ff50:	64fb      	str	r3, [r7, #76]	@ 0x4c
  u16_t pos = 0; /* position in 'arg' data */
 800ff52:	2300      	movs	r3, #0
 800ff54:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800ff58:	2300      	movs	r3, #0
 800ff5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	82fb      	strh	r3, [r7, #22]
  u16_t oversize_used = 0;
 800ff62:	2300      	movs	r3, #0
 800ff64:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 800ff68:	2300      	movs	r3, #0
 800ff6a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800ff6e:	2300      	movs	r3, #0
 800ff70:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d109      	bne.n	800ff8e <tcp_write+0x66>
 800ff7a:	4b9c      	ldr	r3, [pc, #624]	@ (80101ec <tcp_write+0x2c4>)
 800ff7c:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800ff80:	499b      	ldr	r1, [pc, #620]	@ (80101f0 <tcp_write+0x2c8>)
 800ff82:	489c      	ldr	r0, [pc, #624]	@ (80101f4 <tcp_write+0x2cc>)
 800ff84:	f005 fa30 	bl	80153e8 <iprintf>
 800ff88:	f06f 030f 	mvn.w	r3, #15
 800ff8c:	e379      	b.n	8010682 <tcp_write+0x75a>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ff94:	085b      	lsrs	r3, r3, #1
 800ff96:	b29a      	uxth	r2, r3
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ff9c:	4293      	cmp	r3, r2
 800ff9e:	bf28      	it	cs
 800ffa0:	4613      	movcs	r3, r2
 800ffa2:	853b      	strh	r3, [r7, #40]	@ 0x28
  mss_local = mss_local ? mss_local : pcb->mss;
 800ffa4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d102      	bne.n	800ffb0 <tcp_write+0x88>
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ffae:	e000      	b.n	800ffb2 <tcp_write+0x8a>
 800ffb0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ffb2:	853b      	strh	r3, [r7, #40]	@ 0x28
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d109      	bne.n	800ffce <tcp_write+0xa6>
 800ffba:	4b8c      	ldr	r3, [pc, #560]	@ (80101ec <tcp_write+0x2c4>)
 800ffbc:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800ffc0:	498d      	ldr	r1, [pc, #564]	@ (80101f8 <tcp_write+0x2d0>)
 800ffc2:	488c      	ldr	r0, [pc, #560]	@ (80101f4 <tcp_write+0x2cc>)
 800ffc4:	f005 fa10 	bl	80153e8 <iprintf>
 800ffc8:	f06f 030f 	mvn.w	r3, #15
 800ffcc:	e359      	b.n	8010682 <tcp_write+0x75a>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800ffce:	88fb      	ldrh	r3, [r7, #6]
 800ffd0:	4619      	mov	r1, r3
 800ffd2:	68f8      	ldr	r0, [r7, #12]
 800ffd4:	f7ff ff2e 	bl	800fe34 <tcp_write_checks>
 800ffd8:	4603      	mov	r3, r0
 800ffda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (err != ERR_OK) {
 800ffde:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d002      	beq.n	800ffec <tcp_write+0xc4>
    return err;
 800ffe6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ffea:	e34a      	b.n	8010682 <tcp_write+0x75a>
  }
  queuelen = pcb->snd_queuelen;
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fff2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fff6:	2300      	movs	r3, #0
 800fff8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010000:	2b00      	cmp	r3, #0
 8010002:	f000 8127 	beq.w	8010254 <tcp_write+0x32c>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801000a:	643b      	str	r3, [r7, #64]	@ 0x40
 801000c:	e002      	b.n	8010014 <tcp_write+0xec>
         last_unsent = last_unsent->next);
 801000e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	643b      	str	r3, [r7, #64]	@ 0x40
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010014:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d1f8      	bne.n	801000e <tcp_write+0xe6>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801001c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801001e:	7b1b      	ldrb	r3, [r3, #12]
 8010020:	009b      	lsls	r3, r3, #2
 8010022:	b29b      	uxth	r3, r3
 8010024:	f003 0304 	and.w	r3, r3, #4
 8010028:	84bb      	strh	r3, [r7, #36]	@ 0x24
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801002a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801002c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801002e:	891b      	ldrh	r3, [r3, #8]
 8010030:	4619      	mov	r1, r3
 8010032:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010034:	440b      	add	r3, r1
 8010036:	429a      	cmp	r2, r3
 8010038:	da06      	bge.n	8010048 <tcp_write+0x120>
 801003a:	4b6c      	ldr	r3, [pc, #432]	@ (80101ec <tcp_write+0x2c4>)
 801003c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8010040:	496e      	ldr	r1, [pc, #440]	@ (80101fc <tcp_write+0x2d4>)
 8010042:	486c      	ldr	r0, [pc, #432]	@ (80101f4 <tcp_write+0x2cc>)
 8010044:	f005 f9d0 	bl	80153e8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010048:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801004a:	891a      	ldrh	r2, [r3, #8]
 801004c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801004e:	4413      	add	r3, r2
 8010050:	b29b      	uxth	r3, r3
 8010052:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8010054:	1ad3      	subs	r3, r2, r3
 8010056:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
     * function.
     */
#if TCP_OVERSIZE
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	f8b3 2068 	ldrh.w	r2, [r3, #104]	@ 0x68
 8010060:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010062:	895b      	ldrh	r3, [r3, #10]
 8010064:	429a      	cmp	r2, r3
 8010066:	d006      	beq.n	8010076 <tcp_write+0x14e>
 8010068:	4b60      	ldr	r3, [pc, #384]	@ (80101ec <tcp_write+0x2c4>)
 801006a:	f240 12f3 	movw	r2, #499	@ 0x1f3
 801006e:	4964      	ldr	r1, [pc, #400]	@ (8010200 <tcp_write+0x2d8>)
 8010070:	4860      	ldr	r0, [pc, #384]	@ (80101f4 <tcp_write+0x2cc>)
 8010072:	f005 f9b9 	bl	80153e8 <iprintf>
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801007c:	82fb      	strh	r3, [r7, #22]
    if (oversize > 0) {
 801007e:	8afb      	ldrh	r3, [r7, #22]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d02e      	beq.n	80100e2 <tcp_write+0x1ba>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010084:	8afb      	ldrh	r3, [r7, #22]
 8010086:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 801008a:	429a      	cmp	r2, r3
 801008c:	d206      	bcs.n	801009c <tcp_write+0x174>
 801008e:	4b57      	ldr	r3, [pc, #348]	@ (80101ec <tcp_write+0x2c4>)
 8010090:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8010094:	495b      	ldr	r1, [pc, #364]	@ (8010204 <tcp_write+0x2dc>)
 8010096:	4857      	ldr	r0, [pc, #348]	@ (80101f4 <tcp_write+0x2cc>)
 8010098:	f005 f9a6 	bl	80153e8 <iprintf>
      seg = last_unsent;
 801009c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801009e:	657b      	str	r3, [r7, #84]	@ 0x54
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80100a0:	8afb      	ldrh	r3, [r7, #22]
 80100a2:	88fa      	ldrh	r2, [r7, #6]
 80100a4:	4293      	cmp	r3, r2
 80100a6:	bf28      	it	cs
 80100a8:	4613      	movcs	r3, r2
 80100aa:	b29b      	uxth	r3, r3
 80100ac:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 80100b0:	4293      	cmp	r3, r2
 80100b2:	bf28      	it	cs
 80100b4:	4613      	movcs	r3, r2
 80100b6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      pos += oversize_used;
 80100ba:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80100be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80100c2:	4413      	add	r3, r2
 80100c4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
      oversize -= oversize_used;
 80100c8:	8afa      	ldrh	r2, [r7, #22]
 80100ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80100ce:	1ad3      	subs	r3, r2, r3
 80100d0:	b29b      	uxth	r3, r3
 80100d2:	82fb      	strh	r3, [r7, #22]
      space -= oversize_used;
 80100d4:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 80100d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80100dc:	1ad3      	subs	r3, r2, r3
 80100de:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80100e2:	8afb      	ldrh	r3, [r7, #22]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d00b      	beq.n	8010100 <tcp_write+0x1d8>
 80100e8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80100ec:	88fb      	ldrh	r3, [r7, #6]
 80100ee:	429a      	cmp	r2, r3
 80100f0:	d006      	beq.n	8010100 <tcp_write+0x1d8>
 80100f2:	4b3e      	ldr	r3, [pc, #248]	@ (80101ec <tcp_write+0x2c4>)
 80100f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80100f8:	4943      	ldr	r1, [pc, #268]	@ (8010208 <tcp_write+0x2e0>)
 80100fa:	483e      	ldr	r0, [pc, #248]	@ (80101f4 <tcp_write+0x2cc>)
 80100fc:	f005 f974 	bl	80153e8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010100:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8010104:	88fb      	ldrh	r3, [r7, #6]
 8010106:	429a      	cmp	r2, r3
 8010108:	f080 8172 	bcs.w	80103f0 <tcp_write+0x4c8>
 801010c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8010110:	2b00      	cmp	r3, #0
 8010112:	f000 816d 	beq.w	80103f0 <tcp_write+0x4c8>
 8010116:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010118:	891b      	ldrh	r3, [r3, #8]
 801011a:	2b00      	cmp	r3, #0
 801011c:	f000 8168 	beq.w	80103f0 <tcp_write+0x4c8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010120:	88fa      	ldrh	r2, [r7, #6]
 8010122:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8010126:	1ad2      	subs	r2, r2, r3
 8010128:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 801012c:	4293      	cmp	r3, r2
 801012e:	bfa8      	it	ge
 8010130:	4613      	movge	r3, r2
 8010132:	847b      	strh	r3, [r7, #34]	@ 0x22
      seg = last_unsent;
 8010134:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010136:	657b      	str	r3, [r7, #84]	@ 0x54

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010138:	797b      	ldrb	r3, [r7, #5]
 801013a:	f003 0301 	and.w	r3, r3, #1
 801013e:	2b00      	cmp	r3, #0
 8010140:	d02b      	beq.n	801019a <tcp_write+0x272>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8010142:	f107 0016 	add.w	r0, r7, #22
 8010146:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 801014a:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 801014c:	2301      	movs	r3, #1
 801014e:	9302      	str	r3, [sp, #8]
 8010150:	797b      	ldrb	r3, [r7, #5]
 8010152:	9301      	str	r3, [sp, #4]
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	9300      	str	r3, [sp, #0]
 8010158:	4603      	mov	r3, r0
 801015a:	2000      	movs	r0, #0
 801015c:	f7ff fdf0 	bl	800fd40 <tcp_pbuf_prealloc>
 8010160:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8010162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010164:	2b00      	cmp	r3, #0
 8010166:	f000 825a 	beq.w	801061e <tcp_write+0x6f6>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 801016a:	8afb      	ldrh	r3, [r7, #22]
 801016c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010172:	6858      	ldr	r0, [r3, #4]
 8010174:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8010178:	68ba      	ldr	r2, [r7, #8]
 801017a:	4413      	add	r3, r2
 801017c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801017e:	4619      	mov	r1, r3
 8010180:	f005 fb07 	bl	8015792 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010184:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8010186:	f7fb f851 	bl	800b22c <pbuf_clen>
 801018a:	4603      	mov	r3, r0
 801018c:	461a      	mov	r2, r3
 801018e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8010192:	4413      	add	r3, r2
 8010194:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8010198:	e055      	b.n	8010246 <tcp_write+0x31e>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801019a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801019c:	685b      	ldr	r3, [r3, #4]
 801019e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80101a0:	e002      	b.n	80101a8 <tcp_write+0x280>
 80101a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80101a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d1f8      	bne.n	80101a2 <tcp_write+0x27a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80101b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101b2:	7b1b      	ldrb	r3, [r3, #12]
 80101b4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d129      	bne.n	8010210 <tcp_write+0x2e8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80101bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101be:	685b      	ldr	r3, [r3, #4]
 80101c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80101c2:	8952      	ldrh	r2, [r2, #10]
 80101c4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80101c6:	68ba      	ldr	r2, [r7, #8]
 80101c8:	429a      	cmp	r2, r3
 80101ca:	d121      	bne.n	8010210 <tcp_write+0x2e8>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80101cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d006      	beq.n	80101e2 <tcp_write+0x2ba>
 80101d4:	4b05      	ldr	r3, [pc, #20]	@ (80101ec <tcp_write+0x2c4>)
 80101d6:	f240 2231 	movw	r2, #561	@ 0x231
 80101da:	490c      	ldr	r1, [pc, #48]	@ (801020c <tcp_write+0x2e4>)
 80101dc:	4805      	ldr	r0, [pc, #20]	@ (80101f4 <tcp_write+0x2cc>)
 80101de:	f005 f903 	bl	80153e8 <iprintf>
          extendlen = seglen;
 80101e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80101e4:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80101e8:	e02d      	b.n	8010246 <tcp_write+0x31e>
 80101ea:	bf00      	nop
 80101ec:	080187e8 	.word	0x080187e8
 80101f0:	08018988 	.word	0x08018988
 80101f4:	0801883c 	.word	0x0801883c
 80101f8:	080189a0 	.word	0x080189a0
 80101fc:	080189d4 	.word	0x080189d4
 8010200:	080189ec 	.word	0x080189ec
 8010204:	08018a1c 	.word	0x08018a1c
 8010208:	08018a3c 	.word	0x08018a3c
 801020c:	08018a5c 	.word	0x08018a5c
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010210:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010212:	2201      	movs	r2, #1
 8010214:	4619      	mov	r1, r3
 8010216:	2000      	movs	r0, #0
 8010218:	f7fa fc3c 	bl	800aa94 <pbuf_alloc>
 801021c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 801021e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010220:	2b00      	cmp	r3, #0
 8010222:	f000 81fe 	beq.w	8010622 <tcp_write+0x6fa>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8010226:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801022a:	68ba      	ldr	r2, [r7, #8]
 801022c:	441a      	add	r2, r3
 801022e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010230:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8010232:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8010234:	f7fa fffa 	bl	800b22c <pbuf_clen>
 8010238:	4603      	mov	r3, r0
 801023a:	461a      	mov	r2, r3
 801023c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8010240:	4413      	add	r3, r2
 8010242:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8010246:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 801024a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801024c:	4413      	add	r3, r2
 801024e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8010252:	e0cd      	b.n	80103f0 <tcp_write+0x4c8>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801025a:	2b00      	cmp	r3, #0
 801025c:	f000 80c8 	beq.w	80103f0 <tcp_write+0x4c8>
 8010260:	4b72      	ldr	r3, [pc, #456]	@ (801042c <tcp_write+0x504>)
 8010262:	f240 224a 	movw	r2, #586	@ 0x24a
 8010266:	4972      	ldr	r1, [pc, #456]	@ (8010430 <tcp_write+0x508>)
 8010268:	4872      	ldr	r0, [pc, #456]	@ (8010434 <tcp_write+0x50c>)
 801026a:	f005 f8bd 	bl	80153e8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801026e:	e0bf      	b.n	80103f0 <tcp_write+0x4c8>
    struct pbuf *p;
    u16_t left = len - pos;
 8010270:	88fa      	ldrh	r2, [r7, #6]
 8010272:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8010276:	1ad3      	subs	r3, r2, r3
 8010278:	843b      	strh	r3, [r7, #32]
    u16_t max_len = mss_local - optlen;
 801027a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801027e:	b29b      	uxth	r3, r3
 8010280:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8010282:	1ad3      	subs	r3, r2, r3
 8010284:	83fb      	strh	r3, [r7, #30]
    u16_t seglen = LWIP_MIN(left, max_len);
 8010286:	8bfa      	ldrh	r2, [r7, #30]
 8010288:	8c3b      	ldrh	r3, [r7, #32]
 801028a:	4293      	cmp	r3, r2
 801028c:	bf28      	it	cs
 801028e:	4613      	movcs	r3, r2
 8010290:	83bb      	strh	r3, [r7, #28]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010292:	797b      	ldrb	r3, [r7, #5]
 8010294:	f003 0301 	and.w	r3, r3, #1
 8010298:	2b00      	cmp	r3, #0
 801029a:	d036      	beq.n	801030a <tcp_write+0x3e2>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801029c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80102a0:	b29a      	uxth	r2, r3
 80102a2:	8bbb      	ldrh	r3, [r7, #28]
 80102a4:	4413      	add	r3, r2
 80102a6:	b299      	uxth	r1, r3
 80102a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	bf0c      	ite	eq
 80102ae:	2301      	moveq	r3, #1
 80102b0:	2300      	movne	r3, #0
 80102b2:	b2db      	uxtb	r3, r3
 80102b4:	f107 0016 	add.w	r0, r7, #22
 80102b8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80102ba:	9302      	str	r3, [sp, #8]
 80102bc:	797b      	ldrb	r3, [r7, #5]
 80102be:	9301      	str	r3, [sp, #4]
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	9300      	str	r3, [sp, #0]
 80102c4:	4603      	mov	r3, r0
 80102c6:	2036      	movs	r0, #54	@ 0x36
 80102c8:	f7ff fd3a 	bl	800fd40 <tcp_pbuf_prealloc>
 80102cc:	6378      	str	r0, [r7, #52]	@ 0x34
 80102ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	f000 81a8 	beq.w	8010626 <tcp_write+0x6fe>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80102d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102d8:	895b      	ldrh	r3, [r3, #10]
 80102da:	8bba      	ldrh	r2, [r7, #28]
 80102dc:	429a      	cmp	r2, r3
 80102de:	d906      	bls.n	80102ee <tcp_write+0x3c6>
 80102e0:	4b52      	ldr	r3, [pc, #328]	@ (801042c <tcp_write+0x504>)
 80102e2:	f240 2266 	movw	r2, #614	@ 0x266
 80102e6:	4954      	ldr	r1, [pc, #336]	@ (8010438 <tcp_write+0x510>)
 80102e8:	4852      	ldr	r0, [pc, #328]	@ (8010434 <tcp_write+0x50c>)
 80102ea:	f005 f87d 	bl	80153e8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80102ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102f0:	685a      	ldr	r2, [r3, #4]
 80102f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80102f6:	18d0      	adds	r0, r2, r3
 80102f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80102fc:	68ba      	ldr	r2, [r7, #8]
 80102fe:	4413      	add	r3, r2
 8010300:	8bba      	ldrh	r2, [r7, #28]
 8010302:	4619      	mov	r1, r3
 8010304:	f005 fa45 	bl	8015792 <memcpy>
 8010308:	e02f      	b.n	801036a <tcp_write+0x442>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801030a:	8afb      	ldrh	r3, [r7, #22]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d006      	beq.n	801031e <tcp_write+0x3f6>
 8010310:	4b46      	ldr	r3, [pc, #280]	@ (801042c <tcp_write+0x504>)
 8010312:	f240 2271 	movw	r2, #625	@ 0x271
 8010316:	4949      	ldr	r1, [pc, #292]	@ (801043c <tcp_write+0x514>)
 8010318:	4846      	ldr	r0, [pc, #280]	@ (8010434 <tcp_write+0x50c>)
 801031a:	f005 f865 	bl	80153e8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801031e:	8bbb      	ldrh	r3, [r7, #28]
 8010320:	2201      	movs	r2, #1
 8010322:	4619      	mov	r1, r3
 8010324:	2036      	movs	r0, #54	@ 0x36
 8010326:	f7fa fbb5 	bl	800aa94 <pbuf_alloc>
 801032a:	61b8      	str	r0, [r7, #24]
 801032c:	69bb      	ldr	r3, [r7, #24]
 801032e:	2b00      	cmp	r3, #0
 8010330:	f000 817b 	beq.w	801062a <tcp_write+0x702>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8010334:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8010338:	68ba      	ldr	r2, [r7, #8]
 801033a:	441a      	add	r2, r3
 801033c:	69bb      	ldr	r3, [r7, #24]
 801033e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010340:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010344:	b29b      	uxth	r3, r3
 8010346:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801034a:	4619      	mov	r1, r3
 801034c:	2036      	movs	r0, #54	@ 0x36
 801034e:	f7fa fba1 	bl	800aa94 <pbuf_alloc>
 8010352:	6378      	str	r0, [r7, #52]	@ 0x34
 8010354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010356:	2b00      	cmp	r3, #0
 8010358:	d103      	bne.n	8010362 <tcp_write+0x43a>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801035a:	69b8      	ldr	r0, [r7, #24]
 801035c:	f7fa fec6 	bl	800b0ec <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010360:	e166      	b.n	8010630 <tcp_write+0x708>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8010362:	69b9      	ldr	r1, [r7, #24]
 8010364:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8010366:	f7fa ff9b 	bl	800b2a0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801036a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801036c:	f7fa ff5e 	bl	800b22c <pbuf_clen>
 8010370:	4603      	mov	r3, r0
 8010372:	461a      	mov	r2, r3
 8010374:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8010378:	4413      	add	r3, r2
 801037a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801037e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8010382:	2b09      	cmp	r3, #9
 8010384:	d903      	bls.n	801038e <tcp_write+0x466>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8010386:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8010388:	f7fa feb0 	bl	800b0ec <pbuf_free>
      goto memerr;
 801038c:	e150      	b.n	8010630 <tcp_write+0x708>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010392:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8010396:	441a      	add	r2, r3
 8010398:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801039c:	9300      	str	r3, [sp, #0]
 801039e:	4613      	mov	r3, r2
 80103a0:	2200      	movs	r2, #0
 80103a2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80103a4:	68f8      	ldr	r0, [r7, #12]
 80103a6:	f7ff fc2b 	bl	800fc00 <tcp_create_segment>
 80103aa:	6578      	str	r0, [r7, #84]	@ 0x54
 80103ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	f000 813d 	beq.w	801062e <tcp_write+0x706>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 80103b4:	8afa      	ldrh	r2, [r7, #22]
 80103b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80103b8:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80103ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d102      	bne.n	80103c6 <tcp_write+0x49e>
      queue = seg;
 80103c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80103c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80103c4:	e00c      	b.n	80103e0 <tcp_write+0x4b8>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80103c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d106      	bne.n	80103da <tcp_write+0x4b2>
 80103cc:	4b17      	ldr	r3, [pc, #92]	@ (801042c <tcp_write+0x504>)
 80103ce:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80103d2:	491b      	ldr	r1, [pc, #108]	@ (8010440 <tcp_write+0x518>)
 80103d4:	4817      	ldr	r0, [pc, #92]	@ (8010434 <tcp_write+0x50c>)
 80103d6:	f005 f807 	bl	80153e8 <iprintf>
      prev_seg->next = seg;
 80103da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80103dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80103de:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80103e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80103e2:	653b      	str	r3, [r7, #80]	@ 0x50

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80103e4:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80103e8:	8bbb      	ldrh	r3, [r7, #28]
 80103ea:	4413      	add	r3, r2
 80103ec:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  while (pos < len) {
 80103f0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80103f4:	88fb      	ldrh	r3, [r7, #6]
 80103f6:	429a      	cmp	r2, r3
 80103f8:	f4ff af3a 	bcc.w	8010270 <tcp_write+0x348>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 80103fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d00b      	beq.n	801041a <tcp_write+0x4f2>
 8010402:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8010406:	2b00      	cmp	r3, #0
 8010408:	d007      	beq.n	801041a <tcp_write+0x4f2>
    last_unsent->oversize_left += oversize_add;
 801040a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801040c:	895a      	ldrh	r2, [r3, #10]
 801040e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8010412:	4413      	add	r3, r2
 8010414:	b29a      	uxth	r2, r3
 8010416:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010418:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801041a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801041e:	2b00      	cmp	r3, #0
 8010420:	d052      	beq.n	80104c8 <tcp_write+0x5a0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8010422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010424:	685b      	ldr	r3, [r3, #4]
 8010426:	633b      	str	r3, [r7, #48]	@ 0x30
 8010428:	e02e      	b.n	8010488 <tcp_write+0x560>
 801042a:	bf00      	nop
 801042c:	080187e8 	.word	0x080187e8
 8010430:	08018a88 	.word	0x08018a88
 8010434:	0801883c 	.word	0x0801883c
 8010438:	08018ab8 	.word	0x08018ab8
 801043c:	08018af8 	.word	0x08018af8
 8010440:	08018b08 	.word	0x08018b08
      p->tot_len += oversize_used;
 8010444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010446:	891a      	ldrh	r2, [r3, #8]
 8010448:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801044c:	4413      	add	r3, r2
 801044e:	b29a      	uxth	r2, r3
 8010450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010452:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8010454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d112      	bne.n	8010482 <tcp_write+0x55a>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801045c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801045e:	685b      	ldr	r3, [r3, #4]
 8010460:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010462:	8952      	ldrh	r2, [r2, #10]
 8010464:	4413      	add	r3, r2
 8010466:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801046a:	68b9      	ldr	r1, [r7, #8]
 801046c:	4618      	mov	r0, r3
 801046e:	f005 f990 	bl	8015792 <memcpy>
        p->len += oversize_used;
 8010472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010474:	895a      	ldrh	r2, [r3, #10]
 8010476:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801047a:	4413      	add	r3, r2
 801047c:	b29a      	uxth	r2, r3
 801047e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010480:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	633b      	str	r3, [r7, #48]	@ 0x30
 8010488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801048a:	2b00      	cmp	r3, #0
 801048c:	d1da      	bne.n	8010444 <tcp_write+0x51c>
      }
    }
    last_unsent->len += oversize_used;
 801048e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010490:	891a      	ldrh	r2, [r3, #8]
 8010492:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010496:	4413      	add	r3, r2
 8010498:	b29a      	uxth	r2, r3
 801049a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801049c:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 801049e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80104a0:	895b      	ldrh	r3, [r3, #10]
 80104a2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80104a6:	429a      	cmp	r2, r3
 80104a8:	d906      	bls.n	80104b8 <tcp_write+0x590>
 80104aa:	4b78      	ldr	r3, [pc, #480]	@ (801068c <tcp_write+0x764>)
 80104ac:	f240 22d3 	movw	r2, #723	@ 0x2d3
 80104b0:	4977      	ldr	r1, [pc, #476]	@ (8010690 <tcp_write+0x768>)
 80104b2:	4878      	ldr	r0, [pc, #480]	@ (8010694 <tcp_write+0x76c>)
 80104b4:	f004 ff98 	bl	80153e8 <iprintf>
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 80104b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80104ba:	895a      	ldrh	r2, [r3, #10]
 80104bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80104c0:	1ad3      	subs	r3, r2, r3
 80104c2:	b29a      	uxth	r2, r3
 80104c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80104c6:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80104c8:	8afa      	ldrh	r2, [r7, #22]
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80104d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d018      	beq.n	8010508 <tcp_write+0x5e0>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80104d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d106      	bne.n	80104ea <tcp_write+0x5c2>
 80104dc:	4b6b      	ldr	r3, [pc, #428]	@ (801068c <tcp_write+0x764>)
 80104de:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 80104e2:	496d      	ldr	r1, [pc, #436]	@ (8010698 <tcp_write+0x770>)
 80104e4:	486b      	ldr	r0, [pc, #428]	@ (8010694 <tcp_write+0x76c>)
 80104e6:	f004 ff7f 	bl	80153e8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80104ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80104ec:	685b      	ldr	r3, [r3, #4]
 80104ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80104f0:	4618      	mov	r0, r3
 80104f2:	f7fa fed5 	bl	800b2a0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80104f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80104f8:	891a      	ldrh	r2, [r3, #8]
 80104fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104fc:	891b      	ldrh	r3, [r3, #8]
 80104fe:	4413      	add	r3, r2
 8010500:	b29a      	uxth	r2, r3
 8010502:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010504:	811a      	strh	r2, [r3, #8]
 8010506:	e03c      	b.n	8010582 <tcp_write+0x65a>
  } else if (extendlen > 0) {
 8010508:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801050c:	2b00      	cmp	r3, #0
 801050e:	d038      	beq.n	8010582 <tcp_write+0x65a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010510:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010512:	2b00      	cmp	r3, #0
 8010514:	d003      	beq.n	801051e <tcp_write+0x5f6>
 8010516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010518:	685b      	ldr	r3, [r3, #4]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d106      	bne.n	801052c <tcp_write+0x604>
 801051e:	4b5b      	ldr	r3, [pc, #364]	@ (801068c <tcp_write+0x764>)
 8010520:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8010524:	495d      	ldr	r1, [pc, #372]	@ (801069c <tcp_write+0x774>)
 8010526:	485b      	ldr	r0, [pc, #364]	@ (8010694 <tcp_write+0x76c>)
 8010528:	f004 ff5e 	bl	80153e8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801052c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801052e:	685b      	ldr	r3, [r3, #4]
 8010530:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010532:	e00a      	b.n	801054a <tcp_write+0x622>
      p->tot_len += extendlen;
 8010534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010536:	891a      	ldrh	r2, [r3, #8]
 8010538:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801053c:	4413      	add	r3, r2
 801053e:	b29a      	uxth	r2, r3
 8010540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010542:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801054a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d1f0      	bne.n	8010534 <tcp_write+0x60c>
    }
    p->tot_len += extendlen;
 8010552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010554:	891a      	ldrh	r2, [r3, #8]
 8010556:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801055a:	4413      	add	r3, r2
 801055c:	b29a      	uxth	r2, r3
 801055e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010560:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8010562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010564:	895a      	ldrh	r2, [r3, #10]
 8010566:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801056a:	4413      	add	r3, r2
 801056c:	b29a      	uxth	r2, r3
 801056e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010570:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8010572:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010574:	891a      	ldrh	r2, [r3, #8]
 8010576:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801057a:	4413      	add	r3, r2
 801057c:	b29a      	uxth	r2, r3
 801057e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010580:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8010582:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010584:	2b00      	cmp	r3, #0
 8010586:	d103      	bne.n	8010590 <tcp_write+0x668>
    pcb->unsent = queue;
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801058c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801058e:	e002      	b.n	8010596 <tcp_write+0x66e>
  } else {
    last_unsent->next = queue;
 8010590:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010592:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010594:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801059a:	88fb      	ldrh	r3, [r7, #6]
 801059c:	441a      	add	r2, r3
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80105a8:	88fb      	ldrh	r3, [r7, #6]
 80105aa:	1ad3      	subs	r3, r2, r3
 80105ac:	b29a      	uxth	r2, r3
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80105ba:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d00e      	beq.n	80105e6 <tcp_write+0x6be>
    LWIP_ASSERT("tcp_write: valid queue length",
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d10a      	bne.n	80105e6 <tcp_write+0x6be>
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d106      	bne.n	80105e6 <tcp_write+0x6be>
 80105d8:	4b2c      	ldr	r3, [pc, #176]	@ (801068c <tcp_write+0x764>)
 80105da:	f240 3212 	movw	r2, #786	@ 0x312
 80105de:	4930      	ldr	r1, [pc, #192]	@ (80106a0 <tcp_write+0x778>)
 80105e0:	482c      	ldr	r0, [pc, #176]	@ (8010694 <tcp_write+0x76c>)
 80105e2:	f004 ff01 	bl	80153e8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80105e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d016      	beq.n	801061a <tcp_write+0x6f2>
 80105ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105ee:	691b      	ldr	r3, [r3, #16]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d012      	beq.n	801061a <tcp_write+0x6f2>
 80105f4:	797b      	ldrb	r3, [r7, #5]
 80105f6:	f003 0302 	and.w	r3, r3, #2
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d10d      	bne.n	801061a <tcp_write+0x6f2>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80105fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010600:	691b      	ldr	r3, [r3, #16]
 8010602:	899b      	ldrh	r3, [r3, #12]
 8010604:	b29c      	uxth	r4, r3
 8010606:	2008      	movs	r0, #8
 8010608:	f7f9 f8fe 	bl	8009808 <lwip_htons>
 801060c:	4603      	mov	r3, r0
 801060e:	461a      	mov	r2, r3
 8010610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010612:	691b      	ldr	r3, [r3, #16]
 8010614:	4322      	orrs	r2, r4
 8010616:	b292      	uxth	r2, r2
 8010618:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801061a:	2300      	movs	r3, #0
 801061c:	e031      	b.n	8010682 <tcp_write+0x75a>
          goto memerr;
 801061e:	bf00      	nop
 8010620:	e006      	b.n	8010630 <tcp_write+0x708>
            goto memerr;
 8010622:	bf00      	nop
 8010624:	e004      	b.n	8010630 <tcp_write+0x708>
        goto memerr;
 8010626:	bf00      	nop
 8010628:	e002      	b.n	8010630 <tcp_write+0x708>
        goto memerr;
 801062a:	bf00      	nop
 801062c:	e000      	b.n	8010630 <tcp_write+0x708>
      goto memerr;
 801062e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	8b5b      	ldrh	r3, [r3, #26]
 8010634:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010638:	b29a      	uxth	r2, r3
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801063e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010640:	2b00      	cmp	r3, #0
 8010642:	d002      	beq.n	801064a <tcp_write+0x722>
    pbuf_free(concat_p);
 8010644:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8010646:	f7fa fd51 	bl	800b0ec <pbuf_free>
  }
  if (queue != NULL) {
 801064a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801064c:	2b00      	cmp	r3, #0
 801064e:	d002      	beq.n	8010656 <tcp_write+0x72e>
    tcp_segs_free(queue);
 8010650:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010652:	f7fc fa05 	bl	800ca60 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801065c:	2b00      	cmp	r3, #0
 801065e:	d00e      	beq.n	801067e <tcp_write+0x756>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010664:	2b00      	cmp	r3, #0
 8010666:	d10a      	bne.n	801067e <tcp_write+0x756>
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801066c:	2b00      	cmp	r3, #0
 801066e:	d106      	bne.n	801067e <tcp_write+0x756>
 8010670:	4b06      	ldr	r3, [pc, #24]	@ (801068c <tcp_write+0x764>)
 8010672:	f240 3227 	movw	r2, #807	@ 0x327
 8010676:	490a      	ldr	r1, [pc, #40]	@ (80106a0 <tcp_write+0x778>)
 8010678:	4806      	ldr	r0, [pc, #24]	@ (8010694 <tcp_write+0x76c>)
 801067a:	f004 feb5 	bl	80153e8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801067e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8010682:	4618      	mov	r0, r3
 8010684:	3764      	adds	r7, #100	@ 0x64
 8010686:	46bd      	mov	sp, r7
 8010688:	bd90      	pop	{r4, r7, pc}
 801068a:	bf00      	nop
 801068c:	080187e8 	.word	0x080187e8
 8010690:	08018b1c 	.word	0x08018b1c
 8010694:	0801883c 	.word	0x0801883c
 8010698:	08018b48 	.word	0x08018b48
 801069c:	08018b80 	.word	0x08018b80
 80106a0:	08018bb8 	.word	0x08018bb8

080106a4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80106a4:	b590      	push	{r4, r7, lr}
 80106a6:	b08b      	sub	sp, #44	@ 0x2c
 80106a8:	af02      	add	r7, sp, #8
 80106aa:	6078      	str	r0, [r7, #4]
 80106ac:	460b      	mov	r3, r1
 80106ae:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80106b0:	2300      	movs	r3, #0
 80106b2:	61bb      	str	r3, [r7, #24]
 80106b4:	2300      	movs	r3, #0
 80106b6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80106b8:	2300      	movs	r3, #0
 80106ba:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d106      	bne.n	80106d0 <tcp_split_unsent_seg+0x2c>
 80106c2:	4b97      	ldr	r3, [pc, #604]	@ (8010920 <tcp_split_unsent_seg+0x27c>)
 80106c4:	f240 324b 	movw	r2, #843	@ 0x34b
 80106c8:	4996      	ldr	r1, [pc, #600]	@ (8010924 <tcp_split_unsent_seg+0x280>)
 80106ca:	4897      	ldr	r0, [pc, #604]	@ (8010928 <tcp_split_unsent_seg+0x284>)
 80106cc:	f004 fe8c 	bl	80153e8 <iprintf>

  useg = pcb->unsent;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80106d4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80106d6:	697b      	ldr	r3, [r7, #20]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d102      	bne.n	80106e2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80106dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80106e0:	e119      	b.n	8010916 <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 80106e2:	887b      	ldrh	r3, [r7, #2]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d109      	bne.n	80106fc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80106e8:	4b8d      	ldr	r3, [pc, #564]	@ (8010920 <tcp_split_unsent_seg+0x27c>)
 80106ea:	f240 3253 	movw	r2, #851	@ 0x353
 80106ee:	498f      	ldr	r1, [pc, #572]	@ (801092c <tcp_split_unsent_seg+0x288>)
 80106f0:	488d      	ldr	r0, [pc, #564]	@ (8010928 <tcp_split_unsent_seg+0x284>)
 80106f2:	f004 fe79 	bl	80153e8 <iprintf>
    return ERR_VAL;
 80106f6:	f06f 0305 	mvn.w	r3, #5
 80106fa:	e10c      	b.n	8010916 <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 80106fc:	697b      	ldr	r3, [r7, #20]
 80106fe:	891b      	ldrh	r3, [r3, #8]
 8010700:	887a      	ldrh	r2, [r7, #2]
 8010702:	429a      	cmp	r2, r3
 8010704:	d301      	bcc.n	801070a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010706:	2300      	movs	r3, #0
 8010708:	e105      	b.n	8010916 <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801070e:	887a      	ldrh	r2, [r7, #2]
 8010710:	429a      	cmp	r2, r3
 8010712:	d906      	bls.n	8010722 <tcp_split_unsent_seg+0x7e>
 8010714:	4b82      	ldr	r3, [pc, #520]	@ (8010920 <tcp_split_unsent_seg+0x27c>)
 8010716:	f240 325b 	movw	r2, #859	@ 0x35b
 801071a:	4985      	ldr	r1, [pc, #532]	@ (8010930 <tcp_split_unsent_seg+0x28c>)
 801071c:	4882      	ldr	r0, [pc, #520]	@ (8010928 <tcp_split_unsent_seg+0x284>)
 801071e:	f004 fe63 	bl	80153e8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010722:	697b      	ldr	r3, [r7, #20]
 8010724:	891b      	ldrh	r3, [r3, #8]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d106      	bne.n	8010738 <tcp_split_unsent_seg+0x94>
 801072a:	4b7d      	ldr	r3, [pc, #500]	@ (8010920 <tcp_split_unsent_seg+0x27c>)
 801072c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8010730:	4980      	ldr	r1, [pc, #512]	@ (8010934 <tcp_split_unsent_seg+0x290>)
 8010732:	487d      	ldr	r0, [pc, #500]	@ (8010928 <tcp_split_unsent_seg+0x284>)
 8010734:	f004 fe58 	bl	80153e8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010738:	697b      	ldr	r3, [r7, #20]
 801073a:	7b1b      	ldrb	r3, [r3, #12]
 801073c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801073e:	7bfb      	ldrb	r3, [r7, #15]
 8010740:	009b      	lsls	r3, r3, #2
 8010742:	b2db      	uxtb	r3, r3
 8010744:	f003 0304 	and.w	r3, r3, #4
 8010748:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801074a:	697b      	ldr	r3, [r7, #20]
 801074c:	891a      	ldrh	r2, [r3, #8]
 801074e:	887b      	ldrh	r3, [r7, #2]
 8010750:	1ad3      	subs	r3, r2, r3
 8010752:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010754:	7bbb      	ldrb	r3, [r7, #14]
 8010756:	b29a      	uxth	r2, r3
 8010758:	89bb      	ldrh	r3, [r7, #12]
 801075a:	4413      	add	r3, r2
 801075c:	b29b      	uxth	r3, r3
 801075e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010762:	4619      	mov	r1, r3
 8010764:	2036      	movs	r0, #54	@ 0x36
 8010766:	f7fa f995 	bl	800aa94 <pbuf_alloc>
 801076a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801076c:	693b      	ldr	r3, [r7, #16]
 801076e:	2b00      	cmp	r3, #0
 8010770:	f000 80ba 	beq.w	80108e8 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010774:	697b      	ldr	r3, [r7, #20]
 8010776:	685b      	ldr	r3, [r3, #4]
 8010778:	891a      	ldrh	r2, [r3, #8]
 801077a:	697b      	ldr	r3, [r7, #20]
 801077c:	891b      	ldrh	r3, [r3, #8]
 801077e:	1ad3      	subs	r3, r2, r3
 8010780:	b29a      	uxth	r2, r3
 8010782:	887b      	ldrh	r3, [r7, #2]
 8010784:	4413      	add	r3, r2
 8010786:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010788:	697b      	ldr	r3, [r7, #20]
 801078a:	6858      	ldr	r0, [r3, #4]
 801078c:	693b      	ldr	r3, [r7, #16]
 801078e:	685a      	ldr	r2, [r3, #4]
 8010790:	7bbb      	ldrb	r3, [r7, #14]
 8010792:	18d1      	adds	r1, r2, r3
 8010794:	897b      	ldrh	r3, [r7, #10]
 8010796:	89ba      	ldrh	r2, [r7, #12]
 8010798:	f7fa feb6 	bl	800b508 <pbuf_copy_partial>
 801079c:	4603      	mov	r3, r0
 801079e:	461a      	mov	r2, r3
 80107a0:	89bb      	ldrh	r3, [r7, #12]
 80107a2:	4293      	cmp	r3, r2
 80107a4:	f040 80a2 	bne.w	80108ec <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80107a8:	697b      	ldr	r3, [r7, #20]
 80107aa:	691b      	ldr	r3, [r3, #16]
 80107ac:	899b      	ldrh	r3, [r3, #12]
 80107ae:	b29b      	uxth	r3, r3
 80107b0:	4618      	mov	r0, r3
 80107b2:	f7f9 f829 	bl	8009808 <lwip_htons>
 80107b6:	4603      	mov	r3, r0
 80107b8:	b2db      	uxtb	r3, r3
 80107ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80107be:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80107c0:	2300      	movs	r3, #0
 80107c2:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 80107c4:	7ffb      	ldrb	r3, [r7, #31]
 80107c6:	f003 0308 	and.w	r3, r3, #8
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d007      	beq.n	80107de <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80107ce:	7ffb      	ldrb	r3, [r7, #31]
 80107d0:	f023 0308 	bic.w	r3, r3, #8
 80107d4:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 80107d6:	7fbb      	ldrb	r3, [r7, #30]
 80107d8:	f043 0308 	orr.w	r3, r3, #8
 80107dc:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 80107de:	7ffb      	ldrb	r3, [r7, #31]
 80107e0:	f003 0301 	and.w	r3, r3, #1
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d007      	beq.n	80107f8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80107e8:	7ffb      	ldrb	r3, [r7, #31]
 80107ea:	f023 0301 	bic.w	r3, r3, #1
 80107ee:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 80107f0:	7fbb      	ldrb	r3, [r7, #30]
 80107f2:	f043 0301 	orr.w	r3, r3, #1
 80107f6:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	691b      	ldr	r3, [r3, #16]
 80107fc:	685b      	ldr	r3, [r3, #4]
 80107fe:	4618      	mov	r0, r3
 8010800:	f7f9 f817 	bl	8009832 <lwip_htonl>
 8010804:	4602      	mov	r2, r0
 8010806:	887b      	ldrh	r3, [r7, #2]
 8010808:	18d1      	adds	r1, r2, r3
 801080a:	7fba      	ldrb	r2, [r7, #30]
 801080c:	7bfb      	ldrb	r3, [r7, #15]
 801080e:	9300      	str	r3, [sp, #0]
 8010810:	460b      	mov	r3, r1
 8010812:	6939      	ldr	r1, [r7, #16]
 8010814:	6878      	ldr	r0, [r7, #4]
 8010816:	f7ff f9f3 	bl	800fc00 <tcp_create_segment>
 801081a:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 801081c:	69bb      	ldr	r3, [r7, #24]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d066      	beq.n	80108f0 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010822:	697b      	ldr	r3, [r7, #20]
 8010824:	685b      	ldr	r3, [r3, #4]
 8010826:	4618      	mov	r0, r3
 8010828:	f7fa fd00 	bl	800b22c <pbuf_clen>
 801082c:	4603      	mov	r3, r0
 801082e:	461a      	mov	r2, r3
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010836:	1a9b      	subs	r3, r3, r2
 8010838:	b29a      	uxth	r2, r3
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010840:	697b      	ldr	r3, [r7, #20]
 8010842:	6858      	ldr	r0, [r3, #4]
 8010844:	697b      	ldr	r3, [r7, #20]
 8010846:	685b      	ldr	r3, [r3, #4]
 8010848:	891a      	ldrh	r2, [r3, #8]
 801084a:	89bb      	ldrh	r3, [r7, #12]
 801084c:	1ad3      	subs	r3, r2, r3
 801084e:	b29b      	uxth	r3, r3
 8010850:	4619      	mov	r1, r3
 8010852:	f7fa faab 	bl	800adac <pbuf_realloc>
  useg->len -= remainder;
 8010856:	697b      	ldr	r3, [r7, #20]
 8010858:	891a      	ldrh	r2, [r3, #8]
 801085a:	89bb      	ldrh	r3, [r7, #12]
 801085c:	1ad3      	subs	r3, r2, r3
 801085e:	b29a      	uxth	r2, r3
 8010860:	697b      	ldr	r3, [r7, #20]
 8010862:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010864:	697b      	ldr	r3, [r7, #20]
 8010866:	691b      	ldr	r3, [r3, #16]
 8010868:	899b      	ldrh	r3, [r3, #12]
 801086a:	b29c      	uxth	r4, r3
 801086c:	7ffb      	ldrb	r3, [r7, #31]
 801086e:	b29b      	uxth	r3, r3
 8010870:	4618      	mov	r0, r3
 8010872:	f7f8 ffc9 	bl	8009808 <lwip_htons>
 8010876:	4603      	mov	r3, r0
 8010878:	461a      	mov	r2, r3
 801087a:	697b      	ldr	r3, [r7, #20]
 801087c:	691b      	ldr	r3, [r3, #16]
 801087e:	4322      	orrs	r2, r4
 8010880:	b292      	uxth	r2, r2
 8010882:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 8010884:	697b      	ldr	r3, [r7, #20]
 8010886:	2200      	movs	r2, #0
 8010888:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801088a:	697b      	ldr	r3, [r7, #20]
 801088c:	685b      	ldr	r3, [r3, #4]
 801088e:	4618      	mov	r0, r3
 8010890:	f7fa fccc 	bl	800b22c <pbuf_clen>
 8010894:	4603      	mov	r3, r0
 8010896:	461a      	mov	r2, r3
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801089e:	4413      	add	r3, r2
 80108a0:	b29a      	uxth	r2, r3
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80108a8:	69bb      	ldr	r3, [r7, #24]
 80108aa:	685b      	ldr	r3, [r3, #4]
 80108ac:	4618      	mov	r0, r3
 80108ae:	f7fa fcbd 	bl	800b22c <pbuf_clen>
 80108b2:	4603      	mov	r3, r0
 80108b4:	461a      	mov	r2, r3
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80108bc:	4413      	add	r3, r2
 80108be:	b29a      	uxth	r2, r3
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80108c6:	697b      	ldr	r3, [r7, #20]
 80108c8:	681a      	ldr	r2, [r3, #0]
 80108ca:	69bb      	ldr	r3, [r7, #24]
 80108cc:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80108ce:	697b      	ldr	r3, [r7, #20]
 80108d0:	69ba      	ldr	r2, [r7, #24]
 80108d2:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80108d4:	69bb      	ldr	r3, [r7, #24]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d103      	bne.n	80108e4 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2200      	movs	r2, #0
 80108e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80108e4:	2300      	movs	r3, #0
 80108e6:	e016      	b.n	8010916 <tcp_split_unsent_seg+0x272>
    goto memerr;
 80108e8:	bf00      	nop
 80108ea:	e002      	b.n	80108f2 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 80108ec:	bf00      	nop
 80108ee:	e000      	b.n	80108f2 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 80108f0:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80108f2:	69bb      	ldr	r3, [r7, #24]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d006      	beq.n	8010906 <tcp_split_unsent_seg+0x262>
 80108f8:	4b09      	ldr	r3, [pc, #36]	@ (8010920 <tcp_split_unsent_seg+0x27c>)
 80108fa:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80108fe:	490e      	ldr	r1, [pc, #56]	@ (8010938 <tcp_split_unsent_seg+0x294>)
 8010900:	4809      	ldr	r0, [pc, #36]	@ (8010928 <tcp_split_unsent_seg+0x284>)
 8010902:	f004 fd71 	bl	80153e8 <iprintf>
  if (p != NULL) {
 8010906:	693b      	ldr	r3, [r7, #16]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d002      	beq.n	8010912 <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 801090c:	6938      	ldr	r0, [r7, #16]
 801090e:	f7fa fbed 	bl	800b0ec <pbuf_free>
  }

  return ERR_MEM;
 8010912:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8010916:	4618      	mov	r0, r3
 8010918:	3724      	adds	r7, #36	@ 0x24
 801091a:	46bd      	mov	sp, r7
 801091c:	bd90      	pop	{r4, r7, pc}
 801091e:	bf00      	nop
 8010920:	080187e8 	.word	0x080187e8
 8010924:	08018bd8 	.word	0x08018bd8
 8010928:	0801883c 	.word	0x0801883c
 801092c:	08018bfc 	.word	0x08018bfc
 8010930:	08018c20 	.word	0x08018c20
 8010934:	08018c30 	.word	0x08018c30
 8010938:	08018c40 	.word	0x08018c40

0801093c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801093c:	b590      	push	{r4, r7, lr}
 801093e:	b085      	sub	sp, #20
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d106      	bne.n	8010958 <tcp_send_fin+0x1c>
 801094a:	4b21      	ldr	r3, [pc, #132]	@ (80109d0 <tcp_send_fin+0x94>)
 801094c:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8010950:	4920      	ldr	r1, [pc, #128]	@ (80109d4 <tcp_send_fin+0x98>)
 8010952:	4821      	ldr	r0, [pc, #132]	@ (80109d8 <tcp_send_fin+0x9c>)
 8010954:	f004 fd48 	bl	80153e8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801095c:	2b00      	cmp	r3, #0
 801095e:	d02e      	beq.n	80109be <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010964:	60fb      	str	r3, [r7, #12]
 8010966:	e002      	b.n	801096e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d1f8      	bne.n	8010968 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	691b      	ldr	r3, [r3, #16]
 801097a:	899b      	ldrh	r3, [r3, #12]
 801097c:	b29b      	uxth	r3, r3
 801097e:	4618      	mov	r0, r3
 8010980:	f7f8 ff42 	bl	8009808 <lwip_htons>
 8010984:	4603      	mov	r3, r0
 8010986:	b2db      	uxtb	r3, r3
 8010988:	f003 0307 	and.w	r3, r3, #7
 801098c:	2b00      	cmp	r3, #0
 801098e:	d116      	bne.n	80109be <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	691b      	ldr	r3, [r3, #16]
 8010994:	899b      	ldrh	r3, [r3, #12]
 8010996:	b29c      	uxth	r4, r3
 8010998:	2001      	movs	r0, #1
 801099a:	f7f8 ff35 	bl	8009808 <lwip_htons>
 801099e:	4603      	mov	r3, r0
 80109a0:	461a      	mov	r2, r3
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	691b      	ldr	r3, [r3, #16]
 80109a6:	4322      	orrs	r2, r4
 80109a8:	b292      	uxth	r2, r2
 80109aa:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	8b5b      	ldrh	r3, [r3, #26]
 80109b0:	f043 0320 	orr.w	r3, r3, #32
 80109b4:	b29a      	uxth	r2, r3
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80109ba:	2300      	movs	r3, #0
 80109bc:	e004      	b.n	80109c8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80109be:	2101      	movs	r1, #1
 80109c0:	6878      	ldr	r0, [r7, #4]
 80109c2:	f000 f80b 	bl	80109dc <tcp_enqueue_flags>
 80109c6:	4603      	mov	r3, r0
}
 80109c8:	4618      	mov	r0, r3
 80109ca:	3714      	adds	r7, #20
 80109cc:	46bd      	mov	sp, r7
 80109ce:	bd90      	pop	{r4, r7, pc}
 80109d0:	080187e8 	.word	0x080187e8
 80109d4:	08018c4c 	.word	0x08018c4c
 80109d8:	0801883c 	.word	0x0801883c

080109dc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80109dc:	b580      	push	{r7, lr}
 80109de:	b088      	sub	sp, #32
 80109e0:	af02      	add	r7, sp, #8
 80109e2:	6078      	str	r0, [r7, #4]
 80109e4:	460b      	mov	r3, r1
 80109e6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80109e8:	2300      	movs	r3, #0
 80109ea:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 80109ec:	2300      	movs	r3, #0
 80109ee:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80109f0:	78fb      	ldrb	r3, [r7, #3]
 80109f2:	f003 0303 	and.w	r3, r3, #3
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d106      	bne.n	8010a08 <tcp_enqueue_flags+0x2c>
 80109fa:	4b67      	ldr	r3, [pc, #412]	@ (8010b98 <tcp_enqueue_flags+0x1bc>)
 80109fc:	f240 4211 	movw	r2, #1041	@ 0x411
 8010a00:	4966      	ldr	r1, [pc, #408]	@ (8010b9c <tcp_enqueue_flags+0x1c0>)
 8010a02:	4867      	ldr	r0, [pc, #412]	@ (8010ba0 <tcp_enqueue_flags+0x1c4>)
 8010a04:	f004 fcf0 	bl	80153e8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d106      	bne.n	8010a1c <tcp_enqueue_flags+0x40>
 8010a0e:	4b62      	ldr	r3, [pc, #392]	@ (8010b98 <tcp_enqueue_flags+0x1bc>)
 8010a10:	f240 4213 	movw	r2, #1043	@ 0x413
 8010a14:	4963      	ldr	r1, [pc, #396]	@ (8010ba4 <tcp_enqueue_flags+0x1c8>)
 8010a16:	4862      	ldr	r0, [pc, #392]	@ (8010ba0 <tcp_enqueue_flags+0x1c4>)
 8010a18:	f004 fce6 	bl	80153e8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010a1c:	78fb      	ldrb	r3, [r7, #3]
 8010a1e:	f003 0302 	and.w	r3, r3, #2
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d001      	beq.n	8010a2a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010a26:	2301      	movs	r3, #1
 8010a28:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010a2a:	7dfb      	ldrb	r3, [r7, #23]
 8010a2c:	009b      	lsls	r3, r3, #2
 8010a2e:	b2db      	uxtb	r3, r3
 8010a30:	f003 0304 	and.w	r3, r3, #4
 8010a34:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010a36:	7dbb      	ldrb	r3, [r7, #22]
 8010a38:	b29b      	uxth	r3, r3
 8010a3a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010a3e:	4619      	mov	r1, r3
 8010a40:	2036      	movs	r0, #54	@ 0x36
 8010a42:	f7fa f827 	bl	800aa94 <pbuf_alloc>
 8010a46:	60f8      	str	r0, [r7, #12]
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d109      	bne.n	8010a62 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	8b5b      	ldrh	r3, [r3, #26]
 8010a52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a56:	b29a      	uxth	r2, r3
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010a5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010a60:	e095      	b.n	8010b8e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	895a      	ldrh	r2, [r3, #10]
 8010a66:	7dbb      	ldrb	r3, [r7, #22]
 8010a68:	b29b      	uxth	r3, r3
 8010a6a:	429a      	cmp	r2, r3
 8010a6c:	d206      	bcs.n	8010a7c <tcp_enqueue_flags+0xa0>
 8010a6e:	4b4a      	ldr	r3, [pc, #296]	@ (8010b98 <tcp_enqueue_flags+0x1bc>)
 8010a70:	f240 4239 	movw	r2, #1081	@ 0x439
 8010a74:	494c      	ldr	r1, [pc, #304]	@ (8010ba8 <tcp_enqueue_flags+0x1cc>)
 8010a76:	484a      	ldr	r0, [pc, #296]	@ (8010ba0 <tcp_enqueue_flags+0x1c4>)
 8010a78:	f004 fcb6 	bl	80153e8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8010a80:	78fa      	ldrb	r2, [r7, #3]
 8010a82:	7dfb      	ldrb	r3, [r7, #23]
 8010a84:	9300      	str	r3, [sp, #0]
 8010a86:	460b      	mov	r3, r1
 8010a88:	68f9      	ldr	r1, [r7, #12]
 8010a8a:	6878      	ldr	r0, [r7, #4]
 8010a8c:	f7ff f8b8 	bl	800fc00 <tcp_create_segment>
 8010a90:	60b8      	str	r0, [r7, #8]
 8010a92:	68bb      	ldr	r3, [r7, #8]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d109      	bne.n	8010aac <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	8b5b      	ldrh	r3, [r3, #26]
 8010a9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010aa0:	b29a      	uxth	r2, r3
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010aa6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010aaa:	e070      	b.n	8010b8e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010aac:	68bb      	ldr	r3, [r7, #8]
 8010aae:	691b      	ldr	r3, [r3, #16]
 8010ab0:	f003 0303 	and.w	r3, r3, #3
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d006      	beq.n	8010ac6 <tcp_enqueue_flags+0xea>
 8010ab8:	4b37      	ldr	r3, [pc, #220]	@ (8010b98 <tcp_enqueue_flags+0x1bc>)
 8010aba:	f240 4242 	movw	r2, #1090	@ 0x442
 8010abe:	493b      	ldr	r1, [pc, #236]	@ (8010bac <tcp_enqueue_flags+0x1d0>)
 8010ac0:	4837      	ldr	r0, [pc, #220]	@ (8010ba0 <tcp_enqueue_flags+0x1c4>)
 8010ac2:	f004 fc91 	bl	80153e8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010ac6:	68bb      	ldr	r3, [r7, #8]
 8010ac8:	891b      	ldrh	r3, [r3, #8]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d006      	beq.n	8010adc <tcp_enqueue_flags+0x100>
 8010ace:	4b32      	ldr	r3, [pc, #200]	@ (8010b98 <tcp_enqueue_flags+0x1bc>)
 8010ad0:	f240 4243 	movw	r2, #1091	@ 0x443
 8010ad4:	4936      	ldr	r1, [pc, #216]	@ (8010bb0 <tcp_enqueue_flags+0x1d4>)
 8010ad6:	4832      	ldr	r0, [pc, #200]	@ (8010ba0 <tcp_enqueue_flags+0x1c4>)
 8010ad8:	f004 fc86 	bl	80153e8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d103      	bne.n	8010aec <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	68ba      	ldr	r2, [r7, #8]
 8010ae8:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010aea:	e00d      	b.n	8010b08 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010af0:	613b      	str	r3, [r7, #16]
 8010af2:	e002      	b.n	8010afa <tcp_enqueue_flags+0x11e>
 8010af4:	693b      	ldr	r3, [r7, #16]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	613b      	str	r3, [r7, #16]
 8010afa:	693b      	ldr	r3, [r7, #16]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d1f8      	bne.n	8010af4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010b02:	693b      	ldr	r3, [r7, #16]
 8010b04:	68ba      	ldr	r2, [r7, #8]
 8010b06:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010b10:	78fb      	ldrb	r3, [r7, #3]
 8010b12:	f003 0302 	and.w	r3, r3, #2
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d104      	bne.n	8010b24 <tcp_enqueue_flags+0x148>
 8010b1a:	78fb      	ldrb	r3, [r7, #3]
 8010b1c:	f003 0301 	and.w	r3, r3, #1
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d004      	beq.n	8010b2e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010b28:	1c5a      	adds	r2, r3, #1
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010b2e:	78fb      	ldrb	r3, [r7, #3]
 8010b30:	f003 0301 	and.w	r3, r3, #1
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d006      	beq.n	8010b46 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	8b5b      	ldrh	r3, [r3, #26]
 8010b3c:	f043 0320 	orr.w	r3, r3, #32
 8010b40:	b29a      	uxth	r2, r3
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010b46:	68bb      	ldr	r3, [r7, #8]
 8010b48:	685b      	ldr	r3, [r3, #4]
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	f7fa fb6e 	bl	800b22c <pbuf_clen>
 8010b50:	4603      	mov	r3, r0
 8010b52:	461a      	mov	r2, r3
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010b5a:	4413      	add	r3, r2
 8010b5c:	b29a      	uxth	r2, r3
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d00e      	beq.n	8010b8c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d10a      	bne.n	8010b8c <tcp_enqueue_flags+0x1b0>
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d106      	bne.n	8010b8c <tcp_enqueue_flags+0x1b0>
 8010b7e:	4b06      	ldr	r3, [pc, #24]	@ (8010b98 <tcp_enqueue_flags+0x1bc>)
 8010b80:	f240 4265 	movw	r2, #1125	@ 0x465
 8010b84:	490b      	ldr	r1, [pc, #44]	@ (8010bb4 <tcp_enqueue_flags+0x1d8>)
 8010b86:	4806      	ldr	r0, [pc, #24]	@ (8010ba0 <tcp_enqueue_flags+0x1c4>)
 8010b88:	f004 fc2e 	bl	80153e8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010b8c:	2300      	movs	r3, #0
}
 8010b8e:	4618      	mov	r0, r3
 8010b90:	3718      	adds	r7, #24
 8010b92:	46bd      	mov	sp, r7
 8010b94:	bd80      	pop	{r7, pc}
 8010b96:	bf00      	nop
 8010b98:	080187e8 	.word	0x080187e8
 8010b9c:	08018c68 	.word	0x08018c68
 8010ba0:	0801883c 	.word	0x0801883c
 8010ba4:	08018cc0 	.word	0x08018cc0
 8010ba8:	08018ce0 	.word	0x08018ce0
 8010bac:	08018d1c 	.word	0x08018d1c
 8010bb0:	08018d34 	.word	0x08018d34
 8010bb4:	08018d60 	.word	0x08018d60

08010bb8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010bb8:	b5b0      	push	{r4, r5, r7, lr}
 8010bba:	b08a      	sub	sp, #40	@ 0x28
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d106      	bne.n	8010bd4 <tcp_output+0x1c>
 8010bc6:	4b8a      	ldr	r3, [pc, #552]	@ (8010df0 <tcp_output+0x238>)
 8010bc8:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8010bcc:	4989      	ldr	r1, [pc, #548]	@ (8010df4 <tcp_output+0x23c>)
 8010bce:	488a      	ldr	r0, [pc, #552]	@ (8010df8 <tcp_output+0x240>)
 8010bd0:	f004 fc0a 	bl	80153e8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	7d1b      	ldrb	r3, [r3, #20]
 8010bd8:	2b01      	cmp	r3, #1
 8010bda:	d106      	bne.n	8010bea <tcp_output+0x32>
 8010bdc:	4b84      	ldr	r3, [pc, #528]	@ (8010df0 <tcp_output+0x238>)
 8010bde:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8010be2:	4986      	ldr	r1, [pc, #536]	@ (8010dfc <tcp_output+0x244>)
 8010be4:	4884      	ldr	r0, [pc, #528]	@ (8010df8 <tcp_output+0x240>)
 8010be6:	f004 fbff 	bl	80153e8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010bea:	4b85      	ldr	r3, [pc, #532]	@ (8010e00 <tcp_output+0x248>)
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	687a      	ldr	r2, [r7, #4]
 8010bf0:	429a      	cmp	r2, r3
 8010bf2:	d101      	bne.n	8010bf8 <tcp_output+0x40>
    return ERR_OK;
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	e1d1      	b.n	8010f9c <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010c04:	4293      	cmp	r3, r2
 8010c06:	bf28      	it	cs
 8010c08:	4613      	movcs	r3, r2
 8010c0a:	b29b      	uxth	r3, r3
 8010c0c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c12:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8010c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d10b      	bne.n	8010c32 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	8b5b      	ldrh	r3, [r3, #26]
 8010c1e:	f003 0302 	and.w	r3, r3, #2
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	f000 81ad 	beq.w	8010f82 <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 8010c28:	6878      	ldr	r0, [r7, #4]
 8010c2a:	f000 fddb 	bl	80117e4 <tcp_send_empty_ack>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	e1b4      	b.n	8010f9c <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010c32:	6879      	ldr	r1, [r7, #4]
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	3304      	adds	r3, #4
 8010c38:	461a      	mov	r2, r3
 8010c3a:	6878      	ldr	r0, [r7, #4]
 8010c3c:	f7fe ffc4 	bl	800fbc8 <tcp_route>
 8010c40:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010c42:	697b      	ldr	r3, [r7, #20]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d102      	bne.n	8010c4e <tcp_output+0x96>
    return ERR_RTE;
 8010c48:	f06f 0303 	mvn.w	r3, #3
 8010c4c:	e1a6      	b.n	8010f9c <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d003      	beq.n	8010c5c <tcp_output+0xa4>
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d111      	bne.n	8010c80 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010c5c:	697b      	ldr	r3, [r7, #20]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d002      	beq.n	8010c68 <tcp_output+0xb0>
 8010c62:	697b      	ldr	r3, [r7, #20]
 8010c64:	3304      	adds	r3, #4
 8010c66:	e000      	b.n	8010c6a <tcp_output+0xb2>
 8010c68:	2300      	movs	r3, #0
 8010c6a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010c6c:	693b      	ldr	r3, [r7, #16]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d102      	bne.n	8010c78 <tcp_output+0xc0>
      return ERR_RTE;
 8010c72:	f06f 0303 	mvn.w	r3, #3
 8010c76:	e191      	b.n	8010f9c <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010c78:	693b      	ldr	r3, [r7, #16]
 8010c7a:	681a      	ldr	r2, [r3, #0]
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c82:	691b      	ldr	r3, [r3, #16]
 8010c84:	685b      	ldr	r3, [r3, #4]
 8010c86:	4618      	mov	r0, r3
 8010c88:	f7f8 fdd3 	bl	8009832 <lwip_htonl>
 8010c8c:	4602      	mov	r2, r0
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c92:	1ad3      	subs	r3, r2, r3
 8010c94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010c96:	8912      	ldrh	r2, [r2, #8]
 8010c98:	4413      	add	r3, r2
 8010c9a:	69ba      	ldr	r2, [r7, #24]
 8010c9c:	429a      	cmp	r2, r3
 8010c9e:	d227      	bcs.n	8010cf0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010ca6:	461a      	mov	r2, r3
 8010ca8:	69bb      	ldr	r3, [r7, #24]
 8010caa:	4293      	cmp	r3, r2
 8010cac:	d114      	bne.n	8010cd8 <tcp_output+0x120>
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d110      	bne.n	8010cd8 <tcp_output+0x120>
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d10b      	bne.n	8010cd8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	2201      	movs	r2, #1
 8010ccc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	8b5b      	ldrh	r3, [r3, #26]
 8010cdc:	f003 0302 	and.w	r3, r3, #2
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	f000 8150 	beq.w	8010f86 <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 8010ce6:	6878      	ldr	r0, [r7, #4]
 8010ce8:	f000 fd7c 	bl	80117e4 <tcp_send_empty_ack>
 8010cec:	4603      	mov	r3, r0
 8010cee:	e155      	b.n	8010f9c <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010cfc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010cfe:	6a3b      	ldr	r3, [r7, #32]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	f000 811f 	beq.w	8010f44 <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 8010d06:	e002      	b.n	8010d0e <tcp_output+0x156>
 8010d08:	6a3b      	ldr	r3, [r7, #32]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	623b      	str	r3, [r7, #32]
 8010d0e:	6a3b      	ldr	r3, [r7, #32]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d1f8      	bne.n	8010d08 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010d16:	e115      	b.n	8010f44 <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d1a:	691b      	ldr	r3, [r3, #16]
 8010d1c:	899b      	ldrh	r3, [r3, #12]
 8010d1e:	b29b      	uxth	r3, r3
 8010d20:	4618      	mov	r0, r3
 8010d22:	f7f8 fd71 	bl	8009808 <lwip_htons>
 8010d26:	4603      	mov	r3, r0
 8010d28:	b2db      	uxtb	r3, r3
 8010d2a:	f003 0304 	and.w	r3, r3, #4
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d006      	beq.n	8010d40 <tcp_output+0x188>
 8010d32:	4b2f      	ldr	r3, [pc, #188]	@ (8010df0 <tcp_output+0x238>)
 8010d34:	f240 5236 	movw	r2, #1334	@ 0x536
 8010d38:	4932      	ldr	r1, [pc, #200]	@ (8010e04 <tcp_output+0x24c>)
 8010d3a:	482f      	ldr	r0, [pc, #188]	@ (8010df8 <tcp_output+0x240>)
 8010d3c:	f004 fb54 	bl	80153e8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d01f      	beq.n	8010d88 <tcp_output+0x1d0>
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	8b5b      	ldrh	r3, [r3, #26]
 8010d4c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d119      	bne.n	8010d88 <tcp_output+0x1d0>
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d00b      	beq.n	8010d74 <tcp_output+0x1bc>
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d110      	bne.n	8010d88 <tcp_output+0x1d0>
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d6a:	891a      	ldrh	r2, [r3, #8]
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d70:	429a      	cmp	r2, r3
 8010d72:	d209      	bcs.n	8010d88 <tcp_output+0x1d0>
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d004      	beq.n	8010d88 <tcp_output+0x1d0>
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010d84:	2b08      	cmp	r3, #8
 8010d86:	d901      	bls.n	8010d8c <tcp_output+0x1d4>
 8010d88:	2301      	movs	r3, #1
 8010d8a:	e000      	b.n	8010d8e <tcp_output+0x1d6>
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d106      	bne.n	8010da0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	8b5b      	ldrh	r3, [r3, #26]
 8010d96:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	f000 80e7 	beq.w	8010f6e <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	7d1b      	ldrb	r3, [r3, #20]
 8010da4:	2b02      	cmp	r3, #2
 8010da6:	d00d      	beq.n	8010dc4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010daa:	691b      	ldr	r3, [r3, #16]
 8010dac:	899b      	ldrh	r3, [r3, #12]
 8010dae:	b29c      	uxth	r4, r3
 8010db0:	2010      	movs	r0, #16
 8010db2:	f7f8 fd29 	bl	8009808 <lwip_htons>
 8010db6:	4603      	mov	r3, r0
 8010db8:	461a      	mov	r2, r3
 8010dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dbc:	691b      	ldr	r3, [r3, #16]
 8010dbe:	4322      	orrs	r2, r4
 8010dc0:	b292      	uxth	r2, r2
 8010dc2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010dc4:	697a      	ldr	r2, [r7, #20]
 8010dc6:	6879      	ldr	r1, [r7, #4]
 8010dc8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010dca:	f000 f90b 	bl	8010fe4 <tcp_output_segment>
 8010dce:	4603      	mov	r3, r0
 8010dd0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d016      	beq.n	8010e08 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	8b5b      	ldrh	r3, [r3, #26]
 8010dde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010de2:	b29a      	uxth	r2, r3
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	835a      	strh	r2, [r3, #26]
      return err;
 8010de8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010dec:	e0d6      	b.n	8010f9c <tcp_output+0x3e4>
 8010dee:	bf00      	nop
 8010df0:	080187e8 	.word	0x080187e8
 8010df4:	08018d88 	.word	0x08018d88
 8010df8:	0801883c 	.word	0x0801883c
 8010dfc:	08018da0 	.word	0x08018da0
 8010e00:	24003324 	.word	0x24003324
 8010e04:	08018dc8 	.word	0x08018dc8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 8010e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e10:	681a      	ldr	r2, [r3, #0]
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	7d1b      	ldrb	r3, [r3, #20]
 8010e1a:	2b02      	cmp	r3, #2
 8010e1c:	d006      	beq.n	8010e2c <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	8b5b      	ldrh	r3, [r3, #26]
 8010e22:	f023 0303 	bic.w	r3, r3, #3
 8010e26:	b29a      	uxth	r2, r3
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e2e:	691b      	ldr	r3, [r3, #16]
 8010e30:	685b      	ldr	r3, [r3, #4]
 8010e32:	4618      	mov	r0, r3
 8010e34:	f7f8 fcfd 	bl	8009832 <lwip_htonl>
 8010e38:	4604      	mov	r4, r0
 8010e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e3c:	891b      	ldrh	r3, [r3, #8]
 8010e3e:	461d      	mov	r5, r3
 8010e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e42:	691b      	ldr	r3, [r3, #16]
 8010e44:	899b      	ldrh	r3, [r3, #12]
 8010e46:	b29b      	uxth	r3, r3
 8010e48:	4618      	mov	r0, r3
 8010e4a:	f7f8 fcdd 	bl	8009808 <lwip_htons>
 8010e4e:	4603      	mov	r3, r0
 8010e50:	b2db      	uxtb	r3, r3
 8010e52:	f003 0303 	and.w	r3, r3, #3
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d001      	beq.n	8010e5e <tcp_output+0x2a6>
 8010e5a:	2301      	movs	r3, #1
 8010e5c:	e000      	b.n	8010e60 <tcp_output+0x2a8>
 8010e5e:	2300      	movs	r3, #0
 8010e60:	442b      	add	r3, r5
 8010e62:	4423      	add	r3, r4
 8010e64:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010e6a:	68bb      	ldr	r3, [r7, #8]
 8010e6c:	1ad3      	subs	r3, r2, r3
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	da02      	bge.n	8010e78 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	68ba      	ldr	r2, [r7, #8]
 8010e76:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e7a:	891b      	ldrh	r3, [r3, #8]
 8010e7c:	461c      	mov	r4, r3
 8010e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e80:	691b      	ldr	r3, [r3, #16]
 8010e82:	899b      	ldrh	r3, [r3, #12]
 8010e84:	b29b      	uxth	r3, r3
 8010e86:	4618      	mov	r0, r3
 8010e88:	f7f8 fcbe 	bl	8009808 <lwip_htons>
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	b2db      	uxtb	r3, r3
 8010e90:	f003 0303 	and.w	r3, r3, #3
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d001      	beq.n	8010e9c <tcp_output+0x2e4>
 8010e98:	2301      	movs	r3, #1
 8010e9a:	e000      	b.n	8010e9e <tcp_output+0x2e6>
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	4423      	add	r3, r4
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d049      	beq.n	8010f38 <tcp_output+0x380>
      seg->next = NULL;
 8010ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d105      	bne.n	8010ebe <tcp_output+0x306>
        pcb->unacked = seg;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010eb6:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8010eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eba:	623b      	str	r3, [r7, #32]
 8010ebc:	e03f      	b.n	8010f3e <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ec0:	691b      	ldr	r3, [r3, #16]
 8010ec2:	685b      	ldr	r3, [r3, #4]
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	f7f8 fcb4 	bl	8009832 <lwip_htonl>
 8010eca:	4604      	mov	r4, r0
 8010ecc:	6a3b      	ldr	r3, [r7, #32]
 8010ece:	691b      	ldr	r3, [r3, #16]
 8010ed0:	685b      	ldr	r3, [r3, #4]
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f7f8 fcad 	bl	8009832 <lwip_htonl>
 8010ed8:	4603      	mov	r3, r0
 8010eda:	1ae3      	subs	r3, r4, r3
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	da24      	bge.n	8010f2a <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	3370      	adds	r3, #112	@ 0x70
 8010ee4:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010ee6:	e002      	b.n	8010eee <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010ee8:	69fb      	ldr	r3, [r7, #28]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010eee:	69fb      	ldr	r3, [r7, #28]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d011      	beq.n	8010f1a <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010ef6:	69fb      	ldr	r3, [r7, #28]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	691b      	ldr	r3, [r3, #16]
 8010efc:	685b      	ldr	r3, [r3, #4]
 8010efe:	4618      	mov	r0, r3
 8010f00:	f7f8 fc97 	bl	8009832 <lwip_htonl>
 8010f04:	4604      	mov	r4, r0
 8010f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f08:	691b      	ldr	r3, [r3, #16]
 8010f0a:	685b      	ldr	r3, [r3, #4]
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f7f8 fc90 	bl	8009832 <lwip_htonl>
 8010f12:	4603      	mov	r3, r0
 8010f14:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	dbe6      	blt.n	8010ee8 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 8010f1a:	69fb      	ldr	r3, [r7, #28]
 8010f1c:	681a      	ldr	r2, [r3, #0]
 8010f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f20:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010f22:	69fb      	ldr	r3, [r7, #28]
 8010f24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010f26:	601a      	str	r2, [r3, #0]
 8010f28:	e009      	b.n	8010f3e <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010f2a:	6a3b      	ldr	r3, [r7, #32]
 8010f2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010f2e:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010f30:	6a3b      	ldr	r3, [r7, #32]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	623b      	str	r3, [r7, #32]
 8010f36:	e002      	b.n	8010f3e <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010f38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010f3a:	f7fb fda6 	bl	800ca8a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f42:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8010f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d012      	beq.n	8010f70 <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f4c:	691b      	ldr	r3, [r3, #16]
 8010f4e:	685b      	ldr	r3, [r3, #4]
 8010f50:	4618      	mov	r0, r3
 8010f52:	f7f8 fc6e 	bl	8009832 <lwip_htonl>
 8010f56:	4602      	mov	r2, r0
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010f5c:	1ad3      	subs	r3, r2, r3
 8010f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010f60:	8912      	ldrh	r2, [r2, #8]
 8010f62:	4413      	add	r3, r2
  while (seg != NULL &&
 8010f64:	69ba      	ldr	r2, [r7, #24]
 8010f66:	429a      	cmp	r2, r3
 8010f68:	f4bf aed6 	bcs.w	8010d18 <tcp_output+0x160>
 8010f6c:	e000      	b.n	8010f70 <tcp_output+0x3b8>
      break;
 8010f6e:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d108      	bne.n	8010f8a <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8010f80:	e004      	b.n	8010f8c <tcp_output+0x3d4>
    goto output_done;
 8010f82:	bf00      	nop
 8010f84:	e002      	b.n	8010f8c <tcp_output+0x3d4>
    goto output_done;
 8010f86:	bf00      	nop
 8010f88:	e000      	b.n	8010f8c <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010f8a:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	8b5b      	ldrh	r3, [r3, #26]
 8010f90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010f94:	b29a      	uxth	r2, r3
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010f9a:	2300      	movs	r3, #0
}
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	3728      	adds	r7, #40	@ 0x28
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	bdb0      	pop	{r4, r5, r7, pc}

08010fa4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b082      	sub	sp, #8
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d106      	bne.n	8010fc0 <tcp_output_segment_busy+0x1c>
 8010fb2:	4b09      	ldr	r3, [pc, #36]	@ (8010fd8 <tcp_output_segment_busy+0x34>)
 8010fb4:	f240 529a 	movw	r2, #1434	@ 0x59a
 8010fb8:	4908      	ldr	r1, [pc, #32]	@ (8010fdc <tcp_output_segment_busy+0x38>)
 8010fba:	4809      	ldr	r0, [pc, #36]	@ (8010fe0 <tcp_output_segment_busy+0x3c>)
 8010fbc:	f004 fa14 	bl	80153e8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	685b      	ldr	r3, [r3, #4]
 8010fc4:	7b9b      	ldrb	r3, [r3, #14]
 8010fc6:	2b01      	cmp	r3, #1
 8010fc8:	d001      	beq.n	8010fce <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8010fca:	2301      	movs	r3, #1
 8010fcc:	e000      	b.n	8010fd0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010fce:	2300      	movs	r3, #0
}
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	3708      	adds	r7, #8
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bd80      	pop	{r7, pc}
 8010fd8:	080187e8 	.word	0x080187e8
 8010fdc:	08018de0 	.word	0x08018de0
 8010fe0:	0801883c 	.word	0x0801883c

08010fe4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010fe4:	b5b0      	push	{r4, r5, r7, lr}
 8010fe6:	b08c      	sub	sp, #48	@ 0x30
 8010fe8:	af04      	add	r7, sp, #16
 8010fea:	60f8      	str	r0, [r7, #12]
 8010fec:	60b9      	str	r1, [r7, #8]
 8010fee:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d106      	bne.n	8011004 <tcp_output_segment+0x20>
 8010ff6:	4b64      	ldr	r3, [pc, #400]	@ (8011188 <tcp_output_segment+0x1a4>)
 8010ff8:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8010ffc:	4963      	ldr	r1, [pc, #396]	@ (801118c <tcp_output_segment+0x1a8>)
 8010ffe:	4864      	ldr	r0, [pc, #400]	@ (8011190 <tcp_output_segment+0x1ac>)
 8011000:	f004 f9f2 	bl	80153e8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011004:	68bb      	ldr	r3, [r7, #8]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d106      	bne.n	8011018 <tcp_output_segment+0x34>
 801100a:	4b5f      	ldr	r3, [pc, #380]	@ (8011188 <tcp_output_segment+0x1a4>)
 801100c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8011010:	4960      	ldr	r1, [pc, #384]	@ (8011194 <tcp_output_segment+0x1b0>)
 8011012:	485f      	ldr	r0, [pc, #380]	@ (8011190 <tcp_output_segment+0x1ac>)
 8011014:	f004 f9e8 	bl	80153e8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d106      	bne.n	801102c <tcp_output_segment+0x48>
 801101e:	4b5a      	ldr	r3, [pc, #360]	@ (8011188 <tcp_output_segment+0x1a4>)
 8011020:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8011024:	495c      	ldr	r1, [pc, #368]	@ (8011198 <tcp_output_segment+0x1b4>)
 8011026:	485a      	ldr	r0, [pc, #360]	@ (8011190 <tcp_output_segment+0x1ac>)
 8011028:	f004 f9de 	bl	80153e8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801102c:	68f8      	ldr	r0, [r7, #12]
 801102e:	f7ff ffb9 	bl	8010fa4 <tcp_output_segment_busy>
 8011032:	4603      	mov	r3, r0
 8011034:	2b00      	cmp	r3, #0
 8011036:	d001      	beq.n	801103c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011038:	2300      	movs	r3, #0
 801103a:	e0a1      	b.n	8011180 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801103c:	68bb      	ldr	r3, [r7, #8]
 801103e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	691c      	ldr	r4, [r3, #16]
 8011044:	4610      	mov	r0, r2
 8011046:	f7f8 fbf4 	bl	8009832 <lwip_htonl>
 801104a:	4603      	mov	r3, r0
 801104c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801104e:	68bb      	ldr	r3, [r7, #8]
 8011050:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	691c      	ldr	r4, [r3, #16]
 8011056:	4610      	mov	r0, r2
 8011058:	f7f8 fbd6 	bl	8009808 <lwip_htons>
 801105c:	4603      	mov	r3, r0
 801105e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011060:	68bb      	ldr	r3, [r7, #8]
 8011062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011064:	68ba      	ldr	r2, [r7, #8]
 8011066:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8011068:	441a      	add	r2, r3
 801106a:	68bb      	ldr	r3, [r7, #8]
 801106c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	691b      	ldr	r3, [r3, #16]
 8011072:	3314      	adds	r3, #20
 8011074:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	7b1b      	ldrb	r3, [r3, #12]
 801107a:	f003 0301 	and.w	r3, r3, #1
 801107e:	2b00      	cmp	r3, #0
 8011080:	d015      	beq.n	80110ae <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011082:	68bb      	ldr	r3, [r7, #8]
 8011084:	3304      	adds	r3, #4
 8011086:	461a      	mov	r2, r3
 8011088:	6879      	ldr	r1, [r7, #4]
 801108a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801108e:	f7fc f8d1 	bl	800d234 <tcp_eff_send_mss_netif>
 8011092:	4603      	mov	r3, r0
 8011094:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011096:	8b7b      	ldrh	r3, [r7, #26]
 8011098:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801109c:	4618      	mov	r0, r3
 801109e:	f7f8 fbc8 	bl	8009832 <lwip_htonl>
 80110a2:	4602      	mov	r2, r0
 80110a4:	69fb      	ldr	r3, [r7, #28]
 80110a6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80110a8:	69fb      	ldr	r3, [r7, #28]
 80110aa:	3304      	adds	r3, #4
 80110ac:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80110ae:	68bb      	ldr	r3, [r7, #8]
 80110b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	da02      	bge.n	80110be <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80110b8:	68bb      	ldr	r3, [r7, #8]
 80110ba:	2200      	movs	r2, #0
 80110bc:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80110be:	68bb      	ldr	r3, [r7, #8]
 80110c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d10c      	bne.n	80110e0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80110c6:	4b35      	ldr	r3, [pc, #212]	@ (801119c <tcp_output_segment+0x1b8>)
 80110c8:	681a      	ldr	r2, [r3, #0]
 80110ca:	68bb      	ldr	r3, [r7, #8]
 80110cc:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	691b      	ldr	r3, [r3, #16]
 80110d2:	685b      	ldr	r3, [r3, #4]
 80110d4:	4618      	mov	r0, r3
 80110d6:	f7f8 fbac 	bl	8009832 <lwip_htonl>
 80110da:	4602      	mov	r2, r0
 80110dc:	68bb      	ldr	r3, [r7, #8]
 80110de:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	691a      	ldr	r2, [r3, #16]
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	685b      	ldr	r3, [r3, #4]
 80110e8:	685b      	ldr	r3, [r3, #4]
 80110ea:	1ad3      	subs	r3, r2, r3
 80110ec:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	685b      	ldr	r3, [r3, #4]
 80110f2:	8959      	ldrh	r1, [r3, #10]
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	685b      	ldr	r3, [r3, #4]
 80110f8:	8b3a      	ldrh	r2, [r7, #24]
 80110fa:	1a8a      	subs	r2, r1, r2
 80110fc:	b292      	uxth	r2, r2
 80110fe:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	685b      	ldr	r3, [r3, #4]
 8011104:	8919      	ldrh	r1, [r3, #8]
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	685b      	ldr	r3, [r3, #4]
 801110a:	8b3a      	ldrh	r2, [r7, #24]
 801110c:	1a8a      	subs	r2, r1, r2
 801110e:	b292      	uxth	r2, r2
 8011110:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	685b      	ldr	r3, [r3, #4]
 8011116:	68fa      	ldr	r2, [r7, #12]
 8011118:	6912      	ldr	r2, [r2, #16]
 801111a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	691b      	ldr	r3, [r3, #16]
 8011120:	2200      	movs	r2, #0
 8011122:	741a      	strb	r2, [r3, #16]
 8011124:	2200      	movs	r2, #0
 8011126:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	691a      	ldr	r2, [r3, #16]
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	7b1b      	ldrb	r3, [r3, #12]
 8011130:	f003 0301 	and.w	r3, r3, #1
 8011134:	2b00      	cmp	r3, #0
 8011136:	d001      	beq.n	801113c <tcp_output_segment+0x158>
 8011138:	2318      	movs	r3, #24
 801113a:	e000      	b.n	801113e <tcp_output_segment+0x15a>
 801113c:	2314      	movs	r3, #20
 801113e:	4413      	add	r3, r2
 8011140:	69fa      	ldr	r2, [r7, #28]
 8011142:	429a      	cmp	r2, r3
 8011144:	d006      	beq.n	8011154 <tcp_output_segment+0x170>
 8011146:	4b10      	ldr	r3, [pc, #64]	@ (8011188 <tcp_output_segment+0x1a4>)
 8011148:	f240 621c 	movw	r2, #1564	@ 0x61c
 801114c:	4914      	ldr	r1, [pc, #80]	@ (80111a0 <tcp_output_segment+0x1bc>)
 801114e:	4810      	ldr	r0, [pc, #64]	@ (8011190 <tcp_output_segment+0x1ac>)
 8011150:	f004 f94a 	bl	80153e8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	6858      	ldr	r0, [r3, #4]
 8011158:	68b9      	ldr	r1, [r7, #8]
 801115a:	68bb      	ldr	r3, [r7, #8]
 801115c:	1d1c      	adds	r4, r3, #4
 801115e:	68bb      	ldr	r3, [r7, #8]
 8011160:	7add      	ldrb	r5, [r3, #11]
 8011162:	68bb      	ldr	r3, [r7, #8]
 8011164:	7a9b      	ldrb	r3, [r3, #10]
 8011166:	687a      	ldr	r2, [r7, #4]
 8011168:	9202      	str	r2, [sp, #8]
 801116a:	2206      	movs	r2, #6
 801116c:	9201      	str	r2, [sp, #4]
 801116e:	9300      	str	r3, [sp, #0]
 8011170:	462b      	mov	r3, r5
 8011172:	4622      	mov	r2, r4
 8011174:	f002 feba 	bl	8013eec <ip4_output_if>
 8011178:	4603      	mov	r3, r0
 801117a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801117c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011180:	4618      	mov	r0, r3
 8011182:	3720      	adds	r7, #32
 8011184:	46bd      	mov	sp, r7
 8011186:	bdb0      	pop	{r4, r5, r7, pc}
 8011188:	080187e8 	.word	0x080187e8
 801118c:	08018e08 	.word	0x08018e08
 8011190:	0801883c 	.word	0x0801883c
 8011194:	08018e28 	.word	0x08018e28
 8011198:	08018e48 	.word	0x08018e48
 801119c:	240032d4 	.word	0x240032d4
 80111a0:	08018e6c 	.word	0x08018e6c

080111a4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80111a4:	b5b0      	push	{r4, r5, r7, lr}
 80111a6:	b084      	sub	sp, #16
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d106      	bne.n	80111c0 <tcp_rexmit_rto_prepare+0x1c>
 80111b2:	4b36      	ldr	r3, [pc, #216]	@ (801128c <tcp_rexmit_rto_prepare+0xe8>)
 80111b4:	f240 6263 	movw	r2, #1635	@ 0x663
 80111b8:	4935      	ldr	r1, [pc, #212]	@ (8011290 <tcp_rexmit_rto_prepare+0xec>)
 80111ba:	4836      	ldr	r0, [pc, #216]	@ (8011294 <tcp_rexmit_rto_prepare+0xf0>)
 80111bc:	f004 f914 	bl	80153e8 <iprintf>

  if (pcb->unacked == NULL) {
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d102      	bne.n	80111ce <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80111c8:	f06f 0305 	mvn.w	r3, #5
 80111cc:	e059      	b.n	8011282 <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80111d2:	60fb      	str	r3, [r7, #12]
 80111d4:	e00b      	b.n	80111ee <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80111d6:	68f8      	ldr	r0, [r7, #12]
 80111d8:	f7ff fee4 	bl	8010fa4 <tcp_output_segment_busy>
 80111dc:	4603      	mov	r3, r0
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d002      	beq.n	80111e8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80111e2:	f06f 0305 	mvn.w	r3, #5
 80111e6:	e04c      	b.n	8011282 <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	60fb      	str	r3, [r7, #12]
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d1ef      	bne.n	80111d6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80111f6:	68f8      	ldr	r0, [r7, #12]
 80111f8:	f7ff fed4 	bl	8010fa4 <tcp_output_segment_busy>
 80111fc:	4603      	mov	r3, r0
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d002      	beq.n	8011208 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011202:	f06f 0305 	mvn.w	r3, #5
 8011206:	e03c      	b.n	8011282 <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011214:	2b00      	cmp	r3, #0
 8011216:	d104      	bne.n	8011222 <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	895a      	ldrh	r2, [r3, #10]
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	2200      	movs	r2, #0
 801122e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	8b5b      	ldrh	r3, [r3, #26]
 8011234:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8011238:	b29a      	uxth	r2, r3
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	691b      	ldr	r3, [r3, #16]
 8011242:	685b      	ldr	r3, [r3, #4]
 8011244:	4618      	mov	r0, r3
 8011246:	f7f8 faf4 	bl	8009832 <lwip_htonl>
 801124a:	4604      	mov	r4, r0
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	891b      	ldrh	r3, [r3, #8]
 8011250:	461d      	mov	r5, r3
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	691b      	ldr	r3, [r3, #16]
 8011256:	899b      	ldrh	r3, [r3, #12]
 8011258:	b29b      	uxth	r3, r3
 801125a:	4618      	mov	r0, r3
 801125c:	f7f8 fad4 	bl	8009808 <lwip_htons>
 8011260:	4603      	mov	r3, r0
 8011262:	b2db      	uxtb	r3, r3
 8011264:	f003 0303 	and.w	r3, r3, #3
 8011268:	2b00      	cmp	r3, #0
 801126a:	d001      	beq.n	8011270 <tcp_rexmit_rto_prepare+0xcc>
 801126c:	2301      	movs	r3, #1
 801126e:	e000      	b.n	8011272 <tcp_rexmit_rto_prepare+0xce>
 8011270:	2300      	movs	r3, #0
 8011272:	442b      	add	r3, r5
 8011274:	18e2      	adds	r2, r4, r3
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	2200      	movs	r2, #0
 801127e:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8011280:	2300      	movs	r3, #0
}
 8011282:	4618      	mov	r0, r3
 8011284:	3710      	adds	r7, #16
 8011286:	46bd      	mov	sp, r7
 8011288:	bdb0      	pop	{r4, r5, r7, pc}
 801128a:	bf00      	nop
 801128c:	080187e8 	.word	0x080187e8
 8011290:	08018e80 	.word	0x08018e80
 8011294:	0801883c 	.word	0x0801883c

08011298 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011298:	b580      	push	{r7, lr}
 801129a:	b082      	sub	sp, #8
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d106      	bne.n	80112b4 <tcp_rexmit_rto_commit+0x1c>
 80112a6:	4b0d      	ldr	r3, [pc, #52]	@ (80112dc <tcp_rexmit_rto_commit+0x44>)
 80112a8:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80112ac:	490c      	ldr	r1, [pc, #48]	@ (80112e0 <tcp_rexmit_rto_commit+0x48>)
 80112ae:	480d      	ldr	r0, [pc, #52]	@ (80112e4 <tcp_rexmit_rto_commit+0x4c>)
 80112b0:	f004 f89a 	bl	80153e8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80112ba:	2bff      	cmp	r3, #255	@ 0xff
 80112bc:	d007      	beq.n	80112ce <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80112c4:	3301      	adds	r3, #1
 80112c6:	b2da      	uxtb	r2, r3
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80112ce:	6878      	ldr	r0, [r7, #4]
 80112d0:	f7ff fc72 	bl	8010bb8 <tcp_output>
}
 80112d4:	bf00      	nop
 80112d6:	3708      	adds	r7, #8
 80112d8:	46bd      	mov	sp, r7
 80112da:	bd80      	pop	{r7, pc}
 80112dc:	080187e8 	.word	0x080187e8
 80112e0:	08018ea4 	.word	0x08018ea4
 80112e4:	0801883c 	.word	0x0801883c

080112e8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b082      	sub	sp, #8
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d106      	bne.n	8011304 <tcp_rexmit_rto+0x1c>
 80112f6:	4b0a      	ldr	r3, [pc, #40]	@ (8011320 <tcp_rexmit_rto+0x38>)
 80112f8:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80112fc:	4909      	ldr	r1, [pc, #36]	@ (8011324 <tcp_rexmit_rto+0x3c>)
 80112fe:	480a      	ldr	r0, [pc, #40]	@ (8011328 <tcp_rexmit_rto+0x40>)
 8011300:	f004 f872 	bl	80153e8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011304:	6878      	ldr	r0, [r7, #4]
 8011306:	f7ff ff4d 	bl	80111a4 <tcp_rexmit_rto_prepare>
 801130a:	4603      	mov	r3, r0
 801130c:	2b00      	cmp	r3, #0
 801130e:	d102      	bne.n	8011316 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011310:	6878      	ldr	r0, [r7, #4]
 8011312:	f7ff ffc1 	bl	8011298 <tcp_rexmit_rto_commit>
  }
}
 8011316:	bf00      	nop
 8011318:	3708      	adds	r7, #8
 801131a:	46bd      	mov	sp, r7
 801131c:	bd80      	pop	{r7, pc}
 801131e:	bf00      	nop
 8011320:	080187e8 	.word	0x080187e8
 8011324:	08018ec8 	.word	0x08018ec8
 8011328:	0801883c 	.word	0x0801883c

0801132c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801132c:	b590      	push	{r4, r7, lr}
 801132e:	b085      	sub	sp, #20
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d106      	bne.n	8011348 <tcp_rexmit+0x1c>
 801133a:	4b2f      	ldr	r3, [pc, #188]	@ (80113f8 <tcp_rexmit+0xcc>)
 801133c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8011340:	492e      	ldr	r1, [pc, #184]	@ (80113fc <tcp_rexmit+0xd0>)
 8011342:	482f      	ldr	r0, [pc, #188]	@ (8011400 <tcp_rexmit+0xd4>)
 8011344:	f004 f850 	bl	80153e8 <iprintf>

  if (pcb->unacked == NULL) {
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801134c:	2b00      	cmp	r3, #0
 801134e:	d102      	bne.n	8011356 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8011350:	f06f 0305 	mvn.w	r3, #5
 8011354:	e04c      	b.n	80113f0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801135a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801135c:	68b8      	ldr	r0, [r7, #8]
 801135e:	f7ff fe21 	bl	8010fa4 <tcp_output_segment_busy>
 8011362:	4603      	mov	r3, r0
 8011364:	2b00      	cmp	r3, #0
 8011366:	d002      	beq.n	801136e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011368:	f06f 0305 	mvn.w	r3, #5
 801136c:	e040      	b.n	80113f0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801136e:	68bb      	ldr	r3, [r7, #8]
 8011370:	681a      	ldr	r2, [r3, #0]
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	336c      	adds	r3, #108	@ 0x6c
 801137a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801137c:	e002      	b.n	8011384 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d011      	beq.n	80113b0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	691b      	ldr	r3, [r3, #16]
 8011392:	685b      	ldr	r3, [r3, #4]
 8011394:	4618      	mov	r0, r3
 8011396:	f7f8 fa4c 	bl	8009832 <lwip_htonl>
 801139a:	4604      	mov	r4, r0
 801139c:	68bb      	ldr	r3, [r7, #8]
 801139e:	691b      	ldr	r3, [r3, #16]
 80113a0:	685b      	ldr	r3, [r3, #4]
 80113a2:	4618      	mov	r0, r3
 80113a4:	f7f8 fa45 	bl	8009832 <lwip_htonl>
 80113a8:	4603      	mov	r3, r0
 80113aa:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	dbe6      	blt.n	801137e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	681a      	ldr	r2, [r3, #0]
 80113b4:	68bb      	ldr	r3, [r7, #8]
 80113b6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	68ba      	ldr	r2, [r7, #8]
 80113bc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80113be:	68bb      	ldr	r3, [r7, #8]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d103      	bne.n	80113ce <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	2200      	movs	r2, #0
 80113ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80113d4:	2bff      	cmp	r3, #255	@ 0xff
 80113d6:	d007      	beq.n	80113e8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80113de:	3301      	adds	r3, #1
 80113e0:	b2da      	uxtb	r2, r3
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	2200      	movs	r2, #0
 80113ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80113ee:	2300      	movs	r3, #0
}
 80113f0:	4618      	mov	r0, r3
 80113f2:	3714      	adds	r7, #20
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bd90      	pop	{r4, r7, pc}
 80113f8:	080187e8 	.word	0x080187e8
 80113fc:	08018ee4 	.word	0x08018ee4
 8011400:	0801883c 	.word	0x0801883c

08011404 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b082      	sub	sp, #8
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d106      	bne.n	8011420 <tcp_rexmit_fast+0x1c>
 8011412:	4b2a      	ldr	r3, [pc, #168]	@ (80114bc <tcp_rexmit_fast+0xb8>)
 8011414:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8011418:	4929      	ldr	r1, [pc, #164]	@ (80114c0 <tcp_rexmit_fast+0xbc>)
 801141a:	482a      	ldr	r0, [pc, #168]	@ (80114c4 <tcp_rexmit_fast+0xc0>)
 801141c:	f003 ffe4 	bl	80153e8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011424:	2b00      	cmp	r3, #0
 8011426:	d045      	beq.n	80114b4 <tcp_rexmit_fast+0xb0>
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	8b5b      	ldrh	r3, [r3, #26]
 801142c:	f003 0304 	and.w	r3, r3, #4
 8011430:	2b00      	cmp	r3, #0
 8011432:	d13f      	bne.n	80114b4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011434:	6878      	ldr	r0, [r7, #4]
 8011436:	f7ff ff79 	bl	801132c <tcp_rexmit>
 801143a:	4603      	mov	r3, r0
 801143c:	2b00      	cmp	r3, #0
 801143e:	d139      	bne.n	80114b4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801144c:	4293      	cmp	r3, r2
 801144e:	bf28      	it	cs
 8011450:	4613      	movcs	r3, r2
 8011452:	b29b      	uxth	r3, r3
 8011454:	2b00      	cmp	r3, #0
 8011456:	da00      	bge.n	801145a <tcp_rexmit_fast+0x56>
 8011458:	3301      	adds	r3, #1
 801145a:	105b      	asrs	r3, r3, #1
 801145c:	b29a      	uxth	r2, r3
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801146a:	461a      	mov	r2, r3
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011470:	005b      	lsls	r3, r3, #1
 8011472:	429a      	cmp	r2, r3
 8011474:	d206      	bcs.n	8011484 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801147a:	005b      	lsls	r3, r3, #1
 801147c:	b29a      	uxth	r2, r3
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801148e:	4619      	mov	r1, r3
 8011490:	0049      	lsls	r1, r1, #1
 8011492:	440b      	add	r3, r1
 8011494:	b29b      	uxth	r3, r3
 8011496:	4413      	add	r3, r2
 8011498:	b29a      	uxth	r2, r3
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	8b5b      	ldrh	r3, [r3, #26]
 80114a4:	f043 0304 	orr.w	r3, r3, #4
 80114a8:	b29a      	uxth	r2, r3
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	2200      	movs	r2, #0
 80114b2:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80114b4:	bf00      	nop
 80114b6:	3708      	adds	r7, #8
 80114b8:	46bd      	mov	sp, r7
 80114ba:	bd80      	pop	{r7, pc}
 80114bc:	080187e8 	.word	0x080187e8
 80114c0:	08018efc 	.word	0x08018efc
 80114c4:	0801883c 	.word	0x0801883c

080114c8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b086      	sub	sp, #24
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	60f8      	str	r0, [r7, #12]
 80114d0:	607b      	str	r3, [r7, #4]
 80114d2:	460b      	mov	r3, r1
 80114d4:	817b      	strh	r3, [r7, #10]
 80114d6:	4613      	mov	r3, r2
 80114d8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80114da:	897a      	ldrh	r2, [r7, #10]
 80114dc:	893b      	ldrh	r3, [r7, #8]
 80114de:	4413      	add	r3, r2
 80114e0:	b29b      	uxth	r3, r3
 80114e2:	3314      	adds	r3, #20
 80114e4:	b29b      	uxth	r3, r3
 80114e6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80114ea:	4619      	mov	r1, r3
 80114ec:	2022      	movs	r0, #34	@ 0x22
 80114ee:	f7f9 fad1 	bl	800aa94 <pbuf_alloc>
 80114f2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80114f4:	697b      	ldr	r3, [r7, #20]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d04d      	beq.n	8011596 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80114fa:	897b      	ldrh	r3, [r7, #10]
 80114fc:	3313      	adds	r3, #19
 80114fe:	697a      	ldr	r2, [r7, #20]
 8011500:	8952      	ldrh	r2, [r2, #10]
 8011502:	4293      	cmp	r3, r2
 8011504:	db06      	blt.n	8011514 <tcp_output_alloc_header_common+0x4c>
 8011506:	4b26      	ldr	r3, [pc, #152]	@ (80115a0 <tcp_output_alloc_header_common+0xd8>)
 8011508:	f240 7223 	movw	r2, #1827	@ 0x723
 801150c:	4925      	ldr	r1, [pc, #148]	@ (80115a4 <tcp_output_alloc_header_common+0xdc>)
 801150e:	4826      	ldr	r0, [pc, #152]	@ (80115a8 <tcp_output_alloc_header_common+0xe0>)
 8011510:	f003 ff6a 	bl	80153e8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011514:	697b      	ldr	r3, [r7, #20]
 8011516:	685b      	ldr	r3, [r3, #4]
 8011518:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801151a:	8c3b      	ldrh	r3, [r7, #32]
 801151c:	4618      	mov	r0, r3
 801151e:	f7f8 f973 	bl	8009808 <lwip_htons>
 8011522:	4603      	mov	r3, r0
 8011524:	461a      	mov	r2, r3
 8011526:	693b      	ldr	r3, [r7, #16]
 8011528:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801152a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801152c:	4618      	mov	r0, r3
 801152e:	f7f8 f96b 	bl	8009808 <lwip_htons>
 8011532:	4603      	mov	r3, r0
 8011534:	461a      	mov	r2, r3
 8011536:	693b      	ldr	r3, [r7, #16]
 8011538:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801153a:	693b      	ldr	r3, [r7, #16]
 801153c:	687a      	ldr	r2, [r7, #4]
 801153e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8011540:	68f8      	ldr	r0, [r7, #12]
 8011542:	f7f8 f976 	bl	8009832 <lwip_htonl>
 8011546:	4602      	mov	r2, r0
 8011548:	693b      	ldr	r3, [r7, #16]
 801154a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801154c:	897b      	ldrh	r3, [r7, #10]
 801154e:	089b      	lsrs	r3, r3, #2
 8011550:	b29b      	uxth	r3, r3
 8011552:	3305      	adds	r3, #5
 8011554:	b29b      	uxth	r3, r3
 8011556:	031b      	lsls	r3, r3, #12
 8011558:	b29a      	uxth	r2, r3
 801155a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801155e:	b29b      	uxth	r3, r3
 8011560:	4313      	orrs	r3, r2
 8011562:	b29b      	uxth	r3, r3
 8011564:	4618      	mov	r0, r3
 8011566:	f7f8 f94f 	bl	8009808 <lwip_htons>
 801156a:	4603      	mov	r3, r0
 801156c:	461a      	mov	r2, r3
 801156e:	693b      	ldr	r3, [r7, #16]
 8011570:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8011572:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011574:	4618      	mov	r0, r3
 8011576:	f7f8 f947 	bl	8009808 <lwip_htons>
 801157a:	4603      	mov	r3, r0
 801157c:	461a      	mov	r2, r3
 801157e:	693b      	ldr	r3, [r7, #16]
 8011580:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011582:	693b      	ldr	r3, [r7, #16]
 8011584:	2200      	movs	r2, #0
 8011586:	741a      	strb	r2, [r3, #16]
 8011588:	2200      	movs	r2, #0
 801158a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801158c:	693b      	ldr	r3, [r7, #16]
 801158e:	2200      	movs	r2, #0
 8011590:	749a      	strb	r2, [r3, #18]
 8011592:	2200      	movs	r2, #0
 8011594:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011596:	697b      	ldr	r3, [r7, #20]
}
 8011598:	4618      	mov	r0, r3
 801159a:	3718      	adds	r7, #24
 801159c:	46bd      	mov	sp, r7
 801159e:	bd80      	pop	{r7, pc}
 80115a0:	080187e8 	.word	0x080187e8
 80115a4:	08018f1c 	.word	0x08018f1c
 80115a8:	0801883c 	.word	0x0801883c

080115ac <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80115ac:	b5b0      	push	{r4, r5, r7, lr}
 80115ae:	b08a      	sub	sp, #40	@ 0x28
 80115b0:	af04      	add	r7, sp, #16
 80115b2:	60f8      	str	r0, [r7, #12]
 80115b4:	607b      	str	r3, [r7, #4]
 80115b6:	460b      	mov	r3, r1
 80115b8:	817b      	strh	r3, [r7, #10]
 80115ba:	4613      	mov	r3, r2
 80115bc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d106      	bne.n	80115d2 <tcp_output_alloc_header+0x26>
 80115c4:	4b15      	ldr	r3, [pc, #84]	@ (801161c <tcp_output_alloc_header+0x70>)
 80115c6:	f240 7242 	movw	r2, #1858	@ 0x742
 80115ca:	4915      	ldr	r1, [pc, #84]	@ (8011620 <tcp_output_alloc_header+0x74>)
 80115cc:	4815      	ldr	r0, [pc, #84]	@ (8011624 <tcp_output_alloc_header+0x78>)
 80115ce:	f003 ff0b 	bl	80153e8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	8adb      	ldrh	r3, [r3, #22]
 80115da:	68fa      	ldr	r2, [r7, #12]
 80115dc:	8b12      	ldrh	r2, [r2, #24]
 80115de:	68f9      	ldr	r1, [r7, #12]
 80115e0:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80115e2:	893d      	ldrh	r5, [r7, #8]
 80115e4:	897c      	ldrh	r4, [r7, #10]
 80115e6:	9103      	str	r1, [sp, #12]
 80115e8:	2110      	movs	r1, #16
 80115ea:	9102      	str	r1, [sp, #8]
 80115ec:	9201      	str	r2, [sp, #4]
 80115ee:	9300      	str	r3, [sp, #0]
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	462a      	mov	r2, r5
 80115f4:	4621      	mov	r1, r4
 80115f6:	f7ff ff67 	bl	80114c8 <tcp_output_alloc_header_common>
 80115fa:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80115fc:	697b      	ldr	r3, [r7, #20]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d006      	beq.n	8011610 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011606:	68fa      	ldr	r2, [r7, #12]
 8011608:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801160a:	441a      	add	r2, r3
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8011610:	697b      	ldr	r3, [r7, #20]
}
 8011612:	4618      	mov	r0, r3
 8011614:	3718      	adds	r7, #24
 8011616:	46bd      	mov	sp, r7
 8011618:	bdb0      	pop	{r4, r5, r7, pc}
 801161a:	bf00      	nop
 801161c:	080187e8 	.word	0x080187e8
 8011620:	08018f4c 	.word	0x08018f4c
 8011624:	0801883c 	.word	0x0801883c

08011628 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011628:	b580      	push	{r7, lr}
 801162a:	b088      	sub	sp, #32
 801162c:	af00      	add	r7, sp, #0
 801162e:	60f8      	str	r0, [r7, #12]
 8011630:	60b9      	str	r1, [r7, #8]
 8011632:	4611      	mov	r1, r2
 8011634:	461a      	mov	r2, r3
 8011636:	460b      	mov	r3, r1
 8011638:	71fb      	strb	r3, [r7, #7]
 801163a:	4613      	mov	r3, r2
 801163c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801163e:	2300      	movs	r3, #0
 8011640:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011642:	68bb      	ldr	r3, [r7, #8]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d106      	bne.n	8011656 <tcp_output_fill_options+0x2e>
 8011648:	4b12      	ldr	r3, [pc, #72]	@ (8011694 <tcp_output_fill_options+0x6c>)
 801164a:	f240 7256 	movw	r2, #1878	@ 0x756
 801164e:	4912      	ldr	r1, [pc, #72]	@ (8011698 <tcp_output_fill_options+0x70>)
 8011650:	4812      	ldr	r0, [pc, #72]	@ (801169c <tcp_output_fill_options+0x74>)
 8011652:	f003 fec9 	bl	80153e8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011656:	68bb      	ldr	r3, [r7, #8]
 8011658:	685b      	ldr	r3, [r3, #4]
 801165a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801165c:	69bb      	ldr	r3, [r7, #24]
 801165e:	3314      	adds	r3, #20
 8011660:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011662:	8bfb      	ldrh	r3, [r7, #30]
 8011664:	009b      	lsls	r3, r3, #2
 8011666:	461a      	mov	r2, r3
 8011668:	79fb      	ldrb	r3, [r7, #7]
 801166a:	009b      	lsls	r3, r3, #2
 801166c:	f003 0304 	and.w	r3, r3, #4
 8011670:	4413      	add	r3, r2
 8011672:	3314      	adds	r3, #20
 8011674:	69ba      	ldr	r2, [r7, #24]
 8011676:	4413      	add	r3, r2
 8011678:	697a      	ldr	r2, [r7, #20]
 801167a:	429a      	cmp	r2, r3
 801167c:	d006      	beq.n	801168c <tcp_output_fill_options+0x64>
 801167e:	4b05      	ldr	r3, [pc, #20]	@ (8011694 <tcp_output_fill_options+0x6c>)
 8011680:	f240 7275 	movw	r2, #1909	@ 0x775
 8011684:	4906      	ldr	r1, [pc, #24]	@ (80116a0 <tcp_output_fill_options+0x78>)
 8011686:	4805      	ldr	r0, [pc, #20]	@ (801169c <tcp_output_fill_options+0x74>)
 8011688:	f003 feae 	bl	80153e8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801168c:	bf00      	nop
 801168e:	3720      	adds	r7, #32
 8011690:	46bd      	mov	sp, r7
 8011692:	bd80      	pop	{r7, pc}
 8011694:	080187e8 	.word	0x080187e8
 8011698:	08018f74 	.word	0x08018f74
 801169c:	0801883c 	.word	0x0801883c
 80116a0:	08018e6c 	.word	0x08018e6c

080116a4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b08a      	sub	sp, #40	@ 0x28
 80116a8:	af04      	add	r7, sp, #16
 80116aa:	60f8      	str	r0, [r7, #12]
 80116ac:	60b9      	str	r1, [r7, #8]
 80116ae:	607a      	str	r2, [r7, #4]
 80116b0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80116b2:	68bb      	ldr	r3, [r7, #8]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d106      	bne.n	80116c6 <tcp_output_control_segment+0x22>
 80116b8:	4b1c      	ldr	r3, [pc, #112]	@ (801172c <tcp_output_control_segment+0x88>)
 80116ba:	f240 7287 	movw	r2, #1927	@ 0x787
 80116be:	491c      	ldr	r1, [pc, #112]	@ (8011730 <tcp_output_control_segment+0x8c>)
 80116c0:	481c      	ldr	r0, [pc, #112]	@ (8011734 <tcp_output_control_segment+0x90>)
 80116c2:	f003 fe91 	bl	80153e8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80116c6:	683a      	ldr	r2, [r7, #0]
 80116c8:	6879      	ldr	r1, [r7, #4]
 80116ca:	68f8      	ldr	r0, [r7, #12]
 80116cc:	f7fe fa7c 	bl	800fbc8 <tcp_route>
 80116d0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80116d2:	693b      	ldr	r3, [r7, #16]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d102      	bne.n	80116de <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80116d8:	23fc      	movs	r3, #252	@ 0xfc
 80116da:	75fb      	strb	r3, [r7, #23]
 80116dc:	e01c      	b.n	8011718 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d006      	beq.n	80116f2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	7adb      	ldrb	r3, [r3, #11]
 80116e8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	7a9b      	ldrb	r3, [r3, #10]
 80116ee:	757b      	strb	r3, [r7, #21]
 80116f0:	e003      	b.n	80116fa <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80116f2:	23ff      	movs	r3, #255	@ 0xff
 80116f4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80116f6:	2300      	movs	r3, #0
 80116f8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80116fa:	7dba      	ldrb	r2, [r7, #22]
 80116fc:	693b      	ldr	r3, [r7, #16]
 80116fe:	9302      	str	r3, [sp, #8]
 8011700:	2306      	movs	r3, #6
 8011702:	9301      	str	r3, [sp, #4]
 8011704:	7d7b      	ldrb	r3, [r7, #21]
 8011706:	9300      	str	r3, [sp, #0]
 8011708:	4613      	mov	r3, r2
 801170a:	683a      	ldr	r2, [r7, #0]
 801170c:	6879      	ldr	r1, [r7, #4]
 801170e:	68b8      	ldr	r0, [r7, #8]
 8011710:	f002 fbec 	bl	8013eec <ip4_output_if>
 8011714:	4603      	mov	r3, r0
 8011716:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011718:	68b8      	ldr	r0, [r7, #8]
 801171a:	f7f9 fce7 	bl	800b0ec <pbuf_free>
  return err;
 801171e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011722:	4618      	mov	r0, r3
 8011724:	3718      	adds	r7, #24
 8011726:	46bd      	mov	sp, r7
 8011728:	bd80      	pop	{r7, pc}
 801172a:	bf00      	nop
 801172c:	080187e8 	.word	0x080187e8
 8011730:	08018f9c 	.word	0x08018f9c
 8011734:	0801883c 	.word	0x0801883c

08011738 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011738:	b590      	push	{r4, r7, lr}
 801173a:	b08b      	sub	sp, #44	@ 0x2c
 801173c:	af04      	add	r7, sp, #16
 801173e:	60f8      	str	r0, [r7, #12]
 8011740:	60b9      	str	r1, [r7, #8]
 8011742:	607a      	str	r2, [r7, #4]
 8011744:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011746:	683b      	ldr	r3, [r7, #0]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d106      	bne.n	801175a <tcp_rst+0x22>
 801174c:	4b20      	ldr	r3, [pc, #128]	@ (80117d0 <tcp_rst+0x98>)
 801174e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8011752:	4920      	ldr	r1, [pc, #128]	@ (80117d4 <tcp_rst+0x9c>)
 8011754:	4820      	ldr	r0, [pc, #128]	@ (80117d8 <tcp_rst+0xa0>)
 8011756:	f003 fe47 	bl	80153e8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801175a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801175c:	2b00      	cmp	r3, #0
 801175e:	d106      	bne.n	801176e <tcp_rst+0x36>
 8011760:	4b1b      	ldr	r3, [pc, #108]	@ (80117d0 <tcp_rst+0x98>)
 8011762:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8011766:	491d      	ldr	r1, [pc, #116]	@ (80117dc <tcp_rst+0xa4>)
 8011768:	481b      	ldr	r0, [pc, #108]	@ (80117d8 <tcp_rst+0xa0>)
 801176a:	f003 fe3d 	bl	80153e8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801176e:	2300      	movs	r3, #0
 8011770:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011772:	f246 0308 	movw	r3, #24584	@ 0x6008
 8011776:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011778:	7dfb      	ldrb	r3, [r7, #23]
 801177a:	b29c      	uxth	r4, r3
 801177c:	68b8      	ldr	r0, [r7, #8]
 801177e:	f7f8 f858 	bl	8009832 <lwip_htonl>
 8011782:	4602      	mov	r2, r0
 8011784:	8abb      	ldrh	r3, [r7, #20]
 8011786:	9303      	str	r3, [sp, #12]
 8011788:	2314      	movs	r3, #20
 801178a:	9302      	str	r3, [sp, #8]
 801178c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801178e:	9301      	str	r3, [sp, #4]
 8011790:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011792:	9300      	str	r3, [sp, #0]
 8011794:	4613      	mov	r3, r2
 8011796:	2200      	movs	r2, #0
 8011798:	4621      	mov	r1, r4
 801179a:	6878      	ldr	r0, [r7, #4]
 801179c:	f7ff fe94 	bl	80114c8 <tcp_output_alloc_header_common>
 80117a0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80117a2:	693b      	ldr	r3, [r7, #16]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d103      	bne.n	80117b0 <tcp_rst+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
 80117a8:	480d      	ldr	r0, [pc, #52]	@ (80117e0 <tcp_rst+0xa8>)
 80117aa:	f003 fe8d 	bl	80154c8 <puts>
    return;
 80117ae:	e00b      	b.n	80117c8 <tcp_rst+0x90>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80117b0:	7dfb      	ldrb	r3, [r7, #23]
 80117b2:	2200      	movs	r2, #0
 80117b4:	6939      	ldr	r1, [r7, #16]
 80117b6:	68f8      	ldr	r0, [r7, #12]
 80117b8:	f7ff ff36 	bl	8011628 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80117bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117be:	683a      	ldr	r2, [r7, #0]
 80117c0:	6939      	ldr	r1, [r7, #16]
 80117c2:	68f8      	ldr	r0, [r7, #12]
 80117c4:	f7ff ff6e 	bl	80116a4 <tcp_output_control_segment>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80117c8:	371c      	adds	r7, #28
 80117ca:	46bd      	mov	sp, r7
 80117cc:	bd90      	pop	{r4, r7, pc}
 80117ce:	bf00      	nop
 80117d0:	080187e8 	.word	0x080187e8
 80117d4:	08018fc8 	.word	0x08018fc8
 80117d8:	0801883c 	.word	0x0801883c
 80117dc:	08018fe4 	.word	0x08018fe4
 80117e0:	08019000 	.word	0x08019000

080117e4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80117e4:	b590      	push	{r4, r7, lr}
 80117e6:	b087      	sub	sp, #28
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80117ec:	2300      	movs	r3, #0
 80117ee:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80117f0:	2300      	movs	r3, #0
 80117f2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d106      	bne.n	8011808 <tcp_send_empty_ack+0x24>
 80117fa:	4b28      	ldr	r3, [pc, #160]	@ (801189c <tcp_send_empty_ack+0xb8>)
 80117fc:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8011800:	4927      	ldr	r1, [pc, #156]	@ (80118a0 <tcp_send_empty_ack+0xbc>)
 8011802:	4828      	ldr	r0, [pc, #160]	@ (80118a4 <tcp_send_empty_ack+0xc0>)
 8011804:	f003 fdf0 	bl	80153e8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011808:	7dfb      	ldrb	r3, [r7, #23]
 801180a:	009b      	lsls	r3, r3, #2
 801180c:	b2db      	uxtb	r3, r3
 801180e:	f003 0304 	and.w	r3, r3, #4
 8011812:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011814:	7d7b      	ldrb	r3, [r7, #21]
 8011816:	b29c      	uxth	r4, r3
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801181c:	4618      	mov	r0, r3
 801181e:	f7f8 f808 	bl	8009832 <lwip_htonl>
 8011822:	4603      	mov	r3, r0
 8011824:	2200      	movs	r2, #0
 8011826:	4621      	mov	r1, r4
 8011828:	6878      	ldr	r0, [r7, #4]
 801182a:	f7ff febf 	bl	80115ac <tcp_output_alloc_header>
 801182e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011830:	693b      	ldr	r3, [r7, #16]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d109      	bne.n	801184a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	8b5b      	ldrh	r3, [r3, #26]
 801183a:	f043 0303 	orr.w	r3, r3, #3
 801183e:	b29a      	uxth	r2, r3
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011844:	f06f 0301 	mvn.w	r3, #1
 8011848:	e023      	b.n	8011892 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801184a:	7dbb      	ldrb	r3, [r7, #22]
 801184c:	7dfa      	ldrb	r2, [r7, #23]
 801184e:	6939      	ldr	r1, [r7, #16]
 8011850:	6878      	ldr	r0, [r7, #4]
 8011852:	f7ff fee9 	bl	8011628 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011856:	687a      	ldr	r2, [r7, #4]
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	3304      	adds	r3, #4
 801185c:	6939      	ldr	r1, [r7, #16]
 801185e:	6878      	ldr	r0, [r7, #4]
 8011860:	f7ff ff20 	bl	80116a4 <tcp_output_control_segment>
 8011864:	4603      	mov	r3, r0
 8011866:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d007      	beq.n	8011880 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	8b5b      	ldrh	r3, [r3, #26]
 8011874:	f043 0303 	orr.w	r3, r3, #3
 8011878:	b29a      	uxth	r2, r3
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	835a      	strh	r2, [r3, #26]
 801187e:	e006      	b.n	801188e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	8b5b      	ldrh	r3, [r3, #26]
 8011884:	f023 0303 	bic.w	r3, r3, #3
 8011888:	b29a      	uxth	r2, r3
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801188e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011892:	4618      	mov	r0, r3
 8011894:	371c      	adds	r7, #28
 8011896:	46bd      	mov	sp, r7
 8011898:	bd90      	pop	{r4, r7, pc}
 801189a:	bf00      	nop
 801189c:	080187e8 	.word	0x080187e8
 80118a0:	0801902c 	.word	0x0801902c
 80118a4:	0801883c 	.word	0x0801883c

080118a8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80118a8:	b590      	push	{r4, r7, lr}
 80118aa:	b089      	sub	sp, #36	@ 0x24
 80118ac:	af02      	add	r7, sp, #8
 80118ae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80118b0:	2300      	movs	r3, #0
 80118b2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d106      	bne.n	80118c8 <tcp_keepalive+0x20>
 80118ba:	4b32      	ldr	r3, [pc, #200]	@ (8011984 <tcp_keepalive+0xdc>)
 80118bc:	f640 0224 	movw	r2, #2084	@ 0x824
 80118c0:	4931      	ldr	r1, [pc, #196]	@ (8011988 <tcp_keepalive+0xe0>)
 80118c2:	4832      	ldr	r0, [pc, #200]	@ (801198c <tcp_keepalive+0xe4>)
 80118c4:	f003 fd90 	bl	80153e8 <iprintf>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: sending KEEPALIVE probe to "));
 80118c8:	4831      	ldr	r0, [pc, #196]	@ (8011990 <tcp_keepalive+0xe8>)
 80118ca:	f003 fd8d 	bl	80153e8 <iprintf>
  ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	685b      	ldr	r3, [r3, #4]
 80118d2:	b2db      	uxtb	r3, r3
 80118d4:	4619      	mov	r1, r3
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	685b      	ldr	r3, [r3, #4]
 80118da:	0a1b      	lsrs	r3, r3, #8
 80118dc:	b2db      	uxtb	r3, r3
 80118de:	461a      	mov	r2, r3
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	685b      	ldr	r3, [r3, #4]
 80118e4:	0c1b      	lsrs	r3, r3, #16
 80118e6:	b2db      	uxtb	r3, r3
 80118e8:	4618      	mov	r0, r3
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	685b      	ldr	r3, [r3, #4]
 80118ee:	0e1b      	lsrs	r3, r3, #24
 80118f0:	b2db      	uxtb	r3, r3
 80118f2:	9300      	str	r3, [sp, #0]
 80118f4:	4603      	mov	r3, r0
 80118f6:	4827      	ldr	r0, [pc, #156]	@ (8011994 <tcp_keepalive+0xec>)
 80118f8:	f003 fd76 	bl	80153e8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));
 80118fc:	200a      	movs	r0, #10
 80118fe:	f003 fd85 	bl	801540c <putchar>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
 8011902:	4b25      	ldr	r3, [pc, #148]	@ (8011998 <tcp_keepalive+0xf0>)
 8011904:	6819      	ldr	r1, [r3, #0]
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	6a1a      	ldr	r2, [r3, #32]
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8011910:	4822      	ldr	r0, [pc, #136]	@ (801199c <tcp_keepalive+0xf4>)
 8011912:	f003 fd69 	bl	80153e8 <iprintf>
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011916:	7dfb      	ldrb	r3, [r7, #23]
 8011918:	b29c      	uxth	r4, r3
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801191e:	3b01      	subs	r3, #1
 8011920:	4618      	mov	r0, r3
 8011922:	f7f7 ff86 	bl	8009832 <lwip_htonl>
 8011926:	4603      	mov	r3, r0
 8011928:	2200      	movs	r2, #0
 801192a:	4621      	mov	r1, r4
 801192c:	6878      	ldr	r0, [r7, #4]
 801192e:	f7ff fe3d 	bl	80115ac <tcp_output_alloc_header>
 8011932:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011934:	693b      	ldr	r3, [r7, #16]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d105      	bne.n	8011946 <tcp_keepalive+0x9e>
    LWIP_DEBUGF(TCP_DEBUG,
 801193a:	4819      	ldr	r0, [pc, #100]	@ (80119a0 <tcp_keepalive+0xf8>)
 801193c:	f003 fdc4 	bl	80154c8 <puts>
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011940:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011944:	e01a      	b.n	801197c <tcp_keepalive+0xd4>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011946:	7dfb      	ldrb	r3, [r7, #23]
 8011948:	2200      	movs	r2, #0
 801194a:	6939      	ldr	r1, [r7, #16]
 801194c:	6878      	ldr	r0, [r7, #4]
 801194e:	f7ff fe6b 	bl	8011628 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011952:	687a      	ldr	r2, [r7, #4]
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	3304      	adds	r3, #4
 8011958:	6939      	ldr	r1, [r7, #16]
 801195a:	6878      	ldr	r0, [r7, #4]
 801195c:	f7ff fea2 	bl	80116a4 <tcp_output_control_segment>
 8011960:	4603      	mov	r3, r0
 8011962:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011968:	1e59      	subs	r1, r3, #1
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801196e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011972:	480c      	ldr	r0, [pc, #48]	@ (80119a4 <tcp_keepalive+0xfc>)
 8011974:	f003 fd38 	bl	80153e8 <iprintf>
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011978:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801197c:	4618      	mov	r0, r3
 801197e:	371c      	adds	r7, #28
 8011980:	46bd      	mov	sp, r7
 8011982:	bd90      	pop	{r4, r7, pc}
 8011984:	080187e8 	.word	0x080187e8
 8011988:	0801904c 	.word	0x0801904c
 801198c:	0801883c 	.word	0x0801883c
 8011990:	08019068 	.word	0x08019068
 8011994:	08019094 	.word	0x08019094
 8011998:	240032d4 	.word	0x240032d4
 801199c:	080190a4 	.word	0x080190a4
 80119a0:	080190e8 	.word	0x080190e8
 80119a4:	0801911c 	.word	0x0801911c

080119a8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80119a8:	b590      	push	{r4, r7, lr}
 80119aa:	b08d      	sub	sp, #52	@ 0x34
 80119ac:	af02      	add	r7, sp, #8
 80119ae:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80119b0:	2300      	movs	r3, #0
 80119b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d106      	bne.n	80119ca <tcp_zero_window_probe+0x22>
 80119bc:	4b66      	ldr	r3, [pc, #408]	@ (8011b58 <tcp_zero_window_probe+0x1b0>)
 80119be:	f640 024f 	movw	r2, #2127	@ 0x84f
 80119c2:	4966      	ldr	r1, [pc, #408]	@ (8011b5c <tcp_zero_window_probe+0x1b4>)
 80119c4:	4866      	ldr	r0, [pc, #408]	@ (8011b60 <tcp_zero_window_probe+0x1b8>)
 80119c6:	f003 fd0f 	bl	80153e8 <iprintf>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: sending ZERO WINDOW probe to "));
 80119ca:	4866      	ldr	r0, [pc, #408]	@ (8011b64 <tcp_zero_window_probe+0x1bc>)
 80119cc:	f003 fd0c 	bl	80153e8 <iprintf>
  ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	685b      	ldr	r3, [r3, #4]
 80119d4:	b2db      	uxtb	r3, r3
 80119d6:	4619      	mov	r1, r3
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	685b      	ldr	r3, [r3, #4]
 80119dc:	0a1b      	lsrs	r3, r3, #8
 80119de:	b2db      	uxtb	r3, r3
 80119e0:	461a      	mov	r2, r3
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	685b      	ldr	r3, [r3, #4]
 80119e6:	0c1b      	lsrs	r3, r3, #16
 80119e8:	b2db      	uxtb	r3, r3
 80119ea:	4618      	mov	r0, r3
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	685b      	ldr	r3, [r3, #4]
 80119f0:	0e1b      	lsrs	r3, r3, #24
 80119f2:	b2db      	uxtb	r3, r3
 80119f4:	9300      	str	r3, [sp, #0]
 80119f6:	4603      	mov	r3, r0
 80119f8:	485b      	ldr	r0, [pc, #364]	@ (8011b68 <tcp_zero_window_probe+0x1c0>)
 80119fa:	f003 fcf5 	bl	80153e8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));
 80119fe:	200a      	movs	r0, #10
 8011a00:	f003 fd04 	bl	801540c <putchar>

  LWIP_DEBUGF(TCP_DEBUG,
 8011a04:	4b59      	ldr	r3, [pc, #356]	@ (8011b6c <tcp_zero_window_probe+0x1c4>)
 8011a06:	6819      	ldr	r1, [r3, #0]
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	6a1a      	ldr	r2, [r3, #32]
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8011a12:	4857      	ldr	r0, [pc, #348]	@ (8011b70 <tcp_zero_window_probe+0x1c8>)
 8011a14:	f003 fce8 	bl	80153e8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011a1c:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011a1e:	6a3b      	ldr	r3, [r7, #32]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d101      	bne.n	8011a28 <tcp_zero_window_probe+0x80>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011a24:	2300      	movs	r3, #0
 8011a26:	e093      	b.n	8011b50 <tcp_zero_window_probe+0x1a8>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8011a2e:	2bff      	cmp	r3, #255	@ 0xff
 8011a30:	d007      	beq.n	8011a42 <tcp_zero_window_probe+0x9a>
    ++pcb->persist_probe;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8011a38:	3301      	adds	r3, #1
 8011a3a:	b2da      	uxtb	r2, r3
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011a42:	6a3b      	ldr	r3, [r7, #32]
 8011a44:	691b      	ldr	r3, [r3, #16]
 8011a46:	899b      	ldrh	r3, [r3, #12]
 8011a48:	b29b      	uxth	r3, r3
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f7f7 fedc 	bl	8009808 <lwip_htons>
 8011a50:	4603      	mov	r3, r0
 8011a52:	b2db      	uxtb	r3, r3
 8011a54:	f003 0301 	and.w	r3, r3, #1
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d005      	beq.n	8011a68 <tcp_zero_window_probe+0xc0>
 8011a5c:	6a3b      	ldr	r3, [r7, #32]
 8011a5e:	891b      	ldrh	r3, [r3, #8]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d101      	bne.n	8011a68 <tcp_zero_window_probe+0xc0>
 8011a64:	2301      	movs	r3, #1
 8011a66:	e000      	b.n	8011a6a <tcp_zero_window_probe+0xc2>
 8011a68:	2300      	movs	r3, #0
 8011a6a:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011a6c:	7ffb      	ldrb	r3, [r7, #31]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	bf0c      	ite	eq
 8011a72:	2301      	moveq	r3, #1
 8011a74:	2300      	movne	r3, #0
 8011a76:	b2db      	uxtb	r3, r3
 8011a78:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011a7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011a7e:	b299      	uxth	r1, r3
 8011a80:	6a3b      	ldr	r3, [r7, #32]
 8011a82:	691b      	ldr	r3, [r3, #16]
 8011a84:	685b      	ldr	r3, [r3, #4]
 8011a86:	8bba      	ldrh	r2, [r7, #28]
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	f7ff fd8f 	bl	80115ac <tcp_output_alloc_header>
 8011a8e:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011a90:	69bb      	ldr	r3, [r7, #24]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d105      	bne.n	8011aa2 <tcp_zero_window_probe+0xfa>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
 8011a96:	4837      	ldr	r0, [pc, #220]	@ (8011b74 <tcp_zero_window_probe+0x1cc>)
 8011a98:	f003 fd16 	bl	80154c8 <puts>
    return ERR_MEM;
 8011a9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011aa0:	e056      	b.n	8011b50 <tcp_zero_window_probe+0x1a8>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011aa2:	69bb      	ldr	r3, [r7, #24]
 8011aa4:	685b      	ldr	r3, [r3, #4]
 8011aa6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011aa8:	7ffb      	ldrb	r3, [r7, #31]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d011      	beq.n	8011ad2 <tcp_zero_window_probe+0x12a>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011aae:	697b      	ldr	r3, [r7, #20]
 8011ab0:	899b      	ldrh	r3, [r3, #12]
 8011ab2:	b29b      	uxth	r3, r3
 8011ab4:	b21b      	sxth	r3, r3
 8011ab6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011aba:	b21c      	sxth	r4, r3
 8011abc:	2011      	movs	r0, #17
 8011abe:	f7f7 fea3 	bl	8009808 <lwip_htons>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	b21b      	sxth	r3, r3
 8011ac6:	4323      	orrs	r3, r4
 8011ac8:	b21b      	sxth	r3, r3
 8011aca:	b29a      	uxth	r2, r3
 8011acc:	697b      	ldr	r3, [r7, #20]
 8011ace:	819a      	strh	r2, [r3, #12]
 8011ad0:	e010      	b.n	8011af4 <tcp_zero_window_probe+0x14c>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011ad2:	69bb      	ldr	r3, [r7, #24]
 8011ad4:	685b      	ldr	r3, [r3, #4]
 8011ad6:	3314      	adds	r3, #20
 8011ad8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011ada:	6a3b      	ldr	r3, [r7, #32]
 8011adc:	6858      	ldr	r0, [r3, #4]
 8011ade:	6a3b      	ldr	r3, [r7, #32]
 8011ae0:	685b      	ldr	r3, [r3, #4]
 8011ae2:	891a      	ldrh	r2, [r3, #8]
 8011ae4:	6a3b      	ldr	r3, [r7, #32]
 8011ae6:	891b      	ldrh	r3, [r3, #8]
 8011ae8:	1ad3      	subs	r3, r2, r3
 8011aea:	b29b      	uxth	r3, r3
 8011aec:	2201      	movs	r2, #1
 8011aee:	6939      	ldr	r1, [r7, #16]
 8011af0:	f7f9 fd0a 	bl	800b508 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011af4:	6a3b      	ldr	r3, [r7, #32]
 8011af6:	691b      	ldr	r3, [r3, #16]
 8011af8:	685b      	ldr	r3, [r3, #4]
 8011afa:	4618      	mov	r0, r3
 8011afc:	f7f7 fe99 	bl	8009832 <lwip_htonl>
 8011b00:	4603      	mov	r3, r0
 8011b02:	3301      	adds	r3, #1
 8011b04:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	1ad3      	subs	r3, r2, r3
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	da02      	bge.n	8011b18 <tcp_zero_window_probe+0x170>
    pcb->snd_nxt = snd_nxt;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	68fa      	ldr	r2, [r7, #12]
 8011b16:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011b18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	69b9      	ldr	r1, [r7, #24]
 8011b20:	6878      	ldr	r0, [r7, #4]
 8011b22:	f7ff fd81 	bl	8011628 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011b26:	687a      	ldr	r2, [r7, #4]
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	3304      	adds	r3, #4
 8011b2c:	69b9      	ldr	r1, [r7, #24]
 8011b2e:	6878      	ldr	r0, [r7, #4]
 8011b30:	f7ff fdb8 	bl	80116a4 <tcp_output_control_segment>
 8011b34:	4603      	mov	r3, r0
 8011b36:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011b3c:	1e59      	subs	r1, r3, #1
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011b42:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011b46:	480c      	ldr	r0, [pc, #48]	@ (8011b78 <tcp_zero_window_probe+0x1d0>)
 8011b48:	f003 fc4e 	bl	80153e8 <iprintf>
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011b4c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011b50:	4618      	mov	r0, r3
 8011b52:	372c      	adds	r7, #44	@ 0x2c
 8011b54:	46bd      	mov	sp, r7
 8011b56:	bd90      	pop	{r4, r7, pc}
 8011b58:	080187e8 	.word	0x080187e8
 8011b5c:	08019148 	.word	0x08019148
 8011b60:	0801883c 	.word	0x0801883c
 8011b64:	0801916c 	.word	0x0801916c
 8011b68:	08019094 	.word	0x08019094
 8011b6c:	240032d4 	.word	0x240032d4
 8011b70:	080191a4 	.word	0x080191a4
 8011b74:	080191f0 	.word	0x080191f0
 8011b78:	0801921c 	.word	0x0801921c

08011b7c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b082      	sub	sp, #8
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011b84:	f7f9 fdae 	bl	800b6e4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011b88:	4b0b      	ldr	r3, [pc, #44]	@ (8011bb8 <tcpip_tcp_timer+0x3c>)
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d103      	bne.n	8011b98 <tcpip_tcp_timer+0x1c>
 8011b90:	4b0a      	ldr	r3, [pc, #40]	@ (8011bbc <tcpip_tcp_timer+0x40>)
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d006      	beq.n	8011ba6 <tcpip_tcp_timer+0x2a>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011b98:	4b09      	ldr	r3, [pc, #36]	@ (8011bc0 <tcpip_tcp_timer+0x44>)
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	4909      	ldr	r1, [pc, #36]	@ (8011bc4 <tcpip_tcp_timer+0x48>)
 8011b9e:	20fa      	movs	r0, #250	@ 0xfa
 8011ba0:	f000 f90a 	bl	8011db8 <sys_timeout_debug>
 8011ba4:	e003      	b.n	8011bae <tcpip_tcp_timer+0x32>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011ba6:	4b08      	ldr	r3, [pc, #32]	@ (8011bc8 <tcpip_tcp_timer+0x4c>)
 8011ba8:	2200      	movs	r2, #0
 8011baa:	601a      	str	r2, [r3, #0]
  }
}
 8011bac:	bf00      	nop
 8011bae:	bf00      	nop
 8011bb0:	3708      	adds	r7, #8
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}
 8011bb6:	bf00      	nop
 8011bb8:	240032e0 	.word	0x240032e0
 8011bbc:	240032e4 	.word	0x240032e4
 8011bc0:	08019274 	.word	0x08019274
 8011bc4:	08011b7d 	.word	0x08011b7d
 8011bc8:	24003330 	.word	0x24003330

08011bcc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8011c00 <tcp_timer_needed+0x34>)
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d110      	bne.n	8011bfa <tcp_timer_needed+0x2e>
 8011bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8011c04 <tcp_timer_needed+0x38>)
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d103      	bne.n	8011be8 <tcp_timer_needed+0x1c>
 8011be0:	4b09      	ldr	r3, [pc, #36]	@ (8011c08 <tcp_timer_needed+0x3c>)
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d008      	beq.n	8011bfa <tcp_timer_needed+0x2e>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011be8:	4b05      	ldr	r3, [pc, #20]	@ (8011c00 <tcp_timer_needed+0x34>)
 8011bea:	2201      	movs	r2, #1
 8011bec:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011bee:	4b07      	ldr	r3, [pc, #28]	@ (8011c0c <tcp_timer_needed+0x40>)
 8011bf0:	2200      	movs	r2, #0
 8011bf2:	4907      	ldr	r1, [pc, #28]	@ (8011c10 <tcp_timer_needed+0x44>)
 8011bf4:	20fa      	movs	r0, #250	@ 0xfa
 8011bf6:	f000 f8df 	bl	8011db8 <sys_timeout_debug>
  }
}
 8011bfa:	bf00      	nop
 8011bfc:	bd80      	pop	{r7, pc}
 8011bfe:	bf00      	nop
 8011c00:	24003330 	.word	0x24003330
 8011c04:	240032e0 	.word	0x240032e0
 8011c08:	240032e4 	.word	0x240032e4
 8011c0c:	08019274 	.word	0x08019274
 8011c10:	08011b7d 	.word	0x08011b7d

08011c14 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b086      	sub	sp, #24
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	60f8      	str	r0, [r7, #12]
 8011c1c:	60b9      	str	r1, [r7, #8]
 8011c1e:	607a      	str	r2, [r7, #4]
 8011c20:	603b      	str	r3, [r7, #0]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011c22:	2006      	movs	r0, #6
 8011c24:	f7f8 fb30 	bl	800a288 <memp_malloc>
 8011c28:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011c2a:	693b      	ldr	r3, [r7, #16]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d109      	bne.n	8011c44 <sys_timeout_abs+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011c30:	693b      	ldr	r3, [r7, #16]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d154      	bne.n	8011ce0 <sys_timeout_abs+0xcc>
 8011c36:	4b2c      	ldr	r3, [pc, #176]	@ (8011ce8 <sys_timeout_abs+0xd4>)
 8011c38:	22be      	movs	r2, #190	@ 0xbe
 8011c3a:	492c      	ldr	r1, [pc, #176]	@ (8011cec <sys_timeout_abs+0xd8>)
 8011c3c:	482c      	ldr	r0, [pc, #176]	@ (8011cf0 <sys_timeout_abs+0xdc>)
 8011c3e:	f003 fbd3 	bl	80153e8 <iprintf>
    return;
 8011c42:	e04d      	b.n	8011ce0 <sys_timeout_abs+0xcc>
  }

  timeout->next = NULL;
 8011c44:	693b      	ldr	r3, [r7, #16]
 8011c46:	2200      	movs	r2, #0
 8011c48:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011c4a:	693b      	ldr	r3, [r7, #16]
 8011c4c:	68ba      	ldr	r2, [r7, #8]
 8011c4e:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011c50:	693b      	ldr	r3, [r7, #16]
 8011c52:	687a      	ldr	r2, [r7, #4]
 8011c54:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011c56:	693b      	ldr	r3, [r7, #16]
 8011c58:	68fa      	ldr	r2, [r7, #12]
 8011c5a:	605a      	str	r2, [r3, #4]

#if LWIP_DEBUG_TIMERNAMES
  timeout->handler_name = handler_name;
 8011c5c:	693b      	ldr	r3, [r7, #16]
 8011c5e:	683a      	ldr	r2, [r7, #0]
 8011c60:	611a      	str	r2, [r3, #16]
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011c62:	4b24      	ldr	r3, [pc, #144]	@ (8011cf4 <sys_timeout_abs+0xe0>)
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d103      	bne.n	8011c72 <sys_timeout_abs+0x5e>
    next_timeout = timeout;
 8011c6a:	4a22      	ldr	r2, [pc, #136]	@ (8011cf4 <sys_timeout_abs+0xe0>)
 8011c6c:	693b      	ldr	r3, [r7, #16]
 8011c6e:	6013      	str	r3, [r2, #0]
    return;
 8011c70:	e037      	b.n	8011ce2 <sys_timeout_abs+0xce>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011c72:	693b      	ldr	r3, [r7, #16]
 8011c74:	685a      	ldr	r2, [r3, #4]
 8011c76:	4b1f      	ldr	r3, [pc, #124]	@ (8011cf4 <sys_timeout_abs+0xe0>)
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	685b      	ldr	r3, [r3, #4]
 8011c7c:	1ad3      	subs	r3, r2, r3
 8011c7e:	0fdb      	lsrs	r3, r3, #31
 8011c80:	f003 0301 	and.w	r3, r3, #1
 8011c84:	b2db      	uxtb	r3, r3
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d007      	beq.n	8011c9a <sys_timeout_abs+0x86>
    timeout->next = next_timeout;
 8011c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8011cf4 <sys_timeout_abs+0xe0>)
 8011c8c:	681a      	ldr	r2, [r3, #0]
 8011c8e:	693b      	ldr	r3, [r7, #16]
 8011c90:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011c92:	4a18      	ldr	r2, [pc, #96]	@ (8011cf4 <sys_timeout_abs+0xe0>)
 8011c94:	693b      	ldr	r3, [r7, #16]
 8011c96:	6013      	str	r3, [r2, #0]
 8011c98:	e023      	b.n	8011ce2 <sys_timeout_abs+0xce>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011c9a:	4b16      	ldr	r3, [pc, #88]	@ (8011cf4 <sys_timeout_abs+0xe0>)
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	617b      	str	r3, [r7, #20]
 8011ca0:	e01a      	b.n	8011cd8 <sys_timeout_abs+0xc4>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011ca2:	697b      	ldr	r3, [r7, #20]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d00b      	beq.n	8011cc2 <sys_timeout_abs+0xae>
 8011caa:	693b      	ldr	r3, [r7, #16]
 8011cac:	685a      	ldr	r2, [r3, #4]
 8011cae:	697b      	ldr	r3, [r7, #20]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	685b      	ldr	r3, [r3, #4]
 8011cb4:	1ad3      	subs	r3, r2, r3
 8011cb6:	0fdb      	lsrs	r3, r3, #31
 8011cb8:	f003 0301 	and.w	r3, r3, #1
 8011cbc:	b2db      	uxtb	r3, r3
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d007      	beq.n	8011cd2 <sys_timeout_abs+0xbe>
        timeout->next = t->next;
 8011cc2:	697b      	ldr	r3, [r7, #20]
 8011cc4:	681a      	ldr	r2, [r3, #0]
 8011cc6:	693b      	ldr	r3, [r7, #16]
 8011cc8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011cca:	697b      	ldr	r3, [r7, #20]
 8011ccc:	693a      	ldr	r2, [r7, #16]
 8011cce:	601a      	str	r2, [r3, #0]
        break;
 8011cd0:	e007      	b.n	8011ce2 <sys_timeout_abs+0xce>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011cd2:	697b      	ldr	r3, [r7, #20]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	617b      	str	r3, [r7, #20]
 8011cd8:	697b      	ldr	r3, [r7, #20]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d1e1      	bne.n	8011ca2 <sys_timeout_abs+0x8e>
 8011cde:	e000      	b.n	8011ce2 <sys_timeout_abs+0xce>
    return;
 8011ce0:	bf00      	nop
      }
    }
  }
}
 8011ce2:	3718      	adds	r7, #24
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	bd80      	pop	{r7, pc}
 8011ce8:	08019284 	.word	0x08019284
 8011cec:	080192b8 	.word	0x080192b8
 8011cf0:	080192f8 	.word	0x080192f8
 8011cf4:	24003328 	.word	0x24003328

08011cf8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011cf8:	b580      	push	{r7, lr}
 8011cfa:	b086      	sub	sp, #24
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011d04:	697b      	ldr	r3, [r7, #20]
 8011d06:	685b      	ldr	r3, [r3, #4]
 8011d08:	4798      	blx	r3

  now = sys_now();
 8011d0a:	f7f7 fb15 	bl	8009338 <sys_now>
 8011d0e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011d10:	697b      	ldr	r3, [r7, #20]
 8011d12:	681a      	ldr	r2, [r3, #0]
 8011d14:	4b11      	ldr	r3, [pc, #68]	@ (8011d5c <lwip_cyclic_timer+0x64>)
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	4413      	add	r3, r2
 8011d1a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011d1c:	68fa      	ldr	r2, [r7, #12]
 8011d1e:	693b      	ldr	r3, [r7, #16]
 8011d20:	1ad3      	subs	r3, r2, r3
 8011d22:	0fdb      	lsrs	r3, r3, #31
 8011d24:	f003 0301 	and.w	r3, r3, #1
 8011d28:	b2db      	uxtb	r3, r3
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d00a      	beq.n	8011d44 <lwip_cyclic_timer+0x4c>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
 8011d2e:	697b      	ldr	r3, [r7, #20]
 8011d30:	681a      	ldr	r2, [r3, #0]
 8011d32:	693b      	ldr	r3, [r7, #16]
 8011d34:	18d0      	adds	r0, r2, r3
 8011d36:	697b      	ldr	r3, [r7, #20]
 8011d38:	689b      	ldr	r3, [r3, #8]
 8011d3a:	687a      	ldr	r2, [r7, #4]
 8011d3c:	4908      	ldr	r1, [pc, #32]	@ (8011d60 <lwip_cyclic_timer+0x68>)
 8011d3e:	f7ff ff69 	bl	8011c14 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011d42:	e006      	b.n	8011d52 <lwip_cyclic_timer+0x5a>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
 8011d44:	697b      	ldr	r3, [r7, #20]
 8011d46:	689b      	ldr	r3, [r3, #8]
 8011d48:	687a      	ldr	r2, [r7, #4]
 8011d4a:	4905      	ldr	r1, [pc, #20]	@ (8011d60 <lwip_cyclic_timer+0x68>)
 8011d4c:	68f8      	ldr	r0, [r7, #12]
 8011d4e:	f7ff ff61 	bl	8011c14 <sys_timeout_abs>
}
 8011d52:	bf00      	nop
 8011d54:	3718      	adds	r7, #24
 8011d56:	46bd      	mov	sp, r7
 8011d58:	bd80      	pop	{r7, pc}
 8011d5a:	bf00      	nop
 8011d5c:	2400332c 	.word	0x2400332c
 8011d60:	08011cf9 	.word	0x08011cf9

08011d64 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b082      	sub	sp, #8
 8011d68:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011d6a:	2301      	movs	r3, #1
 8011d6c:	607b      	str	r3, [r7, #4]
 8011d6e:	e015      	b.n	8011d9c <sys_timeouts_init+0x38>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011d70:	490e      	ldr	r1, [pc, #56]	@ (8011dac <sys_timeouts_init+0x48>)
 8011d72:	687a      	ldr	r2, [r7, #4]
 8011d74:	4613      	mov	r3, r2
 8011d76:	005b      	lsls	r3, r3, #1
 8011d78:	4413      	add	r3, r2
 8011d7a:	009b      	lsls	r3, r3, #2
 8011d7c:	440b      	add	r3, r1
 8011d7e:	6818      	ldr	r0, [r3, #0]
 8011d80:	687a      	ldr	r2, [r7, #4]
 8011d82:	4613      	mov	r3, r2
 8011d84:	005b      	lsls	r3, r3, #1
 8011d86:	4413      	add	r3, r2
 8011d88:	009b      	lsls	r3, r3, #2
 8011d8a:	4a08      	ldr	r2, [pc, #32]	@ (8011dac <sys_timeouts_init+0x48>)
 8011d8c:	441a      	add	r2, r3
 8011d8e:	4b08      	ldr	r3, [pc, #32]	@ (8011db0 <sys_timeouts_init+0x4c>)
 8011d90:	4908      	ldr	r1, [pc, #32]	@ (8011db4 <sys_timeouts_init+0x50>)
 8011d92:	f000 f811 	bl	8011db8 <sys_timeout_debug>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	3301      	adds	r3, #1
 8011d9a:	607b      	str	r3, [r7, #4]
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	2b02      	cmp	r3, #2
 8011da0:	d9e6      	bls.n	8011d70 <sys_timeouts_init+0xc>
  }
}
 8011da2:	bf00      	nop
 8011da4:	bf00      	nop
 8011da6:	3708      	adds	r7, #8
 8011da8:	46bd      	mov	sp, r7
 8011daa:	bd80      	pop	{r7, pc}
 8011dac:	0801b208 	.word	0x0801b208
 8011db0:	08019320 	.word	0x08019320
 8011db4:	08011cf9 	.word	0x08011cf9

08011db8 <sys_timeout_debug>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b086      	sub	sp, #24
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	60f8      	str	r0, [r7, #12]
 8011dc0:	60b9      	str	r1, [r7, #8]
 8011dc2:	607a      	str	r2, [r7, #4]
 8011dc4:	603b      	str	r3, [r7, #0]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011dcc:	d306      	bcc.n	8011ddc <sys_timeout_debug+0x24>
 8011dce:	4b0b      	ldr	r3, [pc, #44]	@ (8011dfc <sys_timeout_debug+0x44>)
 8011dd0:	f240 1229 	movw	r2, #297	@ 0x129
 8011dd4:	490a      	ldr	r1, [pc, #40]	@ (8011e00 <sys_timeout_debug+0x48>)
 8011dd6:	480b      	ldr	r0, [pc, #44]	@ (8011e04 <sys_timeout_debug+0x4c>)
 8011dd8:	f003 fb06 	bl	80153e8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011ddc:	f7f7 faac 	bl	8009338 <sys_now>
 8011de0:	4602      	mov	r2, r0
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	4413      	add	r3, r2
 8011de6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	687a      	ldr	r2, [r7, #4]
 8011dec:	68b9      	ldr	r1, [r7, #8]
 8011dee:	6978      	ldr	r0, [r7, #20]
 8011df0:	f7ff ff10 	bl	8011c14 <sys_timeout_abs>
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
#endif
}
 8011df4:	bf00      	nop
 8011df6:	3718      	adds	r7, #24
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd80      	pop	{r7, pc}
 8011dfc:	08019284 	.word	0x08019284
 8011e00:	08019334 	.word	0x08019334
 8011e04:	080192f8 	.word	0x080192f8

08011e08 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	b084      	sub	sp, #16
 8011e0c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011e0e:	f7f7 fa93 	bl	8009338 <sys_now>
 8011e12:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8011e14:	4b1a      	ldr	r3, [pc, #104]	@ (8011e80 <sys_check_timeouts+0x78>)
 8011e16:	781b      	ldrb	r3, [r3, #0]
 8011e18:	b2db      	uxtb	r3, r3
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d001      	beq.n	8011e22 <sys_check_timeouts+0x1a>
 8011e1e:	f7f8 fddf 	bl	800a9e0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8011e22:	4b18      	ldr	r3, [pc, #96]	@ (8011e84 <sys_check_timeouts+0x7c>)
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011e28:	68bb      	ldr	r3, [r7, #8]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d022      	beq.n	8011e74 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011e2e:	68bb      	ldr	r3, [r7, #8]
 8011e30:	685b      	ldr	r3, [r3, #4]
 8011e32:	68fa      	ldr	r2, [r7, #12]
 8011e34:	1ad3      	subs	r3, r2, r3
 8011e36:	0fdb      	lsrs	r3, r3, #31
 8011e38:	f003 0301 	and.w	r3, r3, #1
 8011e3c:	b2db      	uxtb	r3, r3
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d11a      	bne.n	8011e78 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011e42:	68bb      	ldr	r3, [r7, #8]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	4a0f      	ldr	r2, [pc, #60]	@ (8011e84 <sys_check_timeouts+0x7c>)
 8011e48:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011e4a:	68bb      	ldr	r3, [r7, #8]
 8011e4c:	689b      	ldr	r3, [r3, #8]
 8011e4e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011e50:	68bb      	ldr	r3, [r7, #8]
 8011e52:	68db      	ldr	r3, [r3, #12]
 8011e54:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011e56:	68bb      	ldr	r3, [r7, #8]
 8011e58:	685b      	ldr	r3, [r3, #4]
 8011e5a:	4a0b      	ldr	r2, [pc, #44]	@ (8011e88 <sys_check_timeouts+0x80>)
 8011e5c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011e5e:	68b9      	ldr	r1, [r7, #8]
 8011e60:	2006      	movs	r0, #6
 8011e62:	f7f8 fa81 	bl	800a368 <memp_free>
    if (handler != NULL) {
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d0d3      	beq.n	8011e14 <sys_check_timeouts+0xc>
      handler(arg);
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	6838      	ldr	r0, [r7, #0]
 8011e70:	4798      	blx	r3
  do {
 8011e72:	e7cf      	b.n	8011e14 <sys_check_timeouts+0xc>
      return;
 8011e74:	bf00      	nop
 8011e76:	e000      	b.n	8011e7a <sys_check_timeouts+0x72>
      return;
 8011e78:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011e7a:	3710      	adds	r7, #16
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	bd80      	pop	{r7, pc}
 8011e80:	240032d1 	.word	0x240032d1
 8011e84:	24003328 	.word	0x24003328
 8011e88:	2400332c 	.word	0x2400332c

08011e8c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011e90:	f003 f9aa 	bl	80151e8 <rand>
 8011e94:	4603      	mov	r3, r0
 8011e96:	b29b      	uxth	r3, r3
 8011e98:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011e9c:	b29b      	uxth	r3, r3
 8011e9e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8011ea2:	b29a      	uxth	r2, r3
 8011ea4:	4b01      	ldr	r3, [pc, #4]	@ (8011eac <udp_init+0x20>)
 8011ea6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011ea8:	bf00      	nop
 8011eaa:	bd80      	pop	{r7, pc}
 8011eac:	24000084 	.word	0x24000084

08011eb0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b084      	sub	sp, #16
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	60f8      	str	r0, [r7, #12]
 8011eb8:	60b9      	str	r1, [r7, #8]
 8011eba:	4613      	mov	r3, r2
 8011ebc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d105      	bne.n	8011ed0 <udp_input_local_match+0x20>
 8011ec4:	4b27      	ldr	r3, [pc, #156]	@ (8011f64 <udp_input_local_match+0xb4>)
 8011ec6:	2287      	movs	r2, #135	@ 0x87
 8011ec8:	4927      	ldr	r1, [pc, #156]	@ (8011f68 <udp_input_local_match+0xb8>)
 8011eca:	4828      	ldr	r0, [pc, #160]	@ (8011f6c <udp_input_local_match+0xbc>)
 8011ecc:	f003 fa8c 	bl	80153e8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011ed0:	68bb      	ldr	r3, [r7, #8]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d105      	bne.n	8011ee2 <udp_input_local_match+0x32>
 8011ed6:	4b23      	ldr	r3, [pc, #140]	@ (8011f64 <udp_input_local_match+0xb4>)
 8011ed8:	2288      	movs	r2, #136	@ 0x88
 8011eda:	4925      	ldr	r1, [pc, #148]	@ (8011f70 <udp_input_local_match+0xc0>)
 8011edc:	4823      	ldr	r0, [pc, #140]	@ (8011f6c <udp_input_local_match+0xbc>)
 8011ede:	f003 fa83 	bl	80153e8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	7a1b      	ldrb	r3, [r3, #8]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d00b      	beq.n	8011f02 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	7a1a      	ldrb	r2, [r3, #8]
 8011eee:	4b21      	ldr	r3, [pc, #132]	@ (8011f74 <udp_input_local_match+0xc4>)
 8011ef0:	685b      	ldr	r3, [r3, #4]
 8011ef2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011ef6:	3301      	adds	r3, #1
 8011ef8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011efa:	429a      	cmp	r2, r3
 8011efc:	d001      	beq.n	8011f02 <udp_input_local_match+0x52>
    return 0;
 8011efe:	2300      	movs	r3, #0
 8011f00:	e02b      	b.n	8011f5a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011f02:	79fb      	ldrb	r3, [r7, #7]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d018      	beq.n	8011f3a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d013      	beq.n	8011f36 <udp_input_local_match+0x86>
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d00f      	beq.n	8011f36 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011f16:	4b17      	ldr	r3, [pc, #92]	@ (8011f74 <udp_input_local_match+0xc4>)
 8011f18:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011f1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011f1e:	d00a      	beq.n	8011f36 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	681a      	ldr	r2, [r3, #0]
 8011f24:	4b13      	ldr	r3, [pc, #76]	@ (8011f74 <udp_input_local_match+0xc4>)
 8011f26:	695b      	ldr	r3, [r3, #20]
 8011f28:	405a      	eors	r2, r3
 8011f2a:	68bb      	ldr	r3, [r7, #8]
 8011f2c:	3308      	adds	r3, #8
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d110      	bne.n	8011f58 <udp_input_local_match+0xa8>
          return 1;
 8011f36:	2301      	movs	r3, #1
 8011f38:	e00f      	b.n	8011f5a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d009      	beq.n	8011f54 <udp_input_local_match+0xa4>
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d005      	beq.n	8011f54 <udp_input_local_match+0xa4>
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	681a      	ldr	r2, [r3, #0]
 8011f4c:	4b09      	ldr	r3, [pc, #36]	@ (8011f74 <udp_input_local_match+0xc4>)
 8011f4e:	695b      	ldr	r3, [r3, #20]
 8011f50:	429a      	cmp	r2, r3
 8011f52:	d101      	bne.n	8011f58 <udp_input_local_match+0xa8>
        return 1;
 8011f54:	2301      	movs	r3, #1
 8011f56:	e000      	b.n	8011f5a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011f58:	2300      	movs	r3, #0
}
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	3710      	adds	r7, #16
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bd80      	pop	{r7, pc}
 8011f62:	bf00      	nop
 8011f64:	08019380 	.word	0x08019380
 8011f68:	080193b0 	.word	0x080193b0
 8011f6c:	080193d4 	.word	0x080193d4
 8011f70:	080193fc 	.word	0x080193fc
 8011f74:	2400036c 	.word	0x2400036c

08011f78 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011f78:	b590      	push	{r4, r7, lr}
 8011f7a:	b08d      	sub	sp, #52	@ 0x34
 8011f7c:	af02      	add	r7, sp, #8
 8011f7e:	6078      	str	r0, [r7, #4]
 8011f80:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011f82:	2300      	movs	r3, #0
 8011f84:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d105      	bne.n	8011f98 <udp_input+0x20>
 8011f8c:	4b95      	ldr	r3, [pc, #596]	@ (80121e4 <udp_input+0x26c>)
 8011f8e:	22cf      	movs	r2, #207	@ 0xcf
 8011f90:	4995      	ldr	r1, [pc, #596]	@ (80121e8 <udp_input+0x270>)
 8011f92:	4896      	ldr	r0, [pc, #600]	@ (80121ec <udp_input+0x274>)
 8011f94:	f003 fa28 	bl	80153e8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011f98:	683b      	ldr	r3, [r7, #0]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d105      	bne.n	8011faa <udp_input+0x32>
 8011f9e:	4b91      	ldr	r3, [pc, #580]	@ (80121e4 <udp_input+0x26c>)
 8011fa0:	22d0      	movs	r2, #208	@ 0xd0
 8011fa2:	4993      	ldr	r1, [pc, #588]	@ (80121f0 <udp_input+0x278>)
 8011fa4:	4891      	ldr	r0, [pc, #580]	@ (80121ec <udp_input+0x274>)
 8011fa6:	f003 fa1f 	bl	80153e8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	895b      	ldrh	r3, [r3, #10]
 8011fae:	2b07      	cmp	r3, #7
 8011fb0:	d809      	bhi.n	8011fc6 <udp_input+0x4e>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	891b      	ldrh	r3, [r3, #8]
 8011fb6:	4619      	mov	r1, r3
 8011fb8:	488e      	ldr	r0, [pc, #568]	@ (80121f4 <udp_input+0x27c>)
 8011fba:	f003 fa15 	bl	80153e8 <iprintf>
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011fbe:	6878      	ldr	r0, [r7, #4]
 8011fc0:	f7f9 f894 	bl	800b0ec <pbuf_free>
    goto end;
 8011fc4:	e18d      	b.n	80122e2 <udp_input+0x36a>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	685b      	ldr	r3, [r3, #4]
 8011fca:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011fcc:	4b8a      	ldr	r3, [pc, #552]	@ (80121f8 <udp_input+0x280>)
 8011fce:	695b      	ldr	r3, [r3, #20]
 8011fd0:	4a89      	ldr	r2, [pc, #548]	@ (80121f8 <udp_input+0x280>)
 8011fd2:	6812      	ldr	r2, [r2, #0]
 8011fd4:	4611      	mov	r1, r2
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	f002 f946 	bl	8014268 <ip4_addr_isbroadcast_u32>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	891b      	ldrh	r3, [r3, #8]
 8011fe4:	4619      	mov	r1, r3
 8011fe6:	4885      	ldr	r0, [pc, #532]	@ (80121fc <udp_input+0x284>)
 8011fe8:	f003 f9fe 	bl	80153e8 <iprintf>

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011fec:	697b      	ldr	r3, [r7, #20]
 8011fee:	881b      	ldrh	r3, [r3, #0]
 8011ff0:	b29b      	uxth	r3, r3
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f7f7 fc08 	bl	8009808 <lwip_htons>
 8011ff8:	4603      	mov	r3, r0
 8011ffa:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011ffc:	697b      	ldr	r3, [r7, #20]
 8011ffe:	885b      	ldrh	r3, [r3, #2]
 8012000:	b29b      	uxth	r3, r3
 8012002:	4618      	mov	r0, r3
 8012004:	f7f7 fc00 	bl	8009808 <lwip_htons>
 8012008:	4603      	mov	r3, r0
 801200a:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 801200c:	6978      	ldr	r0, [r7, #20]
 801200e:	f000 f9ab 	bl	8012368 <udp_debug_print>

  /* print the UDP source and destination */
  LWIP_DEBUGF(UDP_DEBUG, ("udp ("));
 8012012:	487b      	ldr	r0, [pc, #492]	@ (8012200 <udp_input+0x288>)
 8012014:	f003 f9e8 	bl	80153e8 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
 8012018:	4b77      	ldr	r3, [pc, #476]	@ (80121f8 <udp_input+0x280>)
 801201a:	695b      	ldr	r3, [r3, #20]
 801201c:	b2db      	uxtb	r3, r3
 801201e:	4619      	mov	r1, r3
 8012020:	4b75      	ldr	r3, [pc, #468]	@ (80121f8 <udp_input+0x280>)
 8012022:	695b      	ldr	r3, [r3, #20]
 8012024:	0a1b      	lsrs	r3, r3, #8
 8012026:	b2db      	uxtb	r3, r3
 8012028:	461a      	mov	r2, r3
 801202a:	4b73      	ldr	r3, [pc, #460]	@ (80121f8 <udp_input+0x280>)
 801202c:	695b      	ldr	r3, [r3, #20]
 801202e:	0c1b      	lsrs	r3, r3, #16
 8012030:	b2db      	uxtb	r3, r3
 8012032:	4618      	mov	r0, r3
 8012034:	4b70      	ldr	r3, [pc, #448]	@ (80121f8 <udp_input+0x280>)
 8012036:	695b      	ldr	r3, [r3, #20]
 8012038:	0e1b      	lsrs	r3, r3, #24
 801203a:	b2db      	uxtb	r3, r3
 801203c:	9300      	str	r3, [sp, #0]
 801203e:	4603      	mov	r3, r0
 8012040:	4870      	ldr	r0, [pc, #448]	@ (8012204 <udp_input+0x28c>)
 8012042:	f003 f9d1 	bl	80153e8 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
 8012046:	697b      	ldr	r3, [r7, #20]
 8012048:	885b      	ldrh	r3, [r3, #2]
 801204a:	b29b      	uxth	r3, r3
 801204c:	4618      	mov	r0, r3
 801204e:	f7f7 fbdb 	bl	8009808 <lwip_htons>
 8012052:	4603      	mov	r3, r0
 8012054:	4619      	mov	r1, r3
 8012056:	486c      	ldr	r0, [pc, #432]	@ (8012208 <udp_input+0x290>)
 8012058:	f003 f9c6 	bl	80153e8 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
 801205c:	4b66      	ldr	r3, [pc, #408]	@ (80121f8 <udp_input+0x280>)
 801205e:	691b      	ldr	r3, [r3, #16]
 8012060:	b2db      	uxtb	r3, r3
 8012062:	4619      	mov	r1, r3
 8012064:	4b64      	ldr	r3, [pc, #400]	@ (80121f8 <udp_input+0x280>)
 8012066:	691b      	ldr	r3, [r3, #16]
 8012068:	0a1b      	lsrs	r3, r3, #8
 801206a:	b2db      	uxtb	r3, r3
 801206c:	461a      	mov	r2, r3
 801206e:	4b62      	ldr	r3, [pc, #392]	@ (80121f8 <udp_input+0x280>)
 8012070:	691b      	ldr	r3, [r3, #16]
 8012072:	0c1b      	lsrs	r3, r3, #16
 8012074:	b2db      	uxtb	r3, r3
 8012076:	4618      	mov	r0, r3
 8012078:	4b5f      	ldr	r3, [pc, #380]	@ (80121f8 <udp_input+0x280>)
 801207a:	691b      	ldr	r3, [r3, #16]
 801207c:	0e1b      	lsrs	r3, r3, #24
 801207e:	b2db      	uxtb	r3, r3
 8012080:	9300      	str	r3, [sp, #0]
 8012082:	4603      	mov	r3, r0
 8012084:	485f      	ldr	r0, [pc, #380]	@ (8012204 <udp_input+0x28c>)
 8012086:	f003 f9af 	bl	80153e8 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));
 801208a:	697b      	ldr	r3, [r7, #20]
 801208c:	881b      	ldrh	r3, [r3, #0]
 801208e:	b29b      	uxth	r3, r3
 8012090:	4618      	mov	r0, r3
 8012092:	f7f7 fbb9 	bl	8009808 <lwip_htons>
 8012096:	4603      	mov	r3, r0
 8012098:	4619      	mov	r1, r3
 801209a:	485c      	ldr	r0, [pc, #368]	@ (801220c <udp_input+0x294>)
 801209c:	f003 f9a4 	bl	80153e8 <iprintf>

  pcb = NULL;
 80120a0:	2300      	movs	r3, #0
 80120a2:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80120a4:	2300      	movs	r3, #0
 80120a6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80120a8:	2300      	movs	r3, #0
 80120aa:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80120ac:	4b58      	ldr	r3, [pc, #352]	@ (8012210 <udp_input+0x298>)
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80120b2:	e091      	b.n	80121d8 <udp_input+0x260>
    /* print the PCB local and remote address */
    LWIP_DEBUGF(UDP_DEBUG, ("pcb ("));
 80120b4:	4857      	ldr	r0, [pc, #348]	@ (8012214 <udp_input+0x29c>)
 80120b6:	f003 f997 	bl	80153e8 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->local_ip);
 80120ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	b2db      	uxtb	r3, r3
 80120c0:	4619      	mov	r1, r3
 80120c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	0a1b      	lsrs	r3, r3, #8
 80120c8:	b2db      	uxtb	r3, r3
 80120ca:	461a      	mov	r2, r3
 80120cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	0c1b      	lsrs	r3, r3, #16
 80120d2:	b2db      	uxtb	r3, r3
 80120d4:	4618      	mov	r0, r3
 80120d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	0e1b      	lsrs	r3, r3, #24
 80120dc:	b2db      	uxtb	r3, r3
 80120de:	9300      	str	r3, [sp, #0]
 80120e0:	4603      	mov	r3, r0
 80120e2:	4848      	ldr	r0, [pc, #288]	@ (8012204 <udp_input+0x28c>)
 80120e4:	f003 f980 	bl	80153e8 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
 80120e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120ea:	8a5b      	ldrh	r3, [r3, #18]
 80120ec:	4619      	mov	r1, r3
 80120ee:	4846      	ldr	r0, [pc, #280]	@ (8012208 <udp_input+0x290>)
 80120f0:	f003 f97a 	bl	80153e8 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
 80120f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120f6:	685b      	ldr	r3, [r3, #4]
 80120f8:	b2db      	uxtb	r3, r3
 80120fa:	4619      	mov	r1, r3
 80120fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120fe:	685b      	ldr	r3, [r3, #4]
 8012100:	0a1b      	lsrs	r3, r3, #8
 8012102:	b2db      	uxtb	r3, r3
 8012104:	461a      	mov	r2, r3
 8012106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012108:	685b      	ldr	r3, [r3, #4]
 801210a:	0c1b      	lsrs	r3, r3, #16
 801210c:	b2db      	uxtb	r3, r3
 801210e:	4618      	mov	r0, r3
 8012110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012112:	685b      	ldr	r3, [r3, #4]
 8012114:	0e1b      	lsrs	r3, r3, #24
 8012116:	b2db      	uxtb	r3, r3
 8012118:	9300      	str	r3, [sp, #0]
 801211a:	4603      	mov	r3, r0
 801211c:	4839      	ldr	r0, [pc, #228]	@ (8012204 <udp_input+0x28c>)
 801211e:	f003 f963 	bl	80153e8 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));
 8012122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012124:	8a9b      	ldrh	r3, [r3, #20]
 8012126:	4619      	mov	r1, r3
 8012128:	4838      	ldr	r0, [pc, #224]	@ (801220c <udp_input+0x294>)
 801212a:	f003 f95d 	bl	80153e8 <iprintf>

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801212e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012130:	8a5b      	ldrh	r3, [r3, #18]
 8012132:	89fa      	ldrh	r2, [r7, #14]
 8012134:	429a      	cmp	r2, r3
 8012136:	d14a      	bne.n	80121ce <udp_input+0x256>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012138:	7cfb      	ldrb	r3, [r7, #19]
 801213a:	461a      	mov	r2, r3
 801213c:	6839      	ldr	r1, [r7, #0]
 801213e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012140:	f7ff feb6 	bl	8011eb0 <udp_input_local_match>
 8012144:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012146:	2b00      	cmp	r3, #0
 8012148:	d041      	beq.n	80121ce <udp_input+0x256>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801214a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801214c:	7c1b      	ldrb	r3, [r3, #16]
 801214e:	f003 0304 	and.w	r3, r3, #4
 8012152:	2b00      	cmp	r3, #0
 8012154:	d11d      	bne.n	8012192 <udp_input+0x21a>
        if (uncon_pcb == NULL) {
 8012156:	69fb      	ldr	r3, [r7, #28]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d102      	bne.n	8012162 <udp_input+0x1ea>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801215c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801215e:	61fb      	str	r3, [r7, #28]
 8012160:	e017      	b.n	8012192 <udp_input+0x21a>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012162:	7cfb      	ldrb	r3, [r7, #19]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d014      	beq.n	8012192 <udp_input+0x21a>
 8012168:	4b23      	ldr	r3, [pc, #140]	@ (80121f8 <udp_input+0x280>)
 801216a:	695b      	ldr	r3, [r3, #20]
 801216c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012170:	d10f      	bne.n	8012192 <udp_input+0x21a>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012172:	69fb      	ldr	r3, [r7, #28]
 8012174:	681a      	ldr	r2, [r3, #0]
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	3304      	adds	r3, #4
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	429a      	cmp	r2, r3
 801217e:	d008      	beq.n	8012192 <udp_input+0x21a>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012182:	681a      	ldr	r2, [r3, #0]
 8012184:	683b      	ldr	r3, [r7, #0]
 8012186:	3304      	adds	r3, #4
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	429a      	cmp	r2, r3
 801218c:	d101      	bne.n	8012192 <udp_input+0x21a>
              /* better match */
              uncon_pcb = pcb;
 801218e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012190:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012194:	8a9b      	ldrh	r3, [r3, #20]
 8012196:	8a3a      	ldrh	r2, [r7, #16]
 8012198:	429a      	cmp	r2, r3
 801219a:	d118      	bne.n	80121ce <udp_input+0x256>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801219c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801219e:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d005      	beq.n	80121b0 <udp_input+0x238>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80121a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121a6:	685a      	ldr	r2, [r3, #4]
 80121a8:	4b13      	ldr	r3, [pc, #76]	@ (80121f8 <udp_input+0x280>)
 80121aa:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80121ac:	429a      	cmp	r2, r3
 80121ae:	d10e      	bne.n	80121ce <udp_input+0x256>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80121b0:	6a3b      	ldr	r3, [r7, #32]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d030      	beq.n	8012218 <udp_input+0x2a0>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80121b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121b8:	68da      	ldr	r2, [r3, #12]
 80121ba:	6a3b      	ldr	r3, [r7, #32]
 80121bc:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80121be:	4b14      	ldr	r3, [pc, #80]	@ (8012210 <udp_input+0x298>)
 80121c0:	681a      	ldr	r2, [r3, #0]
 80121c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121c4:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80121c6:	4a12      	ldr	r2, [pc, #72]	@ (8012210 <udp_input+0x298>)
 80121c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121ca:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80121cc:	e024      	b.n	8012218 <udp_input+0x2a0>
      }
    }

    prev = pcb;
 80121ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121d0:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80121d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121d4:	68db      	ldr	r3, [r3, #12]
 80121d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80121d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121da:	2b00      	cmp	r3, #0
 80121dc:	f47f af6a 	bne.w	80120b4 <udp_input+0x13c>
 80121e0:	e01b      	b.n	801221a <udp_input+0x2a2>
 80121e2:	bf00      	nop
 80121e4:	08019380 	.word	0x08019380
 80121e8:	08019424 	.word	0x08019424
 80121ec:	080193d4 	.word	0x080193d4
 80121f0:	0801943c 	.word	0x0801943c
 80121f4:	08019458 	.word	0x08019458
 80121f8:	2400036c 	.word	0x2400036c
 80121fc:	08019490 	.word	0x08019490
 8012200:	080194bc 	.word	0x080194bc
 8012204:	080194c4 	.word	0x080194c4
 8012208:	080194d4 	.word	0x080194d4
 801220c:	080194e4 	.word	0x080194e4
 8012210:	24003334 	.word	0x24003334
 8012214:	080194ec 	.word	0x080194ec
        break;
 8012218:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801221a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801221c:	2b00      	cmp	r3, #0
 801221e:	d101      	bne.n	8012224 <udp_input+0x2ac>
    pcb = uncon_pcb;
 8012220:	69fb      	ldr	r3, [r7, #28]
 8012222:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012226:	2b00      	cmp	r3, #0
 8012228:	d002      	beq.n	8012230 <udp_input+0x2b8>
    for_us = 1;
 801222a:	2301      	movs	r3, #1
 801222c:	76fb      	strb	r3, [r7, #27]
 801222e:	e00a      	b.n	8012246 <udp_input+0x2ce>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012230:	683b      	ldr	r3, [r7, #0]
 8012232:	3304      	adds	r3, #4
 8012234:	681a      	ldr	r2, [r3, #0]
 8012236:	4b2d      	ldr	r3, [pc, #180]	@ (80122ec <udp_input+0x374>)
 8012238:	695b      	ldr	r3, [r3, #20]
 801223a:	429a      	cmp	r2, r3
 801223c:	bf0c      	ite	eq
 801223e:	2301      	moveq	r3, #1
 8012240:	2300      	movne	r3, #0
 8012242:	b2db      	uxtb	r3, r3
 8012244:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012246:	7efb      	ldrb	r3, [r7, #27]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d047      	beq.n	80122dc <udp_input+0x364>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
 801224c:	4828      	ldr	r0, [pc, #160]	@ (80122f0 <udp_input+0x378>)
 801224e:	f003 f93b 	bl	80154c8 <puts>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012252:	2108      	movs	r1, #8
 8012254:	6878      	ldr	r0, [r7, #4]
 8012256:	f7f8 febb 	bl	800afd0 <pbuf_remove_header>
 801225a:	4603      	mov	r3, r0
 801225c:	2b00      	cmp	r3, #0
 801225e:	d00a      	beq.n	8012276 <udp_input+0x2fe>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012260:	4b24      	ldr	r3, [pc, #144]	@ (80122f4 <udp_input+0x37c>)
 8012262:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8012266:	4924      	ldr	r1, [pc, #144]	@ (80122f8 <udp_input+0x380>)
 8012268:	4824      	ldr	r0, [pc, #144]	@ (80122fc <udp_input+0x384>)
 801226a:	f003 f8bd 	bl	80153e8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801226e:	6878      	ldr	r0, [r7, #4]
 8012270:	f7f8 ff3c 	bl	800b0ec <pbuf_free>
      goto end;
 8012274:	e035      	b.n	80122e2 <udp_input+0x36a>
    }

    if (pcb != NULL) {
 8012276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012278:	2b00      	cmp	r3, #0
 801227a:	d012      	beq.n	80122a2 <udp_input+0x32a>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801227c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801227e:	699b      	ldr	r3, [r3, #24]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d00a      	beq.n	801229a <udp_input+0x322>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012286:	699c      	ldr	r4, [r3, #24]
 8012288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801228a:	69d8      	ldr	r0, [r3, #28]
 801228c:	8a3b      	ldrh	r3, [r7, #16]
 801228e:	9300      	str	r3, [sp, #0]
 8012290:	4b1b      	ldr	r3, [pc, #108]	@ (8012300 <udp_input+0x388>)
 8012292:	687a      	ldr	r2, [r7, #4]
 8012294:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012296:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012298:	e024      	b.n	80122e4 <udp_input+0x36c>
        pbuf_free(p);
 801229a:	6878      	ldr	r0, [r7, #4]
 801229c:	f7f8 ff26 	bl	800b0ec <pbuf_free>
        goto end;
 80122a0:	e01f      	b.n	80122e2 <udp_input+0x36a>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
 80122a2:	4818      	ldr	r0, [pc, #96]	@ (8012304 <udp_input+0x38c>)
 80122a4:	f003 f910 	bl	80154c8 <puts>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80122a8:	7cfb      	ldrb	r3, [r7, #19]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d112      	bne.n	80122d4 <udp_input+0x35c>
 80122ae:	4b0f      	ldr	r3, [pc, #60]	@ (80122ec <udp_input+0x374>)
 80122b0:	695b      	ldr	r3, [r3, #20]
 80122b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80122b6:	2be0      	cmp	r3, #224	@ 0xe0
 80122b8:	d00c      	beq.n	80122d4 <udp_input+0x35c>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80122ba:	4b0c      	ldr	r3, [pc, #48]	@ (80122ec <udp_input+0x374>)
 80122bc:	899b      	ldrh	r3, [r3, #12]
 80122be:	3308      	adds	r3, #8
 80122c0:	b29b      	uxth	r3, r3
 80122c2:	b21b      	sxth	r3, r3
 80122c4:	4619      	mov	r1, r3
 80122c6:	6878      	ldr	r0, [r7, #4]
 80122c8:	f7f8 fefd 	bl	800b0c6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80122cc:	2103      	movs	r1, #3
 80122ce:	6878      	ldr	r0, [r7, #4]
 80122d0:	f001 faa6 	bl	8013820 <icmp_dest_unreach>
      pbuf_free(p);
 80122d4:	6878      	ldr	r0, [r7, #4]
 80122d6:	f7f8 ff09 	bl	800b0ec <pbuf_free>
  return;
 80122da:	e003      	b.n	80122e4 <udp_input+0x36c>
    pbuf_free(p);
 80122dc:	6878      	ldr	r0, [r7, #4]
 80122de:	f7f8 ff05 	bl	800b0ec <pbuf_free>
  return;
 80122e2:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80122e4:	372c      	adds	r7, #44	@ 0x2c
 80122e6:	46bd      	mov	sp, r7
 80122e8:	bd90      	pop	{r4, r7, pc}
 80122ea:	bf00      	nop
 80122ec:	2400036c 	.word	0x2400036c
 80122f0:	080194f4 	.word	0x080194f4
 80122f4:	08019380 	.word	0x08019380
 80122f8:	08019514 	.word	0x08019514
 80122fc:	080193d4 	.word	0x080193d4
 8012300:	2400037c 	.word	0x2400037c
 8012304:	08019530 	.word	0x08019530

08012308 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012308:	b480      	push	{r7}
 801230a:	b085      	sub	sp, #20
 801230c:	af00      	add	r7, sp, #0
 801230e:	6078      	str	r0, [r7, #4]
 8012310:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d01e      	beq.n	8012356 <udp_netif_ip_addr_changed+0x4e>
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d01a      	beq.n	8012356 <udp_netif_ip_addr_changed+0x4e>
 8012320:	683b      	ldr	r3, [r7, #0]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d017      	beq.n	8012356 <udp_netif_ip_addr_changed+0x4e>
 8012326:	683b      	ldr	r3, [r7, #0]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d013      	beq.n	8012356 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801232e:	4b0d      	ldr	r3, [pc, #52]	@ (8012364 <udp_netif_ip_addr_changed+0x5c>)
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	60fb      	str	r3, [r7, #12]
 8012334:	e00c      	b.n	8012350 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	681a      	ldr	r2, [r3, #0]
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	429a      	cmp	r2, r3
 8012340:	d103      	bne.n	801234a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	681a      	ldr	r2, [r3, #0]
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	68db      	ldr	r3, [r3, #12]
 801234e:	60fb      	str	r3, [r7, #12]
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	2b00      	cmp	r3, #0
 8012354:	d1ef      	bne.n	8012336 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012356:	bf00      	nop
 8012358:	3714      	adds	r7, #20
 801235a:	46bd      	mov	sp, r7
 801235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012360:	4770      	bx	lr
 8012362:	bf00      	nop
 8012364:	24003334 	.word	0x24003334

08012368 <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 8012368:	b590      	push	{r4, r7, lr}
 801236a:	b083      	sub	sp, #12
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(UDP_DEBUG, ("UDP header:\n"));
 8012370:	481b      	ldr	r0, [pc, #108]	@ (80123e0 <udp_debug_print+0x78>)
 8012372:	f003 f8a9 	bl	80154c8 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 8012376:	481b      	ldr	r0, [pc, #108]	@ (80123e4 <udp_debug_print+0x7c>)
 8012378:	f003 f8a6 	bl	80154c8 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     %5"U16_F"     | (src port, dest port)\n",
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	881b      	ldrh	r3, [r3, #0]
 8012380:	b29b      	uxth	r3, r3
 8012382:	4618      	mov	r0, r3
 8012384:	f7f7 fa40 	bl	8009808 <lwip_htons>
 8012388:	4603      	mov	r3, r0
 801238a:	461c      	mov	r4, r3
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	885b      	ldrh	r3, [r3, #2]
 8012390:	b29b      	uxth	r3, r3
 8012392:	4618      	mov	r0, r3
 8012394:	f7f7 fa38 	bl	8009808 <lwip_htons>
 8012398:	4603      	mov	r3, r0
 801239a:	461a      	mov	r2, r3
 801239c:	4621      	mov	r1, r4
 801239e:	4812      	ldr	r0, [pc, #72]	@ (80123e8 <udp_debug_print+0x80>)
 80123a0:	f003 f822 	bl	80153e8 <iprintf>
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 80123a4:	480f      	ldr	r0, [pc, #60]	@ (80123e4 <udp_debug_print+0x7c>)
 80123a6:	f003 f88f 	bl	80154c8 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	889b      	ldrh	r3, [r3, #4]
 80123ae:	b29b      	uxth	r3, r3
 80123b0:	4618      	mov	r0, r3
 80123b2:	f7f7 fa29 	bl	8009808 <lwip_htons>
 80123b6:	4603      	mov	r3, r0
 80123b8:	461c      	mov	r4, r3
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	88db      	ldrh	r3, [r3, #6]
 80123be:	b29b      	uxth	r3, r3
 80123c0:	4618      	mov	r0, r3
 80123c2:	f7f7 fa21 	bl	8009808 <lwip_htons>
 80123c6:	4603      	mov	r3, r0
 80123c8:	461a      	mov	r2, r3
 80123ca:	4621      	mov	r1, r4
 80123cc:	4807      	ldr	r0, [pc, #28]	@ (80123ec <udp_debug_print+0x84>)
 80123ce:	f003 f80b 	bl	80153e8 <iprintf>
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 80123d2:	4804      	ldr	r0, [pc, #16]	@ (80123e4 <udp_debug_print+0x7c>)
 80123d4:	f003 f878 	bl	80154c8 <puts>
}
 80123d8:	bf00      	nop
 80123da:	370c      	adds	r7, #12
 80123dc:	46bd      	mov	sp, r7
 80123de:	bd90      	pop	{r4, r7, pc}
 80123e0:	08019a0c 	.word	0x08019a0c
 80123e4:	08019a18 	.word	0x08019a18
 80123e8:	08019a3c 	.word	0x08019a3c
 80123ec:	08019a74 	.word	0x08019a74

080123f0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b082      	sub	sp, #8
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80123f8:	4933      	ldr	r1, [pc, #204]	@ (80124c8 <etharp_free_entry+0xd8>)
 80123fa:	687a      	ldr	r2, [r7, #4]
 80123fc:	4613      	mov	r3, r2
 80123fe:	005b      	lsls	r3, r3, #1
 8012400:	4413      	add	r3, r2
 8012402:	00db      	lsls	r3, r3, #3
 8012404:	440b      	add	r3, r1
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d023      	beq.n	8012454 <etharp_free_entry+0x64>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	b29b      	uxth	r3, r3
 8012410:	4618      	mov	r0, r3
 8012412:	492d      	ldr	r1, [pc, #180]	@ (80124c8 <etharp_free_entry+0xd8>)
 8012414:	687a      	ldr	r2, [r7, #4]
 8012416:	4613      	mov	r3, r2
 8012418:	005b      	lsls	r3, r3, #1
 801241a:	4413      	add	r3, r2
 801241c:	00db      	lsls	r3, r3, #3
 801241e:	440b      	add	r3, r1
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	461a      	mov	r2, r3
 8012424:	4601      	mov	r1, r0
 8012426:	4829      	ldr	r0, [pc, #164]	@ (80124cc <etharp_free_entry+0xdc>)
 8012428:	f002 ffde 	bl	80153e8 <iprintf>
    free_etharp_q(arp_table[i].q);
 801242c:	4926      	ldr	r1, [pc, #152]	@ (80124c8 <etharp_free_entry+0xd8>)
 801242e:	687a      	ldr	r2, [r7, #4]
 8012430:	4613      	mov	r3, r2
 8012432:	005b      	lsls	r3, r3, #1
 8012434:	4413      	add	r3, r2
 8012436:	00db      	lsls	r3, r3, #3
 8012438:	440b      	add	r3, r1
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	4618      	mov	r0, r3
 801243e:	f7f8 fe55 	bl	800b0ec <pbuf_free>
    arp_table[i].q = NULL;
 8012442:	4921      	ldr	r1, [pc, #132]	@ (80124c8 <etharp_free_entry+0xd8>)
 8012444:	687a      	ldr	r2, [r7, #4]
 8012446:	4613      	mov	r3, r2
 8012448:	005b      	lsls	r3, r3, #1
 801244a:	4413      	add	r3, r2
 801244c:	00db      	lsls	r3, r3, #3
 801244e:	440b      	add	r3, r1
 8012450:	2200      	movs	r2, #0
 8012452:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012454:	491c      	ldr	r1, [pc, #112]	@ (80124c8 <etharp_free_entry+0xd8>)
 8012456:	687a      	ldr	r2, [r7, #4]
 8012458:	4613      	mov	r3, r2
 801245a:	005b      	lsls	r3, r3, #1
 801245c:	4413      	add	r3, r2
 801245e:	00db      	lsls	r3, r3, #3
 8012460:	440b      	add	r3, r1
 8012462:	3314      	adds	r3, #20
 8012464:	2200      	movs	r2, #0
 8012466:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 8012468:	4917      	ldr	r1, [pc, #92]	@ (80124c8 <etharp_free_entry+0xd8>)
 801246a:	687a      	ldr	r2, [r7, #4]
 801246c:	4613      	mov	r3, r2
 801246e:	005b      	lsls	r3, r3, #1
 8012470:	4413      	add	r3, r2
 8012472:	00db      	lsls	r3, r3, #3
 8012474:	440b      	add	r3, r1
 8012476:	3312      	adds	r3, #18
 8012478:	2200      	movs	r2, #0
 801247a:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 801247c:	4912      	ldr	r1, [pc, #72]	@ (80124c8 <etharp_free_entry+0xd8>)
 801247e:	687a      	ldr	r2, [r7, #4]
 8012480:	4613      	mov	r3, r2
 8012482:	005b      	lsls	r3, r3, #1
 8012484:	4413      	add	r3, r2
 8012486:	00db      	lsls	r3, r3, #3
 8012488:	440b      	add	r3, r1
 801248a:	3308      	adds	r3, #8
 801248c:	2200      	movs	r2, #0
 801248e:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 8012490:	490d      	ldr	r1, [pc, #52]	@ (80124c8 <etharp_free_entry+0xd8>)
 8012492:	687a      	ldr	r2, [r7, #4]
 8012494:	4613      	mov	r3, r2
 8012496:	005b      	lsls	r3, r3, #1
 8012498:	4413      	add	r3, r2
 801249a:	00db      	lsls	r3, r3, #3
 801249c:	440b      	add	r3, r1
 801249e:	3304      	adds	r3, #4
 80124a0:	2200      	movs	r2, #0
 80124a2:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 80124a4:	4908      	ldr	r1, [pc, #32]	@ (80124c8 <etharp_free_entry+0xd8>)
 80124a6:	687a      	ldr	r2, [r7, #4]
 80124a8:	4613      	mov	r3, r2
 80124aa:	005b      	lsls	r3, r3, #1
 80124ac:	4413      	add	r3, r2
 80124ae:	00db      	lsls	r3, r3, #3
 80124b0:	440b      	add	r3, r1
 80124b2:	3308      	adds	r3, #8
 80124b4:	4a06      	ldr	r2, [pc, #24]	@ (80124d0 <etharp_free_entry+0xe0>)
 80124b6:	3304      	adds	r3, #4
 80124b8:	6810      	ldr	r0, [r2, #0]
 80124ba:	6018      	str	r0, [r3, #0]
 80124bc:	8892      	ldrh	r2, [r2, #4]
 80124be:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 80124c0:	bf00      	nop
 80124c2:	3708      	adds	r7, #8
 80124c4:	46bd      	mov	sp, r7
 80124c6:	bd80      	pop	{r7, pc}
 80124c8:	24003338 	.word	0x24003338
 80124cc:	08019aa8 	.word	0x08019aa8
 80124d0:	0801b238 	.word	0x0801b238

080124d4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b082      	sub	sp, #8
 80124d8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
 80124da:	485c      	ldr	r0, [pc, #368]	@ (801264c <etharp_tmr+0x178>)
 80124dc:	f002 fff4 	bl	80154c8 <puts>
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80124e0:	2300      	movs	r3, #0
 80124e2:	607b      	str	r3, [r7, #4]
 80124e4:	e0a9      	b.n	801263a <etharp_tmr+0x166>
    u8_t state = arp_table[i].state;
 80124e6:	495a      	ldr	r1, [pc, #360]	@ (8012650 <etharp_tmr+0x17c>)
 80124e8:	687a      	ldr	r2, [r7, #4]
 80124ea:	4613      	mov	r3, r2
 80124ec:	005b      	lsls	r3, r3, #1
 80124ee:	4413      	add	r3, r2
 80124f0:	00db      	lsls	r3, r3, #3
 80124f2:	440b      	add	r3, r1
 80124f4:	3314      	adds	r3, #20
 80124f6:	781b      	ldrb	r3, [r3, #0]
 80124f8:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80124fa:	78fb      	ldrb	r3, [r7, #3]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	f000 8099 	beq.w	8012634 <etharp_tmr+0x160>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012502:	4953      	ldr	r1, [pc, #332]	@ (8012650 <etharp_tmr+0x17c>)
 8012504:	687a      	ldr	r2, [r7, #4]
 8012506:	4613      	mov	r3, r2
 8012508:	005b      	lsls	r3, r3, #1
 801250a:	4413      	add	r3, r2
 801250c:	00db      	lsls	r3, r3, #3
 801250e:	440b      	add	r3, r1
 8012510:	3312      	adds	r3, #18
 8012512:	881b      	ldrh	r3, [r3, #0]
 8012514:	3301      	adds	r3, #1
 8012516:	b298      	uxth	r0, r3
 8012518:	494d      	ldr	r1, [pc, #308]	@ (8012650 <etharp_tmr+0x17c>)
 801251a:	687a      	ldr	r2, [r7, #4]
 801251c:	4613      	mov	r3, r2
 801251e:	005b      	lsls	r3, r3, #1
 8012520:	4413      	add	r3, r2
 8012522:	00db      	lsls	r3, r3, #3
 8012524:	440b      	add	r3, r1
 8012526:	3312      	adds	r3, #18
 8012528:	4602      	mov	r2, r0
 801252a:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801252c:	4948      	ldr	r1, [pc, #288]	@ (8012650 <etharp_tmr+0x17c>)
 801252e:	687a      	ldr	r2, [r7, #4]
 8012530:	4613      	mov	r3, r2
 8012532:	005b      	lsls	r3, r3, #1
 8012534:	4413      	add	r3, r2
 8012536:	00db      	lsls	r3, r3, #3
 8012538:	440b      	add	r3, r1
 801253a:	3312      	adds	r3, #18
 801253c:	881b      	ldrh	r3, [r3, #0]
 801253e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8012542:	d215      	bcs.n	8012570 <etharp_tmr+0x9c>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012544:	4942      	ldr	r1, [pc, #264]	@ (8012650 <etharp_tmr+0x17c>)
 8012546:	687a      	ldr	r2, [r7, #4]
 8012548:	4613      	mov	r3, r2
 801254a:	005b      	lsls	r3, r3, #1
 801254c:	4413      	add	r3, r2
 801254e:	00db      	lsls	r3, r3, #3
 8012550:	440b      	add	r3, r1
 8012552:	3314      	adds	r3, #20
 8012554:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012556:	2b01      	cmp	r3, #1
 8012558:	d121      	bne.n	801259e <etharp_tmr+0xca>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801255a:	493d      	ldr	r1, [pc, #244]	@ (8012650 <etharp_tmr+0x17c>)
 801255c:	687a      	ldr	r2, [r7, #4]
 801255e:	4613      	mov	r3, r2
 8012560:	005b      	lsls	r3, r3, #1
 8012562:	4413      	add	r3, r2
 8012564:	00db      	lsls	r3, r3, #3
 8012566:	440b      	add	r3, r1
 8012568:	3312      	adds	r3, #18
 801256a:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801256c:	2b04      	cmp	r3, #4
 801256e:	d916      	bls.n	801259e <etharp_tmr+0xca>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
 8012570:	4937      	ldr	r1, [pc, #220]	@ (8012650 <etharp_tmr+0x17c>)
 8012572:	687a      	ldr	r2, [r7, #4]
 8012574:	4613      	mov	r3, r2
 8012576:	005b      	lsls	r3, r3, #1
 8012578:	4413      	add	r3, r2
 801257a:	00db      	lsls	r3, r3, #3
 801257c:	440b      	add	r3, r1
 801257e:	3314      	adds	r3, #20
 8012580:	781b      	ldrb	r3, [r3, #0]
 8012582:	2b01      	cmp	r3, #1
 8012584:	d901      	bls.n	801258a <etharp_tmr+0xb6>
 8012586:	4b33      	ldr	r3, [pc, #204]	@ (8012654 <etharp_tmr+0x180>)
 8012588:	e000      	b.n	801258c <etharp_tmr+0xb8>
 801258a:	4b33      	ldr	r3, [pc, #204]	@ (8012658 <etharp_tmr+0x184>)
 801258c:	687a      	ldr	r2, [r7, #4]
 801258e:	4619      	mov	r1, r3
 8012590:	4832      	ldr	r0, [pc, #200]	@ (801265c <etharp_tmr+0x188>)
 8012592:	f002 ff29 	bl	80153e8 <iprintf>
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012596:	6878      	ldr	r0, [r7, #4]
 8012598:	f7ff ff2a 	bl	80123f0 <etharp_free_entry>
 801259c:	e04a      	b.n	8012634 <etharp_tmr+0x160>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801259e:	492c      	ldr	r1, [pc, #176]	@ (8012650 <etharp_tmr+0x17c>)
 80125a0:	687a      	ldr	r2, [r7, #4]
 80125a2:	4613      	mov	r3, r2
 80125a4:	005b      	lsls	r3, r3, #1
 80125a6:	4413      	add	r3, r2
 80125a8:	00db      	lsls	r3, r3, #3
 80125aa:	440b      	add	r3, r1
 80125ac:	3314      	adds	r3, #20
 80125ae:	781b      	ldrb	r3, [r3, #0]
 80125b0:	2b03      	cmp	r3, #3
 80125b2:	d10a      	bne.n	80125ca <etharp_tmr+0xf6>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80125b4:	4926      	ldr	r1, [pc, #152]	@ (8012650 <etharp_tmr+0x17c>)
 80125b6:	687a      	ldr	r2, [r7, #4]
 80125b8:	4613      	mov	r3, r2
 80125ba:	005b      	lsls	r3, r3, #1
 80125bc:	4413      	add	r3, r2
 80125be:	00db      	lsls	r3, r3, #3
 80125c0:	440b      	add	r3, r1
 80125c2:	3314      	adds	r3, #20
 80125c4:	2204      	movs	r2, #4
 80125c6:	701a      	strb	r2, [r3, #0]
 80125c8:	e034      	b.n	8012634 <etharp_tmr+0x160>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80125ca:	4921      	ldr	r1, [pc, #132]	@ (8012650 <etharp_tmr+0x17c>)
 80125cc:	687a      	ldr	r2, [r7, #4]
 80125ce:	4613      	mov	r3, r2
 80125d0:	005b      	lsls	r3, r3, #1
 80125d2:	4413      	add	r3, r2
 80125d4:	00db      	lsls	r3, r3, #3
 80125d6:	440b      	add	r3, r1
 80125d8:	3314      	adds	r3, #20
 80125da:	781b      	ldrb	r3, [r3, #0]
 80125dc:	2b04      	cmp	r3, #4
 80125de:	d10a      	bne.n	80125f6 <etharp_tmr+0x122>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80125e0:	491b      	ldr	r1, [pc, #108]	@ (8012650 <etharp_tmr+0x17c>)
 80125e2:	687a      	ldr	r2, [r7, #4]
 80125e4:	4613      	mov	r3, r2
 80125e6:	005b      	lsls	r3, r3, #1
 80125e8:	4413      	add	r3, r2
 80125ea:	00db      	lsls	r3, r3, #3
 80125ec:	440b      	add	r3, r1
 80125ee:	3314      	adds	r3, #20
 80125f0:	2202      	movs	r2, #2
 80125f2:	701a      	strb	r2, [r3, #0]
 80125f4:	e01e      	b.n	8012634 <etharp_tmr+0x160>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80125f6:	4916      	ldr	r1, [pc, #88]	@ (8012650 <etharp_tmr+0x17c>)
 80125f8:	687a      	ldr	r2, [r7, #4]
 80125fa:	4613      	mov	r3, r2
 80125fc:	005b      	lsls	r3, r3, #1
 80125fe:	4413      	add	r3, r2
 8012600:	00db      	lsls	r3, r3, #3
 8012602:	440b      	add	r3, r1
 8012604:	3314      	adds	r3, #20
 8012606:	781b      	ldrb	r3, [r3, #0]
 8012608:	2b01      	cmp	r3, #1
 801260a:	d113      	bne.n	8012634 <etharp_tmr+0x160>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801260c:	4910      	ldr	r1, [pc, #64]	@ (8012650 <etharp_tmr+0x17c>)
 801260e:	687a      	ldr	r2, [r7, #4]
 8012610:	4613      	mov	r3, r2
 8012612:	005b      	lsls	r3, r3, #1
 8012614:	4413      	add	r3, r2
 8012616:	00db      	lsls	r3, r3, #3
 8012618:	440b      	add	r3, r1
 801261a:	3308      	adds	r3, #8
 801261c:	6818      	ldr	r0, [r3, #0]
 801261e:	687a      	ldr	r2, [r7, #4]
 8012620:	4613      	mov	r3, r2
 8012622:	005b      	lsls	r3, r3, #1
 8012624:	4413      	add	r3, r2
 8012626:	00db      	lsls	r3, r3, #3
 8012628:	4a09      	ldr	r2, [pc, #36]	@ (8012650 <etharp_tmr+0x17c>)
 801262a:	4413      	add	r3, r2
 801262c:	3304      	adds	r3, #4
 801262e:	4619      	mov	r1, r3
 8012630:	f000 ff6a 	bl	8013508 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	3301      	adds	r3, #1
 8012638:	607b      	str	r3, [r7, #4]
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	2b09      	cmp	r3, #9
 801263e:	f77f af52 	ble.w	80124e6 <etharp_tmr+0x12>
      }
    }
  }
}
 8012642:	bf00      	nop
 8012644:	bf00      	nop
 8012646:	3708      	adds	r7, #8
 8012648:	46bd      	mov	sp, r7
 801264a:	bd80      	pop	{r7, pc}
 801264c:	08019ae0 	.word	0x08019ae0
 8012650:	24003338 	.word	0x24003338
 8012654:	08019af0 	.word	0x08019af0
 8012658:	08019af8 	.word	0x08019af8
 801265c:	08019b00 	.word	0x08019b00

08012660 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012660:	b580      	push	{r7, lr}
 8012662:	b08a      	sub	sp, #40	@ 0x28
 8012664:	af00      	add	r7, sp, #0
 8012666:	60f8      	str	r0, [r7, #12]
 8012668:	460b      	mov	r3, r1
 801266a:	607a      	str	r2, [r7, #4]
 801266c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801266e:	230a      	movs	r3, #10
 8012670:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8012672:	230a      	movs	r3, #10
 8012674:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012676:	230a      	movs	r3, #10
 8012678:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801267a:	2300      	movs	r3, #0
 801267c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801267e:	230a      	movs	r3, #10
 8012680:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012682:	2300      	movs	r3, #0
 8012684:	83bb      	strh	r3, [r7, #28]
 8012686:	2300      	movs	r3, #0
 8012688:	837b      	strh	r3, [r7, #26]
 801268a:	2300      	movs	r3, #0
 801268c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801268e:	2300      	movs	r3, #0
 8012690:	843b      	strh	r3, [r7, #32]
 8012692:	e0ba      	b.n	801280a <etharp_find_entry+0x1aa>
    u8_t state = arp_table[i].state;
 8012694:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012698:	4993      	ldr	r1, [pc, #588]	@ (80128e8 <etharp_find_entry+0x288>)
 801269a:	4613      	mov	r3, r2
 801269c:	005b      	lsls	r3, r3, #1
 801269e:	4413      	add	r3, r2
 80126a0:	00db      	lsls	r3, r3, #3
 80126a2:	440b      	add	r3, r1
 80126a4:	3314      	adds	r3, #20
 80126a6:	781b      	ldrb	r3, [r3, #0]
 80126a8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80126aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80126ae:	2b0a      	cmp	r3, #10
 80126b0:	d10b      	bne.n	80126ca <etharp_find_entry+0x6a>
 80126b2:	7dfb      	ldrb	r3, [r7, #23]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d108      	bne.n	80126ca <etharp_find_entry+0x6a>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
 80126b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80126bc:	4619      	mov	r1, r3
 80126be:	488b      	ldr	r0, [pc, #556]	@ (80128ec <etharp_find_entry+0x28c>)
 80126c0:	f002 fe92 	bl	80153e8 <iprintf>
      /* remember first empty entry */
      empty = i;
 80126c4:	8c3b      	ldrh	r3, [r7, #32]
 80126c6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80126c8:	e09b      	b.n	8012802 <etharp_find_entry+0x1a2>
    } else if (state != ETHARP_STATE_EMPTY) {
 80126ca:	7dfb      	ldrb	r3, [r7, #23]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	f000 8098 	beq.w	8012802 <etharp_find_entry+0x1a2>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80126d2:	7dfb      	ldrb	r3, [r7, #23]
 80126d4:	2b01      	cmp	r3, #1
 80126d6:	d009      	beq.n	80126ec <etharp_find_entry+0x8c>
 80126d8:	7dfb      	ldrb	r3, [r7, #23]
 80126da:	2b01      	cmp	r3, #1
 80126dc:	d806      	bhi.n	80126ec <etharp_find_entry+0x8c>
 80126de:	4b84      	ldr	r3, [pc, #528]	@ (80128f0 <etharp_find_entry+0x290>)
 80126e0:	f240 1223 	movw	r2, #291	@ 0x123
 80126e4:	4983      	ldr	r1, [pc, #524]	@ (80128f4 <etharp_find_entry+0x294>)
 80126e6:	4884      	ldr	r0, [pc, #528]	@ (80128f8 <etharp_find_entry+0x298>)
 80126e8:	f002 fe7e 	bl	80153e8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d026      	beq.n	8012740 <etharp_find_entry+0xe0>
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	6819      	ldr	r1, [r3, #0]
 80126f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80126fa:	487b      	ldr	r0, [pc, #492]	@ (80128e8 <etharp_find_entry+0x288>)
 80126fc:	4613      	mov	r3, r2
 80126fe:	005b      	lsls	r3, r3, #1
 8012700:	4413      	add	r3, r2
 8012702:	00db      	lsls	r3, r3, #3
 8012704:	4403      	add	r3, r0
 8012706:	3304      	adds	r3, #4
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	4299      	cmp	r1, r3
 801270c:	d118      	bne.n	8012740 <etharp_find_entry+0xe0>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d00c      	beq.n	801272e <etharp_find_entry+0xce>
 8012714:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012718:	4973      	ldr	r1, [pc, #460]	@ (80128e8 <etharp_find_entry+0x288>)
 801271a:	4613      	mov	r3, r2
 801271c:	005b      	lsls	r3, r3, #1
 801271e:	4413      	add	r3, r2
 8012720:	00db      	lsls	r3, r3, #3
 8012722:	440b      	add	r3, r1
 8012724:	3308      	adds	r3, #8
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	687a      	ldr	r2, [r7, #4]
 801272a:	429a      	cmp	r2, r3
 801272c:	d108      	bne.n	8012740 <etharp_find_entry+0xe0>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
 801272e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012732:	4619      	mov	r1, r3
 8012734:	4871      	ldr	r0, [pc, #452]	@ (80128fc <etharp_find_entry+0x29c>)
 8012736:	f002 fe57 	bl	80153e8 <iprintf>
        /* found exact IP address match, simply bail out */
        return i;
 801273a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801273e:	e142      	b.n	80129c6 <etharp_find_entry+0x366>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012740:	7dfb      	ldrb	r3, [r7, #23]
 8012742:	2b01      	cmp	r3, #1
 8012744:	d140      	bne.n	80127c8 <etharp_find_entry+0x168>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012746:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801274a:	4967      	ldr	r1, [pc, #412]	@ (80128e8 <etharp_find_entry+0x288>)
 801274c:	4613      	mov	r3, r2
 801274e:	005b      	lsls	r3, r3, #1
 8012750:	4413      	add	r3, r2
 8012752:	00db      	lsls	r3, r3, #3
 8012754:	440b      	add	r3, r1
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d01a      	beq.n	8012792 <etharp_find_entry+0x132>
          if (arp_table[i].ctime >= age_queue) {
 801275c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012760:	4961      	ldr	r1, [pc, #388]	@ (80128e8 <etharp_find_entry+0x288>)
 8012762:	4613      	mov	r3, r2
 8012764:	005b      	lsls	r3, r3, #1
 8012766:	4413      	add	r3, r2
 8012768:	00db      	lsls	r3, r3, #3
 801276a:	440b      	add	r3, r1
 801276c:	3312      	adds	r3, #18
 801276e:	881b      	ldrh	r3, [r3, #0]
 8012770:	8bba      	ldrh	r2, [r7, #28]
 8012772:	429a      	cmp	r2, r3
 8012774:	d845      	bhi.n	8012802 <etharp_find_entry+0x1a2>
            old_queue = i;
 8012776:	8c3b      	ldrh	r3, [r7, #32]
 8012778:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801277a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801277e:	495a      	ldr	r1, [pc, #360]	@ (80128e8 <etharp_find_entry+0x288>)
 8012780:	4613      	mov	r3, r2
 8012782:	005b      	lsls	r3, r3, #1
 8012784:	4413      	add	r3, r2
 8012786:	00db      	lsls	r3, r3, #3
 8012788:	440b      	add	r3, r1
 801278a:	3312      	adds	r3, #18
 801278c:	881b      	ldrh	r3, [r3, #0]
 801278e:	83bb      	strh	r3, [r7, #28]
 8012790:	e037      	b.n	8012802 <etharp_find_entry+0x1a2>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012792:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012796:	4954      	ldr	r1, [pc, #336]	@ (80128e8 <etharp_find_entry+0x288>)
 8012798:	4613      	mov	r3, r2
 801279a:	005b      	lsls	r3, r3, #1
 801279c:	4413      	add	r3, r2
 801279e:	00db      	lsls	r3, r3, #3
 80127a0:	440b      	add	r3, r1
 80127a2:	3312      	adds	r3, #18
 80127a4:	881b      	ldrh	r3, [r3, #0]
 80127a6:	8b7a      	ldrh	r2, [r7, #26]
 80127a8:	429a      	cmp	r2, r3
 80127aa:	d82a      	bhi.n	8012802 <etharp_find_entry+0x1a2>
            old_pending = i;
 80127ac:	8c3b      	ldrh	r3, [r7, #32]
 80127ae:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80127b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80127b4:	494c      	ldr	r1, [pc, #304]	@ (80128e8 <etharp_find_entry+0x288>)
 80127b6:	4613      	mov	r3, r2
 80127b8:	005b      	lsls	r3, r3, #1
 80127ba:	4413      	add	r3, r2
 80127bc:	00db      	lsls	r3, r3, #3
 80127be:	440b      	add	r3, r1
 80127c0:	3312      	adds	r3, #18
 80127c2:	881b      	ldrh	r3, [r3, #0]
 80127c4:	837b      	strh	r3, [r7, #26]
 80127c6:	e01c      	b.n	8012802 <etharp_find_entry+0x1a2>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80127c8:	7dfb      	ldrb	r3, [r7, #23]
 80127ca:	2b01      	cmp	r3, #1
 80127cc:	d919      	bls.n	8012802 <etharp_find_entry+0x1a2>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80127ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80127d2:	4945      	ldr	r1, [pc, #276]	@ (80128e8 <etharp_find_entry+0x288>)
 80127d4:	4613      	mov	r3, r2
 80127d6:	005b      	lsls	r3, r3, #1
 80127d8:	4413      	add	r3, r2
 80127da:	00db      	lsls	r3, r3, #3
 80127dc:	440b      	add	r3, r1
 80127de:	3312      	adds	r3, #18
 80127e0:	881b      	ldrh	r3, [r3, #0]
 80127e2:	8b3a      	ldrh	r2, [r7, #24]
 80127e4:	429a      	cmp	r2, r3
 80127e6:	d80c      	bhi.n	8012802 <etharp_find_entry+0x1a2>
            old_stable = i;
 80127e8:	8c3b      	ldrh	r3, [r7, #32]
 80127ea:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80127ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80127f0:	493d      	ldr	r1, [pc, #244]	@ (80128e8 <etharp_find_entry+0x288>)
 80127f2:	4613      	mov	r3, r2
 80127f4:	005b      	lsls	r3, r3, #1
 80127f6:	4413      	add	r3, r2
 80127f8:	00db      	lsls	r3, r3, #3
 80127fa:	440b      	add	r3, r1
 80127fc:	3312      	adds	r3, #18
 80127fe:	881b      	ldrh	r3, [r3, #0]
 8012800:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012802:	8c3b      	ldrh	r3, [r7, #32]
 8012804:	3301      	adds	r3, #1
 8012806:	b29b      	uxth	r3, r3
 8012808:	843b      	strh	r3, [r7, #32]
 801280a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801280e:	2b09      	cmp	r3, #9
 8012810:	f77f af40 	ble.w	8012694 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012814:	7afb      	ldrb	r3, [r7, #11]
 8012816:	f003 0302 	and.w	r3, r3, #2
 801281a:	2b00      	cmp	r3, #0
 801281c:	d108      	bne.n	8012830 <etharp_find_entry+0x1d0>
 801281e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012822:	2b0a      	cmp	r3, #10
 8012824:	d10a      	bne.n	801283c <etharp_find_entry+0x1dc>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012826:	7afb      	ldrb	r3, [r7, #11]
 8012828:	f003 0301 	and.w	r3, r3, #1
 801282c:	2b00      	cmp	r3, #0
 801282e:	d105      	bne.n	801283c <etharp_find_entry+0x1dc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
 8012830:	4833      	ldr	r0, [pc, #204]	@ (8012900 <etharp_find_entry+0x2a0>)
 8012832:	f002 fe49 	bl	80154c8 <puts>
    return (s16_t)ERR_MEM;
 8012836:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801283a:	e0c4      	b.n	80129c6 <etharp_find_entry+0x366>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801283c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012840:	2b09      	cmp	r3, #9
 8012842:	dc08      	bgt.n	8012856 <etharp_find_entry+0x1f6>
    i = empty;
 8012844:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012846:	843b      	strh	r3, [r7, #32]
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
 8012848:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801284c:	4619      	mov	r1, r3
 801284e:	482d      	ldr	r0, [pc, #180]	@ (8012904 <etharp_find_entry+0x2a4>)
 8012850:	f002 fdca 	bl	80153e8 <iprintf>
 8012854:	e072      	b.n	801293c <etharp_find_entry+0x2dc>
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012856:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801285a:	2b09      	cmp	r3, #9
 801285c:	dc1a      	bgt.n	8012894 <etharp_find_entry+0x234>
      /* recycle oldest stable*/
      i = old_stable;
 801285e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012860:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
 8012862:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012866:	4619      	mov	r1, r3
 8012868:	4827      	ldr	r0, [pc, #156]	@ (8012908 <etharp_find_entry+0x2a8>)
 801286a:	f002 fdbd 	bl	80153e8 <iprintf>
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801286e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012872:	491d      	ldr	r1, [pc, #116]	@ (80128e8 <etharp_find_entry+0x288>)
 8012874:	4613      	mov	r3, r2
 8012876:	005b      	lsls	r3, r3, #1
 8012878:	4413      	add	r3, r2
 801287a:	00db      	lsls	r3, r3, #3
 801287c:	440b      	add	r3, r1
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d04b      	beq.n	801291c <etharp_find_entry+0x2bc>
 8012884:	4b1a      	ldr	r3, [pc, #104]	@ (80128f0 <etharp_find_entry+0x290>)
 8012886:	f240 126d 	movw	r2, #365	@ 0x16d
 801288a:	4920      	ldr	r1, [pc, #128]	@ (801290c <etharp_find_entry+0x2ac>)
 801288c:	481a      	ldr	r0, [pc, #104]	@ (80128f8 <etharp_find_entry+0x298>)
 801288e:	f002 fdab 	bl	80153e8 <iprintf>
 8012892:	e043      	b.n	801291c <etharp_find_entry+0x2bc>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012894:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8012898:	2b09      	cmp	r3, #9
 801289a:	dc08      	bgt.n	80128ae <etharp_find_entry+0x24e>
      /* recycle oldest pending */
      i = old_pending;
 801289c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801289e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
 80128a0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80128a4:	4619      	mov	r1, r3
 80128a6:	481a      	ldr	r0, [pc, #104]	@ (8012910 <etharp_find_entry+0x2b0>)
 80128a8:	f002 fd9e 	bl	80153e8 <iprintf>
 80128ac:	e036      	b.n	801291c <etharp_find_entry+0x2bc>
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80128ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80128b2:	2b09      	cmp	r3, #9
 80128b4:	dc11      	bgt.n	80128da <etharp_find_entry+0x27a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80128b6:	8bfb      	ldrh	r3, [r7, #30]
 80128b8:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
 80128ba:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 80128be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80128c2:	4809      	ldr	r0, [pc, #36]	@ (80128e8 <etharp_find_entry+0x288>)
 80128c4:	4613      	mov	r3, r2
 80128c6:	005b      	lsls	r3, r3, #1
 80128c8:	4413      	add	r3, r2
 80128ca:	00db      	lsls	r3, r3, #3
 80128cc:	4403      	add	r3, r0
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	461a      	mov	r2, r3
 80128d2:	4810      	ldr	r0, [pc, #64]	@ (8012914 <etharp_find_entry+0x2b4>)
 80128d4:	f002 fd88 	bl	80153e8 <iprintf>
 80128d8:	e020      	b.n	801291c <etharp_find_entry+0x2bc>
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
 80128da:	480f      	ldr	r0, [pc, #60]	@ (8012918 <etharp_find_entry+0x2b8>)
 80128dc:	f002 fdf4 	bl	80154c8 <puts>
      return (s16_t)ERR_MEM;
 80128e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80128e4:	e06f      	b.n	80129c6 <etharp_find_entry+0x366>
 80128e6:	bf00      	nop
 80128e8:	24003338 	.word	0x24003338
 80128ec:	08019b24 	.word	0x08019b24
 80128f0:	08019b50 	.word	0x08019b50
 80128f4:	08019b88 	.word	0x08019b88
 80128f8:	08019bc8 	.word	0x08019bc8
 80128fc:	08019bf0 	.word	0x08019bf0
 8012900:	08019c1c 	.word	0x08019c1c
 8012904:	08019c60 	.word	0x08019c60
 8012908:	08019c90 	.word	0x08019c90
 801290c:	08019cc8 	.word	0x08019cc8
 8012910:	08019ce0 	.word	0x08019ce0
 8012914:	08019d28 	.word	0x08019d28
 8012918:	08019d78 	.word	0x08019d78
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801291c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012920:	2b09      	cmp	r3, #9
 8012922:	dd06      	ble.n	8012932 <etharp_find_entry+0x2d2>
 8012924:	4b2a      	ldr	r3, [pc, #168]	@ (80129d0 <etharp_find_entry+0x370>)
 8012926:	f240 127f 	movw	r2, #383	@ 0x17f
 801292a:	492a      	ldr	r1, [pc, #168]	@ (80129d4 <etharp_find_entry+0x374>)
 801292c:	482a      	ldr	r0, [pc, #168]	@ (80129d8 <etharp_find_entry+0x378>)
 801292e:	f002 fd5b 	bl	80153e8 <iprintf>
    etharp_free_entry(i);
 8012932:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012936:	4618      	mov	r0, r3
 8012938:	f7ff fd5a 	bl	80123f0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801293c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012940:	2b09      	cmp	r3, #9
 8012942:	dd06      	ble.n	8012952 <etharp_find_entry+0x2f2>
 8012944:	4b22      	ldr	r3, [pc, #136]	@ (80129d0 <etharp_find_entry+0x370>)
 8012946:	f240 1283 	movw	r2, #387	@ 0x183
 801294a:	4922      	ldr	r1, [pc, #136]	@ (80129d4 <etharp_find_entry+0x374>)
 801294c:	4822      	ldr	r0, [pc, #136]	@ (80129d8 <etharp_find_entry+0x378>)
 801294e:	f002 fd4b 	bl	80153e8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012952:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012956:	4921      	ldr	r1, [pc, #132]	@ (80129dc <etharp_find_entry+0x37c>)
 8012958:	4613      	mov	r3, r2
 801295a:	005b      	lsls	r3, r3, #1
 801295c:	4413      	add	r3, r2
 801295e:	00db      	lsls	r3, r3, #3
 8012960:	440b      	add	r3, r1
 8012962:	3314      	adds	r3, #20
 8012964:	781b      	ldrb	r3, [r3, #0]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d006      	beq.n	8012978 <etharp_find_entry+0x318>
 801296a:	4b19      	ldr	r3, [pc, #100]	@ (80129d0 <etharp_find_entry+0x370>)
 801296c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8012970:	491b      	ldr	r1, [pc, #108]	@ (80129e0 <etharp_find_entry+0x380>)
 8012972:	4819      	ldr	r0, [pc, #100]	@ (80129d8 <etharp_find_entry+0x378>)
 8012974:	f002 fd38 	bl	80153e8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d00b      	beq.n	8012996 <etharp_find_entry+0x336>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801297e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	6819      	ldr	r1, [r3, #0]
 8012986:	4815      	ldr	r0, [pc, #84]	@ (80129dc <etharp_find_entry+0x37c>)
 8012988:	4613      	mov	r3, r2
 801298a:	005b      	lsls	r3, r3, #1
 801298c:	4413      	add	r3, r2
 801298e:	00db      	lsls	r3, r3, #3
 8012990:	4403      	add	r3, r0
 8012992:	3304      	adds	r3, #4
 8012994:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012996:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801299a:	4910      	ldr	r1, [pc, #64]	@ (80129dc <etharp_find_entry+0x37c>)
 801299c:	4613      	mov	r3, r2
 801299e:	005b      	lsls	r3, r3, #1
 80129a0:	4413      	add	r3, r2
 80129a2:	00db      	lsls	r3, r3, #3
 80129a4:	440b      	add	r3, r1
 80129a6:	3312      	adds	r3, #18
 80129a8:	2200      	movs	r2, #0
 80129aa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80129ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80129b0:	490a      	ldr	r1, [pc, #40]	@ (80129dc <etharp_find_entry+0x37c>)
 80129b2:	4613      	mov	r3, r2
 80129b4:	005b      	lsls	r3, r3, #1
 80129b6:	4413      	add	r3, r2
 80129b8:	00db      	lsls	r3, r3, #3
 80129ba:	440b      	add	r3, r1
 80129bc:	3308      	adds	r3, #8
 80129be:	687a      	ldr	r2, [r7, #4]
 80129c0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80129c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80129c6:	4618      	mov	r0, r3
 80129c8:	3728      	adds	r7, #40	@ 0x28
 80129ca:	46bd      	mov	sp, r7
 80129cc:	bd80      	pop	{r7, pc}
 80129ce:	bf00      	nop
 80129d0:	08019b50 	.word	0x08019b50
 80129d4:	08019db0 	.word	0x08019db0
 80129d8:	08019bc8 	.word	0x08019bc8
 80129dc:	24003338 	.word	0x24003338
 80129e0:	08019dc4 	.word	0x08019dc4

080129e4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80129e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129e8:	b08e      	sub	sp, #56	@ 0x38
 80129ea:	af08      	add	r7, sp, #32
 80129ec:	60f8      	str	r0, [r7, #12]
 80129ee:	60b9      	str	r1, [r7, #8]
 80129f0:	607a      	str	r2, [r7, #4]
 80129f2:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80129fa:	2b06      	cmp	r3, #6
 80129fc:	d006      	beq.n	8012a0c <etharp_update_arp_entry+0x28>
 80129fe:	4b64      	ldr	r3, [pc, #400]	@ (8012b90 <etharp_update_arp_entry+0x1ac>)
 8012a00:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8012a04:	4963      	ldr	r1, [pc, #396]	@ (8012b94 <etharp_update_arp_entry+0x1b0>)
 8012a06:	4864      	ldr	r0, [pc, #400]	@ (8012b98 <etharp_update_arp_entry+0x1b4>)
 8012a08:	f002 fcee 	bl	80153e8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
 8012a0c:	68bb      	ldr	r3, [r7, #8]
 8012a0e:	781b      	ldrb	r3, [r3, #0]
 8012a10:	469c      	mov	ip, r3
 8012a12:	68bb      	ldr	r3, [r7, #8]
 8012a14:	3301      	adds	r3, #1
 8012a16:	781b      	ldrb	r3, [r3, #0]
 8012a18:	469e      	mov	lr, r3
 8012a1a:	68bb      	ldr	r3, [r7, #8]
 8012a1c:	3302      	adds	r3, #2
 8012a1e:	781b      	ldrb	r3, [r3, #0]
 8012a20:	4698      	mov	r8, r3
 8012a22:	68bb      	ldr	r3, [r7, #8]
 8012a24:	3303      	adds	r3, #3
 8012a26:	781b      	ldrb	r3, [r3, #0]
 8012a28:	461a      	mov	r2, r3
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	781b      	ldrb	r3, [r3, #0]
 8012a2e:	4619      	mov	r1, r3
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	785b      	ldrb	r3, [r3, #1]
 8012a34:	4618      	mov	r0, r3
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	789b      	ldrb	r3, [r3, #2]
 8012a3a:	461c      	mov	r4, r3
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	78db      	ldrb	r3, [r3, #3]
 8012a40:	461d      	mov	r5, r3
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	791b      	ldrb	r3, [r3, #4]
 8012a46:	461e      	mov	r6, r3
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	795b      	ldrb	r3, [r3, #5]
 8012a4c:	9306      	str	r3, [sp, #24]
 8012a4e:	9605      	str	r6, [sp, #20]
 8012a50:	9504      	str	r5, [sp, #16]
 8012a52:	9403      	str	r4, [sp, #12]
 8012a54:	9002      	str	r0, [sp, #8]
 8012a56:	9101      	str	r1, [sp, #4]
 8012a58:	9200      	str	r2, [sp, #0]
 8012a5a:	4643      	mov	r3, r8
 8012a5c:	4672      	mov	r2, lr
 8012a5e:	4661      	mov	r1, ip
 8012a60:	484e      	ldr	r0, [pc, #312]	@ (8012b9c <etharp_update_arp_entry+0x1b8>)
 8012a62:	f002 fcc1 	bl	80153e8 <iprintf>
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012a66:	68bb      	ldr	r3, [r7, #8]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d012      	beq.n	8012a92 <etharp_update_arp_entry+0xae>
 8012a6c:	68bb      	ldr	r3, [r7, #8]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d00e      	beq.n	8012a92 <etharp_update_arp_entry+0xae>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012a74:	68bb      	ldr	r3, [r7, #8]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	68f9      	ldr	r1, [r7, #12]
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	f001 fbf4 	bl	8014268 <ip4_addr_isbroadcast_u32>
 8012a80:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d105      	bne.n	8012a92 <etharp_update_arp_entry+0xae>
      ip4_addr_ismulticast(ipaddr)) {
 8012a86:	68bb      	ldr	r3, [r7, #8]
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012a8e:	2be0      	cmp	r3, #224	@ 0xe0
 8012a90:	d105      	bne.n	8012a9e <etharp_update_arp_entry+0xba>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
 8012a92:	4843      	ldr	r0, [pc, #268]	@ (8012ba0 <etharp_update_arp_entry+0x1bc>)
 8012a94:	f002 fd18 	bl	80154c8 <puts>
    return ERR_ARG;
 8012a98:	f06f 030f 	mvn.w	r3, #15
 8012a9c:	e072      	b.n	8012b84 <etharp_update_arp_entry+0x1a0>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012a9e:	78fb      	ldrb	r3, [r7, #3]
 8012aa0:	68fa      	ldr	r2, [r7, #12]
 8012aa2:	4619      	mov	r1, r3
 8012aa4:	68b8      	ldr	r0, [r7, #8]
 8012aa6:	f7ff fddb 	bl	8012660 <etharp_find_entry>
 8012aaa:	4603      	mov	r3, r0
 8012aac:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012aae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	da02      	bge.n	8012abc <etharp_update_arp_entry+0xd8>
    return (err_t)i;
 8012ab6:	8afb      	ldrh	r3, [r7, #22]
 8012ab8:	b25b      	sxtb	r3, r3
 8012aba:	e063      	b.n	8012b84 <etharp_update_arp_entry+0x1a0>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012abc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012ac0:	4938      	ldr	r1, [pc, #224]	@ (8012ba4 <etharp_update_arp_entry+0x1c0>)
 8012ac2:	4613      	mov	r3, r2
 8012ac4:	005b      	lsls	r3, r3, #1
 8012ac6:	4413      	add	r3, r2
 8012ac8:	00db      	lsls	r3, r3, #3
 8012aca:	440b      	add	r3, r1
 8012acc:	3314      	adds	r3, #20
 8012ace:	2202      	movs	r2, #2
 8012ad0:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012ad2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012ad6:	4933      	ldr	r1, [pc, #204]	@ (8012ba4 <etharp_update_arp_entry+0x1c0>)
 8012ad8:	4613      	mov	r3, r2
 8012ada:	005b      	lsls	r3, r3, #1
 8012adc:	4413      	add	r3, r2
 8012ade:	00db      	lsls	r3, r3, #3
 8012ae0:	440b      	add	r3, r1
 8012ae2:	3308      	adds	r3, #8
 8012ae4:	68fa      	ldr	r2, [r7, #12]
 8012ae6:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
 8012ae8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012aec:	4619      	mov	r1, r3
 8012aee:	482e      	ldr	r0, [pc, #184]	@ (8012ba8 <etharp_update_arp_entry+0x1c4>)
 8012af0:	f002 fc7a 	bl	80153e8 <iprintf>
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012af4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012af8:	4613      	mov	r3, r2
 8012afa:	005b      	lsls	r3, r3, #1
 8012afc:	4413      	add	r3, r2
 8012afe:	00db      	lsls	r3, r3, #3
 8012b00:	3308      	adds	r3, #8
 8012b02:	4a28      	ldr	r2, [pc, #160]	@ (8012ba4 <etharp_update_arp_entry+0x1c0>)
 8012b04:	4413      	add	r3, r2
 8012b06:	3304      	adds	r3, #4
 8012b08:	2206      	movs	r2, #6
 8012b0a:	6879      	ldr	r1, [r7, #4]
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	f002 fe40 	bl	8015792 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012b12:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012b16:	4923      	ldr	r1, [pc, #140]	@ (8012ba4 <etharp_update_arp_entry+0x1c0>)
 8012b18:	4613      	mov	r3, r2
 8012b1a:	005b      	lsls	r3, r3, #1
 8012b1c:	4413      	add	r3, r2
 8012b1e:	00db      	lsls	r3, r3, #3
 8012b20:	440b      	add	r3, r1
 8012b22:	3312      	adds	r3, #18
 8012b24:	2200      	movs	r2, #0
 8012b26:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012b28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012b2c:	491d      	ldr	r1, [pc, #116]	@ (8012ba4 <etharp_update_arp_entry+0x1c0>)
 8012b2e:	4613      	mov	r3, r2
 8012b30:	005b      	lsls	r3, r3, #1
 8012b32:	4413      	add	r3, r2
 8012b34:	00db      	lsls	r3, r3, #3
 8012b36:	440b      	add	r3, r1
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d021      	beq.n	8012b82 <etharp_update_arp_entry+0x19e>
    struct pbuf *p = arp_table[i].q;
 8012b3e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012b42:	4918      	ldr	r1, [pc, #96]	@ (8012ba4 <etharp_update_arp_entry+0x1c0>)
 8012b44:	4613      	mov	r3, r2
 8012b46:	005b      	lsls	r3, r3, #1
 8012b48:	4413      	add	r3, r2
 8012b4a:	00db      	lsls	r3, r3, #3
 8012b4c:	440b      	add	r3, r1
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012b52:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012b56:	4913      	ldr	r1, [pc, #76]	@ (8012ba4 <etharp_update_arp_entry+0x1c0>)
 8012b58:	4613      	mov	r3, r2
 8012b5a:	005b      	lsls	r3, r3, #1
 8012b5c:	4413      	add	r3, r2
 8012b5e:	00db      	lsls	r3, r3, #3
 8012b60:	440b      	add	r3, r1
 8012b62:	2200      	movs	r2, #0
 8012b64:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8012b6c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012b70:	9300      	str	r3, [sp, #0]
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	6939      	ldr	r1, [r7, #16]
 8012b76:	68f8      	ldr	r0, [r7, #12]
 8012b78:	f002 fae4 	bl	8015144 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012b7c:	6938      	ldr	r0, [r7, #16]
 8012b7e:	f7f8 fab5 	bl	800b0ec <pbuf_free>
  }
  return ERR_OK;
 8012b82:	2300      	movs	r3, #0
}
 8012b84:	4618      	mov	r0, r3
 8012b86:	3718      	adds	r7, #24
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b8e:	bf00      	nop
 8012b90:	08019b50 	.word	0x08019b50
 8012b94:	08019df0 	.word	0x08019df0
 8012b98:	08019bc8 	.word	0x08019bc8
 8012b9c:	08019e14 	.word	0x08019e14
 8012ba0:	08019e64 	.word	0x08019e64
 8012ba4:	24003338 	.word	0x24003338
 8012ba8:	08019eb0 	.word	0x08019eb0

08012bac <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	b084      	sub	sp, #16
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	60fb      	str	r3, [r7, #12]
 8012bb8:	e01e      	b.n	8012bf8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012bba:	4913      	ldr	r1, [pc, #76]	@ (8012c08 <etharp_cleanup_netif+0x5c>)
 8012bbc:	68fa      	ldr	r2, [r7, #12]
 8012bbe:	4613      	mov	r3, r2
 8012bc0:	005b      	lsls	r3, r3, #1
 8012bc2:	4413      	add	r3, r2
 8012bc4:	00db      	lsls	r3, r3, #3
 8012bc6:	440b      	add	r3, r1
 8012bc8:	3314      	adds	r3, #20
 8012bca:	781b      	ldrb	r3, [r3, #0]
 8012bcc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012bce:	7afb      	ldrb	r3, [r7, #11]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d00e      	beq.n	8012bf2 <etharp_cleanup_netif+0x46>
 8012bd4:	490c      	ldr	r1, [pc, #48]	@ (8012c08 <etharp_cleanup_netif+0x5c>)
 8012bd6:	68fa      	ldr	r2, [r7, #12]
 8012bd8:	4613      	mov	r3, r2
 8012bda:	005b      	lsls	r3, r3, #1
 8012bdc:	4413      	add	r3, r2
 8012bde:	00db      	lsls	r3, r3, #3
 8012be0:	440b      	add	r3, r1
 8012be2:	3308      	adds	r3, #8
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	687a      	ldr	r2, [r7, #4]
 8012be8:	429a      	cmp	r2, r3
 8012bea:	d102      	bne.n	8012bf2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012bec:	68f8      	ldr	r0, [r7, #12]
 8012bee:	f7ff fbff 	bl	80123f0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	3301      	adds	r3, #1
 8012bf6:	60fb      	str	r3, [r7, #12]
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	2b09      	cmp	r3, #9
 8012bfc:	dddd      	ble.n	8012bba <etharp_cleanup_netif+0xe>
    }
  }
}
 8012bfe:	bf00      	nop
 8012c00:	bf00      	nop
 8012c02:	3710      	adds	r7, #16
 8012c04:	46bd      	mov	sp, r7
 8012c06:	bd80      	pop	{r7, pc}
 8012c08:	24003338 	.word	0x24003338

08012c0c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012c0c:	b5b0      	push	{r4, r5, r7, lr}
 8012c0e:	b08a      	sub	sp, #40	@ 0x28
 8012c10:	af04      	add	r7, sp, #16
 8012c12:	6078      	str	r0, [r7, #4]
 8012c14:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012c16:	683b      	ldr	r3, [r7, #0]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d107      	bne.n	8012c2c <etharp_input+0x20>
 8012c1c:	4b54      	ldr	r3, [pc, #336]	@ (8012d70 <etharp_input+0x164>)
 8012c1e:	f240 228a 	movw	r2, #650	@ 0x28a
 8012c22:	4954      	ldr	r1, [pc, #336]	@ (8012d74 <etharp_input+0x168>)
 8012c24:	4854      	ldr	r0, [pc, #336]	@ (8012d78 <etharp_input+0x16c>)
 8012c26:	f002 fbdf 	bl	80153e8 <iprintf>
 8012c2a:	e09e      	b.n	8012d6a <etharp_input+0x15e>

  hdr = (struct etharp_hdr *)p->payload;
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	685b      	ldr	r3, [r3, #4]
 8012c30:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012c32:	693b      	ldr	r3, [r7, #16]
 8012c34:	881b      	ldrh	r3, [r3, #0]
 8012c36:	b29b      	uxth	r3, r3
 8012c38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012c3c:	d10c      	bne.n	8012c58 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012c3e:	693b      	ldr	r3, [r7, #16]
 8012c40:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012c42:	2b06      	cmp	r3, #6
 8012c44:	d108      	bne.n	8012c58 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012c46:	693b      	ldr	r3, [r7, #16]
 8012c48:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012c4a:	2b04      	cmp	r3, #4
 8012c4c:	d104      	bne.n	8012c58 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012c4e:	693b      	ldr	r3, [r7, #16]
 8012c50:	885b      	ldrh	r3, [r3, #2]
 8012c52:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012c54:	2b08      	cmp	r3, #8
 8012c56:	d015      	beq.n	8012c84 <etharp_input+0x78>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 8012c58:	693b      	ldr	r3, [r7, #16]
 8012c5a:	881b      	ldrh	r3, [r3, #0]
 8012c5c:	b29b      	uxth	r3, r3
 8012c5e:	4619      	mov	r1, r3
 8012c60:	693b      	ldr	r3, [r7, #16]
 8012c62:	791b      	ldrb	r3, [r3, #4]
 8012c64:	461a      	mov	r2, r3
 8012c66:	693b      	ldr	r3, [r7, #16]
 8012c68:	885b      	ldrh	r3, [r3, #2]
 8012c6a:	b29b      	uxth	r3, r3
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	693b      	ldr	r3, [r7, #16]
 8012c70:	795b      	ldrb	r3, [r3, #5]
 8012c72:	9300      	str	r3, [sp, #0]
 8012c74:	4603      	mov	r3, r0
 8012c76:	4841      	ldr	r0, [pc, #260]	@ (8012d7c <etharp_input+0x170>)
 8012c78:	f002 fbb6 	bl	80153e8 <iprintf>
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012c7c:	6878      	ldr	r0, [r7, #4]
 8012c7e:	f7f8 fa35 	bl	800b0ec <pbuf_free>
    return;
 8012c82:	e072      	b.n	8012d6a <etharp_input+0x15e>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012c84:	693b      	ldr	r3, [r7, #16]
 8012c86:	330e      	adds	r3, #14
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012c8c:	693b      	ldr	r3, [r7, #16]
 8012c8e:	3318      	adds	r3, #24
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012c94:	683b      	ldr	r3, [r7, #0]
 8012c96:	3304      	adds	r3, #4
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d102      	bne.n	8012ca4 <etharp_input+0x98>
    for_us = 0;
 8012c9e:	2300      	movs	r3, #0
 8012ca0:	75fb      	strb	r3, [r7, #23]
 8012ca2:	e009      	b.n	8012cb8 <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012ca4:	68ba      	ldr	r2, [r7, #8]
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	3304      	adds	r3, #4
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	429a      	cmp	r2, r3
 8012cae:	bf0c      	ite	eq
 8012cb0:	2301      	moveq	r3, #1
 8012cb2:	2300      	movne	r3, #0
 8012cb4:	b2db      	uxtb	r3, r3
 8012cb6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012cb8:	693b      	ldr	r3, [r7, #16]
 8012cba:	f103 0208 	add.w	r2, r3, #8
 8012cbe:	7dfb      	ldrb	r3, [r7, #23]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d001      	beq.n	8012cc8 <etharp_input+0xbc>
 8012cc4:	2301      	movs	r3, #1
 8012cc6:	e000      	b.n	8012cca <etharp_input+0xbe>
 8012cc8:	2302      	movs	r3, #2
 8012cca:	f107 010c 	add.w	r1, r7, #12
 8012cce:	6838      	ldr	r0, [r7, #0]
 8012cd0:	f7ff fe88 	bl	80129e4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012cd4:	693b      	ldr	r3, [r7, #16]
 8012cd6:	88db      	ldrh	r3, [r3, #6]
 8012cd8:	b29b      	uxth	r3, r3
 8012cda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012cde:	d003      	beq.n	8012ce8 <etharp_input+0xdc>
 8012ce0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012ce4:	d02e      	beq.n	8012d44 <etharp_input+0x138>
 8012ce6:	e031      	b.n	8012d4c <etharp_input+0x140>
    case PP_HTONS(ARP_REQUEST):
      /* ARP request. If it asked for our address, we send out a
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
 8012ce8:	4825      	ldr	r0, [pc, #148]	@ (8012d80 <etharp_input+0x174>)
 8012cea:	f002 fbed 	bl	80154c8 <puts>
      /* ARP request for our address? */
      if (for_us) {
 8012cee:	7dfb      	ldrb	r3, [r7, #23]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d01a      	beq.n	8012d2a <etharp_input+0x11e>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012cf4:	683b      	ldr	r3, [r7, #0]
 8012cf6:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8012cfa:	693b      	ldr	r3, [r7, #16]
 8012cfc:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012d00:	683b      	ldr	r3, [r7, #0]
 8012d02:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8012d06:	683b      	ldr	r3, [r7, #0]
 8012d08:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012d0a:	693a      	ldr	r2, [r7, #16]
 8012d0c:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012d0e:	2102      	movs	r1, #2
 8012d10:	9103      	str	r1, [sp, #12]
 8012d12:	f107 010c 	add.w	r1, r7, #12
 8012d16:	9102      	str	r1, [sp, #8]
 8012d18:	9201      	str	r2, [sp, #4]
 8012d1a:	9300      	str	r3, [sp, #0]
 8012d1c:	462b      	mov	r3, r5
 8012d1e:	4622      	mov	r2, r4
 8012d20:	4601      	mov	r1, r0
 8012d22:	6838      	ldr	r0, [r7, #0]
 8012d24:	f000 fb38 	bl	8013398 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 8012d28:	e01c      	b.n	8012d64 <etharp_input+0x158>
      } else if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012d2a:	683b      	ldr	r3, [r7, #0]
 8012d2c:	3304      	adds	r3, #4
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d103      	bne.n	8012d3c <etharp_input+0x130>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: we are unconfigured, ARP request ignored.\n"));
 8012d34:	4813      	ldr	r0, [pc, #76]	@ (8012d84 <etharp_input+0x178>)
 8012d36:	f002 fbc7 	bl	80154c8 <puts>
      break;
 8012d3a:	e013      	b.n	8012d64 <etharp_input+0x158>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
 8012d3c:	4812      	ldr	r0, [pc, #72]	@ (8012d88 <etharp_input+0x17c>)
 8012d3e:	f002 fbc3 	bl	80154c8 <puts>
      break;
 8012d42:	e00f      	b.n	8012d64 <etharp_input+0x158>
    case PP_HTONS(ARP_REPLY):
      /* ARP reply. We already updated the ARP cache earlier. */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP reply\n"));
 8012d44:	4811      	ldr	r0, [pc, #68]	@ (8012d8c <etharp_input+0x180>)
 8012d46:	f002 fbbf 	bl	80154c8 <puts>
       * IP address also offered to us by the DHCP server. We do not
       * want to take a duplicate IP address on a single network.
       * @todo How should we handle redundant (fail-over) interfaces? */
      dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
 8012d4a:	e00b      	b.n	8012d64 <etharp_input+0x158>
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
 8012d4c:	693b      	ldr	r3, [r7, #16]
 8012d4e:	88db      	ldrh	r3, [r3, #6]
 8012d50:	b29b      	uxth	r3, r3
 8012d52:	4618      	mov	r0, r3
 8012d54:	f7f6 fd58 	bl	8009808 <lwip_htons>
 8012d58:	4603      	mov	r3, r0
 8012d5a:	4619      	mov	r1, r3
 8012d5c:	480c      	ldr	r0, [pc, #48]	@ (8012d90 <etharp_input+0x184>)
 8012d5e:	f002 fb43 	bl	80153e8 <iprintf>
      ETHARP_STATS_INC(etharp.err);
      break;
 8012d62:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012d64:	6878      	ldr	r0, [r7, #4]
 8012d66:	f7f8 f9c1 	bl	800b0ec <pbuf_free>
}
 8012d6a:	3718      	adds	r7, #24
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	bdb0      	pop	{r4, r5, r7, pc}
 8012d70:	08019b50 	.word	0x08019b50
 8012d74:	08019f18 	.word	0x08019f18
 8012d78:	08019bc8 	.word	0x08019bc8
 8012d7c:	08019f38 	.word	0x08019f38
 8012d80:	08019fa0 	.word	0x08019fa0
 8012d84:	08019fc4 	.word	0x08019fc4
 8012d88:	08019ffc 	.word	0x08019ffc
 8012d8c:	0801a028 	.word	0x0801a028
 8012d90:	0801a04c 	.word	0x0801a04c

08012d94 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b086      	sub	sp, #24
 8012d98:	af02      	add	r7, sp, #8
 8012d9a:	60f8      	str	r0, [r7, #12]
 8012d9c:	60b9      	str	r1, [r7, #8]
 8012d9e:	4613      	mov	r3, r2
 8012da0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012da2:	79fa      	ldrb	r2, [r7, #7]
 8012da4:	4944      	ldr	r1, [pc, #272]	@ (8012eb8 <etharp_output_to_arp_index+0x124>)
 8012da6:	4613      	mov	r3, r2
 8012da8:	005b      	lsls	r3, r3, #1
 8012daa:	4413      	add	r3, r2
 8012dac:	00db      	lsls	r3, r3, #3
 8012dae:	440b      	add	r3, r1
 8012db0:	3314      	adds	r3, #20
 8012db2:	781b      	ldrb	r3, [r3, #0]
 8012db4:	2b01      	cmp	r3, #1
 8012db6:	d806      	bhi.n	8012dc6 <etharp_output_to_arp_index+0x32>
 8012db8:	4b40      	ldr	r3, [pc, #256]	@ (8012ebc <etharp_output_to_arp_index+0x128>)
 8012dba:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8012dbe:	4940      	ldr	r1, [pc, #256]	@ (8012ec0 <etharp_output_to_arp_index+0x12c>)
 8012dc0:	4840      	ldr	r0, [pc, #256]	@ (8012ec4 <etharp_output_to_arp_index+0x130>)
 8012dc2:	f002 fb11 	bl	80153e8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012dc6:	79fa      	ldrb	r2, [r7, #7]
 8012dc8:	493b      	ldr	r1, [pc, #236]	@ (8012eb8 <etharp_output_to_arp_index+0x124>)
 8012dca:	4613      	mov	r3, r2
 8012dcc:	005b      	lsls	r3, r3, #1
 8012dce:	4413      	add	r3, r2
 8012dd0:	00db      	lsls	r3, r3, #3
 8012dd2:	440b      	add	r3, r1
 8012dd4:	3314      	adds	r3, #20
 8012dd6:	781b      	ldrb	r3, [r3, #0]
 8012dd8:	2b02      	cmp	r3, #2
 8012dda:	d153      	bne.n	8012e84 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012ddc:	79fa      	ldrb	r2, [r7, #7]
 8012dde:	4936      	ldr	r1, [pc, #216]	@ (8012eb8 <etharp_output_to_arp_index+0x124>)
 8012de0:	4613      	mov	r3, r2
 8012de2:	005b      	lsls	r3, r3, #1
 8012de4:	4413      	add	r3, r2
 8012de6:	00db      	lsls	r3, r3, #3
 8012de8:	440b      	add	r3, r1
 8012dea:	3312      	adds	r3, #18
 8012dec:	881b      	ldrh	r3, [r3, #0]
 8012dee:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8012df2:	d919      	bls.n	8012e28 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012df4:	79fa      	ldrb	r2, [r7, #7]
 8012df6:	4613      	mov	r3, r2
 8012df8:	005b      	lsls	r3, r3, #1
 8012dfa:	4413      	add	r3, r2
 8012dfc:	00db      	lsls	r3, r3, #3
 8012dfe:	4a2e      	ldr	r2, [pc, #184]	@ (8012eb8 <etharp_output_to_arp_index+0x124>)
 8012e00:	4413      	add	r3, r2
 8012e02:	3304      	adds	r3, #4
 8012e04:	4619      	mov	r1, r3
 8012e06:	68f8      	ldr	r0, [r7, #12]
 8012e08:	f000 fb7e 	bl	8013508 <etharp_request>
 8012e0c:	4603      	mov	r3, r0
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d138      	bne.n	8012e84 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012e12:	79fa      	ldrb	r2, [r7, #7]
 8012e14:	4928      	ldr	r1, [pc, #160]	@ (8012eb8 <etharp_output_to_arp_index+0x124>)
 8012e16:	4613      	mov	r3, r2
 8012e18:	005b      	lsls	r3, r3, #1
 8012e1a:	4413      	add	r3, r2
 8012e1c:	00db      	lsls	r3, r3, #3
 8012e1e:	440b      	add	r3, r1
 8012e20:	3314      	adds	r3, #20
 8012e22:	2203      	movs	r2, #3
 8012e24:	701a      	strb	r2, [r3, #0]
 8012e26:	e02d      	b.n	8012e84 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012e28:	79fa      	ldrb	r2, [r7, #7]
 8012e2a:	4923      	ldr	r1, [pc, #140]	@ (8012eb8 <etharp_output_to_arp_index+0x124>)
 8012e2c:	4613      	mov	r3, r2
 8012e2e:	005b      	lsls	r3, r3, #1
 8012e30:	4413      	add	r3, r2
 8012e32:	00db      	lsls	r3, r3, #3
 8012e34:	440b      	add	r3, r1
 8012e36:	3312      	adds	r3, #18
 8012e38:	881b      	ldrh	r3, [r3, #0]
 8012e3a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8012e3e:	d321      	bcc.n	8012e84 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012e40:	79fa      	ldrb	r2, [r7, #7]
 8012e42:	4613      	mov	r3, r2
 8012e44:	005b      	lsls	r3, r3, #1
 8012e46:	4413      	add	r3, r2
 8012e48:	00db      	lsls	r3, r3, #3
 8012e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8012eb8 <etharp_output_to_arp_index+0x124>)
 8012e4c:	4413      	add	r3, r2
 8012e4e:	1d19      	adds	r1, r3, #4
 8012e50:	79fa      	ldrb	r2, [r7, #7]
 8012e52:	4613      	mov	r3, r2
 8012e54:	005b      	lsls	r3, r3, #1
 8012e56:	4413      	add	r3, r2
 8012e58:	00db      	lsls	r3, r3, #3
 8012e5a:	3308      	adds	r3, #8
 8012e5c:	4a16      	ldr	r2, [pc, #88]	@ (8012eb8 <etharp_output_to_arp_index+0x124>)
 8012e5e:	4413      	add	r3, r2
 8012e60:	3304      	adds	r3, #4
 8012e62:	461a      	mov	r2, r3
 8012e64:	68f8      	ldr	r0, [r7, #12]
 8012e66:	f000 fb2d 	bl	80134c4 <etharp_request_dst>
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d109      	bne.n	8012e84 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012e70:	79fa      	ldrb	r2, [r7, #7]
 8012e72:	4911      	ldr	r1, [pc, #68]	@ (8012eb8 <etharp_output_to_arp_index+0x124>)
 8012e74:	4613      	mov	r3, r2
 8012e76:	005b      	lsls	r3, r3, #1
 8012e78:	4413      	add	r3, r2
 8012e7a:	00db      	lsls	r3, r3, #3
 8012e7c:	440b      	add	r3, r1
 8012e7e:	3314      	adds	r3, #20
 8012e80:	2203      	movs	r2, #3
 8012e82:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8012e8a:	79fa      	ldrb	r2, [r7, #7]
 8012e8c:	4613      	mov	r3, r2
 8012e8e:	005b      	lsls	r3, r3, #1
 8012e90:	4413      	add	r3, r2
 8012e92:	00db      	lsls	r3, r3, #3
 8012e94:	3308      	adds	r3, #8
 8012e96:	4a08      	ldr	r2, [pc, #32]	@ (8012eb8 <etharp_output_to_arp_index+0x124>)
 8012e98:	4413      	add	r3, r2
 8012e9a:	3304      	adds	r3, #4
 8012e9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012ea0:	9200      	str	r2, [sp, #0]
 8012ea2:	460a      	mov	r2, r1
 8012ea4:	68b9      	ldr	r1, [r7, #8]
 8012ea6:	68f8      	ldr	r0, [r7, #12]
 8012ea8:	f002 f94c 	bl	8015144 <ethernet_output>
 8012eac:	4603      	mov	r3, r0
}
 8012eae:	4618      	mov	r0, r3
 8012eb0:	3710      	adds	r7, #16
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	bd80      	pop	{r7, pc}
 8012eb6:	bf00      	nop
 8012eb8:	24003338 	.word	0x24003338
 8012ebc:	08019b50 	.word	0x08019b50
 8012ec0:	0801a078 	.word	0x0801a078
 8012ec4:	08019bc8 	.word	0x08019bc8

08012ec8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b08a      	sub	sp, #40	@ 0x28
 8012ecc:	af02      	add	r7, sp, #8
 8012ece:	60f8      	str	r0, [r7, #12]
 8012ed0:	60b9      	str	r1, [r7, #8]
 8012ed2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d106      	bne.n	8012eec <etharp_output+0x24>
 8012ede:	4b73      	ldr	r3, [pc, #460]	@ (80130ac <etharp_output+0x1e4>)
 8012ee0:	f240 321e 	movw	r2, #798	@ 0x31e
 8012ee4:	4972      	ldr	r1, [pc, #456]	@ (80130b0 <etharp_output+0x1e8>)
 8012ee6:	4873      	ldr	r0, [pc, #460]	@ (80130b4 <etharp_output+0x1ec>)
 8012ee8:	f002 fa7e 	bl	80153e8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012eec:	68bb      	ldr	r3, [r7, #8]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d106      	bne.n	8012f00 <etharp_output+0x38>
 8012ef2:	4b6e      	ldr	r3, [pc, #440]	@ (80130ac <etharp_output+0x1e4>)
 8012ef4:	f240 321f 	movw	r2, #799	@ 0x31f
 8012ef8:	496f      	ldr	r1, [pc, #444]	@ (80130b8 <etharp_output+0x1f0>)
 8012efa:	486e      	ldr	r0, [pc, #440]	@ (80130b4 <etharp_output+0x1ec>)
 8012efc:	f002 fa74 	bl	80153e8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d106      	bne.n	8012f14 <etharp_output+0x4c>
 8012f06:	4b69      	ldr	r3, [pc, #420]	@ (80130ac <etharp_output+0x1e4>)
 8012f08:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8012f0c:	496b      	ldr	r1, [pc, #428]	@ (80130bc <etharp_output+0x1f4>)
 8012f0e:	4869      	ldr	r0, [pc, #420]	@ (80130b4 <etharp_output+0x1ec>)
 8012f10:	f002 fa6a 	bl	80153e8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	68f9      	ldr	r1, [r7, #12]
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	f001 f9a4 	bl	8014268 <ip4_addr_isbroadcast_u32>
 8012f20:	4603      	mov	r3, r0
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d002      	beq.n	8012f2c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8012f26:	4b66      	ldr	r3, [pc, #408]	@ (80130c0 <etharp_output+0x1f8>)
 8012f28:	61fb      	str	r3, [r7, #28]
 8012f2a:	e0af      	b.n	801308c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012f34:	2be0      	cmp	r3, #224	@ 0xe0
 8012f36:	d118      	bne.n	8012f6a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012f38:	2301      	movs	r3, #1
 8012f3a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012f40:	235e      	movs	r3, #94	@ 0x5e
 8012f42:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	3301      	adds	r3, #1
 8012f48:	781b      	ldrb	r3, [r3, #0]
 8012f4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012f4e:	b2db      	uxtb	r3, r3
 8012f50:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	3302      	adds	r3, #2
 8012f56:	781b      	ldrb	r3, [r3, #0]
 8012f58:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	3303      	adds	r3, #3
 8012f5e:	781b      	ldrb	r3, [r3, #0]
 8012f60:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8012f62:	f107 0310 	add.w	r3, r7, #16
 8012f66:	61fb      	str	r3, [r7, #28]
 8012f68:	e090      	b.n	801308c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	681a      	ldr	r2, [r3, #0]
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	3304      	adds	r3, #4
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	405a      	eors	r2, r3
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	3308      	adds	r3, #8
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	4013      	ands	r3, r2
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d012      	beq.n	8012fa8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012f88:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8012f8c:	4293      	cmp	r3, r2
 8012f8e:	d00b      	beq.n	8012fa8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	330c      	adds	r3, #12
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d003      	beq.n	8012fa2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	330c      	adds	r3, #12
 8012f9e:	61bb      	str	r3, [r7, #24]
 8012fa0:	e002      	b.n	8012fa8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012fa2:	f06f 0303 	mvn.w	r3, #3
 8012fa6:	e07d      	b.n	80130a4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012fa8:	4b46      	ldr	r3, [pc, #280]	@ (80130c4 <etharp_output+0x1fc>)
 8012faa:	781b      	ldrb	r3, [r3, #0]
 8012fac:	4619      	mov	r1, r3
 8012fae:	4a46      	ldr	r2, [pc, #280]	@ (80130c8 <etharp_output+0x200>)
 8012fb0:	460b      	mov	r3, r1
 8012fb2:	005b      	lsls	r3, r3, #1
 8012fb4:	440b      	add	r3, r1
 8012fb6:	00db      	lsls	r3, r3, #3
 8012fb8:	4413      	add	r3, r2
 8012fba:	3314      	adds	r3, #20
 8012fbc:	781b      	ldrb	r3, [r3, #0]
 8012fbe:	2b01      	cmp	r3, #1
 8012fc0:	d925      	bls.n	801300e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012fc2:	4b40      	ldr	r3, [pc, #256]	@ (80130c4 <etharp_output+0x1fc>)
 8012fc4:	781b      	ldrb	r3, [r3, #0]
 8012fc6:	4619      	mov	r1, r3
 8012fc8:	4a3f      	ldr	r2, [pc, #252]	@ (80130c8 <etharp_output+0x200>)
 8012fca:	460b      	mov	r3, r1
 8012fcc:	005b      	lsls	r3, r3, #1
 8012fce:	440b      	add	r3, r1
 8012fd0:	00db      	lsls	r3, r3, #3
 8012fd2:	4413      	add	r3, r2
 8012fd4:	3308      	adds	r3, #8
 8012fd6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012fd8:	68fa      	ldr	r2, [r7, #12]
 8012fda:	429a      	cmp	r2, r3
 8012fdc:	d117      	bne.n	801300e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012fde:	69bb      	ldr	r3, [r7, #24]
 8012fe0:	681a      	ldr	r2, [r3, #0]
 8012fe2:	4b38      	ldr	r3, [pc, #224]	@ (80130c4 <etharp_output+0x1fc>)
 8012fe4:	781b      	ldrb	r3, [r3, #0]
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	4937      	ldr	r1, [pc, #220]	@ (80130c8 <etharp_output+0x200>)
 8012fea:	4603      	mov	r3, r0
 8012fec:	005b      	lsls	r3, r3, #1
 8012fee:	4403      	add	r3, r0
 8012ff0:	00db      	lsls	r3, r3, #3
 8012ff2:	440b      	add	r3, r1
 8012ff4:	3304      	adds	r3, #4
 8012ff6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012ff8:	429a      	cmp	r2, r3
 8012ffa:	d108      	bne.n	801300e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012ffc:	4b31      	ldr	r3, [pc, #196]	@ (80130c4 <etharp_output+0x1fc>)
 8012ffe:	781b      	ldrb	r3, [r3, #0]
 8013000:	461a      	mov	r2, r3
 8013002:	68b9      	ldr	r1, [r7, #8]
 8013004:	68f8      	ldr	r0, [r7, #12]
 8013006:	f7ff fec5 	bl	8012d94 <etharp_output_to_arp_index>
 801300a:	4603      	mov	r3, r0
 801300c:	e04a      	b.n	80130a4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801300e:	2300      	movs	r3, #0
 8013010:	75fb      	strb	r3, [r7, #23]
 8013012:	e031      	b.n	8013078 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013014:	7dfa      	ldrb	r2, [r7, #23]
 8013016:	492c      	ldr	r1, [pc, #176]	@ (80130c8 <etharp_output+0x200>)
 8013018:	4613      	mov	r3, r2
 801301a:	005b      	lsls	r3, r3, #1
 801301c:	4413      	add	r3, r2
 801301e:	00db      	lsls	r3, r3, #3
 8013020:	440b      	add	r3, r1
 8013022:	3314      	adds	r3, #20
 8013024:	781b      	ldrb	r3, [r3, #0]
 8013026:	2b01      	cmp	r3, #1
 8013028:	d923      	bls.n	8013072 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801302a:	7dfa      	ldrb	r2, [r7, #23]
 801302c:	4926      	ldr	r1, [pc, #152]	@ (80130c8 <etharp_output+0x200>)
 801302e:	4613      	mov	r3, r2
 8013030:	005b      	lsls	r3, r3, #1
 8013032:	4413      	add	r3, r2
 8013034:	00db      	lsls	r3, r3, #3
 8013036:	440b      	add	r3, r1
 8013038:	3308      	adds	r3, #8
 801303a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801303c:	68fa      	ldr	r2, [r7, #12]
 801303e:	429a      	cmp	r2, r3
 8013040:	d117      	bne.n	8013072 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013042:	69bb      	ldr	r3, [r7, #24]
 8013044:	6819      	ldr	r1, [r3, #0]
 8013046:	7dfa      	ldrb	r2, [r7, #23]
 8013048:	481f      	ldr	r0, [pc, #124]	@ (80130c8 <etharp_output+0x200>)
 801304a:	4613      	mov	r3, r2
 801304c:	005b      	lsls	r3, r3, #1
 801304e:	4413      	add	r3, r2
 8013050:	00db      	lsls	r3, r3, #3
 8013052:	4403      	add	r3, r0
 8013054:	3304      	adds	r3, #4
 8013056:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013058:	4299      	cmp	r1, r3
 801305a:	d10a      	bne.n	8013072 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801305c:	4a19      	ldr	r2, [pc, #100]	@ (80130c4 <etharp_output+0x1fc>)
 801305e:	7dfb      	ldrb	r3, [r7, #23]
 8013060:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8013062:	7dfb      	ldrb	r3, [r7, #23]
 8013064:	461a      	mov	r2, r3
 8013066:	68b9      	ldr	r1, [r7, #8]
 8013068:	68f8      	ldr	r0, [r7, #12]
 801306a:	f7ff fe93 	bl	8012d94 <etharp_output_to_arp_index>
 801306e:	4603      	mov	r3, r0
 8013070:	e018      	b.n	80130a4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013072:	7dfb      	ldrb	r3, [r7, #23]
 8013074:	3301      	adds	r3, #1
 8013076:	75fb      	strb	r3, [r7, #23]
 8013078:	7dfb      	ldrb	r3, [r7, #23]
 801307a:	2b09      	cmp	r3, #9
 801307c:	d9ca      	bls.n	8013014 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801307e:	68ba      	ldr	r2, [r7, #8]
 8013080:	69b9      	ldr	r1, [r7, #24]
 8013082:	68f8      	ldr	r0, [r7, #12]
 8013084:	f000 f822 	bl	80130cc <etharp_query>
 8013088:	4603      	mov	r3, r0
 801308a:	e00b      	b.n	80130a4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8013092:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013096:	9300      	str	r3, [sp, #0]
 8013098:	69fb      	ldr	r3, [r7, #28]
 801309a:	68b9      	ldr	r1, [r7, #8]
 801309c:	68f8      	ldr	r0, [r7, #12]
 801309e:	f002 f851 	bl	8015144 <ethernet_output>
 80130a2:	4603      	mov	r3, r0
}
 80130a4:	4618      	mov	r0, r3
 80130a6:	3720      	adds	r7, #32
 80130a8:	46bd      	mov	sp, r7
 80130aa:	bd80      	pop	{r7, pc}
 80130ac:	08019b50 	.word	0x08019b50
 80130b0:	08019f18 	.word	0x08019f18
 80130b4:	08019bc8 	.word	0x08019bc8
 80130b8:	0801a0a8 	.word	0x0801a0a8
 80130bc:	08019f08 	.word	0x08019f08
 80130c0:	0801b230 	.word	0x0801b230
 80130c4:	24003428 	.word	0x24003428
 80130c8:	24003338 	.word	0x24003338

080130cc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b08c      	sub	sp, #48	@ 0x30
 80130d0:	af02      	add	r7, sp, #8
 80130d2:	60f8      	str	r0, [r7, #12]
 80130d4:	60b9      	str	r1, [r7, #8]
 80130d6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	3326      	adds	r3, #38	@ 0x26
 80130dc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80130de:	23ff      	movs	r3, #255	@ 0xff
 80130e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80130e4:	2300      	movs	r3, #0
 80130e6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80130e8:	68bb      	ldr	r3, [r7, #8]
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	68f9      	ldr	r1, [r7, #12]
 80130ee:	4618      	mov	r0, r3
 80130f0:	f001 f8ba 	bl	8014268 <ip4_addr_isbroadcast_u32>
 80130f4:	4603      	mov	r3, r0
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d10c      	bne.n	8013114 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80130fa:	68bb      	ldr	r3, [r7, #8]
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013102:	2be0      	cmp	r3, #224	@ 0xe0
 8013104:	d006      	beq.n	8013114 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013106:	68bb      	ldr	r3, [r7, #8]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d003      	beq.n	8013114 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801310c:	68bb      	ldr	r3, [r7, #8]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d105      	bne.n	8013120 <etharp_query+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
 8013114:	4892      	ldr	r0, [pc, #584]	@ (8013360 <etharp_query+0x294>)
 8013116:	f002 f9d7 	bl	80154c8 <puts>
    return ERR_ARG;
 801311a:	f06f 030f 	mvn.w	r3, #15
 801311e:	e11a      	b.n	8013356 <etharp_query+0x28a>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8013120:	68fa      	ldr	r2, [r7, #12]
 8013122:	2101      	movs	r1, #1
 8013124:	68b8      	ldr	r0, [r7, #8]
 8013126:	f7ff fa9b 	bl	8012660 <etharp_find_entry>
 801312a:	4603      	mov	r3, r0
 801312c:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801312e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013132:	2b00      	cmp	r3, #0
 8013134:	da0b      	bge.n	801314e <etharp_query+0x82>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
 8013136:	488b      	ldr	r0, [pc, #556]	@ (8013364 <etharp_query+0x298>)
 8013138:	f002 f9c6 	bl	80154c8 <puts>
    if (q) {
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d002      	beq.n	8013148 <etharp_query+0x7c>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
 8013142:	4889      	ldr	r0, [pc, #548]	@ (8013368 <etharp_query+0x29c>)
 8013144:	f002 f9c0 	bl	80154c8 <puts>
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013148:	8a7b      	ldrh	r3, [r7, #18]
 801314a:	b25b      	sxtb	r3, r3
 801314c:	e103      	b.n	8013356 <etharp_query+0x28a>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801314e:	8a7b      	ldrh	r3, [r7, #18]
 8013150:	2b7e      	cmp	r3, #126	@ 0x7e
 8013152:	d906      	bls.n	8013162 <etharp_query+0x96>
 8013154:	4b85      	ldr	r3, [pc, #532]	@ (801336c <etharp_query+0x2a0>)
 8013156:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801315a:	4985      	ldr	r1, [pc, #532]	@ (8013370 <etharp_query+0x2a4>)
 801315c:	4885      	ldr	r0, [pc, #532]	@ (8013374 <etharp_query+0x2a8>)
 801315e:	f002 f943 	bl	80153e8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8013162:	8a7b      	ldrh	r3, [r7, #18]
 8013164:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013166:	7c7a      	ldrb	r2, [r7, #17]
 8013168:	4983      	ldr	r1, [pc, #524]	@ (8013378 <etharp_query+0x2ac>)
 801316a:	4613      	mov	r3, r2
 801316c:	005b      	lsls	r3, r3, #1
 801316e:	4413      	add	r3, r2
 8013170:	00db      	lsls	r3, r3, #3
 8013172:	440b      	add	r3, r1
 8013174:	3314      	adds	r3, #20
 8013176:	781b      	ldrb	r3, [r3, #0]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d115      	bne.n	80131a8 <etharp_query+0xdc>
    is_new_entry = 1;
 801317c:	2301      	movs	r3, #1
 801317e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013180:	7c7a      	ldrb	r2, [r7, #17]
 8013182:	497d      	ldr	r1, [pc, #500]	@ (8013378 <etharp_query+0x2ac>)
 8013184:	4613      	mov	r3, r2
 8013186:	005b      	lsls	r3, r3, #1
 8013188:	4413      	add	r3, r2
 801318a:	00db      	lsls	r3, r3, #3
 801318c:	440b      	add	r3, r1
 801318e:	3314      	adds	r3, #20
 8013190:	2201      	movs	r2, #1
 8013192:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013194:	7c7a      	ldrb	r2, [r7, #17]
 8013196:	4978      	ldr	r1, [pc, #480]	@ (8013378 <etharp_query+0x2ac>)
 8013198:	4613      	mov	r3, r2
 801319a:	005b      	lsls	r3, r3, #1
 801319c:	4413      	add	r3, r2
 801319e:	00db      	lsls	r3, r3, #3
 80131a0:	440b      	add	r3, r1
 80131a2:	3308      	adds	r3, #8
 80131a4:	68fa      	ldr	r2, [r7, #12]
 80131a6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80131a8:	7c7a      	ldrb	r2, [r7, #17]
 80131aa:	4973      	ldr	r1, [pc, #460]	@ (8013378 <etharp_query+0x2ac>)
 80131ac:	4613      	mov	r3, r2
 80131ae:	005b      	lsls	r3, r3, #1
 80131b0:	4413      	add	r3, r2
 80131b2:	00db      	lsls	r3, r3, #3
 80131b4:	440b      	add	r3, r1
 80131b6:	3314      	adds	r3, #20
 80131b8:	781b      	ldrb	r3, [r3, #0]
 80131ba:	2b01      	cmp	r3, #1
 80131bc:	d011      	beq.n	80131e2 <etharp_query+0x116>
 80131be:	7c7a      	ldrb	r2, [r7, #17]
 80131c0:	496d      	ldr	r1, [pc, #436]	@ (8013378 <etharp_query+0x2ac>)
 80131c2:	4613      	mov	r3, r2
 80131c4:	005b      	lsls	r3, r3, #1
 80131c6:	4413      	add	r3, r2
 80131c8:	00db      	lsls	r3, r3, #3
 80131ca:	440b      	add	r3, r1
 80131cc:	3314      	adds	r3, #20
 80131ce:	781b      	ldrb	r3, [r3, #0]
 80131d0:	2b01      	cmp	r3, #1
 80131d2:	d806      	bhi.n	80131e2 <etharp_query+0x116>
 80131d4:	4b65      	ldr	r3, [pc, #404]	@ (801336c <etharp_query+0x2a0>)
 80131d6:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80131da:	4968      	ldr	r1, [pc, #416]	@ (801337c <etharp_query+0x2b0>)
 80131dc:	4865      	ldr	r0, [pc, #404]	@ (8013374 <etharp_query+0x2a8>)
 80131de:	f002 f903 	bl	80153e8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80131e2:	6a3b      	ldr	r3, [r7, #32]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d102      	bne.n	80131ee <etharp_query+0x122>
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d10c      	bne.n	8013208 <etharp_query+0x13c>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80131ee:	68b9      	ldr	r1, [r7, #8]
 80131f0:	68f8      	ldr	r0, [r7, #12]
 80131f2:	f000 f989 	bl	8013508 <etharp_request>
 80131f6:	4603      	mov	r3, r0
 80131f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d102      	bne.n	8013208 <etharp_query+0x13c>
      return result;
 8013202:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013206:	e0a6      	b.n	8013356 <etharp_query+0x28a>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d106      	bne.n	801321c <etharp_query+0x150>
 801320e:	4b57      	ldr	r3, [pc, #348]	@ (801336c <etharp_query+0x2a0>)
 8013210:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8013214:	495a      	ldr	r1, [pc, #360]	@ (8013380 <etharp_query+0x2b4>)
 8013216:	4857      	ldr	r0, [pc, #348]	@ (8013374 <etharp_query+0x2a8>)
 8013218:	f002 f8e6 	bl	80153e8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801321c:	7c7a      	ldrb	r2, [r7, #17]
 801321e:	4956      	ldr	r1, [pc, #344]	@ (8013378 <etharp_query+0x2ac>)
 8013220:	4613      	mov	r3, r2
 8013222:	005b      	lsls	r3, r3, #1
 8013224:	4413      	add	r3, r2
 8013226:	00db      	lsls	r3, r3, #3
 8013228:	440b      	add	r3, r1
 801322a:	3314      	adds	r3, #20
 801322c:	781b      	ldrb	r3, [r3, #0]
 801322e:	2b01      	cmp	r3, #1
 8013230:	d917      	bls.n	8013262 <etharp_query+0x196>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8013232:	4a54      	ldr	r2, [pc, #336]	@ (8013384 <etharp_query+0x2b8>)
 8013234:	7c7b      	ldrb	r3, [r7, #17]
 8013236:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013238:	7c7a      	ldrb	r2, [r7, #17]
 801323a:	4613      	mov	r3, r2
 801323c:	005b      	lsls	r3, r3, #1
 801323e:	4413      	add	r3, r2
 8013240:	00db      	lsls	r3, r3, #3
 8013242:	3308      	adds	r3, #8
 8013244:	4a4c      	ldr	r2, [pc, #304]	@ (8013378 <etharp_query+0x2ac>)
 8013246:	4413      	add	r3, r2
 8013248:	3304      	adds	r3, #4
 801324a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801324e:	9200      	str	r2, [sp, #0]
 8013250:	697a      	ldr	r2, [r7, #20]
 8013252:	6879      	ldr	r1, [r7, #4]
 8013254:	68f8      	ldr	r0, [r7, #12]
 8013256:	f001 ff75 	bl	8015144 <ethernet_output>
 801325a:	4603      	mov	r3, r0
 801325c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013260:	e077      	b.n	8013352 <etharp_query+0x286>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013262:	7c7a      	ldrb	r2, [r7, #17]
 8013264:	4944      	ldr	r1, [pc, #272]	@ (8013378 <etharp_query+0x2ac>)
 8013266:	4613      	mov	r3, r2
 8013268:	005b      	lsls	r3, r3, #1
 801326a:	4413      	add	r3, r2
 801326c:	00db      	lsls	r3, r3, #3
 801326e:	440b      	add	r3, r1
 8013270:	3314      	adds	r3, #20
 8013272:	781b      	ldrb	r3, [r3, #0]
 8013274:	2b01      	cmp	r3, #1
 8013276:	d16c      	bne.n	8013352 <etharp_query+0x286>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013278:	2300      	movs	r3, #0
 801327a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013280:	e01c      	b.n	80132bc <etharp_query+0x1f0>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8013282:	69fb      	ldr	r3, [r7, #28]
 8013284:	895a      	ldrh	r2, [r3, #10]
 8013286:	69fb      	ldr	r3, [r7, #28]
 8013288:	891b      	ldrh	r3, [r3, #8]
 801328a:	429a      	cmp	r2, r3
 801328c:	d10a      	bne.n	80132a4 <etharp_query+0x1d8>
 801328e:	69fb      	ldr	r3, [r7, #28]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d006      	beq.n	80132a4 <etharp_query+0x1d8>
 8013296:	4b35      	ldr	r3, [pc, #212]	@ (801336c <etharp_query+0x2a0>)
 8013298:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801329c:	493a      	ldr	r1, [pc, #232]	@ (8013388 <etharp_query+0x2bc>)
 801329e:	4835      	ldr	r0, [pc, #212]	@ (8013374 <etharp_query+0x2a8>)
 80132a0:	f002 f8a2 	bl	80153e8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80132a4:	69fb      	ldr	r3, [r7, #28]
 80132a6:	7b1b      	ldrb	r3, [r3, #12]
 80132a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d002      	beq.n	80132b6 <etharp_query+0x1ea>
        copy_needed = 1;
 80132b0:	2301      	movs	r3, #1
 80132b2:	61bb      	str	r3, [r7, #24]
        break;
 80132b4:	e005      	b.n	80132c2 <etharp_query+0x1f6>
      }
      p = p->next;
 80132b6:	69fb      	ldr	r3, [r7, #28]
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	61fb      	str	r3, [r7, #28]
    while (p) {
 80132bc:	69fb      	ldr	r3, [r7, #28]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d1df      	bne.n	8013282 <etharp_query+0x1b6>
    }
    if (copy_needed) {
 80132c2:	69bb      	ldr	r3, [r7, #24]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d007      	beq.n	80132d8 <etharp_query+0x20c>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80132c8:	687a      	ldr	r2, [r7, #4]
 80132ca:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80132ce:	200e      	movs	r0, #14
 80132d0:	f7f8 f98c 	bl	800b5ec <pbuf_clone>
 80132d4:	61f8      	str	r0, [r7, #28]
 80132d6:	e004      	b.n	80132e2 <etharp_query+0x216>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80132dc:	69f8      	ldr	r0, [r7, #28]
 80132de:	f7f7 ffbd 	bl	800b25c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80132e2:	69fb      	ldr	r3, [r7, #28]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d02d      	beq.n	8013344 <etharp_query+0x278>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80132e8:	7c7a      	ldrb	r2, [r7, #17]
 80132ea:	4923      	ldr	r1, [pc, #140]	@ (8013378 <etharp_query+0x2ac>)
 80132ec:	4613      	mov	r3, r2
 80132ee:	005b      	lsls	r3, r3, #1
 80132f0:	4413      	add	r3, r2
 80132f2:	00db      	lsls	r3, r3, #3
 80132f4:	440b      	add	r3, r1
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d010      	beq.n	801331e <etharp_query+0x252>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 80132fc:	7c7b      	ldrb	r3, [r7, #17]
 80132fe:	461a      	mov	r2, r3
 8013300:	6879      	ldr	r1, [r7, #4]
 8013302:	4822      	ldr	r0, [pc, #136]	@ (801338c <etharp_query+0x2c0>)
 8013304:	f002 f870 	bl	80153e8 <iprintf>
        pbuf_free(arp_table[i].q);
 8013308:	7c7a      	ldrb	r2, [r7, #17]
 801330a:	491b      	ldr	r1, [pc, #108]	@ (8013378 <etharp_query+0x2ac>)
 801330c:	4613      	mov	r3, r2
 801330e:	005b      	lsls	r3, r3, #1
 8013310:	4413      	add	r3, r2
 8013312:	00db      	lsls	r3, r3, #3
 8013314:	440b      	add	r3, r1
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	4618      	mov	r0, r3
 801331a:	f7f7 fee7 	bl	800b0ec <pbuf_free>
      }
      arp_table[i].q = p;
 801331e:	7c7a      	ldrb	r2, [r7, #17]
 8013320:	4915      	ldr	r1, [pc, #84]	@ (8013378 <etharp_query+0x2ac>)
 8013322:	4613      	mov	r3, r2
 8013324:	005b      	lsls	r3, r3, #1
 8013326:	4413      	add	r3, r2
 8013328:	00db      	lsls	r3, r3, #3
 801332a:	440b      	add	r3, r1
 801332c:	69fa      	ldr	r2, [r7, #28]
 801332e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013330:	2300      	movs	r3, #0
 8013332:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 8013336:	7c7b      	ldrb	r3, [r7, #17]
 8013338:	461a      	mov	r2, r3
 801333a:	6879      	ldr	r1, [r7, #4]
 801333c:	4814      	ldr	r0, [pc, #80]	@ (8013390 <etharp_query+0x2c4>)
 801333e:	f002 f853 	bl	80153e8 <iprintf>
 8013342:	e006      	b.n	8013352 <etharp_query+0x286>
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
 8013344:	6879      	ldr	r1, [r7, #4]
 8013346:	4813      	ldr	r0, [pc, #76]	@ (8013394 <etharp_query+0x2c8>)
 8013348:	f002 f84e 	bl	80153e8 <iprintf>
      result = ERR_MEM;
 801334c:	23ff      	movs	r3, #255	@ 0xff
 801334e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8013352:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8013356:	4618      	mov	r0, r3
 8013358:	3728      	adds	r7, #40	@ 0x28
 801335a:	46bd      	mov	sp, r7
 801335c:	bd80      	pop	{r7, pc}
 801335e:	bf00      	nop
 8013360:	0801a0b4 	.word	0x0801a0b4
 8013364:	0801a0f4 	.word	0x0801a0f4
 8013368:	0801a120 	.word	0x0801a120
 801336c:	08019b50 	.word	0x08019b50
 8013370:	0801a140 	.word	0x0801a140
 8013374:	08019bc8 	.word	0x08019bc8
 8013378:	24003338 	.word	0x24003338
 801337c:	0801a150 	.word	0x0801a150
 8013380:	0801a0a8 	.word	0x0801a0a8
 8013384:	24003428 	.word	0x24003428
 8013388:	0801a178 	.word	0x0801a178
 801338c:	0801a194 	.word	0x0801a194
 8013390:	0801a1dc 	.word	0x0801a1dc
 8013394:	0801a210 	.word	0x0801a210

08013398 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013398:	b580      	push	{r7, lr}
 801339a:	b08a      	sub	sp, #40	@ 0x28
 801339c:	af02      	add	r7, sp, #8
 801339e:	60f8      	str	r0, [r7, #12]
 80133a0:	60b9      	str	r1, [r7, #8]
 80133a2:	607a      	str	r2, [r7, #4]
 80133a4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80133a6:	2300      	movs	r3, #0
 80133a8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d106      	bne.n	80133be <etharp_raw+0x26>
 80133b0:	4b3d      	ldr	r3, [pc, #244]	@ (80134a8 <etharp_raw+0x110>)
 80133b2:	f240 4257 	movw	r2, #1111	@ 0x457
 80133b6:	493d      	ldr	r1, [pc, #244]	@ (80134ac <etharp_raw+0x114>)
 80133b8:	483d      	ldr	r0, [pc, #244]	@ (80134b0 <etharp_raw+0x118>)
 80133ba:	f002 f815 	bl	80153e8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80133be:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80133c2:	211c      	movs	r1, #28
 80133c4:	200e      	movs	r0, #14
 80133c6:	f7f7 fb65 	bl	800aa94 <pbuf_alloc>
 80133ca:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80133cc:	69bb      	ldr	r3, [r7, #24]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d105      	bne.n	80133de <etharp_raw+0x46>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 80133d2:	4838      	ldr	r0, [pc, #224]	@ (80134b4 <etharp_raw+0x11c>)
 80133d4:	f002 f878 	bl	80154c8 <puts>
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80133d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80133dc:	e060      	b.n	80134a0 <etharp_raw+0x108>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80133de:	69bb      	ldr	r3, [r7, #24]
 80133e0:	895b      	ldrh	r3, [r3, #10]
 80133e2:	2b1b      	cmp	r3, #27
 80133e4:	d806      	bhi.n	80133f4 <etharp_raw+0x5c>
 80133e6:	4b30      	ldr	r3, [pc, #192]	@ (80134a8 <etharp_raw+0x110>)
 80133e8:	f240 4262 	movw	r2, #1122	@ 0x462
 80133ec:	4932      	ldr	r1, [pc, #200]	@ (80134b8 <etharp_raw+0x120>)
 80133ee:	4830      	ldr	r0, [pc, #192]	@ (80134b0 <etharp_raw+0x118>)
 80133f0:	f001 fffa 	bl	80153e8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80133f4:	69bb      	ldr	r3, [r7, #24]
 80133f6:	685b      	ldr	r3, [r3, #4]
 80133f8:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
 80133fa:	4830      	ldr	r0, [pc, #192]	@ (80134bc <etharp_raw+0x124>)
 80133fc:	f002 f864 	bl	80154c8 <puts>
  hdr->opcode = lwip_htons(opcode);
 8013400:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8013402:	4618      	mov	r0, r3
 8013404:	f7f6 fa00 	bl	8009808 <lwip_htons>
 8013408:	4603      	mov	r3, r0
 801340a:	461a      	mov	r2, r3
 801340c:	697b      	ldr	r3, [r7, #20]
 801340e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8013416:	2b06      	cmp	r3, #6
 8013418:	d006      	beq.n	8013428 <etharp_raw+0x90>
 801341a:	4b23      	ldr	r3, [pc, #140]	@ (80134a8 <etharp_raw+0x110>)
 801341c:	f240 4269 	movw	r2, #1129	@ 0x469
 8013420:	4927      	ldr	r1, [pc, #156]	@ (80134c0 <etharp_raw+0x128>)
 8013422:	4823      	ldr	r0, [pc, #140]	@ (80134b0 <etharp_raw+0x118>)
 8013424:	f001 ffe0 	bl	80153e8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013428:	697b      	ldr	r3, [r7, #20]
 801342a:	3308      	adds	r3, #8
 801342c:	2206      	movs	r2, #6
 801342e:	6839      	ldr	r1, [r7, #0]
 8013430:	4618      	mov	r0, r3
 8013432:	f002 f9ae 	bl	8015792 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8013436:	697b      	ldr	r3, [r7, #20]
 8013438:	3312      	adds	r3, #18
 801343a:	2206      	movs	r2, #6
 801343c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801343e:	4618      	mov	r0, r3
 8013440:	f002 f9a7 	bl	8015792 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8013444:	697b      	ldr	r3, [r7, #20]
 8013446:	330e      	adds	r3, #14
 8013448:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801344a:	6812      	ldr	r2, [r2, #0]
 801344c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801344e:	697b      	ldr	r3, [r7, #20]
 8013450:	3318      	adds	r3, #24
 8013452:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013454:	6812      	ldr	r2, [r2, #0]
 8013456:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013458:	697b      	ldr	r3, [r7, #20]
 801345a:	2200      	movs	r2, #0
 801345c:	701a      	strb	r2, [r3, #0]
 801345e:	2200      	movs	r2, #0
 8013460:	f042 0201 	orr.w	r2, r2, #1
 8013464:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8013466:	697b      	ldr	r3, [r7, #20]
 8013468:	2200      	movs	r2, #0
 801346a:	f042 0208 	orr.w	r2, r2, #8
 801346e:	709a      	strb	r2, [r3, #2]
 8013470:	2200      	movs	r2, #0
 8013472:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013474:	697b      	ldr	r3, [r7, #20]
 8013476:	2206      	movs	r2, #6
 8013478:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801347a:	697b      	ldr	r3, [r7, #20]
 801347c:	2204      	movs	r2, #4
 801347e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013480:	f640 0306 	movw	r3, #2054	@ 0x806
 8013484:	9300      	str	r3, [sp, #0]
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	68ba      	ldr	r2, [r7, #8]
 801348a:	69b9      	ldr	r1, [r7, #24]
 801348c:	68f8      	ldr	r0, [r7, #12]
 801348e:	f001 fe59 	bl	8015144 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8013492:	69b8      	ldr	r0, [r7, #24]
 8013494:	f7f7 fe2a 	bl	800b0ec <pbuf_free>
  p = NULL;
 8013498:	2300      	movs	r3, #0
 801349a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801349c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80134a0:	4618      	mov	r0, r3
 80134a2:	3720      	adds	r7, #32
 80134a4:	46bd      	mov	sp, r7
 80134a6:	bd80      	pop	{r7, pc}
 80134a8:	08019b50 	.word	0x08019b50
 80134ac:	08019f18 	.word	0x08019f18
 80134b0:	08019bc8 	.word	0x08019bc8
 80134b4:	0801a25c 	.word	0x0801a25c
 80134b8:	0801a294 	.word	0x0801a294
 80134bc:	0801a2c8 	.word	0x0801a2c8
 80134c0:	0801a2ec 	.word	0x0801a2ec

080134c4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b088      	sub	sp, #32
 80134c8:	af04      	add	r7, sp, #16
 80134ca:	60f8      	str	r0, [r7, #12]
 80134cc:	60b9      	str	r1, [r7, #8]
 80134ce:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80134e0:	2201      	movs	r2, #1
 80134e2:	9203      	str	r2, [sp, #12]
 80134e4:	68ba      	ldr	r2, [r7, #8]
 80134e6:	9202      	str	r2, [sp, #8]
 80134e8:	4a06      	ldr	r2, [pc, #24]	@ (8013504 <etharp_request_dst+0x40>)
 80134ea:	9201      	str	r2, [sp, #4]
 80134ec:	9300      	str	r3, [sp, #0]
 80134ee:	4603      	mov	r3, r0
 80134f0:	687a      	ldr	r2, [r7, #4]
 80134f2:	68f8      	ldr	r0, [r7, #12]
 80134f4:	f7ff ff50 	bl	8013398 <etharp_raw>
 80134f8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80134fa:	4618      	mov	r0, r3
 80134fc:	3710      	adds	r7, #16
 80134fe:	46bd      	mov	sp, r7
 8013500:	bd80      	pop	{r7, pc}
 8013502:	bf00      	nop
 8013504:	0801b238 	.word	0x0801b238

08013508 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013508:	b580      	push	{r7, lr}
 801350a:	b082      	sub	sp, #8
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]
 8013510:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
 8013512:	4806      	ldr	r0, [pc, #24]	@ (801352c <etharp_request+0x24>)
 8013514:	f001 ffd8 	bl	80154c8 <puts>
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8013518:	4a05      	ldr	r2, [pc, #20]	@ (8013530 <etharp_request+0x28>)
 801351a:	6839      	ldr	r1, [r7, #0]
 801351c:	6878      	ldr	r0, [r7, #4]
 801351e:	f7ff ffd1 	bl	80134c4 <etharp_request_dst>
 8013522:	4603      	mov	r3, r0
}
 8013524:	4618      	mov	r0, r3
 8013526:	3708      	adds	r7, #8
 8013528:	46bd      	mov	sp, r7
 801352a:	bd80      	pop	{r7, pc}
 801352c:	0801a330 	.word	0x0801a330
 8013530:	0801b230 	.word	0x0801b230

08013534 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013534:	b580      	push	{r7, lr}
 8013536:	b08e      	sub	sp, #56	@ 0x38
 8013538:	af04      	add	r7, sp, #16
 801353a:	6078      	str	r0, [r7, #4]
 801353c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801353e:	4ba4      	ldr	r3, [pc, #656]	@ (80137d0 <icmp_input+0x29c>)
 8013540:	689b      	ldr	r3, [r3, #8]
 8013542:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013546:	781b      	ldrb	r3, [r3, #0]
 8013548:	f003 030f 	and.w	r3, r3, #15
 801354c:	b2db      	uxtb	r3, r3
 801354e:	009b      	lsls	r3, r3, #2
 8013550:	b2db      	uxtb	r3, r3
 8013552:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8013554:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013556:	2b13      	cmp	r3, #19
 8013558:	d805      	bhi.n	8013566 <icmp_input+0x32>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
 801355a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801355c:	4619      	mov	r1, r3
 801355e:	489d      	ldr	r0, [pc, #628]	@ (80137d4 <icmp_input+0x2a0>)
 8013560:	f001 ff42 	bl	80153e8 <iprintf>
    goto lenerr;
 8013564:	e128      	b.n	80137b8 <icmp_input+0x284>
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	895b      	ldrh	r3, [r3, #10]
 801356a:	2b03      	cmp	r3, #3
 801356c:	d806      	bhi.n	801357c <icmp_input+0x48>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	891b      	ldrh	r3, [r3, #8]
 8013572:	4619      	mov	r1, r3
 8013574:	4898      	ldr	r0, [pc, #608]	@ (80137d8 <icmp_input+0x2a4>)
 8013576:	f001 ff37 	bl	80153e8 <iprintf>
    goto lenerr;
 801357a:	e11d      	b.n	80137b8 <icmp_input+0x284>
  }

  type = *((u8_t *)p->payload);
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	685b      	ldr	r3, [r3, #4]
 8013580:	781b      	ldrb	r3, [r3, #0]
 8013582:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	685b      	ldr	r3, [r3, #4]
 801358a:	785b      	ldrb	r3, [r3, #1]
 801358c:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013590:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8013594:	2b00      	cmp	r3, #0
 8013596:	f000 8108 	beq.w	80137aa <icmp_input+0x276>
 801359a:	2b08      	cmp	r3, #8
 801359c:	f040 80fc 	bne.w	8013798 <icmp_input+0x264>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80135a0:	4b8e      	ldr	r3, [pc, #568]	@ (80137dc <icmp_input+0x2a8>)
 80135a2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80135a4:	4b8a      	ldr	r3, [pc, #552]	@ (80137d0 <icmp_input+0x29c>)
 80135a6:	695b      	ldr	r3, [r3, #20]
 80135a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80135ac:	2be0      	cmp	r3, #224	@ 0xe0
 80135ae:	d103      	bne.n	80135b8 <icmp_input+0x84>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_MULTICAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
 80135b0:	488b      	ldr	r0, [pc, #556]	@ (80137e0 <icmp_input+0x2ac>)
 80135b2:	f001 ff89 	bl	80154c8 <puts>
        goto icmperr;
 80135b6:	e103      	b.n	80137c0 <icmp_input+0x28c>
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80135b8:	4b85      	ldr	r3, [pc, #532]	@ (80137d0 <icmp_input+0x29c>)
 80135ba:	695b      	ldr	r3, [r3, #20]
 80135bc:	4a84      	ldr	r2, [pc, #528]	@ (80137d0 <icmp_input+0x29c>)
 80135be:	6812      	ldr	r2, [r2, #0]
 80135c0:	4611      	mov	r1, r2
 80135c2:	4618      	mov	r0, r3
 80135c4:	f000 fe50 	bl	8014268 <ip4_addr_isbroadcast_u32>
 80135c8:	4603      	mov	r3, r0
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d003      	beq.n	80135d6 <icmp_input+0xa2>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_BROADCAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
 80135ce:	4885      	ldr	r0, [pc, #532]	@ (80137e4 <icmp_input+0x2b0>)
 80135d0:	f001 ff7a 	bl	80154c8 <puts>
        goto icmperr;
 80135d4:	e0f4      	b.n	80137c0 <icmp_input+0x28c>
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
 80135d6:	4884      	ldr	r0, [pc, #528]	@ (80137e8 <icmp_input+0x2b4>)
 80135d8:	f001 ff76 	bl	80154c8 <puts>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	891b      	ldrh	r3, [r3, #8]
 80135e0:	2b07      	cmp	r3, #7
 80135e2:	d803      	bhi.n	80135ec <icmp_input+0xb8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
 80135e4:	4881      	ldr	r0, [pc, #516]	@ (80137ec <icmp_input+0x2b8>)
 80135e6:	f001 ff6f 	bl	80154c8 <puts>
        goto lenerr;
 80135ea:	e0e5      	b.n	80137b8 <icmp_input+0x284>
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 80135ec:	6878      	ldr	r0, [r7, #4]
 80135ee:	f7f6 f9a8 	bl	8009942 <inet_chksum_pbuf>
 80135f2:	4603      	mov	r3, r0
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d006      	beq.n	8013606 <icmp_input+0xd2>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
 80135f8:	487d      	ldr	r0, [pc, #500]	@ (80137f0 <icmp_input+0x2bc>)
 80135fa:	f001 ff65 	bl	80154c8 <puts>
          pbuf_free(p);
 80135fe:	6878      	ldr	r0, [r7, #4]
 8013600:	f7f7 fd74 	bl	800b0ec <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8013604:	e0e0      	b.n	80137c8 <icmp_input+0x294>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013606:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013608:	330e      	adds	r3, #14
 801360a:	4619      	mov	r1, r3
 801360c:	6878      	ldr	r0, [r7, #4]
 801360e:	f7f7 fccf 	bl	800afb0 <pbuf_add_header>
 8013612:	4603      	mov	r3, r0
 8013614:	2b00      	cmp	r3, #0
 8013616:	d057      	beq.n	80136c8 <icmp_input+0x194>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	891a      	ldrh	r2, [r3, #8]
 801361c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801361e:	4413      	add	r3, r2
 8013620:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	891b      	ldrh	r3, [r3, #8]
 8013626:	8b7a      	ldrh	r2, [r7, #26]
 8013628:	429a      	cmp	r2, r3
 801362a:	d203      	bcs.n	8013634 <icmp_input+0x100>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
 801362c:	4871      	ldr	r0, [pc, #452]	@ (80137f4 <icmp_input+0x2c0>)
 801362e:	f001 ff4b 	bl	80154c8 <puts>
          goto icmperr;
 8013632:	e0c5      	b.n	80137c0 <icmp_input+0x28c>
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013634:	8b7b      	ldrh	r3, [r7, #26]
 8013636:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801363a:	4619      	mov	r1, r3
 801363c:	200e      	movs	r0, #14
 801363e:	f7f7 fa29 	bl	800aa94 <pbuf_alloc>
 8013642:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013644:	697b      	ldr	r3, [r7, #20]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d103      	bne.n	8013652 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
 801364a:	486b      	ldr	r0, [pc, #428]	@ (80137f8 <icmp_input+0x2c4>)
 801364c:	f001 ff3c 	bl	80154c8 <puts>
          goto icmperr;
 8013650:	e0b6      	b.n	80137c0 <icmp_input+0x28c>
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013652:	697b      	ldr	r3, [r7, #20]
 8013654:	895b      	ldrh	r3, [r3, #10]
 8013656:	461a      	mov	r2, r3
 8013658:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801365a:	3308      	adds	r3, #8
 801365c:	429a      	cmp	r2, r3
 801365e:	d206      	bcs.n	801366e <icmp_input+0x13a>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
 8013660:	4866      	ldr	r0, [pc, #408]	@ (80137fc <icmp_input+0x2c8>)
 8013662:	f001 fec1 	bl	80153e8 <iprintf>
          pbuf_free(r);
 8013666:	6978      	ldr	r0, [r7, #20]
 8013668:	f7f7 fd40 	bl	800b0ec <pbuf_free>
          goto icmperr;
 801366c:	e0a8      	b.n	80137c0 <icmp_input+0x28c>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801366e:	697b      	ldr	r3, [r7, #20]
 8013670:	685b      	ldr	r3, [r3, #4]
 8013672:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013674:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013676:	4618      	mov	r0, r3
 8013678:	f002 f88b 	bl	8015792 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801367c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801367e:	4619      	mov	r1, r3
 8013680:	6978      	ldr	r0, [r7, #20]
 8013682:	f7f7 fca5 	bl	800afd0 <pbuf_remove_header>
 8013686:	4603      	mov	r3, r0
 8013688:	2b00      	cmp	r3, #0
 801368a:	d009      	beq.n	80136a0 <icmp_input+0x16c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801368c:	4b5c      	ldr	r3, [pc, #368]	@ (8013800 <icmp_input+0x2cc>)
 801368e:	22b6      	movs	r2, #182	@ 0xb6
 8013690:	495c      	ldr	r1, [pc, #368]	@ (8013804 <icmp_input+0x2d0>)
 8013692:	485d      	ldr	r0, [pc, #372]	@ (8013808 <icmp_input+0x2d4>)
 8013694:	f001 fea8 	bl	80153e8 <iprintf>
          pbuf_free(r);
 8013698:	6978      	ldr	r0, [r7, #20]
 801369a:	f7f7 fd27 	bl	800b0ec <pbuf_free>
          goto icmperr;
 801369e:	e08f      	b.n	80137c0 <icmp_input+0x28c>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80136a0:	6879      	ldr	r1, [r7, #4]
 80136a2:	6978      	ldr	r0, [r7, #20]
 80136a4:	f7f7 fe52 	bl	800b34c <pbuf_copy>
 80136a8:	4603      	mov	r3, r0
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d006      	beq.n	80136bc <icmp_input+0x188>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
 80136ae:	4857      	ldr	r0, [pc, #348]	@ (801380c <icmp_input+0x2d8>)
 80136b0:	f001 fe9a 	bl	80153e8 <iprintf>
          pbuf_free(r);
 80136b4:	6978      	ldr	r0, [r7, #20]
 80136b6:	f7f7 fd19 	bl	800b0ec <pbuf_free>
          goto icmperr;
 80136ba:	e081      	b.n	80137c0 <icmp_input+0x28c>
        }
        /* free the original p */
        pbuf_free(p);
 80136bc:	6878      	ldr	r0, [r7, #4]
 80136be:	f7f7 fd15 	bl	800b0ec <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80136c2:	697b      	ldr	r3, [r7, #20]
 80136c4:	607b      	str	r3, [r7, #4]
 80136c6:	e00f      	b.n	80136e8 <icmp_input+0x1b4>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80136c8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80136ca:	330e      	adds	r3, #14
 80136cc:	4619      	mov	r1, r3
 80136ce:	6878      	ldr	r0, [r7, #4]
 80136d0:	f7f7 fc7e 	bl	800afd0 <pbuf_remove_header>
 80136d4:	4603      	mov	r3, r0
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d006      	beq.n	80136e8 <icmp_input+0x1b4>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80136da:	4b49      	ldr	r3, [pc, #292]	@ (8013800 <icmp_input+0x2cc>)
 80136dc:	22c7      	movs	r2, #199	@ 0xc7
 80136de:	494c      	ldr	r1, [pc, #304]	@ (8013810 <icmp_input+0x2dc>)
 80136e0:	4849      	ldr	r0, [pc, #292]	@ (8013808 <icmp_input+0x2d4>)
 80136e2:	f001 fe81 	bl	80153e8 <iprintf>
          goto icmperr;
 80136e6:	e06b      	b.n	80137c0 <icmp_input+0x28c>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	685b      	ldr	r3, [r3, #4]
 80136ec:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80136ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80136f0:	4619      	mov	r1, r3
 80136f2:	6878      	ldr	r0, [r7, #4]
 80136f4:	f7f7 fc5c 	bl	800afb0 <pbuf_add_header>
 80136f8:	4603      	mov	r3, r0
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d003      	beq.n	8013706 <icmp_input+0x1d2>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
 80136fe:	4845      	ldr	r0, [pc, #276]	@ (8013814 <icmp_input+0x2e0>)
 8013700:	f001 fe72 	bl	80153e8 <iprintf>
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8013704:	e053      	b.n	80137ae <icmp_input+0x27a>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	685b      	ldr	r3, [r3, #4]
 801370a:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801370c:	69fb      	ldr	r3, [r7, #28]
 801370e:	681a      	ldr	r2, [r3, #0]
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8013714:	4b2e      	ldr	r3, [pc, #184]	@ (80137d0 <icmp_input+0x29c>)
 8013716:	691a      	ldr	r2, [r3, #16]
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801371c:	693b      	ldr	r3, [r7, #16]
 801371e:	2200      	movs	r2, #0
 8013720:	701a      	strb	r2, [r3, #0]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8013722:	693b      	ldr	r3, [r7, #16]
 8013724:	885b      	ldrh	r3, [r3, #2]
 8013726:	b29b      	uxth	r3, r3
 8013728:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801372c:	4293      	cmp	r3, r2
 801372e:	d907      	bls.n	8013740 <icmp_input+0x20c>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8013730:	693b      	ldr	r3, [r7, #16]
 8013732:	885b      	ldrh	r3, [r3, #2]
 8013734:	b29b      	uxth	r3, r3
 8013736:	3309      	adds	r3, #9
 8013738:	b29a      	uxth	r2, r3
 801373a:	693b      	ldr	r3, [r7, #16]
 801373c:	805a      	strh	r2, [r3, #2]
 801373e:	e006      	b.n	801374e <icmp_input+0x21a>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8013740:	693b      	ldr	r3, [r7, #16]
 8013742:	885b      	ldrh	r3, [r3, #2]
 8013744:	b29b      	uxth	r3, r3
 8013746:	3308      	adds	r3, #8
 8013748:	b29a      	uxth	r2, r3
 801374a:	693b      	ldr	r3, [r7, #16]
 801374c:	805a      	strh	r2, [r3, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	22ff      	movs	r2, #255	@ 0xff
 8013752:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	2200      	movs	r2, #0
 8013758:	729a      	strb	r2, [r3, #10]
 801375a:	2200      	movs	r2, #0
 801375c:	72da      	strb	r2, [r3, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801375e:	683b      	ldr	r3, [r7, #0]
 8013760:	9302      	str	r3, [sp, #8]
 8013762:	2301      	movs	r3, #1
 8013764:	9301      	str	r3, [sp, #4]
 8013766:	2300      	movs	r3, #0
 8013768:	9300      	str	r3, [sp, #0]
 801376a:	23ff      	movs	r3, #255	@ 0xff
 801376c:	2200      	movs	r2, #0
 801376e:	69f9      	ldr	r1, [r7, #28]
 8013770:	6878      	ldr	r0, [r7, #4]
 8013772:	f000 fbbb 	bl	8013eec <ip4_output_if>
 8013776:	4603      	mov	r3, r0
 8013778:	72fb      	strb	r3, [r7, #11]
        if (ret != ERR_OK) {
 801377a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d015      	beq.n	80137ae <icmp_input+0x27a>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
 8013782:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013786:	4618      	mov	r0, r3
 8013788:	f7f6 f81e 	bl	80097c8 <lwip_strerr>
 801378c:	4603      	mov	r3, r0
 801378e:	4619      	mov	r1, r3
 8013790:	4821      	ldr	r0, [pc, #132]	@ (8013818 <icmp_input+0x2e4>)
 8013792:	f001 fe29 	bl	80153e8 <iprintf>
      break;
 8013796:	e00a      	b.n	80137ae <icmp_input+0x27a>
      } else if (type == ICMP_AM) {
        MIB2_STATS_INC(mib2.icmpinaddrmasks);
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
 8013798:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801379c:	f897 2020 	ldrb.w	r2, [r7, #32]
 80137a0:	4619      	mov	r1, r3
 80137a2:	481e      	ldr	r0, [pc, #120]	@ (801381c <icmp_input+0x2e8>)
 80137a4:	f001 fe20 	bl	80153e8 <iprintf>
 80137a8:	e002      	b.n	80137b0 <icmp_input+0x27c>
      break;
 80137aa:	bf00      	nop
 80137ac:	e000      	b.n	80137b0 <icmp_input+0x27c>
      break;
 80137ae:	bf00      	nop
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80137b0:	6878      	ldr	r0, [r7, #4]
 80137b2:	f7f7 fc9b 	bl	800b0ec <pbuf_free>
  return;
 80137b6:	e007      	b.n	80137c8 <icmp_input+0x294>
lenerr:
  pbuf_free(p);
 80137b8:	6878      	ldr	r0, [r7, #4]
 80137ba:	f7f7 fc97 	bl	800b0ec <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80137be:	e003      	b.n	80137c8 <icmp_input+0x294>
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80137c0:	6878      	ldr	r0, [r7, #4]
 80137c2:	f7f7 fc93 	bl	800b0ec <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80137c6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80137c8:	3728      	adds	r7, #40	@ 0x28
 80137ca:	46bd      	mov	sp, r7
 80137cc:	bd80      	pop	{r7, pc}
 80137ce:	bf00      	nop
 80137d0:	2400036c 	.word	0x2400036c
 80137d4:	0801a358 	.word	0x0801a358
 80137d8:	0801a38c 	.word	0x0801a38c
 80137dc:	24000380 	.word	0x24000380
 80137e0:	0801a3bc 	.word	0x0801a3bc
 80137e4:	0801a3e8 	.word	0x0801a3e8
 80137e8:	0801a414 	.word	0x0801a414
 80137ec:	0801a428 	.word	0x0801a428
 80137f0:	0801a44c 	.word	0x0801a44c
 80137f4:	0801a480 	.word	0x0801a480
 80137f8:	0801a4bc 	.word	0x0801a4bc
 80137fc:	0801a4e4 	.word	0x0801a4e4
 8013800:	0801a50c 	.word	0x0801a50c
 8013804:	0801a544 	.word	0x0801a544
 8013808:	0801a57c 	.word	0x0801a57c
 801380c:	0801a5a4 	.word	0x0801a5a4
 8013810:	0801a5cc 	.word	0x0801a5cc
 8013814:	0801a600 	.word	0x0801a600
 8013818:	0801a624 	.word	0x0801a624
 801381c:	0801a654 	.word	0x0801a654

08013820 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013820:	b580      	push	{r7, lr}
 8013822:	b082      	sub	sp, #8
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
 8013828:	460b      	mov	r3, r1
 801382a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801382c:	78fb      	ldrb	r3, [r7, #3]
 801382e:	461a      	mov	r2, r3
 8013830:	2103      	movs	r1, #3
 8013832:	6878      	ldr	r0, [r7, #4]
 8013834:	f000 f814 	bl	8013860 <icmp_send_response>
}
 8013838:	bf00      	nop
 801383a:	3708      	adds	r7, #8
 801383c:	46bd      	mov	sp, r7
 801383e:	bd80      	pop	{r7, pc}

08013840 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013840:	b580      	push	{r7, lr}
 8013842:	b082      	sub	sp, #8
 8013844:	af00      	add	r7, sp, #0
 8013846:	6078      	str	r0, [r7, #4]
 8013848:	460b      	mov	r3, r1
 801384a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801384c:	78fb      	ldrb	r3, [r7, #3]
 801384e:	461a      	mov	r2, r3
 8013850:	210b      	movs	r1, #11
 8013852:	6878      	ldr	r0, [r7, #4]
 8013854:	f000 f804 	bl	8013860 <icmp_send_response>
}
 8013858:	bf00      	nop
 801385a:	3708      	adds	r7, #8
 801385c:	46bd      	mov	sp, r7
 801385e:	bd80      	pop	{r7, pc}

08013860 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013860:	b580      	push	{r7, lr}
 8013862:	b08c      	sub	sp, #48	@ 0x30
 8013864:	af04      	add	r7, sp, #16
 8013866:	6078      	str	r0, [r7, #4]
 8013868:	460b      	mov	r3, r1
 801386a:	70fb      	strb	r3, [r7, #3]
 801386c:	4613      	mov	r3, r2
 801386e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013870:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013874:	2124      	movs	r1, #36	@ 0x24
 8013876:	2022      	movs	r0, #34	@ 0x22
 8013878:	f7f7 f90c 	bl	800aa94 <pbuf_alloc>
 801387c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801387e:	69fb      	ldr	r3, [r7, #28]
 8013880:	2b00      	cmp	r3, #0
 8013882:	d103      	bne.n	801388c <icmp_send_response+0x2c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
 8013884:	4849      	ldr	r0, [pc, #292]	@ (80139ac <icmp_send_response+0x14c>)
 8013886:	f001 fe1f 	bl	80154c8 <puts>
 801388a:	e08c      	b.n	80139a6 <icmp_send_response+0x146>
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801388c:	69fb      	ldr	r3, [r7, #28]
 801388e:	895b      	ldrh	r3, [r3, #10]
 8013890:	2b23      	cmp	r3, #35	@ 0x23
 8013892:	d806      	bhi.n	80138a2 <icmp_send_response+0x42>
 8013894:	4b46      	ldr	r3, [pc, #280]	@ (80139b0 <icmp_send_response+0x150>)
 8013896:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801389a:	4946      	ldr	r1, [pc, #280]	@ (80139b4 <icmp_send_response+0x154>)
 801389c:	4846      	ldr	r0, [pc, #280]	@ (80139b8 <icmp_send_response+0x158>)
 801389e:	f001 fda3 	bl	80153e8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	685b      	ldr	r3, [r3, #4]
 80138a6:	61bb      	str	r3, [r7, #24]
  LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded from "));
 80138a8:	4844      	ldr	r0, [pc, #272]	@ (80139bc <icmp_send_response+0x15c>)
 80138aa:	f001 fd9d 	bl	80153e8 <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
 80138ae:	69bb      	ldr	r3, [r7, #24]
 80138b0:	68db      	ldr	r3, [r3, #12]
 80138b2:	b2db      	uxtb	r3, r3
 80138b4:	4619      	mov	r1, r3
 80138b6:	69bb      	ldr	r3, [r7, #24]
 80138b8:	68db      	ldr	r3, [r3, #12]
 80138ba:	0a1b      	lsrs	r3, r3, #8
 80138bc:	b2db      	uxtb	r3, r3
 80138be:	461a      	mov	r2, r3
 80138c0:	69bb      	ldr	r3, [r7, #24]
 80138c2:	68db      	ldr	r3, [r3, #12]
 80138c4:	0c1b      	lsrs	r3, r3, #16
 80138c6:	b2db      	uxtb	r3, r3
 80138c8:	4618      	mov	r0, r3
 80138ca:	69bb      	ldr	r3, [r7, #24]
 80138cc:	68db      	ldr	r3, [r3, #12]
 80138ce:	0e1b      	lsrs	r3, r3, #24
 80138d0:	b2db      	uxtb	r3, r3
 80138d2:	9300      	str	r3, [sp, #0]
 80138d4:	4603      	mov	r3, r0
 80138d6:	483a      	ldr	r0, [pc, #232]	@ (80139c0 <icmp_send_response+0x160>)
 80138d8:	f001 fd86 	bl	80153e8 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
 80138dc:	4839      	ldr	r0, [pc, #228]	@ (80139c4 <icmp_send_response+0x164>)
 80138de:	f001 fd83 	bl	80153e8 <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
 80138e2:	69bb      	ldr	r3, [r7, #24]
 80138e4:	691b      	ldr	r3, [r3, #16]
 80138e6:	b2db      	uxtb	r3, r3
 80138e8:	4619      	mov	r1, r3
 80138ea:	69bb      	ldr	r3, [r7, #24]
 80138ec:	691b      	ldr	r3, [r3, #16]
 80138ee:	0a1b      	lsrs	r3, r3, #8
 80138f0:	b2db      	uxtb	r3, r3
 80138f2:	461a      	mov	r2, r3
 80138f4:	69bb      	ldr	r3, [r7, #24]
 80138f6:	691b      	ldr	r3, [r3, #16]
 80138f8:	0c1b      	lsrs	r3, r3, #16
 80138fa:	b2db      	uxtb	r3, r3
 80138fc:	4618      	mov	r0, r3
 80138fe:	69bb      	ldr	r3, [r7, #24]
 8013900:	691b      	ldr	r3, [r3, #16]
 8013902:	0e1b      	lsrs	r3, r3, #24
 8013904:	b2db      	uxtb	r3, r3
 8013906:	9300      	str	r3, [sp, #0]
 8013908:	4603      	mov	r3, r0
 801390a:	482d      	ldr	r0, [pc, #180]	@ (80139c0 <icmp_send_response+0x160>)
 801390c:	f001 fd6c 	bl	80153e8 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));
 8013910:	200a      	movs	r0, #10
 8013912:	f001 fd7b 	bl	801540c <putchar>

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013916:	69fb      	ldr	r3, [r7, #28]
 8013918:	685b      	ldr	r3, [r3, #4]
 801391a:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801391c:	697b      	ldr	r3, [r7, #20]
 801391e:	78fa      	ldrb	r2, [r7, #3]
 8013920:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013922:	697b      	ldr	r3, [r7, #20]
 8013924:	78ba      	ldrb	r2, [r7, #2]
 8013926:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013928:	697b      	ldr	r3, [r7, #20]
 801392a:	2200      	movs	r2, #0
 801392c:	711a      	strb	r2, [r3, #4]
 801392e:	2200      	movs	r2, #0
 8013930:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013932:	697b      	ldr	r3, [r7, #20]
 8013934:	2200      	movs	r2, #0
 8013936:	719a      	strb	r2, [r3, #6]
 8013938:	2200      	movs	r2, #0
 801393a:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801393c:	69fb      	ldr	r3, [r7, #28]
 801393e:	685b      	ldr	r3, [r3, #4]
 8013940:	f103 0008 	add.w	r0, r3, #8
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	685b      	ldr	r3, [r3, #4]
 8013948:	221c      	movs	r2, #28
 801394a:	4619      	mov	r1, r3
 801394c:	f001 ff21 	bl	8015792 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8013950:	69bb      	ldr	r3, [r7, #24]
 8013952:	68db      	ldr	r3, [r3, #12]
 8013954:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013956:	f107 030c 	add.w	r3, r7, #12
 801395a:	4618      	mov	r0, r3
 801395c:	f000 f834 	bl	80139c8 <ip4_route>
 8013960:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013962:	693b      	ldr	r3, [r7, #16]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d01b      	beq.n	80139a0 <icmp_send_response+0x140>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013968:	697b      	ldr	r3, [r7, #20]
 801396a:	2200      	movs	r2, #0
 801396c:	709a      	strb	r2, [r3, #2]
 801396e:	2200      	movs	r2, #0
 8013970:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8013972:	69fb      	ldr	r3, [r7, #28]
 8013974:	895b      	ldrh	r3, [r3, #10]
 8013976:	4619      	mov	r1, r3
 8013978:	6978      	ldr	r0, [r7, #20]
 801397a:	f7f5 ffd0 	bl	800991e <inet_chksum>
 801397e:	4603      	mov	r3, r0
 8013980:	461a      	mov	r2, r3
 8013982:	697b      	ldr	r3, [r7, #20]
 8013984:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013986:	f107 020c 	add.w	r2, r7, #12
 801398a:	693b      	ldr	r3, [r7, #16]
 801398c:	9302      	str	r3, [sp, #8]
 801398e:	2301      	movs	r3, #1
 8013990:	9301      	str	r3, [sp, #4]
 8013992:	2300      	movs	r3, #0
 8013994:	9300      	str	r3, [sp, #0]
 8013996:	23ff      	movs	r3, #255	@ 0xff
 8013998:	2100      	movs	r1, #0
 801399a:	69f8      	ldr	r0, [r7, #28]
 801399c:	f000 faa6 	bl	8013eec <ip4_output_if>
  }
  pbuf_free(q);
 80139a0:	69f8      	ldr	r0, [r7, #28]
 80139a2:	f7f7 fba3 	bl	800b0ec <pbuf_free>
}
 80139a6:	3720      	adds	r7, #32
 80139a8:	46bd      	mov	sp, r7
 80139aa:	bd80      	pop	{r7, pc}
 80139ac:	0801a688 	.word	0x0801a688
 80139b0:	0801a50c 	.word	0x0801a50c
 80139b4:	0801a6c8 	.word	0x0801a6c8
 80139b8:	0801a57c 	.word	0x0801a57c
 80139bc:	0801a6f4 	.word	0x0801a6f4
 80139c0:	0801a710 	.word	0x0801a710
 80139c4:	0801a720 	.word	0x0801a720

080139c8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b086      	sub	sp, #24
 80139cc:	af02      	add	r7, sp, #8
 80139ce:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80139d0:	4b3b      	ldr	r3, [pc, #236]	@ (8013ac0 <ip4_route+0xf8>)
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	60fb      	str	r3, [r7, #12]
 80139d6:	e036      	b.n	8013a46 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80139de:	f003 0301 	and.w	r3, r3, #1
 80139e2:	b2db      	uxtb	r3, r3
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d02b      	beq.n	8013a40 <ip4_route+0x78>
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80139ee:	089b      	lsrs	r3, r3, #2
 80139f0:	f003 0301 	and.w	r3, r3, #1
 80139f4:	b2db      	uxtb	r3, r3
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d022      	beq.n	8013a40 <ip4_route+0x78>
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	3304      	adds	r3, #4
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d01d      	beq.n	8013a40 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	681a      	ldr	r2, [r3, #0]
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	3304      	adds	r3, #4
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	405a      	eors	r2, r3
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	3308      	adds	r3, #8
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	4013      	ands	r3, r2
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d101      	bne.n	8013a20 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	e04b      	b.n	8013ab8 <ip4_route+0xf0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013a26:	f003 0302 	and.w	r3, r3, #2
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d108      	bne.n	8013a40 <ip4_route+0x78>
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	681a      	ldr	r2, [r3, #0]
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	330c      	adds	r3, #12
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	429a      	cmp	r2, r3
 8013a3a:	d101      	bne.n	8013a40 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	e03b      	b.n	8013ab8 <ip4_route+0xf0>
  NETIF_FOREACH(netif) {
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	60fb      	str	r3, [r7, #12]
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d1c5      	bne.n	80139d8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8013ac4 <ip4_route+0xfc>)
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d01a      	beq.n	8013a8a <ip4_route+0xc2>
 8013a54:	4b1b      	ldr	r3, [pc, #108]	@ (8013ac4 <ip4_route+0xfc>)
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013a5c:	f003 0301 	and.w	r3, r3, #1
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d012      	beq.n	8013a8a <ip4_route+0xc2>
 8013a64:	4b17      	ldr	r3, [pc, #92]	@ (8013ac4 <ip4_route+0xfc>)
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013a6c:	f003 0304 	and.w	r3, r3, #4
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d00a      	beq.n	8013a8a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013a74:	4b13      	ldr	r3, [pc, #76]	@ (8013ac4 <ip4_route+0xfc>)
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	3304      	adds	r3, #4
 8013a7a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d004      	beq.n	8013a8a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	b2db      	uxtb	r3, r3
 8013a86:	2b7f      	cmp	r3, #127	@ 0x7f
 8013a88:	d114      	bne.n	8013ab4 <ip4_route+0xec>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	781b      	ldrb	r3, [r3, #0]
 8013a8e:	4619      	mov	r1, r3
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	3301      	adds	r3, #1
 8013a94:	781b      	ldrb	r3, [r3, #0]
 8013a96:	461a      	mov	r2, r3
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	3302      	adds	r3, #2
 8013a9c:	781b      	ldrb	r3, [r3, #0]
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	3303      	adds	r3, #3
 8013aa4:	781b      	ldrb	r3, [r3, #0]
 8013aa6:	9300      	str	r3, [sp, #0]
 8013aa8:	4603      	mov	r3, r0
 8013aaa:	4807      	ldr	r0, [pc, #28]	@ (8013ac8 <ip4_route+0x100>)
 8013aac:	f001 fc9c 	bl	80153e8 <iprintf>
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	e001      	b.n	8013ab8 <ip4_route+0xf0>
  }

  return netif_default;
 8013ab4:	4b03      	ldr	r3, [pc, #12]	@ (8013ac4 <ip4_route+0xfc>)
 8013ab6:	681b      	ldr	r3, [r3, #0]
}
 8013ab8:	4618      	mov	r0, r3
 8013aba:	3710      	adds	r7, #16
 8013abc:	46bd      	mov	sp, r7
 8013abe:	bd80      	pop	{r7, pc}
 8013ac0:	240032c8 	.word	0x240032c8
 8013ac4:	240032cc 	.word	0x240032cc
 8013ac8:	0801a728 	.word	0x0801a728

08013acc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013acc:	b5b0      	push	{r4, r5, r7, lr}
 8013ace:	b084      	sub	sp, #16
 8013ad0:	af02      	add	r7, sp, #8
 8013ad2:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: iphdr->dest 0x%"X32_F" netif->ip_addr 0x%"X32_F" (0x%"X32_F", 0x%"X32_F", 0x%"X32_F")\n",
 8013ad4:	4b28      	ldr	r3, [pc, #160]	@ (8013b78 <ip4_input_accept+0xac>)
 8013ad6:	6958      	ldr	r0, [r3, #20]
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	3304      	adds	r3, #4
 8013adc:	681c      	ldr	r4, [r3, #0]
 8013ade:	4b26      	ldr	r3, [pc, #152]	@ (8013b78 <ip4_input_accept+0xac>)
 8013ae0:	695a      	ldr	r2, [r3, #20]
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	3308      	adds	r3, #8
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	ea02 0503 	and.w	r5, r2, r3
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	3304      	adds	r3, #4
 8013af0:	681a      	ldr	r2, [r3, #0]
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	3308      	adds	r3, #8
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	4013      	ands	r3, r2
 8013afa:	4a1f      	ldr	r2, [pc, #124]	@ (8013b78 <ip4_input_accept+0xac>)
 8013afc:	6951      	ldr	r1, [r2, #20]
 8013afe:	687a      	ldr	r2, [r7, #4]
 8013b00:	3208      	adds	r2, #8
 8013b02:	6812      	ldr	r2, [r2, #0]
 8013b04:	43d2      	mvns	r2, r2
 8013b06:	400a      	ands	r2, r1
 8013b08:	9201      	str	r2, [sp, #4]
 8013b0a:	9300      	str	r3, [sp, #0]
 8013b0c:	462b      	mov	r3, r5
 8013b0e:	4622      	mov	r2, r4
 8013b10:	4601      	mov	r1, r0
 8013b12:	481a      	ldr	r0, [pc, #104]	@ (8013b7c <ip4_input_accept+0xb0>)
 8013b14:	f001 fc68 	bl	80153e8 <iprintf>
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013b1e:	f003 0301 	and.w	r3, r3, #1
 8013b22:	b2db      	uxtb	r3, r3
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d021      	beq.n	8013b6c <ip4_input_accept+0xa0>
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	3304      	adds	r3, #4
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d01c      	beq.n	8013b6c <ip4_input_accept+0xa0>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013b32:	4b11      	ldr	r3, [pc, #68]	@ (8013b78 <ip4_input_accept+0xac>)
 8013b34:	695a      	ldr	r2, [r3, #20]
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	3304      	adds	r3, #4
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	429a      	cmp	r2, r3
 8013b3e:	d008      	beq.n	8013b52 <ip4_input_accept+0x86>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013b40:	4b0d      	ldr	r3, [pc, #52]	@ (8013b78 <ip4_input_accept+0xac>)
 8013b42:	695b      	ldr	r3, [r3, #20]
 8013b44:	6879      	ldr	r1, [r7, #4]
 8013b46:	4618      	mov	r0, r3
 8013b48:	f000 fb8e 	bl	8014268 <ip4_addr_isbroadcast_u32>
 8013b4c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d00c      	beq.n	8013b6c <ip4_input_accept+0xa0>
#if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
        || (ip4_addr_get_u32(ip4_current_dest_addr()) == PP_HTONL(IPADDR_LOOPBACK))
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8013b58:	4619      	mov	r1, r3
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013b60:	461a      	mov	r2, r3
 8013b62:	4807      	ldr	r0, [pc, #28]	@ (8013b80 <ip4_input_accept+0xb4>)
 8013b64:	f001 fc40 	bl	80153e8 <iprintf>
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8013b68:	2301      	movs	r3, #1
 8013b6a:	e000      	b.n	8013b6e <ip4_input_accept+0xa2>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8013b6c:	2300      	movs	r3, #0
}
 8013b6e:	4618      	mov	r0, r3
 8013b70:	3708      	adds	r7, #8
 8013b72:	46bd      	mov	sp, r7
 8013b74:	bdb0      	pop	{r4, r5, r7, pc}
 8013b76:	bf00      	nop
 8013b78:	2400036c 	.word	0x2400036c
 8013b7c:	0801a750 	.word	0x0801a750
 8013b80:	0801a798 	.word	0x0801a798

08013b84 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b88:	b088      	sub	sp, #32
 8013b8a:	af02      	add	r7, sp, #8
 8013b8c:	6078      	str	r0, [r7, #4]
 8013b8e:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	685b      	ldr	r3, [r3, #4]
 8013b94:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8013b96:	697b      	ldr	r3, [r7, #20]
 8013b98:	781b      	ldrb	r3, [r3, #0]
 8013b9a:	091b      	lsrs	r3, r3, #4
 8013b9c:	b2db      	uxtb	r3, r3
 8013b9e:	2b04      	cmp	r3, #4
 8013ba0:	d00f      	beq.n	8013bc2 <ip4_input+0x3e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
 8013ba2:	697b      	ldr	r3, [r7, #20]
 8013ba4:	781b      	ldrb	r3, [r3, #0]
 8013ba6:	091b      	lsrs	r3, r3, #4
 8013ba8:	b2db      	uxtb	r3, r3
 8013baa:	4619      	mov	r1, r3
 8013bac:	4882      	ldr	r0, [pc, #520]	@ (8013db8 <ip4_input+0x234>)
 8013bae:	f001 fc1b 	bl	80153e8 <iprintf>
    ip4_debug_print(p);
 8013bb2:	6878      	ldr	r0, [r7, #4]
 8013bb4:	f000 fa94 	bl	80140e0 <ip4_debug_print>
    pbuf_free(p);
 8013bb8:	6878      	ldr	r0, [r7, #4]
 8013bba:	f7f7 fa97 	bl	800b0ec <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	e186      	b.n	8013ed0 <ip4_input+0x34c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013bc2:	697b      	ldr	r3, [r7, #20]
 8013bc4:	781b      	ldrb	r3, [r3, #0]
 8013bc6:	f003 030f 	and.w	r3, r3, #15
 8013bca:	b2db      	uxtb	r3, r3
 8013bcc:	009b      	lsls	r3, r3, #2
 8013bce:	b2db      	uxtb	r3, r3
 8013bd0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013bd2:	697b      	ldr	r3, [r7, #20]
 8013bd4:	885b      	ldrh	r3, [r3, #2]
 8013bd6:	b29b      	uxth	r3, r3
 8013bd8:	4618      	mov	r0, r3
 8013bda:	f7f5 fe15 	bl	8009808 <lwip_htons>
 8013bde:	4603      	mov	r3, r0
 8013be0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	891b      	ldrh	r3, [r3, #8]
 8013be6:	89ba      	ldrh	r2, [r7, #12]
 8013be8:	429a      	cmp	r2, r3
 8013bea:	d204      	bcs.n	8013bf6 <ip4_input+0x72>
    pbuf_realloc(p, iphdr_len);
 8013bec:	89bb      	ldrh	r3, [r7, #12]
 8013bee:	4619      	mov	r1, r3
 8013bf0:	6878      	ldr	r0, [r7, #4]
 8013bf2:	f7f7 f8db 	bl	800adac <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	895b      	ldrh	r3, [r3, #10]
 8013bfa:	89fa      	ldrh	r2, [r7, #14]
 8013bfc:	429a      	cmp	r2, r3
 8013bfe:	d807      	bhi.n	8013c10 <ip4_input+0x8c>
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	891b      	ldrh	r3, [r3, #8]
 8013c04:	89ba      	ldrh	r2, [r7, #12]
 8013c06:	429a      	cmp	r2, r3
 8013c08:	d802      	bhi.n	8013c10 <ip4_input+0x8c>
 8013c0a:	89fb      	ldrh	r3, [r7, #14]
 8013c0c:	2b13      	cmp	r3, #19
 8013c0e:	d824      	bhi.n	8013c5a <ip4_input+0xd6>
    if (iphdr_hlen < IP_HLEN) {
 8013c10:	89fb      	ldrh	r3, [r7, #14]
 8013c12:	2b13      	cmp	r3, #19
 8013c14:	d804      	bhi.n	8013c20 <ip4_input+0x9c>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 8013c16:	89fb      	ldrh	r3, [r7, #14]
 8013c18:	4619      	mov	r1, r3
 8013c1a:	4868      	ldr	r0, [pc, #416]	@ (8013dbc <ip4_input+0x238>)
 8013c1c:	f001 fbe4 	bl	80153e8 <iprintf>
                  ("ip4_input: short IP header (%"U16_F" bytes) received, IP packet dropped\n", iphdr_hlen));
    }
    if (iphdr_hlen > p->len) {
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	895b      	ldrh	r3, [r3, #10]
 8013c24:	89fa      	ldrh	r2, [r7, #14]
 8013c26:	429a      	cmp	r2, r3
 8013c28:	d906      	bls.n	8013c38 <ip4_input+0xb4>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 8013c2a:	89f9      	ldrh	r1, [r7, #14]
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	895b      	ldrh	r3, [r3, #10]
 8013c30:	461a      	mov	r2, r3
 8013c32:	4863      	ldr	r0, [pc, #396]	@ (8013dc0 <ip4_input+0x23c>)
 8013c34:	f001 fbd8 	bl	80153e8 <iprintf>
                  ("IP header (len %"U16_F") does not fit in first pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_hlen, p->len));
    }
    if (iphdr_len > p->tot_len) {
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	891b      	ldrh	r3, [r3, #8]
 8013c3c:	89ba      	ldrh	r2, [r7, #12]
 8013c3e:	429a      	cmp	r2, r3
 8013c40:	d906      	bls.n	8013c50 <ip4_input+0xcc>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 8013c42:	89b9      	ldrh	r1, [r7, #12]
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	891b      	ldrh	r3, [r3, #8]
 8013c48:	461a      	mov	r2, r3
 8013c4a:	485e      	ldr	r0, [pc, #376]	@ (8013dc4 <ip4_input+0x240>)
 8013c4c:	f001 fbcc 	bl	80153e8 <iprintf>
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013c50:	6878      	ldr	r0, [r7, #4]
 8013c52:	f7f7 fa4b 	bl	800b0ec <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013c56:	2300      	movs	r3, #0
 8013c58:	e13a      	b.n	8013ed0 <ip4_input+0x34c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013c5a:	697b      	ldr	r3, [r7, #20]
 8013c5c:	691b      	ldr	r3, [r3, #16]
 8013c5e:	4a5a      	ldr	r2, [pc, #360]	@ (8013dc8 <ip4_input+0x244>)
 8013c60:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013c62:	697b      	ldr	r3, [r7, #20]
 8013c64:	68db      	ldr	r3, [r3, #12]
 8013c66:	4a58      	ldr	r2, [pc, #352]	@ (8013dc8 <ip4_input+0x244>)
 8013c68:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013c6a:	4b57      	ldr	r3, [pc, #348]	@ (8013dc8 <ip4_input+0x244>)
 8013c6c:	695b      	ldr	r3, [r3, #20]
 8013c6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013c72:	2be0      	cmp	r3, #224	@ 0xe0
 8013c74:	d112      	bne.n	8013c9c <ip4_input+0x118>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013c76:	683b      	ldr	r3, [r7, #0]
 8013c78:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013c7c:	f003 0301 	and.w	r3, r3, #1
 8013c80:	b2db      	uxtb	r3, r3
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d007      	beq.n	8013c96 <ip4_input+0x112>
 8013c86:	683b      	ldr	r3, [r7, #0]
 8013c88:	3304      	adds	r3, #4
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d002      	beq.n	8013c96 <ip4_input+0x112>
      netif = inp;
 8013c90:	683b      	ldr	r3, [r7, #0]
 8013c92:	613b      	str	r3, [r7, #16]
 8013c94:	e02a      	b.n	8013cec <ip4_input+0x168>
    } else {
      netif = NULL;
 8013c96:	2300      	movs	r3, #0
 8013c98:	613b      	str	r3, [r7, #16]
 8013c9a:	e027      	b.n	8013cec <ip4_input+0x168>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013c9c:	6838      	ldr	r0, [r7, #0]
 8013c9e:	f7ff ff15 	bl	8013acc <ip4_input_accept>
 8013ca2:	4603      	mov	r3, r0
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d002      	beq.n	8013cae <ip4_input+0x12a>
      netif = inp;
 8013ca8:	683b      	ldr	r3, [r7, #0]
 8013caa:	613b      	str	r3, [r7, #16]
 8013cac:	e01e      	b.n	8013cec <ip4_input+0x168>
    } else {
      netif = NULL;
 8013cae:	2300      	movs	r3, #0
 8013cb0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013cb2:	4b45      	ldr	r3, [pc, #276]	@ (8013dc8 <ip4_input+0x244>)
 8013cb4:	695b      	ldr	r3, [r3, #20]
 8013cb6:	b2db      	uxtb	r3, r3
 8013cb8:	2b7f      	cmp	r3, #127	@ 0x7f
 8013cba:	d017      	beq.n	8013cec <ip4_input+0x168>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013cbc:	4b43      	ldr	r3, [pc, #268]	@ (8013dcc <ip4_input+0x248>)
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	613b      	str	r3, [r7, #16]
 8013cc2:	e00e      	b.n	8013ce2 <ip4_input+0x15e>
          if (netif == inp) {
 8013cc4:	693a      	ldr	r2, [r7, #16]
 8013cc6:	683b      	ldr	r3, [r7, #0]
 8013cc8:	429a      	cmp	r2, r3
 8013cca:	d006      	beq.n	8013cda <ip4_input+0x156>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013ccc:	6938      	ldr	r0, [r7, #16]
 8013cce:	f7ff fefd 	bl	8013acc <ip4_input_accept>
 8013cd2:	4603      	mov	r3, r0
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d108      	bne.n	8013cea <ip4_input+0x166>
 8013cd8:	e000      	b.n	8013cdc <ip4_input+0x158>
            continue;
 8013cda:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013cdc:	693b      	ldr	r3, [r7, #16]
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	613b      	str	r3, [r7, #16]
 8013ce2:	693b      	ldr	r3, [r7, #16]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d1ed      	bne.n	8013cc4 <ip4_input+0x140>
 8013ce8:	e000      	b.n	8013cec <ip4_input+0x168>
            break;
 8013cea:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013cec:	4b36      	ldr	r3, [pc, #216]	@ (8013dc8 <ip4_input+0x244>)
 8013cee:	691b      	ldr	r3, [r3, #16]
 8013cf0:	6839      	ldr	r1, [r7, #0]
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	f000 fab8 	bl	8014268 <ip4_addr_isbroadcast_u32>
 8013cf8:	4603      	mov	r3, r0
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d105      	bne.n	8013d0a <ip4_input+0x186>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013cfe:	4b32      	ldr	r3, [pc, #200]	@ (8013dc8 <ip4_input+0x244>)
 8013d00:	691b      	ldr	r3, [r3, #16]
 8013d02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013d06:	2be0      	cmp	r3, #224	@ 0xe0
 8013d08:	d107      	bne.n	8013d1a <ip4_input+0x196>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
 8013d0a:	4831      	ldr	r0, [pc, #196]	@ (8013dd0 <ip4_input+0x24c>)
 8013d0c:	f001 fbdc 	bl	80154c8 <puts>
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8013d10:	6878      	ldr	r0, [r7, #4]
 8013d12:	f7f7 f9eb 	bl	800b0ec <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013d16:	2300      	movs	r3, #0
 8013d18:	e0da      	b.n	8013ed0 <ip4_input+0x34c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013d1a:	693b      	ldr	r3, [r7, #16]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d107      	bne.n	8013d30 <ip4_input+0x1ac>
    /* packet not for us, route or discard */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: packet not for us.\n"));
 8013d20:	482c      	ldr	r0, [pc, #176]	@ (8013dd4 <ip4_input+0x250>)
 8013d22:	f001 fbd1 	bl	80154c8 <puts>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8013d26:	6878      	ldr	r0, [r7, #4]
 8013d28:	f7f7 f9e0 	bl	800b0ec <pbuf_free>
    return ERR_OK;
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	e0cf      	b.n	8013ed0 <ip4_input+0x34c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013d30:	697b      	ldr	r3, [r7, #20]
 8013d32:	88db      	ldrh	r3, [r3, #6]
 8013d34:	b29b      	uxth	r3, r3
 8013d36:	461a      	mov	r2, r3
 8013d38:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8013d3c:	4013      	ands	r3, r2
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d04f      	beq.n	8013de2 <ip4_input+0x25e>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
 8013d42:	697b      	ldr	r3, [r7, #20]
 8013d44:	889b      	ldrh	r3, [r3, #4]
 8013d46:	b29b      	uxth	r3, r3
 8013d48:	4618      	mov	r0, r3
 8013d4a:	f7f5 fd5d 	bl	8009808 <lwip_htons>
 8013d4e:	4603      	mov	r3, r0
 8013d50:	461d      	mov	r5, r3
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	891b      	ldrh	r3, [r3, #8]
 8013d56:	461e      	mov	r6, r3
 8013d58:	697b      	ldr	r3, [r7, #20]
 8013d5a:	885b      	ldrh	r3, [r3, #2]
 8013d5c:	b29b      	uxth	r3, r3
 8013d5e:	4618      	mov	r0, r3
 8013d60:	f7f5 fd52 	bl	8009808 <lwip_htons>
 8013d64:	4603      	mov	r3, r0
 8013d66:	4698      	mov	r8, r3
 8013d68:	697b      	ldr	r3, [r7, #20]
 8013d6a:	88db      	ldrh	r3, [r3, #6]
 8013d6c:	b29b      	uxth	r3, r3
 8013d6e:	f003 0320 	and.w	r3, r3, #32
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	bf14      	ite	ne
 8013d76:	2301      	movne	r3, #1
 8013d78:	2300      	moveq	r3, #0
 8013d7a:	b2db      	uxtb	r3, r3
 8013d7c:	461c      	mov	r4, r3
 8013d7e:	697b      	ldr	r3, [r7, #20]
 8013d80:	88db      	ldrh	r3, [r3, #6]
 8013d82:	b29b      	uxth	r3, r3
 8013d84:	4618      	mov	r0, r3
 8013d86:	f7f5 fd3f 	bl	8009808 <lwip_htons>
 8013d8a:	4603      	mov	r3, r0
 8013d8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013d90:	b29b      	uxth	r3, r3
 8013d92:	00db      	lsls	r3, r3, #3
 8013d94:	b29b      	uxth	r3, r3
 8013d96:	9301      	str	r3, [sp, #4]
 8013d98:	9400      	str	r4, [sp, #0]
 8013d9a:	4643      	mov	r3, r8
 8013d9c:	4632      	mov	r2, r6
 8013d9e:	4629      	mov	r1, r5
 8013da0:	480d      	ldr	r0, [pc, #52]	@ (8013dd8 <ip4_input+0x254>)
 8013da2:	f001 fb21 	bl	80153e8 <iprintf>
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013da6:	6878      	ldr	r0, [r7, #4]
 8013da8:	f000 fda4 	bl	80148f4 <ip4_reass>
 8013dac:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d113      	bne.n	8013ddc <ip4_input+0x258>
      return ERR_OK;
 8013db4:	2300      	movs	r3, #0
 8013db6:	e08b      	b.n	8013ed0 <ip4_input+0x34c>
 8013db8:	0801a7c8 	.word	0x0801a7c8
 8013dbc:	0801a7fc 	.word	0x0801a7fc
 8013dc0:	0801a840 	.word	0x0801a840
 8013dc4:	0801a890 	.word	0x0801a890
 8013dc8:	2400036c 	.word	0x2400036c
 8013dcc:	240032c8 	.word	0x240032c8
 8013dd0:	0801a8d0 	.word	0x0801a8d0
 8013dd4:	0801a8f8 	.word	0x0801a8f8
 8013dd8:	0801a918 	.word	0x0801a918
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	685b      	ldr	r3, [r3, #4]
 8013de0:	617b      	str	r3, [r7, #20]
    return ERR_OK;
  }
#endif /* IP_OPTIONS_ALLOWED == 0 */

  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
 8013de2:	483e      	ldr	r0, [pc, #248]	@ (8013edc <ip4_input+0x358>)
 8013de4:	f001 fb70 	bl	80154c8 <puts>
  ip4_debug_print(p);
 8013de8:	6878      	ldr	r0, [r7, #4]
 8013dea:	f000 f979 	bl	80140e0 <ip4_debug_print>
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	895b      	ldrh	r3, [r3, #10]
 8013df2:	4619      	mov	r1, r3
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	891b      	ldrh	r3, [r3, #8]
 8013df8:	461a      	mov	r2, r3
 8013dfa:	4839      	ldr	r0, [pc, #228]	@ (8013ee0 <ip4_input+0x35c>)
 8013dfc:	f001 faf4 	bl	80153e8 <iprintf>

  ip_data.current_netif = netif;
 8013e00:	4a38      	ldr	r2, [pc, #224]	@ (8013ee4 <ip4_input+0x360>)
 8013e02:	693b      	ldr	r3, [r7, #16]
 8013e04:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013e06:	4a37      	ldr	r2, [pc, #220]	@ (8013ee4 <ip4_input+0x360>)
 8013e08:	683b      	ldr	r3, [r7, #0]
 8013e0a:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013e0c:	4a35      	ldr	r2, [pc, #212]	@ (8013ee4 <ip4_input+0x360>)
 8013e0e:	697b      	ldr	r3, [r7, #20]
 8013e10:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013e12:	697b      	ldr	r3, [r7, #20]
 8013e14:	781b      	ldrb	r3, [r3, #0]
 8013e16:	f003 030f 	and.w	r3, r3, #15
 8013e1a:	b2db      	uxtb	r3, r3
 8013e1c:	009b      	lsls	r3, r3, #2
 8013e1e:	b2db      	uxtb	r3, r3
 8013e20:	461a      	mov	r2, r3
 8013e22:	4b30      	ldr	r3, [pc, #192]	@ (8013ee4 <ip4_input+0x360>)
 8013e24:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013e26:	89fb      	ldrh	r3, [r7, #14]
 8013e28:	4619      	mov	r1, r3
 8013e2a:	6878      	ldr	r0, [r7, #4]
 8013e2c:	f7f7 f8d0 	bl	800afd0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013e30:	697b      	ldr	r3, [r7, #20]
 8013e32:	7a5b      	ldrb	r3, [r3, #9]
 8013e34:	2b11      	cmp	r3, #17
 8013e36:	d006      	beq.n	8013e46 <ip4_input+0x2c2>
 8013e38:	2b11      	cmp	r3, #17
 8013e3a:	dc13      	bgt.n	8013e64 <ip4_input+0x2e0>
 8013e3c:	2b01      	cmp	r3, #1
 8013e3e:	d00c      	beq.n	8013e5a <ip4_input+0x2d6>
 8013e40:	2b06      	cmp	r3, #6
 8013e42:	d005      	beq.n	8013e50 <ip4_input+0x2cc>
 8013e44:	e00e      	b.n	8013e64 <ip4_input+0x2e0>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013e46:	6839      	ldr	r1, [r7, #0]
 8013e48:	6878      	ldr	r0, [r7, #4]
 8013e4a:	f7fe f895 	bl	8011f78 <udp_input>
        break;
 8013e4e:	e02c      	b.n	8013eaa <ip4_input+0x326>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013e50:	6839      	ldr	r1, [r7, #0]
 8013e52:	6878      	ldr	r0, [r7, #4]
 8013e54:	f7f9 fb1a 	bl	800d48c <tcp_input>
        break;
 8013e58:	e027      	b.n	8013eaa <ip4_input+0x326>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013e5a:	6839      	ldr	r1, [r7, #0]
 8013e5c:	6878      	ldr	r0, [r7, #4]
 8013e5e:	f7ff fb69 	bl	8013534 <icmp_input>
        break;
 8013e62:	e022      	b.n	8013eaa <ip4_input+0x326>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013e64:	4b1f      	ldr	r3, [pc, #124]	@ (8013ee4 <ip4_input+0x360>)
 8013e66:	695b      	ldr	r3, [r3, #20]
 8013e68:	6939      	ldr	r1, [r7, #16]
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	f000 f9fc 	bl	8014268 <ip4_addr_isbroadcast_u32>
 8013e70:	4603      	mov	r3, r0
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d10f      	bne.n	8013e96 <ip4_input+0x312>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013e76:	4b1b      	ldr	r3, [pc, #108]	@ (8013ee4 <ip4_input+0x360>)
 8013e78:	695b      	ldr	r3, [r3, #20]
 8013e7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013e7e:	2be0      	cmp	r3, #224	@ 0xe0
 8013e80:	d009      	beq.n	8013e96 <ip4_input+0x312>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013e82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013e86:	4619      	mov	r1, r3
 8013e88:	6878      	ldr	r0, [r7, #4]
 8013e8a:	f7f7 f91c 	bl	800b0c6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013e8e:	2102      	movs	r1, #2
 8013e90:	6878      	ldr	r0, [r7, #4]
 8013e92:	f7ff fcc5 	bl	8013820 <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));
 8013e96:	697b      	ldr	r3, [r7, #20]
 8013e98:	7a5b      	ldrb	r3, [r3, #9]
 8013e9a:	4619      	mov	r1, r3
 8013e9c:	4812      	ldr	r0, [pc, #72]	@ (8013ee8 <ip4_input+0x364>)
 8013e9e:	f001 faa3 	bl	80153e8 <iprintf>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013ea2:	6878      	ldr	r0, [r7, #4]
 8013ea4:	f7f7 f922 	bl	800b0ec <pbuf_free>
        break;
 8013ea8:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8013ee4 <ip4_input+0x360>)
 8013eac:	2200      	movs	r2, #0
 8013eae:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8013ee4 <ip4_input+0x360>)
 8013eb2:	2200      	movs	r2, #0
 8013eb4:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8013ee4 <ip4_input+0x360>)
 8013eb8:	2200      	movs	r2, #0
 8013eba:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013ebc:	4b09      	ldr	r3, [pc, #36]	@ (8013ee4 <ip4_input+0x360>)
 8013ebe:	2200      	movs	r2, #0
 8013ec0:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013ec2:	4b08      	ldr	r3, [pc, #32]	@ (8013ee4 <ip4_input+0x360>)
 8013ec4:	2200      	movs	r2, #0
 8013ec6:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013ec8:	4b06      	ldr	r3, [pc, #24]	@ (8013ee4 <ip4_input+0x360>)
 8013eca:	2200      	movs	r2, #0
 8013ecc:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013ece:	2300      	movs	r3, #0
}
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	3718      	adds	r7, #24
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013eda:	bf00      	nop
 8013edc:	0801a97c 	.word	0x0801a97c
 8013ee0:	0801a988 	.word	0x0801a988
 8013ee4:	2400036c 	.word	0x2400036c
 8013ee8:	0801a9b0 	.word	0x0801a9b0

08013eec <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b08a      	sub	sp, #40	@ 0x28
 8013ef0:	af04      	add	r7, sp, #16
 8013ef2:	60f8      	str	r0, [r7, #12]
 8013ef4:	60b9      	str	r1, [r7, #8]
 8013ef6:	607a      	str	r2, [r7, #4]
 8013ef8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013efa:	68bb      	ldr	r3, [r7, #8]
 8013efc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d009      	beq.n	8013f18 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013f04:	68bb      	ldr	r3, [r7, #8]
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d003      	beq.n	8013f12 <ip4_output_if+0x26>
 8013f0a:	68bb      	ldr	r3, [r7, #8]
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d102      	bne.n	8013f18 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f14:	3304      	adds	r3, #4
 8013f16:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013f18:	78fa      	ldrb	r2, [r7, #3]
 8013f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f1c:	9302      	str	r3, [sp, #8]
 8013f1e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013f22:	9301      	str	r3, [sp, #4]
 8013f24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013f28:	9300      	str	r3, [sp, #0]
 8013f2a:	4613      	mov	r3, r2
 8013f2c:	687a      	ldr	r2, [r7, #4]
 8013f2e:	6979      	ldr	r1, [r7, #20]
 8013f30:	68f8      	ldr	r0, [r7, #12]
 8013f32:	f000 f805 	bl	8013f40 <ip4_output_if_src>
 8013f36:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013f38:	4618      	mov	r0, r3
 8013f3a:	3718      	adds	r7, #24
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	bd80      	pop	{r7, pc}

08013f40 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b088      	sub	sp, #32
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	60f8      	str	r0, [r7, #12]
 8013f48:	60b9      	str	r1, [r7, #8]
 8013f4a:	607a      	str	r2, [r7, #4]
 8013f4c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	7b9b      	ldrb	r3, [r3, #14]
 8013f52:	2b01      	cmp	r3, #1
 8013f54:	d006      	beq.n	8013f64 <ip4_output_if_src+0x24>
 8013f56:	4b58      	ldr	r3, [pc, #352]	@ (80140b8 <ip4_output_if_src+0x178>)
 8013f58:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8013f5c:	4957      	ldr	r1, [pc, #348]	@ (80140bc <ip4_output_if_src+0x17c>)
 8013f5e:	4858      	ldr	r0, [pc, #352]	@ (80140c0 <ip4_output_if_src+0x180>)
 8013f60:	f001 fa42 	bl	80153e8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d063      	beq.n	8014032 <ip4_output_if_src+0xf2>
    u16_t ip_hlen = IP_HLEN;
 8013f6a:	2314      	movs	r3, #20
 8013f6c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013f6e:	2114      	movs	r1, #20
 8013f70:	68f8      	ldr	r0, [r7, #12]
 8013f72:	f7f7 f81d 	bl	800afb0 <pbuf_add_header>
 8013f76:	4603      	mov	r3, r0
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d005      	beq.n	8013f88 <ip4_output_if_src+0x48>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));
 8013f7c:	4851      	ldr	r0, [pc, #324]	@ (80140c4 <ip4_output_if_src+0x184>)
 8013f7e:	f001 faa3 	bl	80154c8 <puts>

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013f82:	f06f 0301 	mvn.w	r3, #1
 8013f86:	e093      	b.n	80140b0 <ip4_output_if_src+0x170>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	685b      	ldr	r3, [r3, #4]
 8013f8c:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	895b      	ldrh	r3, [r3, #10]
 8013f92:	2b13      	cmp	r3, #19
 8013f94:	d806      	bhi.n	8013fa4 <ip4_output_if_src+0x64>
 8013f96:	4b48      	ldr	r3, [pc, #288]	@ (80140b8 <ip4_output_if_src+0x178>)
 8013f98:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8013f9c:	494a      	ldr	r1, [pc, #296]	@ (80140c8 <ip4_output_if_src+0x188>)
 8013f9e:	4848      	ldr	r0, [pc, #288]	@ (80140c0 <ip4_output_if_src+0x180>)
 8013fa0:	f001 fa22 	bl	80153e8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013fa4:	69fb      	ldr	r3, [r7, #28]
 8013fa6:	78fa      	ldrb	r2, [r7, #3]
 8013fa8:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013faa:	69fb      	ldr	r3, [r7, #28]
 8013fac:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8013fb0:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	681a      	ldr	r2, [r3, #0]
 8013fb6:	69fb      	ldr	r3, [r7, #28]
 8013fb8:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013fba:	8b7b      	ldrh	r3, [r7, #26]
 8013fbc:	089b      	lsrs	r3, r3, #2
 8013fbe:	b29b      	uxth	r3, r3
 8013fc0:	b2db      	uxtb	r3, r3
 8013fc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013fc6:	b2da      	uxtb	r2, r3
 8013fc8:	69fb      	ldr	r3, [r7, #28]
 8013fca:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013fcc:	69fb      	ldr	r3, [r7, #28]
 8013fce:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8013fd2:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	891b      	ldrh	r3, [r3, #8]
 8013fd8:	4618      	mov	r0, r3
 8013fda:	f7f5 fc15 	bl	8009808 <lwip_htons>
 8013fde:	4603      	mov	r3, r0
 8013fe0:	461a      	mov	r2, r3
 8013fe2:	69fb      	ldr	r3, [r7, #28]
 8013fe4:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013fe6:	69fb      	ldr	r3, [r7, #28]
 8013fe8:	2200      	movs	r2, #0
 8013fea:	719a      	strb	r2, [r3, #6]
 8013fec:	2200      	movs	r2, #0
 8013fee:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013ff0:	4b36      	ldr	r3, [pc, #216]	@ (80140cc <ip4_output_if_src+0x18c>)
 8013ff2:	881b      	ldrh	r3, [r3, #0]
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	f7f5 fc07 	bl	8009808 <lwip_htons>
 8013ffa:	4603      	mov	r3, r0
 8013ffc:	461a      	mov	r2, r3
 8013ffe:	69fb      	ldr	r3, [r7, #28]
 8014000:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014002:	4b32      	ldr	r3, [pc, #200]	@ (80140cc <ip4_output_if_src+0x18c>)
 8014004:	881b      	ldrh	r3, [r3, #0]
 8014006:	3301      	adds	r3, #1
 8014008:	b29a      	uxth	r2, r3
 801400a:	4b30      	ldr	r3, [pc, #192]	@ (80140cc <ip4_output_if_src+0x18c>)
 801400c:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801400e:	68bb      	ldr	r3, [r7, #8]
 8014010:	2b00      	cmp	r3, #0
 8014012:	d104      	bne.n	801401e <ip4_output_if_src+0xde>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014014:	4b2e      	ldr	r3, [pc, #184]	@ (80140d0 <ip4_output_if_src+0x190>)
 8014016:	681a      	ldr	r2, [r3, #0]
 8014018:	69fb      	ldr	r3, [r7, #28]
 801401a:	60da      	str	r2, [r3, #12]
 801401c:	e003      	b.n	8014026 <ip4_output_if_src+0xe6>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801401e:	68bb      	ldr	r3, [r7, #8]
 8014020:	681a      	ldr	r2, [r3, #0]
 8014022:	69fb      	ldr	r3, [r7, #28]
 8014024:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014026:	69fb      	ldr	r3, [r7, #28]
 8014028:	2200      	movs	r2, #0
 801402a:	729a      	strb	r2, [r3, #10]
 801402c:	2200      	movs	r2, #0
 801402e:	72da      	strb	r2, [r3, #11]
 8014030:	e012      	b.n	8014058 <ip4_output_if_src+0x118>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	895b      	ldrh	r3, [r3, #10]
 8014036:	2b13      	cmp	r3, #19
 8014038:	d805      	bhi.n	8014046 <ip4_output_if_src+0x106>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
 801403a:	4826      	ldr	r0, [pc, #152]	@ (80140d4 <ip4_output_if_src+0x194>)
 801403c:	f001 fa44 	bl	80154c8 <puts>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014040:	f06f 0301 	mvn.w	r3, #1
 8014044:	e034      	b.n	80140b0 <ip4_output_if_src+0x170>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	685b      	ldr	r3, [r3, #4]
 801404a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801404c:	69fb      	ldr	r3, [r7, #28]
 801404e:	691b      	ldr	r3, [r3, #16]
 8014050:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8014052:	f107 0314 	add.w	r3, r7, #20
 8014056:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
 8014058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801405a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 801405e:	4619      	mov	r1, r3
 8014060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014062:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8014066:	461a      	mov	r2, r3
 8014068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801406a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801406e:	481a      	ldr	r0, [pc, #104]	@ (80140d8 <ip4_output_if_src+0x198>)
 8014070:	f001 f9ba 	bl	80153e8 <iprintf>
  ip4_debug_print(p);
 8014074:	68f8      	ldr	r0, [r7, #12]
 8014076:	f000 f833 	bl	80140e0 <ip4_debug_print>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801407a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801407c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801407e:	2b00      	cmp	r3, #0
 8014080:	d00c      	beq.n	801409c <ip4_output_if_src+0x15c>
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	891a      	ldrh	r2, [r3, #8]
 8014086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014088:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801408a:	429a      	cmp	r2, r3
 801408c:	d906      	bls.n	801409c <ip4_output_if_src+0x15c>
    return ip4_frag(p, netif, dest);
 801408e:	687a      	ldr	r2, [r7, #4]
 8014090:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014092:	68f8      	ldr	r0, [r7, #12]
 8014094:	f000 fe22 	bl	8014cdc <ip4_frag>
 8014098:	4603      	mov	r3, r0
 801409a:	e009      	b.n	80140b0 <ip4_output_if_src+0x170>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
 801409c:	480f      	ldr	r0, [pc, #60]	@ (80140dc <ip4_output_if_src+0x19c>)
 801409e:	f001 fa13 	bl	80154c8 <puts>
  return netif->output(netif, p, dest);
 80140a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140a4:	695b      	ldr	r3, [r3, #20]
 80140a6:	687a      	ldr	r2, [r7, #4]
 80140a8:	68f9      	ldr	r1, [r7, #12]
 80140aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80140ac:	4798      	blx	r3
 80140ae:	4603      	mov	r3, r0
}
 80140b0:	4618      	mov	r0, r3
 80140b2:	3720      	adds	r7, #32
 80140b4:	46bd      	mov	sp, r7
 80140b6:	bd80      	pop	{r7, pc}
 80140b8:	0801a9d4 	.word	0x0801a9d4
 80140bc:	0801aa08 	.word	0x0801aa08
 80140c0:	0801aa14 	.word	0x0801aa14
 80140c4:	0801aa3c 	.word	0x0801aa3c
 80140c8:	0801aa70 	.word	0x0801aa70
 80140cc:	2400342a 	.word	0x2400342a
 80140d0:	0801b22c 	.word	0x0801b22c
 80140d4:	0801aaa0 	.word	0x0801aaa0
 80140d8:	0801aad4 	.word	0x0801aad4
 80140dc:	0801aaec 	.word	0x0801aaec

080140e0 <ip4_debug_print>:
/* Print an IP header by using LWIP_DEBUGF
 * @param p an IP packet, p->payload pointing to the IP header
 */
void
ip4_debug_print(struct pbuf *p)
{
 80140e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140e4:	b086      	sub	sp, #24
 80140e6:	af02      	add	r7, sp, #8
 80140e8:	6078      	str	r0, [r7, #4]
  struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	685b      	ldr	r3, [r3, #4]
 80140ee:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(IP_DEBUG, ("IP header:\n"));
 80140f0:	4856      	ldr	r0, [pc, #344]	@ (801424c <ip4_debug_print+0x16c>)
 80140f2:	f001 f9e9 	bl	80154c8 <puts>
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 80140f6:	4856      	ldr	r0, [pc, #344]	@ (8014250 <ip4_debug_print+0x170>)
 80140f8:	f001 f9e6 	bl	80154c8 <puts>
  LWIP_DEBUGF(IP_DEBUG, ("|%2"S16_F" |%2"S16_F" |  0x%02"X16_F" |     %5"U16_F"     | (v, hl, tos, len)\n",
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	781b      	ldrb	r3, [r3, #0]
 8014100:	091b      	lsrs	r3, r3, #4
 8014102:	b2db      	uxtb	r3, r3
 8014104:	461d      	mov	r5, r3
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	781b      	ldrb	r3, [r3, #0]
 801410a:	f003 040f 	and.w	r4, r3, #15
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	785b      	ldrb	r3, [r3, #1]
 8014112:	461e      	mov	r6, r3
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	885b      	ldrh	r3, [r3, #2]
 8014118:	b29b      	uxth	r3, r3
 801411a:	4618      	mov	r0, r3
 801411c:	f7f5 fb74 	bl	8009808 <lwip_htons>
 8014120:	4603      	mov	r3, r0
 8014122:	9300      	str	r3, [sp, #0]
 8014124:	4633      	mov	r3, r6
 8014126:	4622      	mov	r2, r4
 8014128:	4629      	mov	r1, r5
 801412a:	484a      	ldr	r0, [pc, #296]	@ (8014254 <ip4_debug_print+0x174>)
 801412c:	f001 f95c 	bl	80153e8 <iprintf>
                         (u16_t)IPH_V(iphdr),
                         (u16_t)IPH_HL(iphdr),
                         (u16_t)IPH_TOS(iphdr),
                         lwip_ntohs(IPH_LEN(iphdr))));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 8014130:	4847      	ldr	r0, [pc, #284]	@ (8014250 <ip4_debug_print+0x170>)
 8014132:	f001 f9c9 	bl	80154c8 <puts>
  LWIP_DEBUGF(IP_DEBUG, ("|    %5"U16_F"      |%"U16_F"%"U16_F"%"U16_F"|    %4"U16_F"   | (id, flags, offset)\n",
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	889b      	ldrh	r3, [r3, #4]
 801413a:	b29b      	uxth	r3, r3
 801413c:	4618      	mov	r0, r3
 801413e:	f7f5 fb63 	bl	8009808 <lwip_htons>
 8014142:	4603      	mov	r3, r0
 8014144:	4698      	mov	r8, r3
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	88db      	ldrh	r3, [r3, #6]
 801414a:	b29b      	uxth	r3, r3
 801414c:	4618      	mov	r0, r3
 801414e:	f7f5 fb5b 	bl	8009808 <lwip_htons>
 8014152:	4603      	mov	r3, r0
 8014154:	0bdb      	lsrs	r3, r3, #15
 8014156:	b29b      	uxth	r3, r3
 8014158:	f003 0501 	and.w	r5, r3, #1
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	88db      	ldrh	r3, [r3, #6]
 8014160:	b29b      	uxth	r3, r3
 8014162:	4618      	mov	r0, r3
 8014164:	f7f5 fb50 	bl	8009808 <lwip_htons>
 8014168:	4603      	mov	r3, r0
 801416a:	0b9b      	lsrs	r3, r3, #14
 801416c:	b29b      	uxth	r3, r3
 801416e:	f003 0601 	and.w	r6, r3, #1
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	88db      	ldrh	r3, [r3, #6]
 8014176:	b29b      	uxth	r3, r3
 8014178:	4618      	mov	r0, r3
 801417a:	f7f5 fb45 	bl	8009808 <lwip_htons>
 801417e:	4603      	mov	r3, r0
 8014180:	0b5b      	lsrs	r3, r3, #13
 8014182:	b29b      	uxth	r3, r3
 8014184:	f003 0401 	and.w	r4, r3, #1
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	88db      	ldrh	r3, [r3, #6]
 801418c:	b29b      	uxth	r3, r3
 801418e:	4618      	mov	r0, r3
 8014190:	f7f5 fb3a 	bl	8009808 <lwip_htons>
 8014194:	4603      	mov	r3, r0
 8014196:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801419a:	9301      	str	r3, [sp, #4]
 801419c:	9400      	str	r4, [sp, #0]
 801419e:	4633      	mov	r3, r6
 80141a0:	462a      	mov	r2, r5
 80141a2:	4641      	mov	r1, r8
 80141a4:	482c      	ldr	r0, [pc, #176]	@ (8014258 <ip4_debug_print+0x178>)
 80141a6:	f001 f91f 	bl	80153e8 <iprintf>
                         lwip_ntohs(IPH_ID(iphdr)),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) >> 15 & 1),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) >> 14 & 1),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) >> 13 & 1),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 80141aa:	4829      	ldr	r0, [pc, #164]	@ (8014250 <ip4_debug_print+0x170>)
 80141ac:	f001 f98c 	bl	80154c8 <puts>
  LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |    0x%04"X16_F"     | (ttl, proto, chksum)\n",
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	7a1b      	ldrb	r3, [r3, #8]
 80141b4:	461c      	mov	r4, r3
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	7a5b      	ldrb	r3, [r3, #9]
 80141ba:	461d      	mov	r5, r3
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	895b      	ldrh	r3, [r3, #10]
 80141c0:	b29b      	uxth	r3, r3
 80141c2:	4618      	mov	r0, r3
 80141c4:	f7f5 fb20 	bl	8009808 <lwip_htons>
 80141c8:	4603      	mov	r3, r0
 80141ca:	462a      	mov	r2, r5
 80141cc:	4621      	mov	r1, r4
 80141ce:	4823      	ldr	r0, [pc, #140]	@ (801425c <ip4_debug_print+0x17c>)
 80141d0:	f001 f90a 	bl	80153e8 <iprintf>
                         (u16_t)IPH_TTL(iphdr),
                         (u16_t)IPH_PROTO(iphdr),
                         lwip_ntohs(IPH_CHKSUM(iphdr))));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 80141d4:	481e      	ldr	r0, [pc, #120]	@ (8014250 <ip4_debug_print+0x170>)
 80141d6:	f001 f977 	bl	80154c8 <puts>
  LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  | (src)\n",
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	68db      	ldr	r3, [r3, #12]
 80141de:	b2db      	uxtb	r3, r3
 80141e0:	4619      	mov	r1, r3
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	68db      	ldr	r3, [r3, #12]
 80141e6:	0a1b      	lsrs	r3, r3, #8
 80141e8:	b2db      	uxtb	r3, r3
 80141ea:	461a      	mov	r2, r3
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	68db      	ldr	r3, [r3, #12]
 80141f0:	0c1b      	lsrs	r3, r3, #16
 80141f2:	b2db      	uxtb	r3, r3
 80141f4:	4618      	mov	r0, r3
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	68db      	ldr	r3, [r3, #12]
 80141fa:	0e1b      	lsrs	r3, r3, #24
 80141fc:	b2db      	uxtb	r3, r3
 80141fe:	9300      	str	r3, [sp, #0]
 8014200:	4603      	mov	r3, r0
 8014202:	4817      	ldr	r0, [pc, #92]	@ (8014260 <ip4_debug_print+0x180>)
 8014204:	f001 f8f0 	bl	80153e8 <iprintf>
                         ip4_addr1_16_val(iphdr->src),
                         ip4_addr2_16_val(iphdr->src),
                         ip4_addr3_16_val(iphdr->src),
                         ip4_addr4_16_val(iphdr->src)));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 8014208:	4811      	ldr	r0, [pc, #68]	@ (8014250 <ip4_debug_print+0x170>)
 801420a:	f001 f95d 	bl	80154c8 <puts>
  LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  | (dest)\n",
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	691b      	ldr	r3, [r3, #16]
 8014212:	b2db      	uxtb	r3, r3
 8014214:	4619      	mov	r1, r3
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	691b      	ldr	r3, [r3, #16]
 801421a:	0a1b      	lsrs	r3, r3, #8
 801421c:	b2db      	uxtb	r3, r3
 801421e:	461a      	mov	r2, r3
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	691b      	ldr	r3, [r3, #16]
 8014224:	0c1b      	lsrs	r3, r3, #16
 8014226:	b2db      	uxtb	r3, r3
 8014228:	4618      	mov	r0, r3
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	691b      	ldr	r3, [r3, #16]
 801422e:	0e1b      	lsrs	r3, r3, #24
 8014230:	b2db      	uxtb	r3, r3
 8014232:	9300      	str	r3, [sp, #0]
 8014234:	4603      	mov	r3, r0
 8014236:	480b      	ldr	r0, [pc, #44]	@ (8014264 <ip4_debug_print+0x184>)
 8014238:	f001 f8d6 	bl	80153e8 <iprintf>
                         ip4_addr1_16_val(iphdr->dest),
                         ip4_addr2_16_val(iphdr->dest),
                         ip4_addr3_16_val(iphdr->dest),
                         ip4_addr4_16_val(iphdr->dest)));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 801423c:	4804      	ldr	r0, [pc, #16]	@ (8014250 <ip4_debug_print+0x170>)
 801423e:	f001 f943 	bl	80154c8 <puts>
}
 8014242:	bf00      	nop
 8014244:	3710      	adds	r7, #16
 8014246:	46bd      	mov	sp, r7
 8014248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801424c:	0801ab3c 	.word	0x0801ab3c
 8014250:	0801ab48 	.word	0x0801ab48
 8014254:	0801ab6c 	.word	0x0801ab6c
 8014258:	0801aba8 	.word	0x0801aba8
 801425c:	0801abe4 	.word	0x0801abe4
 8014260:	0801ac20 	.word	0x0801ac20
 8014264:	0801ac50 	.word	0x0801ac50

08014268 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8014268:	b480      	push	{r7}
 801426a:	b085      	sub	sp, #20
 801426c:	af00      	add	r7, sp, #0
 801426e:	6078      	str	r0, [r7, #4]
 8014270:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801427c:	d002      	beq.n	8014284 <ip4_addr_isbroadcast_u32+0x1c>
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	2b00      	cmp	r3, #0
 8014282:	d101      	bne.n	8014288 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014284:	2301      	movs	r3, #1
 8014286:	e02a      	b.n	80142de <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014288:	683b      	ldr	r3, [r7, #0]
 801428a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801428e:	f003 0302 	and.w	r3, r3, #2
 8014292:	2b00      	cmp	r3, #0
 8014294:	d101      	bne.n	801429a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014296:	2300      	movs	r3, #0
 8014298:	e021      	b.n	80142de <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801429a:	683b      	ldr	r3, [r7, #0]
 801429c:	3304      	adds	r3, #4
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	687a      	ldr	r2, [r7, #4]
 80142a2:	429a      	cmp	r2, r3
 80142a4:	d101      	bne.n	80142aa <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80142a6:	2300      	movs	r3, #0
 80142a8:	e019      	b.n	80142de <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80142aa:	68fa      	ldr	r2, [r7, #12]
 80142ac:	683b      	ldr	r3, [r7, #0]
 80142ae:	3304      	adds	r3, #4
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	405a      	eors	r2, r3
 80142b4:	683b      	ldr	r3, [r7, #0]
 80142b6:	3308      	adds	r3, #8
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	4013      	ands	r3, r2
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d10d      	bne.n	80142dc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80142c0:	683b      	ldr	r3, [r7, #0]
 80142c2:	3308      	adds	r3, #8
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	43da      	mvns	r2, r3
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80142cc:	683b      	ldr	r3, [r7, #0]
 80142ce:	3308      	adds	r3, #8
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80142d4:	429a      	cmp	r2, r3
 80142d6:	d101      	bne.n	80142dc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80142d8:	2301      	movs	r3, #1
 80142da:	e000      	b.n	80142de <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80142dc:	2300      	movs	r3, #0
  }
}
 80142de:	4618      	mov	r0, r3
 80142e0:	3714      	adds	r7, #20
 80142e2:	46bd      	mov	sp, r7
 80142e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142e8:	4770      	bx	lr
	...

080142ec <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80142ec:	b580      	push	{r7, lr}
 80142ee:	b084      	sub	sp, #16
 80142f0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80142f2:	2300      	movs	r3, #0
 80142f4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80142f6:	4b12      	ldr	r3, [pc, #72]	@ (8014340 <ip_reass_tmr+0x54>)
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80142fc:	e018      	b.n	8014330 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	7fdb      	ldrb	r3, [r3, #31]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d00b      	beq.n	801431e <ip_reass_tmr+0x32>
      r->timer--;
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	7fdb      	ldrb	r3, [r3, #31]
 801430a:	3b01      	subs	r3, #1
 801430c:	b2da      	uxtb	r2, r3
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	60fb      	str	r3, [r7, #12]
 801431c:	e008      	b.n	8014330 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014328:	68b9      	ldr	r1, [r7, #8]
 801432a:	6878      	ldr	r0, [r7, #4]
 801432c:	f000 f80a 	bl	8014344 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	2b00      	cmp	r3, #0
 8014334:	d1e3      	bne.n	80142fe <ip_reass_tmr+0x12>
    }
  }
}
 8014336:	bf00      	nop
 8014338:	bf00      	nop
 801433a:	3710      	adds	r7, #16
 801433c:	46bd      	mov	sp, r7
 801433e:	bd80      	pop	{r7, pc}
 8014340:	2400342c 	.word	0x2400342c

08014344 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014344:	b580      	push	{r7, lr}
 8014346:	b088      	sub	sp, #32
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]
 801434c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801434e:	2300      	movs	r3, #0
 8014350:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014352:	683a      	ldr	r2, [r7, #0]
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	429a      	cmp	r2, r3
 8014358:	d105      	bne.n	8014366 <ip_reass_free_complete_datagram+0x22>
 801435a:	4b45      	ldr	r3, [pc, #276]	@ (8014470 <ip_reass_free_complete_datagram+0x12c>)
 801435c:	22ab      	movs	r2, #171	@ 0xab
 801435e:	4945      	ldr	r1, [pc, #276]	@ (8014474 <ip_reass_free_complete_datagram+0x130>)
 8014360:	4845      	ldr	r0, [pc, #276]	@ (8014478 <ip_reass_free_complete_datagram+0x134>)
 8014362:	f001 f841 	bl	80153e8 <iprintf>
  if (prev != NULL) {
 8014366:	683b      	ldr	r3, [r7, #0]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d00a      	beq.n	8014382 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801436c:	683b      	ldr	r3, [r7, #0]
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	687a      	ldr	r2, [r7, #4]
 8014372:	429a      	cmp	r2, r3
 8014374:	d005      	beq.n	8014382 <ip_reass_free_complete_datagram+0x3e>
 8014376:	4b3e      	ldr	r3, [pc, #248]	@ (8014470 <ip_reass_free_complete_datagram+0x12c>)
 8014378:	22ad      	movs	r2, #173	@ 0xad
 801437a:	4940      	ldr	r1, [pc, #256]	@ (801447c <ip_reass_free_complete_datagram+0x138>)
 801437c:	483e      	ldr	r0, [pc, #248]	@ (8014478 <ip_reass_free_complete_datagram+0x134>)
 801437e:	f001 f833 	bl	80153e8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	685b      	ldr	r3, [r3, #4]
 8014386:	685b      	ldr	r3, [r3, #4]
 8014388:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801438a:	697b      	ldr	r3, [r7, #20]
 801438c:	889b      	ldrh	r3, [r3, #4]
 801438e:	b29b      	uxth	r3, r3
 8014390:	2b00      	cmp	r3, #0
 8014392:	d12a      	bne.n	80143ea <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	685b      	ldr	r3, [r3, #4]
 8014398:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801439a:	697b      	ldr	r3, [r7, #20]
 801439c:	681a      	ldr	r2, [r3, #0]
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80143a2:	69bb      	ldr	r3, [r7, #24]
 80143a4:	6858      	ldr	r0, [r3, #4]
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	3308      	adds	r3, #8
 80143aa:	2214      	movs	r2, #20
 80143ac:	4619      	mov	r1, r3
 80143ae:	f001 f9f0 	bl	8015792 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80143b2:	2101      	movs	r1, #1
 80143b4:	69b8      	ldr	r0, [r7, #24]
 80143b6:	f7ff fa43 	bl	8013840 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80143ba:	69b8      	ldr	r0, [r7, #24]
 80143bc:	f7f6 ff36 	bl	800b22c <pbuf_clen>
 80143c0:	4603      	mov	r3, r0
 80143c2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80143c4:	8bfa      	ldrh	r2, [r7, #30]
 80143c6:	8a7b      	ldrh	r3, [r7, #18]
 80143c8:	4413      	add	r3, r2
 80143ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80143ce:	db05      	blt.n	80143dc <ip_reass_free_complete_datagram+0x98>
 80143d0:	4b27      	ldr	r3, [pc, #156]	@ (8014470 <ip_reass_free_complete_datagram+0x12c>)
 80143d2:	22bc      	movs	r2, #188	@ 0xbc
 80143d4:	492a      	ldr	r1, [pc, #168]	@ (8014480 <ip_reass_free_complete_datagram+0x13c>)
 80143d6:	4828      	ldr	r0, [pc, #160]	@ (8014478 <ip_reass_free_complete_datagram+0x134>)
 80143d8:	f001 f806 	bl	80153e8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80143dc:	8bfa      	ldrh	r2, [r7, #30]
 80143de:	8a7b      	ldrh	r3, [r7, #18]
 80143e0:	4413      	add	r3, r2
 80143e2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80143e4:	69b8      	ldr	r0, [r7, #24]
 80143e6:	f7f6 fe81 	bl	800b0ec <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	685b      	ldr	r3, [r3, #4]
 80143ee:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80143f0:	e01f      	b.n	8014432 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80143f2:	69bb      	ldr	r3, [r7, #24]
 80143f4:	685b      	ldr	r3, [r3, #4]
 80143f6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80143f8:	69bb      	ldr	r3, [r7, #24]
 80143fa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80143fc:	697b      	ldr	r3, [r7, #20]
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014402:	68f8      	ldr	r0, [r7, #12]
 8014404:	f7f6 ff12 	bl	800b22c <pbuf_clen>
 8014408:	4603      	mov	r3, r0
 801440a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801440c:	8bfa      	ldrh	r2, [r7, #30]
 801440e:	8a7b      	ldrh	r3, [r7, #18]
 8014410:	4413      	add	r3, r2
 8014412:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014416:	db05      	blt.n	8014424 <ip_reass_free_complete_datagram+0xe0>
 8014418:	4b15      	ldr	r3, [pc, #84]	@ (8014470 <ip_reass_free_complete_datagram+0x12c>)
 801441a:	22cc      	movs	r2, #204	@ 0xcc
 801441c:	4918      	ldr	r1, [pc, #96]	@ (8014480 <ip_reass_free_complete_datagram+0x13c>)
 801441e:	4816      	ldr	r0, [pc, #88]	@ (8014478 <ip_reass_free_complete_datagram+0x134>)
 8014420:	f000 ffe2 	bl	80153e8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014424:	8bfa      	ldrh	r2, [r7, #30]
 8014426:	8a7b      	ldrh	r3, [r7, #18]
 8014428:	4413      	add	r3, r2
 801442a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801442c:	68f8      	ldr	r0, [r7, #12]
 801442e:	f7f6 fe5d 	bl	800b0ec <pbuf_free>
  while (p != NULL) {
 8014432:	69bb      	ldr	r3, [r7, #24]
 8014434:	2b00      	cmp	r3, #0
 8014436:	d1dc      	bne.n	80143f2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014438:	6839      	ldr	r1, [r7, #0]
 801443a:	6878      	ldr	r0, [r7, #4]
 801443c:	f000 f8c2 	bl	80145c4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014440:	4b10      	ldr	r3, [pc, #64]	@ (8014484 <ip_reass_free_complete_datagram+0x140>)
 8014442:	881b      	ldrh	r3, [r3, #0]
 8014444:	8bfa      	ldrh	r2, [r7, #30]
 8014446:	429a      	cmp	r2, r3
 8014448:	d905      	bls.n	8014456 <ip_reass_free_complete_datagram+0x112>
 801444a:	4b09      	ldr	r3, [pc, #36]	@ (8014470 <ip_reass_free_complete_datagram+0x12c>)
 801444c:	22d2      	movs	r2, #210	@ 0xd2
 801444e:	490e      	ldr	r1, [pc, #56]	@ (8014488 <ip_reass_free_complete_datagram+0x144>)
 8014450:	4809      	ldr	r0, [pc, #36]	@ (8014478 <ip_reass_free_complete_datagram+0x134>)
 8014452:	f000 ffc9 	bl	80153e8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014456:	4b0b      	ldr	r3, [pc, #44]	@ (8014484 <ip_reass_free_complete_datagram+0x140>)
 8014458:	881a      	ldrh	r2, [r3, #0]
 801445a:	8bfb      	ldrh	r3, [r7, #30]
 801445c:	1ad3      	subs	r3, r2, r3
 801445e:	b29a      	uxth	r2, r3
 8014460:	4b08      	ldr	r3, [pc, #32]	@ (8014484 <ip_reass_free_complete_datagram+0x140>)
 8014462:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014464:	8bfb      	ldrh	r3, [r7, #30]
}
 8014466:	4618      	mov	r0, r3
 8014468:	3720      	adds	r7, #32
 801446a:	46bd      	mov	sp, r7
 801446c:	bd80      	pop	{r7, pc}
 801446e:	bf00      	nop
 8014470:	0801ac80 	.word	0x0801ac80
 8014474:	0801acbc 	.word	0x0801acbc
 8014478:	0801acc8 	.word	0x0801acc8
 801447c:	0801acf0 	.word	0x0801acf0
 8014480:	0801ad04 	.word	0x0801ad04
 8014484:	24003430 	.word	0x24003430
 8014488:	0801ad24 	.word	0x0801ad24

0801448c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b08a      	sub	sp, #40	@ 0x28
 8014490:	af00      	add	r7, sp, #0
 8014492:	6078      	str	r0, [r7, #4]
 8014494:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014496:	2300      	movs	r3, #0
 8014498:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801449a:	2300      	movs	r3, #0
 801449c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801449e:	2300      	movs	r3, #0
 80144a0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80144a2:	2300      	movs	r3, #0
 80144a4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80144a6:	2300      	movs	r3, #0
 80144a8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80144aa:	4b28      	ldr	r3, [pc, #160]	@ (801454c <ip_reass_remove_oldest_datagram+0xc0>)
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80144b0:	e030      	b.n	8014514 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80144b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144b4:	695a      	ldr	r2, [r3, #20]
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	68db      	ldr	r3, [r3, #12]
 80144ba:	429a      	cmp	r2, r3
 80144bc:	d10c      	bne.n	80144d8 <ip_reass_remove_oldest_datagram+0x4c>
 80144be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144c0:	699a      	ldr	r2, [r3, #24]
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	691b      	ldr	r3, [r3, #16]
 80144c6:	429a      	cmp	r2, r3
 80144c8:	d106      	bne.n	80144d8 <ip_reass_remove_oldest_datagram+0x4c>
 80144ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144cc:	899a      	ldrh	r2, [r3, #12]
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	889b      	ldrh	r3, [r3, #4]
 80144d2:	b29b      	uxth	r3, r3
 80144d4:	429a      	cmp	r2, r3
 80144d6:	d014      	beq.n	8014502 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80144d8:	693b      	ldr	r3, [r7, #16]
 80144da:	3301      	adds	r3, #1
 80144dc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80144de:	6a3b      	ldr	r3, [r7, #32]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d104      	bne.n	80144ee <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80144e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144e6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80144e8:	69fb      	ldr	r3, [r7, #28]
 80144ea:	61bb      	str	r3, [r7, #24]
 80144ec:	e009      	b.n	8014502 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80144ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144f0:	7fda      	ldrb	r2, [r3, #31]
 80144f2:	6a3b      	ldr	r3, [r7, #32]
 80144f4:	7fdb      	ldrb	r3, [r3, #31]
 80144f6:	429a      	cmp	r2, r3
 80144f8:	d803      	bhi.n	8014502 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80144fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144fc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80144fe:	69fb      	ldr	r3, [r7, #28]
 8014500:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8014502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	2b00      	cmp	r3, #0
 8014508:	d001      	beq.n	801450e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801450a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801450c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801450e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8014514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014516:	2b00      	cmp	r3, #0
 8014518:	d1cb      	bne.n	80144b2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801451a:	6a3b      	ldr	r3, [r7, #32]
 801451c:	2b00      	cmp	r3, #0
 801451e:	d008      	beq.n	8014532 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014520:	69b9      	ldr	r1, [r7, #24]
 8014522:	6a38      	ldr	r0, [r7, #32]
 8014524:	f7ff ff0e 	bl	8014344 <ip_reass_free_complete_datagram>
 8014528:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801452a:	697a      	ldr	r2, [r7, #20]
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	4413      	add	r3, r2
 8014530:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014532:	697a      	ldr	r2, [r7, #20]
 8014534:	683b      	ldr	r3, [r7, #0]
 8014536:	429a      	cmp	r2, r3
 8014538:	da02      	bge.n	8014540 <ip_reass_remove_oldest_datagram+0xb4>
 801453a:	693b      	ldr	r3, [r7, #16]
 801453c:	2b01      	cmp	r3, #1
 801453e:	dcac      	bgt.n	801449a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014540:	697b      	ldr	r3, [r7, #20]
}
 8014542:	4618      	mov	r0, r3
 8014544:	3728      	adds	r7, #40	@ 0x28
 8014546:	46bd      	mov	sp, r7
 8014548:	bd80      	pop	{r7, pc}
 801454a:	bf00      	nop
 801454c:	2400342c 	.word	0x2400342c

08014550 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014550:	b580      	push	{r7, lr}
 8014552:	b084      	sub	sp, #16
 8014554:	af00      	add	r7, sp, #0
 8014556:	6078      	str	r0, [r7, #4]
 8014558:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801455a:	2004      	movs	r0, #4
 801455c:	f7f5 fe94 	bl	800a288 <memp_malloc>
 8014560:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	2b00      	cmp	r3, #0
 8014566:	d110      	bne.n	801458a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014568:	6839      	ldr	r1, [r7, #0]
 801456a:	6878      	ldr	r0, [r7, #4]
 801456c:	f7ff ff8e 	bl	801448c <ip_reass_remove_oldest_datagram>
 8014570:	4602      	mov	r2, r0
 8014572:	683b      	ldr	r3, [r7, #0]
 8014574:	4293      	cmp	r3, r2
 8014576:	dc03      	bgt.n	8014580 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014578:	2004      	movs	r0, #4
 801457a:	f7f5 fe85 	bl	800a288 <memp_malloc>
 801457e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d101      	bne.n	801458a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014586:	2300      	movs	r3, #0
 8014588:	e016      	b.n	80145b8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801458a:	2220      	movs	r2, #32
 801458c:	2100      	movs	r1, #0
 801458e:	68f8      	ldr	r0, [r7, #12]
 8014590:	f001 f88a 	bl	80156a8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	220f      	movs	r2, #15
 8014598:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801459a:	4b09      	ldr	r3, [pc, #36]	@ (80145c0 <ip_reass_enqueue_new_datagram+0x70>)
 801459c:	681a      	ldr	r2, [r3, #0]
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80145a2:	4a07      	ldr	r2, [pc, #28]	@ (80145c0 <ip_reass_enqueue_new_datagram+0x70>)
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	3308      	adds	r3, #8
 80145ac:	2214      	movs	r2, #20
 80145ae:	6879      	ldr	r1, [r7, #4]
 80145b0:	4618      	mov	r0, r3
 80145b2:	f001 f8ee 	bl	8015792 <memcpy>
  return ipr;
 80145b6:	68fb      	ldr	r3, [r7, #12]
}
 80145b8:	4618      	mov	r0, r3
 80145ba:	3710      	adds	r7, #16
 80145bc:	46bd      	mov	sp, r7
 80145be:	bd80      	pop	{r7, pc}
 80145c0:	2400342c 	.word	0x2400342c

080145c4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80145c4:	b580      	push	{r7, lr}
 80145c6:	b082      	sub	sp, #8
 80145c8:	af00      	add	r7, sp, #0
 80145ca:	6078      	str	r0, [r7, #4]
 80145cc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80145ce:	4b10      	ldr	r3, [pc, #64]	@ (8014610 <ip_reass_dequeue_datagram+0x4c>)
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	687a      	ldr	r2, [r7, #4]
 80145d4:	429a      	cmp	r2, r3
 80145d6:	d104      	bne.n	80145e2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	4a0c      	ldr	r2, [pc, #48]	@ (8014610 <ip_reass_dequeue_datagram+0x4c>)
 80145de:	6013      	str	r3, [r2, #0]
 80145e0:	e00d      	b.n	80145fe <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80145e2:	683b      	ldr	r3, [r7, #0]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d106      	bne.n	80145f6 <ip_reass_dequeue_datagram+0x32>
 80145e8:	4b0a      	ldr	r3, [pc, #40]	@ (8014614 <ip_reass_dequeue_datagram+0x50>)
 80145ea:	f240 1245 	movw	r2, #325	@ 0x145
 80145ee:	490a      	ldr	r1, [pc, #40]	@ (8014618 <ip_reass_dequeue_datagram+0x54>)
 80145f0:	480a      	ldr	r0, [pc, #40]	@ (801461c <ip_reass_dequeue_datagram+0x58>)
 80145f2:	f000 fef9 	bl	80153e8 <iprintf>
    prev->next = ipr->next;
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	681a      	ldr	r2, [r3, #0]
 80145fa:	683b      	ldr	r3, [r7, #0]
 80145fc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80145fe:	6879      	ldr	r1, [r7, #4]
 8014600:	2004      	movs	r0, #4
 8014602:	f7f5 feb1 	bl	800a368 <memp_free>
}
 8014606:	bf00      	nop
 8014608:	3708      	adds	r7, #8
 801460a:	46bd      	mov	sp, r7
 801460c:	bd80      	pop	{r7, pc}
 801460e:	bf00      	nop
 8014610:	2400342c 	.word	0x2400342c
 8014614:	0801ac80 	.word	0x0801ac80
 8014618:	0801ad48 	.word	0x0801ad48
 801461c:	0801acc8 	.word	0x0801acc8

08014620 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8014620:	b580      	push	{r7, lr}
 8014622:	b08c      	sub	sp, #48	@ 0x30
 8014624:	af00      	add	r7, sp, #0
 8014626:	60f8      	str	r0, [r7, #12]
 8014628:	60b9      	str	r1, [r7, #8]
 801462a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801462c:	2300      	movs	r3, #0
 801462e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014630:	2301      	movs	r3, #1
 8014632:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014634:	68bb      	ldr	r3, [r7, #8]
 8014636:	685b      	ldr	r3, [r3, #4]
 8014638:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801463a:	69fb      	ldr	r3, [r7, #28]
 801463c:	885b      	ldrh	r3, [r3, #2]
 801463e:	b29b      	uxth	r3, r3
 8014640:	4618      	mov	r0, r3
 8014642:	f7f5 f8e1 	bl	8009808 <lwip_htons>
 8014646:	4603      	mov	r3, r0
 8014648:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801464a:	69fb      	ldr	r3, [r7, #28]
 801464c:	781b      	ldrb	r3, [r3, #0]
 801464e:	f003 030f 	and.w	r3, r3, #15
 8014652:	b2db      	uxtb	r3, r3
 8014654:	009b      	lsls	r3, r3, #2
 8014656:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014658:	7e7b      	ldrb	r3, [r7, #25]
 801465a:	b29b      	uxth	r3, r3
 801465c:	8b7a      	ldrh	r2, [r7, #26]
 801465e:	429a      	cmp	r2, r3
 8014660:	d202      	bcs.n	8014668 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014662:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014666:	e135      	b.n	80148d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014668:	7e7b      	ldrb	r3, [r7, #25]
 801466a:	b29b      	uxth	r3, r3
 801466c:	8b7a      	ldrh	r2, [r7, #26]
 801466e:	1ad3      	subs	r3, r2, r3
 8014670:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014672:	69fb      	ldr	r3, [r7, #28]
 8014674:	88db      	ldrh	r3, [r3, #6]
 8014676:	b29b      	uxth	r3, r3
 8014678:	4618      	mov	r0, r3
 801467a:	f7f5 f8c5 	bl	8009808 <lwip_htons>
 801467e:	4603      	mov	r3, r0
 8014680:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014684:	b29b      	uxth	r3, r3
 8014686:	00db      	lsls	r3, r3, #3
 8014688:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801468a:	68bb      	ldr	r3, [r7, #8]
 801468c:	685b      	ldr	r3, [r3, #4]
 801468e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8014690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014692:	2200      	movs	r2, #0
 8014694:	701a      	strb	r2, [r3, #0]
 8014696:	2200      	movs	r2, #0
 8014698:	705a      	strb	r2, [r3, #1]
 801469a:	2200      	movs	r2, #0
 801469c:	709a      	strb	r2, [r3, #2]
 801469e:	2200      	movs	r2, #0
 80146a0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80146a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146a4:	8afa      	ldrh	r2, [r7, #22]
 80146a6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80146a8:	8afa      	ldrh	r2, [r7, #22]
 80146aa:	8b7b      	ldrh	r3, [r7, #26]
 80146ac:	4413      	add	r3, r2
 80146ae:	b29a      	uxth	r2, r3
 80146b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146b2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80146b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146b6:	88db      	ldrh	r3, [r3, #6]
 80146b8:	b29b      	uxth	r3, r3
 80146ba:	8afa      	ldrh	r2, [r7, #22]
 80146bc:	429a      	cmp	r2, r3
 80146be:	d902      	bls.n	80146c6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80146c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80146c4:	e106      	b.n	80148d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	685b      	ldr	r3, [r3, #4]
 80146ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80146cc:	e068      	b.n	80147a0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80146ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146d0:	685b      	ldr	r3, [r3, #4]
 80146d2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80146d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146d6:	889b      	ldrh	r3, [r3, #4]
 80146d8:	b29a      	uxth	r2, r3
 80146da:	693b      	ldr	r3, [r7, #16]
 80146dc:	889b      	ldrh	r3, [r3, #4]
 80146de:	b29b      	uxth	r3, r3
 80146e0:	429a      	cmp	r2, r3
 80146e2:	d235      	bcs.n	8014750 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80146e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80146e8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80146ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d020      	beq.n	8014732 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80146f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146f2:	889b      	ldrh	r3, [r3, #4]
 80146f4:	b29a      	uxth	r2, r3
 80146f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146f8:	88db      	ldrh	r3, [r3, #6]
 80146fa:	b29b      	uxth	r3, r3
 80146fc:	429a      	cmp	r2, r3
 80146fe:	d307      	bcc.n	8014710 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8014700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014702:	88db      	ldrh	r3, [r3, #6]
 8014704:	b29a      	uxth	r2, r3
 8014706:	693b      	ldr	r3, [r7, #16]
 8014708:	889b      	ldrh	r3, [r3, #4]
 801470a:	b29b      	uxth	r3, r3
 801470c:	429a      	cmp	r2, r3
 801470e:	d902      	bls.n	8014716 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014710:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014714:	e0de      	b.n	80148d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8014716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014718:	68ba      	ldr	r2, [r7, #8]
 801471a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801471c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801471e:	88db      	ldrh	r3, [r3, #6]
 8014720:	b29a      	uxth	r2, r3
 8014722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014724:	889b      	ldrh	r3, [r3, #4]
 8014726:	b29b      	uxth	r3, r3
 8014728:	429a      	cmp	r2, r3
 801472a:	d03d      	beq.n	80147a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801472c:	2300      	movs	r3, #0
 801472e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8014730:	e03a      	b.n	80147a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8014732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014734:	88db      	ldrh	r3, [r3, #6]
 8014736:	b29a      	uxth	r2, r3
 8014738:	693b      	ldr	r3, [r7, #16]
 801473a:	889b      	ldrh	r3, [r3, #4]
 801473c:	b29b      	uxth	r3, r3
 801473e:	429a      	cmp	r2, r3
 8014740:	d902      	bls.n	8014748 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014742:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014746:	e0c5      	b.n	80148d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	68ba      	ldr	r2, [r7, #8]
 801474c:	605a      	str	r2, [r3, #4]
      break;
 801474e:	e02b      	b.n	80147a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8014750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014752:	889b      	ldrh	r3, [r3, #4]
 8014754:	b29a      	uxth	r2, r3
 8014756:	693b      	ldr	r3, [r7, #16]
 8014758:	889b      	ldrh	r3, [r3, #4]
 801475a:	b29b      	uxth	r3, r3
 801475c:	429a      	cmp	r2, r3
 801475e:	d102      	bne.n	8014766 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014760:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014764:	e0b6      	b.n	80148d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8014766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014768:	889b      	ldrh	r3, [r3, #4]
 801476a:	b29a      	uxth	r2, r3
 801476c:	693b      	ldr	r3, [r7, #16]
 801476e:	88db      	ldrh	r3, [r3, #6]
 8014770:	b29b      	uxth	r3, r3
 8014772:	429a      	cmp	r2, r3
 8014774:	d202      	bcs.n	801477c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014776:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801477a:	e0ab      	b.n	80148d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801477c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801477e:	2b00      	cmp	r3, #0
 8014780:	d009      	beq.n	8014796 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014784:	88db      	ldrh	r3, [r3, #6]
 8014786:	b29a      	uxth	r2, r3
 8014788:	693b      	ldr	r3, [r7, #16]
 801478a:	889b      	ldrh	r3, [r3, #4]
 801478c:	b29b      	uxth	r3, r3
 801478e:	429a      	cmp	r2, r3
 8014790:	d001      	beq.n	8014796 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014792:	2300      	movs	r3, #0
 8014794:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8014796:	693b      	ldr	r3, [r7, #16]
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801479c:	693b      	ldr	r3, [r7, #16]
 801479e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80147a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d193      	bne.n	80146ce <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80147a6:	e000      	b.n	80147aa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80147a8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80147aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d12d      	bne.n	801480c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80147b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d01c      	beq.n	80147f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80147b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147b8:	88db      	ldrh	r3, [r3, #6]
 80147ba:	b29a      	uxth	r2, r3
 80147bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147be:	889b      	ldrh	r3, [r3, #4]
 80147c0:	b29b      	uxth	r3, r3
 80147c2:	429a      	cmp	r2, r3
 80147c4:	d906      	bls.n	80147d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80147c6:	4b45      	ldr	r3, [pc, #276]	@ (80148dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80147c8:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80147cc:	4944      	ldr	r1, [pc, #272]	@ (80148e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80147ce:	4845      	ldr	r0, [pc, #276]	@ (80148e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80147d0:	f000 fe0a 	bl	80153e8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80147d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147d6:	68ba      	ldr	r2, [r7, #8]
 80147d8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80147da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147dc:	88db      	ldrh	r3, [r3, #6]
 80147de:	b29a      	uxth	r2, r3
 80147e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147e2:	889b      	ldrh	r3, [r3, #4]
 80147e4:	b29b      	uxth	r3, r3
 80147e6:	429a      	cmp	r2, r3
 80147e8:	d010      	beq.n	801480c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80147ea:	2300      	movs	r3, #0
 80147ec:	623b      	str	r3, [r7, #32]
 80147ee:	e00d      	b.n	801480c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	685b      	ldr	r3, [r3, #4]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d006      	beq.n	8014806 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80147f8:	4b38      	ldr	r3, [pc, #224]	@ (80148dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80147fa:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80147fe:	493a      	ldr	r1, [pc, #232]	@ (80148e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8014800:	4838      	ldr	r0, [pc, #224]	@ (80148e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014802:	f000 fdf1 	bl	80153e8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	68ba      	ldr	r2, [r7, #8]
 801480a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d105      	bne.n	801481e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	7f9b      	ldrb	r3, [r3, #30]
 8014816:	f003 0301 	and.w	r3, r3, #1
 801481a:	2b00      	cmp	r3, #0
 801481c:	d059      	beq.n	80148d2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801481e:	6a3b      	ldr	r3, [r7, #32]
 8014820:	2b00      	cmp	r3, #0
 8014822:	d04f      	beq.n	80148c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	685b      	ldr	r3, [r3, #4]
 8014828:	2b00      	cmp	r3, #0
 801482a:	d006      	beq.n	801483a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	685b      	ldr	r3, [r3, #4]
 8014830:	685b      	ldr	r3, [r3, #4]
 8014832:	889b      	ldrh	r3, [r3, #4]
 8014834:	b29b      	uxth	r3, r3
 8014836:	2b00      	cmp	r3, #0
 8014838:	d002      	beq.n	8014840 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801483a:	2300      	movs	r3, #0
 801483c:	623b      	str	r3, [r7, #32]
 801483e:	e041      	b.n	80148c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014842:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8014844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801484a:	e012      	b.n	8014872 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801484c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801484e:	685b      	ldr	r3, [r3, #4]
 8014850:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8014852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014854:	88db      	ldrh	r3, [r3, #6]
 8014856:	b29a      	uxth	r2, r3
 8014858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801485a:	889b      	ldrh	r3, [r3, #4]
 801485c:	b29b      	uxth	r3, r3
 801485e:	429a      	cmp	r2, r3
 8014860:	d002      	beq.n	8014868 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014862:	2300      	movs	r3, #0
 8014864:	623b      	str	r3, [r7, #32]
            break;
 8014866:	e007      	b.n	8014878 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801486a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801486c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8014872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014874:	2b00      	cmp	r3, #0
 8014876:	d1e9      	bne.n	801484c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014878:	6a3b      	ldr	r3, [r7, #32]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d022      	beq.n	80148c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	685b      	ldr	r3, [r3, #4]
 8014882:	2b00      	cmp	r3, #0
 8014884:	d106      	bne.n	8014894 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014886:	4b15      	ldr	r3, [pc, #84]	@ (80148dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014888:	f240 12df 	movw	r2, #479	@ 0x1df
 801488c:	4917      	ldr	r1, [pc, #92]	@ (80148ec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801488e:	4815      	ldr	r0, [pc, #84]	@ (80148e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014890:	f000 fdaa 	bl	80153e8 <iprintf>
          LWIP_ASSERT("sanity check",
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	685b      	ldr	r3, [r3, #4]
 8014898:	685b      	ldr	r3, [r3, #4]
 801489a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801489c:	429a      	cmp	r2, r3
 801489e:	d106      	bne.n	80148ae <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80148a0:	4b0e      	ldr	r3, [pc, #56]	@ (80148dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80148a2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80148a6:	4911      	ldr	r1, [pc, #68]	@ (80148ec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80148a8:	480e      	ldr	r0, [pc, #56]	@ (80148e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80148aa:	f000 fd9d 	bl	80153e8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80148ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d006      	beq.n	80148c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80148b6:	4b09      	ldr	r3, [pc, #36]	@ (80148dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80148b8:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80148bc:	490c      	ldr	r1, [pc, #48]	@ (80148f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80148be:	4809      	ldr	r0, [pc, #36]	@ (80148e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80148c0:	f000 fd92 	bl	80153e8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80148c4:	6a3b      	ldr	r3, [r7, #32]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	bf14      	ite	ne
 80148ca:	2301      	movne	r3, #1
 80148cc:	2300      	moveq	r3, #0
 80148ce:	b2db      	uxtb	r3, r3
 80148d0:	e000      	b.n	80148d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80148d2:	2300      	movs	r3, #0
}
 80148d4:	4618      	mov	r0, r3
 80148d6:	3730      	adds	r7, #48	@ 0x30
 80148d8:	46bd      	mov	sp, r7
 80148da:	bd80      	pop	{r7, pc}
 80148dc:	0801ac80 	.word	0x0801ac80
 80148e0:	0801ad64 	.word	0x0801ad64
 80148e4:	0801acc8 	.word	0x0801acc8
 80148e8:	0801ad84 	.word	0x0801ad84
 80148ec:	0801adbc 	.word	0x0801adbc
 80148f0:	0801adcc 	.word	0x0801adcc

080148f4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b08e      	sub	sp, #56	@ 0x38
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	685b      	ldr	r3, [r3, #4]
 8014900:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8014902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014904:	781b      	ldrb	r3, [r3, #0]
 8014906:	f003 030f 	and.w	r3, r3, #15
 801490a:	b2db      	uxtb	r3, r3
 801490c:	009b      	lsls	r3, r3, #2
 801490e:	b2db      	uxtb	r3, r3
 8014910:	2b14      	cmp	r3, #20
 8014912:	f040 8171 	bne.w	8014bf8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014918:	88db      	ldrh	r3, [r3, #6]
 801491a:	b29b      	uxth	r3, r3
 801491c:	4618      	mov	r0, r3
 801491e:	f7f4 ff73 	bl	8009808 <lwip_htons>
 8014922:	4603      	mov	r3, r0
 8014924:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014928:	b29b      	uxth	r3, r3
 801492a:	00db      	lsls	r3, r3, #3
 801492c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801492e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014930:	885b      	ldrh	r3, [r3, #2]
 8014932:	b29b      	uxth	r3, r3
 8014934:	4618      	mov	r0, r3
 8014936:	f7f4 ff67 	bl	8009808 <lwip_htons>
 801493a:	4603      	mov	r3, r0
 801493c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801493e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014940:	781b      	ldrb	r3, [r3, #0]
 8014942:	f003 030f 	and.w	r3, r3, #15
 8014946:	b2db      	uxtb	r3, r3
 8014948:	009b      	lsls	r3, r3, #2
 801494a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801494e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014952:	b29b      	uxth	r3, r3
 8014954:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014956:	429a      	cmp	r2, r3
 8014958:	f0c0 8150 	bcc.w	8014bfc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801495c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014960:	b29b      	uxth	r3, r3
 8014962:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014964:	1ad3      	subs	r3, r2, r3
 8014966:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014968:	6878      	ldr	r0, [r7, #4]
 801496a:	f7f6 fc5f 	bl	800b22c <pbuf_clen>
 801496e:	4603      	mov	r3, r0
 8014970:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014972:	4b8c      	ldr	r3, [pc, #560]	@ (8014ba4 <ip4_reass+0x2b0>)
 8014974:	881b      	ldrh	r3, [r3, #0]
 8014976:	461a      	mov	r2, r3
 8014978:	8c3b      	ldrh	r3, [r7, #32]
 801497a:	4413      	add	r3, r2
 801497c:	2b0a      	cmp	r3, #10
 801497e:	dd10      	ble.n	80149a2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014980:	8c3b      	ldrh	r3, [r7, #32]
 8014982:	4619      	mov	r1, r3
 8014984:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014986:	f7ff fd81 	bl	801448c <ip_reass_remove_oldest_datagram>
 801498a:	4603      	mov	r3, r0
 801498c:	2b00      	cmp	r3, #0
 801498e:	f000 8137 	beq.w	8014c00 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014992:	4b84      	ldr	r3, [pc, #528]	@ (8014ba4 <ip4_reass+0x2b0>)
 8014994:	881b      	ldrh	r3, [r3, #0]
 8014996:	461a      	mov	r2, r3
 8014998:	8c3b      	ldrh	r3, [r7, #32]
 801499a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801499c:	2b0a      	cmp	r3, #10
 801499e:	f300 812f 	bgt.w	8014c00 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80149a2:	4b81      	ldr	r3, [pc, #516]	@ (8014ba8 <ip4_reass+0x2b4>)
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80149a8:	e015      	b.n	80149d6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80149aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149ac:	695a      	ldr	r2, [r3, #20]
 80149ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149b0:	68db      	ldr	r3, [r3, #12]
 80149b2:	429a      	cmp	r2, r3
 80149b4:	d10c      	bne.n	80149d0 <ip4_reass+0xdc>
 80149b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149b8:	699a      	ldr	r2, [r3, #24]
 80149ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149bc:	691b      	ldr	r3, [r3, #16]
 80149be:	429a      	cmp	r2, r3
 80149c0:	d106      	bne.n	80149d0 <ip4_reass+0xdc>
 80149c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149c4:	899a      	ldrh	r2, [r3, #12]
 80149c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149c8:	889b      	ldrh	r3, [r3, #4]
 80149ca:	b29b      	uxth	r3, r3
 80149cc:	429a      	cmp	r2, r3
 80149ce:	d006      	beq.n	80149de <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80149d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80149d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d1e6      	bne.n	80149aa <ip4_reass+0xb6>
 80149dc:	e000      	b.n	80149e0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80149de:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80149e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d109      	bne.n	80149fa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80149e6:	8c3b      	ldrh	r3, [r7, #32]
 80149e8:	4619      	mov	r1, r3
 80149ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80149ec:	f7ff fdb0 	bl	8014550 <ip_reass_enqueue_new_datagram>
 80149f0:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80149f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d11c      	bne.n	8014a32 <ip4_reass+0x13e>
      goto nullreturn;
 80149f8:	e105      	b.n	8014c06 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80149fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149fc:	88db      	ldrh	r3, [r3, #6]
 80149fe:	b29b      	uxth	r3, r3
 8014a00:	4618      	mov	r0, r3
 8014a02:	f7f4 ff01 	bl	8009808 <lwip_htons>
 8014a06:	4603      	mov	r3, r0
 8014a08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d110      	bne.n	8014a32 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a12:	89db      	ldrh	r3, [r3, #14]
 8014a14:	4618      	mov	r0, r3
 8014a16:	f7f4 fef7 	bl	8009808 <lwip_htons>
 8014a1a:	4603      	mov	r3, r0
 8014a1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d006      	beq.n	8014a32 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a26:	3308      	adds	r3, #8
 8014a28:	2214      	movs	r2, #20
 8014a2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	f000 feb0 	bl	8015792 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a34:	88db      	ldrh	r3, [r3, #6]
 8014a36:	b29b      	uxth	r3, r3
 8014a38:	f003 0320 	and.w	r3, r3, #32
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	bf0c      	ite	eq
 8014a40:	2301      	moveq	r3, #1
 8014a42:	2300      	movne	r3, #0
 8014a44:	b2db      	uxtb	r3, r3
 8014a46:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014a48:	69fb      	ldr	r3, [r7, #28]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d00e      	beq.n	8014a6c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8014a4e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8014a50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014a52:	4413      	add	r3, r2
 8014a54:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014a56:	8b7a      	ldrh	r2, [r7, #26]
 8014a58:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014a5a:	429a      	cmp	r2, r3
 8014a5c:	f0c0 80a0 	bcc.w	8014ba0 <ip4_reass+0x2ac>
 8014a60:	8b7b      	ldrh	r3, [r7, #26]
 8014a62:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8014a66:	4293      	cmp	r3, r2
 8014a68:	f200 809a 	bhi.w	8014ba0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014a6c:	69fa      	ldr	r2, [r7, #28]
 8014a6e:	6879      	ldr	r1, [r7, #4]
 8014a70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014a72:	f7ff fdd5 	bl	8014620 <ip_reass_chain_frag_into_datagram_and_validate>
 8014a76:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014a78:	697b      	ldr	r3, [r7, #20]
 8014a7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014a7e:	f000 809b 	beq.w	8014bb8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014a82:	4b48      	ldr	r3, [pc, #288]	@ (8014ba4 <ip4_reass+0x2b0>)
 8014a84:	881a      	ldrh	r2, [r3, #0]
 8014a86:	8c3b      	ldrh	r3, [r7, #32]
 8014a88:	4413      	add	r3, r2
 8014a8a:	b29a      	uxth	r2, r3
 8014a8c:	4b45      	ldr	r3, [pc, #276]	@ (8014ba4 <ip4_reass+0x2b0>)
 8014a8e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014a90:	69fb      	ldr	r3, [r7, #28]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d00d      	beq.n	8014ab2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8014a96:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8014a98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014a9a:	4413      	add	r3, r2
 8014a9c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8014a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014aa0:	8a7a      	ldrh	r2, [r7, #18]
 8014aa2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014aa6:	7f9b      	ldrb	r3, [r3, #30]
 8014aa8:	f043 0301 	orr.w	r3, r3, #1
 8014aac:	b2da      	uxtb	r2, r3
 8014aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ab0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014ab2:	697b      	ldr	r3, [r7, #20]
 8014ab4:	2b01      	cmp	r3, #1
 8014ab6:	d171      	bne.n	8014b9c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8014ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014aba:	8b9b      	ldrh	r3, [r3, #28]
 8014abc:	3314      	adds	r3, #20
 8014abe:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ac2:	685b      	ldr	r3, [r3, #4]
 8014ac4:	685b      	ldr	r3, [r3, #4]
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8014aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014acc:	685b      	ldr	r3, [r3, #4]
 8014ace:	685b      	ldr	r3, [r3, #4]
 8014ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ad4:	3308      	adds	r3, #8
 8014ad6:	2214      	movs	r2, #20
 8014ad8:	4619      	mov	r1, r3
 8014ada:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014adc:	f000 fe59 	bl	8015792 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014ae0:	8a3b      	ldrh	r3, [r7, #16]
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	f7f4 fe90 	bl	8009808 <lwip_htons>
 8014ae8:	4603      	mov	r3, r0
 8014aea:	461a      	mov	r2, r3
 8014aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014aee:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014af2:	2200      	movs	r2, #0
 8014af4:	719a      	strb	r2, [r3, #6]
 8014af6:	2200      	movs	r2, #0
 8014af8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8014afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014afc:	2200      	movs	r2, #0
 8014afe:	729a      	strb	r2, [r3, #10]
 8014b00:	2200      	movs	r2, #0
 8014b02:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b06:	685b      	ldr	r3, [r3, #4]
 8014b08:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8014b0a:	e00d      	b.n	8014b28 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b0e:	685b      	ldr	r3, [r3, #4]
 8014b10:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8014b12:	2114      	movs	r1, #20
 8014b14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014b16:	f7f6 fa5b 	bl	800afd0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8014b1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014b1c:	6878      	ldr	r0, [r7, #4]
 8014b1e:	f7f6 fbbf 	bl	800b2a0 <pbuf_cat>
      r = iprh->next_pbuf;
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (r != NULL) {
 8014b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d1ee      	bne.n	8014b0c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8014b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8014ba8 <ip4_reass+0x2b4>)
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014b34:	429a      	cmp	r2, r3
 8014b36:	d102      	bne.n	8014b3e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014b38:	2300      	movs	r3, #0
 8014b3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8014b3c:	e010      	b.n	8014b60 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8014ba8 <ip4_reass+0x2b4>)
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	637b      	str	r3, [r7, #52]	@ 0x34
 8014b44:	e007      	b.n	8014b56 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014b4c:	429a      	cmp	r2, r3
 8014b4e:	d006      	beq.n	8014b5e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	637b      	str	r3, [r7, #52]	@ 0x34
 8014b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d1f4      	bne.n	8014b46 <ip4_reass+0x252>
 8014b5c:	e000      	b.n	8014b60 <ip4_reass+0x26c>
          break;
 8014b5e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014b60:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014b62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014b64:	f7ff fd2e 	bl	80145c4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014b68:	6878      	ldr	r0, [r7, #4]
 8014b6a:	f7f6 fb5f 	bl	800b22c <pbuf_clen>
 8014b6e:	4603      	mov	r3, r0
 8014b70:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014b72:	4b0c      	ldr	r3, [pc, #48]	@ (8014ba4 <ip4_reass+0x2b0>)
 8014b74:	881b      	ldrh	r3, [r3, #0]
 8014b76:	8c3a      	ldrh	r2, [r7, #32]
 8014b78:	429a      	cmp	r2, r3
 8014b7a:	d906      	bls.n	8014b8a <ip4_reass+0x296>
 8014b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8014bac <ip4_reass+0x2b8>)
 8014b7e:	f240 229b 	movw	r2, #667	@ 0x29b
 8014b82:	490b      	ldr	r1, [pc, #44]	@ (8014bb0 <ip4_reass+0x2bc>)
 8014b84:	480b      	ldr	r0, [pc, #44]	@ (8014bb4 <ip4_reass+0x2c0>)
 8014b86:	f000 fc2f 	bl	80153e8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8014b8a:	4b06      	ldr	r3, [pc, #24]	@ (8014ba4 <ip4_reass+0x2b0>)
 8014b8c:	881a      	ldrh	r2, [r3, #0]
 8014b8e:	8c3b      	ldrh	r3, [r7, #32]
 8014b90:	1ad3      	subs	r3, r2, r3
 8014b92:	b29a      	uxth	r2, r3
 8014b94:	4b03      	ldr	r3, [pc, #12]	@ (8014ba4 <ip4_reass+0x2b0>)
 8014b96:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	e038      	b.n	8014c0e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	e036      	b.n	8014c0e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8014ba0:	bf00      	nop
 8014ba2:	e00a      	b.n	8014bba <ip4_reass+0x2c6>
 8014ba4:	24003430 	.word	0x24003430
 8014ba8:	2400342c 	.word	0x2400342c
 8014bac:	0801ac80 	.word	0x0801ac80
 8014bb0:	0801adf0 	.word	0x0801adf0
 8014bb4:	0801acc8 	.word	0x0801acc8
    goto nullreturn_ipr;
 8014bb8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8014bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d106      	bne.n	8014bce <ip4_reass+0x2da>
 8014bc0:	4b15      	ldr	r3, [pc, #84]	@ (8014c18 <ip4_reass+0x324>)
 8014bc2:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8014bc6:	4915      	ldr	r1, [pc, #84]	@ (8014c1c <ip4_reass+0x328>)
 8014bc8:	4815      	ldr	r0, [pc, #84]	@ (8014c20 <ip4_reass+0x32c>)
 8014bca:	f000 fc0d 	bl	80153e8 <iprintf>
  if (ipr->p == NULL) {
 8014bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bd0:	685b      	ldr	r3, [r3, #4]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d116      	bne.n	8014c04 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014bd6:	4b13      	ldr	r3, [pc, #76]	@ (8014c24 <ip4_reass+0x330>)
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014bdc:	429a      	cmp	r2, r3
 8014bde:	d006      	beq.n	8014bee <ip4_reass+0x2fa>
 8014be0:	4b0d      	ldr	r3, [pc, #52]	@ (8014c18 <ip4_reass+0x324>)
 8014be2:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8014be6:	4910      	ldr	r1, [pc, #64]	@ (8014c28 <ip4_reass+0x334>)
 8014be8:	480d      	ldr	r0, [pc, #52]	@ (8014c20 <ip4_reass+0x32c>)
 8014bea:	f000 fbfd 	bl	80153e8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8014bee:	2100      	movs	r1, #0
 8014bf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014bf2:	f7ff fce7 	bl	80145c4 <ip_reass_dequeue_datagram>
 8014bf6:	e006      	b.n	8014c06 <ip4_reass+0x312>
    goto nullreturn;
 8014bf8:	bf00      	nop
 8014bfa:	e004      	b.n	8014c06 <ip4_reass+0x312>
    goto nullreturn;
 8014bfc:	bf00      	nop
 8014bfe:	e002      	b.n	8014c06 <ip4_reass+0x312>
      goto nullreturn;
 8014c00:	bf00      	nop
 8014c02:	e000      	b.n	8014c06 <ip4_reass+0x312>
  }

nullreturn:
 8014c04:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014c06:	6878      	ldr	r0, [r7, #4]
 8014c08:	f7f6 fa70 	bl	800b0ec <pbuf_free>
  return NULL;
 8014c0c:	2300      	movs	r3, #0
}
 8014c0e:	4618      	mov	r0, r3
 8014c10:	3738      	adds	r7, #56	@ 0x38
 8014c12:	46bd      	mov	sp, r7
 8014c14:	bd80      	pop	{r7, pc}
 8014c16:	bf00      	nop
 8014c18:	0801ac80 	.word	0x0801ac80
 8014c1c:	0801ae0c 	.word	0x0801ae0c
 8014c20:	0801acc8 	.word	0x0801acc8
 8014c24:	2400342c 	.word	0x2400342c
 8014c28:	0801ae18 	.word	0x0801ae18

08014c2c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014c30:	2005      	movs	r0, #5
 8014c32:	f7f5 fb29 	bl	800a288 <memp_malloc>
 8014c36:	4603      	mov	r3, r0
}
 8014c38:	4618      	mov	r0, r3
 8014c3a:	bd80      	pop	{r7, pc}

08014c3c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014c3c:	b580      	push	{r7, lr}
 8014c3e:	b082      	sub	sp, #8
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d106      	bne.n	8014c58 <ip_frag_free_pbuf_custom_ref+0x1c>
 8014c4a:	4b07      	ldr	r3, [pc, #28]	@ (8014c68 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014c4c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8014c50:	4906      	ldr	r1, [pc, #24]	@ (8014c6c <ip_frag_free_pbuf_custom_ref+0x30>)
 8014c52:	4807      	ldr	r0, [pc, #28]	@ (8014c70 <ip_frag_free_pbuf_custom_ref+0x34>)
 8014c54:	f000 fbc8 	bl	80153e8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014c58:	6879      	ldr	r1, [r7, #4]
 8014c5a:	2005      	movs	r0, #5
 8014c5c:	f7f5 fb84 	bl	800a368 <memp_free>
}
 8014c60:	bf00      	nop
 8014c62:	3708      	adds	r7, #8
 8014c64:	46bd      	mov	sp, r7
 8014c66:	bd80      	pop	{r7, pc}
 8014c68:	0801ac80 	.word	0x0801ac80
 8014c6c:	0801ae38 	.word	0x0801ae38
 8014c70:	0801acc8 	.word	0x0801acc8

08014c74 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014c74:	b580      	push	{r7, lr}
 8014c76:	b084      	sub	sp, #16
 8014c78:	af00      	add	r7, sp, #0
 8014c7a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d106      	bne.n	8014c94 <ipfrag_free_pbuf_custom+0x20>
 8014c86:	4b11      	ldr	r3, [pc, #68]	@ (8014ccc <ipfrag_free_pbuf_custom+0x58>)
 8014c88:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8014c8c:	4910      	ldr	r1, [pc, #64]	@ (8014cd0 <ipfrag_free_pbuf_custom+0x5c>)
 8014c8e:	4811      	ldr	r0, [pc, #68]	@ (8014cd4 <ipfrag_free_pbuf_custom+0x60>)
 8014c90:	f000 fbaa 	bl	80153e8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014c94:	68fa      	ldr	r2, [r7, #12]
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	429a      	cmp	r2, r3
 8014c9a:	d006      	beq.n	8014caa <ipfrag_free_pbuf_custom+0x36>
 8014c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8014ccc <ipfrag_free_pbuf_custom+0x58>)
 8014c9e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8014ca2:	490d      	ldr	r1, [pc, #52]	@ (8014cd8 <ipfrag_free_pbuf_custom+0x64>)
 8014ca4:	480b      	ldr	r0, [pc, #44]	@ (8014cd4 <ipfrag_free_pbuf_custom+0x60>)
 8014ca6:	f000 fb9f 	bl	80153e8 <iprintf>
  if (pcr->original != NULL) {
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	695b      	ldr	r3, [r3, #20]
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d004      	beq.n	8014cbc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	695b      	ldr	r3, [r3, #20]
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	f7f6 fa18 	bl	800b0ec <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014cbc:	68f8      	ldr	r0, [r7, #12]
 8014cbe:	f7ff ffbd 	bl	8014c3c <ip_frag_free_pbuf_custom_ref>
}
 8014cc2:	bf00      	nop
 8014cc4:	3710      	adds	r7, #16
 8014cc6:	46bd      	mov	sp, r7
 8014cc8:	bd80      	pop	{r7, pc}
 8014cca:	bf00      	nop
 8014ccc:	0801ac80 	.word	0x0801ac80
 8014cd0:	0801ae44 	.word	0x0801ae44
 8014cd4:	0801acc8 	.word	0x0801acc8
 8014cd8:	0801ae50 	.word	0x0801ae50

08014cdc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014cdc:	b580      	push	{r7, lr}
 8014cde:	b094      	sub	sp, #80	@ 0x50
 8014ce0:	af02      	add	r7, sp, #8
 8014ce2:	60f8      	str	r0, [r7, #12]
 8014ce4:	60b9      	str	r1, [r7, #8]
 8014ce6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014ce8:	2300      	movs	r3, #0
 8014cea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014cee:	68bb      	ldr	r3, [r7, #8]
 8014cf0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014cf2:	3b14      	subs	r3, #20
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	da00      	bge.n	8014cfa <ip4_frag+0x1e>
 8014cf8:	3307      	adds	r3, #7
 8014cfa:	10db      	asrs	r3, r3, #3
 8014cfc:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8014cfe:	2314      	movs	r3, #20
 8014d00:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	685b      	ldr	r3, [r3, #4]
 8014d06:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8014d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014d0a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d0e:	781b      	ldrb	r3, [r3, #0]
 8014d10:	f003 030f 	and.w	r3, r3, #15
 8014d14:	b2db      	uxtb	r3, r3
 8014d16:	009b      	lsls	r3, r3, #2
 8014d18:	b2db      	uxtb	r3, r3
 8014d1a:	2b14      	cmp	r3, #20
 8014d1c:	d002      	beq.n	8014d24 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014d1e:	f06f 0305 	mvn.w	r3, #5
 8014d22:	e110      	b.n	8014f46 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	895b      	ldrh	r3, [r3, #10]
 8014d28:	2b13      	cmp	r3, #19
 8014d2a:	d809      	bhi.n	8014d40 <ip4_frag+0x64>
 8014d2c:	4b88      	ldr	r3, [pc, #544]	@ (8014f50 <ip4_frag+0x274>)
 8014d2e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8014d32:	4988      	ldr	r1, [pc, #544]	@ (8014f54 <ip4_frag+0x278>)
 8014d34:	4888      	ldr	r0, [pc, #544]	@ (8014f58 <ip4_frag+0x27c>)
 8014d36:	f000 fb57 	bl	80153e8 <iprintf>
 8014d3a:	f06f 0305 	mvn.w	r3, #5
 8014d3e:	e102      	b.n	8014f46 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d42:	88db      	ldrh	r3, [r3, #6]
 8014d44:	b29b      	uxth	r3, r3
 8014d46:	4618      	mov	r0, r3
 8014d48:	f7f4 fd5e 	bl	8009808 <lwip_htons>
 8014d4c:	4603      	mov	r3, r0
 8014d4e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8014d50:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014d52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014d56:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8014d5a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014d5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014d60:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	891b      	ldrh	r3, [r3, #8]
 8014d66:	3b14      	subs	r3, #20
 8014d68:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8014d6c:	e0e1      	b.n	8014f32 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014d6e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014d70:	00db      	lsls	r3, r3, #3
 8014d72:	b29b      	uxth	r3, r3
 8014d74:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014d78:	4293      	cmp	r3, r2
 8014d7a:	bf28      	it	cs
 8014d7c:	4613      	movcs	r3, r2
 8014d7e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014d80:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014d84:	2114      	movs	r1, #20
 8014d86:	200e      	movs	r0, #14
 8014d88:	f7f5 fe84 	bl	800aa94 <pbuf_alloc>
 8014d8c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8014d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	f000 80d5 	beq.w	8014f40 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d98:	895b      	ldrh	r3, [r3, #10]
 8014d9a:	2b13      	cmp	r3, #19
 8014d9c:	d806      	bhi.n	8014dac <ip4_frag+0xd0>
 8014d9e:	4b6c      	ldr	r3, [pc, #432]	@ (8014f50 <ip4_frag+0x274>)
 8014da0:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8014da4:	496d      	ldr	r1, [pc, #436]	@ (8014f5c <ip4_frag+0x280>)
 8014da6:	486c      	ldr	r0, [pc, #432]	@ (8014f58 <ip4_frag+0x27c>)
 8014da8:	f000 fb1e 	bl	80153e8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dae:	685b      	ldr	r3, [r3, #4]
 8014db0:	2214      	movs	r2, #20
 8014db2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014db4:	4618      	mov	r0, r3
 8014db6:	f000 fcec 	bl	8015792 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dbc:	685b      	ldr	r3, [r3, #4]
 8014dbe:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8014dc0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014dc2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8014dc6:	e064      	b.n	8014e92 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	895a      	ldrh	r2, [r3, #10]
 8014dcc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014dce:	1ad3      	subs	r3, r2, r3
 8014dd0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	895b      	ldrh	r3, [r3, #10]
 8014dd6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8014dd8:	429a      	cmp	r2, r3
 8014dda:	d906      	bls.n	8014dea <ip4_frag+0x10e>
 8014ddc:	4b5c      	ldr	r3, [pc, #368]	@ (8014f50 <ip4_frag+0x274>)
 8014dde:	f240 322d 	movw	r2, #813	@ 0x32d
 8014de2:	495f      	ldr	r1, [pc, #380]	@ (8014f60 <ip4_frag+0x284>)
 8014de4:	485c      	ldr	r0, [pc, #368]	@ (8014f58 <ip4_frag+0x27c>)
 8014de6:	f000 faff 	bl	80153e8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014dea:	8bfa      	ldrh	r2, [r7, #30]
 8014dec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014df0:	4293      	cmp	r3, r2
 8014df2:	bf28      	it	cs
 8014df4:	4613      	movcs	r3, r2
 8014df6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014dfa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d105      	bne.n	8014e0e <ip4_frag+0x132>
        poff = 0;
 8014e02:	2300      	movs	r3, #0
 8014e04:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	60fb      	str	r3, [r7, #12]
        continue;
 8014e0c:	e041      	b.n	8014e92 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014e0e:	f7ff ff0d 	bl	8014c2c <ip_frag_alloc_pbuf_custom_ref>
 8014e12:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014e14:	69bb      	ldr	r3, [r7, #24]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d103      	bne.n	8014e22 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014e1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014e1c:	f7f6 f966 	bl	800b0ec <pbuf_free>
        goto memerr;
 8014e20:	e08f      	b.n	8014f42 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014e22:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014e28:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014e2a:	4413      	add	r3, r2
 8014e2c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8014e30:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8014e34:	9201      	str	r2, [sp, #4]
 8014e36:	9300      	str	r3, [sp, #0]
 8014e38:	4603      	mov	r3, r0
 8014e3a:	2241      	movs	r2, #65	@ 0x41
 8014e3c:	2000      	movs	r0, #0
 8014e3e:	f7f5 ff73 	bl	800ad28 <pbuf_alloced_custom>
 8014e42:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014e44:	697b      	ldr	r3, [r7, #20]
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d106      	bne.n	8014e58 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8014e4a:	69b8      	ldr	r0, [r7, #24]
 8014e4c:	f7ff fef6 	bl	8014c3c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014e50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014e52:	f7f6 f94b 	bl	800b0ec <pbuf_free>
        goto memerr;
 8014e56:	e074      	b.n	8014f42 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8014e58:	68f8      	ldr	r0, [r7, #12]
 8014e5a:	f7f6 f9ff 	bl	800b25c <pbuf_ref>
      pcr->original = p;
 8014e5e:	69bb      	ldr	r3, [r7, #24]
 8014e60:	68fa      	ldr	r2, [r7, #12]
 8014e62:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014e64:	69bb      	ldr	r3, [r7, #24]
 8014e66:	4a3f      	ldr	r2, [pc, #252]	@ (8014f64 <ip4_frag+0x288>)
 8014e68:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8014e6a:	6979      	ldr	r1, [r7, #20]
 8014e6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014e6e:	f7f6 fa17 	bl	800b2a0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014e72:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8014e76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014e7a:	1ad3      	subs	r3, r2, r3
 8014e7c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8014e80:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d004      	beq.n	8014e92 <ip4_frag+0x1b6>
        poff = 0;
 8014e88:	2300      	movs	r3, #0
 8014e8a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014e92:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d196      	bne.n	8014dc8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8014e9a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8014e9c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014ea0:	4413      	add	r3, r2
 8014ea2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014ea4:	68bb      	ldr	r3, [r7, #8]
 8014ea6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014ea8:	f1a3 0213 	sub.w	r2, r3, #19
 8014eac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014eb0:	429a      	cmp	r2, r3
 8014eb2:	bfcc      	ite	gt
 8014eb4:	2301      	movgt	r3, #1
 8014eb6:	2300      	movle	r3, #0
 8014eb8:	b2db      	uxtb	r3, r3
 8014eba:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014ebc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8014ec0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014ec4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8014ec6:	6a3b      	ldr	r3, [r7, #32]
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d002      	beq.n	8014ed2 <ip4_frag+0x1f6>
 8014ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d003      	beq.n	8014eda <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014ed2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014ed4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8014ed8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014eda:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014edc:	4618      	mov	r0, r3
 8014ede:	f7f4 fc93 	bl	8009808 <lwip_htons>
 8014ee2:	4603      	mov	r3, r0
 8014ee4:	461a      	mov	r2, r3
 8014ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ee8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014eea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014eec:	3314      	adds	r3, #20
 8014eee:	b29b      	uxth	r3, r3
 8014ef0:	4618      	mov	r0, r3
 8014ef2:	f7f4 fc89 	bl	8009808 <lwip_htons>
 8014ef6:	4603      	mov	r3, r0
 8014ef8:	461a      	mov	r2, r3
 8014efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014efc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f00:	2200      	movs	r2, #0
 8014f02:	729a      	strb	r2, [r3, #10]
 8014f04:	2200      	movs	r2, #0
 8014f06:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014f08:	68bb      	ldr	r3, [r7, #8]
 8014f0a:	695b      	ldr	r3, [r3, #20]
 8014f0c:	687a      	ldr	r2, [r7, #4]
 8014f0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014f10:	68b8      	ldr	r0, [r7, #8]
 8014f12:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014f14:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014f16:	f7f6 f8e9 	bl	800b0ec <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014f1a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014f1e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014f20:	1ad3      	subs	r3, r2, r3
 8014f22:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8014f26:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8014f2a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014f2c:	4413      	add	r3, r2
 8014f2e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8014f32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	f47f af19 	bne.w	8014d6e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014f3c:	2300      	movs	r3, #0
 8014f3e:	e002      	b.n	8014f46 <ip4_frag+0x26a>
      goto memerr;
 8014f40:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014f42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8014f46:	4618      	mov	r0, r3
 8014f48:	3748      	adds	r7, #72	@ 0x48
 8014f4a:	46bd      	mov	sp, r7
 8014f4c:	bd80      	pop	{r7, pc}
 8014f4e:	bf00      	nop
 8014f50:	0801ac80 	.word	0x0801ac80
 8014f54:	0801ae5c 	.word	0x0801ae5c
 8014f58:	0801acc8 	.word	0x0801acc8
 8014f5c:	0801ae78 	.word	0x0801ae78
 8014f60:	0801ae98 	.word	0x0801ae98
 8014f64:	08014c75 	.word	0x08014c75

08014f68 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f6c:	b096      	sub	sp, #88	@ 0x58
 8014f6e:	af0a      	add	r7, sp, #40	@ 0x28
 8014f70:	61f8      	str	r0, [r7, #28]
 8014f72:	61b9      	str	r1, [r7, #24]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014f74:	230e      	movs	r3, #14
 8014f76:	85fb      	strh	r3, [r7, #46]	@ 0x2e
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014f78:	69fb      	ldr	r3, [r7, #28]
 8014f7a:	895b      	ldrh	r3, [r3, #10]
 8014f7c:	2b0e      	cmp	r3, #14
 8014f7e:	f240 80c8 	bls.w	8015112 <ethernet_input+0x1aa>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014f82:	69fb      	ldr	r3, [r7, #28]
 8014f84:	7bdb      	ldrb	r3, [r3, #15]
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d106      	bne.n	8014f98 <ethernet_input+0x30>
    p->if_idx = netif_get_index(netif);
 8014f8a:	69bb      	ldr	r3, [r7, #24]
 8014f8c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014f90:	3301      	adds	r3, #1
 8014f92:	b2da      	uxtb	r2, r3
 8014f94:	69fb      	ldr	r3, [r7, #28]
 8014f96:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014f98:	69fb      	ldr	r3, [r7, #28]
 8014f9a:	685b      	ldr	r3, [r3, #4]
 8014f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
 8014f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fa0:	781b      	ldrb	r3, [r3, #0]
 8014fa2:	4698      	mov	r8, r3
 8014fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fa6:	785b      	ldrb	r3, [r3, #1]
 8014fa8:	4699      	mov	r9, r3
 8014faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fac:	789b      	ldrb	r3, [r3, #2]
 8014fae:	469a      	mov	sl, r3
 8014fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fb2:	78db      	ldrb	r3, [r3, #3]
 8014fb4:	461c      	mov	r4, r3
 8014fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fb8:	791b      	ldrb	r3, [r3, #4]
 8014fba:	461d      	mov	r5, r3
 8014fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fbe:	795b      	ldrb	r3, [r3, #5]
 8014fc0:	461e      	mov	r6, r3
 8014fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fc4:	799b      	ldrb	r3, [r3, #6]
 8014fc6:	617b      	str	r3, [r7, #20]
 8014fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fca:	79db      	ldrb	r3, [r3, #7]
 8014fcc:	613b      	str	r3, [r7, #16]
 8014fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fd0:	7a1b      	ldrb	r3, [r3, #8]
 8014fd2:	60fb      	str	r3, [r7, #12]
 8014fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fd6:	7a5b      	ldrb	r3, [r3, #9]
 8014fd8:	60bb      	str	r3, [r7, #8]
 8014fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fdc:	7a9b      	ldrb	r3, [r3, #10]
 8014fde:	607b      	str	r3, [r7, #4]
 8014fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fe2:	7adb      	ldrb	r3, [r3, #11]
 8014fe4:	603b      	str	r3, [r7, #0]
 8014fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fe8:	899b      	ldrh	r3, [r3, #12]
 8014fea:	b29b      	uxth	r3, r3
 8014fec:	4618      	mov	r0, r3
 8014fee:	f7f4 fc0b 	bl	8009808 <lwip_htons>
 8014ff2:	4603      	mov	r3, r0
 8014ff4:	9309      	str	r3, [sp, #36]	@ 0x24
 8014ff6:	683a      	ldr	r2, [r7, #0]
 8014ff8:	9208      	str	r2, [sp, #32]
 8014ffa:	687a      	ldr	r2, [r7, #4]
 8014ffc:	9207      	str	r2, [sp, #28]
 8014ffe:	68ba      	ldr	r2, [r7, #8]
 8015000:	9206      	str	r2, [sp, #24]
 8015002:	68fa      	ldr	r2, [r7, #12]
 8015004:	9205      	str	r2, [sp, #20]
 8015006:	693a      	ldr	r2, [r7, #16]
 8015008:	9204      	str	r2, [sp, #16]
 801500a:	697b      	ldr	r3, [r7, #20]
 801500c:	9303      	str	r3, [sp, #12]
 801500e:	9602      	str	r6, [sp, #8]
 8015010:	9501      	str	r5, [sp, #4]
 8015012:	9400      	str	r4, [sp, #0]
 8015014:	4653      	mov	r3, sl
 8015016:	464a      	mov	r2, r9
 8015018:	4641      	mov	r1, r8
 801501a:	4845      	ldr	r0, [pc, #276]	@ (8015130 <ethernet_input+0x1c8>)
 801501c:	f000 f9e4 	bl	80153e8 <iprintf>
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015022:	7b1a      	ldrb	r2, [r3, #12]
 8015024:	7b5b      	ldrb	r3, [r3, #13]
 8015026:	021b      	lsls	r3, r3, #8
 8015028:	4313      	orrs	r3, r2
 801502a:	84fb      	strh	r3, [r7, #38]	@ 0x26

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801502c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801502e:	781b      	ldrb	r3, [r3, #0]
 8015030:	f003 0301 	and.w	r3, r3, #1
 8015034:	2b00      	cmp	r3, #0
 8015036:	d023      	beq.n	8015080 <ethernet_input+0x118>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801503a:	781b      	ldrb	r3, [r3, #0]
 801503c:	2b01      	cmp	r3, #1
 801503e:	d10f      	bne.n	8015060 <ethernet_input+0xf8>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015042:	785b      	ldrb	r3, [r3, #1]
 8015044:	2b00      	cmp	r3, #0
 8015046:	d11b      	bne.n	8015080 <ethernet_input+0x118>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801504a:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801504c:	2b5e      	cmp	r3, #94	@ 0x5e
 801504e:	d117      	bne.n	8015080 <ethernet_input+0x118>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015050:	69fb      	ldr	r3, [r7, #28]
 8015052:	7b5b      	ldrb	r3, [r3, #13]
 8015054:	f043 0310 	orr.w	r3, r3, #16
 8015058:	b2da      	uxtb	r2, r3
 801505a:	69fb      	ldr	r3, [r7, #28]
 801505c:	735a      	strb	r2, [r3, #13]
 801505e:	e00f      	b.n	8015080 <ethernet_input+0x118>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015062:	2206      	movs	r2, #6
 8015064:	4933      	ldr	r1, [pc, #204]	@ (8015134 <ethernet_input+0x1cc>)
 8015066:	4618      	mov	r0, r3
 8015068:	f000 fb0e 	bl	8015688 <memcmp>
 801506c:	4603      	mov	r3, r0
 801506e:	2b00      	cmp	r3, #0
 8015070:	d106      	bne.n	8015080 <ethernet_input+0x118>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015072:	69fb      	ldr	r3, [r7, #28]
 8015074:	7b5b      	ldrb	r3, [r3, #13]
 8015076:	f043 0308 	orr.w	r3, r3, #8
 801507a:	b2da      	uxtb	r2, r3
 801507c:	69fb      	ldr	r3, [r7, #28]
 801507e:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8015080:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015082:	2b08      	cmp	r3, #8
 8015084:	d003      	beq.n	801508e <ethernet_input+0x126>
 8015086:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801508a:	d020      	beq.n	80150ce <ethernet_input+0x166>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801508c:	e046      	b.n	801511c <ethernet_input+0x1b4>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801508e:	69bb      	ldr	r3, [r7, #24]
 8015090:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015094:	f003 0308 	and.w	r3, r3, #8
 8015098:	2b00      	cmp	r3, #0
 801509a:	d03c      	beq.n	8015116 <ethernet_input+0x1ae>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801509c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801509e:	4619      	mov	r1, r3
 80150a0:	69f8      	ldr	r0, [r7, #28]
 80150a2:	f7f5 ff95 	bl	800afd0 <pbuf_remove_header>
 80150a6:	4603      	mov	r3, r0
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d00b      	beq.n	80150c4 <ethernet_input+0x15c>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 80150ac:	69fb      	ldr	r3, [r7, #28]
 80150ae:	891b      	ldrh	r3, [r3, #8]
 80150b0:	4619      	mov	r1, r3
 80150b2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80150b4:	461a      	mov	r2, r3
 80150b6:	4820      	ldr	r0, [pc, #128]	@ (8015138 <ethernet_input+0x1d0>)
 80150b8:	f000 f996 	bl	80153e8 <iprintf>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
 80150bc:	481f      	ldr	r0, [pc, #124]	@ (801513c <ethernet_input+0x1d4>)
 80150be:	f000 f993 	bl	80153e8 <iprintf>
        goto free_and_return;
 80150c2:	e02b      	b.n	801511c <ethernet_input+0x1b4>
        ip4_input(p, netif);
 80150c4:	69b9      	ldr	r1, [r7, #24]
 80150c6:	69f8      	ldr	r0, [r7, #28]
 80150c8:	f7fe fd5c 	bl	8013b84 <ip4_input>
      break;
 80150cc:	e01f      	b.n	801510e <ethernet_input+0x1a6>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80150ce:	69bb      	ldr	r3, [r7, #24]
 80150d0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80150d4:	f003 0308 	and.w	r3, r3, #8
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d01e      	beq.n	801511a <ethernet_input+0x1b2>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80150dc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80150de:	4619      	mov	r1, r3
 80150e0:	69f8      	ldr	r0, [r7, #28]
 80150e2:	f7f5 ff75 	bl	800afd0 <pbuf_remove_header>
 80150e6:	4603      	mov	r3, r0
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d00b      	beq.n	8015104 <ethernet_input+0x19c>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 80150ec:	69fb      	ldr	r3, [r7, #28]
 80150ee:	891b      	ldrh	r3, [r3, #8]
 80150f0:	4619      	mov	r1, r3
 80150f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80150f4:	461a      	mov	r2, r3
 80150f6:	4812      	ldr	r0, [pc, #72]	@ (8015140 <ethernet_input+0x1d8>)
 80150f8:	f000 f976 	bl	80153e8 <iprintf>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
 80150fc:	480f      	ldr	r0, [pc, #60]	@ (801513c <ethernet_input+0x1d4>)
 80150fe:	f000 f973 	bl	80153e8 <iprintf>
        goto free_and_return;
 8015102:	e00b      	b.n	801511c <ethernet_input+0x1b4>
        etharp_input(p, netif);
 8015104:	69b9      	ldr	r1, [r7, #24]
 8015106:	69f8      	ldr	r0, [r7, #28]
 8015108:	f7fd fd80 	bl	8012c0c <etharp_input>
      break;
 801510c:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801510e:	2300      	movs	r3, #0
 8015110:	e008      	b.n	8015124 <ethernet_input+0x1bc>
    goto free_and_return;
 8015112:	bf00      	nop
 8015114:	e002      	b.n	801511c <ethernet_input+0x1b4>
        goto free_and_return;
 8015116:	bf00      	nop
 8015118:	e000      	b.n	801511c <ethernet_input+0x1b4>
        goto free_and_return;
 801511a:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801511c:	69f8      	ldr	r0, [r7, #28]
 801511e:	f7f5 ffe5 	bl	800b0ec <pbuf_free>
  return ERR_OK;
 8015122:	2300      	movs	r3, #0
}
 8015124:	4618      	mov	r0, r3
 8015126:	3730      	adds	r7, #48	@ 0x30
 8015128:	46bd      	mov	sp, r7
 801512a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801512e:	bf00      	nop
 8015130:	0801aea8 	.word	0x0801aea8
 8015134:	0801b230 	.word	0x0801b230
 8015138:	0801af24 	.word	0x0801af24
 801513c:	0801af60 	.word	0x0801af60
 8015140:	0801af84 	.word	0x0801af84

08015144 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015144:	b580      	push	{r7, lr}
 8015146:	b086      	sub	sp, #24
 8015148:	af00      	add	r7, sp, #0
 801514a:	60f8      	str	r0, [r7, #12]
 801514c:	60b9      	str	r1, [r7, #8]
 801514e:	607a      	str	r2, [r7, #4]
 8015150:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015152:	8c3b      	ldrh	r3, [r7, #32]
 8015154:	4618      	mov	r0, r3
 8015156:	f7f4 fb57 	bl	8009808 <lwip_htons>
 801515a:	4603      	mov	r3, r0
 801515c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801515e:	210e      	movs	r1, #14
 8015160:	68b8      	ldr	r0, [r7, #8]
 8015162:	f7f5 ff25 	bl	800afb0 <pbuf_add_header>
 8015166:	4603      	mov	r3, r0
 8015168:	2b00      	cmp	r3, #0
 801516a:	d129      	bne.n	80151c0 <ethernet_output+0x7c>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801516c:	68bb      	ldr	r3, [r7, #8]
 801516e:	685b      	ldr	r3, [r3, #4]
 8015170:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015172:	693b      	ldr	r3, [r7, #16]
 8015174:	8afa      	ldrh	r2, [r7, #22]
 8015176:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015178:	693b      	ldr	r3, [r7, #16]
 801517a:	2206      	movs	r2, #6
 801517c:	6839      	ldr	r1, [r7, #0]
 801517e:	4618      	mov	r0, r3
 8015180:	f000 fb07 	bl	8015792 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015184:	693b      	ldr	r3, [r7, #16]
 8015186:	3306      	adds	r3, #6
 8015188:	2206      	movs	r2, #6
 801518a:	6879      	ldr	r1, [r7, #4]
 801518c:	4618      	mov	r0, r3
 801518e:	f000 fb00 	bl	8015792 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8015198:	2b06      	cmp	r3, #6
 801519a:	d006      	beq.n	80151aa <ethernet_output+0x66>
 801519c:	4b0d      	ldr	r3, [pc, #52]	@ (80151d4 <ethernet_output+0x90>)
 801519e:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80151a2:	490d      	ldr	r1, [pc, #52]	@ (80151d8 <ethernet_output+0x94>)
 80151a4:	480d      	ldr	r0, [pc, #52]	@ (80151dc <ethernet_output+0x98>)
 80151a6:	f000 f91f 	bl	80153e8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
 80151aa:	68b9      	ldr	r1, [r7, #8]
 80151ac:	480c      	ldr	r0, [pc, #48]	@ (80151e0 <ethernet_output+0x9c>)
 80151ae:	f000 f91b 	bl	80153e8 <iprintf>
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	699b      	ldr	r3, [r3, #24]
 80151b6:	68b9      	ldr	r1, [r7, #8]
 80151b8:	68f8      	ldr	r0, [r7, #12]
 80151ba:	4798      	blx	r3
 80151bc:	4603      	mov	r3, r0
 80151be:	e005      	b.n	80151cc <ethernet_output+0x88>
      goto pbuf_header_failed;
 80151c0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 80151c2:	4808      	ldr	r0, [pc, #32]	@ (80151e4 <ethernet_output+0xa0>)
 80151c4:	f000 f980 	bl	80154c8 <puts>
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80151c8:	f06f 0301 	mvn.w	r3, #1
}
 80151cc:	4618      	mov	r0, r3
 80151ce:	3718      	adds	r7, #24
 80151d0:	46bd      	mov	sp, r7
 80151d2:	bd80      	pop	{r7, pc}
 80151d4:	0801afc8 	.word	0x0801afc8
 80151d8:	0801b000 	.word	0x0801b000
 80151dc:	0801b034 	.word	0x0801b034
 80151e0:	0801b05c 	.word	0x0801b05c
 80151e4:	0801b080 	.word	0x0801b080

080151e8 <rand>:
 80151e8:	4b16      	ldr	r3, [pc, #88]	@ (8015244 <rand+0x5c>)
 80151ea:	b510      	push	{r4, lr}
 80151ec:	681c      	ldr	r4, [r3, #0]
 80151ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80151f0:	b9b3      	cbnz	r3, 8015220 <rand+0x38>
 80151f2:	2018      	movs	r0, #24
 80151f4:	f000 fb44 	bl	8015880 <malloc>
 80151f8:	4602      	mov	r2, r0
 80151fa:	6320      	str	r0, [r4, #48]	@ 0x30
 80151fc:	b920      	cbnz	r0, 8015208 <rand+0x20>
 80151fe:	4b12      	ldr	r3, [pc, #72]	@ (8015248 <rand+0x60>)
 8015200:	4812      	ldr	r0, [pc, #72]	@ (801524c <rand+0x64>)
 8015202:	2152      	movs	r1, #82	@ 0x52
 8015204:	f000 fad4 	bl	80157b0 <__assert_func>
 8015208:	4911      	ldr	r1, [pc, #68]	@ (8015250 <rand+0x68>)
 801520a:	4b12      	ldr	r3, [pc, #72]	@ (8015254 <rand+0x6c>)
 801520c:	e9c0 1300 	strd	r1, r3, [r0]
 8015210:	4b11      	ldr	r3, [pc, #68]	@ (8015258 <rand+0x70>)
 8015212:	6083      	str	r3, [r0, #8]
 8015214:	230b      	movs	r3, #11
 8015216:	8183      	strh	r3, [r0, #12]
 8015218:	2100      	movs	r1, #0
 801521a:	2001      	movs	r0, #1
 801521c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8015220:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015222:	480e      	ldr	r0, [pc, #56]	@ (801525c <rand+0x74>)
 8015224:	690b      	ldr	r3, [r1, #16]
 8015226:	694c      	ldr	r4, [r1, #20]
 8015228:	4a0d      	ldr	r2, [pc, #52]	@ (8015260 <rand+0x78>)
 801522a:	4358      	muls	r0, r3
 801522c:	fb02 0004 	mla	r0, r2, r4, r0
 8015230:	fba3 3202 	umull	r3, r2, r3, r2
 8015234:	3301      	adds	r3, #1
 8015236:	eb40 0002 	adc.w	r0, r0, r2
 801523a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801523e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8015242:	bd10      	pop	{r4, pc}
 8015244:	24000094 	.word	0x24000094
 8015248:	0801b23e 	.word	0x0801b23e
 801524c:	0801b255 	.word	0x0801b255
 8015250:	abcd330e 	.word	0xabcd330e
 8015254:	e66d1234 	.word	0xe66d1234
 8015258:	0005deec 	.word	0x0005deec
 801525c:	5851f42d 	.word	0x5851f42d
 8015260:	4c957f2d 	.word	0x4c957f2d

08015264 <std>:
 8015264:	2300      	movs	r3, #0
 8015266:	b510      	push	{r4, lr}
 8015268:	4604      	mov	r4, r0
 801526a:	e9c0 3300 	strd	r3, r3, [r0]
 801526e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015272:	6083      	str	r3, [r0, #8]
 8015274:	8181      	strh	r1, [r0, #12]
 8015276:	6643      	str	r3, [r0, #100]	@ 0x64
 8015278:	81c2      	strh	r2, [r0, #14]
 801527a:	6183      	str	r3, [r0, #24]
 801527c:	4619      	mov	r1, r3
 801527e:	2208      	movs	r2, #8
 8015280:	305c      	adds	r0, #92	@ 0x5c
 8015282:	f000 fa11 	bl	80156a8 <memset>
 8015286:	4b0d      	ldr	r3, [pc, #52]	@ (80152bc <std+0x58>)
 8015288:	6263      	str	r3, [r4, #36]	@ 0x24
 801528a:	4b0d      	ldr	r3, [pc, #52]	@ (80152c0 <std+0x5c>)
 801528c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801528e:	4b0d      	ldr	r3, [pc, #52]	@ (80152c4 <std+0x60>)
 8015290:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015292:	4b0d      	ldr	r3, [pc, #52]	@ (80152c8 <std+0x64>)
 8015294:	6323      	str	r3, [r4, #48]	@ 0x30
 8015296:	4b0d      	ldr	r3, [pc, #52]	@ (80152cc <std+0x68>)
 8015298:	6224      	str	r4, [r4, #32]
 801529a:	429c      	cmp	r4, r3
 801529c:	d006      	beq.n	80152ac <std+0x48>
 801529e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80152a2:	4294      	cmp	r4, r2
 80152a4:	d002      	beq.n	80152ac <std+0x48>
 80152a6:	33d0      	adds	r3, #208	@ 0xd0
 80152a8:	429c      	cmp	r4, r3
 80152aa:	d105      	bne.n	80152b8 <std+0x54>
 80152ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80152b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80152b4:	f000 ba6a 	b.w	801578c <__retarget_lock_init_recursive>
 80152b8:	bd10      	pop	{r4, pc}
 80152ba:	bf00      	nop
 80152bc:	080154d9 	.word	0x080154d9
 80152c0:	080154fb 	.word	0x080154fb
 80152c4:	08015533 	.word	0x08015533
 80152c8:	08015557 	.word	0x08015557
 80152cc:	24003434 	.word	0x24003434

080152d0 <stdio_exit_handler>:
 80152d0:	4a02      	ldr	r2, [pc, #8]	@ (80152dc <stdio_exit_handler+0xc>)
 80152d2:	4903      	ldr	r1, [pc, #12]	@ (80152e0 <stdio_exit_handler+0x10>)
 80152d4:	4803      	ldr	r0, [pc, #12]	@ (80152e4 <stdio_exit_handler+0x14>)
 80152d6:	f000 b869 	b.w	80153ac <_fwalk_sglue>
 80152da:	bf00      	nop
 80152dc:	24000088 	.word	0x24000088
 80152e0:	08016095 	.word	0x08016095
 80152e4:	24000098 	.word	0x24000098

080152e8 <cleanup_stdio>:
 80152e8:	6841      	ldr	r1, [r0, #4]
 80152ea:	4b0c      	ldr	r3, [pc, #48]	@ (801531c <cleanup_stdio+0x34>)
 80152ec:	4299      	cmp	r1, r3
 80152ee:	b510      	push	{r4, lr}
 80152f0:	4604      	mov	r4, r0
 80152f2:	d001      	beq.n	80152f8 <cleanup_stdio+0x10>
 80152f4:	f000 fece 	bl	8016094 <_fflush_r>
 80152f8:	68a1      	ldr	r1, [r4, #8]
 80152fa:	4b09      	ldr	r3, [pc, #36]	@ (8015320 <cleanup_stdio+0x38>)
 80152fc:	4299      	cmp	r1, r3
 80152fe:	d002      	beq.n	8015306 <cleanup_stdio+0x1e>
 8015300:	4620      	mov	r0, r4
 8015302:	f000 fec7 	bl	8016094 <_fflush_r>
 8015306:	68e1      	ldr	r1, [r4, #12]
 8015308:	4b06      	ldr	r3, [pc, #24]	@ (8015324 <cleanup_stdio+0x3c>)
 801530a:	4299      	cmp	r1, r3
 801530c:	d004      	beq.n	8015318 <cleanup_stdio+0x30>
 801530e:	4620      	mov	r0, r4
 8015310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015314:	f000 bebe 	b.w	8016094 <_fflush_r>
 8015318:	bd10      	pop	{r4, pc}
 801531a:	bf00      	nop
 801531c:	24003434 	.word	0x24003434
 8015320:	2400349c 	.word	0x2400349c
 8015324:	24003504 	.word	0x24003504

08015328 <global_stdio_init.part.0>:
 8015328:	b510      	push	{r4, lr}
 801532a:	4b0b      	ldr	r3, [pc, #44]	@ (8015358 <global_stdio_init.part.0+0x30>)
 801532c:	4c0b      	ldr	r4, [pc, #44]	@ (801535c <global_stdio_init.part.0+0x34>)
 801532e:	4a0c      	ldr	r2, [pc, #48]	@ (8015360 <global_stdio_init.part.0+0x38>)
 8015330:	601a      	str	r2, [r3, #0]
 8015332:	4620      	mov	r0, r4
 8015334:	2200      	movs	r2, #0
 8015336:	2104      	movs	r1, #4
 8015338:	f7ff ff94 	bl	8015264 <std>
 801533c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015340:	2201      	movs	r2, #1
 8015342:	2109      	movs	r1, #9
 8015344:	f7ff ff8e 	bl	8015264 <std>
 8015348:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801534c:	2202      	movs	r2, #2
 801534e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015352:	2112      	movs	r1, #18
 8015354:	f7ff bf86 	b.w	8015264 <std>
 8015358:	2400356c 	.word	0x2400356c
 801535c:	24003434 	.word	0x24003434
 8015360:	080152d1 	.word	0x080152d1

08015364 <__sfp_lock_acquire>:
 8015364:	4801      	ldr	r0, [pc, #4]	@ (801536c <__sfp_lock_acquire+0x8>)
 8015366:	f000 ba12 	b.w	801578e <__retarget_lock_acquire_recursive>
 801536a:	bf00      	nop
 801536c:	24003575 	.word	0x24003575

08015370 <__sfp_lock_release>:
 8015370:	4801      	ldr	r0, [pc, #4]	@ (8015378 <__sfp_lock_release+0x8>)
 8015372:	f000 ba0d 	b.w	8015790 <__retarget_lock_release_recursive>
 8015376:	bf00      	nop
 8015378:	24003575 	.word	0x24003575

0801537c <__sinit>:
 801537c:	b510      	push	{r4, lr}
 801537e:	4604      	mov	r4, r0
 8015380:	f7ff fff0 	bl	8015364 <__sfp_lock_acquire>
 8015384:	6a23      	ldr	r3, [r4, #32]
 8015386:	b11b      	cbz	r3, 8015390 <__sinit+0x14>
 8015388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801538c:	f7ff bff0 	b.w	8015370 <__sfp_lock_release>
 8015390:	4b04      	ldr	r3, [pc, #16]	@ (80153a4 <__sinit+0x28>)
 8015392:	6223      	str	r3, [r4, #32]
 8015394:	4b04      	ldr	r3, [pc, #16]	@ (80153a8 <__sinit+0x2c>)
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	2b00      	cmp	r3, #0
 801539a:	d1f5      	bne.n	8015388 <__sinit+0xc>
 801539c:	f7ff ffc4 	bl	8015328 <global_stdio_init.part.0>
 80153a0:	e7f2      	b.n	8015388 <__sinit+0xc>
 80153a2:	bf00      	nop
 80153a4:	080152e9 	.word	0x080152e9
 80153a8:	2400356c 	.word	0x2400356c

080153ac <_fwalk_sglue>:
 80153ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80153b0:	4607      	mov	r7, r0
 80153b2:	4688      	mov	r8, r1
 80153b4:	4614      	mov	r4, r2
 80153b6:	2600      	movs	r6, #0
 80153b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80153bc:	f1b9 0901 	subs.w	r9, r9, #1
 80153c0:	d505      	bpl.n	80153ce <_fwalk_sglue+0x22>
 80153c2:	6824      	ldr	r4, [r4, #0]
 80153c4:	2c00      	cmp	r4, #0
 80153c6:	d1f7      	bne.n	80153b8 <_fwalk_sglue+0xc>
 80153c8:	4630      	mov	r0, r6
 80153ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80153ce:	89ab      	ldrh	r3, [r5, #12]
 80153d0:	2b01      	cmp	r3, #1
 80153d2:	d907      	bls.n	80153e4 <_fwalk_sglue+0x38>
 80153d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80153d8:	3301      	adds	r3, #1
 80153da:	d003      	beq.n	80153e4 <_fwalk_sglue+0x38>
 80153dc:	4629      	mov	r1, r5
 80153de:	4638      	mov	r0, r7
 80153e0:	47c0      	blx	r8
 80153e2:	4306      	orrs	r6, r0
 80153e4:	3568      	adds	r5, #104	@ 0x68
 80153e6:	e7e9      	b.n	80153bc <_fwalk_sglue+0x10>

080153e8 <iprintf>:
 80153e8:	b40f      	push	{r0, r1, r2, r3}
 80153ea:	b507      	push	{r0, r1, r2, lr}
 80153ec:	4906      	ldr	r1, [pc, #24]	@ (8015408 <iprintf+0x20>)
 80153ee:	ab04      	add	r3, sp, #16
 80153f0:	6808      	ldr	r0, [r1, #0]
 80153f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80153f6:	6881      	ldr	r1, [r0, #8]
 80153f8:	9301      	str	r3, [sp, #4]
 80153fa:	f000 fb21 	bl	8015a40 <_vfiprintf_r>
 80153fe:	b003      	add	sp, #12
 8015400:	f85d eb04 	ldr.w	lr, [sp], #4
 8015404:	b004      	add	sp, #16
 8015406:	4770      	bx	lr
 8015408:	24000094 	.word	0x24000094

0801540c <putchar>:
 801540c:	4b02      	ldr	r3, [pc, #8]	@ (8015418 <putchar+0xc>)
 801540e:	4601      	mov	r1, r0
 8015410:	6818      	ldr	r0, [r3, #0]
 8015412:	6882      	ldr	r2, [r0, #8]
 8015414:	f000 beda 	b.w	80161cc <_putc_r>
 8015418:	24000094 	.word	0x24000094

0801541c <_puts_r>:
 801541c:	6a03      	ldr	r3, [r0, #32]
 801541e:	b570      	push	{r4, r5, r6, lr}
 8015420:	6884      	ldr	r4, [r0, #8]
 8015422:	4605      	mov	r5, r0
 8015424:	460e      	mov	r6, r1
 8015426:	b90b      	cbnz	r3, 801542c <_puts_r+0x10>
 8015428:	f7ff ffa8 	bl	801537c <__sinit>
 801542c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801542e:	07db      	lsls	r3, r3, #31
 8015430:	d405      	bmi.n	801543e <_puts_r+0x22>
 8015432:	89a3      	ldrh	r3, [r4, #12]
 8015434:	0598      	lsls	r0, r3, #22
 8015436:	d402      	bmi.n	801543e <_puts_r+0x22>
 8015438:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801543a:	f000 f9a8 	bl	801578e <__retarget_lock_acquire_recursive>
 801543e:	89a3      	ldrh	r3, [r4, #12]
 8015440:	0719      	lsls	r1, r3, #28
 8015442:	d502      	bpl.n	801544a <_puts_r+0x2e>
 8015444:	6923      	ldr	r3, [r4, #16]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d135      	bne.n	80154b6 <_puts_r+0x9a>
 801544a:	4621      	mov	r1, r4
 801544c:	4628      	mov	r0, r5
 801544e:	f000 f8c5 	bl	80155dc <__swsetup_r>
 8015452:	b380      	cbz	r0, 80154b6 <_puts_r+0x9a>
 8015454:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8015458:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801545a:	07da      	lsls	r2, r3, #31
 801545c:	d405      	bmi.n	801546a <_puts_r+0x4e>
 801545e:	89a3      	ldrh	r3, [r4, #12]
 8015460:	059b      	lsls	r3, r3, #22
 8015462:	d402      	bmi.n	801546a <_puts_r+0x4e>
 8015464:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015466:	f000 f993 	bl	8015790 <__retarget_lock_release_recursive>
 801546a:	4628      	mov	r0, r5
 801546c:	bd70      	pop	{r4, r5, r6, pc}
 801546e:	2b00      	cmp	r3, #0
 8015470:	da04      	bge.n	801547c <_puts_r+0x60>
 8015472:	69a2      	ldr	r2, [r4, #24]
 8015474:	429a      	cmp	r2, r3
 8015476:	dc17      	bgt.n	80154a8 <_puts_r+0x8c>
 8015478:	290a      	cmp	r1, #10
 801547a:	d015      	beq.n	80154a8 <_puts_r+0x8c>
 801547c:	6823      	ldr	r3, [r4, #0]
 801547e:	1c5a      	adds	r2, r3, #1
 8015480:	6022      	str	r2, [r4, #0]
 8015482:	7019      	strb	r1, [r3, #0]
 8015484:	68a3      	ldr	r3, [r4, #8]
 8015486:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801548a:	3b01      	subs	r3, #1
 801548c:	60a3      	str	r3, [r4, #8]
 801548e:	2900      	cmp	r1, #0
 8015490:	d1ed      	bne.n	801546e <_puts_r+0x52>
 8015492:	2b00      	cmp	r3, #0
 8015494:	da11      	bge.n	80154ba <_puts_r+0x9e>
 8015496:	4622      	mov	r2, r4
 8015498:	210a      	movs	r1, #10
 801549a:	4628      	mov	r0, r5
 801549c:	f000 f85f 	bl	801555e <__swbuf_r>
 80154a0:	3001      	adds	r0, #1
 80154a2:	d0d7      	beq.n	8015454 <_puts_r+0x38>
 80154a4:	250a      	movs	r5, #10
 80154a6:	e7d7      	b.n	8015458 <_puts_r+0x3c>
 80154a8:	4622      	mov	r2, r4
 80154aa:	4628      	mov	r0, r5
 80154ac:	f000 f857 	bl	801555e <__swbuf_r>
 80154b0:	3001      	adds	r0, #1
 80154b2:	d1e7      	bne.n	8015484 <_puts_r+0x68>
 80154b4:	e7ce      	b.n	8015454 <_puts_r+0x38>
 80154b6:	3e01      	subs	r6, #1
 80154b8:	e7e4      	b.n	8015484 <_puts_r+0x68>
 80154ba:	6823      	ldr	r3, [r4, #0]
 80154bc:	1c5a      	adds	r2, r3, #1
 80154be:	6022      	str	r2, [r4, #0]
 80154c0:	220a      	movs	r2, #10
 80154c2:	701a      	strb	r2, [r3, #0]
 80154c4:	e7ee      	b.n	80154a4 <_puts_r+0x88>
	...

080154c8 <puts>:
 80154c8:	4b02      	ldr	r3, [pc, #8]	@ (80154d4 <puts+0xc>)
 80154ca:	4601      	mov	r1, r0
 80154cc:	6818      	ldr	r0, [r3, #0]
 80154ce:	f7ff bfa5 	b.w	801541c <_puts_r>
 80154d2:	bf00      	nop
 80154d4:	24000094 	.word	0x24000094

080154d8 <__sread>:
 80154d8:	b510      	push	{r4, lr}
 80154da:	460c      	mov	r4, r1
 80154dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154e0:	f000 f90c 	bl	80156fc <_read_r>
 80154e4:	2800      	cmp	r0, #0
 80154e6:	bfab      	itete	ge
 80154e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80154ea:	89a3      	ldrhlt	r3, [r4, #12]
 80154ec:	181b      	addge	r3, r3, r0
 80154ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80154f2:	bfac      	ite	ge
 80154f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80154f6:	81a3      	strhlt	r3, [r4, #12]
 80154f8:	bd10      	pop	{r4, pc}

080154fa <__swrite>:
 80154fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154fe:	461f      	mov	r7, r3
 8015500:	898b      	ldrh	r3, [r1, #12]
 8015502:	05db      	lsls	r3, r3, #23
 8015504:	4605      	mov	r5, r0
 8015506:	460c      	mov	r4, r1
 8015508:	4616      	mov	r6, r2
 801550a:	d505      	bpl.n	8015518 <__swrite+0x1e>
 801550c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015510:	2302      	movs	r3, #2
 8015512:	2200      	movs	r2, #0
 8015514:	f000 f8e0 	bl	80156d8 <_lseek_r>
 8015518:	89a3      	ldrh	r3, [r4, #12]
 801551a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801551e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015522:	81a3      	strh	r3, [r4, #12]
 8015524:	4632      	mov	r2, r6
 8015526:	463b      	mov	r3, r7
 8015528:	4628      	mov	r0, r5
 801552a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801552e:	f000 b8f7 	b.w	8015720 <_write_r>

08015532 <__sseek>:
 8015532:	b510      	push	{r4, lr}
 8015534:	460c      	mov	r4, r1
 8015536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801553a:	f000 f8cd 	bl	80156d8 <_lseek_r>
 801553e:	1c43      	adds	r3, r0, #1
 8015540:	89a3      	ldrh	r3, [r4, #12]
 8015542:	bf15      	itete	ne
 8015544:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015546:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801554a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801554e:	81a3      	strheq	r3, [r4, #12]
 8015550:	bf18      	it	ne
 8015552:	81a3      	strhne	r3, [r4, #12]
 8015554:	bd10      	pop	{r4, pc}

08015556 <__sclose>:
 8015556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801555a:	f000 b8ad 	b.w	80156b8 <_close_r>

0801555e <__swbuf_r>:
 801555e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015560:	460e      	mov	r6, r1
 8015562:	4614      	mov	r4, r2
 8015564:	4605      	mov	r5, r0
 8015566:	b118      	cbz	r0, 8015570 <__swbuf_r+0x12>
 8015568:	6a03      	ldr	r3, [r0, #32]
 801556a:	b90b      	cbnz	r3, 8015570 <__swbuf_r+0x12>
 801556c:	f7ff ff06 	bl	801537c <__sinit>
 8015570:	69a3      	ldr	r3, [r4, #24]
 8015572:	60a3      	str	r3, [r4, #8]
 8015574:	89a3      	ldrh	r3, [r4, #12]
 8015576:	071a      	lsls	r2, r3, #28
 8015578:	d501      	bpl.n	801557e <__swbuf_r+0x20>
 801557a:	6923      	ldr	r3, [r4, #16]
 801557c:	b943      	cbnz	r3, 8015590 <__swbuf_r+0x32>
 801557e:	4621      	mov	r1, r4
 8015580:	4628      	mov	r0, r5
 8015582:	f000 f82b 	bl	80155dc <__swsetup_r>
 8015586:	b118      	cbz	r0, 8015590 <__swbuf_r+0x32>
 8015588:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801558c:	4638      	mov	r0, r7
 801558e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015590:	6823      	ldr	r3, [r4, #0]
 8015592:	6922      	ldr	r2, [r4, #16]
 8015594:	1a98      	subs	r0, r3, r2
 8015596:	6963      	ldr	r3, [r4, #20]
 8015598:	b2f6      	uxtb	r6, r6
 801559a:	4283      	cmp	r3, r0
 801559c:	4637      	mov	r7, r6
 801559e:	dc05      	bgt.n	80155ac <__swbuf_r+0x4e>
 80155a0:	4621      	mov	r1, r4
 80155a2:	4628      	mov	r0, r5
 80155a4:	f000 fd76 	bl	8016094 <_fflush_r>
 80155a8:	2800      	cmp	r0, #0
 80155aa:	d1ed      	bne.n	8015588 <__swbuf_r+0x2a>
 80155ac:	68a3      	ldr	r3, [r4, #8]
 80155ae:	3b01      	subs	r3, #1
 80155b0:	60a3      	str	r3, [r4, #8]
 80155b2:	6823      	ldr	r3, [r4, #0]
 80155b4:	1c5a      	adds	r2, r3, #1
 80155b6:	6022      	str	r2, [r4, #0]
 80155b8:	701e      	strb	r6, [r3, #0]
 80155ba:	6962      	ldr	r2, [r4, #20]
 80155bc:	1c43      	adds	r3, r0, #1
 80155be:	429a      	cmp	r2, r3
 80155c0:	d004      	beq.n	80155cc <__swbuf_r+0x6e>
 80155c2:	89a3      	ldrh	r3, [r4, #12]
 80155c4:	07db      	lsls	r3, r3, #31
 80155c6:	d5e1      	bpl.n	801558c <__swbuf_r+0x2e>
 80155c8:	2e0a      	cmp	r6, #10
 80155ca:	d1df      	bne.n	801558c <__swbuf_r+0x2e>
 80155cc:	4621      	mov	r1, r4
 80155ce:	4628      	mov	r0, r5
 80155d0:	f000 fd60 	bl	8016094 <_fflush_r>
 80155d4:	2800      	cmp	r0, #0
 80155d6:	d0d9      	beq.n	801558c <__swbuf_r+0x2e>
 80155d8:	e7d6      	b.n	8015588 <__swbuf_r+0x2a>
	...

080155dc <__swsetup_r>:
 80155dc:	b538      	push	{r3, r4, r5, lr}
 80155de:	4b29      	ldr	r3, [pc, #164]	@ (8015684 <__swsetup_r+0xa8>)
 80155e0:	4605      	mov	r5, r0
 80155e2:	6818      	ldr	r0, [r3, #0]
 80155e4:	460c      	mov	r4, r1
 80155e6:	b118      	cbz	r0, 80155f0 <__swsetup_r+0x14>
 80155e8:	6a03      	ldr	r3, [r0, #32]
 80155ea:	b90b      	cbnz	r3, 80155f0 <__swsetup_r+0x14>
 80155ec:	f7ff fec6 	bl	801537c <__sinit>
 80155f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80155f4:	0719      	lsls	r1, r3, #28
 80155f6:	d422      	bmi.n	801563e <__swsetup_r+0x62>
 80155f8:	06da      	lsls	r2, r3, #27
 80155fa:	d407      	bmi.n	801560c <__swsetup_r+0x30>
 80155fc:	2209      	movs	r2, #9
 80155fe:	602a      	str	r2, [r5, #0]
 8015600:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015604:	81a3      	strh	r3, [r4, #12]
 8015606:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801560a:	e033      	b.n	8015674 <__swsetup_r+0x98>
 801560c:	0758      	lsls	r0, r3, #29
 801560e:	d512      	bpl.n	8015636 <__swsetup_r+0x5a>
 8015610:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015612:	b141      	cbz	r1, 8015626 <__swsetup_r+0x4a>
 8015614:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015618:	4299      	cmp	r1, r3
 801561a:	d002      	beq.n	8015622 <__swsetup_r+0x46>
 801561c:	4628      	mov	r0, r5
 801561e:	f000 f8e5 	bl	80157ec <_free_r>
 8015622:	2300      	movs	r3, #0
 8015624:	6363      	str	r3, [r4, #52]	@ 0x34
 8015626:	89a3      	ldrh	r3, [r4, #12]
 8015628:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801562c:	81a3      	strh	r3, [r4, #12]
 801562e:	2300      	movs	r3, #0
 8015630:	6063      	str	r3, [r4, #4]
 8015632:	6923      	ldr	r3, [r4, #16]
 8015634:	6023      	str	r3, [r4, #0]
 8015636:	89a3      	ldrh	r3, [r4, #12]
 8015638:	f043 0308 	orr.w	r3, r3, #8
 801563c:	81a3      	strh	r3, [r4, #12]
 801563e:	6923      	ldr	r3, [r4, #16]
 8015640:	b94b      	cbnz	r3, 8015656 <__swsetup_r+0x7a>
 8015642:	89a3      	ldrh	r3, [r4, #12]
 8015644:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015648:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801564c:	d003      	beq.n	8015656 <__swsetup_r+0x7a>
 801564e:	4621      	mov	r1, r4
 8015650:	4628      	mov	r0, r5
 8015652:	f000 fd7f 	bl	8016154 <__smakebuf_r>
 8015656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801565a:	f013 0201 	ands.w	r2, r3, #1
 801565e:	d00a      	beq.n	8015676 <__swsetup_r+0x9a>
 8015660:	2200      	movs	r2, #0
 8015662:	60a2      	str	r2, [r4, #8]
 8015664:	6962      	ldr	r2, [r4, #20]
 8015666:	4252      	negs	r2, r2
 8015668:	61a2      	str	r2, [r4, #24]
 801566a:	6922      	ldr	r2, [r4, #16]
 801566c:	b942      	cbnz	r2, 8015680 <__swsetup_r+0xa4>
 801566e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015672:	d1c5      	bne.n	8015600 <__swsetup_r+0x24>
 8015674:	bd38      	pop	{r3, r4, r5, pc}
 8015676:	0799      	lsls	r1, r3, #30
 8015678:	bf58      	it	pl
 801567a:	6962      	ldrpl	r2, [r4, #20]
 801567c:	60a2      	str	r2, [r4, #8]
 801567e:	e7f4      	b.n	801566a <__swsetup_r+0x8e>
 8015680:	2000      	movs	r0, #0
 8015682:	e7f7      	b.n	8015674 <__swsetup_r+0x98>
 8015684:	24000094 	.word	0x24000094

08015688 <memcmp>:
 8015688:	b510      	push	{r4, lr}
 801568a:	3901      	subs	r1, #1
 801568c:	4402      	add	r2, r0
 801568e:	4290      	cmp	r0, r2
 8015690:	d101      	bne.n	8015696 <memcmp+0xe>
 8015692:	2000      	movs	r0, #0
 8015694:	e005      	b.n	80156a2 <memcmp+0x1a>
 8015696:	7803      	ldrb	r3, [r0, #0]
 8015698:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801569c:	42a3      	cmp	r3, r4
 801569e:	d001      	beq.n	80156a4 <memcmp+0x1c>
 80156a0:	1b18      	subs	r0, r3, r4
 80156a2:	bd10      	pop	{r4, pc}
 80156a4:	3001      	adds	r0, #1
 80156a6:	e7f2      	b.n	801568e <memcmp+0x6>

080156a8 <memset>:
 80156a8:	4402      	add	r2, r0
 80156aa:	4603      	mov	r3, r0
 80156ac:	4293      	cmp	r3, r2
 80156ae:	d100      	bne.n	80156b2 <memset+0xa>
 80156b0:	4770      	bx	lr
 80156b2:	f803 1b01 	strb.w	r1, [r3], #1
 80156b6:	e7f9      	b.n	80156ac <memset+0x4>

080156b8 <_close_r>:
 80156b8:	b538      	push	{r3, r4, r5, lr}
 80156ba:	4d06      	ldr	r5, [pc, #24]	@ (80156d4 <_close_r+0x1c>)
 80156bc:	2300      	movs	r3, #0
 80156be:	4604      	mov	r4, r0
 80156c0:	4608      	mov	r0, r1
 80156c2:	602b      	str	r3, [r5, #0]
 80156c4:	f7eb fb8a 	bl	8000ddc <_close>
 80156c8:	1c43      	adds	r3, r0, #1
 80156ca:	d102      	bne.n	80156d2 <_close_r+0x1a>
 80156cc:	682b      	ldr	r3, [r5, #0]
 80156ce:	b103      	cbz	r3, 80156d2 <_close_r+0x1a>
 80156d0:	6023      	str	r3, [r4, #0]
 80156d2:	bd38      	pop	{r3, r4, r5, pc}
 80156d4:	24003570 	.word	0x24003570

080156d8 <_lseek_r>:
 80156d8:	b538      	push	{r3, r4, r5, lr}
 80156da:	4d07      	ldr	r5, [pc, #28]	@ (80156f8 <_lseek_r+0x20>)
 80156dc:	4604      	mov	r4, r0
 80156de:	4608      	mov	r0, r1
 80156e0:	4611      	mov	r1, r2
 80156e2:	2200      	movs	r2, #0
 80156e4:	602a      	str	r2, [r5, #0]
 80156e6:	461a      	mov	r2, r3
 80156e8:	f7eb fb9f 	bl	8000e2a <_lseek>
 80156ec:	1c43      	adds	r3, r0, #1
 80156ee:	d102      	bne.n	80156f6 <_lseek_r+0x1e>
 80156f0:	682b      	ldr	r3, [r5, #0]
 80156f2:	b103      	cbz	r3, 80156f6 <_lseek_r+0x1e>
 80156f4:	6023      	str	r3, [r4, #0]
 80156f6:	bd38      	pop	{r3, r4, r5, pc}
 80156f8:	24003570 	.word	0x24003570

080156fc <_read_r>:
 80156fc:	b538      	push	{r3, r4, r5, lr}
 80156fe:	4d07      	ldr	r5, [pc, #28]	@ (801571c <_read_r+0x20>)
 8015700:	4604      	mov	r4, r0
 8015702:	4608      	mov	r0, r1
 8015704:	4611      	mov	r1, r2
 8015706:	2200      	movs	r2, #0
 8015708:	602a      	str	r2, [r5, #0]
 801570a:	461a      	mov	r2, r3
 801570c:	f7eb fb49 	bl	8000da2 <_read>
 8015710:	1c43      	adds	r3, r0, #1
 8015712:	d102      	bne.n	801571a <_read_r+0x1e>
 8015714:	682b      	ldr	r3, [r5, #0]
 8015716:	b103      	cbz	r3, 801571a <_read_r+0x1e>
 8015718:	6023      	str	r3, [r4, #0]
 801571a:	bd38      	pop	{r3, r4, r5, pc}
 801571c:	24003570 	.word	0x24003570

08015720 <_write_r>:
 8015720:	b538      	push	{r3, r4, r5, lr}
 8015722:	4d07      	ldr	r5, [pc, #28]	@ (8015740 <_write_r+0x20>)
 8015724:	4604      	mov	r4, r0
 8015726:	4608      	mov	r0, r1
 8015728:	4611      	mov	r1, r2
 801572a:	2200      	movs	r2, #0
 801572c:	602a      	str	r2, [r5, #0]
 801572e:	461a      	mov	r2, r3
 8015730:	f7eb f946 	bl	80009c0 <_write>
 8015734:	1c43      	adds	r3, r0, #1
 8015736:	d102      	bne.n	801573e <_write_r+0x1e>
 8015738:	682b      	ldr	r3, [r5, #0]
 801573a:	b103      	cbz	r3, 801573e <_write_r+0x1e>
 801573c:	6023      	str	r3, [r4, #0]
 801573e:	bd38      	pop	{r3, r4, r5, pc}
 8015740:	24003570 	.word	0x24003570

08015744 <__libc_init_array>:
 8015744:	b570      	push	{r4, r5, r6, lr}
 8015746:	4d0d      	ldr	r5, [pc, #52]	@ (801577c <__libc_init_array+0x38>)
 8015748:	4c0d      	ldr	r4, [pc, #52]	@ (8015780 <__libc_init_array+0x3c>)
 801574a:	1b64      	subs	r4, r4, r5
 801574c:	10a4      	asrs	r4, r4, #2
 801574e:	2600      	movs	r6, #0
 8015750:	42a6      	cmp	r6, r4
 8015752:	d109      	bne.n	8015768 <__libc_init_array+0x24>
 8015754:	4d0b      	ldr	r5, [pc, #44]	@ (8015784 <__libc_init_array+0x40>)
 8015756:	4c0c      	ldr	r4, [pc, #48]	@ (8015788 <__libc_init_array+0x44>)
 8015758:	f000 fdea 	bl	8016330 <_init>
 801575c:	1b64      	subs	r4, r4, r5
 801575e:	10a4      	asrs	r4, r4, #2
 8015760:	2600      	movs	r6, #0
 8015762:	42a6      	cmp	r6, r4
 8015764:	d105      	bne.n	8015772 <__libc_init_array+0x2e>
 8015766:	bd70      	pop	{r4, r5, r6, pc}
 8015768:	f855 3b04 	ldr.w	r3, [r5], #4
 801576c:	4798      	blx	r3
 801576e:	3601      	adds	r6, #1
 8015770:	e7ee      	b.n	8015750 <__libc_init_array+0xc>
 8015772:	f855 3b04 	ldr.w	r3, [r5], #4
 8015776:	4798      	blx	r3
 8015778:	3601      	adds	r6, #1
 801577a:	e7f2      	b.n	8015762 <__libc_init_array+0x1e>
 801577c:	0801b324 	.word	0x0801b324
 8015780:	0801b324 	.word	0x0801b324
 8015784:	0801b324 	.word	0x0801b324
 8015788:	0801b328 	.word	0x0801b328

0801578c <__retarget_lock_init_recursive>:
 801578c:	4770      	bx	lr

0801578e <__retarget_lock_acquire_recursive>:
 801578e:	4770      	bx	lr

08015790 <__retarget_lock_release_recursive>:
 8015790:	4770      	bx	lr

08015792 <memcpy>:
 8015792:	440a      	add	r2, r1
 8015794:	4291      	cmp	r1, r2
 8015796:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801579a:	d100      	bne.n	801579e <memcpy+0xc>
 801579c:	4770      	bx	lr
 801579e:	b510      	push	{r4, lr}
 80157a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80157a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80157a8:	4291      	cmp	r1, r2
 80157aa:	d1f9      	bne.n	80157a0 <memcpy+0xe>
 80157ac:	bd10      	pop	{r4, pc}
	...

080157b0 <__assert_func>:
 80157b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80157b2:	4614      	mov	r4, r2
 80157b4:	461a      	mov	r2, r3
 80157b6:	4b09      	ldr	r3, [pc, #36]	@ (80157dc <__assert_func+0x2c>)
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	4605      	mov	r5, r0
 80157bc:	68d8      	ldr	r0, [r3, #12]
 80157be:	b954      	cbnz	r4, 80157d6 <__assert_func+0x26>
 80157c0:	4b07      	ldr	r3, [pc, #28]	@ (80157e0 <__assert_func+0x30>)
 80157c2:	461c      	mov	r4, r3
 80157c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80157c8:	9100      	str	r1, [sp, #0]
 80157ca:	462b      	mov	r3, r5
 80157cc:	4905      	ldr	r1, [pc, #20]	@ (80157e4 <__assert_func+0x34>)
 80157ce:	f000 fc89 	bl	80160e4 <fiprintf>
 80157d2:	f000 fd61 	bl	8016298 <abort>
 80157d6:	4b04      	ldr	r3, [pc, #16]	@ (80157e8 <__assert_func+0x38>)
 80157d8:	e7f4      	b.n	80157c4 <__assert_func+0x14>
 80157da:	bf00      	nop
 80157dc:	24000094 	.word	0x24000094
 80157e0:	0801b2e8 	.word	0x0801b2e8
 80157e4:	0801b2ba 	.word	0x0801b2ba
 80157e8:	0801b2ad 	.word	0x0801b2ad

080157ec <_free_r>:
 80157ec:	b538      	push	{r3, r4, r5, lr}
 80157ee:	4605      	mov	r5, r0
 80157f0:	2900      	cmp	r1, #0
 80157f2:	d041      	beq.n	8015878 <_free_r+0x8c>
 80157f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80157f8:	1f0c      	subs	r4, r1, #4
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	bfb8      	it	lt
 80157fe:	18e4      	addlt	r4, r4, r3
 8015800:	f000 f8e8 	bl	80159d4 <__malloc_lock>
 8015804:	4a1d      	ldr	r2, [pc, #116]	@ (801587c <_free_r+0x90>)
 8015806:	6813      	ldr	r3, [r2, #0]
 8015808:	b933      	cbnz	r3, 8015818 <_free_r+0x2c>
 801580a:	6063      	str	r3, [r4, #4]
 801580c:	6014      	str	r4, [r2, #0]
 801580e:	4628      	mov	r0, r5
 8015810:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015814:	f000 b8e4 	b.w	80159e0 <__malloc_unlock>
 8015818:	42a3      	cmp	r3, r4
 801581a:	d908      	bls.n	801582e <_free_r+0x42>
 801581c:	6820      	ldr	r0, [r4, #0]
 801581e:	1821      	adds	r1, r4, r0
 8015820:	428b      	cmp	r3, r1
 8015822:	bf01      	itttt	eq
 8015824:	6819      	ldreq	r1, [r3, #0]
 8015826:	685b      	ldreq	r3, [r3, #4]
 8015828:	1809      	addeq	r1, r1, r0
 801582a:	6021      	streq	r1, [r4, #0]
 801582c:	e7ed      	b.n	801580a <_free_r+0x1e>
 801582e:	461a      	mov	r2, r3
 8015830:	685b      	ldr	r3, [r3, #4]
 8015832:	b10b      	cbz	r3, 8015838 <_free_r+0x4c>
 8015834:	42a3      	cmp	r3, r4
 8015836:	d9fa      	bls.n	801582e <_free_r+0x42>
 8015838:	6811      	ldr	r1, [r2, #0]
 801583a:	1850      	adds	r0, r2, r1
 801583c:	42a0      	cmp	r0, r4
 801583e:	d10b      	bne.n	8015858 <_free_r+0x6c>
 8015840:	6820      	ldr	r0, [r4, #0]
 8015842:	4401      	add	r1, r0
 8015844:	1850      	adds	r0, r2, r1
 8015846:	4283      	cmp	r3, r0
 8015848:	6011      	str	r1, [r2, #0]
 801584a:	d1e0      	bne.n	801580e <_free_r+0x22>
 801584c:	6818      	ldr	r0, [r3, #0]
 801584e:	685b      	ldr	r3, [r3, #4]
 8015850:	6053      	str	r3, [r2, #4]
 8015852:	4408      	add	r0, r1
 8015854:	6010      	str	r0, [r2, #0]
 8015856:	e7da      	b.n	801580e <_free_r+0x22>
 8015858:	d902      	bls.n	8015860 <_free_r+0x74>
 801585a:	230c      	movs	r3, #12
 801585c:	602b      	str	r3, [r5, #0]
 801585e:	e7d6      	b.n	801580e <_free_r+0x22>
 8015860:	6820      	ldr	r0, [r4, #0]
 8015862:	1821      	adds	r1, r4, r0
 8015864:	428b      	cmp	r3, r1
 8015866:	bf04      	itt	eq
 8015868:	6819      	ldreq	r1, [r3, #0]
 801586a:	685b      	ldreq	r3, [r3, #4]
 801586c:	6063      	str	r3, [r4, #4]
 801586e:	bf04      	itt	eq
 8015870:	1809      	addeq	r1, r1, r0
 8015872:	6021      	streq	r1, [r4, #0]
 8015874:	6054      	str	r4, [r2, #4]
 8015876:	e7ca      	b.n	801580e <_free_r+0x22>
 8015878:	bd38      	pop	{r3, r4, r5, pc}
 801587a:	bf00      	nop
 801587c:	2400357c 	.word	0x2400357c

08015880 <malloc>:
 8015880:	4b02      	ldr	r3, [pc, #8]	@ (801588c <malloc+0xc>)
 8015882:	4601      	mov	r1, r0
 8015884:	6818      	ldr	r0, [r3, #0]
 8015886:	f000 b825 	b.w	80158d4 <_malloc_r>
 801588a:	bf00      	nop
 801588c:	24000094 	.word	0x24000094

08015890 <sbrk_aligned>:
 8015890:	b570      	push	{r4, r5, r6, lr}
 8015892:	4e0f      	ldr	r6, [pc, #60]	@ (80158d0 <sbrk_aligned+0x40>)
 8015894:	460c      	mov	r4, r1
 8015896:	6831      	ldr	r1, [r6, #0]
 8015898:	4605      	mov	r5, r0
 801589a:	b911      	cbnz	r1, 80158a2 <sbrk_aligned+0x12>
 801589c:	f000 fcec 	bl	8016278 <_sbrk_r>
 80158a0:	6030      	str	r0, [r6, #0]
 80158a2:	4621      	mov	r1, r4
 80158a4:	4628      	mov	r0, r5
 80158a6:	f000 fce7 	bl	8016278 <_sbrk_r>
 80158aa:	1c43      	adds	r3, r0, #1
 80158ac:	d103      	bne.n	80158b6 <sbrk_aligned+0x26>
 80158ae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80158b2:	4620      	mov	r0, r4
 80158b4:	bd70      	pop	{r4, r5, r6, pc}
 80158b6:	1cc4      	adds	r4, r0, #3
 80158b8:	f024 0403 	bic.w	r4, r4, #3
 80158bc:	42a0      	cmp	r0, r4
 80158be:	d0f8      	beq.n	80158b2 <sbrk_aligned+0x22>
 80158c0:	1a21      	subs	r1, r4, r0
 80158c2:	4628      	mov	r0, r5
 80158c4:	f000 fcd8 	bl	8016278 <_sbrk_r>
 80158c8:	3001      	adds	r0, #1
 80158ca:	d1f2      	bne.n	80158b2 <sbrk_aligned+0x22>
 80158cc:	e7ef      	b.n	80158ae <sbrk_aligned+0x1e>
 80158ce:	bf00      	nop
 80158d0:	24003578 	.word	0x24003578

080158d4 <_malloc_r>:
 80158d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80158d8:	1ccd      	adds	r5, r1, #3
 80158da:	f025 0503 	bic.w	r5, r5, #3
 80158de:	3508      	adds	r5, #8
 80158e0:	2d0c      	cmp	r5, #12
 80158e2:	bf38      	it	cc
 80158e4:	250c      	movcc	r5, #12
 80158e6:	2d00      	cmp	r5, #0
 80158e8:	4606      	mov	r6, r0
 80158ea:	db01      	blt.n	80158f0 <_malloc_r+0x1c>
 80158ec:	42a9      	cmp	r1, r5
 80158ee:	d904      	bls.n	80158fa <_malloc_r+0x26>
 80158f0:	230c      	movs	r3, #12
 80158f2:	6033      	str	r3, [r6, #0]
 80158f4:	2000      	movs	r0, #0
 80158f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80158fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80159d0 <_malloc_r+0xfc>
 80158fe:	f000 f869 	bl	80159d4 <__malloc_lock>
 8015902:	f8d8 3000 	ldr.w	r3, [r8]
 8015906:	461c      	mov	r4, r3
 8015908:	bb44      	cbnz	r4, 801595c <_malloc_r+0x88>
 801590a:	4629      	mov	r1, r5
 801590c:	4630      	mov	r0, r6
 801590e:	f7ff ffbf 	bl	8015890 <sbrk_aligned>
 8015912:	1c43      	adds	r3, r0, #1
 8015914:	4604      	mov	r4, r0
 8015916:	d158      	bne.n	80159ca <_malloc_r+0xf6>
 8015918:	f8d8 4000 	ldr.w	r4, [r8]
 801591c:	4627      	mov	r7, r4
 801591e:	2f00      	cmp	r7, #0
 8015920:	d143      	bne.n	80159aa <_malloc_r+0xd6>
 8015922:	2c00      	cmp	r4, #0
 8015924:	d04b      	beq.n	80159be <_malloc_r+0xea>
 8015926:	6823      	ldr	r3, [r4, #0]
 8015928:	4639      	mov	r1, r7
 801592a:	4630      	mov	r0, r6
 801592c:	eb04 0903 	add.w	r9, r4, r3
 8015930:	f000 fca2 	bl	8016278 <_sbrk_r>
 8015934:	4581      	cmp	r9, r0
 8015936:	d142      	bne.n	80159be <_malloc_r+0xea>
 8015938:	6821      	ldr	r1, [r4, #0]
 801593a:	1a6d      	subs	r5, r5, r1
 801593c:	4629      	mov	r1, r5
 801593e:	4630      	mov	r0, r6
 8015940:	f7ff ffa6 	bl	8015890 <sbrk_aligned>
 8015944:	3001      	adds	r0, #1
 8015946:	d03a      	beq.n	80159be <_malloc_r+0xea>
 8015948:	6823      	ldr	r3, [r4, #0]
 801594a:	442b      	add	r3, r5
 801594c:	6023      	str	r3, [r4, #0]
 801594e:	f8d8 3000 	ldr.w	r3, [r8]
 8015952:	685a      	ldr	r2, [r3, #4]
 8015954:	bb62      	cbnz	r2, 80159b0 <_malloc_r+0xdc>
 8015956:	f8c8 7000 	str.w	r7, [r8]
 801595a:	e00f      	b.n	801597c <_malloc_r+0xa8>
 801595c:	6822      	ldr	r2, [r4, #0]
 801595e:	1b52      	subs	r2, r2, r5
 8015960:	d420      	bmi.n	80159a4 <_malloc_r+0xd0>
 8015962:	2a0b      	cmp	r2, #11
 8015964:	d917      	bls.n	8015996 <_malloc_r+0xc2>
 8015966:	1961      	adds	r1, r4, r5
 8015968:	42a3      	cmp	r3, r4
 801596a:	6025      	str	r5, [r4, #0]
 801596c:	bf18      	it	ne
 801596e:	6059      	strne	r1, [r3, #4]
 8015970:	6863      	ldr	r3, [r4, #4]
 8015972:	bf08      	it	eq
 8015974:	f8c8 1000 	streq.w	r1, [r8]
 8015978:	5162      	str	r2, [r4, r5]
 801597a:	604b      	str	r3, [r1, #4]
 801597c:	4630      	mov	r0, r6
 801597e:	f000 f82f 	bl	80159e0 <__malloc_unlock>
 8015982:	f104 000b 	add.w	r0, r4, #11
 8015986:	1d23      	adds	r3, r4, #4
 8015988:	f020 0007 	bic.w	r0, r0, #7
 801598c:	1ac2      	subs	r2, r0, r3
 801598e:	bf1c      	itt	ne
 8015990:	1a1b      	subne	r3, r3, r0
 8015992:	50a3      	strne	r3, [r4, r2]
 8015994:	e7af      	b.n	80158f6 <_malloc_r+0x22>
 8015996:	6862      	ldr	r2, [r4, #4]
 8015998:	42a3      	cmp	r3, r4
 801599a:	bf0c      	ite	eq
 801599c:	f8c8 2000 	streq.w	r2, [r8]
 80159a0:	605a      	strne	r2, [r3, #4]
 80159a2:	e7eb      	b.n	801597c <_malloc_r+0xa8>
 80159a4:	4623      	mov	r3, r4
 80159a6:	6864      	ldr	r4, [r4, #4]
 80159a8:	e7ae      	b.n	8015908 <_malloc_r+0x34>
 80159aa:	463c      	mov	r4, r7
 80159ac:	687f      	ldr	r7, [r7, #4]
 80159ae:	e7b6      	b.n	801591e <_malloc_r+0x4a>
 80159b0:	461a      	mov	r2, r3
 80159b2:	685b      	ldr	r3, [r3, #4]
 80159b4:	42a3      	cmp	r3, r4
 80159b6:	d1fb      	bne.n	80159b0 <_malloc_r+0xdc>
 80159b8:	2300      	movs	r3, #0
 80159ba:	6053      	str	r3, [r2, #4]
 80159bc:	e7de      	b.n	801597c <_malloc_r+0xa8>
 80159be:	230c      	movs	r3, #12
 80159c0:	6033      	str	r3, [r6, #0]
 80159c2:	4630      	mov	r0, r6
 80159c4:	f000 f80c 	bl	80159e0 <__malloc_unlock>
 80159c8:	e794      	b.n	80158f4 <_malloc_r+0x20>
 80159ca:	6005      	str	r5, [r0, #0]
 80159cc:	e7d6      	b.n	801597c <_malloc_r+0xa8>
 80159ce:	bf00      	nop
 80159d0:	2400357c 	.word	0x2400357c

080159d4 <__malloc_lock>:
 80159d4:	4801      	ldr	r0, [pc, #4]	@ (80159dc <__malloc_lock+0x8>)
 80159d6:	f7ff beda 	b.w	801578e <__retarget_lock_acquire_recursive>
 80159da:	bf00      	nop
 80159dc:	24003574 	.word	0x24003574

080159e0 <__malloc_unlock>:
 80159e0:	4801      	ldr	r0, [pc, #4]	@ (80159e8 <__malloc_unlock+0x8>)
 80159e2:	f7ff bed5 	b.w	8015790 <__retarget_lock_release_recursive>
 80159e6:	bf00      	nop
 80159e8:	24003574 	.word	0x24003574

080159ec <__sfputc_r>:
 80159ec:	6893      	ldr	r3, [r2, #8]
 80159ee:	3b01      	subs	r3, #1
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	b410      	push	{r4}
 80159f4:	6093      	str	r3, [r2, #8]
 80159f6:	da08      	bge.n	8015a0a <__sfputc_r+0x1e>
 80159f8:	6994      	ldr	r4, [r2, #24]
 80159fa:	42a3      	cmp	r3, r4
 80159fc:	db01      	blt.n	8015a02 <__sfputc_r+0x16>
 80159fe:	290a      	cmp	r1, #10
 8015a00:	d103      	bne.n	8015a0a <__sfputc_r+0x1e>
 8015a02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015a06:	f7ff bdaa 	b.w	801555e <__swbuf_r>
 8015a0a:	6813      	ldr	r3, [r2, #0]
 8015a0c:	1c58      	adds	r0, r3, #1
 8015a0e:	6010      	str	r0, [r2, #0]
 8015a10:	7019      	strb	r1, [r3, #0]
 8015a12:	4608      	mov	r0, r1
 8015a14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015a18:	4770      	bx	lr

08015a1a <__sfputs_r>:
 8015a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a1c:	4606      	mov	r6, r0
 8015a1e:	460f      	mov	r7, r1
 8015a20:	4614      	mov	r4, r2
 8015a22:	18d5      	adds	r5, r2, r3
 8015a24:	42ac      	cmp	r4, r5
 8015a26:	d101      	bne.n	8015a2c <__sfputs_r+0x12>
 8015a28:	2000      	movs	r0, #0
 8015a2a:	e007      	b.n	8015a3c <__sfputs_r+0x22>
 8015a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a30:	463a      	mov	r2, r7
 8015a32:	4630      	mov	r0, r6
 8015a34:	f7ff ffda 	bl	80159ec <__sfputc_r>
 8015a38:	1c43      	adds	r3, r0, #1
 8015a3a:	d1f3      	bne.n	8015a24 <__sfputs_r+0xa>
 8015a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015a40 <_vfiprintf_r>:
 8015a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a44:	460d      	mov	r5, r1
 8015a46:	b09d      	sub	sp, #116	@ 0x74
 8015a48:	4614      	mov	r4, r2
 8015a4a:	4698      	mov	r8, r3
 8015a4c:	4606      	mov	r6, r0
 8015a4e:	b118      	cbz	r0, 8015a58 <_vfiprintf_r+0x18>
 8015a50:	6a03      	ldr	r3, [r0, #32]
 8015a52:	b90b      	cbnz	r3, 8015a58 <_vfiprintf_r+0x18>
 8015a54:	f7ff fc92 	bl	801537c <__sinit>
 8015a58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015a5a:	07d9      	lsls	r1, r3, #31
 8015a5c:	d405      	bmi.n	8015a6a <_vfiprintf_r+0x2a>
 8015a5e:	89ab      	ldrh	r3, [r5, #12]
 8015a60:	059a      	lsls	r2, r3, #22
 8015a62:	d402      	bmi.n	8015a6a <_vfiprintf_r+0x2a>
 8015a64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015a66:	f7ff fe92 	bl	801578e <__retarget_lock_acquire_recursive>
 8015a6a:	89ab      	ldrh	r3, [r5, #12]
 8015a6c:	071b      	lsls	r3, r3, #28
 8015a6e:	d501      	bpl.n	8015a74 <_vfiprintf_r+0x34>
 8015a70:	692b      	ldr	r3, [r5, #16]
 8015a72:	b99b      	cbnz	r3, 8015a9c <_vfiprintf_r+0x5c>
 8015a74:	4629      	mov	r1, r5
 8015a76:	4630      	mov	r0, r6
 8015a78:	f7ff fdb0 	bl	80155dc <__swsetup_r>
 8015a7c:	b170      	cbz	r0, 8015a9c <_vfiprintf_r+0x5c>
 8015a7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015a80:	07dc      	lsls	r4, r3, #31
 8015a82:	d504      	bpl.n	8015a8e <_vfiprintf_r+0x4e>
 8015a84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015a88:	b01d      	add	sp, #116	@ 0x74
 8015a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a8e:	89ab      	ldrh	r3, [r5, #12]
 8015a90:	0598      	lsls	r0, r3, #22
 8015a92:	d4f7      	bmi.n	8015a84 <_vfiprintf_r+0x44>
 8015a94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015a96:	f7ff fe7b 	bl	8015790 <__retarget_lock_release_recursive>
 8015a9a:	e7f3      	b.n	8015a84 <_vfiprintf_r+0x44>
 8015a9c:	2300      	movs	r3, #0
 8015a9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015aa0:	2320      	movs	r3, #32
 8015aa2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015aa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8015aaa:	2330      	movs	r3, #48	@ 0x30
 8015aac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015c5c <_vfiprintf_r+0x21c>
 8015ab0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015ab4:	f04f 0901 	mov.w	r9, #1
 8015ab8:	4623      	mov	r3, r4
 8015aba:	469a      	mov	sl, r3
 8015abc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015ac0:	b10a      	cbz	r2, 8015ac6 <_vfiprintf_r+0x86>
 8015ac2:	2a25      	cmp	r2, #37	@ 0x25
 8015ac4:	d1f9      	bne.n	8015aba <_vfiprintf_r+0x7a>
 8015ac6:	ebba 0b04 	subs.w	fp, sl, r4
 8015aca:	d00b      	beq.n	8015ae4 <_vfiprintf_r+0xa4>
 8015acc:	465b      	mov	r3, fp
 8015ace:	4622      	mov	r2, r4
 8015ad0:	4629      	mov	r1, r5
 8015ad2:	4630      	mov	r0, r6
 8015ad4:	f7ff ffa1 	bl	8015a1a <__sfputs_r>
 8015ad8:	3001      	adds	r0, #1
 8015ada:	f000 80a7 	beq.w	8015c2c <_vfiprintf_r+0x1ec>
 8015ade:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015ae0:	445a      	add	r2, fp
 8015ae2:	9209      	str	r2, [sp, #36]	@ 0x24
 8015ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	f000 809f 	beq.w	8015c2c <_vfiprintf_r+0x1ec>
 8015aee:	2300      	movs	r3, #0
 8015af0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015af4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015af8:	f10a 0a01 	add.w	sl, sl, #1
 8015afc:	9304      	str	r3, [sp, #16]
 8015afe:	9307      	str	r3, [sp, #28]
 8015b00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015b04:	931a      	str	r3, [sp, #104]	@ 0x68
 8015b06:	4654      	mov	r4, sl
 8015b08:	2205      	movs	r2, #5
 8015b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b0e:	4853      	ldr	r0, [pc, #332]	@ (8015c5c <_vfiprintf_r+0x21c>)
 8015b10:	f7ea fbee 	bl	80002f0 <memchr>
 8015b14:	9a04      	ldr	r2, [sp, #16]
 8015b16:	b9d8      	cbnz	r0, 8015b50 <_vfiprintf_r+0x110>
 8015b18:	06d1      	lsls	r1, r2, #27
 8015b1a:	bf44      	itt	mi
 8015b1c:	2320      	movmi	r3, #32
 8015b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015b22:	0713      	lsls	r3, r2, #28
 8015b24:	bf44      	itt	mi
 8015b26:	232b      	movmi	r3, #43	@ 0x2b
 8015b28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8015b30:	2b2a      	cmp	r3, #42	@ 0x2a
 8015b32:	d015      	beq.n	8015b60 <_vfiprintf_r+0x120>
 8015b34:	9a07      	ldr	r2, [sp, #28]
 8015b36:	4654      	mov	r4, sl
 8015b38:	2000      	movs	r0, #0
 8015b3a:	f04f 0c0a 	mov.w	ip, #10
 8015b3e:	4621      	mov	r1, r4
 8015b40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015b44:	3b30      	subs	r3, #48	@ 0x30
 8015b46:	2b09      	cmp	r3, #9
 8015b48:	d94b      	bls.n	8015be2 <_vfiprintf_r+0x1a2>
 8015b4a:	b1b0      	cbz	r0, 8015b7a <_vfiprintf_r+0x13a>
 8015b4c:	9207      	str	r2, [sp, #28]
 8015b4e:	e014      	b.n	8015b7a <_vfiprintf_r+0x13a>
 8015b50:	eba0 0308 	sub.w	r3, r0, r8
 8015b54:	fa09 f303 	lsl.w	r3, r9, r3
 8015b58:	4313      	orrs	r3, r2
 8015b5a:	9304      	str	r3, [sp, #16]
 8015b5c:	46a2      	mov	sl, r4
 8015b5e:	e7d2      	b.n	8015b06 <_vfiprintf_r+0xc6>
 8015b60:	9b03      	ldr	r3, [sp, #12]
 8015b62:	1d19      	adds	r1, r3, #4
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	9103      	str	r1, [sp, #12]
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	bfbb      	ittet	lt
 8015b6c:	425b      	neglt	r3, r3
 8015b6e:	f042 0202 	orrlt.w	r2, r2, #2
 8015b72:	9307      	strge	r3, [sp, #28]
 8015b74:	9307      	strlt	r3, [sp, #28]
 8015b76:	bfb8      	it	lt
 8015b78:	9204      	strlt	r2, [sp, #16]
 8015b7a:	7823      	ldrb	r3, [r4, #0]
 8015b7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8015b7e:	d10a      	bne.n	8015b96 <_vfiprintf_r+0x156>
 8015b80:	7863      	ldrb	r3, [r4, #1]
 8015b82:	2b2a      	cmp	r3, #42	@ 0x2a
 8015b84:	d132      	bne.n	8015bec <_vfiprintf_r+0x1ac>
 8015b86:	9b03      	ldr	r3, [sp, #12]
 8015b88:	1d1a      	adds	r2, r3, #4
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	9203      	str	r2, [sp, #12]
 8015b8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015b92:	3402      	adds	r4, #2
 8015b94:	9305      	str	r3, [sp, #20]
 8015b96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015c6c <_vfiprintf_r+0x22c>
 8015b9a:	7821      	ldrb	r1, [r4, #0]
 8015b9c:	2203      	movs	r2, #3
 8015b9e:	4650      	mov	r0, sl
 8015ba0:	f7ea fba6 	bl	80002f0 <memchr>
 8015ba4:	b138      	cbz	r0, 8015bb6 <_vfiprintf_r+0x176>
 8015ba6:	9b04      	ldr	r3, [sp, #16]
 8015ba8:	eba0 000a 	sub.w	r0, r0, sl
 8015bac:	2240      	movs	r2, #64	@ 0x40
 8015bae:	4082      	lsls	r2, r0
 8015bb0:	4313      	orrs	r3, r2
 8015bb2:	3401      	adds	r4, #1
 8015bb4:	9304      	str	r3, [sp, #16]
 8015bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015bba:	4829      	ldr	r0, [pc, #164]	@ (8015c60 <_vfiprintf_r+0x220>)
 8015bbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015bc0:	2206      	movs	r2, #6
 8015bc2:	f7ea fb95 	bl	80002f0 <memchr>
 8015bc6:	2800      	cmp	r0, #0
 8015bc8:	d03f      	beq.n	8015c4a <_vfiprintf_r+0x20a>
 8015bca:	4b26      	ldr	r3, [pc, #152]	@ (8015c64 <_vfiprintf_r+0x224>)
 8015bcc:	bb1b      	cbnz	r3, 8015c16 <_vfiprintf_r+0x1d6>
 8015bce:	9b03      	ldr	r3, [sp, #12]
 8015bd0:	3307      	adds	r3, #7
 8015bd2:	f023 0307 	bic.w	r3, r3, #7
 8015bd6:	3308      	adds	r3, #8
 8015bd8:	9303      	str	r3, [sp, #12]
 8015bda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015bdc:	443b      	add	r3, r7
 8015bde:	9309      	str	r3, [sp, #36]	@ 0x24
 8015be0:	e76a      	b.n	8015ab8 <_vfiprintf_r+0x78>
 8015be2:	fb0c 3202 	mla	r2, ip, r2, r3
 8015be6:	460c      	mov	r4, r1
 8015be8:	2001      	movs	r0, #1
 8015bea:	e7a8      	b.n	8015b3e <_vfiprintf_r+0xfe>
 8015bec:	2300      	movs	r3, #0
 8015bee:	3401      	adds	r4, #1
 8015bf0:	9305      	str	r3, [sp, #20]
 8015bf2:	4619      	mov	r1, r3
 8015bf4:	f04f 0c0a 	mov.w	ip, #10
 8015bf8:	4620      	mov	r0, r4
 8015bfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015bfe:	3a30      	subs	r2, #48	@ 0x30
 8015c00:	2a09      	cmp	r2, #9
 8015c02:	d903      	bls.n	8015c0c <_vfiprintf_r+0x1cc>
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d0c6      	beq.n	8015b96 <_vfiprintf_r+0x156>
 8015c08:	9105      	str	r1, [sp, #20]
 8015c0a:	e7c4      	b.n	8015b96 <_vfiprintf_r+0x156>
 8015c0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015c10:	4604      	mov	r4, r0
 8015c12:	2301      	movs	r3, #1
 8015c14:	e7f0      	b.n	8015bf8 <_vfiprintf_r+0x1b8>
 8015c16:	ab03      	add	r3, sp, #12
 8015c18:	9300      	str	r3, [sp, #0]
 8015c1a:	462a      	mov	r2, r5
 8015c1c:	4b12      	ldr	r3, [pc, #72]	@ (8015c68 <_vfiprintf_r+0x228>)
 8015c1e:	a904      	add	r1, sp, #16
 8015c20:	4630      	mov	r0, r6
 8015c22:	f3af 8000 	nop.w
 8015c26:	4607      	mov	r7, r0
 8015c28:	1c78      	adds	r0, r7, #1
 8015c2a:	d1d6      	bne.n	8015bda <_vfiprintf_r+0x19a>
 8015c2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015c2e:	07d9      	lsls	r1, r3, #31
 8015c30:	d405      	bmi.n	8015c3e <_vfiprintf_r+0x1fe>
 8015c32:	89ab      	ldrh	r3, [r5, #12]
 8015c34:	059a      	lsls	r2, r3, #22
 8015c36:	d402      	bmi.n	8015c3e <_vfiprintf_r+0x1fe>
 8015c38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015c3a:	f7ff fda9 	bl	8015790 <__retarget_lock_release_recursive>
 8015c3e:	89ab      	ldrh	r3, [r5, #12]
 8015c40:	065b      	lsls	r3, r3, #25
 8015c42:	f53f af1f 	bmi.w	8015a84 <_vfiprintf_r+0x44>
 8015c46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015c48:	e71e      	b.n	8015a88 <_vfiprintf_r+0x48>
 8015c4a:	ab03      	add	r3, sp, #12
 8015c4c:	9300      	str	r3, [sp, #0]
 8015c4e:	462a      	mov	r2, r5
 8015c50:	4b05      	ldr	r3, [pc, #20]	@ (8015c68 <_vfiprintf_r+0x228>)
 8015c52:	a904      	add	r1, sp, #16
 8015c54:	4630      	mov	r0, r6
 8015c56:	f000 f879 	bl	8015d4c <_printf_i>
 8015c5a:	e7e4      	b.n	8015c26 <_vfiprintf_r+0x1e6>
 8015c5c:	0801b2e9 	.word	0x0801b2e9
 8015c60:	0801b2f3 	.word	0x0801b2f3
 8015c64:	00000000 	.word	0x00000000
 8015c68:	08015a1b 	.word	0x08015a1b
 8015c6c:	0801b2ef 	.word	0x0801b2ef

08015c70 <_printf_common>:
 8015c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c74:	4616      	mov	r6, r2
 8015c76:	4698      	mov	r8, r3
 8015c78:	688a      	ldr	r2, [r1, #8]
 8015c7a:	690b      	ldr	r3, [r1, #16]
 8015c7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015c80:	4293      	cmp	r3, r2
 8015c82:	bfb8      	it	lt
 8015c84:	4613      	movlt	r3, r2
 8015c86:	6033      	str	r3, [r6, #0]
 8015c88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015c8c:	4607      	mov	r7, r0
 8015c8e:	460c      	mov	r4, r1
 8015c90:	b10a      	cbz	r2, 8015c96 <_printf_common+0x26>
 8015c92:	3301      	adds	r3, #1
 8015c94:	6033      	str	r3, [r6, #0]
 8015c96:	6823      	ldr	r3, [r4, #0]
 8015c98:	0699      	lsls	r1, r3, #26
 8015c9a:	bf42      	ittt	mi
 8015c9c:	6833      	ldrmi	r3, [r6, #0]
 8015c9e:	3302      	addmi	r3, #2
 8015ca0:	6033      	strmi	r3, [r6, #0]
 8015ca2:	6825      	ldr	r5, [r4, #0]
 8015ca4:	f015 0506 	ands.w	r5, r5, #6
 8015ca8:	d106      	bne.n	8015cb8 <_printf_common+0x48>
 8015caa:	f104 0a19 	add.w	sl, r4, #25
 8015cae:	68e3      	ldr	r3, [r4, #12]
 8015cb0:	6832      	ldr	r2, [r6, #0]
 8015cb2:	1a9b      	subs	r3, r3, r2
 8015cb4:	42ab      	cmp	r3, r5
 8015cb6:	dc26      	bgt.n	8015d06 <_printf_common+0x96>
 8015cb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015cbc:	6822      	ldr	r2, [r4, #0]
 8015cbe:	3b00      	subs	r3, #0
 8015cc0:	bf18      	it	ne
 8015cc2:	2301      	movne	r3, #1
 8015cc4:	0692      	lsls	r2, r2, #26
 8015cc6:	d42b      	bmi.n	8015d20 <_printf_common+0xb0>
 8015cc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015ccc:	4641      	mov	r1, r8
 8015cce:	4638      	mov	r0, r7
 8015cd0:	47c8      	blx	r9
 8015cd2:	3001      	adds	r0, #1
 8015cd4:	d01e      	beq.n	8015d14 <_printf_common+0xa4>
 8015cd6:	6823      	ldr	r3, [r4, #0]
 8015cd8:	6922      	ldr	r2, [r4, #16]
 8015cda:	f003 0306 	and.w	r3, r3, #6
 8015cde:	2b04      	cmp	r3, #4
 8015ce0:	bf02      	ittt	eq
 8015ce2:	68e5      	ldreq	r5, [r4, #12]
 8015ce4:	6833      	ldreq	r3, [r6, #0]
 8015ce6:	1aed      	subeq	r5, r5, r3
 8015ce8:	68a3      	ldr	r3, [r4, #8]
 8015cea:	bf0c      	ite	eq
 8015cec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015cf0:	2500      	movne	r5, #0
 8015cf2:	4293      	cmp	r3, r2
 8015cf4:	bfc4      	itt	gt
 8015cf6:	1a9b      	subgt	r3, r3, r2
 8015cf8:	18ed      	addgt	r5, r5, r3
 8015cfa:	2600      	movs	r6, #0
 8015cfc:	341a      	adds	r4, #26
 8015cfe:	42b5      	cmp	r5, r6
 8015d00:	d11a      	bne.n	8015d38 <_printf_common+0xc8>
 8015d02:	2000      	movs	r0, #0
 8015d04:	e008      	b.n	8015d18 <_printf_common+0xa8>
 8015d06:	2301      	movs	r3, #1
 8015d08:	4652      	mov	r2, sl
 8015d0a:	4641      	mov	r1, r8
 8015d0c:	4638      	mov	r0, r7
 8015d0e:	47c8      	blx	r9
 8015d10:	3001      	adds	r0, #1
 8015d12:	d103      	bne.n	8015d1c <_printf_common+0xac>
 8015d14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d1c:	3501      	adds	r5, #1
 8015d1e:	e7c6      	b.n	8015cae <_printf_common+0x3e>
 8015d20:	18e1      	adds	r1, r4, r3
 8015d22:	1c5a      	adds	r2, r3, #1
 8015d24:	2030      	movs	r0, #48	@ 0x30
 8015d26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015d2a:	4422      	add	r2, r4
 8015d2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015d30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015d34:	3302      	adds	r3, #2
 8015d36:	e7c7      	b.n	8015cc8 <_printf_common+0x58>
 8015d38:	2301      	movs	r3, #1
 8015d3a:	4622      	mov	r2, r4
 8015d3c:	4641      	mov	r1, r8
 8015d3e:	4638      	mov	r0, r7
 8015d40:	47c8      	blx	r9
 8015d42:	3001      	adds	r0, #1
 8015d44:	d0e6      	beq.n	8015d14 <_printf_common+0xa4>
 8015d46:	3601      	adds	r6, #1
 8015d48:	e7d9      	b.n	8015cfe <_printf_common+0x8e>
	...

08015d4c <_printf_i>:
 8015d4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015d50:	7e0f      	ldrb	r7, [r1, #24]
 8015d52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015d54:	2f78      	cmp	r7, #120	@ 0x78
 8015d56:	4691      	mov	r9, r2
 8015d58:	4680      	mov	r8, r0
 8015d5a:	460c      	mov	r4, r1
 8015d5c:	469a      	mov	sl, r3
 8015d5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015d62:	d807      	bhi.n	8015d74 <_printf_i+0x28>
 8015d64:	2f62      	cmp	r7, #98	@ 0x62
 8015d66:	d80a      	bhi.n	8015d7e <_printf_i+0x32>
 8015d68:	2f00      	cmp	r7, #0
 8015d6a:	f000 80d2 	beq.w	8015f12 <_printf_i+0x1c6>
 8015d6e:	2f58      	cmp	r7, #88	@ 0x58
 8015d70:	f000 80b9 	beq.w	8015ee6 <_printf_i+0x19a>
 8015d74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015d78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015d7c:	e03a      	b.n	8015df4 <_printf_i+0xa8>
 8015d7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015d82:	2b15      	cmp	r3, #21
 8015d84:	d8f6      	bhi.n	8015d74 <_printf_i+0x28>
 8015d86:	a101      	add	r1, pc, #4	@ (adr r1, 8015d8c <_printf_i+0x40>)
 8015d88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015d8c:	08015de5 	.word	0x08015de5
 8015d90:	08015df9 	.word	0x08015df9
 8015d94:	08015d75 	.word	0x08015d75
 8015d98:	08015d75 	.word	0x08015d75
 8015d9c:	08015d75 	.word	0x08015d75
 8015da0:	08015d75 	.word	0x08015d75
 8015da4:	08015df9 	.word	0x08015df9
 8015da8:	08015d75 	.word	0x08015d75
 8015dac:	08015d75 	.word	0x08015d75
 8015db0:	08015d75 	.word	0x08015d75
 8015db4:	08015d75 	.word	0x08015d75
 8015db8:	08015ef9 	.word	0x08015ef9
 8015dbc:	08015e23 	.word	0x08015e23
 8015dc0:	08015eb3 	.word	0x08015eb3
 8015dc4:	08015d75 	.word	0x08015d75
 8015dc8:	08015d75 	.word	0x08015d75
 8015dcc:	08015f1b 	.word	0x08015f1b
 8015dd0:	08015d75 	.word	0x08015d75
 8015dd4:	08015e23 	.word	0x08015e23
 8015dd8:	08015d75 	.word	0x08015d75
 8015ddc:	08015d75 	.word	0x08015d75
 8015de0:	08015ebb 	.word	0x08015ebb
 8015de4:	6833      	ldr	r3, [r6, #0]
 8015de6:	1d1a      	adds	r2, r3, #4
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	6032      	str	r2, [r6, #0]
 8015dec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015df0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015df4:	2301      	movs	r3, #1
 8015df6:	e09d      	b.n	8015f34 <_printf_i+0x1e8>
 8015df8:	6833      	ldr	r3, [r6, #0]
 8015dfa:	6820      	ldr	r0, [r4, #0]
 8015dfc:	1d19      	adds	r1, r3, #4
 8015dfe:	6031      	str	r1, [r6, #0]
 8015e00:	0606      	lsls	r6, r0, #24
 8015e02:	d501      	bpl.n	8015e08 <_printf_i+0xbc>
 8015e04:	681d      	ldr	r5, [r3, #0]
 8015e06:	e003      	b.n	8015e10 <_printf_i+0xc4>
 8015e08:	0645      	lsls	r5, r0, #25
 8015e0a:	d5fb      	bpl.n	8015e04 <_printf_i+0xb8>
 8015e0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015e10:	2d00      	cmp	r5, #0
 8015e12:	da03      	bge.n	8015e1c <_printf_i+0xd0>
 8015e14:	232d      	movs	r3, #45	@ 0x2d
 8015e16:	426d      	negs	r5, r5
 8015e18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015e1c:	4859      	ldr	r0, [pc, #356]	@ (8015f84 <_printf_i+0x238>)
 8015e1e:	230a      	movs	r3, #10
 8015e20:	e011      	b.n	8015e46 <_printf_i+0xfa>
 8015e22:	6821      	ldr	r1, [r4, #0]
 8015e24:	6833      	ldr	r3, [r6, #0]
 8015e26:	0608      	lsls	r0, r1, #24
 8015e28:	f853 5b04 	ldr.w	r5, [r3], #4
 8015e2c:	d402      	bmi.n	8015e34 <_printf_i+0xe8>
 8015e2e:	0649      	lsls	r1, r1, #25
 8015e30:	bf48      	it	mi
 8015e32:	b2ad      	uxthmi	r5, r5
 8015e34:	2f6f      	cmp	r7, #111	@ 0x6f
 8015e36:	4853      	ldr	r0, [pc, #332]	@ (8015f84 <_printf_i+0x238>)
 8015e38:	6033      	str	r3, [r6, #0]
 8015e3a:	bf14      	ite	ne
 8015e3c:	230a      	movne	r3, #10
 8015e3e:	2308      	moveq	r3, #8
 8015e40:	2100      	movs	r1, #0
 8015e42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015e46:	6866      	ldr	r6, [r4, #4]
 8015e48:	60a6      	str	r6, [r4, #8]
 8015e4a:	2e00      	cmp	r6, #0
 8015e4c:	bfa2      	ittt	ge
 8015e4e:	6821      	ldrge	r1, [r4, #0]
 8015e50:	f021 0104 	bicge.w	r1, r1, #4
 8015e54:	6021      	strge	r1, [r4, #0]
 8015e56:	b90d      	cbnz	r5, 8015e5c <_printf_i+0x110>
 8015e58:	2e00      	cmp	r6, #0
 8015e5a:	d04b      	beq.n	8015ef4 <_printf_i+0x1a8>
 8015e5c:	4616      	mov	r6, r2
 8015e5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8015e62:	fb03 5711 	mls	r7, r3, r1, r5
 8015e66:	5dc7      	ldrb	r7, [r0, r7]
 8015e68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015e6c:	462f      	mov	r7, r5
 8015e6e:	42bb      	cmp	r3, r7
 8015e70:	460d      	mov	r5, r1
 8015e72:	d9f4      	bls.n	8015e5e <_printf_i+0x112>
 8015e74:	2b08      	cmp	r3, #8
 8015e76:	d10b      	bne.n	8015e90 <_printf_i+0x144>
 8015e78:	6823      	ldr	r3, [r4, #0]
 8015e7a:	07df      	lsls	r7, r3, #31
 8015e7c:	d508      	bpl.n	8015e90 <_printf_i+0x144>
 8015e7e:	6923      	ldr	r3, [r4, #16]
 8015e80:	6861      	ldr	r1, [r4, #4]
 8015e82:	4299      	cmp	r1, r3
 8015e84:	bfde      	ittt	le
 8015e86:	2330      	movle	r3, #48	@ 0x30
 8015e88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015e8c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8015e90:	1b92      	subs	r2, r2, r6
 8015e92:	6122      	str	r2, [r4, #16]
 8015e94:	f8cd a000 	str.w	sl, [sp]
 8015e98:	464b      	mov	r3, r9
 8015e9a:	aa03      	add	r2, sp, #12
 8015e9c:	4621      	mov	r1, r4
 8015e9e:	4640      	mov	r0, r8
 8015ea0:	f7ff fee6 	bl	8015c70 <_printf_common>
 8015ea4:	3001      	adds	r0, #1
 8015ea6:	d14a      	bne.n	8015f3e <_printf_i+0x1f2>
 8015ea8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015eac:	b004      	add	sp, #16
 8015eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015eb2:	6823      	ldr	r3, [r4, #0]
 8015eb4:	f043 0320 	orr.w	r3, r3, #32
 8015eb8:	6023      	str	r3, [r4, #0]
 8015eba:	4833      	ldr	r0, [pc, #204]	@ (8015f88 <_printf_i+0x23c>)
 8015ebc:	2778      	movs	r7, #120	@ 0x78
 8015ebe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015ec2:	6823      	ldr	r3, [r4, #0]
 8015ec4:	6831      	ldr	r1, [r6, #0]
 8015ec6:	061f      	lsls	r7, r3, #24
 8015ec8:	f851 5b04 	ldr.w	r5, [r1], #4
 8015ecc:	d402      	bmi.n	8015ed4 <_printf_i+0x188>
 8015ece:	065f      	lsls	r7, r3, #25
 8015ed0:	bf48      	it	mi
 8015ed2:	b2ad      	uxthmi	r5, r5
 8015ed4:	6031      	str	r1, [r6, #0]
 8015ed6:	07d9      	lsls	r1, r3, #31
 8015ed8:	bf44      	itt	mi
 8015eda:	f043 0320 	orrmi.w	r3, r3, #32
 8015ede:	6023      	strmi	r3, [r4, #0]
 8015ee0:	b11d      	cbz	r5, 8015eea <_printf_i+0x19e>
 8015ee2:	2310      	movs	r3, #16
 8015ee4:	e7ac      	b.n	8015e40 <_printf_i+0xf4>
 8015ee6:	4827      	ldr	r0, [pc, #156]	@ (8015f84 <_printf_i+0x238>)
 8015ee8:	e7e9      	b.n	8015ebe <_printf_i+0x172>
 8015eea:	6823      	ldr	r3, [r4, #0]
 8015eec:	f023 0320 	bic.w	r3, r3, #32
 8015ef0:	6023      	str	r3, [r4, #0]
 8015ef2:	e7f6      	b.n	8015ee2 <_printf_i+0x196>
 8015ef4:	4616      	mov	r6, r2
 8015ef6:	e7bd      	b.n	8015e74 <_printf_i+0x128>
 8015ef8:	6833      	ldr	r3, [r6, #0]
 8015efa:	6825      	ldr	r5, [r4, #0]
 8015efc:	6961      	ldr	r1, [r4, #20]
 8015efe:	1d18      	adds	r0, r3, #4
 8015f00:	6030      	str	r0, [r6, #0]
 8015f02:	062e      	lsls	r6, r5, #24
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	d501      	bpl.n	8015f0c <_printf_i+0x1c0>
 8015f08:	6019      	str	r1, [r3, #0]
 8015f0a:	e002      	b.n	8015f12 <_printf_i+0x1c6>
 8015f0c:	0668      	lsls	r0, r5, #25
 8015f0e:	d5fb      	bpl.n	8015f08 <_printf_i+0x1bc>
 8015f10:	8019      	strh	r1, [r3, #0]
 8015f12:	2300      	movs	r3, #0
 8015f14:	6123      	str	r3, [r4, #16]
 8015f16:	4616      	mov	r6, r2
 8015f18:	e7bc      	b.n	8015e94 <_printf_i+0x148>
 8015f1a:	6833      	ldr	r3, [r6, #0]
 8015f1c:	1d1a      	adds	r2, r3, #4
 8015f1e:	6032      	str	r2, [r6, #0]
 8015f20:	681e      	ldr	r6, [r3, #0]
 8015f22:	6862      	ldr	r2, [r4, #4]
 8015f24:	2100      	movs	r1, #0
 8015f26:	4630      	mov	r0, r6
 8015f28:	f7ea f9e2 	bl	80002f0 <memchr>
 8015f2c:	b108      	cbz	r0, 8015f32 <_printf_i+0x1e6>
 8015f2e:	1b80      	subs	r0, r0, r6
 8015f30:	6060      	str	r0, [r4, #4]
 8015f32:	6863      	ldr	r3, [r4, #4]
 8015f34:	6123      	str	r3, [r4, #16]
 8015f36:	2300      	movs	r3, #0
 8015f38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015f3c:	e7aa      	b.n	8015e94 <_printf_i+0x148>
 8015f3e:	6923      	ldr	r3, [r4, #16]
 8015f40:	4632      	mov	r2, r6
 8015f42:	4649      	mov	r1, r9
 8015f44:	4640      	mov	r0, r8
 8015f46:	47d0      	blx	sl
 8015f48:	3001      	adds	r0, #1
 8015f4a:	d0ad      	beq.n	8015ea8 <_printf_i+0x15c>
 8015f4c:	6823      	ldr	r3, [r4, #0]
 8015f4e:	079b      	lsls	r3, r3, #30
 8015f50:	d413      	bmi.n	8015f7a <_printf_i+0x22e>
 8015f52:	68e0      	ldr	r0, [r4, #12]
 8015f54:	9b03      	ldr	r3, [sp, #12]
 8015f56:	4298      	cmp	r0, r3
 8015f58:	bfb8      	it	lt
 8015f5a:	4618      	movlt	r0, r3
 8015f5c:	e7a6      	b.n	8015eac <_printf_i+0x160>
 8015f5e:	2301      	movs	r3, #1
 8015f60:	4632      	mov	r2, r6
 8015f62:	4649      	mov	r1, r9
 8015f64:	4640      	mov	r0, r8
 8015f66:	47d0      	blx	sl
 8015f68:	3001      	adds	r0, #1
 8015f6a:	d09d      	beq.n	8015ea8 <_printf_i+0x15c>
 8015f6c:	3501      	adds	r5, #1
 8015f6e:	68e3      	ldr	r3, [r4, #12]
 8015f70:	9903      	ldr	r1, [sp, #12]
 8015f72:	1a5b      	subs	r3, r3, r1
 8015f74:	42ab      	cmp	r3, r5
 8015f76:	dcf2      	bgt.n	8015f5e <_printf_i+0x212>
 8015f78:	e7eb      	b.n	8015f52 <_printf_i+0x206>
 8015f7a:	2500      	movs	r5, #0
 8015f7c:	f104 0619 	add.w	r6, r4, #25
 8015f80:	e7f5      	b.n	8015f6e <_printf_i+0x222>
 8015f82:	bf00      	nop
 8015f84:	0801b2fa 	.word	0x0801b2fa
 8015f88:	0801b30b 	.word	0x0801b30b

08015f8c <__sflush_r>:
 8015f8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f94:	0716      	lsls	r6, r2, #28
 8015f96:	4605      	mov	r5, r0
 8015f98:	460c      	mov	r4, r1
 8015f9a:	d454      	bmi.n	8016046 <__sflush_r+0xba>
 8015f9c:	684b      	ldr	r3, [r1, #4]
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	dc02      	bgt.n	8015fa8 <__sflush_r+0x1c>
 8015fa2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	dd48      	ble.n	801603a <__sflush_r+0xae>
 8015fa8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015faa:	2e00      	cmp	r6, #0
 8015fac:	d045      	beq.n	801603a <__sflush_r+0xae>
 8015fae:	2300      	movs	r3, #0
 8015fb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015fb4:	682f      	ldr	r7, [r5, #0]
 8015fb6:	6a21      	ldr	r1, [r4, #32]
 8015fb8:	602b      	str	r3, [r5, #0]
 8015fba:	d030      	beq.n	801601e <__sflush_r+0x92>
 8015fbc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015fbe:	89a3      	ldrh	r3, [r4, #12]
 8015fc0:	0759      	lsls	r1, r3, #29
 8015fc2:	d505      	bpl.n	8015fd0 <__sflush_r+0x44>
 8015fc4:	6863      	ldr	r3, [r4, #4]
 8015fc6:	1ad2      	subs	r2, r2, r3
 8015fc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015fca:	b10b      	cbz	r3, 8015fd0 <__sflush_r+0x44>
 8015fcc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015fce:	1ad2      	subs	r2, r2, r3
 8015fd0:	2300      	movs	r3, #0
 8015fd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015fd4:	6a21      	ldr	r1, [r4, #32]
 8015fd6:	4628      	mov	r0, r5
 8015fd8:	47b0      	blx	r6
 8015fda:	1c43      	adds	r3, r0, #1
 8015fdc:	89a3      	ldrh	r3, [r4, #12]
 8015fde:	d106      	bne.n	8015fee <__sflush_r+0x62>
 8015fe0:	6829      	ldr	r1, [r5, #0]
 8015fe2:	291d      	cmp	r1, #29
 8015fe4:	d82b      	bhi.n	801603e <__sflush_r+0xb2>
 8015fe6:	4a2a      	ldr	r2, [pc, #168]	@ (8016090 <__sflush_r+0x104>)
 8015fe8:	410a      	asrs	r2, r1
 8015fea:	07d6      	lsls	r6, r2, #31
 8015fec:	d427      	bmi.n	801603e <__sflush_r+0xb2>
 8015fee:	2200      	movs	r2, #0
 8015ff0:	6062      	str	r2, [r4, #4]
 8015ff2:	04d9      	lsls	r1, r3, #19
 8015ff4:	6922      	ldr	r2, [r4, #16]
 8015ff6:	6022      	str	r2, [r4, #0]
 8015ff8:	d504      	bpl.n	8016004 <__sflush_r+0x78>
 8015ffa:	1c42      	adds	r2, r0, #1
 8015ffc:	d101      	bne.n	8016002 <__sflush_r+0x76>
 8015ffe:	682b      	ldr	r3, [r5, #0]
 8016000:	b903      	cbnz	r3, 8016004 <__sflush_r+0x78>
 8016002:	6560      	str	r0, [r4, #84]	@ 0x54
 8016004:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016006:	602f      	str	r7, [r5, #0]
 8016008:	b1b9      	cbz	r1, 801603a <__sflush_r+0xae>
 801600a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801600e:	4299      	cmp	r1, r3
 8016010:	d002      	beq.n	8016018 <__sflush_r+0x8c>
 8016012:	4628      	mov	r0, r5
 8016014:	f7ff fbea 	bl	80157ec <_free_r>
 8016018:	2300      	movs	r3, #0
 801601a:	6363      	str	r3, [r4, #52]	@ 0x34
 801601c:	e00d      	b.n	801603a <__sflush_r+0xae>
 801601e:	2301      	movs	r3, #1
 8016020:	4628      	mov	r0, r5
 8016022:	47b0      	blx	r6
 8016024:	4602      	mov	r2, r0
 8016026:	1c50      	adds	r0, r2, #1
 8016028:	d1c9      	bne.n	8015fbe <__sflush_r+0x32>
 801602a:	682b      	ldr	r3, [r5, #0]
 801602c:	2b00      	cmp	r3, #0
 801602e:	d0c6      	beq.n	8015fbe <__sflush_r+0x32>
 8016030:	2b1d      	cmp	r3, #29
 8016032:	d001      	beq.n	8016038 <__sflush_r+0xac>
 8016034:	2b16      	cmp	r3, #22
 8016036:	d11e      	bne.n	8016076 <__sflush_r+0xea>
 8016038:	602f      	str	r7, [r5, #0]
 801603a:	2000      	movs	r0, #0
 801603c:	e022      	b.n	8016084 <__sflush_r+0xf8>
 801603e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016042:	b21b      	sxth	r3, r3
 8016044:	e01b      	b.n	801607e <__sflush_r+0xf2>
 8016046:	690f      	ldr	r7, [r1, #16]
 8016048:	2f00      	cmp	r7, #0
 801604a:	d0f6      	beq.n	801603a <__sflush_r+0xae>
 801604c:	0793      	lsls	r3, r2, #30
 801604e:	680e      	ldr	r6, [r1, #0]
 8016050:	bf08      	it	eq
 8016052:	694b      	ldreq	r3, [r1, #20]
 8016054:	600f      	str	r7, [r1, #0]
 8016056:	bf18      	it	ne
 8016058:	2300      	movne	r3, #0
 801605a:	eba6 0807 	sub.w	r8, r6, r7
 801605e:	608b      	str	r3, [r1, #8]
 8016060:	f1b8 0f00 	cmp.w	r8, #0
 8016064:	dde9      	ble.n	801603a <__sflush_r+0xae>
 8016066:	6a21      	ldr	r1, [r4, #32]
 8016068:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801606a:	4643      	mov	r3, r8
 801606c:	463a      	mov	r2, r7
 801606e:	4628      	mov	r0, r5
 8016070:	47b0      	blx	r6
 8016072:	2800      	cmp	r0, #0
 8016074:	dc08      	bgt.n	8016088 <__sflush_r+0xfc>
 8016076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801607a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801607e:	81a3      	strh	r3, [r4, #12]
 8016080:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016088:	4407      	add	r7, r0
 801608a:	eba8 0800 	sub.w	r8, r8, r0
 801608e:	e7e7      	b.n	8016060 <__sflush_r+0xd4>
 8016090:	dfbffffe 	.word	0xdfbffffe

08016094 <_fflush_r>:
 8016094:	b538      	push	{r3, r4, r5, lr}
 8016096:	690b      	ldr	r3, [r1, #16]
 8016098:	4605      	mov	r5, r0
 801609a:	460c      	mov	r4, r1
 801609c:	b913      	cbnz	r3, 80160a4 <_fflush_r+0x10>
 801609e:	2500      	movs	r5, #0
 80160a0:	4628      	mov	r0, r5
 80160a2:	bd38      	pop	{r3, r4, r5, pc}
 80160a4:	b118      	cbz	r0, 80160ae <_fflush_r+0x1a>
 80160a6:	6a03      	ldr	r3, [r0, #32]
 80160a8:	b90b      	cbnz	r3, 80160ae <_fflush_r+0x1a>
 80160aa:	f7ff f967 	bl	801537c <__sinit>
 80160ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d0f3      	beq.n	801609e <_fflush_r+0xa>
 80160b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80160b8:	07d0      	lsls	r0, r2, #31
 80160ba:	d404      	bmi.n	80160c6 <_fflush_r+0x32>
 80160bc:	0599      	lsls	r1, r3, #22
 80160be:	d402      	bmi.n	80160c6 <_fflush_r+0x32>
 80160c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80160c2:	f7ff fb64 	bl	801578e <__retarget_lock_acquire_recursive>
 80160c6:	4628      	mov	r0, r5
 80160c8:	4621      	mov	r1, r4
 80160ca:	f7ff ff5f 	bl	8015f8c <__sflush_r>
 80160ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80160d0:	07da      	lsls	r2, r3, #31
 80160d2:	4605      	mov	r5, r0
 80160d4:	d4e4      	bmi.n	80160a0 <_fflush_r+0xc>
 80160d6:	89a3      	ldrh	r3, [r4, #12]
 80160d8:	059b      	lsls	r3, r3, #22
 80160da:	d4e1      	bmi.n	80160a0 <_fflush_r+0xc>
 80160dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80160de:	f7ff fb57 	bl	8015790 <__retarget_lock_release_recursive>
 80160e2:	e7dd      	b.n	80160a0 <_fflush_r+0xc>

080160e4 <fiprintf>:
 80160e4:	b40e      	push	{r1, r2, r3}
 80160e6:	b503      	push	{r0, r1, lr}
 80160e8:	4601      	mov	r1, r0
 80160ea:	ab03      	add	r3, sp, #12
 80160ec:	4805      	ldr	r0, [pc, #20]	@ (8016104 <fiprintf+0x20>)
 80160ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80160f2:	6800      	ldr	r0, [r0, #0]
 80160f4:	9301      	str	r3, [sp, #4]
 80160f6:	f7ff fca3 	bl	8015a40 <_vfiprintf_r>
 80160fa:	b002      	add	sp, #8
 80160fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8016100:	b003      	add	sp, #12
 8016102:	4770      	bx	lr
 8016104:	24000094 	.word	0x24000094

08016108 <__swhatbuf_r>:
 8016108:	b570      	push	{r4, r5, r6, lr}
 801610a:	460c      	mov	r4, r1
 801610c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016110:	2900      	cmp	r1, #0
 8016112:	b096      	sub	sp, #88	@ 0x58
 8016114:	4615      	mov	r5, r2
 8016116:	461e      	mov	r6, r3
 8016118:	da0d      	bge.n	8016136 <__swhatbuf_r+0x2e>
 801611a:	89a3      	ldrh	r3, [r4, #12]
 801611c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016120:	f04f 0100 	mov.w	r1, #0
 8016124:	bf14      	ite	ne
 8016126:	2340      	movne	r3, #64	@ 0x40
 8016128:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801612c:	2000      	movs	r0, #0
 801612e:	6031      	str	r1, [r6, #0]
 8016130:	602b      	str	r3, [r5, #0]
 8016132:	b016      	add	sp, #88	@ 0x58
 8016134:	bd70      	pop	{r4, r5, r6, pc}
 8016136:	466a      	mov	r2, sp
 8016138:	f000 f87c 	bl	8016234 <_fstat_r>
 801613c:	2800      	cmp	r0, #0
 801613e:	dbec      	blt.n	801611a <__swhatbuf_r+0x12>
 8016140:	9901      	ldr	r1, [sp, #4]
 8016142:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016146:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801614a:	4259      	negs	r1, r3
 801614c:	4159      	adcs	r1, r3
 801614e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016152:	e7eb      	b.n	801612c <__swhatbuf_r+0x24>

08016154 <__smakebuf_r>:
 8016154:	898b      	ldrh	r3, [r1, #12]
 8016156:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016158:	079d      	lsls	r5, r3, #30
 801615a:	4606      	mov	r6, r0
 801615c:	460c      	mov	r4, r1
 801615e:	d507      	bpl.n	8016170 <__smakebuf_r+0x1c>
 8016160:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016164:	6023      	str	r3, [r4, #0]
 8016166:	6123      	str	r3, [r4, #16]
 8016168:	2301      	movs	r3, #1
 801616a:	6163      	str	r3, [r4, #20]
 801616c:	b003      	add	sp, #12
 801616e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016170:	ab01      	add	r3, sp, #4
 8016172:	466a      	mov	r2, sp
 8016174:	f7ff ffc8 	bl	8016108 <__swhatbuf_r>
 8016178:	9f00      	ldr	r7, [sp, #0]
 801617a:	4605      	mov	r5, r0
 801617c:	4639      	mov	r1, r7
 801617e:	4630      	mov	r0, r6
 8016180:	f7ff fba8 	bl	80158d4 <_malloc_r>
 8016184:	b948      	cbnz	r0, 801619a <__smakebuf_r+0x46>
 8016186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801618a:	059a      	lsls	r2, r3, #22
 801618c:	d4ee      	bmi.n	801616c <__smakebuf_r+0x18>
 801618e:	f023 0303 	bic.w	r3, r3, #3
 8016192:	f043 0302 	orr.w	r3, r3, #2
 8016196:	81a3      	strh	r3, [r4, #12]
 8016198:	e7e2      	b.n	8016160 <__smakebuf_r+0xc>
 801619a:	89a3      	ldrh	r3, [r4, #12]
 801619c:	6020      	str	r0, [r4, #0]
 801619e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80161a2:	81a3      	strh	r3, [r4, #12]
 80161a4:	9b01      	ldr	r3, [sp, #4]
 80161a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80161aa:	b15b      	cbz	r3, 80161c4 <__smakebuf_r+0x70>
 80161ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80161b0:	4630      	mov	r0, r6
 80161b2:	f000 f851 	bl	8016258 <_isatty_r>
 80161b6:	b128      	cbz	r0, 80161c4 <__smakebuf_r+0x70>
 80161b8:	89a3      	ldrh	r3, [r4, #12]
 80161ba:	f023 0303 	bic.w	r3, r3, #3
 80161be:	f043 0301 	orr.w	r3, r3, #1
 80161c2:	81a3      	strh	r3, [r4, #12]
 80161c4:	89a3      	ldrh	r3, [r4, #12]
 80161c6:	431d      	orrs	r5, r3
 80161c8:	81a5      	strh	r5, [r4, #12]
 80161ca:	e7cf      	b.n	801616c <__smakebuf_r+0x18>

080161cc <_putc_r>:
 80161cc:	b570      	push	{r4, r5, r6, lr}
 80161ce:	460d      	mov	r5, r1
 80161d0:	4614      	mov	r4, r2
 80161d2:	4606      	mov	r6, r0
 80161d4:	b118      	cbz	r0, 80161de <_putc_r+0x12>
 80161d6:	6a03      	ldr	r3, [r0, #32]
 80161d8:	b90b      	cbnz	r3, 80161de <_putc_r+0x12>
 80161da:	f7ff f8cf 	bl	801537c <__sinit>
 80161de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80161e0:	07d8      	lsls	r0, r3, #31
 80161e2:	d405      	bmi.n	80161f0 <_putc_r+0x24>
 80161e4:	89a3      	ldrh	r3, [r4, #12]
 80161e6:	0599      	lsls	r1, r3, #22
 80161e8:	d402      	bmi.n	80161f0 <_putc_r+0x24>
 80161ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80161ec:	f7ff facf 	bl	801578e <__retarget_lock_acquire_recursive>
 80161f0:	68a3      	ldr	r3, [r4, #8]
 80161f2:	3b01      	subs	r3, #1
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	60a3      	str	r3, [r4, #8]
 80161f8:	da05      	bge.n	8016206 <_putc_r+0x3a>
 80161fa:	69a2      	ldr	r2, [r4, #24]
 80161fc:	4293      	cmp	r3, r2
 80161fe:	db12      	blt.n	8016226 <_putc_r+0x5a>
 8016200:	b2eb      	uxtb	r3, r5
 8016202:	2b0a      	cmp	r3, #10
 8016204:	d00f      	beq.n	8016226 <_putc_r+0x5a>
 8016206:	6823      	ldr	r3, [r4, #0]
 8016208:	1c5a      	adds	r2, r3, #1
 801620a:	6022      	str	r2, [r4, #0]
 801620c:	701d      	strb	r5, [r3, #0]
 801620e:	b2ed      	uxtb	r5, r5
 8016210:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016212:	07da      	lsls	r2, r3, #31
 8016214:	d405      	bmi.n	8016222 <_putc_r+0x56>
 8016216:	89a3      	ldrh	r3, [r4, #12]
 8016218:	059b      	lsls	r3, r3, #22
 801621a:	d402      	bmi.n	8016222 <_putc_r+0x56>
 801621c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801621e:	f7ff fab7 	bl	8015790 <__retarget_lock_release_recursive>
 8016222:	4628      	mov	r0, r5
 8016224:	bd70      	pop	{r4, r5, r6, pc}
 8016226:	4629      	mov	r1, r5
 8016228:	4622      	mov	r2, r4
 801622a:	4630      	mov	r0, r6
 801622c:	f7ff f997 	bl	801555e <__swbuf_r>
 8016230:	4605      	mov	r5, r0
 8016232:	e7ed      	b.n	8016210 <_putc_r+0x44>

08016234 <_fstat_r>:
 8016234:	b538      	push	{r3, r4, r5, lr}
 8016236:	4d07      	ldr	r5, [pc, #28]	@ (8016254 <_fstat_r+0x20>)
 8016238:	2300      	movs	r3, #0
 801623a:	4604      	mov	r4, r0
 801623c:	4608      	mov	r0, r1
 801623e:	4611      	mov	r1, r2
 8016240:	602b      	str	r3, [r5, #0]
 8016242:	f7ea fdd7 	bl	8000df4 <_fstat>
 8016246:	1c43      	adds	r3, r0, #1
 8016248:	d102      	bne.n	8016250 <_fstat_r+0x1c>
 801624a:	682b      	ldr	r3, [r5, #0]
 801624c:	b103      	cbz	r3, 8016250 <_fstat_r+0x1c>
 801624e:	6023      	str	r3, [r4, #0]
 8016250:	bd38      	pop	{r3, r4, r5, pc}
 8016252:	bf00      	nop
 8016254:	24003570 	.word	0x24003570

08016258 <_isatty_r>:
 8016258:	b538      	push	{r3, r4, r5, lr}
 801625a:	4d06      	ldr	r5, [pc, #24]	@ (8016274 <_isatty_r+0x1c>)
 801625c:	2300      	movs	r3, #0
 801625e:	4604      	mov	r4, r0
 8016260:	4608      	mov	r0, r1
 8016262:	602b      	str	r3, [r5, #0]
 8016264:	f7ea fdd6 	bl	8000e14 <_isatty>
 8016268:	1c43      	adds	r3, r0, #1
 801626a:	d102      	bne.n	8016272 <_isatty_r+0x1a>
 801626c:	682b      	ldr	r3, [r5, #0]
 801626e:	b103      	cbz	r3, 8016272 <_isatty_r+0x1a>
 8016270:	6023      	str	r3, [r4, #0]
 8016272:	bd38      	pop	{r3, r4, r5, pc}
 8016274:	24003570 	.word	0x24003570

08016278 <_sbrk_r>:
 8016278:	b538      	push	{r3, r4, r5, lr}
 801627a:	4d06      	ldr	r5, [pc, #24]	@ (8016294 <_sbrk_r+0x1c>)
 801627c:	2300      	movs	r3, #0
 801627e:	4604      	mov	r4, r0
 8016280:	4608      	mov	r0, r1
 8016282:	602b      	str	r3, [r5, #0]
 8016284:	f7ea fdde 	bl	8000e44 <_sbrk>
 8016288:	1c43      	adds	r3, r0, #1
 801628a:	d102      	bne.n	8016292 <_sbrk_r+0x1a>
 801628c:	682b      	ldr	r3, [r5, #0]
 801628e:	b103      	cbz	r3, 8016292 <_sbrk_r+0x1a>
 8016290:	6023      	str	r3, [r4, #0]
 8016292:	bd38      	pop	{r3, r4, r5, pc}
 8016294:	24003570 	.word	0x24003570

08016298 <abort>:
 8016298:	b508      	push	{r3, lr}
 801629a:	2006      	movs	r0, #6
 801629c:	f000 f82c 	bl	80162f8 <raise>
 80162a0:	2001      	movs	r0, #1
 80162a2:	f7ea fd73 	bl	8000d8c <_exit>

080162a6 <_raise_r>:
 80162a6:	291f      	cmp	r1, #31
 80162a8:	b538      	push	{r3, r4, r5, lr}
 80162aa:	4605      	mov	r5, r0
 80162ac:	460c      	mov	r4, r1
 80162ae:	d904      	bls.n	80162ba <_raise_r+0x14>
 80162b0:	2316      	movs	r3, #22
 80162b2:	6003      	str	r3, [r0, #0]
 80162b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80162b8:	bd38      	pop	{r3, r4, r5, pc}
 80162ba:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80162bc:	b112      	cbz	r2, 80162c4 <_raise_r+0x1e>
 80162be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80162c2:	b94b      	cbnz	r3, 80162d8 <_raise_r+0x32>
 80162c4:	4628      	mov	r0, r5
 80162c6:	f000 f831 	bl	801632c <_getpid_r>
 80162ca:	4622      	mov	r2, r4
 80162cc:	4601      	mov	r1, r0
 80162ce:	4628      	mov	r0, r5
 80162d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80162d4:	f000 b818 	b.w	8016308 <_kill_r>
 80162d8:	2b01      	cmp	r3, #1
 80162da:	d00a      	beq.n	80162f2 <_raise_r+0x4c>
 80162dc:	1c59      	adds	r1, r3, #1
 80162de:	d103      	bne.n	80162e8 <_raise_r+0x42>
 80162e0:	2316      	movs	r3, #22
 80162e2:	6003      	str	r3, [r0, #0]
 80162e4:	2001      	movs	r0, #1
 80162e6:	e7e7      	b.n	80162b8 <_raise_r+0x12>
 80162e8:	2100      	movs	r1, #0
 80162ea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80162ee:	4620      	mov	r0, r4
 80162f0:	4798      	blx	r3
 80162f2:	2000      	movs	r0, #0
 80162f4:	e7e0      	b.n	80162b8 <_raise_r+0x12>
	...

080162f8 <raise>:
 80162f8:	4b02      	ldr	r3, [pc, #8]	@ (8016304 <raise+0xc>)
 80162fa:	4601      	mov	r1, r0
 80162fc:	6818      	ldr	r0, [r3, #0]
 80162fe:	f7ff bfd2 	b.w	80162a6 <_raise_r>
 8016302:	bf00      	nop
 8016304:	24000094 	.word	0x24000094

08016308 <_kill_r>:
 8016308:	b538      	push	{r3, r4, r5, lr}
 801630a:	4d07      	ldr	r5, [pc, #28]	@ (8016328 <_kill_r+0x20>)
 801630c:	2300      	movs	r3, #0
 801630e:	4604      	mov	r4, r0
 8016310:	4608      	mov	r0, r1
 8016312:	4611      	mov	r1, r2
 8016314:	602b      	str	r3, [r5, #0]
 8016316:	f7ea fd27 	bl	8000d68 <_kill>
 801631a:	1c43      	adds	r3, r0, #1
 801631c:	d102      	bne.n	8016324 <_kill_r+0x1c>
 801631e:	682b      	ldr	r3, [r5, #0]
 8016320:	b103      	cbz	r3, 8016324 <_kill_r+0x1c>
 8016322:	6023      	str	r3, [r4, #0]
 8016324:	bd38      	pop	{r3, r4, r5, pc}
 8016326:	bf00      	nop
 8016328:	24003570 	.word	0x24003570

0801632c <_getpid_r>:
 801632c:	f7ea bd14 	b.w	8000d58 <_getpid>

08016330 <_init>:
 8016330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016332:	bf00      	nop
 8016334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016336:	bc08      	pop	{r3}
 8016338:	469e      	mov	lr, r3
 801633a:	4770      	bx	lr

0801633c <_fini>:
 801633c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801633e:	bf00      	nop
 8016340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016342:	bc08      	pop	{r3}
 8016344:	469e      	mov	lr, r3
 8016346:	4770      	bx	lr
