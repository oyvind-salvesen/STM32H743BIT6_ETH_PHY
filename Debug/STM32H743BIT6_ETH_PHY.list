
STM32H743BIT6_ETH_PHY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001797c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000613c  08017c1c  08017c1c  00018c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801dd58  0801dd58  0001ed58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801dd60  0801dd60  0001ed60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801dd64  0801dd64  0001ed64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000e8  24000000  0801dd68  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000034e8  240000e8  0801de50  0001f0e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240035d0  0801de50  0001f5d0  2**0
                  ALLOC
  9 .lwip_sec     00044b83  30000000  30000000  00020000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0001f0e8  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002e522  00000000  00000000  0001f116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006a09  00000000  00000000  0004d638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002058  00000000  00000000  00054048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000019c7  00000000  00000000  000560a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000464f3  00000000  00000000  00057a67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00036aa6  00000000  00000000  0009df5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017f1ce  00000000  00000000  000d4a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00253bce  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00009064  00000000  00000000  00253c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000052  00000000  00000000  0025cc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000e8 	.word	0x240000e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017c04 	.word	0x08017c04

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000ec 	.word	0x240000ec
 80002dc:	08017c04 	.word	0x08017c04

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000676:	f000 f9b9 	bl	80009ec <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800067a:	4b3f      	ldr	r3, [pc, #252]	@ (8000778 <main+0x108>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000682:	2b00      	cmp	r3, #0
 8000684:	d11b      	bne.n	80006be <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000686:	f3bf 8f4f 	dsb	sy
}
 800068a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800068c:	f3bf 8f6f 	isb	sy
}
 8000690:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000692:	4b39      	ldr	r3, [pc, #228]	@ (8000778 <main+0x108>)
 8000694:	2200      	movs	r2, #0
 8000696:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800069a:	f3bf 8f4f 	dsb	sy
}
 800069e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006a0:	f3bf 8f6f 	isb	sy
}
 80006a4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006a6:	4b34      	ldr	r3, [pc, #208]	@ (8000778 <main+0x108>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	4a33      	ldr	r2, [pc, #204]	@ (8000778 <main+0x108>)
 80006ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006b0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006b2:	f3bf 8f4f 	dsb	sy
}
 80006b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006b8:	f3bf 8f6f 	isb	sy
}
 80006bc:	e000      	b.n	80006c0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006be:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000778 <main+0x108>)
 80006c2:	695b      	ldr	r3, [r3, #20]
 80006c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d138      	bne.n	800073e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000778 <main+0x108>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006d4:	f3bf 8f4f 	dsb	sy
}
 80006d8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006da:	4b27      	ldr	r3, [pc, #156]	@ (8000778 <main+0x108>)
 80006dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80006e0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	0b5b      	lsrs	r3, r3, #13
 80006e6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80006ea:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	08db      	lsrs	r3, r3, #3
 80006f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80006f4:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	015a      	lsls	r2, r3, #5
 80006fa:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80006fe:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000704:	491c      	ldr	r1, [pc, #112]	@ (8000778 <main+0x108>)
 8000706:	4313      	orrs	r3, r2
 8000708:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	1e5a      	subs	r2, r3, #1
 8000710:	607a      	str	r2, [r7, #4]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d1ef      	bne.n	80006f6 <main+0x86>
    } while(sets-- != 0U);
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	1e5a      	subs	r2, r3, #1
 800071a:	60ba      	str	r2, [r7, #8]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d1e5      	bne.n	80006ec <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000720:	f3bf 8f4f 	dsb	sy
}
 8000724:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000726:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <main+0x108>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	4a13      	ldr	r2, [pc, #76]	@ (8000778 <main+0x108>)
 800072c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000730:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000732:	f3bf 8f4f 	dsb	sy
}
 8000736:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000738:	f3bf 8f6f 	isb	sy
}
 800073c:	e000      	b.n	8000740 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800073e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000740:	f000 fdee 	bl	8001320 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(3500);
 8000744:	f640 50ac 	movw	r0, #3500	@ 0xdac
 8000748:	f000 fe46 	bl	80013d8 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074c:	f000 f81a 	bl	8000784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000750:	f000 f8e0 	bl	8000914 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000754:	f000 f892 	bl	800087c <MX_USART1_UART_Init>
  MX_LWIP_Init();
 8000758:	f008 f9d0 	bl	8008afc <MX_LWIP_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ethernetif_input_own(&gnetif);
 800075c:	4807      	ldr	r0, [pc, #28]	@ (800077c <main+0x10c>)
 800075e:	f008 fbe3 	bl	8008f28 <ethernetif_input_own>
	  sys_check_timeouts();
 8000762:	f010 faa3 	bl	8010cac <sys_check_timeouts>

	  printf("Hello World \n\r");
 8000766:	4806      	ldr	r0, [pc, #24]	@ (8000780 <main+0x110>)
 8000768:	f016 faa8 	bl	8016cbc <iprintf>
	  HAL_Delay(500);
 800076c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000770:	f000 fe32 	bl	80013d8 <HAL_Delay>
	  ethernetif_input_own(&gnetif);
 8000774:	bf00      	nop
 8000776:	e7f1      	b.n	800075c <main+0xec>
 8000778:	e000ed00 	.word	0xe000ed00
 800077c:	240001ec 	.word	0x240001ec
 8000780:	08017c1c 	.word	0x08017c1c

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b09c      	sub	sp, #112	@ 0x70
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800078e:	224c      	movs	r2, #76	@ 0x4c
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f016 fbf2 	bl	8016f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2220      	movs	r2, #32
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f016 fbec 	bl	8016f7c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007a4:	2002      	movs	r0, #2
 80007a6:	f003 faad 	bl	8003d04 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	4b31      	ldr	r3, [pc, #196]	@ (8000874 <SystemClock_Config+0xf0>)
 80007b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007b2:	4a30      	ldr	r2, [pc, #192]	@ (8000874 <SystemClock_Config+0xf0>)
 80007b4:	f023 0301 	bic.w	r3, r3, #1
 80007b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80007ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000874 <SystemClock_Config+0xf0>)
 80007bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000878 <SystemClock_Config+0xf4>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a2b      	ldr	r2, [pc, #172]	@ (8000878 <SystemClock_Config+0xf4>)
 80007ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b29      	ldr	r3, [pc, #164]	@ (8000878 <SystemClock_Config+0xf4>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007dc:	bf00      	nop
 80007de:	4b26      	ldr	r3, [pc, #152]	@ (8000878 <SystemClock_Config+0xf4>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007ea:	d1f8      	bne.n	80007de <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ec:	2301      	movs	r3, #1
 80007ee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f6:	2302      	movs	r3, #2
 80007f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fa:	2302      	movs	r3, #2
 80007fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80007fe:	2302      	movs	r3, #2
 8000800:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 93;
 8000802:	235d      	movs	r3, #93	@ 0x5d
 8000804:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000806:	2302      	movs	r3, #2
 8000808:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800080a:	2302      	movs	r3, #2
 800080c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800080e:	2302      	movs	r3, #2
 8000810:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000812:	230c      	movs	r3, #12
 8000814:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000816:	2300      	movs	r3, #0
 8000818:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 800081a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800081e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000820:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000824:	4618      	mov	r0, r3
 8000826:	f003 faa7 	bl	8003d78 <HAL_RCC_OscConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000830:	f000 f940 	bl	8000ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000834:	233f      	movs	r3, #63	@ 0x3f
 8000836:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000838:	2303      	movs	r3, #3
 800083a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000840:	2308      	movs	r3, #8
 8000842:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000844:	2340      	movs	r3, #64	@ 0x40
 8000846:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000848:	2340      	movs	r3, #64	@ 0x40
 800084a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800084c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000850:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000852:	2340      	movs	r3, #64	@ 0x40
 8000854:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2102      	movs	r1, #2
 800085a:	4618      	mov	r0, r3
 800085c:	f003 fee6 	bl	800462c <HAL_RCC_ClockConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000866:	f000 f925 	bl	8000ab4 <Error_Handler>
  }
}
 800086a:	bf00      	nop
 800086c:	3770      	adds	r7, #112	@ 0x70
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	58000400 	.word	0x58000400
 8000878:	58024800 	.word	0x58024800

0800087c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000880:	4b22      	ldr	r3, [pc, #136]	@ (800090c <MX_USART1_UART_Init+0x90>)
 8000882:	4a23      	ldr	r2, [pc, #140]	@ (8000910 <MX_USART1_UART_Init+0x94>)
 8000884:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000886:	4b21      	ldr	r3, [pc, #132]	@ (800090c <MX_USART1_UART_Init+0x90>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b1f      	ldr	r3, [pc, #124]	@ (800090c <MX_USART1_UART_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b1d      	ldr	r3, [pc, #116]	@ (800090c <MX_USART1_UART_Init+0x90>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800089a:	4b1c      	ldr	r3, [pc, #112]	@ (800090c <MX_USART1_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b1a      	ldr	r3, [pc, #104]	@ (800090c <MX_USART1_UART_Init+0x90>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b19      	ldr	r3, [pc, #100]	@ (800090c <MX_USART1_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b17      	ldr	r3, [pc, #92]	@ (800090c <MX_USART1_UART_Init+0x90>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b2:	4b16      	ldr	r3, [pc, #88]	@ (800090c <MX_USART1_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008b8:	4b14      	ldr	r3, [pc, #80]	@ (800090c <MX_USART1_UART_Init+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008be:	4b13      	ldr	r3, [pc, #76]	@ (800090c <MX_USART1_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c4:	4811      	ldr	r0, [pc, #68]	@ (800090c <MX_USART1_UART_Init+0x90>)
 80008c6:	f006 fb77 	bl	8006fb8 <HAL_UART_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008d0:	f000 f8f0 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d4:	2100      	movs	r1, #0
 80008d6:	480d      	ldr	r0, [pc, #52]	@ (800090c <MX_USART1_UART_Init+0x90>)
 80008d8:	f008 f846 	bl	8008968 <HAL_UARTEx_SetTxFifoThreshold>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008e2:	f000 f8e7 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e6:	2100      	movs	r1, #0
 80008e8:	4808      	ldr	r0, [pc, #32]	@ (800090c <MX_USART1_UART_Init+0x90>)
 80008ea:	f008 f87b 	bl	80089e4 <HAL_UARTEx_SetRxFifoThreshold>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008f4:	f000 f8de 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008f8:	4804      	ldr	r0, [pc, #16]	@ (800090c <MX_USART1_UART_Init+0x90>)
 80008fa:	f007 fffc 	bl	80088f6 <HAL_UARTEx_DisableFifoMode>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000904:	f000 f8d6 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	24000104 	.word	0x24000104
 8000910:	40011000 	.word	0x40011000

08000914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000914:	b480      	push	{r7}
 8000916:	b087      	sub	sp, #28
 8000918:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091a:	4b28      	ldr	r3, [pc, #160]	@ (80009bc <MX_GPIO_Init+0xa8>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000920:	4a26      	ldr	r2, [pc, #152]	@ (80009bc <MX_GPIO_Init+0xa8>)
 8000922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000926:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800092a:	4b24      	ldr	r3, [pc, #144]	@ (80009bc <MX_GPIO_Init+0xa8>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000930:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000938:	4b20      	ldr	r3, [pc, #128]	@ (80009bc <MX_GPIO_Init+0xa8>)
 800093a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800093e:	4a1f      	ldr	r2, [pc, #124]	@ (80009bc <MX_GPIO_Init+0xa8>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000948:	4b1c      	ldr	r3, [pc, #112]	@ (80009bc <MX_GPIO_Init+0xa8>)
 800094a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800094e:	f003 0304 	and.w	r3, r3, #4
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b19      	ldr	r3, [pc, #100]	@ (80009bc <MX_GPIO_Init+0xa8>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800095c:	4a17      	ldr	r2, [pc, #92]	@ (80009bc <MX_GPIO_Init+0xa8>)
 800095e:	f043 0301 	orr.w	r3, r3, #1
 8000962:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000966:	4b15      	ldr	r3, [pc, #84]	@ (80009bc <MX_GPIO_Init+0xa8>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000974:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <MX_GPIO_Init+0xa8>)
 8000976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800097a:	4a10      	ldr	r2, [pc, #64]	@ (80009bc <MX_GPIO_Init+0xa8>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000984:	4b0d      	ldr	r3, [pc, #52]	@ (80009bc <MX_GPIO_Init+0xa8>)
 8000986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000992:	4b0a      	ldr	r3, [pc, #40]	@ (80009bc <MX_GPIO_Init+0xa8>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000998:	4a08      	ldr	r2, [pc, #32]	@ (80009bc <MX_GPIO_Init+0xa8>)
 800099a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800099e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009a2:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <MX_GPIO_Init+0xa8>)
 80009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b0:	bf00      	nop
 80009b2:	371c      	adds	r7, #28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	58024400 	.word	0x58024400

080009c0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
    // Send data via UART (for example, using UART1)
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009d4:	68b9      	ldr	r1, [r7, #8]
 80009d6:	4804      	ldr	r0, [pc, #16]	@ (80009e8 <_write+0x28>)
 80009d8:	f006 fb3e 	bl	8007058 <HAL_UART_Transmit>
    return len;
 80009dc:	687b      	ldr	r3, [r7, #4]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	24000104 	.word	0x24000104

080009ec <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80009f2:	463b      	mov	r3, r7
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80009fe:	f000 fe0f 	bl	8001620 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a02:	2301      	movs	r3, #1
 8000a04:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a0e:	231f      	movs	r3, #31
 8000a10:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a12:	2387      	movs	r3, #135	@ 0x87
 8000a14:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a22:	2301      	movs	r3, #1
 8000a24:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a2e:	463b      	mov	r3, r7
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 fe2d 	bl	8001690 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000a36:	2301      	movs	r3, #1
 8000a38:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8000a3a:	4b13      	ldr	r3, [pc, #76]	@ (8000a88 <MPU_Config+0x9c>)
 8000a3c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000a3e:	2310      	movs	r3, #16
 8000a40:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000a46:	2301      	movs	r3, #1
 8000a48:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a52:	463b      	mov	r3, r7
 8000a54:	4618      	mov	r0, r3
 8000a56:	f000 fe1b 	bl	8001690 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <MPU_Config+0xa0>)
 8000a60:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000a62:	2308      	movs	r3, #8
 8000a64:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a72:	463b      	mov	r3, r7
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 fe0b 	bl	8001690 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a7a:	2004      	movs	r0, #4
 8000a7c:	f000 fde8 	bl	8001650 <HAL_MPU_Enable>

}
 8000a80:	bf00      	nop
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	30020000 	.word	0x30020000
 8000a8c:	30040000 	.word	0x30040000

08000a90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a04      	ldr	r2, [pc, #16]	@ (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d101      	bne.n	8000aa6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aa2:	f000 fc79 	bl	8001398 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40001000 	.word	0x40001000

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <Error_Handler+0x8>

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8000af0 <HAL_MspInit+0x30>)
 8000ac8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000acc:	4a08      	ldr	r2, [pc, #32]	@ (8000af0 <HAL_MspInit+0x30>)
 8000ace:	f043 0302 	orr.w	r3, r3, #2
 8000ad2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <HAL_MspInit+0x30>)
 8000ad8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000adc:	f003 0302 	and.w	r3, r3, #2
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	58024400 	.word	0x58024400

08000af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b0ba      	sub	sp, #232	@ 0xe8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	22c0      	movs	r2, #192	@ 0xc0
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f016 fa31 	bl	8016f7c <memset>
  if(huart->Instance==USART1)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a33      	ldr	r2, [pc, #204]	@ (8000bec <HAL_UART_MspInit+0xf8>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d15f      	bne.n	8000be4 <HAL_UART_MspInit+0xf0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b24:	f04f 0201 	mov.w	r2, #1
 8000b28:	f04f 0300 	mov.w	r3, #0
 8000b2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 16;
 8000b30:	2310      	movs	r3, #16
 8000b32:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 372;
 8000b34:	f44f 73ba 	mov.w	r3, #372	@ 0x174
 8000b38:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 8;
 8000b3e:	2308      	movs	r3, #8
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000b42:	2302      	movs	r3, #2
 8000b44:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL2;
 8000b52:	2308      	movs	r3, #8
 8000b54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f004 f931 	bl	8004dc4 <HAL_RCCEx_PeriphCLKConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <HAL_UART_MspInit+0x78>
    {
      Error_Handler();
 8000b68:	f7ff ffa4 	bl	8000ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b6c:	4b20      	ldr	r3, [pc, #128]	@ (8000bf0 <HAL_UART_MspInit+0xfc>)
 8000b6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000b72:	4a1f      	ldr	r2, [pc, #124]	@ (8000bf0 <HAL_UART_MspInit+0xfc>)
 8000b74:	f043 0310 	orr.w	r3, r3, #16
 8000b78:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf0 <HAL_UART_MspInit+0xfc>)
 8000b7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000b82:	f003 0310 	and.w	r3, r3, #16
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b19      	ldr	r3, [pc, #100]	@ (8000bf0 <HAL_UART_MspInit+0xfc>)
 8000b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b90:	4a17      	ldr	r2, [pc, #92]	@ (8000bf0 <HAL_UART_MspInit+0xfc>)
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b9a:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <HAL_UART_MspInit+0xfc>)
 8000b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ba8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000bac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bc2:	2307      	movs	r3, #7
 8000bc4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4809      	ldr	r0, [pc, #36]	@ (8000bf4 <HAL_UART_MspInit+0x100>)
 8000bd0:	f002 fee8 	bl	80039a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2025      	movs	r0, #37	@ 0x25
 8000bda:	f000 fcf9 	bl	80015d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bde:	2025      	movs	r0, #37	@ 0x25
 8000be0:	f000 fd10 	bl	8001604 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000be4:	bf00      	nop
 8000be6:	37e8      	adds	r7, #232	@ 0xe8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40011000 	.word	0x40011000
 8000bf0:	58024400 	.word	0x58024400
 8000bf4:	58020000 	.word	0x58020000

08000bf8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b090      	sub	sp, #64	@ 0x40
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b0f      	cmp	r3, #15
 8000c04:	d827      	bhi.n	8000c56 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	6879      	ldr	r1, [r7, #4]
 8000c0a:	2036      	movs	r0, #54	@ 0x36
 8000c0c:	f000 fce0 	bl	80015d0 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c10:	2036      	movs	r0, #54	@ 0x36
 8000c12:	f000 fcf7 	bl	8001604 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000c16:	4a29      	ldr	r2, [pc, #164]	@ (8000cbc <HAL_InitTick+0xc4>)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c1c:	4b28      	ldr	r3, [pc, #160]	@ (8000cc0 <HAL_InitTick+0xc8>)
 8000c1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c22:	4a27      	ldr	r2, [pc, #156]	@ (8000cc0 <HAL_InitTick+0xc8>)
 8000c24:	f043 0310 	orr.w	r3, r3, #16
 8000c28:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c2c:	4b24      	ldr	r3, [pc, #144]	@ (8000cc0 <HAL_InitTick+0xc8>)
 8000c2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c32:	f003 0310 	and.w	r3, r3, #16
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c3a:	f107 0210 	add.w	r2, r7, #16
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4611      	mov	r1, r2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f004 f87b 	bl	8004d40 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d106      	bne.n	8000c62 <HAL_InitTick+0x6a>
 8000c54:	e001      	b.n	8000c5a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e02b      	b.n	8000cb2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c5a:	f004 f845 	bl	8004ce8 <HAL_RCC_GetPCLK1Freq>
 8000c5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000c60:	e004      	b.n	8000c6c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c62:	f004 f841 	bl	8004ce8 <HAL_RCC_GetPCLK1Freq>
 8000c66:	4603      	mov	r3, r0
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c6e:	4a15      	ldr	r2, [pc, #84]	@ (8000cc4 <HAL_InitTick+0xcc>)
 8000c70:	fba2 2303 	umull	r2, r3, r2, r3
 8000c74:	0c9b      	lsrs	r3, r3, #18
 8000c76:	3b01      	subs	r3, #1
 8000c78:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c7a:	4b13      	ldr	r3, [pc, #76]	@ (8000cc8 <HAL_InitTick+0xd0>)
 8000c7c:	4a13      	ldr	r2, [pc, #76]	@ (8000ccc <HAL_InitTick+0xd4>)
 8000c7e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c80:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <HAL_InitTick+0xd0>)
 8000c82:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c86:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c88:	4a0f      	ldr	r2, [pc, #60]	@ (8000cc8 <HAL_InitTick+0xd0>)
 8000c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c8c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <HAL_InitTick+0xd0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc8 <HAL_InitTick+0xd0>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c9a:	480b      	ldr	r0, [pc, #44]	@ (8000cc8 <HAL_InitTick+0xd0>)
 8000c9c:	f005 febe 	bl	8006a1c <HAL_TIM_Base_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d104      	bne.n	8000cb0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ca6:	4808      	ldr	r0, [pc, #32]	@ (8000cc8 <HAL_InitTick+0xd0>)
 8000ca8:	f005 ff1a 	bl	8006ae0 <HAL_TIM_Base_Start_IT>
 8000cac:	4603      	mov	r3, r0
 8000cae:	e000      	b.n	8000cb2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3740      	adds	r7, #64	@ 0x40
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	24000008 	.word	0x24000008
 8000cc0:	58024400 	.word	0x58024400
 8000cc4:	431bde83 	.word	0x431bde83
 8000cc8:	24000198 	.word	0x24000198
 8000ccc:	40001000 	.word	0x40001000

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <HardFault_Handler+0x4>

08000ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <MemManage_Handler+0x4>

08000ce8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <BusFault_Handler+0x4>

08000cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <UsageFault_Handler+0x4>

08000cf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d34:	4802      	ldr	r0, [pc, #8]	@ (8000d40 <USART1_IRQHandler+0x10>)
 8000d36:	f006 fa1d 	bl	8007174 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	24000104 	.word	0x24000104

08000d44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d48:	4802      	ldr	r0, [pc, #8]	@ (8000d54 <TIM6_DAC_IRQHandler+0x10>)
 8000d4a:	f005 ff41 	bl	8006bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	24000198 	.word	0x24000198

08000d58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return 1;
 8000d5c:	2301      	movs	r3, #1
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <_kill>:

int _kill(int pid, int sig)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d72:	4b05      	ldr	r3, [pc, #20]	@ (8000d88 <_kill+0x20>)
 8000d74:	2216      	movs	r2, #22
 8000d76:	601a      	str	r2, [r3, #0]
  return -1;
 8000d78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	240035c0 	.word	0x240035c0

08000d8c <_exit>:

void _exit (int status)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ffe5 	bl	8000d68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d9e:	bf00      	nop
 8000da0:	e7fd      	b.n	8000d9e <_exit+0x12>

08000da2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b086      	sub	sp, #24
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	60f8      	str	r0, [r7, #12]
 8000daa:	60b9      	str	r1, [r7, #8]
 8000dac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	e00a      	b.n	8000dca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000db4:	f3af 8000 	nop.w
 8000db8:	4601      	mov	r1, r0
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	1c5a      	adds	r2, r3, #1
 8000dbe:	60ba      	str	r2, [r7, #8]
 8000dc0:	b2ca      	uxtb	r2, r1
 8000dc2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	617b      	str	r3, [r7, #20]
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	dbf0      	blt.n	8000db4 <_read+0x12>
  }

  return len;
 8000dd2:	687b      	ldr	r3, [r7, #4]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000de4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e04:	605a      	str	r2, [r3, #4]
  return 0;
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <_isatty>:

int _isatty(int file)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e1c:	2301      	movs	r3, #1
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b085      	sub	sp, #20
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	60f8      	str	r0, [r7, #12]
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e36:	2300      	movs	r3, #0
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b087      	sub	sp, #28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e4c:	4a14      	ldr	r2, [pc, #80]	@ (8000ea0 <_sbrk+0x5c>)
 8000e4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <_sbrk+0x60>)
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e58:	4b13      	ldr	r3, [pc, #76]	@ (8000ea8 <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d102      	bne.n	8000e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e60:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <_sbrk+0x64>)
 8000e62:	4a12      	ldr	r2, [pc, #72]	@ (8000eac <_sbrk+0x68>)
 8000e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e66:	4b10      	ldr	r3, [pc, #64]	@ (8000ea8 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d205      	bcs.n	8000e80 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000e74:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb0 <_sbrk+0x6c>)
 8000e76:	220c      	movs	r2, #12
 8000e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e7e:	e009      	b.n	8000e94 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e80:	4b09      	ldr	r3, [pc, #36]	@ (8000ea8 <_sbrk+0x64>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e86:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <_sbrk+0x64>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4a06      	ldr	r2, [pc, #24]	@ (8000ea8 <_sbrk+0x64>)
 8000e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e92:	68fb      	ldr	r3, [r7, #12]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	371c      	adds	r7, #28
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	24080000 	.word	0x24080000
 8000ea4:	00000400 	.word	0x00000400
 8000ea8:	240001e4 	.word	0x240001e4
 8000eac:	240035d0 	.word	0x240035d0
 8000eb0:	240035c0 	.word	0x240035c0

08000eb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000eb8:	4b37      	ldr	r3, [pc, #220]	@ (8000f98 <SystemInit+0xe4>)
 8000eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ebe:	4a36      	ldr	r2, [pc, #216]	@ (8000f98 <SystemInit+0xe4>)
 8000ec0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ec4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ec8:	4b34      	ldr	r3, [pc, #208]	@ (8000f9c <SystemInit+0xe8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 030f 	and.w	r3, r3, #15
 8000ed0:	2b06      	cmp	r3, #6
 8000ed2:	d807      	bhi.n	8000ee4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ed4:	4b31      	ldr	r3, [pc, #196]	@ (8000f9c <SystemInit+0xe8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f023 030f 	bic.w	r3, r3, #15
 8000edc:	4a2f      	ldr	r2, [pc, #188]	@ (8000f9c <SystemInit+0xe8>)
 8000ede:	f043 0307 	orr.w	r3, r3, #7
 8000ee2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ee4:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa0 <SystemInit+0xec>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a2d      	ldr	r2, [pc, #180]	@ (8000fa0 <SystemInit+0xec>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ef0:	4b2b      	ldr	r3, [pc, #172]	@ (8000fa0 <SystemInit+0xec>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa0 <SystemInit+0xec>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	4929      	ldr	r1, [pc, #164]	@ (8000fa0 <SystemInit+0xec>)
 8000efc:	4b29      	ldr	r3, [pc, #164]	@ (8000fa4 <SystemInit+0xf0>)
 8000efe:	4013      	ands	r3, r2
 8000f00:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f02:	4b26      	ldr	r3, [pc, #152]	@ (8000f9c <SystemInit+0xe8>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 0308 	and.w	r3, r3, #8
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d007      	beq.n	8000f1e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f0e:	4b23      	ldr	r3, [pc, #140]	@ (8000f9c <SystemInit+0xe8>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f023 030f 	bic.w	r3, r3, #15
 8000f16:	4a21      	ldr	r2, [pc, #132]	@ (8000f9c <SystemInit+0xe8>)
 8000f18:	f043 0307 	orr.w	r3, r3, #7
 8000f1c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f1e:	4b20      	ldr	r3, [pc, #128]	@ (8000fa0 <SystemInit+0xec>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f24:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa0 <SystemInit+0xec>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa0 <SystemInit+0xec>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f30:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa0 <SystemInit+0xec>)
 8000f32:	4a1d      	ldr	r2, [pc, #116]	@ (8000fa8 <SystemInit+0xf4>)
 8000f34:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f36:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa0 <SystemInit+0xec>)
 8000f38:	4a1c      	ldr	r2, [pc, #112]	@ (8000fac <SystemInit+0xf8>)
 8000f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f3c:	4b18      	ldr	r3, [pc, #96]	@ (8000fa0 <SystemInit+0xec>)
 8000f3e:	4a1c      	ldr	r2, [pc, #112]	@ (8000fb0 <SystemInit+0xfc>)
 8000f40:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f42:	4b17      	ldr	r3, [pc, #92]	@ (8000fa0 <SystemInit+0xec>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f48:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <SystemInit+0xec>)
 8000f4a:	4a19      	ldr	r2, [pc, #100]	@ (8000fb0 <SystemInit+0xfc>)
 8000f4c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f4e:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <SystemInit+0xec>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f54:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <SystemInit+0xec>)
 8000f56:	4a16      	ldr	r2, [pc, #88]	@ (8000fb0 <SystemInit+0xfc>)
 8000f58:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f5a:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <SystemInit+0xec>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa0 <SystemInit+0xec>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa0 <SystemInit+0xec>)
 8000f66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <SystemInit+0xec>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f72:	4b10      	ldr	r3, [pc, #64]	@ (8000fb4 <SystemInit+0x100>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <SystemInit+0x104>)
 8000f78:	4013      	ands	r3, r2
 8000f7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f7e:	d202      	bcs.n	8000f86 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f80:	4b0e      	ldr	r3, [pc, #56]	@ (8000fbc <SystemInit+0x108>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc0 <SystemInit+0x10c>)
 8000f88:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f8c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00
 8000f9c:	52002000 	.word	0x52002000
 8000fa0:	58024400 	.word	0x58024400
 8000fa4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000fa8:	02020200 	.word	0x02020200
 8000fac:	01ff0000 	.word	0x01ff0000
 8000fb0:	01010280 	.word	0x01010280
 8000fb4:	5c001000 	.word	0x5c001000
 8000fb8:	ffff0000 	.word	0xffff0000
 8000fbc:	51008108 	.word	0x51008108
 8000fc0:	52004000 	.word	0x52004000

08000fc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ffc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fc8:	f7ff ff74 	bl	8000eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fcc:	480c      	ldr	r0, [pc, #48]	@ (8001000 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fce:	490d      	ldr	r1, [pc, #52]	@ (8001004 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001008 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd4:	e002      	b.n	8000fdc <LoopCopyDataInit>

08000fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fda:	3304      	adds	r3, #4

08000fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe0:	d3f9      	bcc.n	8000fd6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800100c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fe4:	4c0a      	ldr	r4, [pc, #40]	@ (8001010 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe8:	e001      	b.n	8000fee <LoopFillZerobss>

08000fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fec:	3204      	adds	r2, #4

08000fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff0:	d3fb      	bcc.n	8000fea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ff2:	f016 f811 	bl	8017018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ff6:	f7ff fb3b 	bl	8000670 <main>
  bx  lr
 8000ffa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ffc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001000:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001004:	240000e8 	.word	0x240000e8
  ldr r2, =_sidata
 8001008:	0801dd68 	.word	0x0801dd68
  ldr r2, =_sbss
 800100c:	240000e8 	.word	0x240000e8
  ldr r4, =_ebss
 8001010:	240035d0 	.word	0x240035d0

08001014 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001014:	e7fe      	b.n	8001014 <ADC3_IRQHandler>

08001016 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d00b      	beq.n	800103e <DP83848_RegisterBusIO+0x28>
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d007      	beq.n	800103e <DP83848_RegisterBusIO+0x28>
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <DP83848_RegisterBusIO+0x28>
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	691b      	ldr	r3, [r3, #16]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d102      	bne.n	8001044 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 800103e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001042:	e014      	b.n	800106e <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	68da      	ldr	r2, [r3, #12]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	689a      	ldr	r2, [r3, #8]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	691a      	ldr	r2, [r3, #16]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <DP83848_Init>:
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ADDRESS_ERROR if cannot find device address
  *         DP83848_STATUS_READ_ERROR if connot read register
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 800107a:	b580      	push	{r7, lr}
 800107c:	b086      	sub	sp, #24
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d139      	bne.n	800110a <DP83848_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d002      	beq.n	80010a4 <DP83848_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2220      	movs	r2, #32
 80010a8:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	e01c      	b.n	80010ea <DP83848_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	f107 020c 	add.w	r2, r7, #12
 80010b8:	2119      	movs	r1, #25
 80010ba:	6978      	ldr	r0, [r7, #20]
 80010bc:	4798      	blx	r3
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	da03      	bge.n	80010cc <DP83848_Init+0x52>
       {
         status = DP83848_STATUS_READ_ERROR;
 80010c4:	f06f 0304 	mvn.w	r3, #4
 80010c8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80010ca:	e00b      	b.n	80010e4 <DP83848_Init+0x6a>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f003 031f 	and.w	r3, r3, #31
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d105      	bne.n	80010e4 <DP83848_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
         break;
 80010e2:	e005      	b.n	80010f0 <DP83848_Init+0x76>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	3301      	adds	r3, #1
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	2b1f      	cmp	r3, #31
 80010ee:	d9df      	bls.n	80010b0 <DP83848_Init+0x36>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b1f      	cmp	r3, #31
 80010f6:	d902      	bls.n	80010fe <DP83848_Init+0x84>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 80010f8:	f06f 0302 	mvn.w	r3, #2
 80010fc:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <DP83848_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2201      	movs	r2, #1
 8001108:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 800110a:	693b      	ldr	r3, [r7, #16]
 }
 800110c:	4618      	mov	r0, r3
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	6810      	ldr	r0, [r2, #0]
 8001128:	f107 020c 	add.w	r2, r7, #12
 800112c:	2101      	movs	r1, #1
 800112e:	4798      	blx	r3
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	da02      	bge.n	800113c <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8001136:	f06f 0304 	mvn.w	r3, #4
 800113a:	e06e      	b.n	800121a <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	6810      	ldr	r0, [r2, #0]
 8001144:	f107 020c 	add.w	r2, r7, #12
 8001148:	2101      	movs	r1, #1
 800114a:	4798      	blx	r3
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	da02      	bge.n	8001158 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8001152:	f06f 0304 	mvn.w	r3, #4
 8001156:	e060      	b.n	800121a <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8001162:	2301      	movs	r3, #1
 8001164:	e059      	b.n	800121a <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	6810      	ldr	r0, [r2, #0]
 800116e:	f107 020c 	add.w	r2, r7, #12
 8001172:	2100      	movs	r1, #0
 8001174:	4798      	blx	r3
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	da02      	bge.n	8001182 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 800117c:	f06f 0304 	mvn.w	r3, #4
 8001180:	e04b      	b.n	800121a <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d11b      	bne.n	80011c4 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d006      	beq.n	80011a4 <DP83848_GetLinkState+0x90>
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80011a0:	2302      	movs	r3, #2
 80011a2:	e03a      	b.n	800121a <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e033      	b.n	800121a <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 80011bc:	2304      	movs	r3, #4
 80011be:	e02c      	b.n	800121a <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 80011c0:	2305      	movs	r3, #5
 80011c2:	e02a      	b.n	800121a <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	6810      	ldr	r0, [r2, #0]
 80011cc:	f107 020c 	add.w	r2, r7, #12
 80011d0:	2110      	movs	r1, #16
 80011d2:	4798      	blx	r3
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	da02      	bge.n	80011e0 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 80011da:	f06f 0304 	mvn.w	r3, #4
 80011de:	e01c      	b.n	800121a <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f003 0310 	and.w	r3, r3, #16
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 80011ea:	2306      	movs	r3, #6
 80011ec:	e015      	b.n	800121a <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f003 0306 	and.w	r3, r3, #6
 80011f4:	2b04      	cmp	r3, #4
 80011f6:	d101      	bne.n	80011fc <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80011f8:	2302      	movs	r3, #2
 80011fa:	e00e      	b.n	800121a <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f003 0306 	and.w	r3, r3, #6
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8001206:	2303      	movs	r3, #3
 8001208:	e007      	b.n	800121a <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f003 0306 	and.w	r3, r3, #6
 8001210:	2b06      	cmp	r3, #6
 8001212:	d101      	bne.n	8001218 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8001214:	2304      	movs	r3, #4
 8001216:	e000      	b.n	800121a <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8001218:	2305      	movs	r3, #5
    }
  }
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00b      	beq.n	800124a <LAN8742_RegisterBusIO+0x28>
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d007      	beq.n	800124a <LAN8742_RegisterBusIO+0x28>
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <LAN8742_RegisterBusIO+0x28>
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d102      	bne.n	8001250 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800124a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800124e:	e014      	b.n	800127a <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	68da      	ldr	r2, [r3, #12]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	691a      	ldr	r2, [r3, #16]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001286:	b580      	push	{r7, lr}
 8001288:	b086      	sub	sp, #24
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d139      	bne.n	8001316 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d002      	beq.n	80012b0 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2220      	movs	r2, #32
 80012b4:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	e01c      	b.n	80012f6 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	f107 020c 	add.w	r2, r7, #12
 80012c4:	2112      	movs	r1, #18
 80012c6:	6978      	ldr	r0, [r7, #20]
 80012c8:	4798      	blx	r3
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	da03      	bge.n	80012d8 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80012d0:	f06f 0304 	mvn.w	r3, #4
 80012d4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80012d6:	e00b      	b.n	80012f0 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f003 031f 	and.w	r3, r3, #31
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d105      	bne.n	80012f0 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
         break;
 80012ee:	e005      	b.n	80012fc <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	3301      	adds	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	2b1f      	cmp	r3, #31
 80012fa:	d9df      	bls.n	80012bc <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b1f      	cmp	r3, #31
 8001302:	d902      	bls.n	800130a <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001304:	f06f 0302 	mvn.w	r3, #2
 8001308:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d102      	bne.n	8001316 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2201      	movs	r2, #1
 8001314:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001316:	693b      	ldr	r3, [r7, #16]
 }
 8001318:	4618      	mov	r0, r3
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001326:	2003      	movs	r0, #3
 8001328:	f000 f947 	bl	80015ba <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800132c:	f003 fb34 	bl	8004998 <HAL_RCC_GetSysClockFreq>
 8001330:	4602      	mov	r2, r0
 8001332:	4b15      	ldr	r3, [pc, #84]	@ (8001388 <HAL_Init+0x68>)
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	0a1b      	lsrs	r3, r3, #8
 8001338:	f003 030f 	and.w	r3, r3, #15
 800133c:	4913      	ldr	r1, [pc, #76]	@ (800138c <HAL_Init+0x6c>)
 800133e:	5ccb      	ldrb	r3, [r1, r3]
 8001340:	f003 031f 	and.w	r3, r3, #31
 8001344:	fa22 f303 	lsr.w	r3, r2, r3
 8001348:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800134a:	4b0f      	ldr	r3, [pc, #60]	@ (8001388 <HAL_Init+0x68>)
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	4a0e      	ldr	r2, [pc, #56]	@ (800138c <HAL_Init+0x6c>)
 8001354:	5cd3      	ldrb	r3, [r2, r3]
 8001356:	f003 031f 	and.w	r3, r3, #31
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	fa22 f303 	lsr.w	r3, r2, r3
 8001360:	4a0b      	ldr	r2, [pc, #44]	@ (8001390 <HAL_Init+0x70>)
 8001362:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001364:	4a0b      	ldr	r2, [pc, #44]	@ (8001394 <HAL_Init+0x74>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800136a:	200f      	movs	r0, #15
 800136c:	f7ff fc44 	bl	8000bf8 <HAL_InitTick>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e002      	b.n	8001380 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800137a:	f7ff fba1 	bl	8000ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	58024400 	.word	0x58024400
 800138c:	0801dad8 	.word	0x0801dad8
 8001390:	24000004 	.word	0x24000004
 8001394:	24000000 	.word	0x24000000

08001398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800139c:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <HAL_IncTick+0x20>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <HAL_IncTick+0x24>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4413      	add	r3, r2
 80013a8:	4a04      	ldr	r2, [pc, #16]	@ (80013bc <HAL_IncTick+0x24>)
 80013aa:	6013      	str	r3, [r2, #0]
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	2400000c 	.word	0x2400000c
 80013bc:	240001e8 	.word	0x240001e8

080013c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return uwTick;
 80013c4:	4b03      	ldr	r3, [pc, #12]	@ (80013d4 <HAL_GetTick+0x14>)
 80013c6:	681b      	ldr	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	240001e8 	.word	0x240001e8

080013d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013e0:	f7ff ffee 	bl	80013c0 <HAL_GetTick>
 80013e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80013f0:	d005      	beq.n	80013fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013f2:	4b0a      	ldr	r3, [pc, #40]	@ (800141c <HAL_Delay+0x44>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4413      	add	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013fe:	bf00      	nop
 8001400:	f7ff ffde 	bl	80013c0 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	429a      	cmp	r2, r3
 800140e:	d8f7      	bhi.n	8001400 <HAL_Delay+0x28>
  {
  }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	2400000c 	.word	0x2400000c

08001420 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001424:	4b03      	ldr	r3, [pc, #12]	@ (8001434 <HAL_GetREVID+0x14>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	0c1b      	lsrs	r3, r3, #16
}
 800142a:	4618      	mov	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	5c001000 	.word	0x5c001000

08001438 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001440:	4b06      	ldr	r3, [pc, #24]	@ (800145c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001448:	4904      	ldr	r1, [pc, #16]	@ (800145c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4313      	orrs	r3, r2
 800144e:	604b      	str	r3, [r1, #4]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	58000400 	.word	0x58000400

08001460 <__NVIC_SetPriorityGrouping>:
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001470:	4b0b      	ldr	r3, [pc, #44]	@ (80014a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800147c:	4013      	ands	r3, r2
 800147e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001488:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 800148a:	4313      	orrs	r3, r2
 800148c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148e:	4a04      	ldr	r2, [pc, #16]	@ (80014a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	60d3      	str	r3, [r2, #12]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00
 80014a4:	05fa0000 	.word	0x05fa0000

080014a8 <__NVIC_GetPriorityGrouping>:
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ac:	4b04      	ldr	r3, [pc, #16]	@ (80014c0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	0a1b      	lsrs	r3, r3, #8
 80014b2:	f003 0307 	and.w	r3, r3, #7
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_EnableIRQ>:
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	db0b      	blt.n	80014ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d6:	88fb      	ldrh	r3, [r7, #6]
 80014d8:	f003 021f 	and.w	r2, r3, #31
 80014dc:	4907      	ldr	r1, [pc, #28]	@ (80014fc <__NVIC_EnableIRQ+0x38>)
 80014de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e2:	095b      	lsrs	r3, r3, #5
 80014e4:	2001      	movs	r0, #1
 80014e6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000e100 	.word	0xe000e100

08001500 <__NVIC_SetPriority>:
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	6039      	str	r1, [r7, #0]
 800150a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800150c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001510:	2b00      	cmp	r3, #0
 8001512:	db0a      	blt.n	800152a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	b2da      	uxtb	r2, r3
 8001518:	490c      	ldr	r1, [pc, #48]	@ (800154c <__NVIC_SetPriority+0x4c>)
 800151a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800151e:	0112      	lsls	r2, r2, #4
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	440b      	add	r3, r1
 8001524:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001528:	e00a      	b.n	8001540 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	b2da      	uxtb	r2, r3
 800152e:	4908      	ldr	r1, [pc, #32]	@ (8001550 <__NVIC_SetPriority+0x50>)
 8001530:	88fb      	ldrh	r3, [r7, #6]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	3b04      	subs	r3, #4
 8001538:	0112      	lsls	r2, r2, #4
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	440b      	add	r3, r1
 800153e:	761a      	strb	r2, [r3, #24]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000e100 	.word	0xe000e100
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <NVIC_EncodePriority>:
{
 8001554:	b480      	push	{r7}
 8001556:	b089      	sub	sp, #36	@ 0x24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f1c3 0307 	rsb	r3, r3, #7
 800156e:	2b04      	cmp	r3, #4
 8001570:	bf28      	it	cs
 8001572:	2304      	movcs	r3, #4
 8001574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3304      	adds	r3, #4
 800157a:	2b06      	cmp	r3, #6
 800157c:	d902      	bls.n	8001584 <NVIC_EncodePriority+0x30>
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3b03      	subs	r3, #3
 8001582:	e000      	b.n	8001586 <NVIC_EncodePriority+0x32>
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43da      	mvns	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	401a      	ands	r2, r3
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800159c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	fa01 f303 	lsl.w	r3, r1, r3
 80015a6:	43d9      	mvns	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	4313      	orrs	r3, r2
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3724      	adds	r7, #36	@ 0x24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ff4c 	bl	8001460 <__NVIC_SetPriorityGrouping>
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015de:	f7ff ff63 	bl	80014a8 <__NVIC_GetPriorityGrouping>
 80015e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	68b9      	ldr	r1, [r7, #8]
 80015e8:	6978      	ldr	r0, [r7, #20]
 80015ea:	f7ff ffb3 	bl	8001554 <NVIC_EncodePriority>
 80015ee:	4602      	mov	r2, r0
 80015f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015f4:	4611      	mov	r1, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ff82 	bl	8001500 <__NVIC_SetPriority>
}
 80015fc:	bf00      	nop
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800160e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff56 	bl	80014c4 <__NVIC_EnableIRQ>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001624:	f3bf 8f5f 	dmb	sy
}
 8001628:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800162a:	4b07      	ldr	r3, [pc, #28]	@ (8001648 <HAL_MPU_Disable+0x28>)
 800162c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162e:	4a06      	ldr	r2, [pc, #24]	@ (8001648 <HAL_MPU_Disable+0x28>)
 8001630:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001634:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001636:	4b05      	ldr	r3, [pc, #20]	@ (800164c <HAL_MPU_Disable+0x2c>)
 8001638:	2200      	movs	r2, #0
 800163a:	605a      	str	r2, [r3, #4]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00
 800164c:	e000ed90 	.word	0xe000ed90

08001650 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001658:	4a0b      	ldr	r2, [pc, #44]	@ (8001688 <HAL_MPU_Enable+0x38>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001662:	4b0a      	ldr	r3, [pc, #40]	@ (800168c <HAL_MPU_Enable+0x3c>)
 8001664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001666:	4a09      	ldr	r2, [pc, #36]	@ (800168c <HAL_MPU_Enable+0x3c>)
 8001668:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800166c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800166e:	f3bf 8f4f 	dsb	sy
}
 8001672:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001674:	f3bf 8f6f 	isb	sy
}
 8001678:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000ed90 	.word	0xe000ed90
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	785a      	ldrb	r2, [r3, #1]
 800169c:	4b1b      	ldr	r3, [pc, #108]	@ (800170c <HAL_MPU_ConfigRegion+0x7c>)
 800169e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80016a0:	4b1a      	ldr	r3, [pc, #104]	@ (800170c <HAL_MPU_ConfigRegion+0x7c>)
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	4a19      	ldr	r2, [pc, #100]	@ (800170c <HAL_MPU_ConfigRegion+0x7c>)
 80016a6:	f023 0301 	bic.w	r3, r3, #1
 80016aa:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80016ac:	4a17      	ldr	r2, [pc, #92]	@ (800170c <HAL_MPU_ConfigRegion+0x7c>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	7b1b      	ldrb	r3, [r3, #12]
 80016b8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	7adb      	ldrb	r3, [r3, #11]
 80016be:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	7a9b      	ldrb	r3, [r3, #10]
 80016c6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80016c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	7b5b      	ldrb	r3, [r3, #13]
 80016ce:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80016d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	7b9b      	ldrb	r3, [r3, #14]
 80016d6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80016d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	7bdb      	ldrb	r3, [r3, #15]
 80016de:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80016e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	7a5b      	ldrb	r3, [r3, #9]
 80016e6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80016e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	7a1b      	ldrb	r3, [r3, #8]
 80016ee:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80016f0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	7812      	ldrb	r2, [r2, #0]
 80016f6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016f8:	4a04      	ldr	r2, [pc, #16]	@ (800170c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80016fa:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016fc:	6113      	str	r3, [r2, #16]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000ed90 	.word	0xe000ed90

08001710 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001718:	f7ff fe52 	bl	80013c0 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e2dc      	b.n	8001ce2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d008      	beq.n	8001746 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2280      	movs	r2, #128	@ 0x80
 8001738:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e2cd      	b.n	8001ce2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a76      	ldr	r2, [pc, #472]	@ (8001924 <HAL_DMA_Abort+0x214>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d04a      	beq.n	80017e6 <HAL_DMA_Abort+0xd6>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a74      	ldr	r2, [pc, #464]	@ (8001928 <HAL_DMA_Abort+0x218>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d045      	beq.n	80017e6 <HAL_DMA_Abort+0xd6>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a73      	ldr	r2, [pc, #460]	@ (800192c <HAL_DMA_Abort+0x21c>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d040      	beq.n	80017e6 <HAL_DMA_Abort+0xd6>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a71      	ldr	r2, [pc, #452]	@ (8001930 <HAL_DMA_Abort+0x220>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d03b      	beq.n	80017e6 <HAL_DMA_Abort+0xd6>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a70      	ldr	r2, [pc, #448]	@ (8001934 <HAL_DMA_Abort+0x224>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d036      	beq.n	80017e6 <HAL_DMA_Abort+0xd6>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a6e      	ldr	r2, [pc, #440]	@ (8001938 <HAL_DMA_Abort+0x228>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d031      	beq.n	80017e6 <HAL_DMA_Abort+0xd6>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a6d      	ldr	r2, [pc, #436]	@ (800193c <HAL_DMA_Abort+0x22c>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d02c      	beq.n	80017e6 <HAL_DMA_Abort+0xd6>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a6b      	ldr	r2, [pc, #428]	@ (8001940 <HAL_DMA_Abort+0x230>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d027      	beq.n	80017e6 <HAL_DMA_Abort+0xd6>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a6a      	ldr	r2, [pc, #424]	@ (8001944 <HAL_DMA_Abort+0x234>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d022      	beq.n	80017e6 <HAL_DMA_Abort+0xd6>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a68      	ldr	r2, [pc, #416]	@ (8001948 <HAL_DMA_Abort+0x238>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d01d      	beq.n	80017e6 <HAL_DMA_Abort+0xd6>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a67      	ldr	r2, [pc, #412]	@ (800194c <HAL_DMA_Abort+0x23c>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d018      	beq.n	80017e6 <HAL_DMA_Abort+0xd6>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a65      	ldr	r2, [pc, #404]	@ (8001950 <HAL_DMA_Abort+0x240>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d013      	beq.n	80017e6 <HAL_DMA_Abort+0xd6>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a64      	ldr	r2, [pc, #400]	@ (8001954 <HAL_DMA_Abort+0x244>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d00e      	beq.n	80017e6 <HAL_DMA_Abort+0xd6>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a62      	ldr	r2, [pc, #392]	@ (8001958 <HAL_DMA_Abort+0x248>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d009      	beq.n	80017e6 <HAL_DMA_Abort+0xd6>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a61      	ldr	r2, [pc, #388]	@ (800195c <HAL_DMA_Abort+0x24c>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d004      	beq.n	80017e6 <HAL_DMA_Abort+0xd6>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a5f      	ldr	r2, [pc, #380]	@ (8001960 <HAL_DMA_Abort+0x250>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d101      	bne.n	80017ea <HAL_DMA_Abort+0xda>
 80017e6:	2301      	movs	r3, #1
 80017e8:	e000      	b.n	80017ec <HAL_DMA_Abort+0xdc>
 80017ea:	2300      	movs	r3, #0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d013      	beq.n	8001818 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 021e 	bic.w	r2, r2, #30
 80017fe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	695a      	ldr	r2, [r3, #20]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800180e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	e00a      	b.n	800182e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 020e 	bic.w	r2, r2, #14
 8001826:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a3c      	ldr	r2, [pc, #240]	@ (8001924 <HAL_DMA_Abort+0x214>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d072      	beq.n	800191e <HAL_DMA_Abort+0x20e>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a3a      	ldr	r2, [pc, #232]	@ (8001928 <HAL_DMA_Abort+0x218>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d06d      	beq.n	800191e <HAL_DMA_Abort+0x20e>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a39      	ldr	r2, [pc, #228]	@ (800192c <HAL_DMA_Abort+0x21c>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d068      	beq.n	800191e <HAL_DMA_Abort+0x20e>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a37      	ldr	r2, [pc, #220]	@ (8001930 <HAL_DMA_Abort+0x220>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d063      	beq.n	800191e <HAL_DMA_Abort+0x20e>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a36      	ldr	r2, [pc, #216]	@ (8001934 <HAL_DMA_Abort+0x224>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d05e      	beq.n	800191e <HAL_DMA_Abort+0x20e>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a34      	ldr	r2, [pc, #208]	@ (8001938 <HAL_DMA_Abort+0x228>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d059      	beq.n	800191e <HAL_DMA_Abort+0x20e>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a33      	ldr	r2, [pc, #204]	@ (800193c <HAL_DMA_Abort+0x22c>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d054      	beq.n	800191e <HAL_DMA_Abort+0x20e>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a31      	ldr	r2, [pc, #196]	@ (8001940 <HAL_DMA_Abort+0x230>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d04f      	beq.n	800191e <HAL_DMA_Abort+0x20e>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a30      	ldr	r2, [pc, #192]	@ (8001944 <HAL_DMA_Abort+0x234>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d04a      	beq.n	800191e <HAL_DMA_Abort+0x20e>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a2e      	ldr	r2, [pc, #184]	@ (8001948 <HAL_DMA_Abort+0x238>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d045      	beq.n	800191e <HAL_DMA_Abort+0x20e>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a2d      	ldr	r2, [pc, #180]	@ (800194c <HAL_DMA_Abort+0x23c>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d040      	beq.n	800191e <HAL_DMA_Abort+0x20e>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a2b      	ldr	r2, [pc, #172]	@ (8001950 <HAL_DMA_Abort+0x240>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d03b      	beq.n	800191e <HAL_DMA_Abort+0x20e>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a2a      	ldr	r2, [pc, #168]	@ (8001954 <HAL_DMA_Abort+0x244>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d036      	beq.n	800191e <HAL_DMA_Abort+0x20e>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a28      	ldr	r2, [pc, #160]	@ (8001958 <HAL_DMA_Abort+0x248>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d031      	beq.n	800191e <HAL_DMA_Abort+0x20e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a27      	ldr	r2, [pc, #156]	@ (800195c <HAL_DMA_Abort+0x24c>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d02c      	beq.n	800191e <HAL_DMA_Abort+0x20e>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a25      	ldr	r2, [pc, #148]	@ (8001960 <HAL_DMA_Abort+0x250>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d027      	beq.n	800191e <HAL_DMA_Abort+0x20e>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a24      	ldr	r2, [pc, #144]	@ (8001964 <HAL_DMA_Abort+0x254>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d022      	beq.n	800191e <HAL_DMA_Abort+0x20e>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a22      	ldr	r2, [pc, #136]	@ (8001968 <HAL_DMA_Abort+0x258>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d01d      	beq.n	800191e <HAL_DMA_Abort+0x20e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a21      	ldr	r2, [pc, #132]	@ (800196c <HAL_DMA_Abort+0x25c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d018      	beq.n	800191e <HAL_DMA_Abort+0x20e>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a1f      	ldr	r2, [pc, #124]	@ (8001970 <HAL_DMA_Abort+0x260>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d013      	beq.n	800191e <HAL_DMA_Abort+0x20e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001974 <HAL_DMA_Abort+0x264>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d00e      	beq.n	800191e <HAL_DMA_Abort+0x20e>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a1c      	ldr	r2, [pc, #112]	@ (8001978 <HAL_DMA_Abort+0x268>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d009      	beq.n	800191e <HAL_DMA_Abort+0x20e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a1b      	ldr	r2, [pc, #108]	@ (800197c <HAL_DMA_Abort+0x26c>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d004      	beq.n	800191e <HAL_DMA_Abort+0x20e>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a19      	ldr	r2, [pc, #100]	@ (8001980 <HAL_DMA_Abort+0x270>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d132      	bne.n	8001984 <HAL_DMA_Abort+0x274>
 800191e:	2301      	movs	r3, #1
 8001920:	e031      	b.n	8001986 <HAL_DMA_Abort+0x276>
 8001922:	bf00      	nop
 8001924:	40020010 	.word	0x40020010
 8001928:	40020028 	.word	0x40020028
 800192c:	40020040 	.word	0x40020040
 8001930:	40020058 	.word	0x40020058
 8001934:	40020070 	.word	0x40020070
 8001938:	40020088 	.word	0x40020088
 800193c:	400200a0 	.word	0x400200a0
 8001940:	400200b8 	.word	0x400200b8
 8001944:	40020410 	.word	0x40020410
 8001948:	40020428 	.word	0x40020428
 800194c:	40020440 	.word	0x40020440
 8001950:	40020458 	.word	0x40020458
 8001954:	40020470 	.word	0x40020470
 8001958:	40020488 	.word	0x40020488
 800195c:	400204a0 	.word	0x400204a0
 8001960:	400204b8 	.word	0x400204b8
 8001964:	58025408 	.word	0x58025408
 8001968:	5802541c 	.word	0x5802541c
 800196c:	58025430 	.word	0x58025430
 8001970:	58025444 	.word	0x58025444
 8001974:	58025458 	.word	0x58025458
 8001978:	5802546c 	.word	0x5802546c
 800197c:	58025480 	.word	0x58025480
 8001980:	58025494 	.word	0x58025494
 8001984:	2300      	movs	r3, #0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d007      	beq.n	800199a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001994:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001998:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a6d      	ldr	r2, [pc, #436]	@ (8001b54 <HAL_DMA_Abort+0x444>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d04a      	beq.n	8001a3a <HAL_DMA_Abort+0x32a>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a6b      	ldr	r2, [pc, #428]	@ (8001b58 <HAL_DMA_Abort+0x448>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d045      	beq.n	8001a3a <HAL_DMA_Abort+0x32a>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a6a      	ldr	r2, [pc, #424]	@ (8001b5c <HAL_DMA_Abort+0x44c>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d040      	beq.n	8001a3a <HAL_DMA_Abort+0x32a>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a68      	ldr	r2, [pc, #416]	@ (8001b60 <HAL_DMA_Abort+0x450>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d03b      	beq.n	8001a3a <HAL_DMA_Abort+0x32a>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a67      	ldr	r2, [pc, #412]	@ (8001b64 <HAL_DMA_Abort+0x454>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d036      	beq.n	8001a3a <HAL_DMA_Abort+0x32a>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a65      	ldr	r2, [pc, #404]	@ (8001b68 <HAL_DMA_Abort+0x458>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d031      	beq.n	8001a3a <HAL_DMA_Abort+0x32a>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a64      	ldr	r2, [pc, #400]	@ (8001b6c <HAL_DMA_Abort+0x45c>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d02c      	beq.n	8001a3a <HAL_DMA_Abort+0x32a>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a62      	ldr	r2, [pc, #392]	@ (8001b70 <HAL_DMA_Abort+0x460>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d027      	beq.n	8001a3a <HAL_DMA_Abort+0x32a>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a61      	ldr	r2, [pc, #388]	@ (8001b74 <HAL_DMA_Abort+0x464>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d022      	beq.n	8001a3a <HAL_DMA_Abort+0x32a>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a5f      	ldr	r2, [pc, #380]	@ (8001b78 <HAL_DMA_Abort+0x468>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d01d      	beq.n	8001a3a <HAL_DMA_Abort+0x32a>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a5e      	ldr	r2, [pc, #376]	@ (8001b7c <HAL_DMA_Abort+0x46c>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d018      	beq.n	8001a3a <HAL_DMA_Abort+0x32a>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a5c      	ldr	r2, [pc, #368]	@ (8001b80 <HAL_DMA_Abort+0x470>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d013      	beq.n	8001a3a <HAL_DMA_Abort+0x32a>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a5b      	ldr	r2, [pc, #364]	@ (8001b84 <HAL_DMA_Abort+0x474>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d00e      	beq.n	8001a3a <HAL_DMA_Abort+0x32a>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a59      	ldr	r2, [pc, #356]	@ (8001b88 <HAL_DMA_Abort+0x478>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d009      	beq.n	8001a3a <HAL_DMA_Abort+0x32a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a58      	ldr	r2, [pc, #352]	@ (8001b8c <HAL_DMA_Abort+0x47c>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d004      	beq.n	8001a3a <HAL_DMA_Abort+0x32a>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a56      	ldr	r2, [pc, #344]	@ (8001b90 <HAL_DMA_Abort+0x480>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d108      	bne.n	8001a4c <HAL_DMA_Abort+0x33c>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 0201 	bic.w	r2, r2, #1
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	e007      	b.n	8001a5c <HAL_DMA_Abort+0x34c>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0201 	bic.w	r2, r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001a5c:	e013      	b.n	8001a86 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a5e:	f7ff fcaf 	bl	80013c0 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b05      	cmp	r3, #5
 8001a6a:	d90c      	bls.n	8001a86 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2220      	movs	r2, #32
 8001a70:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2203      	movs	r2, #3
 8001a76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e12d      	b.n	8001ce2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1e5      	bne.n	8001a5e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a2f      	ldr	r2, [pc, #188]	@ (8001b54 <HAL_DMA_Abort+0x444>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d04a      	beq.n	8001b32 <HAL_DMA_Abort+0x422>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a2d      	ldr	r2, [pc, #180]	@ (8001b58 <HAL_DMA_Abort+0x448>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d045      	beq.n	8001b32 <HAL_DMA_Abort+0x422>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a2c      	ldr	r2, [pc, #176]	@ (8001b5c <HAL_DMA_Abort+0x44c>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d040      	beq.n	8001b32 <HAL_DMA_Abort+0x422>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a2a      	ldr	r2, [pc, #168]	@ (8001b60 <HAL_DMA_Abort+0x450>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d03b      	beq.n	8001b32 <HAL_DMA_Abort+0x422>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a29      	ldr	r2, [pc, #164]	@ (8001b64 <HAL_DMA_Abort+0x454>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d036      	beq.n	8001b32 <HAL_DMA_Abort+0x422>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a27      	ldr	r2, [pc, #156]	@ (8001b68 <HAL_DMA_Abort+0x458>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d031      	beq.n	8001b32 <HAL_DMA_Abort+0x422>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a26      	ldr	r2, [pc, #152]	@ (8001b6c <HAL_DMA_Abort+0x45c>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d02c      	beq.n	8001b32 <HAL_DMA_Abort+0x422>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a24      	ldr	r2, [pc, #144]	@ (8001b70 <HAL_DMA_Abort+0x460>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d027      	beq.n	8001b32 <HAL_DMA_Abort+0x422>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a23      	ldr	r2, [pc, #140]	@ (8001b74 <HAL_DMA_Abort+0x464>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d022      	beq.n	8001b32 <HAL_DMA_Abort+0x422>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a21      	ldr	r2, [pc, #132]	@ (8001b78 <HAL_DMA_Abort+0x468>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d01d      	beq.n	8001b32 <HAL_DMA_Abort+0x422>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a20      	ldr	r2, [pc, #128]	@ (8001b7c <HAL_DMA_Abort+0x46c>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d018      	beq.n	8001b32 <HAL_DMA_Abort+0x422>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a1e      	ldr	r2, [pc, #120]	@ (8001b80 <HAL_DMA_Abort+0x470>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d013      	beq.n	8001b32 <HAL_DMA_Abort+0x422>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a1d      	ldr	r2, [pc, #116]	@ (8001b84 <HAL_DMA_Abort+0x474>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d00e      	beq.n	8001b32 <HAL_DMA_Abort+0x422>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a1b      	ldr	r2, [pc, #108]	@ (8001b88 <HAL_DMA_Abort+0x478>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d009      	beq.n	8001b32 <HAL_DMA_Abort+0x422>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a1a      	ldr	r2, [pc, #104]	@ (8001b8c <HAL_DMA_Abort+0x47c>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d004      	beq.n	8001b32 <HAL_DMA_Abort+0x422>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a18      	ldr	r2, [pc, #96]	@ (8001b90 <HAL_DMA_Abort+0x480>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d101      	bne.n	8001b36 <HAL_DMA_Abort+0x426>
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <HAL_DMA_Abort+0x428>
 8001b36:	2300      	movs	r3, #0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d02b      	beq.n	8001b94 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b40:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b46:	f003 031f 	and.w	r3, r3, #31
 8001b4a:	223f      	movs	r2, #63	@ 0x3f
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	e02a      	b.n	8001baa <HAL_DMA_Abort+0x49a>
 8001b54:	40020010 	.word	0x40020010
 8001b58:	40020028 	.word	0x40020028
 8001b5c:	40020040 	.word	0x40020040
 8001b60:	40020058 	.word	0x40020058
 8001b64:	40020070 	.word	0x40020070
 8001b68:	40020088 	.word	0x40020088
 8001b6c:	400200a0 	.word	0x400200a0
 8001b70:	400200b8 	.word	0x400200b8
 8001b74:	40020410 	.word	0x40020410
 8001b78:	40020428 	.word	0x40020428
 8001b7c:	40020440 	.word	0x40020440
 8001b80:	40020458 	.word	0x40020458
 8001b84:	40020470 	.word	0x40020470
 8001b88:	40020488 	.word	0x40020488
 8001b8c:	400204a0 	.word	0x400204a0
 8001b90:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b98:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b9e:	f003 031f 	and.w	r3, r3, #31
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	409a      	lsls	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a4f      	ldr	r2, [pc, #316]	@ (8001cec <HAL_DMA_Abort+0x5dc>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d072      	beq.n	8001c9a <HAL_DMA_Abort+0x58a>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a4d      	ldr	r2, [pc, #308]	@ (8001cf0 <HAL_DMA_Abort+0x5e0>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d06d      	beq.n	8001c9a <HAL_DMA_Abort+0x58a>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a4c      	ldr	r2, [pc, #304]	@ (8001cf4 <HAL_DMA_Abort+0x5e4>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d068      	beq.n	8001c9a <HAL_DMA_Abort+0x58a>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a4a      	ldr	r2, [pc, #296]	@ (8001cf8 <HAL_DMA_Abort+0x5e8>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d063      	beq.n	8001c9a <HAL_DMA_Abort+0x58a>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a49      	ldr	r2, [pc, #292]	@ (8001cfc <HAL_DMA_Abort+0x5ec>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d05e      	beq.n	8001c9a <HAL_DMA_Abort+0x58a>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a47      	ldr	r2, [pc, #284]	@ (8001d00 <HAL_DMA_Abort+0x5f0>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d059      	beq.n	8001c9a <HAL_DMA_Abort+0x58a>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a46      	ldr	r2, [pc, #280]	@ (8001d04 <HAL_DMA_Abort+0x5f4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d054      	beq.n	8001c9a <HAL_DMA_Abort+0x58a>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a44      	ldr	r2, [pc, #272]	@ (8001d08 <HAL_DMA_Abort+0x5f8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d04f      	beq.n	8001c9a <HAL_DMA_Abort+0x58a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a43      	ldr	r2, [pc, #268]	@ (8001d0c <HAL_DMA_Abort+0x5fc>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d04a      	beq.n	8001c9a <HAL_DMA_Abort+0x58a>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a41      	ldr	r2, [pc, #260]	@ (8001d10 <HAL_DMA_Abort+0x600>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d045      	beq.n	8001c9a <HAL_DMA_Abort+0x58a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a40      	ldr	r2, [pc, #256]	@ (8001d14 <HAL_DMA_Abort+0x604>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d040      	beq.n	8001c9a <HAL_DMA_Abort+0x58a>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a3e      	ldr	r2, [pc, #248]	@ (8001d18 <HAL_DMA_Abort+0x608>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d03b      	beq.n	8001c9a <HAL_DMA_Abort+0x58a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a3d      	ldr	r2, [pc, #244]	@ (8001d1c <HAL_DMA_Abort+0x60c>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d036      	beq.n	8001c9a <HAL_DMA_Abort+0x58a>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a3b      	ldr	r2, [pc, #236]	@ (8001d20 <HAL_DMA_Abort+0x610>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d031      	beq.n	8001c9a <HAL_DMA_Abort+0x58a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a3a      	ldr	r2, [pc, #232]	@ (8001d24 <HAL_DMA_Abort+0x614>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d02c      	beq.n	8001c9a <HAL_DMA_Abort+0x58a>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a38      	ldr	r2, [pc, #224]	@ (8001d28 <HAL_DMA_Abort+0x618>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d027      	beq.n	8001c9a <HAL_DMA_Abort+0x58a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a37      	ldr	r2, [pc, #220]	@ (8001d2c <HAL_DMA_Abort+0x61c>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d022      	beq.n	8001c9a <HAL_DMA_Abort+0x58a>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a35      	ldr	r2, [pc, #212]	@ (8001d30 <HAL_DMA_Abort+0x620>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d01d      	beq.n	8001c9a <HAL_DMA_Abort+0x58a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a34      	ldr	r2, [pc, #208]	@ (8001d34 <HAL_DMA_Abort+0x624>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d018      	beq.n	8001c9a <HAL_DMA_Abort+0x58a>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a32      	ldr	r2, [pc, #200]	@ (8001d38 <HAL_DMA_Abort+0x628>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d013      	beq.n	8001c9a <HAL_DMA_Abort+0x58a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a31      	ldr	r2, [pc, #196]	@ (8001d3c <HAL_DMA_Abort+0x62c>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d00e      	beq.n	8001c9a <HAL_DMA_Abort+0x58a>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a2f      	ldr	r2, [pc, #188]	@ (8001d40 <HAL_DMA_Abort+0x630>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d009      	beq.n	8001c9a <HAL_DMA_Abort+0x58a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a2e      	ldr	r2, [pc, #184]	@ (8001d44 <HAL_DMA_Abort+0x634>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d004      	beq.n	8001c9a <HAL_DMA_Abort+0x58a>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a2c      	ldr	r2, [pc, #176]	@ (8001d48 <HAL_DMA_Abort+0x638>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d101      	bne.n	8001c9e <HAL_DMA_Abort+0x58e>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <HAL_DMA_Abort+0x590>
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d015      	beq.n	8001cd0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001cac:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00c      	beq.n	8001cd0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001cc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cc4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001cce:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40020010 	.word	0x40020010
 8001cf0:	40020028 	.word	0x40020028
 8001cf4:	40020040 	.word	0x40020040
 8001cf8:	40020058 	.word	0x40020058
 8001cfc:	40020070 	.word	0x40020070
 8001d00:	40020088 	.word	0x40020088
 8001d04:	400200a0 	.word	0x400200a0
 8001d08:	400200b8 	.word	0x400200b8
 8001d0c:	40020410 	.word	0x40020410
 8001d10:	40020428 	.word	0x40020428
 8001d14:	40020440 	.word	0x40020440
 8001d18:	40020458 	.word	0x40020458
 8001d1c:	40020470 	.word	0x40020470
 8001d20:	40020488 	.word	0x40020488
 8001d24:	400204a0 	.word	0x400204a0
 8001d28:	400204b8 	.word	0x400204b8
 8001d2c:	58025408 	.word	0x58025408
 8001d30:	5802541c 	.word	0x5802541c
 8001d34:	58025430 	.word	0x58025430
 8001d38:	58025444 	.word	0x58025444
 8001d3c:	58025458 	.word	0x58025458
 8001d40:	5802546c 	.word	0x5802546c
 8001d44:	58025480 	.word	0x58025480
 8001d48:	58025494 	.word	0x58025494

08001d4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e237      	b.n	80021ce <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d004      	beq.n	8001d74 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2280      	movs	r2, #128	@ 0x80
 8001d6e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e22c      	b.n	80021ce <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a5c      	ldr	r2, [pc, #368]	@ (8001eec <HAL_DMA_Abort_IT+0x1a0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d04a      	beq.n	8001e14 <HAL_DMA_Abort_IT+0xc8>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a5b      	ldr	r2, [pc, #364]	@ (8001ef0 <HAL_DMA_Abort_IT+0x1a4>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d045      	beq.n	8001e14 <HAL_DMA_Abort_IT+0xc8>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a59      	ldr	r2, [pc, #356]	@ (8001ef4 <HAL_DMA_Abort_IT+0x1a8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d040      	beq.n	8001e14 <HAL_DMA_Abort_IT+0xc8>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a58      	ldr	r2, [pc, #352]	@ (8001ef8 <HAL_DMA_Abort_IT+0x1ac>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d03b      	beq.n	8001e14 <HAL_DMA_Abort_IT+0xc8>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a56      	ldr	r2, [pc, #344]	@ (8001efc <HAL_DMA_Abort_IT+0x1b0>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d036      	beq.n	8001e14 <HAL_DMA_Abort_IT+0xc8>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a55      	ldr	r2, [pc, #340]	@ (8001f00 <HAL_DMA_Abort_IT+0x1b4>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d031      	beq.n	8001e14 <HAL_DMA_Abort_IT+0xc8>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a53      	ldr	r2, [pc, #332]	@ (8001f04 <HAL_DMA_Abort_IT+0x1b8>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d02c      	beq.n	8001e14 <HAL_DMA_Abort_IT+0xc8>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a52      	ldr	r2, [pc, #328]	@ (8001f08 <HAL_DMA_Abort_IT+0x1bc>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d027      	beq.n	8001e14 <HAL_DMA_Abort_IT+0xc8>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a50      	ldr	r2, [pc, #320]	@ (8001f0c <HAL_DMA_Abort_IT+0x1c0>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d022      	beq.n	8001e14 <HAL_DMA_Abort_IT+0xc8>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a4f      	ldr	r2, [pc, #316]	@ (8001f10 <HAL_DMA_Abort_IT+0x1c4>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d01d      	beq.n	8001e14 <HAL_DMA_Abort_IT+0xc8>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a4d      	ldr	r2, [pc, #308]	@ (8001f14 <HAL_DMA_Abort_IT+0x1c8>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d018      	beq.n	8001e14 <HAL_DMA_Abort_IT+0xc8>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a4c      	ldr	r2, [pc, #304]	@ (8001f18 <HAL_DMA_Abort_IT+0x1cc>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d013      	beq.n	8001e14 <HAL_DMA_Abort_IT+0xc8>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a4a      	ldr	r2, [pc, #296]	@ (8001f1c <HAL_DMA_Abort_IT+0x1d0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d00e      	beq.n	8001e14 <HAL_DMA_Abort_IT+0xc8>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a49      	ldr	r2, [pc, #292]	@ (8001f20 <HAL_DMA_Abort_IT+0x1d4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d009      	beq.n	8001e14 <HAL_DMA_Abort_IT+0xc8>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a47      	ldr	r2, [pc, #284]	@ (8001f24 <HAL_DMA_Abort_IT+0x1d8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d004      	beq.n	8001e14 <HAL_DMA_Abort_IT+0xc8>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a46      	ldr	r2, [pc, #280]	@ (8001f28 <HAL_DMA_Abort_IT+0x1dc>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d101      	bne.n	8001e18 <HAL_DMA_Abort_IT+0xcc>
 8001e14:	2301      	movs	r3, #1
 8001e16:	e000      	b.n	8001e1a <HAL_DMA_Abort_IT+0xce>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 8086 	beq.w	8001f2c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2204      	movs	r2, #4
 8001e24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a2f      	ldr	r2, [pc, #188]	@ (8001eec <HAL_DMA_Abort_IT+0x1a0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d04a      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x17c>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a2e      	ldr	r2, [pc, #184]	@ (8001ef0 <HAL_DMA_Abort_IT+0x1a4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d045      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x17c>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a2c      	ldr	r2, [pc, #176]	@ (8001ef4 <HAL_DMA_Abort_IT+0x1a8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d040      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x17c>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a2b      	ldr	r2, [pc, #172]	@ (8001ef8 <HAL_DMA_Abort_IT+0x1ac>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d03b      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x17c>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a29      	ldr	r2, [pc, #164]	@ (8001efc <HAL_DMA_Abort_IT+0x1b0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d036      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x17c>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a28      	ldr	r2, [pc, #160]	@ (8001f00 <HAL_DMA_Abort_IT+0x1b4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d031      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x17c>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a26      	ldr	r2, [pc, #152]	@ (8001f04 <HAL_DMA_Abort_IT+0x1b8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d02c      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x17c>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a25      	ldr	r2, [pc, #148]	@ (8001f08 <HAL_DMA_Abort_IT+0x1bc>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d027      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x17c>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a23      	ldr	r2, [pc, #140]	@ (8001f0c <HAL_DMA_Abort_IT+0x1c0>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d022      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x17c>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a22      	ldr	r2, [pc, #136]	@ (8001f10 <HAL_DMA_Abort_IT+0x1c4>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d01d      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x17c>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a20      	ldr	r2, [pc, #128]	@ (8001f14 <HAL_DMA_Abort_IT+0x1c8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d018      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x17c>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8001f18 <HAL_DMA_Abort_IT+0x1cc>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d013      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x17c>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8001f1c <HAL_DMA_Abort_IT+0x1d0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00e      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x17c>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a1c      	ldr	r2, [pc, #112]	@ (8001f20 <HAL_DMA_Abort_IT+0x1d4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d009      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x17c>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a1a      	ldr	r2, [pc, #104]	@ (8001f24 <HAL_DMA_Abort_IT+0x1d8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d004      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x17c>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a19      	ldr	r2, [pc, #100]	@ (8001f28 <HAL_DMA_Abort_IT+0x1dc>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d108      	bne.n	8001eda <HAL_DMA_Abort_IT+0x18e>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0201 	bic.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	e178      	b.n	80021cc <HAL_DMA_Abort_IT+0x480>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0201 	bic.w	r2, r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	e16f      	b.n	80021cc <HAL_DMA_Abort_IT+0x480>
 8001eec:	40020010 	.word	0x40020010
 8001ef0:	40020028 	.word	0x40020028
 8001ef4:	40020040 	.word	0x40020040
 8001ef8:	40020058 	.word	0x40020058
 8001efc:	40020070 	.word	0x40020070
 8001f00:	40020088 	.word	0x40020088
 8001f04:	400200a0 	.word	0x400200a0
 8001f08:	400200b8 	.word	0x400200b8
 8001f0c:	40020410 	.word	0x40020410
 8001f10:	40020428 	.word	0x40020428
 8001f14:	40020440 	.word	0x40020440
 8001f18:	40020458 	.word	0x40020458
 8001f1c:	40020470 	.word	0x40020470
 8001f20:	40020488 	.word	0x40020488
 8001f24:	400204a0 	.word	0x400204a0
 8001f28:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 020e 	bic.w	r2, r2, #14
 8001f3a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a6c      	ldr	r2, [pc, #432]	@ (80020f4 <HAL_DMA_Abort_IT+0x3a8>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d04a      	beq.n	8001fdc <HAL_DMA_Abort_IT+0x290>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a6b      	ldr	r2, [pc, #428]	@ (80020f8 <HAL_DMA_Abort_IT+0x3ac>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d045      	beq.n	8001fdc <HAL_DMA_Abort_IT+0x290>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a69      	ldr	r2, [pc, #420]	@ (80020fc <HAL_DMA_Abort_IT+0x3b0>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d040      	beq.n	8001fdc <HAL_DMA_Abort_IT+0x290>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a68      	ldr	r2, [pc, #416]	@ (8002100 <HAL_DMA_Abort_IT+0x3b4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d03b      	beq.n	8001fdc <HAL_DMA_Abort_IT+0x290>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a66      	ldr	r2, [pc, #408]	@ (8002104 <HAL_DMA_Abort_IT+0x3b8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d036      	beq.n	8001fdc <HAL_DMA_Abort_IT+0x290>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a65      	ldr	r2, [pc, #404]	@ (8002108 <HAL_DMA_Abort_IT+0x3bc>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d031      	beq.n	8001fdc <HAL_DMA_Abort_IT+0x290>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a63      	ldr	r2, [pc, #396]	@ (800210c <HAL_DMA_Abort_IT+0x3c0>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d02c      	beq.n	8001fdc <HAL_DMA_Abort_IT+0x290>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a62      	ldr	r2, [pc, #392]	@ (8002110 <HAL_DMA_Abort_IT+0x3c4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d027      	beq.n	8001fdc <HAL_DMA_Abort_IT+0x290>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a60      	ldr	r2, [pc, #384]	@ (8002114 <HAL_DMA_Abort_IT+0x3c8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d022      	beq.n	8001fdc <HAL_DMA_Abort_IT+0x290>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a5f      	ldr	r2, [pc, #380]	@ (8002118 <HAL_DMA_Abort_IT+0x3cc>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d01d      	beq.n	8001fdc <HAL_DMA_Abort_IT+0x290>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a5d      	ldr	r2, [pc, #372]	@ (800211c <HAL_DMA_Abort_IT+0x3d0>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d018      	beq.n	8001fdc <HAL_DMA_Abort_IT+0x290>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a5c      	ldr	r2, [pc, #368]	@ (8002120 <HAL_DMA_Abort_IT+0x3d4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d013      	beq.n	8001fdc <HAL_DMA_Abort_IT+0x290>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a5a      	ldr	r2, [pc, #360]	@ (8002124 <HAL_DMA_Abort_IT+0x3d8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d00e      	beq.n	8001fdc <HAL_DMA_Abort_IT+0x290>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a59      	ldr	r2, [pc, #356]	@ (8002128 <HAL_DMA_Abort_IT+0x3dc>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d009      	beq.n	8001fdc <HAL_DMA_Abort_IT+0x290>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a57      	ldr	r2, [pc, #348]	@ (800212c <HAL_DMA_Abort_IT+0x3e0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d004      	beq.n	8001fdc <HAL_DMA_Abort_IT+0x290>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a56      	ldr	r2, [pc, #344]	@ (8002130 <HAL_DMA_Abort_IT+0x3e4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d108      	bne.n	8001fee <HAL_DMA_Abort_IT+0x2a2>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0201 	bic.w	r2, r2, #1
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	e007      	b.n	8001ffe <HAL_DMA_Abort_IT+0x2b2>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0201 	bic.w	r2, r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a3c      	ldr	r2, [pc, #240]	@ (80020f4 <HAL_DMA_Abort_IT+0x3a8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d072      	beq.n	80020ee <HAL_DMA_Abort_IT+0x3a2>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a3a      	ldr	r2, [pc, #232]	@ (80020f8 <HAL_DMA_Abort_IT+0x3ac>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d06d      	beq.n	80020ee <HAL_DMA_Abort_IT+0x3a2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a39      	ldr	r2, [pc, #228]	@ (80020fc <HAL_DMA_Abort_IT+0x3b0>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d068      	beq.n	80020ee <HAL_DMA_Abort_IT+0x3a2>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a37      	ldr	r2, [pc, #220]	@ (8002100 <HAL_DMA_Abort_IT+0x3b4>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d063      	beq.n	80020ee <HAL_DMA_Abort_IT+0x3a2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a36      	ldr	r2, [pc, #216]	@ (8002104 <HAL_DMA_Abort_IT+0x3b8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d05e      	beq.n	80020ee <HAL_DMA_Abort_IT+0x3a2>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a34      	ldr	r2, [pc, #208]	@ (8002108 <HAL_DMA_Abort_IT+0x3bc>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d059      	beq.n	80020ee <HAL_DMA_Abort_IT+0x3a2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a33      	ldr	r2, [pc, #204]	@ (800210c <HAL_DMA_Abort_IT+0x3c0>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d054      	beq.n	80020ee <HAL_DMA_Abort_IT+0x3a2>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a31      	ldr	r2, [pc, #196]	@ (8002110 <HAL_DMA_Abort_IT+0x3c4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d04f      	beq.n	80020ee <HAL_DMA_Abort_IT+0x3a2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a30      	ldr	r2, [pc, #192]	@ (8002114 <HAL_DMA_Abort_IT+0x3c8>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d04a      	beq.n	80020ee <HAL_DMA_Abort_IT+0x3a2>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a2e      	ldr	r2, [pc, #184]	@ (8002118 <HAL_DMA_Abort_IT+0x3cc>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d045      	beq.n	80020ee <HAL_DMA_Abort_IT+0x3a2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a2d      	ldr	r2, [pc, #180]	@ (800211c <HAL_DMA_Abort_IT+0x3d0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d040      	beq.n	80020ee <HAL_DMA_Abort_IT+0x3a2>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a2b      	ldr	r2, [pc, #172]	@ (8002120 <HAL_DMA_Abort_IT+0x3d4>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d03b      	beq.n	80020ee <HAL_DMA_Abort_IT+0x3a2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a2a      	ldr	r2, [pc, #168]	@ (8002124 <HAL_DMA_Abort_IT+0x3d8>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d036      	beq.n	80020ee <HAL_DMA_Abort_IT+0x3a2>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a28      	ldr	r2, [pc, #160]	@ (8002128 <HAL_DMA_Abort_IT+0x3dc>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d031      	beq.n	80020ee <HAL_DMA_Abort_IT+0x3a2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a27      	ldr	r2, [pc, #156]	@ (800212c <HAL_DMA_Abort_IT+0x3e0>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d02c      	beq.n	80020ee <HAL_DMA_Abort_IT+0x3a2>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a25      	ldr	r2, [pc, #148]	@ (8002130 <HAL_DMA_Abort_IT+0x3e4>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d027      	beq.n	80020ee <HAL_DMA_Abort_IT+0x3a2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a24      	ldr	r2, [pc, #144]	@ (8002134 <HAL_DMA_Abort_IT+0x3e8>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d022      	beq.n	80020ee <HAL_DMA_Abort_IT+0x3a2>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a22      	ldr	r2, [pc, #136]	@ (8002138 <HAL_DMA_Abort_IT+0x3ec>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d01d      	beq.n	80020ee <HAL_DMA_Abort_IT+0x3a2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a21      	ldr	r2, [pc, #132]	@ (800213c <HAL_DMA_Abort_IT+0x3f0>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d018      	beq.n	80020ee <HAL_DMA_Abort_IT+0x3a2>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002140 <HAL_DMA_Abort_IT+0x3f4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d013      	beq.n	80020ee <HAL_DMA_Abort_IT+0x3a2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002144 <HAL_DMA_Abort_IT+0x3f8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d00e      	beq.n	80020ee <HAL_DMA_Abort_IT+0x3a2>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a1c      	ldr	r2, [pc, #112]	@ (8002148 <HAL_DMA_Abort_IT+0x3fc>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d009      	beq.n	80020ee <HAL_DMA_Abort_IT+0x3a2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a1b      	ldr	r2, [pc, #108]	@ (800214c <HAL_DMA_Abort_IT+0x400>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d004      	beq.n	80020ee <HAL_DMA_Abort_IT+0x3a2>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a19      	ldr	r2, [pc, #100]	@ (8002150 <HAL_DMA_Abort_IT+0x404>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d132      	bne.n	8002154 <HAL_DMA_Abort_IT+0x408>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e031      	b.n	8002156 <HAL_DMA_Abort_IT+0x40a>
 80020f2:	bf00      	nop
 80020f4:	40020010 	.word	0x40020010
 80020f8:	40020028 	.word	0x40020028
 80020fc:	40020040 	.word	0x40020040
 8002100:	40020058 	.word	0x40020058
 8002104:	40020070 	.word	0x40020070
 8002108:	40020088 	.word	0x40020088
 800210c:	400200a0 	.word	0x400200a0
 8002110:	400200b8 	.word	0x400200b8
 8002114:	40020410 	.word	0x40020410
 8002118:	40020428 	.word	0x40020428
 800211c:	40020440 	.word	0x40020440
 8002120:	40020458 	.word	0x40020458
 8002124:	40020470 	.word	0x40020470
 8002128:	40020488 	.word	0x40020488
 800212c:	400204a0 	.word	0x400204a0
 8002130:	400204b8 	.word	0x400204b8
 8002134:	58025408 	.word	0x58025408
 8002138:	5802541c 	.word	0x5802541c
 800213c:	58025430 	.word	0x58025430
 8002140:	58025444 	.word	0x58025444
 8002144:	58025458 	.word	0x58025458
 8002148:	5802546c 	.word	0x5802546c
 800214c:	58025480 	.word	0x58025480
 8002150:	58025494 	.word	0x58025494
 8002154:	2300      	movs	r3, #0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d028      	beq.n	80021ac <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002164:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002168:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800216e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002174:	f003 031f 	and.w	r3, r3, #31
 8002178:	2201      	movs	r2, #1
 800217a:	409a      	lsls	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002188:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00c      	beq.n	80021ac <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800219c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021a0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80021aa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop

080021d8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e0e3      	b.n	80023b2 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d106      	bne.n	8002202 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2223      	movs	r2, #35	@ 0x23
 80021f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f006 febb 	bl	8008f78 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002202:	4b6e      	ldr	r3, [pc, #440]	@ (80023bc <HAL_ETH_Init+0x1e4>)
 8002204:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002208:	4a6c      	ldr	r2, [pc, #432]	@ (80023bc <HAL_ETH_Init+0x1e4>)
 800220a:	f043 0302 	orr.w	r3, r3, #2
 800220e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002212:	4b6a      	ldr	r3, [pc, #424]	@ (80023bc <HAL_ETH_Init+0x1e4>)
 8002214:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	7a1b      	ldrb	r3, [r3, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d103      	bne.n	8002230 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002228:	2000      	movs	r0, #0
 800222a:	f7ff f905 	bl	8001438 <HAL_SYSCFG_ETHInterfaceSelect>
 800222e:	e003      	b.n	8002238 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002230:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002234:	f7ff f900 	bl	8001438 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002238:	4b61      	ldr	r3, [pc, #388]	@ (80023c0 <HAL_ETH_Init+0x1e8>)
 800223a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6812      	ldr	r2, [r2, #0]
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002252:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002254:	f7ff f8b4 	bl	80013c0 <HAL_GetTick>
 8002258:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800225a:	e011      	b.n	8002280 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800225c:	f7ff f8b0 	bl	80013c0 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800226a:	d909      	bls.n	8002280 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2204      	movs	r2, #4
 8002270:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	22e0      	movs	r2, #224	@ 0xe0
 8002278:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e098      	b.n	80023b2 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1e4      	bne.n	800225c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 fdb4 	bl	8002e00 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002298:	f002 fcf6 	bl	8004c88 <HAL_RCC_GetHCLKFreq>
 800229c:	4603      	mov	r3, r0
 800229e:	4a49      	ldr	r2, [pc, #292]	@ (80023c4 <HAL_ETH_Init+0x1ec>)
 80022a0:	fba2 2303 	umull	r2, r3, r2, r3
 80022a4:	0c9a      	lsrs	r2, r3, #18
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	3a01      	subs	r2, #1
 80022ac:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 ff97 	bl	80031e4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022be:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80022c2:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6812      	ldr	r2, [r2, #0]
 80022ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80022ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022d2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d009      	beq.n	80022f6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	22e0      	movs	r2, #224	@ 0xe0
 80022ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e05d      	b.n	80023b2 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022fe:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002302:	4b31      	ldr	r3, [pc, #196]	@ (80023c8 <HAL_ETH_Init+0x1f0>)
 8002304:	4013      	ands	r3, r2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6952      	ldr	r2, [r2, #20]
 800230a:	0051      	lsls	r1, r2, #1
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	430b      	orrs	r3, r1
 8002312:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002316:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 ffff 	bl	800331e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f001 f845 	bl	80033b0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	3305      	adds	r3, #5
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	021a      	lsls	r2, r3, #8
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	3304      	adds	r3, #4
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	4619      	mov	r1, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	3303      	adds	r3, #3
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	061a      	lsls	r2, r3, #24
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	3302      	adds	r3, #2
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	041b      	lsls	r3, r3, #16
 8002358:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	3301      	adds	r3, #1
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002364:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002372:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002374:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4b11      	ldr	r3, [pc, #68]	@ (80023cc <HAL_ETH_Init+0x1f4>)
 8002386:	430b      	orrs	r3, r1
 8002388:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4b0d      	ldr	r3, [pc, #52]	@ (80023d0 <HAL_ETH_Init+0x1f8>)
 800239a:	430b      	orrs	r3, r1
 800239c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2210      	movs	r2, #16
 80023ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	58024400 	.word	0x58024400
 80023c0:	58000400 	.word	0x58000400
 80023c4:	431bde83 	.word	0x431bde83
 80023c8:	ffff8001 	.word	0xffff8001
 80023cc:	0c020060 	.word	0x0c020060
 80023d0:	0c20c000 	.word	0x0c20c000

080023d4 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023e2:	2b10      	cmp	r3, #16
 80023e4:	d153      	bne.n	800248e <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2223      	movs	r2, #35	@ 0x23
 80023ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2204      	movs	r2, #4
 80023f2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f9f3 	bl	80027e0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 0202 	orr.w	r2, r2, #2
 8002408:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f042 0201 	orr.w	r2, r2, #1
 8002418:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0201 	orr.w	r2, r2, #1
 800242a:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002436:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6812      	ldr	r2, [r2, #0]
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002446:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002452:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6812      	ldr	r2, [r2, #0]
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002462:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800246e:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6812      	ldr	r2, [r2, #0]
 8002476:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 800247a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800247e:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2223      	movs	r2, #35	@ 0x23
 8002486:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	e000      	b.n	8002490 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
  }
}
 8002490:	4618      	mov	r0, r3
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024a6:	2b23      	cmp	r3, #35	@ 0x23
 80024a8:	d13f      	bne.n	800252a <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2223      	movs	r2, #35	@ 0x23
 80024ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024ba:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	f023 0301 	bic.w	r3, r3, #1
 80024c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024ca:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6812      	ldr	r2, [r2, #0]
 80024de:	f023 0301 	bic.w	r3, r3, #1
 80024e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024e6:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0201 	bic.w	r2, r2, #1
 80024f8:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0201 	orr.w	r2, r2, #1
 800250a:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0202 	bic.w	r2, r2, #2
 800251c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2210      	movs	r2, #16
 8002522:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	e000      	b.n	800252c <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
  }
}
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d109      	bne.n	800255e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002550:	f043 0201 	orr.w	r2, r3, #1
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e07f      	b.n	800265e <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002564:	2b23      	cmp	r3, #35	@ 0x23
 8002566:	d179      	bne.n	800265c <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002568:	2200      	movs	r2, #0
 800256a:	68b9      	ldr	r1, [r7, #8]
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 ff7d 	bl	800346c <ETH_Prepare_Tx_Descriptors>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d009      	beq.n	800258c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257e:	f043 0202 	orr.w	r2, r3, #2
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e068      	b.n	800265e <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 800258c:	f3bf 8f4f 	dsb	sy
}
 8002590:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	3206      	adds	r2, #6
 800259a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800259e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ae:	2b03      	cmp	r3, #3
 80025b0:	d904      	bls.n	80025bc <HAL_ETH_Transmit+0x84>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b6:	1f1a      	subs	r2, r3, #4
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	3106      	adds	r1, #6
 80025c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80025cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025d0:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    tickstart = HAL_GetTick();
 80025d4:	f7fe fef4 	bl	80013c0 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80025da:	e039      	b.n	8002650 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025e4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80025e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d012      	beq.n	8002616 <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025f6:	f043 0208 	orr.w	r2, r3, #8
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002608:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e023      	b.n	800265e <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800261c:	d018      	beq.n	8002650 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800261e:	f7fe fecf 	bl	80013c0 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	429a      	cmp	r2, r3
 800262c:	d302      	bcc.n	8002634 <HAL_ETH_Transmit+0xfc>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10d      	bne.n	8002650 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800263a:	f043 0204 	orr.w	r2, r3, #4
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 800264a:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e006      	b.n	800265e <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	2b00      	cmp	r3, #0
 8002656:	dbc1      	blt.n	80025dc <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002658:	2300      	movs	r3, #0
 800265a:	e000      	b.n	800265e <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
  }
}
 800265e:	4618      	mov	r0, r3
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b088      	sub	sp, #32
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d109      	bne.n	8002692 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002684:	f043 0201 	orr.w	r2, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e0a2      	b.n	80027d8 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002698:	2b23      	cmp	r3, #35	@ 0x23
 800269a:	d001      	beq.n	80026a0 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e09b      	b.n	80027d8 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69fa      	ldr	r2, [r7, #28]
 80026aa:	3212      	adds	r2, #18
 80026ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b0:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026b6:	f1c3 0304 	rsb	r3, r3, #4
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80026bc:	e064      	b.n	8002788 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d007      	beq.n	80026da <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d103      	bne.n	80026ee <HAL_ETH_ReadData+0x88>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d03a      	beq.n	8002764 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d005      	beq.n	8002706 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d005      	beq.n	800272e <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 800272a:	2301      	movs	r3, #1
 800272c:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800273e:	461a      	mov	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	b29b      	uxth	r3, r3
 8002744:	f006 fd64 	bl	8009210 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	441a      	add	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	2200      	movs	r2, #0
 8002762:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	3301      	adds	r3, #1
 8002768:	61fb      	str	r3, [r7, #28]
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	2b03      	cmp	r3, #3
 800276e:	d902      	bls.n	8002776 <HAL_ETH_ReadData+0x110>
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	3b04      	subs	r3, #4
 8002774:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69fa      	ldr	r2, [r7, #28]
 800277a:	3212      	adds	r2, #18
 800277c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002780:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	3301      	adds	r3, #1
 8002786:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 800278c:	2b00      	cmp	r3, #0
 800278e:	db06      	blt.n	800279e <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	429a      	cmp	r2, r3
 8002796:	d202      	bcs.n	800279e <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8002798:	7cfb      	ldrb	r3, [r7, #19]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d08f      	beq.n	80026be <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	441a      	add	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f814 	bl	80027e0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80027be:	7cfb      	ldrb	r3, [r7, #19]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d108      	bne.n	80027d6 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	e000      	b.n	80027d8 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3720      	adds	r7, #32
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80027ec:	2301      	movs	r3, #1
 80027ee:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027f4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69fa      	ldr	r2, [r7, #28]
 80027fa:	3212      	adds	r2, #18
 80027fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002800:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002806:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002808:	e038      	b.n	800287c <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d112      	bne.n	8002838 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002812:	f107 0308 	add.w	r3, r7, #8
 8002816:	4618      	mov	r0, r3
 8002818:	f006 fcca 	bl	80091b0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d102      	bne.n	8002828 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002822:	2300      	movs	r3, #0
 8002824:	74fb      	strb	r3, [r7, #19]
 8002826:	e007      	b.n	8002838 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	461a      	mov	r2, r3
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	461a      	mov	r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8002838:	7cfb      	ldrb	r3, [r7, #19]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d01e      	beq.n	800287c <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002842:	2b00      	cmp	r3, #0
 8002844:	d004      	beq.n	8002850 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	e003      	b.n	8002858 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8002856:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	3301      	adds	r3, #1
 800285c:	61fb      	str	r3, [r7, #28]
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	2b03      	cmp	r3, #3
 8002862:	d902      	bls.n	800286a <ETH_UpdateDescriptor+0x8a>
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	3b04      	subs	r3, #4
 8002868:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69fa      	ldr	r2, [r7, #28]
 800286e:	3212      	adds	r2, #18
 8002870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002874:	617b      	str	r3, [r7, #20]
      desccount--;
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	3b01      	subs	r3, #1
 800287a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d002      	beq.n	8002888 <ETH_UpdateDescriptor+0xa8>
 8002882:	7cfb      	ldrb	r3, [r7, #19]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1c0      	bne.n	800280a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	429a      	cmp	r2, r3
 8002890:	d01b      	beq.n	80028ca <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3301      	adds	r3, #1
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800289c:	f3bf 8f5f 	dmb	sy
}
 80028a0:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6919      	ldr	r1, [r3, #16]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4613      	mov	r3, r2
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	4413      	add	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	18ca      	adds	r2, r1, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028ba:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69fa      	ldr	r2, [r7, #28]
 80028c2:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80028ca:	bf00      	nop
 80028cc:	3720      	adds	r7, #32
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b086      	sub	sp, #24
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	60f8      	str	r0, [r7, #12]
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	607a      	str	r2, [r7, #4]
 80028de:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e03e      	b.n	8002972 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80028fc:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	055b      	lsls	r3, r3, #21
 8002908:	4313      	orrs	r3, r2
 800290a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	041b      	lsls	r3, r3, #16
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f043 030c 	orr.w	r3, r3, #12
 8002920:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8002934:	f7fe fd44 	bl	80013c0 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800293a:	e009      	b.n	8002950 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800293c:	f7fe fd40 	bl	80013c0 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800294a:	d901      	bls.n	8002950 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e010      	b.n	8002972 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1ed      	bne.n	800293c <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002968:	b29b      	uxth	r3, r3
 800296a:	461a      	mov	r2, r3
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e03c      	b.n	8002a18 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80029a6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	055b      	lsls	r3, r3, #21
 80029b2:	4313      	orrs	r3, r2
 80029b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	041b      	lsls	r3, r3, #16
 80029c0:	4313      	orrs	r3, r2
 80029c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f023 030c 	bic.w	r3, r3, #12
 80029ca:	f043 0304 	orr.w	r3, r3, #4
 80029ce:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	b29a      	uxth	r2, r3
 80029dc:	4b10      	ldr	r3, [pc, #64]	@ (8002a20 <HAL_ETH_WritePHYRegister+0xa4>)
 80029de:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80029e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002a20 <HAL_ETH_WritePHYRegister+0xa4>)
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 80029ea:	f7fe fce9 	bl	80013c0 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80029f0:	e009      	b.n	8002a06 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80029f2:	f7fe fce5 	bl	80013c0 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a00:	d901      	bls.n	8002a06 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e008      	b.n	8002a18 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1ed      	bne.n	80029f2 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40028000 	.word	0x40028000

08002a24 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e1c3      	b.n	8002dc0 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 020c 	and.w	r2, r3, #12
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0310 	and.w	r3, r3, #16
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	bf14      	ite	ne
 8002a54:	2301      	movne	r3, #1
 8002a56:	2300      	moveq	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	bf0c      	ite	eq
 8002a7e:	2301      	moveq	r3, #1
 8002a80:	2300      	movne	r3, #0
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	bf14      	ite	ne
 8002a9a:	2301      	movne	r3, #1
 8002a9c:	2300      	moveq	r3, #0
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	bf0c      	ite	eq
 8002ab4:	2301      	moveq	r3, #1
 8002ab6:	2300      	movne	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	461a      	mov	r2, r3
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002ac6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	bf14      	ite	ne
 8002ace:	2301      	movne	r3, #1
 8002ad0:	2300      	moveq	r3, #0
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	bf14      	ite	ne
 8002ae8:	2301      	movne	r3, #1
 8002aea:	2300      	moveq	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	461a      	mov	r2, r3
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	bf14      	ite	ne
 8002b1e:	2301      	movne	r3, #1
 8002b20:	2300      	moveq	r3, #0
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	461a      	mov	r2, r3
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	bf0c      	ite	eq
 8002b38:	2301      	moveq	r3, #1
 8002b3a:	2300      	movne	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	461a      	mov	r2, r3
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	bf0c      	ite	eq
 8002b52:	2301      	moveq	r3, #1
 8002b54:	2300      	movne	r3, #0
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	461a      	mov	r2, r3
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	bf14      	ite	ne
 8002b6c:	2301      	movne	r3, #1
 8002b6e:	2300      	moveq	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	461a      	mov	r2, r3
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	bf14      	ite	ne
 8002b86:	2301      	movne	r3, #1
 8002b88:	2300      	moveq	r3, #0
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	bf14      	ite	ne
 8002ba0:	2301      	movne	r3, #1
 8002ba2:	2300      	moveq	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002bb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	bf14      	ite	ne
 8002bba:	2301      	movne	r3, #1
 8002bbc:	2300      	moveq	r3, #0
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	bf14      	ite	ne
 8002be2:	2301      	movne	r3, #1
 8002be4:	2300      	moveq	r3, #0
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	461a      	mov	r2, r3
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	bf0c      	ite	eq
 8002c18:	2301      	moveq	r3, #1
 8002c1a:	2300      	movne	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	461a      	mov	r2, r3
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	bf14      	ite	ne
 8002c34:	2301      	movne	r3, #1
 8002c36:	2300      	moveq	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002c48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	bf14      	ite	ne
 8002c50:	2301      	movne	r3, #1
 8002c52:	2300      	moveq	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	bf14      	ite	ne
 8002c6c:	2301      	movne	r3, #1
 8002c6e:	2300      	moveq	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	0e5b      	lsrs	r3, r3, #25
 8002c82:	f003 021f 	and.w	r2, r3, #31
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bf14      	ite	ne
 8002c98:	2301      	movne	r3, #1
 8002c9a:	2300      	moveq	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f003 020f 	and.w	r2, r3, #15
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	bf14      	ite	ne
 8002cc2:	2301      	movne	r3, #1
 8002cc4:	2300      	moveq	r3, #0
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	461a      	mov	r2, r3
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	bf0c      	ite	eq
 8002cde:	2301      	moveq	r3, #1
 8002ce0:	2300      	movne	r3, #0
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d00:	0c1b      	lsrs	r3, r3, #16
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	bf14      	ite	ne
 8002d18:	2301      	movne	r3, #1
 8002d1a:	2300      	moveq	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	461a      	mov	r2, r3
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d2e:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	bf14      	ite	ne
 8002d36:	2301      	movne	r3, #1
 8002d38:	2300      	moveq	r3, #0
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002d4c:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002d5c:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	bf14      	ite	ne
 8002d74:	2301      	movne	r3, #1
 8002d76:	2300      	moveq	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002d8a:	f003 0310 	and.w	r3, r3, #16
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	bf14      	ite	ne
 8002d92:	2301      	movne	r3, #1
 8002d94:	2300      	moveq	r3, #0
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	461a      	mov	r2, r3
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	bf0c      	ite	eq
 8002db0:	2301      	moveq	r3, #1
 8002db2:	2300      	movne	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e00b      	b.n	8002df8 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002de6:	2b10      	cmp	r3, #16
 8002de8:	d105      	bne.n	8002df6 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002dea:	6839      	ldr	r1, [r7, #0]
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f857 	bl	8002ea0 <ETH_SetMACConfig>

    return HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	e000      	b.n	8002df8 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
  }
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002e10:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e18:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002e1a:	f001 ff35 	bl	8004c88 <HAL_RCC_GetHCLKFreq>
 8002e1e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	4a1a      	ldr	r2, [pc, #104]	@ (8002e8c <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d804      	bhi.n	8002e32 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	e022      	b.n	8002e78 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	4a16      	ldr	r2, [pc, #88]	@ (8002e90 <HAL_ETH_SetMDIOClockRange+0x90>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d204      	bcs.n	8002e44 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	e019      	b.n	8002e78 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4a13      	ldr	r2, [pc, #76]	@ (8002e94 <HAL_ETH_SetMDIOClockRange+0x94>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d915      	bls.n	8002e78 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	4a12      	ldr	r2, [pc, #72]	@ (8002e98 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d804      	bhi.n	8002e5e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	e00c      	b.n	8002e78 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	4a0e      	ldr	r2, [pc, #56]	@ (8002e9c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d804      	bhi.n	8002e70 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	e003      	b.n	8002e78 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002e76:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8002e82:	bf00      	nop
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	02160ebf 	.word	0x02160ebf
 8002e90:	03938700 	.word	0x03938700
 8002e94:	05f5e0ff 	.word	0x05f5e0ff
 8002e98:	08f0d17f 	.word	0x08f0d17f
 8002e9c:	0ee6b27f 	.word	0x0ee6b27f

08002ea0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002eb2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	791b      	ldrb	r3, [r3, #4]
 8002eb8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002eba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	7b1b      	ldrb	r3, [r3, #12]
 8002ec0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002ec2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	7b5b      	ldrb	r3, [r3, #13]
 8002ec8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002eca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	7b9b      	ldrb	r3, [r3, #14]
 8002ed0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002ed2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	7bdb      	ldrb	r3, [r3, #15]
 8002ed8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002eda:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	7c12      	ldrb	r2, [r2, #16]
 8002ee0:	2a00      	cmp	r2, #0
 8002ee2:	d102      	bne.n	8002eea <ETH_SetMACConfig+0x4a>
 8002ee4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002ee8:	e000      	b.n	8002eec <ETH_SetMACConfig+0x4c>
 8002eea:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002eec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	7c52      	ldrb	r2, [r2, #17]
 8002ef2:	2a00      	cmp	r2, #0
 8002ef4:	d102      	bne.n	8002efc <ETH_SetMACConfig+0x5c>
 8002ef6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002efa:	e000      	b.n	8002efe <ETH_SetMACConfig+0x5e>
 8002efc:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002efe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	7c9b      	ldrb	r3, [r3, #18]
 8002f04:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002f06:	431a      	orrs	r2, r3
               macconf->Speed |
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002f0c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002f12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	7f1b      	ldrb	r3, [r3, #28]
 8002f18:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002f1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	7f5b      	ldrb	r3, [r3, #29]
 8002f20:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002f22:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	7f92      	ldrb	r2, [r2, #30]
 8002f28:	2a00      	cmp	r2, #0
 8002f2a:	d102      	bne.n	8002f32 <ETH_SetMACConfig+0x92>
 8002f2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f30:	e000      	b.n	8002f34 <ETH_SetMACConfig+0x94>
 8002f32:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002f34:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	7fdb      	ldrb	r3, [r3, #31]
 8002f3a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002f3c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002f44:	2a00      	cmp	r2, #0
 8002f46:	d102      	bne.n	8002f4e <ETH_SetMACConfig+0xae>
 8002f48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f4c:	e000      	b.n	8002f50 <ETH_SetMACConfig+0xb0>
 8002f4e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002f50:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002f56:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002f5e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002f60:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	4b56      	ldr	r3, [pc, #344]	@ (80030cc <ETH_SetMACConfig+0x22c>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6812      	ldr	r2, [r2, #0]
 8002f78:	68f9      	ldr	r1, [r7, #12]
 8002f7a:	430b      	orrs	r3, r1
 8002f7c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f82:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f8a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002f8c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f94:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002f96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002f9e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002fa0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002fa8:	2a00      	cmp	r2, #0
 8002faa:	d102      	bne.n	8002fb2 <ETH_SetMACConfig+0x112>
 8002fac:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002fb0:	e000      	b.n	8002fb4 <ETH_SetMACConfig+0x114>
 8002fb2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002fb4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	4b42      	ldr	r3, [pc, #264]	@ (80030d0 <ETH_SetMACConfig+0x230>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	68f9      	ldr	r1, [r7, #12]
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fd8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	4b3a      	ldr	r3, [pc, #232]	@ (80030d4 <ETH_SetMACConfig+0x234>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6812      	ldr	r2, [r2, #0]
 8002ff0:	68f9      	ldr	r1, [r7, #12]
 8002ff2:	430b      	orrs	r3, r1
 8002ff4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002ffc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003002:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800300a:	2a00      	cmp	r2, #0
 800300c:	d101      	bne.n	8003012 <ETH_SetMACConfig+0x172>
 800300e:	2280      	movs	r2, #128	@ 0x80
 8003010:	e000      	b.n	8003014 <ETH_SetMACConfig+0x174>
 8003012:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003014:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800301a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800301c:	4313      	orrs	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003026:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800302a:	4013      	ands	r3, r2
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	68f9      	ldr	r1, [r7, #12]
 8003032:	430b      	orrs	r3, r1
 8003034:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800303c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003044:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003046:	4313      	orrs	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003052:	f023 0103 	bic.w	r1, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	430a      	orrs	r2, r1
 800305e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800306a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8003086:	2a00      	cmp	r2, #0
 8003088:	d101      	bne.n	800308e <ETH_SetMACConfig+0x1ee>
 800308a:	2240      	movs	r2, #64	@ 0x40
 800308c:	e000      	b.n	8003090 <ETH_SetMACConfig+0x1f0>
 800308e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003090:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8003098:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800309a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80030a2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80030b0:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80030c0:	bf00      	nop
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	00048083 	.word	0x00048083
 80030d0:	c0f88000 	.word	0xc0f88000
 80030d4:	fffffef0 	.word	0xfffffef0

080030d8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4b38      	ldr	r3, [pc, #224]	@ (80031d0 <ETH_SetDMAConfig+0xf8>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	6811      	ldr	r1, [r2, #0]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6812      	ldr	r2, [r2, #0]
 80030f8:	430b      	orrs	r3, r1
 80030fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80030fe:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	791b      	ldrb	r3, [r3, #4]
 8003104:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800310a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	7b1b      	ldrb	r3, [r3, #12]
 8003110:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003112:	4313      	orrs	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	4b2c      	ldr	r3, [pc, #176]	@ (80031d4 <ETH_SetDMAConfig+0xfc>)
 8003122:	4013      	ands	r3, r2
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6812      	ldr	r2, [r2, #0]
 8003128:	68f9      	ldr	r1, [r7, #12]
 800312a:	430b      	orrs	r3, r1
 800312c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003130:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	7b5b      	ldrb	r3, [r3, #13]
 8003136:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800313c:	4313      	orrs	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003148:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800314c:	4b22      	ldr	r3, [pc, #136]	@ (80031d8 <ETH_SetDMAConfig+0x100>)
 800314e:	4013      	ands	r3, r2
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	68f9      	ldr	r1, [r7, #12]
 8003156:	430b      	orrs	r3, r1
 8003158:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800315c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	7d1b      	ldrb	r3, [r3, #20]
 8003168:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800316a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	7f5b      	ldrb	r3, [r3, #29]
 8003170:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003172:	4313      	orrs	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800317e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8003182:	4b16      	ldr	r3, [pc, #88]	@ (80031dc <ETH_SetDMAConfig+0x104>)
 8003184:	4013      	ands	r3, r2
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6812      	ldr	r2, [r2, #0]
 800318a:	68f9      	ldr	r1, [r7, #12]
 800318c:	430b      	orrs	r3, r1
 800318e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003192:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	7f1b      	ldrb	r3, [r3, #28]
 800319a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80031a0:	4313      	orrs	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031ac:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80031b0:	4b0b      	ldr	r3, [pc, #44]	@ (80031e0 <ETH_SetDMAConfig+0x108>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	68f9      	ldr	r1, [r7, #12]
 80031ba:	430b      	orrs	r3, r1
 80031bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80031c0:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80031c4:	bf00      	nop
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	ffff87fd 	.word	0xffff87fd
 80031d4:	ffff2ffe 	.word	0xffff2ffe
 80031d8:	fffec000 	.word	0xfffec000
 80031dc:	ffc0efef 	.word	0xffc0efef
 80031e0:	7fc0ffff 	.word	0x7fc0ffff

080031e4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b0a4      	sub	sp, #144	@ 0x90
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80031ec:	2301      	movs	r3, #1
 80031ee:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80031f2:	2300      	movs	r3, #0
 80031f4:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80031f6:	2300      	movs	r3, #0
 80031f8:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80031fc:	2300      	movs	r3, #0
 80031fe:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003202:	2301      	movs	r3, #1
 8003204:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003208:	2301      	movs	r3, #1
 800320a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800320e:	2301      	movs	r3, #1
 8003210:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003214:	2300      	movs	r3, #0
 8003216:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800321a:	2301      	movs	r3, #1
 800321c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003220:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003224:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003226:	2300      	movs	r3, #0
 8003228:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 800322c:	2300      	movs	r3, #0
 800322e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003230:	2300      	movs	r3, #0
 8003232:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003236:	2300      	movs	r3, #0
 8003238:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 800323c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8003240:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003242:	2300      	movs	r3, #0
 8003244:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003248:	2300      	movs	r3, #0
 800324a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 800324c:	2301      	movs	r3, #1
 800324e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003252:	2300      	movs	r3, #0
 8003254:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003258:	2300      	movs	r3, #0
 800325a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800325e:	2300      	movs	r3, #0
 8003260:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8003262:	2300      	movs	r3, #0
 8003264:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003266:	2300      	movs	r3, #0
 8003268:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800326a:	2300      	movs	r3, #0
 800326c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003270:	2300      	movs	r3, #0
 8003272:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003276:	2301      	movs	r3, #1
 8003278:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800327c:	2320      	movs	r3, #32
 800327e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003282:	2301      	movs	r3, #1
 8003284:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003288:	2300      	movs	r3, #0
 800328a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800328e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8003292:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003294:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003298:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800329a:	2300      	movs	r3, #0
 800329c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80032a0:	2302      	movs	r3, #2
 80032a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80032a6:	2300      	movs	r3, #0
 80032a8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80032ac:	2300      	movs	r3, #0
 80032ae:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80032b2:	2300      	movs	r3, #0
 80032b4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80032b8:	2301      	movs	r3, #1
 80032ba:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80032be:	2300      	movs	r3, #0
 80032c0:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80032c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032cc:	4619      	mov	r1, r3
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff fde6 	bl	8002ea0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80032d4:	2301      	movs	r3, #1
 80032d6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80032d8:	2301      	movs	r3, #1
 80032da:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80032dc:	2300      	movs	r3, #0
 80032de:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80032e0:	2300      	movs	r3, #0
 80032e2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80032e6:	2300      	movs	r3, #0
 80032e8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80032ea:	2300      	movs	r3, #0
 80032ec:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80032ee:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80032f2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80032f4:	2300      	movs	r3, #0
 80032f6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80032f8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80032fc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80032fe:	2300      	movs	r3, #0
 8003300:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003304:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8003308:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800330a:	f107 0308 	add.w	r3, r7, #8
 800330e:	4619      	mov	r1, r3
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7ff fee1 	bl	80030d8 <ETH_SetDMAConfig>
}
 8003316:	bf00      	nop
 8003318:	3790      	adds	r7, #144	@ 0x90
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800331e:	b480      	push	{r7}
 8003320:	b085      	sub	sp, #20
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	e01d      	b.n	8003368 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68d9      	ldr	r1, [r3, #12]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	4613      	mov	r3, r2
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	4413      	add	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	440b      	add	r3, r1
 800333c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2200      	movs	r2, #0
 8003348:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2200      	movs	r2, #0
 800334e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2200      	movs	r2, #0
 8003354:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003356:	68b9      	ldr	r1, [r7, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	3206      	adds	r2, #6
 800335e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	3301      	adds	r3, #1
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2b03      	cmp	r3, #3
 800336c:	d9de      	bls.n	800332c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800337c:	461a      	mov	r2, r3
 800337e:	2303      	movs	r3, #3
 8003380:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003390:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033a0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80033a4:	bf00      	nop
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80033b8:	2300      	movs	r3, #0
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	e023      	b.n	8003406 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6919      	ldr	r1, [r3, #16]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4613      	mov	r3, r2
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	4413      	add	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	440b      	add	r3, r1
 80033ce:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2200      	movs	r2, #0
 80033da:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	2200      	movs	r2, #0
 80033e0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2200      	movs	r2, #0
 80033e6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2200      	movs	r2, #0
 80033ec:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2200      	movs	r2, #0
 80033f2:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80033f4:	68b9      	ldr	r1, [r7, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	3212      	adds	r2, #18
 80033fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	3301      	adds	r3, #1
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2b03      	cmp	r3, #3
 800340a:	d9d8      	bls.n	80033be <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003432:	461a      	mov	r2, r3
 8003434:	2303      	movs	r3, #3
 8003436:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691a      	ldr	r2, [r3, #16]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003446:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800345a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800345e:	bf00      	nop
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
	...

0800346c <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 800346c:	b480      	push	{r7}
 800346e:	b091      	sub	sp, #68	@ 0x44
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	3318      	adds	r3, #24
 800347c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800347e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800348a:	2300      	movs	r3, #0
 800348c:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800348e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003490:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003496:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800349e:	2300      	movs	r3, #0
 80034a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80034a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80034aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80034ae:	d007      	beq.n	80034c0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80034b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034b4:	3304      	adds	r3, #4
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80034c0:	2302      	movs	r3, #2
 80034c2:	e266      	b.n	8003992 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d044      	beq.n	800355a <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80034d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	4b75      	ldr	r3, [pc, #468]	@ (80036ac <ETH_Prepare_Tx_Descriptors+0x240>)
 80034d6:	4013      	ands	r3, r2
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034dc:	431a      	orrs	r2, r3
 80034de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e0:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80034e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80034ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ec:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80034fc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d027      	beq.n	800355a <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800350a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	b29a      	uxth	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003514:	041b      	lsls	r3, r3, #16
 8003516:	431a      	orrs	r2, r3
 8003518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800351a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800351c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003526:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003534:	431a      	orrs	r2, r3
 8003536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003538:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003548:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003558:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0310 	and.w	r3, r3, #16
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00e      	beq.n	8003584 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8003566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	4b51      	ldr	r3, [pc, #324]	@ (80036b0 <ETH_Prepare_Tx_Descriptors+0x244>)
 800356c:	4013      	ands	r3, r2
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	6992      	ldr	r2, [r2, #24]
 8003572:	431a      	orrs	r2, r3
 8003574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003576:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8003578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8003580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003582:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b00      	cmp	r3, #0
 800358e:	d105      	bne.n	800359c <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0310 	and.w	r3, r3, #16
 8003598:	2b00      	cmp	r3, #0
 800359a:	d036      	beq.n	800360a <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 800359c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80035a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80035a8:	f3bf 8f5f 	dmb	sy
}
 80035ac:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80035ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80035b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b8:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80035ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035bc:	3301      	adds	r3, #1
 80035be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d902      	bls.n	80035cc <ETH_Prepare_Tx_Descriptors+0x160>
 80035c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035c8:	3b04      	subs	r3, #4
 80035ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80035cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035d4:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 80035d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035d8:	3301      	adds	r3, #1
 80035da:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80035dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80035e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80035e8:	d10f      	bne.n	800360a <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80035ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ec:	6a3a      	ldr	r2, [r7, #32]
 80035ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035f2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80035f4:	f3bf 8f5f 	dmb	sy
}
 80035f8:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80035fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003604:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8003606:	2302      	movs	r3, #2
 8003608:	e1c3      	b.n	8003992 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800360a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800360c:	3301      	adds	r3, #1
 800360e:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	461a      	mov	r2, r3
 8003616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003618:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800361a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	4b24      	ldr	r3, [pc, #144]	@ (80036b0 <ETH_Prepare_Tx_Descriptors+0x244>)
 8003620:	4013      	ands	r3, r2
 8003622:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003624:	6852      	ldr	r2, [r2, #4]
 8003626:	431a      	orrs	r2, r3
 8003628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362a:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 800362c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d012      	beq.n	800365a <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8003634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800363a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003642:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	4b1a      	ldr	r3, [pc, #104]	@ (80036b4 <ETH_Prepare_Tx_Descriptors+0x248>)
 800364a:	4013      	ands	r3, r2
 800364c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800364e:	6852      	ldr	r2, [r2, #4]
 8003650:	0412      	lsls	r2, r2, #16
 8003652:	431a      	orrs	r2, r3
 8003654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003656:	609a      	str	r2, [r3, #8]
 8003658:	e008      	b.n	800366c <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800365a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365c:	2200      	movs	r2, #0
 800365e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	4b13      	ldr	r3, [pc, #76]	@ (80036b4 <ETH_Prepare_Tx_Descriptors+0x248>)
 8003666:	4013      	ands	r3, r2
 8003668:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800366a:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	2b00      	cmp	r3, #0
 8003676:	d021      	beq.n	80036bc <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	04db      	lsls	r3, r3, #19
 8003686:	431a      	orrs	r2, r3
 8003688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368a:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800368c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	4b09      	ldr	r3, [pc, #36]	@ (80036b8 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8003692:	4013      	ands	r3, r2
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	69d2      	ldr	r2, [r2, #28]
 8003698:	431a      	orrs	r2, r3
 800369a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800369c:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800369e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80036a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a8:	60da      	str	r2, [r3, #12]
 80036aa:	e02e      	b.n	800370a <ETH_Prepare_Tx_Descriptors+0x29e>
 80036ac:	ffff0000 	.word	0xffff0000
 80036b0:	ffffc000 	.word	0xffffc000
 80036b4:	c000ffff 	.word	0xc000ffff
 80036b8:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80036bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	4b7b      	ldr	r3, [pc, #492]	@ (80038b0 <ETH_Prepare_Tx_Descriptors+0x444>)
 80036c2:	4013      	ands	r3, r2
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	6852      	ldr	r2, [r2, #4]
 80036c8:	431a      	orrs	r2, r3
 80036ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036cc:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d008      	beq.n	80036ec <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80036da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	431a      	orrs	r2, r3
 80036e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ea:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0320 	and.w	r3, r3, #32
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d008      	beq.n	800370a <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80036f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	431a      	orrs	r2, r3
 8003706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003708:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	2b00      	cmp	r3, #0
 8003714:	d008      	beq.n	8003728 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8003716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003722:	431a      	orrs	r2, r3
 8003724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003726:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003732:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800373c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003740:	f3bf 8f5f 	dmb	sy
}
 8003744:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800374e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003750:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 80da 	beq.w	8003914 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8003760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	431a      	orrs	r2, r3
 800376e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003770:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003772:	e0cf      	b.n	8003914 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800377c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800377e:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003782:	3301      	adds	r3, #1
 8003784:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003788:	2b03      	cmp	r3, #3
 800378a:	d902      	bls.n	8003792 <ETH_Prepare_Tx_Descriptors+0x326>
 800378c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800378e:	3b04      	subs	r3, #4
 8003790:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003794:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800379a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800379c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80037a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a6:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80037a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80037b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037b4:	d007      	beq.n	80037c6 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80037b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037ba:	3304      	adds	r3, #4
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d029      	beq.n	800381a <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80037ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80037ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037d2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80037d4:	2300      	movs	r3, #0
 80037d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037d8:	e019      	b.n	800380e <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 80037da:	f3bf 8f5f 	dmb	sy
}
 80037de:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80037e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ea:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80037ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037ee:	3301      	adds	r3, #1
 80037f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037f4:	2b03      	cmp	r3, #3
 80037f6:	d902      	bls.n	80037fe <ETH_Prepare_Tx_Descriptors+0x392>
 80037f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037fa:	3b04      	subs	r3, #4
 80037fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80037fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003800:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003806:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800380a:	3301      	adds	r3, #1
 800380c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800380e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003812:	429a      	cmp	r2, r3
 8003814:	d3e1      	bcc.n	80037da <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8003816:	2302      	movs	r3, #2
 8003818:	e0bb      	b.n	8003992 <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 800381a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800381c:	3301      	adds	r3, #1
 800381e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382e:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	4b1f      	ldr	r3, [pc, #124]	@ (80038b4 <ETH_Prepare_Tx_Descriptors+0x448>)
 8003836:	4013      	ands	r3, r2
 8003838:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800383a:	6852      	ldr	r2, [r2, #4]
 800383c:	431a      	orrs	r2, r3
 800383e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003840:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8003842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d012      	beq.n	8003870 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 800384a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	461a      	mov	r2, r3
 8003856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003858:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800385a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	4b16      	ldr	r3, [pc, #88]	@ (80038b8 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8003860:	4013      	ands	r3, r2
 8003862:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003864:	6852      	ldr	r2, [r2, #4]
 8003866:	0412      	lsls	r2, r2, #16
 8003868:	431a      	orrs	r2, r3
 800386a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800386c:	609a      	str	r2, [r3, #8]
 800386e:	e008      	b.n	8003882 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003872:	2200      	movs	r2, #0
 8003874:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	4b0f      	ldr	r3, [pc, #60]	@ (80038b8 <ETH_Prepare_Tx_Descriptors+0x44c>)
 800387c:	4013      	ands	r3, r2
 800387e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003880:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0310 	and.w	r3, r3, #16
 800388a:	2b00      	cmp	r3, #0
 800388c:	d018      	beq.n	80038c0 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800388e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	4b0a      	ldr	r3, [pc, #40]	@ (80038bc <ETH_Prepare_Tx_Descriptors+0x450>)
 8003894:	4013      	ands	r3, r2
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	69d2      	ldr	r2, [r2, #28]
 800389a:	431a      	orrs	r2, r3
 800389c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389e:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80038a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80038a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038aa:	60da      	str	r2, [r3, #12]
 80038ac:	e020      	b.n	80038f0 <ETH_Prepare_Tx_Descriptors+0x484>
 80038ae:	bf00      	nop
 80038b0:	ffff8000 	.word	0xffff8000
 80038b4:	ffffc000 	.word	0xffffc000
 80038b8:	c000ffff 	.word	0xc000ffff
 80038bc:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80038c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c2:	68da      	ldr	r2, [r3, #12]
 80038c4:	4b36      	ldr	r3, [pc, #216]	@ (80039a0 <ETH_Prepare_Tx_Descriptors+0x534>)
 80038c6:	4013      	ands	r3, r2
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	6852      	ldr	r2, [r2, #4]
 80038cc:	431a      	orrs	r2, r3
 80038ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d0:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d008      	beq.n	80038f0 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80038de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	431a      	orrs	r2, r3
 80038ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ee:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80038f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f2:	3301      	adds	r3, #1
 80038f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80038f6:	f3bf 8f5f 	dmb	sy
}
 80038fa:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80038fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003906:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003912:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	f47f af2b 	bne.w	8003774 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d006      	beq.n	8003932 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800392c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392e:	609a      	str	r2, [r3, #8]
 8003930:	e005      	b.n	800393e <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800393a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393c:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800393e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003948:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800394a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800394e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003952:	3304      	adds	r3, #4
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800395a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800395e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003960:	f3ef 8310 	mrs	r3, PRIMASK
 8003964:	613b      	str	r3, [r7, #16]
  return(result);
 8003966:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003968:	61fb      	str	r3, [r7, #28]
 800396a:	2301      	movs	r3, #1
 800396c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f383 8810 	msr	PRIMASK, r3
}
 8003974:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003978:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800397a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397c:	4413      	add	r3, r2
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003982:	629a      	str	r2, [r3, #40]	@ 0x28
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	f383 8810 	msr	PRIMASK, r3
}
 800398e:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3744      	adds	r7, #68	@ 0x44
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	ffff8000 	.word	0xffff8000

080039a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b089      	sub	sp, #36	@ 0x24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80039b2:	4b89      	ldr	r3, [pc, #548]	@ (8003bd8 <HAL_GPIO_Init+0x234>)
 80039b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80039b6:	e194      	b.n	8003ce2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	2101      	movs	r1, #1
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	fa01 f303 	lsl.w	r3, r1, r3
 80039c4:	4013      	ands	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 8186 	beq.w	8003cdc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 0303 	and.w	r3, r3, #3
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d005      	beq.n	80039e8 <HAL_GPIO_Init+0x44>
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f003 0303 	and.w	r3, r3, #3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d130      	bne.n	8003a4a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	2203      	movs	r2, #3
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	43db      	mvns	r3, r3
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	4013      	ands	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	68da      	ldr	r2, [r3, #12]
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a1e:	2201      	movs	r2, #1
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	43db      	mvns	r3, r3
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	091b      	lsrs	r3, r3, #4
 8003a34:	f003 0201 	and.w	r2, r3, #1
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	2b03      	cmp	r3, #3
 8003a54:	d017      	beq.n	8003a86 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	2203      	movs	r2, #3
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	43db      	mvns	r3, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	689a      	ldr	r2, [r3, #8]
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d123      	bne.n	8003ada <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	08da      	lsrs	r2, r3, #3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3208      	adds	r2, #8
 8003a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	220f      	movs	r2, #15
 8003aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003aae:	43db      	mvns	r3, r3
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	691a      	ldr	r2, [r3, #16]
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	08da      	lsrs	r2, r3, #3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3208      	adds	r2, #8
 8003ad4:	69b9      	ldr	r1, [r7, #24]
 8003ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	2203      	movs	r2, #3
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	43db      	mvns	r3, r3
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	4013      	ands	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f003 0203 	and.w	r2, r3, #3
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 80e0 	beq.w	8003cdc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b1c:	4b2f      	ldr	r3, [pc, #188]	@ (8003bdc <HAL_GPIO_Init+0x238>)
 8003b1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003b22:	4a2e      	ldr	r2, [pc, #184]	@ (8003bdc <HAL_GPIO_Init+0x238>)
 8003b24:	f043 0302 	orr.w	r3, r3, #2
 8003b28:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003b2c:	4b2b      	ldr	r3, [pc, #172]	@ (8003bdc <HAL_GPIO_Init+0x238>)
 8003b2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b3a:	4a29      	ldr	r2, [pc, #164]	@ (8003be0 <HAL_GPIO_Init+0x23c>)
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	089b      	lsrs	r3, r3, #2
 8003b40:	3302      	adds	r3, #2
 8003b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	220f      	movs	r2, #15
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	43db      	mvns	r3, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a20      	ldr	r2, [pc, #128]	@ (8003be4 <HAL_GPIO_Init+0x240>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d052      	beq.n	8003c0c <HAL_GPIO_Init+0x268>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a1f      	ldr	r2, [pc, #124]	@ (8003be8 <HAL_GPIO_Init+0x244>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d031      	beq.n	8003bd2 <HAL_GPIO_Init+0x22e>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a1e      	ldr	r2, [pc, #120]	@ (8003bec <HAL_GPIO_Init+0x248>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d02b      	beq.n	8003bce <HAL_GPIO_Init+0x22a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a1d      	ldr	r2, [pc, #116]	@ (8003bf0 <HAL_GPIO_Init+0x24c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d025      	beq.n	8003bca <HAL_GPIO_Init+0x226>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a1c      	ldr	r2, [pc, #112]	@ (8003bf4 <HAL_GPIO_Init+0x250>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d01f      	beq.n	8003bc6 <HAL_GPIO_Init+0x222>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a1b      	ldr	r2, [pc, #108]	@ (8003bf8 <HAL_GPIO_Init+0x254>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d019      	beq.n	8003bc2 <HAL_GPIO_Init+0x21e>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a1a      	ldr	r2, [pc, #104]	@ (8003bfc <HAL_GPIO_Init+0x258>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d013      	beq.n	8003bbe <HAL_GPIO_Init+0x21a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a19      	ldr	r2, [pc, #100]	@ (8003c00 <HAL_GPIO_Init+0x25c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d00d      	beq.n	8003bba <HAL_GPIO_Init+0x216>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a18      	ldr	r2, [pc, #96]	@ (8003c04 <HAL_GPIO_Init+0x260>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d007      	beq.n	8003bb6 <HAL_GPIO_Init+0x212>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a17      	ldr	r2, [pc, #92]	@ (8003c08 <HAL_GPIO_Init+0x264>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d101      	bne.n	8003bb2 <HAL_GPIO_Init+0x20e>
 8003bae:	2309      	movs	r3, #9
 8003bb0:	e02d      	b.n	8003c0e <HAL_GPIO_Init+0x26a>
 8003bb2:	230a      	movs	r3, #10
 8003bb4:	e02b      	b.n	8003c0e <HAL_GPIO_Init+0x26a>
 8003bb6:	2308      	movs	r3, #8
 8003bb8:	e029      	b.n	8003c0e <HAL_GPIO_Init+0x26a>
 8003bba:	2307      	movs	r3, #7
 8003bbc:	e027      	b.n	8003c0e <HAL_GPIO_Init+0x26a>
 8003bbe:	2306      	movs	r3, #6
 8003bc0:	e025      	b.n	8003c0e <HAL_GPIO_Init+0x26a>
 8003bc2:	2305      	movs	r3, #5
 8003bc4:	e023      	b.n	8003c0e <HAL_GPIO_Init+0x26a>
 8003bc6:	2304      	movs	r3, #4
 8003bc8:	e021      	b.n	8003c0e <HAL_GPIO_Init+0x26a>
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e01f      	b.n	8003c0e <HAL_GPIO_Init+0x26a>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e01d      	b.n	8003c0e <HAL_GPIO_Init+0x26a>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e01b      	b.n	8003c0e <HAL_GPIO_Init+0x26a>
 8003bd6:	bf00      	nop
 8003bd8:	58000080 	.word	0x58000080
 8003bdc:	58024400 	.word	0x58024400
 8003be0:	58000400 	.word	0x58000400
 8003be4:	58020000 	.word	0x58020000
 8003be8:	58020400 	.word	0x58020400
 8003bec:	58020800 	.word	0x58020800
 8003bf0:	58020c00 	.word	0x58020c00
 8003bf4:	58021000 	.word	0x58021000
 8003bf8:	58021400 	.word	0x58021400
 8003bfc:	58021800 	.word	0x58021800
 8003c00:	58021c00 	.word	0x58021c00
 8003c04:	58022000 	.word	0x58022000
 8003c08:	58022400 	.word	0x58022400
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	69fa      	ldr	r2, [r7, #28]
 8003c10:	f002 0203 	and.w	r2, r2, #3
 8003c14:	0092      	lsls	r2, r2, #2
 8003c16:	4093      	lsls	r3, r2
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c1e:	4938      	ldr	r1, [pc, #224]	@ (8003d00 <HAL_GPIO_Init+0x35c>)
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	089b      	lsrs	r3, r3, #2
 8003c24:	3302      	adds	r3, #2
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	43db      	mvns	r3, r3
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003c52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003c5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	43db      	mvns	r3, r3
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003c80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	43db      	mvns	r3, r3
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	4013      	ands	r3, r2
 8003c96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f47f ae63 	bne.w	80039b8 <HAL_GPIO_Init+0x14>
  }
}
 8003cf2:	bf00      	nop
 8003cf4:	bf00      	nop
 8003cf6:	3724      	adds	r7, #36	@ 0x24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	58000400 	.word	0x58000400

08003d04 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003d0c:	4b19      	ldr	r3, [pc, #100]	@ (8003d74 <HAL_PWREx_ConfigSupply+0x70>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d00a      	beq.n	8003d2e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003d18:	4b16      	ldr	r3, [pc, #88]	@ (8003d74 <HAL_PWREx_ConfigSupply+0x70>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d001      	beq.n	8003d2a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e01f      	b.n	8003d6a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	e01d      	b.n	8003d6a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003d2e:	4b11      	ldr	r3, [pc, #68]	@ (8003d74 <HAL_PWREx_ConfigSupply+0x70>)
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f023 0207 	bic.w	r2, r3, #7
 8003d36:	490f      	ldr	r1, [pc, #60]	@ (8003d74 <HAL_PWREx_ConfigSupply+0x70>)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003d3e:	f7fd fb3f 	bl	80013c0 <HAL_GetTick>
 8003d42:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d44:	e009      	b.n	8003d5a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d46:	f7fd fb3b 	bl	80013c0 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d54:	d901      	bls.n	8003d5a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e007      	b.n	8003d6a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d5a:	4b06      	ldr	r3, [pc, #24]	@ (8003d74 <HAL_PWREx_ConfigSupply+0x70>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d66:	d1ee      	bne.n	8003d46 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	58024800 	.word	0x58024800

08003d78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08c      	sub	sp, #48	@ 0x30
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d102      	bne.n	8003d8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	f000 bc48 	b.w	800461c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 8088 	beq.w	8003eaa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d9a:	4b99      	ldr	r3, [pc, #612]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003da4:	4b96      	ldr	r3, [pc, #600]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d007      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x48>
 8003db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db2:	2b18      	cmp	r3, #24
 8003db4:	d111      	bne.n	8003dda <HAL_RCC_OscConfig+0x62>
 8003db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db8:	f003 0303 	and.w	r3, r3, #3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d10c      	bne.n	8003dda <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc0:	4b8f      	ldr	r3, [pc, #572]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d06d      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x130>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d169      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	f000 bc21 	b.w	800461c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003de2:	d106      	bne.n	8003df2 <HAL_RCC_OscConfig+0x7a>
 8003de4:	4b86      	ldr	r3, [pc, #536]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a85      	ldr	r2, [pc, #532]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003dea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dee:	6013      	str	r3, [r2, #0]
 8003df0:	e02e      	b.n	8003e50 <HAL_RCC_OscConfig+0xd8>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10c      	bne.n	8003e14 <HAL_RCC_OscConfig+0x9c>
 8003dfa:	4b81      	ldr	r3, [pc, #516]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a80      	ldr	r2, [pc, #512]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003e00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	4b7e      	ldr	r3, [pc, #504]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a7d      	ldr	r2, [pc, #500]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003e0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	e01d      	b.n	8003e50 <HAL_RCC_OscConfig+0xd8>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e1c:	d10c      	bne.n	8003e38 <HAL_RCC_OscConfig+0xc0>
 8003e1e:	4b78      	ldr	r3, [pc, #480]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a77      	ldr	r2, [pc, #476]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003e24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	4b75      	ldr	r3, [pc, #468]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a74      	ldr	r2, [pc, #464]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	e00b      	b.n	8003e50 <HAL_RCC_OscConfig+0xd8>
 8003e38:	4b71      	ldr	r3, [pc, #452]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a70      	ldr	r2, [pc, #448]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003e3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e42:	6013      	str	r3, [r2, #0]
 8003e44:	4b6e      	ldr	r3, [pc, #440]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a6d      	ldr	r2, [pc, #436]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003e4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d013      	beq.n	8003e80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e58:	f7fd fab2 	bl	80013c0 <HAL_GetTick>
 8003e5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e60:	f7fd faae 	bl	80013c0 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b64      	cmp	r3, #100	@ 0x64
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e3d4      	b.n	800461c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e72:	4b63      	ldr	r3, [pc, #396]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f0      	beq.n	8003e60 <HAL_RCC_OscConfig+0xe8>
 8003e7e:	e014      	b.n	8003eaa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e80:	f7fd fa9e 	bl	80013c0 <HAL_GetTick>
 8003e84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e88:	f7fd fa9a 	bl	80013c0 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b64      	cmp	r3, #100	@ 0x64
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e3c0      	b.n	800461c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e9a:	4b59      	ldr	r3, [pc, #356]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f0      	bne.n	8003e88 <HAL_RCC_OscConfig+0x110>
 8003ea6:	e000      	b.n	8003eaa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 80ca 	beq.w	800404c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eb8:	4b51      	ldr	r3, [pc, #324]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ec0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ec2:	4b4f      	ldr	r3, [pc, #316]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d007      	beq.n	8003ede <HAL_RCC_OscConfig+0x166>
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	2b18      	cmp	r3, #24
 8003ed2:	d156      	bne.n	8003f82 <HAL_RCC_OscConfig+0x20a>
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d151      	bne.n	8003f82 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ede:	4b48      	ldr	r3, [pc, #288]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0304 	and.w	r3, r3, #4
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d005      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x17e>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e392      	b.n	800461c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ef6:	4b42      	ldr	r3, [pc, #264]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f023 0219 	bic.w	r2, r3, #25
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	493f      	ldr	r1, [pc, #252]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f08:	f7fd fa5a 	bl	80013c0 <HAL_GetTick>
 8003f0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f10:	f7fd fa56 	bl	80013c0 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e37c      	b.n	800461c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f22:	4b37      	ldr	r3, [pc, #220]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f0      	beq.n	8003f10 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f2e:	f7fd fa77 	bl	8001420 <HAL_GetREVID>
 8003f32:	4603      	mov	r3, r0
 8003f34:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d817      	bhi.n	8003f6c <HAL_RCC_OscConfig+0x1f4>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	2b40      	cmp	r3, #64	@ 0x40
 8003f42:	d108      	bne.n	8003f56 <HAL_RCC_OscConfig+0x1de>
 8003f44:	4b2e      	ldr	r3, [pc, #184]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003f4c:	4a2c      	ldr	r2, [pc, #176]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003f4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f52:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f54:	e07a      	b.n	800404c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f56:	4b2a      	ldr	r3, [pc, #168]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	031b      	lsls	r3, r3, #12
 8003f64:	4926      	ldr	r1, [pc, #152]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f6a:	e06f      	b.n	800404c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f6c:	4b24      	ldr	r3, [pc, #144]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	061b      	lsls	r3, r3, #24
 8003f7a:	4921      	ldr	r1, [pc, #132]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f80:	e064      	b.n	800404c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d047      	beq.n	800401a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f023 0219 	bic.w	r2, r3, #25
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	491a      	ldr	r1, [pc, #104]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9c:	f7fd fa10 	bl	80013c0 <HAL_GetTick>
 8003fa0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa4:	f7fd fa0c 	bl	80013c0 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e332      	b.n	800461c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fb6:	4b12      	ldr	r3, [pc, #72]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0f0      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc2:	f7fd fa2d 	bl	8001420 <HAL_GetREVID>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d819      	bhi.n	8004004 <HAL_RCC_OscConfig+0x28c>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	2b40      	cmp	r3, #64	@ 0x40
 8003fd6:	d108      	bne.n	8003fea <HAL_RCC_OscConfig+0x272>
 8003fd8:	4b09      	ldr	r3, [pc, #36]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003fe0:	4a07      	ldr	r2, [pc, #28]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003fe2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fe6:	6053      	str	r3, [r2, #4]
 8003fe8:	e030      	b.n	800404c <HAL_RCC_OscConfig+0x2d4>
 8003fea:	4b05      	ldr	r3, [pc, #20]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	031b      	lsls	r3, r3, #12
 8003ff8:	4901      	ldr	r1, [pc, #4]	@ (8004000 <HAL_RCC_OscConfig+0x288>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	604b      	str	r3, [r1, #4]
 8003ffe:	e025      	b.n	800404c <HAL_RCC_OscConfig+0x2d4>
 8004000:	58024400 	.word	0x58024400
 8004004:	4b9a      	ldr	r3, [pc, #616]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	061b      	lsls	r3, r3, #24
 8004012:	4997      	ldr	r1, [pc, #604]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 8004014:	4313      	orrs	r3, r2
 8004016:	604b      	str	r3, [r1, #4]
 8004018:	e018      	b.n	800404c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800401a:	4b95      	ldr	r3, [pc, #596]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a94      	ldr	r2, [pc, #592]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 8004020:	f023 0301 	bic.w	r3, r3, #1
 8004024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004026:	f7fd f9cb 	bl	80013c0 <HAL_GetTick>
 800402a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800402e:	f7fd f9c7 	bl	80013c0 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e2ed      	b.n	800461c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004040:	4b8b      	ldr	r3, [pc, #556]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1f0      	bne.n	800402e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0310 	and.w	r3, r3, #16
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 80a9 	beq.w	80041ac <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800405a:	4b85      	ldr	r3, [pc, #532]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004062:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004064:	4b82      	ldr	r3, [pc, #520]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 8004066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004068:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	2b08      	cmp	r3, #8
 800406e:	d007      	beq.n	8004080 <HAL_RCC_OscConfig+0x308>
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	2b18      	cmp	r3, #24
 8004074:	d13a      	bne.n	80040ec <HAL_RCC_OscConfig+0x374>
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f003 0303 	and.w	r3, r3, #3
 800407c:	2b01      	cmp	r3, #1
 800407e:	d135      	bne.n	80040ec <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004080:	4b7b      	ldr	r3, [pc, #492]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004088:	2b00      	cmp	r3, #0
 800408a:	d005      	beq.n	8004098 <HAL_RCC_OscConfig+0x320>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	2b80      	cmp	r3, #128	@ 0x80
 8004092:	d001      	beq.n	8004098 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e2c1      	b.n	800461c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004098:	f7fd f9c2 	bl	8001420 <HAL_GetREVID>
 800409c:	4603      	mov	r3, r0
 800409e:	f241 0203 	movw	r2, #4099	@ 0x1003
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d817      	bhi.n	80040d6 <HAL_RCC_OscConfig+0x35e>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	2b20      	cmp	r3, #32
 80040ac:	d108      	bne.n	80040c0 <HAL_RCC_OscConfig+0x348>
 80040ae:	4b70      	ldr	r3, [pc, #448]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80040b6:	4a6e      	ldr	r2, [pc, #440]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 80040b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80040bc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80040be:	e075      	b.n	80041ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040c0:	4b6b      	ldr	r3, [pc, #428]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	069b      	lsls	r3, r3, #26
 80040ce:	4968      	ldr	r1, [pc, #416]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80040d4:	e06a      	b.n	80041ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040d6:	4b66      	ldr	r3, [pc, #408]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	061b      	lsls	r3, r3, #24
 80040e4:	4962      	ldr	r1, [pc, #392]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80040ea:	e05f      	b.n	80041ac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d042      	beq.n	800417a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80040f4:	4b5e      	ldr	r3, [pc, #376]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a5d      	ldr	r2, [pc, #372]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 80040fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004100:	f7fd f95e 	bl	80013c0 <HAL_GetTick>
 8004104:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004108:	f7fd f95a 	bl	80013c0 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e280      	b.n	800461c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800411a:	4b55      	ldr	r3, [pc, #340]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0f0      	beq.n	8004108 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004126:	f7fd f97b 	bl	8001420 <HAL_GetREVID>
 800412a:	4603      	mov	r3, r0
 800412c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004130:	4293      	cmp	r3, r2
 8004132:	d817      	bhi.n	8004164 <HAL_RCC_OscConfig+0x3ec>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	2b20      	cmp	r3, #32
 800413a:	d108      	bne.n	800414e <HAL_RCC_OscConfig+0x3d6>
 800413c:	4b4c      	ldr	r3, [pc, #304]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004144:	4a4a      	ldr	r2, [pc, #296]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 8004146:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800414a:	6053      	str	r3, [r2, #4]
 800414c:	e02e      	b.n	80041ac <HAL_RCC_OscConfig+0x434>
 800414e:	4b48      	ldr	r3, [pc, #288]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	069b      	lsls	r3, r3, #26
 800415c:	4944      	ldr	r1, [pc, #272]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 800415e:	4313      	orrs	r3, r2
 8004160:	604b      	str	r3, [r1, #4]
 8004162:	e023      	b.n	80041ac <HAL_RCC_OscConfig+0x434>
 8004164:	4b42      	ldr	r3, [pc, #264]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	061b      	lsls	r3, r3, #24
 8004172:	493f      	ldr	r1, [pc, #252]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 8004174:	4313      	orrs	r3, r2
 8004176:	60cb      	str	r3, [r1, #12]
 8004178:	e018      	b.n	80041ac <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800417a:	4b3d      	ldr	r3, [pc, #244]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a3c      	ldr	r2, [pc, #240]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 8004180:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004186:	f7fd f91b 	bl	80013c0 <HAL_GetTick>
 800418a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800418e:	f7fd f917 	bl	80013c0 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e23d      	b.n	800461c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80041a0:	4b33      	ldr	r3, [pc, #204]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1f0      	bne.n	800418e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0308 	and.w	r3, r3, #8
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d036      	beq.n	8004226 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d019      	beq.n	80041f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 80041c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041c4:	4a2a      	ldr	r2, [pc, #168]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 80041c6:	f043 0301 	orr.w	r3, r3, #1
 80041ca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041cc:	f7fd f8f8 	bl	80013c0 <HAL_GetTick>
 80041d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041d4:	f7fd f8f4 	bl	80013c0 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e21a      	b.n	800461c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80041e6:	4b22      	ldr	r3, [pc, #136]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 80041e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCC_OscConfig+0x45c>
 80041f2:	e018      	b.n	8004226 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041f4:	4b1e      	ldr	r3, [pc, #120]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 80041f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 80041fa:	f023 0301 	bic.w	r3, r3, #1
 80041fe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004200:	f7fd f8de 	bl	80013c0 <HAL_GetTick>
 8004204:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004208:	f7fd f8da 	bl	80013c0 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e200      	b.n	800461c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800421a:	4b15      	ldr	r3, [pc, #84]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 800421c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f0      	bne.n	8004208 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0320 	and.w	r3, r3, #32
 800422e:	2b00      	cmp	r3, #0
 8004230:	d039      	beq.n	80042a6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d01c      	beq.n	8004274 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800423a:	4b0d      	ldr	r3, [pc, #52]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a0c      	ldr	r2, [pc, #48]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 8004240:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004244:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004246:	f7fd f8bb 	bl	80013c0 <HAL_GetTick>
 800424a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800424e:	f7fd f8b7 	bl	80013c0 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e1dd      	b.n	800461c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004260:	4b03      	ldr	r3, [pc, #12]	@ (8004270 <HAL_RCC_OscConfig+0x4f8>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0f0      	beq.n	800424e <HAL_RCC_OscConfig+0x4d6>
 800426c:	e01b      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
 800426e:	bf00      	nop
 8004270:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004274:	4b9b      	ldr	r3, [pc, #620]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a9a      	ldr	r2, [pc, #616]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 800427a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800427e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004280:	f7fd f89e 	bl	80013c0 <HAL_GetTick>
 8004284:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004288:	f7fd f89a 	bl	80013c0 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e1c0      	b.n	800461c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800429a:	4b92      	ldr	r3, [pc, #584]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0304 	and.w	r3, r3, #4
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 8081 	beq.w	80043b6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80042b4:	4b8c      	ldr	r3, [pc, #560]	@ (80044e8 <HAL_RCC_OscConfig+0x770>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a8b      	ldr	r2, [pc, #556]	@ (80044e8 <HAL_RCC_OscConfig+0x770>)
 80042ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042c0:	f7fd f87e 	bl	80013c0 <HAL_GetTick>
 80042c4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c8:	f7fd f87a 	bl	80013c0 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b64      	cmp	r3, #100	@ 0x64
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e1a0      	b.n	800461c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042da:	4b83      	ldr	r3, [pc, #524]	@ (80044e8 <HAL_RCC_OscConfig+0x770>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f0      	beq.n	80042c8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d106      	bne.n	80042fc <HAL_RCC_OscConfig+0x584>
 80042ee:	4b7d      	ldr	r3, [pc, #500]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 80042f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f2:	4a7c      	ldr	r2, [pc, #496]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 80042f4:	f043 0301 	orr.w	r3, r3, #1
 80042f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80042fa:	e02d      	b.n	8004358 <HAL_RCC_OscConfig+0x5e0>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10c      	bne.n	800431e <HAL_RCC_OscConfig+0x5a6>
 8004304:	4b77      	ldr	r3, [pc, #476]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 8004306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004308:	4a76      	ldr	r2, [pc, #472]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 800430a:	f023 0301 	bic.w	r3, r3, #1
 800430e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004310:	4b74      	ldr	r3, [pc, #464]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 8004312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004314:	4a73      	ldr	r2, [pc, #460]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 8004316:	f023 0304 	bic.w	r3, r3, #4
 800431a:	6713      	str	r3, [r2, #112]	@ 0x70
 800431c:	e01c      	b.n	8004358 <HAL_RCC_OscConfig+0x5e0>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	2b05      	cmp	r3, #5
 8004324:	d10c      	bne.n	8004340 <HAL_RCC_OscConfig+0x5c8>
 8004326:	4b6f      	ldr	r3, [pc, #444]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 8004328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800432a:	4a6e      	ldr	r2, [pc, #440]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 800432c:	f043 0304 	orr.w	r3, r3, #4
 8004330:	6713      	str	r3, [r2, #112]	@ 0x70
 8004332:	4b6c      	ldr	r3, [pc, #432]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 8004334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004336:	4a6b      	ldr	r2, [pc, #428]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 8004338:	f043 0301 	orr.w	r3, r3, #1
 800433c:	6713      	str	r3, [r2, #112]	@ 0x70
 800433e:	e00b      	b.n	8004358 <HAL_RCC_OscConfig+0x5e0>
 8004340:	4b68      	ldr	r3, [pc, #416]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 8004342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004344:	4a67      	ldr	r2, [pc, #412]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 8004346:	f023 0301 	bic.w	r3, r3, #1
 800434a:	6713      	str	r3, [r2, #112]	@ 0x70
 800434c:	4b65      	ldr	r3, [pc, #404]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 800434e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004350:	4a64      	ldr	r2, [pc, #400]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 8004352:	f023 0304 	bic.w	r3, r3, #4
 8004356:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d015      	beq.n	800438c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004360:	f7fd f82e 	bl	80013c0 <HAL_GetTick>
 8004364:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004366:	e00a      	b.n	800437e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004368:	f7fd f82a 	bl	80013c0 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004376:	4293      	cmp	r3, r2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e14e      	b.n	800461c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800437e:	4b59      	ldr	r3, [pc, #356]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 8004380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0ee      	beq.n	8004368 <HAL_RCC_OscConfig+0x5f0>
 800438a:	e014      	b.n	80043b6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800438c:	f7fd f818 	bl	80013c0 <HAL_GetTick>
 8004390:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004392:	e00a      	b.n	80043aa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004394:	f7fd f814 	bl	80013c0 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e138      	b.n	800461c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80043aa:	4b4e      	ldr	r3, [pc, #312]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 80043ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1ee      	bne.n	8004394 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 812d 	beq.w	800461a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80043c0:	4b48      	ldr	r3, [pc, #288]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043c8:	2b18      	cmp	r3, #24
 80043ca:	f000 80bd 	beq.w	8004548 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	f040 809e 	bne.w	8004514 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d8:	4b42      	ldr	r3, [pc, #264]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a41      	ldr	r2, [pc, #260]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 80043de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e4:	f7fc ffec 	bl	80013c0 <HAL_GetTick>
 80043e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ec:	f7fc ffe8 	bl	80013c0 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e10e      	b.n	800461c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043fe:	4b39      	ldr	r3, [pc, #228]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1f0      	bne.n	80043ec <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800440a:	4b36      	ldr	r3, [pc, #216]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 800440c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800440e:	4b37      	ldr	r3, [pc, #220]	@ (80044ec <HAL_RCC_OscConfig+0x774>)
 8004410:	4013      	ands	r3, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800441a:	0112      	lsls	r2, r2, #4
 800441c:	430a      	orrs	r2, r1
 800441e:	4931      	ldr	r1, [pc, #196]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 8004420:	4313      	orrs	r3, r2
 8004422:	628b      	str	r3, [r1, #40]	@ 0x28
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004428:	3b01      	subs	r3, #1
 800442a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004432:	3b01      	subs	r3, #1
 8004434:	025b      	lsls	r3, r3, #9
 8004436:	b29b      	uxth	r3, r3
 8004438:	431a      	orrs	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800443e:	3b01      	subs	r3, #1
 8004440:	041b      	lsls	r3, r3, #16
 8004442:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800444c:	3b01      	subs	r3, #1
 800444e:	061b      	lsls	r3, r3, #24
 8004450:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004454:	4923      	ldr	r1, [pc, #140]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 8004456:	4313      	orrs	r3, r2
 8004458:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800445a:	4b22      	ldr	r3, [pc, #136]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 800445c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445e:	4a21      	ldr	r2, [pc, #132]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 8004460:	f023 0301 	bic.w	r3, r3, #1
 8004464:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004466:	4b1f      	ldr	r3, [pc, #124]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 8004468:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800446a:	4b21      	ldr	r3, [pc, #132]	@ (80044f0 <HAL_RCC_OscConfig+0x778>)
 800446c:	4013      	ands	r3, r2
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004472:	00d2      	lsls	r2, r2, #3
 8004474:	491b      	ldr	r1, [pc, #108]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 8004476:	4313      	orrs	r3, r2
 8004478:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800447a:	4b1a      	ldr	r3, [pc, #104]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 800447c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447e:	f023 020c 	bic.w	r2, r3, #12
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004486:	4917      	ldr	r1, [pc, #92]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 8004488:	4313      	orrs	r3, r2
 800448a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800448c:	4b15      	ldr	r3, [pc, #84]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 800448e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004490:	f023 0202 	bic.w	r2, r3, #2
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004498:	4912      	ldr	r1, [pc, #72]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 800449a:	4313      	orrs	r3, r2
 800449c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800449e:	4b11      	ldr	r3, [pc, #68]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 80044a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a2:	4a10      	ldr	r2, [pc, #64]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 80044a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044aa:	4b0e      	ldr	r3, [pc, #56]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 80044ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ae:	4a0d      	ldr	r2, [pc, #52]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 80044b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80044b6:	4b0b      	ldr	r3, [pc, #44]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 80044b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ba:	4a0a      	ldr	r2, [pc, #40]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 80044bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80044c2:	4b08      	ldr	r3, [pc, #32]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 80044c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c6:	4a07      	ldr	r2, [pc, #28]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 80044c8:	f043 0301 	orr.w	r3, r3, #1
 80044cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044ce:	4b05      	ldr	r3, [pc, #20]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a04      	ldr	r2, [pc, #16]	@ (80044e4 <HAL_RCC_OscConfig+0x76c>)
 80044d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044da:	f7fc ff71 	bl	80013c0 <HAL_GetTick>
 80044de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044e0:	e011      	b.n	8004506 <HAL_RCC_OscConfig+0x78e>
 80044e2:	bf00      	nop
 80044e4:	58024400 	.word	0x58024400
 80044e8:	58024800 	.word	0x58024800
 80044ec:	fffffc0c 	.word	0xfffffc0c
 80044f0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f4:	f7fc ff64 	bl	80013c0 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e08a      	b.n	800461c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004506:	4b47      	ldr	r3, [pc, #284]	@ (8004624 <HAL_RCC_OscConfig+0x8ac>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCC_OscConfig+0x77c>
 8004512:	e082      	b.n	800461a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004514:	4b43      	ldr	r3, [pc, #268]	@ (8004624 <HAL_RCC_OscConfig+0x8ac>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a42      	ldr	r2, [pc, #264]	@ (8004624 <HAL_RCC_OscConfig+0x8ac>)
 800451a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800451e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004520:	f7fc ff4e 	bl	80013c0 <HAL_GetTick>
 8004524:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004528:	f7fc ff4a 	bl	80013c0 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e070      	b.n	800461c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800453a:	4b3a      	ldr	r3, [pc, #232]	@ (8004624 <HAL_RCC_OscConfig+0x8ac>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f0      	bne.n	8004528 <HAL_RCC_OscConfig+0x7b0>
 8004546:	e068      	b.n	800461a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004548:	4b36      	ldr	r3, [pc, #216]	@ (8004624 <HAL_RCC_OscConfig+0x8ac>)
 800454a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800454e:	4b35      	ldr	r3, [pc, #212]	@ (8004624 <HAL_RCC_OscConfig+0x8ac>)
 8004550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004552:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004558:	2b01      	cmp	r3, #1
 800455a:	d031      	beq.n	80045c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	f003 0203 	and.w	r2, r3, #3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004566:	429a      	cmp	r2, r3
 8004568:	d12a      	bne.n	80045c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	091b      	lsrs	r3, r3, #4
 800456e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004576:	429a      	cmp	r2, r3
 8004578:	d122      	bne.n	80045c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004584:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004586:	429a      	cmp	r2, r3
 8004588:	d11a      	bne.n	80045c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	0a5b      	lsrs	r3, r3, #9
 800458e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004596:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004598:	429a      	cmp	r2, r3
 800459a:	d111      	bne.n	80045c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	0c1b      	lsrs	r3, r3, #16
 80045a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d108      	bne.n	80045c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	0e1b      	lsrs	r3, r3, #24
 80045b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80045bc:	429a      	cmp	r2, r3
 80045be:	d001      	beq.n	80045c4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e02b      	b.n	800461c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80045c4:	4b17      	ldr	r3, [pc, #92]	@ (8004624 <HAL_RCC_OscConfig+0x8ac>)
 80045c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c8:	08db      	lsrs	r3, r3, #3
 80045ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045ce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d01f      	beq.n	800461a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80045da:	4b12      	ldr	r3, [pc, #72]	@ (8004624 <HAL_RCC_OscConfig+0x8ac>)
 80045dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045de:	4a11      	ldr	r2, [pc, #68]	@ (8004624 <HAL_RCC_OscConfig+0x8ac>)
 80045e0:	f023 0301 	bic.w	r3, r3, #1
 80045e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045e6:	f7fc feeb 	bl	80013c0 <HAL_GetTick>
 80045ea:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80045ec:	bf00      	nop
 80045ee:	f7fc fee7 	bl	80013c0 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d0f9      	beq.n	80045ee <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80045fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004624 <HAL_RCC_OscConfig+0x8ac>)
 80045fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004628 <HAL_RCC_OscConfig+0x8b0>)
 8004600:	4013      	ands	r3, r2
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004606:	00d2      	lsls	r2, r2, #3
 8004608:	4906      	ldr	r1, [pc, #24]	@ (8004624 <HAL_RCC_OscConfig+0x8ac>)
 800460a:	4313      	orrs	r3, r2
 800460c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800460e:	4b05      	ldr	r3, [pc, #20]	@ (8004624 <HAL_RCC_OscConfig+0x8ac>)
 8004610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004612:	4a04      	ldr	r2, [pc, #16]	@ (8004624 <HAL_RCC_OscConfig+0x8ac>)
 8004614:	f043 0301 	orr.w	r3, r3, #1
 8004618:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3730      	adds	r7, #48	@ 0x30
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	58024400 	.word	0x58024400
 8004628:	ffff0007 	.word	0xffff0007

0800462c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e19c      	b.n	800497a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004640:	4b8a      	ldr	r3, [pc, #552]	@ (800486c <HAL_RCC_ClockConfig+0x240>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 030f 	and.w	r3, r3, #15
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	429a      	cmp	r2, r3
 800464c:	d910      	bls.n	8004670 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464e:	4b87      	ldr	r3, [pc, #540]	@ (800486c <HAL_RCC_ClockConfig+0x240>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f023 020f 	bic.w	r2, r3, #15
 8004656:	4985      	ldr	r1, [pc, #532]	@ (800486c <HAL_RCC_ClockConfig+0x240>)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	4313      	orrs	r3, r2
 800465c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800465e:	4b83      	ldr	r3, [pc, #524]	@ (800486c <HAL_RCC_ClockConfig+0x240>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	429a      	cmp	r2, r3
 800466a:	d001      	beq.n	8004670 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e184      	b.n	800497a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	d010      	beq.n	800469e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	4b7b      	ldr	r3, [pc, #492]	@ (8004870 <HAL_RCC_ClockConfig+0x244>)
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004688:	429a      	cmp	r2, r3
 800468a:	d908      	bls.n	800469e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800468c:	4b78      	ldr	r3, [pc, #480]	@ (8004870 <HAL_RCC_ClockConfig+0x244>)
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	4975      	ldr	r1, [pc, #468]	@ (8004870 <HAL_RCC_ClockConfig+0x244>)
 800469a:	4313      	orrs	r3, r2
 800469c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d010      	beq.n	80046cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	695a      	ldr	r2, [r3, #20]
 80046ae:	4b70      	ldr	r3, [pc, #448]	@ (8004870 <HAL_RCC_ClockConfig+0x244>)
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d908      	bls.n	80046cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80046ba:	4b6d      	ldr	r3, [pc, #436]	@ (8004870 <HAL_RCC_ClockConfig+0x244>)
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	496a      	ldr	r1, [pc, #424]	@ (8004870 <HAL_RCC_ClockConfig+0x244>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0310 	and.w	r3, r3, #16
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d010      	beq.n	80046fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699a      	ldr	r2, [r3, #24]
 80046dc:	4b64      	ldr	r3, [pc, #400]	@ (8004870 <HAL_RCC_ClockConfig+0x244>)
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d908      	bls.n	80046fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80046e8:	4b61      	ldr	r3, [pc, #388]	@ (8004870 <HAL_RCC_ClockConfig+0x244>)
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	495e      	ldr	r1, [pc, #376]	@ (8004870 <HAL_RCC_ClockConfig+0x244>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0320 	and.w	r3, r3, #32
 8004702:	2b00      	cmp	r3, #0
 8004704:	d010      	beq.n	8004728 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69da      	ldr	r2, [r3, #28]
 800470a:	4b59      	ldr	r3, [pc, #356]	@ (8004870 <HAL_RCC_ClockConfig+0x244>)
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004712:	429a      	cmp	r2, r3
 8004714:	d908      	bls.n	8004728 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004716:	4b56      	ldr	r3, [pc, #344]	@ (8004870 <HAL_RCC_ClockConfig+0x244>)
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	4953      	ldr	r1, [pc, #332]	@ (8004870 <HAL_RCC_ClockConfig+0x244>)
 8004724:	4313      	orrs	r3, r2
 8004726:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d010      	beq.n	8004756 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	4b4d      	ldr	r3, [pc, #308]	@ (8004870 <HAL_RCC_ClockConfig+0x244>)
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	f003 030f 	and.w	r3, r3, #15
 8004740:	429a      	cmp	r2, r3
 8004742:	d908      	bls.n	8004756 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004744:	4b4a      	ldr	r3, [pc, #296]	@ (8004870 <HAL_RCC_ClockConfig+0x244>)
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	f023 020f 	bic.w	r2, r3, #15
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	4947      	ldr	r1, [pc, #284]	@ (8004870 <HAL_RCC_ClockConfig+0x244>)
 8004752:	4313      	orrs	r3, r2
 8004754:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d055      	beq.n	800480e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004762:	4b43      	ldr	r3, [pc, #268]	@ (8004870 <HAL_RCC_ClockConfig+0x244>)
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	4940      	ldr	r1, [pc, #256]	@ (8004870 <HAL_RCC_ClockConfig+0x244>)
 8004770:	4313      	orrs	r3, r2
 8004772:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	2b02      	cmp	r3, #2
 800477a:	d107      	bne.n	800478c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800477c:	4b3c      	ldr	r3, [pc, #240]	@ (8004870 <HAL_RCC_ClockConfig+0x244>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d121      	bne.n	80047cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e0f6      	b.n	800497a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2b03      	cmp	r3, #3
 8004792:	d107      	bne.n	80047a4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004794:	4b36      	ldr	r3, [pc, #216]	@ (8004870 <HAL_RCC_ClockConfig+0x244>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d115      	bne.n	80047cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e0ea      	b.n	800497a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d107      	bne.n	80047bc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047ac:	4b30      	ldr	r3, [pc, #192]	@ (8004870 <HAL_RCC_ClockConfig+0x244>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d109      	bne.n	80047cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e0de      	b.n	800497a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047bc:	4b2c      	ldr	r3, [pc, #176]	@ (8004870 <HAL_RCC_ClockConfig+0x244>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e0d6      	b.n	800497a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047cc:	4b28      	ldr	r3, [pc, #160]	@ (8004870 <HAL_RCC_ClockConfig+0x244>)
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	f023 0207 	bic.w	r2, r3, #7
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	4925      	ldr	r1, [pc, #148]	@ (8004870 <HAL_RCC_ClockConfig+0x244>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047de:	f7fc fdef 	bl	80013c0 <HAL_GetTick>
 80047e2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e4:	e00a      	b.n	80047fc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e6:	f7fc fdeb 	bl	80013c0 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e0be      	b.n	800497a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047fc:	4b1c      	ldr	r3, [pc, #112]	@ (8004870 <HAL_RCC_ClockConfig+0x244>)
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	429a      	cmp	r2, r3
 800480c:	d1eb      	bne.n	80047e6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d010      	beq.n	800483c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	4b14      	ldr	r3, [pc, #80]	@ (8004870 <HAL_RCC_ClockConfig+0x244>)
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	f003 030f 	and.w	r3, r3, #15
 8004826:	429a      	cmp	r2, r3
 8004828:	d208      	bcs.n	800483c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800482a:	4b11      	ldr	r3, [pc, #68]	@ (8004870 <HAL_RCC_ClockConfig+0x244>)
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	f023 020f 	bic.w	r2, r3, #15
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	490e      	ldr	r1, [pc, #56]	@ (8004870 <HAL_RCC_ClockConfig+0x244>)
 8004838:	4313      	orrs	r3, r2
 800483a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800483c:	4b0b      	ldr	r3, [pc, #44]	@ (800486c <HAL_RCC_ClockConfig+0x240>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 030f 	and.w	r3, r3, #15
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	429a      	cmp	r2, r3
 8004848:	d214      	bcs.n	8004874 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484a:	4b08      	ldr	r3, [pc, #32]	@ (800486c <HAL_RCC_ClockConfig+0x240>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f023 020f 	bic.w	r2, r3, #15
 8004852:	4906      	ldr	r1, [pc, #24]	@ (800486c <HAL_RCC_ClockConfig+0x240>)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	4313      	orrs	r3, r2
 8004858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800485a:	4b04      	ldr	r3, [pc, #16]	@ (800486c <HAL_RCC_ClockConfig+0x240>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 030f 	and.w	r3, r3, #15
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	429a      	cmp	r2, r3
 8004866:	d005      	beq.n	8004874 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e086      	b.n	800497a <HAL_RCC_ClockConfig+0x34e>
 800486c:	52002000 	.word	0x52002000
 8004870:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	d010      	beq.n	80048a2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691a      	ldr	r2, [r3, #16]
 8004884:	4b3f      	ldr	r3, [pc, #252]	@ (8004984 <HAL_RCC_ClockConfig+0x358>)
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800488c:	429a      	cmp	r2, r3
 800488e:	d208      	bcs.n	80048a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004890:	4b3c      	ldr	r3, [pc, #240]	@ (8004984 <HAL_RCC_ClockConfig+0x358>)
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	4939      	ldr	r1, [pc, #228]	@ (8004984 <HAL_RCC_ClockConfig+0x358>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d010      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695a      	ldr	r2, [r3, #20]
 80048b2:	4b34      	ldr	r3, [pc, #208]	@ (8004984 <HAL_RCC_ClockConfig+0x358>)
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d208      	bcs.n	80048d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80048be:	4b31      	ldr	r3, [pc, #196]	@ (8004984 <HAL_RCC_ClockConfig+0x358>)
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	492e      	ldr	r1, [pc, #184]	@ (8004984 <HAL_RCC_ClockConfig+0x358>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0310 	and.w	r3, r3, #16
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d010      	beq.n	80048fe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	699a      	ldr	r2, [r3, #24]
 80048e0:	4b28      	ldr	r3, [pc, #160]	@ (8004984 <HAL_RCC_ClockConfig+0x358>)
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d208      	bcs.n	80048fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80048ec:	4b25      	ldr	r3, [pc, #148]	@ (8004984 <HAL_RCC_ClockConfig+0x358>)
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	4922      	ldr	r1, [pc, #136]	@ (8004984 <HAL_RCC_ClockConfig+0x358>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0320 	and.w	r3, r3, #32
 8004906:	2b00      	cmp	r3, #0
 8004908:	d010      	beq.n	800492c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	69da      	ldr	r2, [r3, #28]
 800490e:	4b1d      	ldr	r3, [pc, #116]	@ (8004984 <HAL_RCC_ClockConfig+0x358>)
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004916:	429a      	cmp	r2, r3
 8004918:	d208      	bcs.n	800492c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800491a:	4b1a      	ldr	r3, [pc, #104]	@ (8004984 <HAL_RCC_ClockConfig+0x358>)
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	4917      	ldr	r1, [pc, #92]	@ (8004984 <HAL_RCC_ClockConfig+0x358>)
 8004928:	4313      	orrs	r3, r2
 800492a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800492c:	f000 f834 	bl	8004998 <HAL_RCC_GetSysClockFreq>
 8004930:	4602      	mov	r2, r0
 8004932:	4b14      	ldr	r3, [pc, #80]	@ (8004984 <HAL_RCC_ClockConfig+0x358>)
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	0a1b      	lsrs	r3, r3, #8
 8004938:	f003 030f 	and.w	r3, r3, #15
 800493c:	4912      	ldr	r1, [pc, #72]	@ (8004988 <HAL_RCC_ClockConfig+0x35c>)
 800493e:	5ccb      	ldrb	r3, [r1, r3]
 8004940:	f003 031f 	and.w	r3, r3, #31
 8004944:	fa22 f303 	lsr.w	r3, r2, r3
 8004948:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800494a:	4b0e      	ldr	r3, [pc, #56]	@ (8004984 <HAL_RCC_ClockConfig+0x358>)
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	f003 030f 	and.w	r3, r3, #15
 8004952:	4a0d      	ldr	r2, [pc, #52]	@ (8004988 <HAL_RCC_ClockConfig+0x35c>)
 8004954:	5cd3      	ldrb	r3, [r2, r3]
 8004956:	f003 031f 	and.w	r3, r3, #31
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	fa22 f303 	lsr.w	r3, r2, r3
 8004960:	4a0a      	ldr	r2, [pc, #40]	@ (800498c <HAL_RCC_ClockConfig+0x360>)
 8004962:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004964:	4a0a      	ldr	r2, [pc, #40]	@ (8004990 <HAL_RCC_ClockConfig+0x364>)
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800496a:	4b0a      	ldr	r3, [pc, #40]	@ (8004994 <HAL_RCC_ClockConfig+0x368>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f7fc f942 	bl	8000bf8 <HAL_InitTick>
 8004974:	4603      	mov	r3, r0
 8004976:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004978:	7bfb      	ldrb	r3, [r7, #15]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	58024400 	.word	0x58024400
 8004988:	0801dad8 	.word	0x0801dad8
 800498c:	24000004 	.word	0x24000004
 8004990:	24000000 	.word	0x24000000
 8004994:	24000008 	.word	0x24000008

08004998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004998:	b480      	push	{r7}
 800499a:	b089      	sub	sp, #36	@ 0x24
 800499c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800499e:	4bb3      	ldr	r3, [pc, #716]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049a6:	2b18      	cmp	r3, #24
 80049a8:	f200 8156 	bhi.w	8004c58 <HAL_RCC_GetSysClockFreq+0x2c0>
 80049ac:	a201      	add	r2, pc, #4	@ (adr r2, 80049b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80049ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b2:	bf00      	nop
 80049b4:	08004a19 	.word	0x08004a19
 80049b8:	08004c59 	.word	0x08004c59
 80049bc:	08004c59 	.word	0x08004c59
 80049c0:	08004c59 	.word	0x08004c59
 80049c4:	08004c59 	.word	0x08004c59
 80049c8:	08004c59 	.word	0x08004c59
 80049cc:	08004c59 	.word	0x08004c59
 80049d0:	08004c59 	.word	0x08004c59
 80049d4:	08004a3f 	.word	0x08004a3f
 80049d8:	08004c59 	.word	0x08004c59
 80049dc:	08004c59 	.word	0x08004c59
 80049e0:	08004c59 	.word	0x08004c59
 80049e4:	08004c59 	.word	0x08004c59
 80049e8:	08004c59 	.word	0x08004c59
 80049ec:	08004c59 	.word	0x08004c59
 80049f0:	08004c59 	.word	0x08004c59
 80049f4:	08004a45 	.word	0x08004a45
 80049f8:	08004c59 	.word	0x08004c59
 80049fc:	08004c59 	.word	0x08004c59
 8004a00:	08004c59 	.word	0x08004c59
 8004a04:	08004c59 	.word	0x08004c59
 8004a08:	08004c59 	.word	0x08004c59
 8004a0c:	08004c59 	.word	0x08004c59
 8004a10:	08004c59 	.word	0x08004c59
 8004a14:	08004a4d 	.word	0x08004a4d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a18:	4b94      	ldr	r3, [pc, #592]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0320 	and.w	r3, r3, #32
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d009      	beq.n	8004a38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a24:	4b91      	ldr	r3, [pc, #580]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	08db      	lsrs	r3, r3, #3
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	4a90      	ldr	r2, [pc, #576]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a30:	fa22 f303 	lsr.w	r3, r2, r3
 8004a34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004a36:	e112      	b.n	8004c5e <HAL_RCC_GetSysClockFreq+0x2c6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004a38:	4b8d      	ldr	r3, [pc, #564]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a3a:	61bb      	str	r3, [r7, #24]
      break;
 8004a3c:	e10f      	b.n	8004c5e <HAL_RCC_GetSysClockFreq+0x2c6>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004a3e:	4b8d      	ldr	r3, [pc, #564]	@ (8004c74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004a40:	61bb      	str	r3, [r7, #24]
      break;
 8004a42:	e10c      	b.n	8004c5e <HAL_RCC_GetSysClockFreq+0x2c6>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004a44:	f44f 037a 	mov.w	r3, #16384000	@ 0xfa0000
 8004a48:	61bb      	str	r3, [r7, #24]
      break;
 8004a4a:	e108      	b.n	8004c5e <HAL_RCC_GetSysClockFreq+0x2c6>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a4c:	4b87      	ldr	r3, [pc, #540]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a50:	f003 0303 	and.w	r3, r3, #3
 8004a54:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004a56:	4b85      	ldr	r3, [pc, #532]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5a:	091b      	lsrs	r3, r3, #4
 8004a5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a60:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004a62:	4b82      	ldr	r3, [pc, #520]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004a6c:	4b7f      	ldr	r3, [pc, #508]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a70:	08db      	lsrs	r3, r3, #3
 8004a72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	fb02 f303 	mul.w	r3, r2, r3
 8004a7c:	ee07 3a90 	vmov	s15, r3
 8004a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a84:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 80e1 	beq.w	8004c52 <HAL_RCC_GetSysClockFreq+0x2ba>
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	f000 8083 	beq.w	8004b9e <HAL_RCC_GetSysClockFreq+0x206>
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	f200 80a1 	bhi.w	8004be2 <HAL_RCC_GetSysClockFreq+0x24a>
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_RCC_GetSysClockFreq+0x116>
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d056      	beq.n	8004b5a <HAL_RCC_GetSysClockFreq+0x1c2>
 8004aac:	e099      	b.n	8004be2 <HAL_RCC_GetSysClockFreq+0x24a>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004aae:	4b6f      	ldr	r3, [pc, #444]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d02d      	beq.n	8004b16 <HAL_RCC_GetSysClockFreq+0x17e>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004aba:	4b6c      	ldr	r3, [pc, #432]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	08db      	lsrs	r3, r3, #3
 8004ac0:	f003 0303 	and.w	r3, r3, #3
 8004ac4:	4a6a      	ldr	r2, [pc, #424]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aca:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	ee07 3a90 	vmov	s15, r3
 8004ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	ee07 3a90 	vmov	s15, r3
 8004adc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ae4:	4b61      	ldr	r3, [pc, #388]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aec:	ee07 3a90 	vmov	s15, r3
 8004af0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004af4:	ed97 6a02 	vldr	s12, [r7, #8]
 8004af8:	eddf 5a5f 	vldr	s11, [pc, #380]	@ 8004c78 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004afc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b10:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004b14:	e087      	b.n	8004c26 <HAL_RCC_GetSysClockFreq+0x28e>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	ee07 3a90 	vmov	s15, r3
 8004b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b20:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8004c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b28:	4b50      	ldr	r3, [pc, #320]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b30:	ee07 3a90 	vmov	s15, r3
 8004b34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b38:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b3c:	eddf 5a4e 	vldr	s11, [pc, #312]	@ 8004c78 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004b40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b54:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b58:	e065      	b.n	8004c26 <HAL_RCC_GetSysClockFreq+0x28e>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	ee07 3a90 	vmov	s15, r3
 8004b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b64:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004c80 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004b68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b6c:	4b3f      	ldr	r3, [pc, #252]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b74:	ee07 3a90 	vmov	s15, r3
 8004b78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b7c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b80:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8004c78 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004b84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b98:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b9c:	e043      	b.n	8004c26 <HAL_RCC_GetSysClockFreq+0x28e>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	ee07 3a90 	vmov	s15, r3
 8004ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba8:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004c84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004bac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bb0:	4b2e      	ldr	r3, [pc, #184]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bb8:	ee07 3a90 	vmov	s15, r3
 8004bbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bc0:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bc4:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8004c78 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004bc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bd0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bdc:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004be0:	e021      	b.n	8004c26 <HAL_RCC_GetSysClockFreq+0x28e>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	ee07 3a90 	vmov	s15, r3
 8004be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bec:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8004c80 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004bf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bf4:	4b1d      	ldr	r3, [pc, #116]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bfc:	ee07 3a90 	vmov	s15, r3
 8004c00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c04:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c08:	eddf 5a1b 	vldr	s11, [pc, #108]	@ 8004c78 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004c0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c20:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c24:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004c26:	4b11      	ldr	r3, [pc, #68]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c2a:	0a5b      	lsrs	r3, r3, #9
 8004c2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c30:	3301      	adds	r3, #1
 8004c32:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	ee07 3a90 	vmov	s15, r3
 8004c3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c4a:	ee17 3a90 	vmov	r3, s15
 8004c4e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004c50:	e005      	b.n	8004c5e <HAL_RCC_GetSysClockFreq+0x2c6>
        sysclockfreq = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	61bb      	str	r3, [r7, #24]
      break;
 8004c56:	e002      	b.n	8004c5e <HAL_RCC_GetSysClockFreq+0x2c6>

    default:
      sysclockfreq = CSI_VALUE;
 8004c58:	4b06      	ldr	r3, [pc, #24]	@ (8004c74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004c5a:	61bb      	str	r3, [r7, #24]
      break;
 8004c5c:	bf00      	nop
  }

  return sysclockfreq;
 8004c5e:	69bb      	ldr	r3, [r7, #24]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3724      	adds	r7, #36	@ 0x24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	58024400 	.word	0x58024400
 8004c70:	03d09000 	.word	0x03d09000
 8004c74:	003d0900 	.word	0x003d0900
 8004c78:	46000000 	.word	0x46000000
 8004c7c:	4c742400 	.word	0x4c742400
 8004c80:	4a742400 	.word	0x4a742400
 8004c84:	4b7a0000 	.word	0x4b7a0000

08004c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004c8e:	f7ff fe83 	bl	8004998 <HAL_RCC_GetSysClockFreq>
 8004c92:	4602      	mov	r2, r0
 8004c94:	4b10      	ldr	r3, [pc, #64]	@ (8004cd8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	0a1b      	lsrs	r3, r3, #8
 8004c9a:	f003 030f 	and.w	r3, r3, #15
 8004c9e:	490f      	ldr	r1, [pc, #60]	@ (8004cdc <HAL_RCC_GetHCLKFreq+0x54>)
 8004ca0:	5ccb      	ldrb	r3, [r1, r3]
 8004ca2:	f003 031f 	and.w	r3, r3, #31
 8004ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8004caa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004cac:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	4a09      	ldr	r2, [pc, #36]	@ (8004cdc <HAL_RCC_GetHCLKFreq+0x54>)
 8004cb6:	5cd3      	ldrb	r3, [r2, r3]
 8004cb8:	f003 031f 	and.w	r3, r3, #31
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc2:	4a07      	ldr	r2, [pc, #28]	@ (8004ce0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004cc4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004cc6:	4a07      	ldr	r2, [pc, #28]	@ (8004ce4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004ccc:	4b04      	ldr	r3, [pc, #16]	@ (8004ce0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004cce:	681b      	ldr	r3, [r3, #0]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	58024400 	.word	0x58024400
 8004cdc:	0801dad8 	.word	0x0801dad8
 8004ce0:	24000004 	.word	0x24000004
 8004ce4:	24000000 	.word	0x24000000

08004ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004cec:	f7ff ffcc 	bl	8004c88 <HAL_RCC_GetHCLKFreq>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	4b06      	ldr	r3, [pc, #24]	@ (8004d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	091b      	lsrs	r3, r3, #4
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	4904      	ldr	r1, [pc, #16]	@ (8004d10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cfe:	5ccb      	ldrb	r3, [r1, r3]
 8004d00:	f003 031f 	and.w	r3, r3, #31
 8004d04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	58024400 	.word	0x58024400
 8004d10:	0801dad8 	.word	0x0801dad8

08004d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004d18:	f7ff ffb6 	bl	8004c88 <HAL_RCC_GetHCLKFreq>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	4b06      	ldr	r3, [pc, #24]	@ (8004d38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	0a1b      	lsrs	r3, r3, #8
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	4904      	ldr	r1, [pc, #16]	@ (8004d3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d2a:	5ccb      	ldrb	r3, [r1, r3]
 8004d2c:	f003 031f 	and.w	r3, r3, #31
 8004d30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	58024400 	.word	0x58024400
 8004d3c:	0801dad8 	.word	0x0801dad8

08004d40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	223f      	movs	r2, #63	@ 0x3f
 8004d4e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d50:	4b1a      	ldr	r3, [pc, #104]	@ (8004dbc <HAL_RCC_GetClockConfig+0x7c>)
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	f003 0207 	and.w	r2, r3, #7
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004d5c:	4b17      	ldr	r3, [pc, #92]	@ (8004dbc <HAL_RCC_GetClockConfig+0x7c>)
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004d68:	4b14      	ldr	r3, [pc, #80]	@ (8004dbc <HAL_RCC_GetClockConfig+0x7c>)
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	f003 020f 	and.w	r2, r3, #15
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004d74:	4b11      	ldr	r3, [pc, #68]	@ (8004dbc <HAL_RCC_GetClockConfig+0x7c>)
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004d80:	4b0e      	ldr	r3, [pc, #56]	@ (8004dbc <HAL_RCC_GetClockConfig+0x7c>)
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004dbc <HAL_RCC_GetClockConfig+0x7c>)
 8004d8e:	69db      	ldr	r3, [r3, #28]
 8004d90:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004d98:	4b08      	ldr	r3, [pc, #32]	@ (8004dbc <HAL_RCC_GetClockConfig+0x7c>)
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004da4:	4b06      	ldr	r3, [pc, #24]	@ (8004dc0 <HAL_RCC_GetClockConfig+0x80>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 020f 	and.w	r2, r3, #15
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	601a      	str	r2, [r3, #0]
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	58024400 	.word	0x58024400
 8004dc0:	52002000 	.word	0x52002000

08004dc4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dc8:	b0ca      	sub	sp, #296	@ 0x128
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004de8:	2500      	movs	r5, #0
 8004dea:	ea54 0305 	orrs.w	r3, r4, r5
 8004dee:	d049      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004df6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004dfa:	d02f      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004dfc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e00:	d828      	bhi.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004e02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e06:	d01a      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e0c:	d822      	bhi.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004e12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e16:	d007      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e18:	e01c      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e1a:	4bb8      	ldr	r3, [pc, #736]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1e:	4ab7      	ldr	r2, [pc, #732]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004e26:	e01a      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e2c:	3308      	adds	r3, #8
 8004e2e:	2102      	movs	r1, #2
 8004e30:	4618      	mov	r0, r3
 8004e32:	f001 fc8f 	bl	8006754 <RCCEx_PLL2_Config>
 8004e36:	4603      	mov	r3, r0
 8004e38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004e3c:	e00f      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e42:	3328      	adds	r3, #40	@ 0x28
 8004e44:	2102      	movs	r1, #2
 8004e46:	4618      	mov	r0, r3
 8004e48:	f001 fd36 	bl	80068b8 <RCCEx_PLL3_Config>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004e52:	e004      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e5a:	e000      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004e5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10a      	bne.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004e66:	4ba5      	ldr	r3, [pc, #660]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e6a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e74:	4aa1      	ldr	r2, [pc, #644]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e76:	430b      	orrs	r3, r1
 8004e78:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e7a:	e003      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004e90:	f04f 0900 	mov.w	r9, #0
 8004e94:	ea58 0309 	orrs.w	r3, r8, r9
 8004e98:	d047      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d82a      	bhi.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8004eac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eaa:	bf00      	nop
 8004eac:	08004ec1 	.word	0x08004ec1
 8004eb0:	08004ecf 	.word	0x08004ecf
 8004eb4:	08004ee5 	.word	0x08004ee5
 8004eb8:	08004f03 	.word	0x08004f03
 8004ebc:	08004f03 	.word	0x08004f03
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ec0:	4b8e      	ldr	r3, [pc, #568]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec4:	4a8d      	ldr	r2, [pc, #564]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ec6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004eca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ecc:	e01a      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed2:	3308      	adds	r3, #8
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f001 fc3c 	bl	8006754 <RCCEx_PLL2_Config>
 8004edc:	4603      	mov	r3, r0
 8004ede:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ee2:	e00f      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ee8:	3328      	adds	r3, #40	@ 0x28
 8004eea:	2100      	movs	r1, #0
 8004eec:	4618      	mov	r0, r3
 8004eee:	f001 fce3 	bl	80068b8 <RCCEx_PLL3_Config>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ef8:	e004      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f00:	e000      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004f02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10a      	bne.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f0c:	4b7b      	ldr	r3, [pc, #492]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f10:	f023 0107 	bic.w	r1, r3, #7
 8004f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f1a:	4a78      	ldr	r2, [pc, #480]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f1c:	430b      	orrs	r3, r1
 8004f1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f20:	e003      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f32:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004f36:	f04f 0b00 	mov.w	fp, #0
 8004f3a:	ea5a 030b 	orrs.w	r3, sl, fp
 8004f3e:	d04c      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f4a:	d030      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004f4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f50:	d829      	bhi.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004f52:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f54:	d02d      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004f56:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f58:	d825      	bhi.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004f5a:	2b80      	cmp	r3, #128	@ 0x80
 8004f5c:	d018      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004f5e:	2b80      	cmp	r3, #128	@ 0x80
 8004f60:	d821      	bhi.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004f66:	2b40      	cmp	r3, #64	@ 0x40
 8004f68:	d007      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004f6a:	e01c      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f6c:	4b63      	ldr	r3, [pc, #396]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f70:	4a62      	ldr	r2, [pc, #392]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004f78:	e01c      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f7e:	3308      	adds	r3, #8
 8004f80:	2100      	movs	r1, #0
 8004f82:	4618      	mov	r0, r3
 8004f84:	f001 fbe6 	bl	8006754 <RCCEx_PLL2_Config>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004f8e:	e011      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f94:	3328      	adds	r3, #40	@ 0x28
 8004f96:	2100      	movs	r1, #0
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f001 fc8d 	bl	80068b8 <RCCEx_PLL3_Config>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004fa4:	e006      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fac:	e002      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004fae:	bf00      	nop
 8004fb0:	e000      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004fb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10a      	bne.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004fbc:	4b4f      	ldr	r3, [pc, #316]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fc0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fca:	4a4c      	ldr	r2, [pc, #304]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fcc:	430b      	orrs	r3, r1
 8004fce:	6513      	str	r3, [r2, #80]	@ 0x50
 8004fd0:	e003      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004fe6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004fea:	2300      	movs	r3, #0
 8004fec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004ff0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	d053      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ffe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005002:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005006:	d035      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005008:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800500c:	d82e      	bhi.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800500e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005012:	d031      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005014:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005018:	d828      	bhi.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800501a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800501e:	d01a      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005020:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005024:	d822      	bhi.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800502a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800502e:	d007      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005030:	e01c      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005032:	4b32      	ldr	r3, [pc, #200]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005036:	4a31      	ldr	r2, [pc, #196]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005038:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800503c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800503e:	e01c      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005044:	3308      	adds	r3, #8
 8005046:	2100      	movs	r1, #0
 8005048:	4618      	mov	r0, r3
 800504a:	f001 fb83 	bl	8006754 <RCCEx_PLL2_Config>
 800504e:	4603      	mov	r3, r0
 8005050:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005054:	e011      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800505a:	3328      	adds	r3, #40	@ 0x28
 800505c:	2100      	movs	r1, #0
 800505e:	4618      	mov	r0, r3
 8005060:	f001 fc2a 	bl	80068b8 <RCCEx_PLL3_Config>
 8005064:	4603      	mov	r3, r0
 8005066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800506a:	e006      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005072:	e002      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005074:	bf00      	nop
 8005076:	e000      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005078:	bf00      	nop
    }

    if (ret == HAL_OK)
 800507a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10b      	bne.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005082:	4b1e      	ldr	r3, [pc, #120]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005086:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800508a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800508e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005092:	4a1a      	ldr	r2, [pc, #104]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005094:	430b      	orrs	r3, r1
 8005096:	6593      	str	r3, [r2, #88]	@ 0x58
 8005098:	e003      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800509a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800509e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80050a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050aa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80050ae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80050b2:	2300      	movs	r3, #0
 80050b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80050b8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80050bc:	460b      	mov	r3, r1
 80050be:	4313      	orrs	r3, r2
 80050c0:	d056      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80050c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80050ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050ce:	d038      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80050d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050d4:	d831      	bhi.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80050d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80050da:	d034      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80050dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80050e0:	d82b      	bhi.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80050e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050e6:	d01d      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80050e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050ec:	d825      	bhi.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d006      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80050f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050f6:	d00a      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80050f8:	e01f      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80050fa:	bf00      	nop
 80050fc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005100:	4ba2      	ldr	r3, [pc, #648]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005104:	4aa1      	ldr	r2, [pc, #644]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800510a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800510c:	e01c      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800510e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005112:	3308      	adds	r3, #8
 8005114:	2100      	movs	r1, #0
 8005116:	4618      	mov	r0, r3
 8005118:	f001 fb1c 	bl	8006754 <RCCEx_PLL2_Config>
 800511c:	4603      	mov	r3, r0
 800511e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005122:	e011      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005128:	3328      	adds	r3, #40	@ 0x28
 800512a:	2100      	movs	r1, #0
 800512c:	4618      	mov	r0, r3
 800512e:	f001 fbc3 	bl	80068b8 <RCCEx_PLL3_Config>
 8005132:	4603      	mov	r3, r0
 8005134:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005138:	e006      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005140:	e002      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005142:	bf00      	nop
 8005144:	e000      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005146:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005148:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10b      	bne.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005150:	4b8e      	ldr	r3, [pc, #568]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005154:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800515c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005160:	4a8a      	ldr	r2, [pc, #552]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005162:	430b      	orrs	r3, r1
 8005164:	6593      	str	r3, [r2, #88]	@ 0x58
 8005166:	e003      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005168:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800516c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005178:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800517c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005180:	2300      	movs	r3, #0
 8005182:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005186:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800518a:	460b      	mov	r3, r1
 800518c:	4313      	orrs	r3, r2
 800518e:	d03a      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005196:	2b30      	cmp	r3, #48	@ 0x30
 8005198:	d01f      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x416>
 800519a:	2b30      	cmp	r3, #48	@ 0x30
 800519c:	d819      	bhi.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800519e:	2b20      	cmp	r3, #32
 80051a0:	d00c      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80051a2:	2b20      	cmp	r3, #32
 80051a4:	d815      	bhi.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d019      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80051aa:	2b10      	cmp	r3, #16
 80051ac:	d111      	bne.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051ae:	4b77      	ldr	r3, [pc, #476]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b2:	4a76      	ldr	r2, [pc, #472]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80051ba:	e011      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051c0:	3308      	adds	r3, #8
 80051c2:	2102      	movs	r1, #2
 80051c4:	4618      	mov	r0, r3
 80051c6:	f001 fac5 	bl	8006754 <RCCEx_PLL2_Config>
 80051ca:	4603      	mov	r3, r0
 80051cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80051d0:	e006      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051d8:	e002      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80051da:	bf00      	nop
 80051dc:	e000      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80051de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10a      	bne.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80051e8:	4b68      	ldr	r3, [pc, #416]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051ec:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80051f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051f6:	4a65      	ldr	r2, [pc, #404]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051f8:	430b      	orrs	r3, r1
 80051fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051fc:	e003      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005202:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800520a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005212:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005216:	2300      	movs	r3, #0
 8005218:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800521c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005220:	460b      	mov	r3, r1
 8005222:	4313      	orrs	r3, r2
 8005224:	d051      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800522a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800522c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005230:	d035      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005232:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005236:	d82e      	bhi.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005238:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800523c:	d031      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800523e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005242:	d828      	bhi.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005244:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005248:	d01a      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800524a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800524e:	d822      	bhi.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005254:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005258:	d007      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800525a:	e01c      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800525c:	4b4b      	ldr	r3, [pc, #300]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800525e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005260:	4a4a      	ldr	r2, [pc, #296]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005262:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005266:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005268:	e01c      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800526a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800526e:	3308      	adds	r3, #8
 8005270:	2100      	movs	r1, #0
 8005272:	4618      	mov	r0, r3
 8005274:	f001 fa6e 	bl	8006754 <RCCEx_PLL2_Config>
 8005278:	4603      	mov	r3, r0
 800527a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800527e:	e011      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005284:	3328      	adds	r3, #40	@ 0x28
 8005286:	2100      	movs	r1, #0
 8005288:	4618      	mov	r0, r3
 800528a:	f001 fb15 	bl	80068b8 <RCCEx_PLL3_Config>
 800528e:	4603      	mov	r3, r0
 8005290:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005294:	e006      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800529c:	e002      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800529e:	bf00      	nop
 80052a0:	e000      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80052a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10a      	bne.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80052ac:	4b37      	ldr	r3, [pc, #220]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052b0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80052b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052ba:	4a34      	ldr	r2, [pc, #208]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052bc:	430b      	orrs	r3, r1
 80052be:	6513      	str	r3, [r2, #80]	@ 0x50
 80052c0:	e003      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80052ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80052d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80052da:	2300      	movs	r3, #0
 80052dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80052e0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80052e4:	460b      	mov	r3, r1
 80052e6:	4313      	orrs	r3, r2
 80052e8:	d056      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80052ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052f4:	d033      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80052f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052fa:	d82c      	bhi.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80052fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005300:	d02f      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005302:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005306:	d826      	bhi.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005308:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800530c:	d02b      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800530e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005312:	d820      	bhi.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005314:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005318:	d012      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800531a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800531e:	d81a      	bhi.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005320:	2b00      	cmp	r3, #0
 8005322:	d022      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005328:	d115      	bne.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800532a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800532e:	3308      	adds	r3, #8
 8005330:	2101      	movs	r1, #1
 8005332:	4618      	mov	r0, r3
 8005334:	f001 fa0e 	bl	8006754 <RCCEx_PLL2_Config>
 8005338:	4603      	mov	r3, r0
 800533a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800533e:	e015      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005344:	3328      	adds	r3, #40	@ 0x28
 8005346:	2101      	movs	r1, #1
 8005348:	4618      	mov	r0, r3
 800534a:	f001 fab5 	bl	80068b8 <RCCEx_PLL3_Config>
 800534e:	4603      	mov	r3, r0
 8005350:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005354:	e00a      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800535c:	e006      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800535e:	bf00      	nop
 8005360:	e004      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005362:	bf00      	nop
 8005364:	e002      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005366:	bf00      	nop
 8005368:	e000      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800536a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800536c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10d      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005374:	4b05      	ldr	r3, [pc, #20]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005378:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800537c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005380:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005382:	4a02      	ldr	r2, [pc, #8]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005384:	430b      	orrs	r3, r1
 8005386:	6513      	str	r3, [r2, #80]	@ 0x50
 8005388:	e006      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800538a:	bf00      	nop
 800538c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005390:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005394:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800539c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80053a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80053a8:	2300      	movs	r3, #0
 80053aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80053ae:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80053b2:	460b      	mov	r3, r1
 80053b4:	4313      	orrs	r3, r2
 80053b6:	d055      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80053b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80053c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053c4:	d033      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80053c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053ca:	d82c      	bhi.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80053cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053d0:	d02f      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80053d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053d6:	d826      	bhi.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80053d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80053dc:	d02b      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80053de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80053e2:	d820      	bhi.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80053e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053e8:	d012      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80053ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053ee:	d81a      	bhi.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d022      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80053f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053f8:	d115      	bne.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053fe:	3308      	adds	r3, #8
 8005400:	2101      	movs	r1, #1
 8005402:	4618      	mov	r0, r3
 8005404:	f001 f9a6 	bl	8006754 <RCCEx_PLL2_Config>
 8005408:	4603      	mov	r3, r0
 800540a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800540e:	e015      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005414:	3328      	adds	r3, #40	@ 0x28
 8005416:	2101      	movs	r1, #1
 8005418:	4618      	mov	r0, r3
 800541a:	f001 fa4d 	bl	80068b8 <RCCEx_PLL3_Config>
 800541e:	4603      	mov	r3, r0
 8005420:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005424:	e00a      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800542c:	e006      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800542e:	bf00      	nop
 8005430:	e004      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005432:	bf00      	nop
 8005434:	e002      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005436:	bf00      	nop
 8005438:	e000      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800543a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800543c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10b      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005444:	4ba3      	ldr	r3, [pc, #652]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005448:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800544c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005450:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005454:	4a9f      	ldr	r2, [pc, #636]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005456:	430b      	orrs	r3, r1
 8005458:	6593      	str	r3, [r2, #88]	@ 0x58
 800545a:	e003      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800545c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005460:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005470:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005474:	2300      	movs	r3, #0
 8005476:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800547a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800547e:	460b      	mov	r3, r1
 8005480:	4313      	orrs	r3, r2
 8005482:	d037      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800548a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800548e:	d00e      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005490:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005494:	d816      	bhi.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005496:	2b00      	cmp	r3, #0
 8005498:	d018      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800549a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800549e:	d111      	bne.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054a0:	4b8c      	ldr	r3, [pc, #560]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a4:	4a8b      	ldr	r2, [pc, #556]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80054ac:	e00f      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054b2:	3308      	adds	r3, #8
 80054b4:	2101      	movs	r1, #1
 80054b6:	4618      	mov	r0, r3
 80054b8:	f001 f94c 	bl	8006754 <RCCEx_PLL2_Config>
 80054bc:	4603      	mov	r3, r0
 80054be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80054c2:	e004      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054ca:	e000      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80054cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10a      	bne.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80054d6:	4b7f      	ldr	r3, [pc, #508]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054da:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80054de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054e4:	4a7b      	ldr	r2, [pc, #492]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054e6:	430b      	orrs	r3, r1
 80054e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80054ea:	e003      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80054f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005500:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005504:	2300      	movs	r3, #0
 8005506:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800550a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800550e:	460b      	mov	r3, r1
 8005510:	4313      	orrs	r3, r2
 8005512:	d039      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005518:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800551a:	2b03      	cmp	r3, #3
 800551c:	d81c      	bhi.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800551e:	a201      	add	r2, pc, #4	@ (adr r2, 8005524 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005524:	08005561 	.word	0x08005561
 8005528:	08005535 	.word	0x08005535
 800552c:	08005543 	.word	0x08005543
 8005530:	08005561 	.word	0x08005561
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005534:	4b67      	ldr	r3, [pc, #412]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005538:	4a66      	ldr	r2, [pc, #408]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800553a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800553e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005540:	e00f      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005546:	3308      	adds	r3, #8
 8005548:	2102      	movs	r1, #2
 800554a:	4618      	mov	r0, r3
 800554c:	f001 f902 	bl	8006754 <RCCEx_PLL2_Config>
 8005550:	4603      	mov	r3, r0
 8005552:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005556:	e004      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800555e:	e000      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005560:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10a      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800556a:	4b5a      	ldr	r3, [pc, #360]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800556c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800556e:	f023 0103 	bic.w	r1, r3, #3
 8005572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005576:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005578:	4a56      	ldr	r2, [pc, #344]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800557a:	430b      	orrs	r3, r1
 800557c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800557e:	e003      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005580:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005584:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005590:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005594:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005598:	2300      	movs	r3, #0
 800559a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800559e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80055a2:	460b      	mov	r3, r1
 80055a4:	4313      	orrs	r3, r2
 80055a6:	f000 809f 	beq.w	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055aa:	4b4b      	ldr	r3, [pc, #300]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a4a      	ldr	r2, [pc, #296]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80055b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055b6:	f7fb ff03 	bl	80013c0 <HAL_GetTick>
 80055ba:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055be:	e00b      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055c0:	f7fb fefe 	bl	80013c0 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	2b64      	cmp	r3, #100	@ 0x64
 80055ce:	d903      	bls.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055d6:	e005      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055d8:	4b3f      	ldr	r3, [pc, #252]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d0ed      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80055e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d179      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80055ec:	4b39      	ldr	r3, [pc, #228]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80055f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80055f8:	4053      	eors	r3, r2
 80055fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d015      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005602:	4b34      	ldr	r3, [pc, #208]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005606:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800560a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800560e:	4b31      	ldr	r3, [pc, #196]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005612:	4a30      	ldr	r2, [pc, #192]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005618:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800561a:	4b2e      	ldr	r3, [pc, #184]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800561c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800561e:	4a2d      	ldr	r2, [pc, #180]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005620:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005624:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005626:	4a2b      	ldr	r2, [pc, #172]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005628:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800562c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800562e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005632:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800563a:	d118      	bne.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800563c:	f7fb fec0 	bl	80013c0 <HAL_GetTick>
 8005640:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005644:	e00d      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005646:	f7fb febb 	bl	80013c0 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005650:	1ad2      	subs	r2, r2, r3
 8005652:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005656:	429a      	cmp	r2, r3
 8005658:	d903      	bls.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005660:	e005      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005662:	4b1c      	ldr	r3, [pc, #112]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d0eb      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800566e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005672:	2b00      	cmp	r3, #0
 8005674:	d129      	bne.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800567a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800567e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005682:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005686:	d10e      	bne.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005688:	4b12      	ldr	r3, [pc, #72]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005694:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005698:	091a      	lsrs	r2, r3, #4
 800569a:	4b10      	ldr	r3, [pc, #64]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800569c:	4013      	ands	r3, r2
 800569e:	4a0d      	ldr	r2, [pc, #52]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056a0:	430b      	orrs	r3, r1
 80056a2:	6113      	str	r3, [r2, #16]
 80056a4:	e005      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80056a6:	4b0b      	ldr	r3, [pc, #44]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	4a0a      	ldr	r2, [pc, #40]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056ac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80056b0:	6113      	str	r3, [r2, #16]
 80056b2:	4b08      	ldr	r3, [pc, #32]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056b4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80056b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80056be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056c2:	4a04      	ldr	r2, [pc, #16]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056c4:	430b      	orrs	r3, r1
 80056c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80056c8:	e00e      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80056d2:	e009      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80056d4:	58024400 	.word	0x58024400
 80056d8:	58024800 	.word	0x58024800
 80056dc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80056e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f0:	f002 0301 	and.w	r3, r2, #1
 80056f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056f8:	2300      	movs	r3, #0
 80056fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80056fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005702:	460b      	mov	r3, r1
 8005704:	4313      	orrs	r3, r2
 8005706:	f000 8089 	beq.w	800581c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800570a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800570e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005710:	2b28      	cmp	r3, #40	@ 0x28
 8005712:	d86b      	bhi.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005714:	a201      	add	r2, pc, #4	@ (adr r2, 800571c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571a:	bf00      	nop
 800571c:	080057f5 	.word	0x080057f5
 8005720:	080057ed 	.word	0x080057ed
 8005724:	080057ed 	.word	0x080057ed
 8005728:	080057ed 	.word	0x080057ed
 800572c:	080057ed 	.word	0x080057ed
 8005730:	080057ed 	.word	0x080057ed
 8005734:	080057ed 	.word	0x080057ed
 8005738:	080057ed 	.word	0x080057ed
 800573c:	080057c1 	.word	0x080057c1
 8005740:	080057ed 	.word	0x080057ed
 8005744:	080057ed 	.word	0x080057ed
 8005748:	080057ed 	.word	0x080057ed
 800574c:	080057ed 	.word	0x080057ed
 8005750:	080057ed 	.word	0x080057ed
 8005754:	080057ed 	.word	0x080057ed
 8005758:	080057ed 	.word	0x080057ed
 800575c:	080057d7 	.word	0x080057d7
 8005760:	080057ed 	.word	0x080057ed
 8005764:	080057ed 	.word	0x080057ed
 8005768:	080057ed 	.word	0x080057ed
 800576c:	080057ed 	.word	0x080057ed
 8005770:	080057ed 	.word	0x080057ed
 8005774:	080057ed 	.word	0x080057ed
 8005778:	080057ed 	.word	0x080057ed
 800577c:	080057f5 	.word	0x080057f5
 8005780:	080057ed 	.word	0x080057ed
 8005784:	080057ed 	.word	0x080057ed
 8005788:	080057ed 	.word	0x080057ed
 800578c:	080057ed 	.word	0x080057ed
 8005790:	080057ed 	.word	0x080057ed
 8005794:	080057ed 	.word	0x080057ed
 8005798:	080057ed 	.word	0x080057ed
 800579c:	080057f5 	.word	0x080057f5
 80057a0:	080057ed 	.word	0x080057ed
 80057a4:	080057ed 	.word	0x080057ed
 80057a8:	080057ed 	.word	0x080057ed
 80057ac:	080057ed 	.word	0x080057ed
 80057b0:	080057ed 	.word	0x080057ed
 80057b4:	080057ed 	.word	0x080057ed
 80057b8:	080057ed 	.word	0x080057ed
 80057bc:	080057f5 	.word	0x080057f5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057c4:	3308      	adds	r3, #8
 80057c6:	2101      	movs	r1, #1
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 ffc3 	bl	8006754 <RCCEx_PLL2_Config>
 80057ce:	4603      	mov	r3, r0
 80057d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80057d4:	e00f      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057da:	3328      	adds	r3, #40	@ 0x28
 80057dc:	2101      	movs	r1, #1
 80057de:	4618      	mov	r0, r3
 80057e0:	f001 f86a 	bl	80068b8 <RCCEx_PLL3_Config>
 80057e4:	4603      	mov	r3, r0
 80057e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80057ea:	e004      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057f2:	e000      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80057f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10a      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80057fe:	4bbf      	ldr	r3, [pc, #764]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005802:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800580a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800580c:	4abb      	ldr	r2, [pc, #748]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800580e:	430b      	orrs	r3, r1
 8005810:	6553      	str	r3, [r2, #84]	@ 0x54
 8005812:	e003      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005814:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005818:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800581c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005824:	f002 0302 	and.w	r3, r2, #2
 8005828:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800582c:	2300      	movs	r3, #0
 800582e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005832:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005836:	460b      	mov	r3, r1
 8005838:	4313      	orrs	r3, r2
 800583a:	d041      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800583c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005840:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005842:	2b05      	cmp	r3, #5
 8005844:	d824      	bhi.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005846:	a201      	add	r2, pc, #4	@ (adr r2, 800584c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584c:	08005899 	.word	0x08005899
 8005850:	08005865 	.word	0x08005865
 8005854:	0800587b 	.word	0x0800587b
 8005858:	08005899 	.word	0x08005899
 800585c:	08005899 	.word	0x08005899
 8005860:	08005899 	.word	0x08005899
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005868:	3308      	adds	r3, #8
 800586a:	2101      	movs	r1, #1
 800586c:	4618      	mov	r0, r3
 800586e:	f000 ff71 	bl	8006754 <RCCEx_PLL2_Config>
 8005872:	4603      	mov	r3, r0
 8005874:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005878:	e00f      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800587a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800587e:	3328      	adds	r3, #40	@ 0x28
 8005880:	2101      	movs	r1, #1
 8005882:	4618      	mov	r0, r3
 8005884:	f001 f818 	bl	80068b8 <RCCEx_PLL3_Config>
 8005888:	4603      	mov	r3, r0
 800588a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800588e:	e004      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005896:	e000      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800589a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10a      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80058a2:	4b96      	ldr	r3, [pc, #600]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80058a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058a6:	f023 0107 	bic.w	r1, r3, #7
 80058aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058b0:	4a92      	ldr	r2, [pc, #584]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80058b2:	430b      	orrs	r3, r1
 80058b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80058b6:	e003      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c8:	f002 0304 	and.w	r3, r2, #4
 80058cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058d0:	2300      	movs	r3, #0
 80058d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058d6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80058da:	460b      	mov	r3, r1
 80058dc:	4313      	orrs	r3, r2
 80058de:	d044      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80058e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058e8:	2b05      	cmp	r3, #5
 80058ea:	d825      	bhi.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80058ec:	a201      	add	r2, pc, #4	@ (adr r2, 80058f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80058ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f2:	bf00      	nop
 80058f4:	08005941 	.word	0x08005941
 80058f8:	0800590d 	.word	0x0800590d
 80058fc:	08005923 	.word	0x08005923
 8005900:	08005941 	.word	0x08005941
 8005904:	08005941 	.word	0x08005941
 8005908:	08005941 	.word	0x08005941
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800590c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005910:	3308      	adds	r3, #8
 8005912:	2101      	movs	r1, #1
 8005914:	4618      	mov	r0, r3
 8005916:	f000 ff1d 	bl	8006754 <RCCEx_PLL2_Config>
 800591a:	4603      	mov	r3, r0
 800591c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005920:	e00f      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005926:	3328      	adds	r3, #40	@ 0x28
 8005928:	2101      	movs	r1, #1
 800592a:	4618      	mov	r0, r3
 800592c:	f000 ffc4 	bl	80068b8 <RCCEx_PLL3_Config>
 8005930:	4603      	mov	r3, r0
 8005932:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005936:	e004      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800593e:	e000      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005940:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005942:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10b      	bne.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800594a:	4b6c      	ldr	r3, [pc, #432]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800594c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800594e:	f023 0107 	bic.w	r1, r3, #7
 8005952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005956:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800595a:	4a68      	ldr	r2, [pc, #416]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800595c:	430b      	orrs	r3, r1
 800595e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005960:	e003      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005962:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005966:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800596a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800596e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005972:	f002 0320 	and.w	r3, r2, #32
 8005976:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800597a:	2300      	movs	r3, #0
 800597c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005980:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005984:	460b      	mov	r3, r1
 8005986:	4313      	orrs	r3, r2
 8005988:	d055      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800598a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800598e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005992:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005996:	d033      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005998:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800599c:	d82c      	bhi.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800599e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059a2:	d02f      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80059a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059a8:	d826      	bhi.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80059aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80059ae:	d02b      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80059b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80059b4:	d820      	bhi.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80059b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059ba:	d012      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80059bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059c0:	d81a      	bhi.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d022      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80059c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059ca:	d115      	bne.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d0:	3308      	adds	r3, #8
 80059d2:	2100      	movs	r1, #0
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 febd 	bl	8006754 <RCCEx_PLL2_Config>
 80059da:	4603      	mov	r3, r0
 80059dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80059e0:	e015      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e6:	3328      	adds	r3, #40	@ 0x28
 80059e8:	2102      	movs	r1, #2
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 ff64 	bl	80068b8 <RCCEx_PLL3_Config>
 80059f0:	4603      	mov	r3, r0
 80059f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80059f6:	e00a      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059fe:	e006      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005a00:	bf00      	nop
 8005a02:	e004      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005a04:	bf00      	nop
 8005a06:	e002      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005a08:	bf00      	nop
 8005a0a:	e000      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005a0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10b      	bne.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a16:	4b39      	ldr	r3, [pc, #228]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a1a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a26:	4a35      	ldr	r2, [pc, #212]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a28:	430b      	orrs	r3, r1
 8005a2a:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a2c:	e003      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005a42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005a46:	2300      	movs	r3, #0
 8005a48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005a4c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005a50:	460b      	mov	r3, r1
 8005a52:	4313      	orrs	r3, r2
 8005a54:	d058      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a5e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005a62:	d033      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005a64:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005a68:	d82c      	bhi.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005a6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a6e:	d02f      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005a70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a74:	d826      	bhi.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005a76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a7a:	d02b      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005a7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a80:	d820      	bhi.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005a82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a86:	d012      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005a88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a8c:	d81a      	bhi.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d022      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005a92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a96:	d115      	bne.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a9c:	3308      	adds	r3, #8
 8005a9e:	2100      	movs	r1, #0
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f000 fe57 	bl	8006754 <RCCEx_PLL2_Config>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005aac:	e015      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab2:	3328      	adds	r3, #40	@ 0x28
 8005ab4:	2102      	movs	r1, #2
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 fefe 	bl	80068b8 <RCCEx_PLL3_Config>
 8005abc:	4603      	mov	r3, r0
 8005abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005ac2:	e00a      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005aca:	e006      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005acc:	bf00      	nop
 8005ace:	e004      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005ad0:	bf00      	nop
 8005ad2:	e002      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005ad4:	bf00      	nop
 8005ad6:	e000      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005ad8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ada:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10e      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ae2:	4b06      	ldr	r3, [pc, #24]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ae6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005af2:	4a02      	ldr	r2, [pc, #8]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005af4:	430b      	orrs	r3, r1
 8005af6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005af8:	e006      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005afa:	bf00      	nop
 8005afc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b10:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005b14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b18:	2300      	movs	r3, #0
 8005b1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b1e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005b22:	460b      	mov	r3, r1
 8005b24:	4313      	orrs	r3, r2
 8005b26:	d055      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005b30:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005b34:	d033      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005b36:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005b3a:	d82c      	bhi.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005b3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b40:	d02f      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005b42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b46:	d826      	bhi.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005b48:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005b4c:	d02b      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005b4e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005b52:	d820      	bhi.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005b54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b58:	d012      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005b5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b5e:	d81a      	bhi.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d022      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005b64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b68:	d115      	bne.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b6e:	3308      	adds	r3, #8
 8005b70:	2100      	movs	r1, #0
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fdee 	bl	8006754 <RCCEx_PLL2_Config>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005b7e:	e015      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b84:	3328      	adds	r3, #40	@ 0x28
 8005b86:	2102      	movs	r1, #2
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 fe95 	bl	80068b8 <RCCEx_PLL3_Config>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005b94:	e00a      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b9c:	e006      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b9e:	bf00      	nop
 8005ba0:	e004      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005ba2:	bf00      	nop
 8005ba4:	e002      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005ba6:	bf00      	nop
 8005ba8:	e000      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005baa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10b      	bne.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005bb4:	4ba1      	ldr	r3, [pc, #644]	@ (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bb8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005bc4:	4a9d      	ldr	r2, [pc, #628]	@ (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bc6:	430b      	orrs	r3, r1
 8005bc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bca:	e003      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bdc:	f002 0308 	and.w	r3, r2, #8
 8005be0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005be4:	2300      	movs	r3, #0
 8005be6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005bea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005bee:	460b      	mov	r3, r1
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	d01e      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c00:	d10c      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c06:	3328      	adds	r3, #40	@ 0x28
 8005c08:	2102      	movs	r1, #2
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 fe54 	bl	80068b8 <RCCEx_PLL3_Config>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d002      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005c1c:	4b87      	ldr	r3, [pc, #540]	@ (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c20:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c2c:	4a83      	ldr	r2, [pc, #524]	@ (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c2e:	430b      	orrs	r3, r1
 8005c30:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3a:	f002 0310 	and.w	r3, r2, #16
 8005c3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c42:	2300      	movs	r3, #0
 8005c44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005c48:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	d01e      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c5e:	d10c      	bne.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c64:	3328      	adds	r3, #40	@ 0x28
 8005c66:	2102      	movs	r1, #2
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 fe25 	bl	80068b8 <RCCEx_PLL3_Config>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c7a:	4b70      	ldr	r3, [pc, #448]	@ (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c7e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c8a:	4a6c      	ldr	r2, [pc, #432]	@ (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c8c:	430b      	orrs	r3, r1
 8005c8e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c98:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005c9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ca6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005caa:	460b      	mov	r3, r1
 8005cac:	4313      	orrs	r3, r2
 8005cae:	d03e      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005cb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cbc:	d022      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005cbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cc2:	d81b      	bhi.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d003      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005cc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ccc:	d00b      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005cce:	e015      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd4:	3308      	adds	r3, #8
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 fd3b 	bl	8006754 <RCCEx_PLL2_Config>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005ce4:	e00f      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cea:	3328      	adds	r3, #40	@ 0x28
 8005cec:	2102      	movs	r1, #2
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 fde2 	bl	80068b8 <RCCEx_PLL3_Config>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005cfa:	e004      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d02:	e000      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10b      	bne.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d0e:	4b4b      	ldr	r3, [pc, #300]	@ (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d12:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005d1e:	4a47      	ldr	r2, [pc, #284]	@ (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d20:	430b      	orrs	r3, r1
 8005d22:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d24:	e003      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d36:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005d3a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005d40:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005d44:	460b      	mov	r3, r1
 8005d46:	4313      	orrs	r3, r2
 8005d48:	d03b      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d52:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d56:	d01f      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005d58:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d5c:	d818      	bhi.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005d5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d62:	d003      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005d64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d68:	d007      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005d6a:	e011      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d6c:	4b33      	ldr	r3, [pc, #204]	@ (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d70:	4a32      	ldr	r2, [pc, #200]	@ (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005d78:	e00f      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7e:	3328      	adds	r3, #40	@ 0x28
 8005d80:	2101      	movs	r1, #1
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 fd98 	bl	80068b8 <RCCEx_PLL3_Config>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005d8e:	e004      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d96:	e000      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10b      	bne.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005da2:	4b26      	ldr	r3, [pc, #152]	@ (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005da6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db2:	4a22      	ldr	r2, [pc, #136]	@ (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005db4:	430b      	orrs	r3, r1
 8005db6:	6553      	str	r3, [r2, #84]	@ 0x54
 8005db8:	e003      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dca:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005dce:	673b      	str	r3, [r7, #112]	@ 0x70
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	677b      	str	r3, [r7, #116]	@ 0x74
 8005dd4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005dd8:	460b      	mov	r3, r1
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	d034      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d003      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dec:	d007      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005dee:	e011      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005df0:	4b12      	ldr	r3, [pc, #72]	@ (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df4:	4a11      	ldr	r2, [pc, #68]	@ (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005df6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005dfc:	e00e      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e02:	3308      	adds	r3, #8
 8005e04:	2102      	movs	r1, #2
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 fca4 	bl	8006754 <RCCEx_PLL2_Config>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005e12:	e003      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10d      	bne.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005e24:	4b05      	ldr	r3, [pc, #20]	@ (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e28:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e32:	4a02      	ldr	r2, [pc, #8]	@ (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e34:	430b      	orrs	r3, r1
 8005e36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e38:	e006      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005e3a:	bf00      	nop
 8005e3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e50:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005e54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e56:	2300      	movs	r3, #0
 8005e58:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e5a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005e5e:	460b      	mov	r3, r1
 8005e60:	4313      	orrs	r3, r2
 8005e62:	d00c      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e68:	3328      	adds	r3, #40	@ 0x28
 8005e6a:	2102      	movs	r1, #2
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 fd23 	bl	80068b8 <RCCEx_PLL3_Config>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d002      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e86:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005e8a:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e90:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005e94:	460b      	mov	r3, r1
 8005e96:	4313      	orrs	r3, r2
 8005e98:	d038      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ea2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ea6:	d018      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005ea8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005eac:	d811      	bhi.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005eae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005eb2:	d014      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005eb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005eb8:	d80b      	bhi.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d011      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005ebe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ec2:	d106      	bne.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ec4:	4bc3      	ldr	r3, [pc, #780]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec8:	4ac2      	ldr	r2, [pc, #776]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005eca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ece:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005ed0:	e008      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ed8:	e004      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005eda:	bf00      	nop
 8005edc:	e002      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005ede:	bf00      	nop
 8005ee0:	e000      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005ee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10b      	bne.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005eec:	4bb9      	ldr	r3, [pc, #740]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ef0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005efc:	4ab5      	ldr	r2, [pc, #724]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005efe:	430b      	orrs	r3, r1
 8005f00:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f02:	e003      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f14:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005f18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f1e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005f22:	460b      	mov	r3, r1
 8005f24:	4313      	orrs	r3, r2
 8005f26:	d009      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005f28:	4baa      	ldr	r3, [pc, #680]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f2c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f36:	4aa7      	ldr	r2, [pc, #668]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f38:	430b      	orrs	r3, r1
 8005f3a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f44:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005f48:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f4e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005f52:	460b      	mov	r3, r1
 8005f54:	4313      	orrs	r3, r2
 8005f56:	d00a      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005f58:	4b9e      	ldr	r3, [pc, #632]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f64:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005f68:	4a9a      	ldr	r2, [pc, #616]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f6a:	430b      	orrs	r3, r1
 8005f6c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f76:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005f7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f80:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005f84:	460b      	mov	r3, r1
 8005f86:	4313      	orrs	r3, r2
 8005f88:	d009      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f8a:	4b92      	ldr	r3, [pc, #584]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f8e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f98:	4a8e      	ldr	r2, [pc, #568]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f9a:	430b      	orrs	r3, r1
 8005f9c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005faa:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fac:	2300      	movs	r3, #0
 8005fae:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fb0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	d00e      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005fba:	4b86      	ldr	r3, [pc, #536]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	4a85      	ldr	r2, [pc, #532]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fc0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005fc4:	6113      	str	r3, [r2, #16]
 8005fc6:	4b83      	ldr	r3, [pc, #524]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fc8:	6919      	ldr	r1, [r3, #16]
 8005fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005fd2:	4a80      	ldr	r2, [pc, #512]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fd4:	430b      	orrs	r3, r1
 8005fd6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fea:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005fee:	460b      	mov	r3, r1
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	d009      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005ff4:	4b77      	ldr	r3, [pc, #476]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ff8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006002:	4a74      	ldr	r2, [pc, #464]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006004:	430b      	orrs	r3, r1
 8006006:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800600c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006010:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006014:	633b      	str	r3, [r7, #48]	@ 0x30
 8006016:	2300      	movs	r3, #0
 8006018:	637b      	str	r3, [r7, #52]	@ 0x34
 800601a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800601e:	460b      	mov	r3, r1
 8006020:	4313      	orrs	r3, r2
 8006022:	d00a      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006024:	4b6b      	ldr	r3, [pc, #428]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006028:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800602c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006030:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006034:	4a67      	ldr	r2, [pc, #412]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006036:	430b      	orrs	r3, r1
 8006038:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800603a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800603e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006042:	2100      	movs	r1, #0
 8006044:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800604c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006050:	460b      	mov	r3, r1
 8006052:	4313      	orrs	r3, r2
 8006054:	d011      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800605a:	3308      	adds	r3, #8
 800605c:	2100      	movs	r1, #0
 800605e:	4618      	mov	r0, r3
 8006060:	f000 fb78 	bl	8006754 <RCCEx_PLL2_Config>
 8006064:	4603      	mov	r3, r0
 8006066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800606a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006072:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006076:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800607a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800607e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006082:	2100      	movs	r1, #0
 8006084:	6239      	str	r1, [r7, #32]
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	627b      	str	r3, [r7, #36]	@ 0x24
 800608c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006090:	460b      	mov	r3, r1
 8006092:	4313      	orrs	r3, r2
 8006094:	d011      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800609a:	3308      	adds	r3, #8
 800609c:	2101      	movs	r1, #1
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 fb58 	bl	8006754 <RCCEx_PLL2_Config>
 80060a4:	4603      	mov	r3, r0
 80060a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80060aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80060ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c2:	2100      	movs	r1, #0
 80060c4:	61b9      	str	r1, [r7, #24]
 80060c6:	f003 0304 	and.w	r3, r3, #4
 80060ca:	61fb      	str	r3, [r7, #28]
 80060cc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80060d0:	460b      	mov	r3, r1
 80060d2:	4313      	orrs	r3, r2
 80060d4:	d011      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060da:	3308      	adds	r3, #8
 80060dc:	2102      	movs	r1, #2
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 fb38 	bl	8006754 <RCCEx_PLL2_Config>
 80060e4:	4603      	mov	r3, r0
 80060e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80060ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80060fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006102:	2100      	movs	r1, #0
 8006104:	6139      	str	r1, [r7, #16]
 8006106:	f003 0308 	and.w	r3, r3, #8
 800610a:	617b      	str	r3, [r7, #20]
 800610c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006110:	460b      	mov	r3, r1
 8006112:	4313      	orrs	r3, r2
 8006114:	d011      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800611a:	3328      	adds	r3, #40	@ 0x28
 800611c:	2100      	movs	r1, #0
 800611e:	4618      	mov	r0, r3
 8006120:	f000 fbca 	bl	80068b8 <RCCEx_PLL3_Config>
 8006124:	4603      	mov	r3, r0
 8006126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800612a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800612e:	2b00      	cmp	r3, #0
 8006130:	d003      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006132:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006136:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800613a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800613e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006142:	2100      	movs	r1, #0
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	f003 0310 	and.w	r3, r3, #16
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006150:	460b      	mov	r3, r1
 8006152:	4313      	orrs	r3, r2
 8006154:	d011      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800615a:	3328      	adds	r3, #40	@ 0x28
 800615c:	2101      	movs	r1, #1
 800615e:	4618      	mov	r0, r3
 8006160:	f000 fbaa 	bl	80068b8 <RCCEx_PLL3_Config>
 8006164:	4603      	mov	r3, r0
 8006166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800616a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800616e:	2b00      	cmp	r3, #0
 8006170:	d003      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006172:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006176:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800617a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800617e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006182:	2100      	movs	r1, #0
 8006184:	6039      	str	r1, [r7, #0]
 8006186:	f003 0320 	and.w	r3, r3, #32
 800618a:	607b      	str	r3, [r7, #4]
 800618c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006190:	460b      	mov	r3, r1
 8006192:	4313      	orrs	r3, r2
 8006194:	d011      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800619a:	3328      	adds	r3, #40	@ 0x28
 800619c:	2102      	movs	r1, #2
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 fb8a 	bl	80068b8 <RCCEx_PLL3_Config>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80061aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d003      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80061ba:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80061c2:	2300      	movs	r3, #0
 80061c4:	e000      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80061ce:	46bd      	mov	sp, r7
 80061d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061d4:	58024400 	.word	0x58024400

080061d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80061dc:	f7fe fd54 	bl	8004c88 <HAL_RCC_GetHCLKFreq>
 80061e0:	4602      	mov	r2, r0
 80061e2:	4b06      	ldr	r3, [pc, #24]	@ (80061fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	091b      	lsrs	r3, r3, #4
 80061e8:	f003 0307 	and.w	r3, r3, #7
 80061ec:	4904      	ldr	r1, [pc, #16]	@ (8006200 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80061ee:	5ccb      	ldrb	r3, [r1, r3]
 80061f0:	f003 031f 	and.w	r3, r3, #31
 80061f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	58024400 	.word	0x58024400
 8006200:	0801dad8 	.word	0x0801dad8

08006204 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006204:	b480      	push	{r7}
 8006206:	b089      	sub	sp, #36	@ 0x24
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800620c:	4ba1      	ldr	r3, [pc, #644]	@ (8006494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800620e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006210:	f003 0303 	and.w	r3, r3, #3
 8006214:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006216:	4b9f      	ldr	r3, [pc, #636]	@ (8006494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621a:	0b1b      	lsrs	r3, r3, #12
 800621c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006220:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006222:	4b9c      	ldr	r3, [pc, #624]	@ (8006494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006226:	091b      	lsrs	r3, r3, #4
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800622e:	4b99      	ldr	r3, [pc, #612]	@ (8006494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006232:	08db      	lsrs	r3, r3, #3
 8006234:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	fb02 f303 	mul.w	r3, r2, r3
 800623e:	ee07 3a90 	vmov	s15, r3
 8006242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006246:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 8111 	beq.w	8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	2b02      	cmp	r3, #2
 8006256:	f000 8083 	beq.w	8006360 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	2b02      	cmp	r3, #2
 800625e:	f200 80a1 	bhi.w	80063a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d003      	beq.n	8006270 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d056      	beq.n	800631c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800626e:	e099      	b.n	80063a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006270:	4b88      	ldr	r3, [pc, #544]	@ (8006494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0320 	and.w	r3, r3, #32
 8006278:	2b00      	cmp	r3, #0
 800627a:	d02d      	beq.n	80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800627c:	4b85      	ldr	r3, [pc, #532]	@ (8006494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	08db      	lsrs	r3, r3, #3
 8006282:	f003 0303 	and.w	r3, r3, #3
 8006286:	4a84      	ldr	r2, [pc, #528]	@ (8006498 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006288:	fa22 f303 	lsr.w	r3, r2, r3
 800628c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	ee07 3a90 	vmov	s15, r3
 8006294:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	ee07 3a90 	vmov	s15, r3
 800629e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062a6:	4b7b      	ldr	r3, [pc, #492]	@ (8006494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ae:	ee07 3a90 	vmov	s15, r3
 80062b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80062ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800649c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80062d6:	e087      	b.n	80063e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	ee07 3a90 	vmov	s15, r3
 80062de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80064a0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80062e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ea:	4b6a      	ldr	r3, [pc, #424]	@ (8006494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062f2:	ee07 3a90 	vmov	s15, r3
 80062f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80062fe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800649c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800630a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800630e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006316:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800631a:	e065      	b.n	80063e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	ee07 3a90 	vmov	s15, r3
 8006322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006326:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80064a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800632a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800632e:	4b59      	ldr	r3, [pc, #356]	@ (8006494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006336:	ee07 3a90 	vmov	s15, r3
 800633a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800633e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006342:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800649c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800634a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800634e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800635a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800635e:	e043      	b.n	80063e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	ee07 3a90 	vmov	s15, r3
 8006366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800636a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80064a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800636e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006372:	4b48      	ldr	r3, [pc, #288]	@ (8006494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800637a:	ee07 3a90 	vmov	s15, r3
 800637e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006382:	ed97 6a03 	vldr	s12, [r7, #12]
 8006386:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800649c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800638a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800638e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006392:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800639a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800639e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063a2:	e021      	b.n	80063e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	ee07 3a90 	vmov	s15, r3
 80063aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80064a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80063b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063b6:	4b37      	ldr	r3, [pc, #220]	@ (8006494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063be:	ee07 3a90 	vmov	s15, r3
 80063c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80063ca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800649c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80063ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80063e8:	4b2a      	ldr	r3, [pc, #168]	@ (8006494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ec:	0a5b      	lsrs	r3, r3, #9
 80063ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063f2:	ee07 3a90 	vmov	s15, r3
 80063f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006402:	edd7 6a07 	vldr	s13, [r7, #28]
 8006406:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800640a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800640e:	ee17 2a90 	vmov	r2, s15
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006416:	4b1f      	ldr	r3, [pc, #124]	@ (8006494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800641a:	0c1b      	lsrs	r3, r3, #16
 800641c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006420:	ee07 3a90 	vmov	s15, r3
 8006424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006428:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800642c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006430:	edd7 6a07 	vldr	s13, [r7, #28]
 8006434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800643c:	ee17 2a90 	vmov	r2, s15
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006444:	4b13      	ldr	r3, [pc, #76]	@ (8006494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006448:	0e1b      	lsrs	r3, r3, #24
 800644a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800644e:	ee07 3a90 	vmov	s15, r3
 8006452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006456:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800645a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800645e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006462:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006466:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800646a:	ee17 2a90 	vmov	r2, s15
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006472:	e008      	b.n	8006486 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	609a      	str	r2, [r3, #8]
}
 8006486:	bf00      	nop
 8006488:	3724      	adds	r7, #36	@ 0x24
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	58024400 	.word	0x58024400
 8006498:	03d09000 	.word	0x03d09000
 800649c:	46000000 	.word	0x46000000
 80064a0:	4c742400 	.word	0x4c742400
 80064a4:	4a742400 	.word	0x4a742400
 80064a8:	4b7a0000 	.word	0x4b7a0000

080064ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b089      	sub	sp, #36	@ 0x24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80064b4:	4ba1      	ldr	r3, [pc, #644]	@ (800673c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b8:	f003 0303 	and.w	r3, r3, #3
 80064bc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80064be:	4b9f      	ldr	r3, [pc, #636]	@ (800673c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c2:	0d1b      	lsrs	r3, r3, #20
 80064c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064c8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80064ca:	4b9c      	ldr	r3, [pc, #624]	@ (800673c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ce:	0a1b      	lsrs	r3, r3, #8
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80064d6:	4b99      	ldr	r3, [pc, #612]	@ (800673c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064da:	08db      	lsrs	r3, r3, #3
 80064dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	fb02 f303 	mul.w	r3, r2, r3
 80064e6:	ee07 3a90 	vmov	s15, r3
 80064ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 8111 	beq.w	800671c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	f000 8083 	beq.w	8006608 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	2b02      	cmp	r3, #2
 8006506:	f200 80a1 	bhi.w	800664c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d003      	beq.n	8006518 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	2b01      	cmp	r3, #1
 8006514:	d056      	beq.n	80065c4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006516:	e099      	b.n	800664c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006518:	4b88      	ldr	r3, [pc, #544]	@ (800673c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0320 	and.w	r3, r3, #32
 8006520:	2b00      	cmp	r3, #0
 8006522:	d02d      	beq.n	8006580 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006524:	4b85      	ldr	r3, [pc, #532]	@ (800673c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	08db      	lsrs	r3, r3, #3
 800652a:	f003 0303 	and.w	r3, r3, #3
 800652e:	4a84      	ldr	r2, [pc, #528]	@ (8006740 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006530:	fa22 f303 	lsr.w	r3, r2, r3
 8006534:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	ee07 3a90 	vmov	s15, r3
 800653c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	ee07 3a90 	vmov	s15, r3
 8006546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800654a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800654e:	4b7b      	ldr	r3, [pc, #492]	@ (800673c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006556:	ee07 3a90 	vmov	s15, r3
 800655a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800655e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006562:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006744 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800656a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800656e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800657a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800657e:	e087      	b.n	8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	ee07 3a90 	vmov	s15, r3
 8006586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800658a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006748 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800658e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006592:	4b6a      	ldr	r3, [pc, #424]	@ (800673c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800659a:	ee07 3a90 	vmov	s15, r3
 800659e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80065a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006744 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065c2:	e065      	b.n	8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	ee07 3a90 	vmov	s15, r3
 80065ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800674c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80065d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065d6:	4b59      	ldr	r3, [pc, #356]	@ (800673c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065de:	ee07 3a90 	vmov	s15, r3
 80065e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80065ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006744 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006602:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006606:	e043      	b.n	8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	ee07 3a90 	vmov	s15, r3
 800660e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006612:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006750 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800661a:	4b48      	ldr	r3, [pc, #288]	@ (800673c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800661c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800661e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006622:	ee07 3a90 	vmov	s15, r3
 8006626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800662a:	ed97 6a03 	vldr	s12, [r7, #12]
 800662e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006744 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800663a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800663e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006646:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800664a:	e021      	b.n	8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	ee07 3a90 	vmov	s15, r3
 8006652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006656:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800674c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800665a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800665e:	4b37      	ldr	r3, [pc, #220]	@ (800673c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006666:	ee07 3a90 	vmov	s15, r3
 800666a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800666e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006672:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006744 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800667a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800667e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800668a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800668e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006690:	4b2a      	ldr	r3, [pc, #168]	@ (800673c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006694:	0a5b      	lsrs	r3, r3, #9
 8006696:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800669a:	ee07 3a90 	vmov	s15, r3
 800669e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80066a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80066ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066b6:	ee17 2a90 	vmov	r2, s15
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80066be:	4b1f      	ldr	r3, [pc, #124]	@ (800673c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c2:	0c1b      	lsrs	r3, r3, #16
 80066c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066c8:	ee07 3a90 	vmov	s15, r3
 80066cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80066d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80066dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066e4:	ee17 2a90 	vmov	r2, s15
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80066ec:	4b13      	ldr	r3, [pc, #76]	@ (800673c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f0:	0e1b      	lsrs	r3, r3, #24
 80066f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066f6:	ee07 3a90 	vmov	s15, r3
 80066fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006702:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006706:	edd7 6a07 	vldr	s13, [r7, #28]
 800670a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800670e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006712:	ee17 2a90 	vmov	r2, s15
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800671a:	e008      	b.n	800672e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	609a      	str	r2, [r3, #8]
}
 800672e:	bf00      	nop
 8006730:	3724      	adds	r7, #36	@ 0x24
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	58024400 	.word	0x58024400
 8006740:	03d09000 	.word	0x03d09000
 8006744:	46000000 	.word	0x46000000
 8006748:	4c742400 	.word	0x4c742400
 800674c:	4a742400 	.word	0x4a742400
 8006750:	4b7a0000 	.word	0x4b7a0000

08006754 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006762:	4b53      	ldr	r3, [pc, #332]	@ (80068b0 <RCCEx_PLL2_Config+0x15c>)
 8006764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006766:	f003 0303 	and.w	r3, r3, #3
 800676a:	2b03      	cmp	r3, #3
 800676c:	d101      	bne.n	8006772 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e099      	b.n	80068a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006772:	4b4f      	ldr	r3, [pc, #316]	@ (80068b0 <RCCEx_PLL2_Config+0x15c>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a4e      	ldr	r2, [pc, #312]	@ (80068b0 <RCCEx_PLL2_Config+0x15c>)
 8006778:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800677c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800677e:	f7fa fe1f 	bl	80013c0 <HAL_GetTick>
 8006782:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006784:	e008      	b.n	8006798 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006786:	f7fa fe1b 	bl	80013c0 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	2b02      	cmp	r3, #2
 8006792:	d901      	bls.n	8006798 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e086      	b.n	80068a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006798:	4b45      	ldr	r3, [pc, #276]	@ (80068b0 <RCCEx_PLL2_Config+0x15c>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1f0      	bne.n	8006786 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80067a4:	4b42      	ldr	r3, [pc, #264]	@ (80068b0 <RCCEx_PLL2_Config+0x15c>)
 80067a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	031b      	lsls	r3, r3, #12
 80067b2:	493f      	ldr	r1, [pc, #252]	@ (80068b0 <RCCEx_PLL2_Config+0x15c>)
 80067b4:	4313      	orrs	r3, r2
 80067b6:	628b      	str	r3, [r1, #40]	@ 0x28
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	3b01      	subs	r3, #1
 80067be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	3b01      	subs	r3, #1
 80067c8:	025b      	lsls	r3, r3, #9
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	431a      	orrs	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	3b01      	subs	r3, #1
 80067d4:	041b      	lsls	r3, r3, #16
 80067d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80067da:	431a      	orrs	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	3b01      	subs	r3, #1
 80067e2:	061b      	lsls	r3, r3, #24
 80067e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80067e8:	4931      	ldr	r1, [pc, #196]	@ (80068b0 <RCCEx_PLL2_Config+0x15c>)
 80067ea:	4313      	orrs	r3, r2
 80067ec:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80067ee:	4b30      	ldr	r3, [pc, #192]	@ (80068b0 <RCCEx_PLL2_Config+0x15c>)
 80067f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	492d      	ldr	r1, [pc, #180]	@ (80068b0 <RCCEx_PLL2_Config+0x15c>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006800:	4b2b      	ldr	r3, [pc, #172]	@ (80068b0 <RCCEx_PLL2_Config+0x15c>)
 8006802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006804:	f023 0220 	bic.w	r2, r3, #32
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	4928      	ldr	r1, [pc, #160]	@ (80068b0 <RCCEx_PLL2_Config+0x15c>)
 800680e:	4313      	orrs	r3, r2
 8006810:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006812:	4b27      	ldr	r3, [pc, #156]	@ (80068b0 <RCCEx_PLL2_Config+0x15c>)
 8006814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006816:	4a26      	ldr	r2, [pc, #152]	@ (80068b0 <RCCEx_PLL2_Config+0x15c>)
 8006818:	f023 0310 	bic.w	r3, r3, #16
 800681c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800681e:	4b24      	ldr	r3, [pc, #144]	@ (80068b0 <RCCEx_PLL2_Config+0x15c>)
 8006820:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006822:	4b24      	ldr	r3, [pc, #144]	@ (80068b4 <RCCEx_PLL2_Config+0x160>)
 8006824:	4013      	ands	r3, r2
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	69d2      	ldr	r2, [r2, #28]
 800682a:	00d2      	lsls	r2, r2, #3
 800682c:	4920      	ldr	r1, [pc, #128]	@ (80068b0 <RCCEx_PLL2_Config+0x15c>)
 800682e:	4313      	orrs	r3, r2
 8006830:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006832:	4b1f      	ldr	r3, [pc, #124]	@ (80068b0 <RCCEx_PLL2_Config+0x15c>)
 8006834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006836:	4a1e      	ldr	r2, [pc, #120]	@ (80068b0 <RCCEx_PLL2_Config+0x15c>)
 8006838:	f043 0310 	orr.w	r3, r3, #16
 800683c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d106      	bne.n	8006852 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006844:	4b1a      	ldr	r3, [pc, #104]	@ (80068b0 <RCCEx_PLL2_Config+0x15c>)
 8006846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006848:	4a19      	ldr	r2, [pc, #100]	@ (80068b0 <RCCEx_PLL2_Config+0x15c>)
 800684a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800684e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006850:	e00f      	b.n	8006872 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d106      	bne.n	8006866 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006858:	4b15      	ldr	r3, [pc, #84]	@ (80068b0 <RCCEx_PLL2_Config+0x15c>)
 800685a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685c:	4a14      	ldr	r2, [pc, #80]	@ (80068b0 <RCCEx_PLL2_Config+0x15c>)
 800685e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006862:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006864:	e005      	b.n	8006872 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006866:	4b12      	ldr	r3, [pc, #72]	@ (80068b0 <RCCEx_PLL2_Config+0x15c>)
 8006868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800686a:	4a11      	ldr	r2, [pc, #68]	@ (80068b0 <RCCEx_PLL2_Config+0x15c>)
 800686c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006870:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006872:	4b0f      	ldr	r3, [pc, #60]	@ (80068b0 <RCCEx_PLL2_Config+0x15c>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a0e      	ldr	r2, [pc, #56]	@ (80068b0 <RCCEx_PLL2_Config+0x15c>)
 8006878:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800687c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800687e:	f7fa fd9f 	bl	80013c0 <HAL_GetTick>
 8006882:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006884:	e008      	b.n	8006898 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006886:	f7fa fd9b 	bl	80013c0 <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	2b02      	cmp	r3, #2
 8006892:	d901      	bls.n	8006898 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e006      	b.n	80068a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006898:	4b05      	ldr	r3, [pc, #20]	@ (80068b0 <RCCEx_PLL2_Config+0x15c>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d0f0      	beq.n	8006886 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	58024400 	.word	0x58024400
 80068b4:	ffff0007 	.word	0xffff0007

080068b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80068c6:	4b53      	ldr	r3, [pc, #332]	@ (8006a14 <RCCEx_PLL3_Config+0x15c>)
 80068c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ca:	f003 0303 	and.w	r3, r3, #3
 80068ce:	2b03      	cmp	r3, #3
 80068d0:	d101      	bne.n	80068d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e099      	b.n	8006a0a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80068d6:	4b4f      	ldr	r3, [pc, #316]	@ (8006a14 <RCCEx_PLL3_Config+0x15c>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a4e      	ldr	r2, [pc, #312]	@ (8006a14 <RCCEx_PLL3_Config+0x15c>)
 80068dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068e2:	f7fa fd6d 	bl	80013c0 <HAL_GetTick>
 80068e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80068e8:	e008      	b.n	80068fc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80068ea:	f7fa fd69 	bl	80013c0 <HAL_GetTick>
 80068ee:	4602      	mov	r2, r0
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d901      	bls.n	80068fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e086      	b.n	8006a0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80068fc:	4b45      	ldr	r3, [pc, #276]	@ (8006a14 <RCCEx_PLL3_Config+0x15c>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1f0      	bne.n	80068ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006908:	4b42      	ldr	r3, [pc, #264]	@ (8006a14 <RCCEx_PLL3_Config+0x15c>)
 800690a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800690c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	051b      	lsls	r3, r3, #20
 8006916:	493f      	ldr	r1, [pc, #252]	@ (8006a14 <RCCEx_PLL3_Config+0x15c>)
 8006918:	4313      	orrs	r3, r2
 800691a:	628b      	str	r3, [r1, #40]	@ 0x28
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	3b01      	subs	r3, #1
 8006922:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	3b01      	subs	r3, #1
 800692c:	025b      	lsls	r3, r3, #9
 800692e:	b29b      	uxth	r3, r3
 8006930:	431a      	orrs	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	3b01      	subs	r3, #1
 8006938:	041b      	lsls	r3, r3, #16
 800693a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800693e:	431a      	orrs	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	3b01      	subs	r3, #1
 8006946:	061b      	lsls	r3, r3, #24
 8006948:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800694c:	4931      	ldr	r1, [pc, #196]	@ (8006a14 <RCCEx_PLL3_Config+0x15c>)
 800694e:	4313      	orrs	r3, r2
 8006950:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006952:	4b30      	ldr	r3, [pc, #192]	@ (8006a14 <RCCEx_PLL3_Config+0x15c>)
 8006954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006956:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	492d      	ldr	r1, [pc, #180]	@ (8006a14 <RCCEx_PLL3_Config+0x15c>)
 8006960:	4313      	orrs	r3, r2
 8006962:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006964:	4b2b      	ldr	r3, [pc, #172]	@ (8006a14 <RCCEx_PLL3_Config+0x15c>)
 8006966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006968:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	4928      	ldr	r1, [pc, #160]	@ (8006a14 <RCCEx_PLL3_Config+0x15c>)
 8006972:	4313      	orrs	r3, r2
 8006974:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006976:	4b27      	ldr	r3, [pc, #156]	@ (8006a14 <RCCEx_PLL3_Config+0x15c>)
 8006978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800697a:	4a26      	ldr	r2, [pc, #152]	@ (8006a14 <RCCEx_PLL3_Config+0x15c>)
 800697c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006980:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006982:	4b24      	ldr	r3, [pc, #144]	@ (8006a14 <RCCEx_PLL3_Config+0x15c>)
 8006984:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006986:	4b24      	ldr	r3, [pc, #144]	@ (8006a18 <RCCEx_PLL3_Config+0x160>)
 8006988:	4013      	ands	r3, r2
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	69d2      	ldr	r2, [r2, #28]
 800698e:	00d2      	lsls	r2, r2, #3
 8006990:	4920      	ldr	r1, [pc, #128]	@ (8006a14 <RCCEx_PLL3_Config+0x15c>)
 8006992:	4313      	orrs	r3, r2
 8006994:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006996:	4b1f      	ldr	r3, [pc, #124]	@ (8006a14 <RCCEx_PLL3_Config+0x15c>)
 8006998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800699a:	4a1e      	ldr	r2, [pc, #120]	@ (8006a14 <RCCEx_PLL3_Config+0x15c>)
 800699c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d106      	bne.n	80069b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80069a8:	4b1a      	ldr	r3, [pc, #104]	@ (8006a14 <RCCEx_PLL3_Config+0x15c>)
 80069aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ac:	4a19      	ldr	r2, [pc, #100]	@ (8006a14 <RCCEx_PLL3_Config+0x15c>)
 80069ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80069b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80069b4:	e00f      	b.n	80069d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d106      	bne.n	80069ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80069bc:	4b15      	ldr	r3, [pc, #84]	@ (8006a14 <RCCEx_PLL3_Config+0x15c>)
 80069be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c0:	4a14      	ldr	r2, [pc, #80]	@ (8006a14 <RCCEx_PLL3_Config+0x15c>)
 80069c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80069c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80069c8:	e005      	b.n	80069d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80069ca:	4b12      	ldr	r3, [pc, #72]	@ (8006a14 <RCCEx_PLL3_Config+0x15c>)
 80069cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ce:	4a11      	ldr	r2, [pc, #68]	@ (8006a14 <RCCEx_PLL3_Config+0x15c>)
 80069d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80069d6:	4b0f      	ldr	r3, [pc, #60]	@ (8006a14 <RCCEx_PLL3_Config+0x15c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a0e      	ldr	r2, [pc, #56]	@ (8006a14 <RCCEx_PLL3_Config+0x15c>)
 80069dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069e2:	f7fa fced 	bl	80013c0 <HAL_GetTick>
 80069e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80069e8:	e008      	b.n	80069fc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80069ea:	f7fa fce9 	bl	80013c0 <HAL_GetTick>
 80069ee:	4602      	mov	r2, r0
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d901      	bls.n	80069fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e006      	b.n	8006a0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80069fc:	4b05      	ldr	r3, [pc, #20]	@ (8006a14 <RCCEx_PLL3_Config+0x15c>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d0f0      	beq.n	80069ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	58024400 	.word	0x58024400
 8006a18:	ffff0007 	.word	0xffff0007

08006a1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d101      	bne.n	8006a2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e049      	b.n	8006ac2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d106      	bne.n	8006a48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f841 	bl	8006aca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	3304      	adds	r3, #4
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4610      	mov	r0, r2
 8006a5c:	f000 f9e8 	bl	8006e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b083      	sub	sp, #12
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006ad2:	bf00      	nop
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
	...

08006ae0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d001      	beq.n	8006af8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e054      	b.n	8006ba2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2202      	movs	r2, #2
 8006afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68da      	ldr	r2, [r3, #12]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f042 0201 	orr.w	r2, r2, #1
 8006b0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a26      	ldr	r2, [pc, #152]	@ (8006bb0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d022      	beq.n	8006b60 <HAL_TIM_Base_Start_IT+0x80>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b22:	d01d      	beq.n	8006b60 <HAL_TIM_Base_Start_IT+0x80>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a22      	ldr	r2, [pc, #136]	@ (8006bb4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d018      	beq.n	8006b60 <HAL_TIM_Base_Start_IT+0x80>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a21      	ldr	r2, [pc, #132]	@ (8006bb8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d013      	beq.n	8006b60 <HAL_TIM_Base_Start_IT+0x80>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a1f      	ldr	r2, [pc, #124]	@ (8006bbc <HAL_TIM_Base_Start_IT+0xdc>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d00e      	beq.n	8006b60 <HAL_TIM_Base_Start_IT+0x80>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a1e      	ldr	r2, [pc, #120]	@ (8006bc0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d009      	beq.n	8006b60 <HAL_TIM_Base_Start_IT+0x80>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a1c      	ldr	r2, [pc, #112]	@ (8006bc4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d004      	beq.n	8006b60 <HAL_TIM_Base_Start_IT+0x80>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8006bc8 <HAL_TIM_Base_Start_IT+0xe8>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d115      	bne.n	8006b8c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689a      	ldr	r2, [r3, #8]
 8006b66:	4b19      	ldr	r3, [pc, #100]	@ (8006bcc <HAL_TIM_Base_Start_IT+0xec>)
 8006b68:	4013      	ands	r3, r2
 8006b6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2b06      	cmp	r3, #6
 8006b70:	d015      	beq.n	8006b9e <HAL_TIM_Base_Start_IT+0xbe>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b78:	d011      	beq.n	8006b9e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f042 0201 	orr.w	r2, r2, #1
 8006b88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b8a:	e008      	b.n	8006b9e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f042 0201 	orr.w	r2, r2, #1
 8006b9a:	601a      	str	r2, [r3, #0]
 8006b9c:	e000      	b.n	8006ba0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3714      	adds	r7, #20
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	40010000 	.word	0x40010000
 8006bb4:	40000400 	.word	0x40000400
 8006bb8:	40000800 	.word	0x40000800
 8006bbc:	40000c00 	.word	0x40000c00
 8006bc0:	40010400 	.word	0x40010400
 8006bc4:	40001800 	.word	0x40001800
 8006bc8:	40014000 	.word	0x40014000
 8006bcc:	00010007 	.word	0x00010007

08006bd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	f003 0302 	and.w	r3, r3, #2
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d020      	beq.n	8006c34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f003 0302 	and.w	r3, r3, #2
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d01b      	beq.n	8006c34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f06f 0202 	mvn.w	r2, #2
 8006c04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	f003 0303 	and.w	r3, r3, #3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f8e9 	bl	8006df2 <HAL_TIM_IC_CaptureCallback>
 8006c20:	e005      	b.n	8006c2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f8db 	bl	8006dde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f8ec 	bl	8006e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	f003 0304 	and.w	r3, r3, #4
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d020      	beq.n	8006c80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f003 0304 	and.w	r3, r3, #4
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d01b      	beq.n	8006c80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f06f 0204 	mvn.w	r2, #4
 8006c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2202      	movs	r2, #2
 8006c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d003      	beq.n	8006c6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f8c3 	bl	8006df2 <HAL_TIM_IC_CaptureCallback>
 8006c6c:	e005      	b.n	8006c7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f8b5 	bl	8006dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f8c6 	bl	8006e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	f003 0308 	and.w	r3, r3, #8
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d020      	beq.n	8006ccc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f003 0308 	and.w	r3, r3, #8
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d01b      	beq.n	8006ccc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f06f 0208 	mvn.w	r2, #8
 8006c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2204      	movs	r2, #4
 8006ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	f003 0303 	and.w	r3, r3, #3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d003      	beq.n	8006cba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f89d 	bl	8006df2 <HAL_TIM_IC_CaptureCallback>
 8006cb8:	e005      	b.n	8006cc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f88f 	bl	8006dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 f8a0 	bl	8006e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	f003 0310 	and.w	r3, r3, #16
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d020      	beq.n	8006d18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f003 0310 	and.w	r3, r3, #16
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d01b      	beq.n	8006d18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f06f 0210 	mvn.w	r2, #16
 8006ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2208      	movs	r2, #8
 8006cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	69db      	ldr	r3, [r3, #28]
 8006cf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d003      	beq.n	8006d06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f877 	bl	8006df2 <HAL_TIM_IC_CaptureCallback>
 8006d04:	e005      	b.n	8006d12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f869 	bl	8006dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f87a 	bl	8006e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00c      	beq.n	8006d3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d007      	beq.n	8006d3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f06f 0201 	mvn.w	r2, #1
 8006d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7f9 feaa 	bl	8000a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d104      	bne.n	8006d50 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00c      	beq.n	8006d6a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d007      	beq.n	8006d6a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f913 	bl	8006f90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00c      	beq.n	8006d8e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d007      	beq.n	8006d8e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 f90b 	bl	8006fa4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00c      	beq.n	8006db2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d007      	beq.n	8006db2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f834 	bl	8006e1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	f003 0320 	and.w	r3, r3, #32
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00c      	beq.n	8006dd6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f003 0320 	and.w	r3, r3, #32
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d007      	beq.n	8006dd6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f06f 0220 	mvn.w	r2, #32
 8006dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f8d3 	bl	8006f7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006dd6:	bf00      	nop
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b083      	sub	sp, #12
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006de6:	bf00      	nop
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b083      	sub	sp, #12
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006dfa:	bf00      	nop
 8006dfc:	370c      	adds	r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b083      	sub	sp, #12
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e0e:	bf00      	nop
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b083      	sub	sp, #12
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e22:	bf00      	nop
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
	...

08006e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a46      	ldr	r2, [pc, #280]	@ (8006f5c <TIM_Base_SetConfig+0x12c>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d013      	beq.n	8006e70 <TIM_Base_SetConfig+0x40>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e4e:	d00f      	beq.n	8006e70 <TIM_Base_SetConfig+0x40>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a43      	ldr	r2, [pc, #268]	@ (8006f60 <TIM_Base_SetConfig+0x130>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d00b      	beq.n	8006e70 <TIM_Base_SetConfig+0x40>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a42      	ldr	r2, [pc, #264]	@ (8006f64 <TIM_Base_SetConfig+0x134>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d007      	beq.n	8006e70 <TIM_Base_SetConfig+0x40>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a41      	ldr	r2, [pc, #260]	@ (8006f68 <TIM_Base_SetConfig+0x138>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d003      	beq.n	8006e70 <TIM_Base_SetConfig+0x40>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a40      	ldr	r2, [pc, #256]	@ (8006f6c <TIM_Base_SetConfig+0x13c>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d108      	bne.n	8006e82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a35      	ldr	r2, [pc, #212]	@ (8006f5c <TIM_Base_SetConfig+0x12c>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d01f      	beq.n	8006eca <TIM_Base_SetConfig+0x9a>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e90:	d01b      	beq.n	8006eca <TIM_Base_SetConfig+0x9a>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a32      	ldr	r2, [pc, #200]	@ (8006f60 <TIM_Base_SetConfig+0x130>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d017      	beq.n	8006eca <TIM_Base_SetConfig+0x9a>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a31      	ldr	r2, [pc, #196]	@ (8006f64 <TIM_Base_SetConfig+0x134>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d013      	beq.n	8006eca <TIM_Base_SetConfig+0x9a>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a30      	ldr	r2, [pc, #192]	@ (8006f68 <TIM_Base_SetConfig+0x138>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d00f      	beq.n	8006eca <TIM_Base_SetConfig+0x9a>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a2f      	ldr	r2, [pc, #188]	@ (8006f6c <TIM_Base_SetConfig+0x13c>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d00b      	beq.n	8006eca <TIM_Base_SetConfig+0x9a>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a2e      	ldr	r2, [pc, #184]	@ (8006f70 <TIM_Base_SetConfig+0x140>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d007      	beq.n	8006eca <TIM_Base_SetConfig+0x9a>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a2d      	ldr	r2, [pc, #180]	@ (8006f74 <TIM_Base_SetConfig+0x144>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d003      	beq.n	8006eca <TIM_Base_SetConfig+0x9a>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a2c      	ldr	r2, [pc, #176]	@ (8006f78 <TIM_Base_SetConfig+0x148>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d108      	bne.n	8006edc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	689a      	ldr	r2, [r3, #8]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a16      	ldr	r2, [pc, #88]	@ (8006f5c <TIM_Base_SetConfig+0x12c>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d00f      	beq.n	8006f28 <TIM_Base_SetConfig+0xf8>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a18      	ldr	r2, [pc, #96]	@ (8006f6c <TIM_Base_SetConfig+0x13c>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d00b      	beq.n	8006f28 <TIM_Base_SetConfig+0xf8>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a17      	ldr	r2, [pc, #92]	@ (8006f70 <TIM_Base_SetConfig+0x140>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d007      	beq.n	8006f28 <TIM_Base_SetConfig+0xf8>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a16      	ldr	r2, [pc, #88]	@ (8006f74 <TIM_Base_SetConfig+0x144>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d003      	beq.n	8006f28 <TIM_Base_SetConfig+0xf8>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a15      	ldr	r2, [pc, #84]	@ (8006f78 <TIM_Base_SetConfig+0x148>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d103      	bne.n	8006f30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	691a      	ldr	r2, [r3, #16]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d105      	bne.n	8006f4e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	f023 0201 	bic.w	r2, r3, #1
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	611a      	str	r2, [r3, #16]
  }
}
 8006f4e:	bf00      	nop
 8006f50:	3714      	adds	r7, #20
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	40010000 	.word	0x40010000
 8006f60:	40000400 	.word	0x40000400
 8006f64:	40000800 	.word	0x40000800
 8006f68:	40000c00 	.word	0x40000c00
 8006f6c:	40010400 	.word	0x40010400
 8006f70:	40014000 	.word	0x40014000
 8006f74:	40014400 	.word	0x40014400
 8006f78:	40014800 	.word	0x40014800

08006f7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e042      	b.n	8007050 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d106      	bne.n	8006fe2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f7f9 fd89 	bl	8000af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2224      	movs	r2, #36	@ 0x24
 8006fe6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f022 0201 	bic.w	r2, r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d002      	beq.n	8007008 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f001 f9f8 	bl	80083f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 fc8d 	bl	8007928 <UART_SetConfig>
 800700e:	4603      	mov	r3, r0
 8007010:	2b01      	cmp	r3, #1
 8007012:	d101      	bne.n	8007018 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e01b      	b.n	8007050 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007026:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689a      	ldr	r2, [r3, #8]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007036:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f042 0201 	orr.w	r2, r2, #1
 8007046:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f001 fa77 	bl	800853c <UART_CheckIdleState>
 800704e:	4603      	mov	r3, r0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3708      	adds	r7, #8
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b08a      	sub	sp, #40	@ 0x28
 800705c:	af02      	add	r7, sp, #8
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	603b      	str	r3, [r7, #0]
 8007064:	4613      	mov	r3, r2
 8007066:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800706e:	2b20      	cmp	r3, #32
 8007070:	d17b      	bne.n	800716a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <HAL_UART_Transmit+0x26>
 8007078:	88fb      	ldrh	r3, [r7, #6]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e074      	b.n	800716c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2221      	movs	r2, #33	@ 0x21
 800708e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007092:	f7fa f995 	bl	80013c0 <HAL_GetTick>
 8007096:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	88fa      	ldrh	r2, [r7, #6]
 800709c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	88fa      	ldrh	r2, [r7, #6]
 80070a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070b0:	d108      	bne.n	80070c4 <HAL_UART_Transmit+0x6c>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d104      	bne.n	80070c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80070ba:	2300      	movs	r3, #0
 80070bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	61bb      	str	r3, [r7, #24]
 80070c2:	e003      	b.n	80070cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070c8:	2300      	movs	r3, #0
 80070ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80070cc:	e030      	b.n	8007130 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	9300      	str	r3, [sp, #0]
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	2200      	movs	r2, #0
 80070d6:	2180      	movs	r1, #128	@ 0x80
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f001 fad9 	bl	8008690 <UART_WaitOnFlagUntilTimeout>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d005      	beq.n	80070f0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2220      	movs	r2, #32
 80070e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80070ec:	2303      	movs	r3, #3
 80070ee:	e03d      	b.n	800716c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10b      	bne.n	800710e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	461a      	mov	r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007104:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	3302      	adds	r3, #2
 800710a:	61bb      	str	r3, [r7, #24]
 800710c:	e007      	b.n	800711e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	781a      	ldrb	r2, [r3, #0]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	3301      	adds	r3, #1
 800711c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007124:	b29b      	uxth	r3, r3
 8007126:	3b01      	subs	r3, #1
 8007128:	b29a      	uxth	r2, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007136:	b29b      	uxth	r3, r3
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1c8      	bne.n	80070ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	2200      	movs	r2, #0
 8007144:	2140      	movs	r1, #64	@ 0x40
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f001 faa2 	bl	8008690 <UART_WaitOnFlagUntilTimeout>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d005      	beq.n	800715e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2220      	movs	r2, #32
 8007156:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e006      	b.n	800716c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2220      	movs	r2, #32
 8007162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007166:	2300      	movs	r3, #0
 8007168:	e000      	b.n	800716c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800716a:	2302      	movs	r3, #2
  }
}
 800716c:	4618      	mov	r0, r3
 800716e:	3720      	adds	r7, #32
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b0ba      	sub	sp, #232	@ 0xe8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	69db      	ldr	r3, [r3, #28]
 8007182:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800719a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800719e:	f640 030f 	movw	r3, #2063	@ 0x80f
 80071a2:	4013      	ands	r3, r2
 80071a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80071a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d11b      	bne.n	80071e8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80071b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071b4:	f003 0320 	and.w	r3, r3, #32
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d015      	beq.n	80071e8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80071bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071c0:	f003 0320 	and.w	r3, r3, #32
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d105      	bne.n	80071d4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80071c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d009      	beq.n	80071e8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f000 8377 	beq.w	80078cc <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	4798      	blx	r3
      }
      return;
 80071e6:	e371      	b.n	80078cc <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80071e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f000 8123 	beq.w	8007438 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80071f2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80071f6:	4b8d      	ldr	r3, [pc, #564]	@ (800742c <HAL_UART_IRQHandler+0x2b8>)
 80071f8:	4013      	ands	r3, r2
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d106      	bne.n	800720c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80071fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007202:	4b8b      	ldr	r3, [pc, #556]	@ (8007430 <HAL_UART_IRQHandler+0x2bc>)
 8007204:	4013      	ands	r3, r2
 8007206:	2b00      	cmp	r3, #0
 8007208:	f000 8116 	beq.w	8007438 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800720c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007210:	f003 0301 	and.w	r3, r3, #1
 8007214:	2b00      	cmp	r3, #0
 8007216:	d011      	beq.n	800723c <HAL_UART_IRQHandler+0xc8>
 8007218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800721c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00b      	beq.n	800723c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2201      	movs	r2, #1
 800722a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007232:	f043 0201 	orr.w	r2, r3, #1
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800723c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007240:	f003 0302 	and.w	r3, r3, #2
 8007244:	2b00      	cmp	r3, #0
 8007246:	d011      	beq.n	800726c <HAL_UART_IRQHandler+0xf8>
 8007248:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800724c:	f003 0301 	and.w	r3, r3, #1
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00b      	beq.n	800726c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2202      	movs	r2, #2
 800725a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007262:	f043 0204 	orr.w	r2, r3, #4
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800726c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007270:	f003 0304 	and.w	r3, r3, #4
 8007274:	2b00      	cmp	r3, #0
 8007276:	d011      	beq.n	800729c <HAL_UART_IRQHandler+0x128>
 8007278:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00b      	beq.n	800729c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2204      	movs	r2, #4
 800728a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007292:	f043 0202 	orr.w	r2, r3, #2
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800729c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072a0:	f003 0308 	and.w	r3, r3, #8
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d017      	beq.n	80072d8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80072a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072ac:	f003 0320 	and.w	r3, r3, #32
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d105      	bne.n	80072c0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80072b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80072b8:	4b5c      	ldr	r3, [pc, #368]	@ (800742c <HAL_UART_IRQHandler+0x2b8>)
 80072ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00b      	beq.n	80072d8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2208      	movs	r2, #8
 80072c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ce:	f043 0208 	orr.w	r2, r3, #8
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80072d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d012      	beq.n	800730a <HAL_UART_IRQHandler+0x196>
 80072e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00c      	beq.n	800730a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80072f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007300:	f043 0220 	orr.w	r2, r3, #32
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 82dd 	beq.w	80078d0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800731a:	f003 0320 	and.w	r3, r3, #32
 800731e:	2b00      	cmp	r3, #0
 8007320:	d013      	beq.n	800734a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007326:	f003 0320 	and.w	r3, r3, #32
 800732a:	2b00      	cmp	r3, #0
 800732c:	d105      	bne.n	800733a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800732e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007336:	2b00      	cmp	r3, #0
 8007338:	d007      	beq.n	800734a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800733e:	2b00      	cmp	r3, #0
 8007340:	d003      	beq.n	800734a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007350:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800735e:	2b40      	cmp	r3, #64	@ 0x40
 8007360:	d005      	beq.n	800736e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007362:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007366:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800736a:	2b00      	cmp	r3, #0
 800736c:	d054      	beq.n	8007418 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f001 f9fc 	bl	800876c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800737e:	2b40      	cmp	r3, #64	@ 0x40
 8007380:	d146      	bne.n	8007410 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3308      	adds	r3, #8
 8007388:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007390:	e853 3f00 	ldrex	r3, [r3]
 8007394:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007398:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800739c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	3308      	adds	r3, #8
 80073aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80073ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80073b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80073ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80073be:	e841 2300 	strex	r3, r2, [r1]
 80073c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80073c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1d9      	bne.n	8007382 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d017      	beq.n	8007408 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073de:	4a15      	ldr	r2, [pc, #84]	@ (8007434 <HAL_UART_IRQHandler+0x2c0>)
 80073e0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7fa fcaf 	bl	8001d4c <HAL_DMA_Abort_IT>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d019      	beq.n	8007428 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007402:	4610      	mov	r0, r2
 8007404:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007406:	e00f      	b.n	8007428 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 fa77 	bl	80078fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800740e:	e00b      	b.n	8007428 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 fa73 	bl	80078fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007416:	e007      	b.n	8007428 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fa6f 	bl	80078fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007426:	e253      	b.n	80078d0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007428:	bf00      	nop
    return;
 800742a:	e251      	b.n	80078d0 <HAL_UART_IRQHandler+0x75c>
 800742c:	10000001 	.word	0x10000001
 8007430:	04000120 	.word	0x04000120
 8007434:	08008839 	.word	0x08008839

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800743c:	2b01      	cmp	r3, #1
 800743e:	f040 81e7 	bne.w	8007810 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007446:	f003 0310 	and.w	r3, r3, #16
 800744a:	2b00      	cmp	r3, #0
 800744c:	f000 81e0 	beq.w	8007810 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007454:	f003 0310 	and.w	r3, r3, #16
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 81d9 	beq.w	8007810 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2210      	movs	r2, #16
 8007464:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007470:	2b40      	cmp	r3, #64	@ 0x40
 8007472:	f040 8151 	bne.w	8007718 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a96      	ldr	r2, [pc, #600]	@ (80076d8 <HAL_UART_IRQHandler+0x564>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d068      	beq.n	8007556 <HAL_UART_IRQHandler+0x3e2>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a93      	ldr	r2, [pc, #588]	@ (80076dc <HAL_UART_IRQHandler+0x568>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d061      	beq.n	8007556 <HAL_UART_IRQHandler+0x3e2>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a91      	ldr	r2, [pc, #580]	@ (80076e0 <HAL_UART_IRQHandler+0x56c>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d05a      	beq.n	8007556 <HAL_UART_IRQHandler+0x3e2>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a8e      	ldr	r2, [pc, #568]	@ (80076e4 <HAL_UART_IRQHandler+0x570>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d053      	beq.n	8007556 <HAL_UART_IRQHandler+0x3e2>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a8c      	ldr	r2, [pc, #560]	@ (80076e8 <HAL_UART_IRQHandler+0x574>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d04c      	beq.n	8007556 <HAL_UART_IRQHandler+0x3e2>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a89      	ldr	r2, [pc, #548]	@ (80076ec <HAL_UART_IRQHandler+0x578>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d045      	beq.n	8007556 <HAL_UART_IRQHandler+0x3e2>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a87      	ldr	r2, [pc, #540]	@ (80076f0 <HAL_UART_IRQHandler+0x57c>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d03e      	beq.n	8007556 <HAL_UART_IRQHandler+0x3e2>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a84      	ldr	r2, [pc, #528]	@ (80076f4 <HAL_UART_IRQHandler+0x580>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d037      	beq.n	8007556 <HAL_UART_IRQHandler+0x3e2>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a82      	ldr	r2, [pc, #520]	@ (80076f8 <HAL_UART_IRQHandler+0x584>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d030      	beq.n	8007556 <HAL_UART_IRQHandler+0x3e2>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a7f      	ldr	r2, [pc, #508]	@ (80076fc <HAL_UART_IRQHandler+0x588>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d029      	beq.n	8007556 <HAL_UART_IRQHandler+0x3e2>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a7d      	ldr	r2, [pc, #500]	@ (8007700 <HAL_UART_IRQHandler+0x58c>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d022      	beq.n	8007556 <HAL_UART_IRQHandler+0x3e2>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a7a      	ldr	r2, [pc, #488]	@ (8007704 <HAL_UART_IRQHandler+0x590>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d01b      	beq.n	8007556 <HAL_UART_IRQHandler+0x3e2>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a78      	ldr	r2, [pc, #480]	@ (8007708 <HAL_UART_IRQHandler+0x594>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d014      	beq.n	8007556 <HAL_UART_IRQHandler+0x3e2>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a75      	ldr	r2, [pc, #468]	@ (800770c <HAL_UART_IRQHandler+0x598>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d00d      	beq.n	8007556 <HAL_UART_IRQHandler+0x3e2>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a73      	ldr	r2, [pc, #460]	@ (8007710 <HAL_UART_IRQHandler+0x59c>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d006      	beq.n	8007556 <HAL_UART_IRQHandler+0x3e2>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a70      	ldr	r2, [pc, #448]	@ (8007714 <HAL_UART_IRQHandler+0x5a0>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d106      	bne.n	8007564 <HAL_UART_IRQHandler+0x3f0>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	b29b      	uxth	r3, r3
 8007562:	e005      	b.n	8007570 <HAL_UART_IRQHandler+0x3fc>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	b29b      	uxth	r3, r3
 8007570:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007574:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 81ab 	beq.w	80078d4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007584:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007588:	429a      	cmp	r2, r3
 800758a:	f080 81a3 	bcs.w	80078d4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007594:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800759e:	69db      	ldr	r3, [r3, #28]
 80075a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075a4:	f000 8087 	beq.w	80076b6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80075b4:	e853 3f00 	ldrex	r3, [r3]
 80075b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80075bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80075c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	461a      	mov	r2, r3
 80075ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80075d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80075d6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80075de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80075e2:	e841 2300 	strex	r3, r2, [r1]
 80075e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80075ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1da      	bne.n	80075a8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	3308      	adds	r3, #8
 80075f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80075fc:	e853 3f00 	ldrex	r3, [r3]
 8007600:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007602:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007604:	f023 0301 	bic.w	r3, r3, #1
 8007608:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	3308      	adds	r3, #8
 8007612:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007616:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800761a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800761e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007622:	e841 2300 	strex	r3, r2, [r1]
 8007626:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007628:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1e1      	bne.n	80075f2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	3308      	adds	r3, #8
 8007634:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007636:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007638:	e853 3f00 	ldrex	r3, [r3]
 800763c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800763e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007640:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007644:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	3308      	adds	r3, #8
 800764e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007652:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007654:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007656:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007658:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800765a:	e841 2300 	strex	r3, r2, [r1]
 800765e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007660:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1e3      	bne.n	800762e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2220      	movs	r2, #32
 800766a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800767c:	e853 3f00 	ldrex	r3, [r3]
 8007680:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007682:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007684:	f023 0310 	bic.w	r3, r3, #16
 8007688:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	461a      	mov	r2, r3
 8007692:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007696:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007698:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800769c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800769e:	e841 2300 	strex	r3, r2, [r1]
 80076a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80076a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1e4      	bne.n	8007674 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7fa f82d 	bl	8001710 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2202      	movs	r2, #2
 80076ba:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	4619      	mov	r1, r3
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f91d 	bl	8007910 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80076d6:	e0fd      	b.n	80078d4 <HAL_UART_IRQHandler+0x760>
 80076d8:	40020010 	.word	0x40020010
 80076dc:	40020028 	.word	0x40020028
 80076e0:	40020040 	.word	0x40020040
 80076e4:	40020058 	.word	0x40020058
 80076e8:	40020070 	.word	0x40020070
 80076ec:	40020088 	.word	0x40020088
 80076f0:	400200a0 	.word	0x400200a0
 80076f4:	400200b8 	.word	0x400200b8
 80076f8:	40020410 	.word	0x40020410
 80076fc:	40020428 	.word	0x40020428
 8007700:	40020440 	.word	0x40020440
 8007704:	40020458 	.word	0x40020458
 8007708:	40020470 	.word	0x40020470
 800770c:	40020488 	.word	0x40020488
 8007710:	400204a0 	.word	0x400204a0
 8007714:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007724:	b29b      	uxth	r3, r3
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007732:	b29b      	uxth	r3, r3
 8007734:	2b00      	cmp	r3, #0
 8007736:	f000 80cf 	beq.w	80078d8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800773a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800773e:	2b00      	cmp	r3, #0
 8007740:	f000 80ca 	beq.w	80078d8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800774c:	e853 3f00 	ldrex	r3, [r3]
 8007750:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007754:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007758:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	461a      	mov	r2, r3
 8007762:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007766:	647b      	str	r3, [r7, #68]	@ 0x44
 8007768:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800776c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800776e:	e841 2300 	strex	r3, r2, [r1]
 8007772:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007776:	2b00      	cmp	r3, #0
 8007778:	d1e4      	bne.n	8007744 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	3308      	adds	r3, #8
 8007780:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007784:	e853 3f00 	ldrex	r3, [r3]
 8007788:	623b      	str	r3, [r7, #32]
   return(result);
 800778a:	6a3a      	ldr	r2, [r7, #32]
 800778c:	4b55      	ldr	r3, [pc, #340]	@ (80078e4 <HAL_UART_IRQHandler+0x770>)
 800778e:	4013      	ands	r3, r2
 8007790:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	3308      	adds	r3, #8
 800779a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800779e:	633a      	str	r2, [r7, #48]	@ 0x30
 80077a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077a6:	e841 2300 	strex	r3, r2, [r1]
 80077aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1e3      	bne.n	800777a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2220      	movs	r2, #32
 80077b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	e853 3f00 	ldrex	r3, [r3]
 80077d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f023 0310 	bic.w	r3, r3, #16
 80077da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	461a      	mov	r2, r3
 80077e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80077e8:	61fb      	str	r3, [r7, #28]
 80077ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ec:	69b9      	ldr	r1, [r7, #24]
 80077ee:	69fa      	ldr	r2, [r7, #28]
 80077f0:	e841 2300 	strex	r3, r2, [r1]
 80077f4:	617b      	str	r3, [r7, #20]
   return(result);
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1e4      	bne.n	80077c6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2202      	movs	r2, #2
 8007800:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007802:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007806:	4619      	mov	r1, r3
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f881 	bl	8007910 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800780e:	e063      	b.n	80078d8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007814:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00e      	beq.n	800783a <HAL_UART_IRQHandler+0x6c6>
 800781c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007820:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d008      	beq.n	800783a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007830:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f001 f841 	bl	80088ba <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007838:	e051      	b.n	80078de <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800783a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800783e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007842:	2b00      	cmp	r3, #0
 8007844:	d014      	beq.n	8007870 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800784a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800784e:	2b00      	cmp	r3, #0
 8007850:	d105      	bne.n	800785e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007856:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800785a:	2b00      	cmp	r3, #0
 800785c:	d008      	beq.n	8007870 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007862:	2b00      	cmp	r3, #0
 8007864:	d03a      	beq.n	80078dc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	4798      	blx	r3
    }
    return;
 800786e:	e035      	b.n	80078dc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007878:	2b00      	cmp	r3, #0
 800787a:	d009      	beq.n	8007890 <HAL_UART_IRQHandler+0x71c>
 800787c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007884:	2b00      	cmp	r3, #0
 8007886:	d003      	beq.n	8007890 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 ffeb 	bl	8008864 <UART_EndTransmit_IT>
    return;
 800788e:	e026      	b.n	80078de <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007894:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007898:	2b00      	cmp	r3, #0
 800789a:	d009      	beq.n	80078b0 <HAL_UART_IRQHandler+0x73c>
 800789c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078a0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d003      	beq.n	80078b0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f001 f81a 	bl	80088e2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078ae:	e016      	b.n	80078de <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80078b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d010      	beq.n	80078de <HAL_UART_IRQHandler+0x76a>
 80078bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	da0c      	bge.n	80078de <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f001 f802 	bl	80088ce <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078ca:	e008      	b.n	80078de <HAL_UART_IRQHandler+0x76a>
      return;
 80078cc:	bf00      	nop
 80078ce:	e006      	b.n	80078de <HAL_UART_IRQHandler+0x76a>
    return;
 80078d0:	bf00      	nop
 80078d2:	e004      	b.n	80078de <HAL_UART_IRQHandler+0x76a>
      return;
 80078d4:	bf00      	nop
 80078d6:	e002      	b.n	80078de <HAL_UART_IRQHandler+0x76a>
      return;
 80078d8:	bf00      	nop
 80078da:	e000      	b.n	80078de <HAL_UART_IRQHandler+0x76a>
    return;
 80078dc:	bf00      	nop
  }
}
 80078de:	37e8      	adds	r7, #232	@ 0xe8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	effffffe 	.word	0xeffffffe

080078e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80078f0:	bf00      	nop
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	460b      	mov	r3, r1
 800791a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800791c:	bf00      	nop
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800792c:	b092      	sub	sp, #72	@ 0x48
 800792e:	af00      	add	r7, sp, #0
 8007930:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007932:	2300      	movs	r3, #0
 8007934:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	689a      	ldr	r2, [r3, #8]
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	431a      	orrs	r2, r3
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	695b      	ldr	r3, [r3, #20]
 8007946:	431a      	orrs	r2, r3
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	69db      	ldr	r3, [r3, #28]
 800794c:	4313      	orrs	r3, r2
 800794e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	4bbe      	ldr	r3, [pc, #760]	@ (8007c50 <UART_SetConfig+0x328>)
 8007958:	4013      	ands	r3, r2
 800795a:	697a      	ldr	r2, [r7, #20]
 800795c:	6812      	ldr	r2, [r2, #0]
 800795e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007960:	430b      	orrs	r3, r1
 8007962:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	68da      	ldr	r2, [r3, #12]
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	430a      	orrs	r2, r1
 8007978:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4ab3      	ldr	r2, [pc, #716]	@ (8007c54 <UART_SetConfig+0x32c>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d004      	beq.n	8007994 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007990:	4313      	orrs	r3, r2
 8007992:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689a      	ldr	r2, [r3, #8]
 800799a:	4baf      	ldr	r3, [pc, #700]	@ (8007c58 <UART_SetConfig+0x330>)
 800799c:	4013      	ands	r3, r2
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	6812      	ldr	r2, [r2, #0]
 80079a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80079a4:	430b      	orrs	r3, r1
 80079a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ae:	f023 010f 	bic.w	r1, r3, #15
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	430a      	orrs	r2, r1
 80079bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4aa6      	ldr	r2, [pc, #664]	@ (8007c5c <UART_SetConfig+0x334>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d177      	bne.n	8007ab8 <UART_SetConfig+0x190>
 80079c8:	4ba5      	ldr	r3, [pc, #660]	@ (8007c60 <UART_SetConfig+0x338>)
 80079ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80079d0:	2b28      	cmp	r3, #40	@ 0x28
 80079d2:	d86d      	bhi.n	8007ab0 <UART_SetConfig+0x188>
 80079d4:	a201      	add	r2, pc, #4	@ (adr r2, 80079dc <UART_SetConfig+0xb4>)
 80079d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079da:	bf00      	nop
 80079dc:	08007a81 	.word	0x08007a81
 80079e0:	08007ab1 	.word	0x08007ab1
 80079e4:	08007ab1 	.word	0x08007ab1
 80079e8:	08007ab1 	.word	0x08007ab1
 80079ec:	08007ab1 	.word	0x08007ab1
 80079f0:	08007ab1 	.word	0x08007ab1
 80079f4:	08007ab1 	.word	0x08007ab1
 80079f8:	08007ab1 	.word	0x08007ab1
 80079fc:	08007a89 	.word	0x08007a89
 8007a00:	08007ab1 	.word	0x08007ab1
 8007a04:	08007ab1 	.word	0x08007ab1
 8007a08:	08007ab1 	.word	0x08007ab1
 8007a0c:	08007ab1 	.word	0x08007ab1
 8007a10:	08007ab1 	.word	0x08007ab1
 8007a14:	08007ab1 	.word	0x08007ab1
 8007a18:	08007ab1 	.word	0x08007ab1
 8007a1c:	08007a91 	.word	0x08007a91
 8007a20:	08007ab1 	.word	0x08007ab1
 8007a24:	08007ab1 	.word	0x08007ab1
 8007a28:	08007ab1 	.word	0x08007ab1
 8007a2c:	08007ab1 	.word	0x08007ab1
 8007a30:	08007ab1 	.word	0x08007ab1
 8007a34:	08007ab1 	.word	0x08007ab1
 8007a38:	08007ab1 	.word	0x08007ab1
 8007a3c:	08007a99 	.word	0x08007a99
 8007a40:	08007ab1 	.word	0x08007ab1
 8007a44:	08007ab1 	.word	0x08007ab1
 8007a48:	08007ab1 	.word	0x08007ab1
 8007a4c:	08007ab1 	.word	0x08007ab1
 8007a50:	08007ab1 	.word	0x08007ab1
 8007a54:	08007ab1 	.word	0x08007ab1
 8007a58:	08007ab1 	.word	0x08007ab1
 8007a5c:	08007aa1 	.word	0x08007aa1
 8007a60:	08007ab1 	.word	0x08007ab1
 8007a64:	08007ab1 	.word	0x08007ab1
 8007a68:	08007ab1 	.word	0x08007ab1
 8007a6c:	08007ab1 	.word	0x08007ab1
 8007a70:	08007ab1 	.word	0x08007ab1
 8007a74:	08007ab1 	.word	0x08007ab1
 8007a78:	08007ab1 	.word	0x08007ab1
 8007a7c:	08007aa9 	.word	0x08007aa9
 8007a80:	2301      	movs	r3, #1
 8007a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a86:	e222      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007a88:	2304      	movs	r3, #4
 8007a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a8e:	e21e      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007a90:	2308      	movs	r3, #8
 8007a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a96:	e21a      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007a98:	2310      	movs	r3, #16
 8007a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a9e:	e216      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007aa0:	2320      	movs	r3, #32
 8007aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aa6:	e212      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007aa8:	2340      	movs	r3, #64	@ 0x40
 8007aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aae:	e20e      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007ab0:	2380      	movs	r3, #128	@ 0x80
 8007ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ab6:	e20a      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a69      	ldr	r2, [pc, #420]	@ (8007c64 <UART_SetConfig+0x33c>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d130      	bne.n	8007b24 <UART_SetConfig+0x1fc>
 8007ac2:	4b67      	ldr	r3, [pc, #412]	@ (8007c60 <UART_SetConfig+0x338>)
 8007ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ac6:	f003 0307 	and.w	r3, r3, #7
 8007aca:	2b05      	cmp	r3, #5
 8007acc:	d826      	bhi.n	8007b1c <UART_SetConfig+0x1f4>
 8007ace:	a201      	add	r2, pc, #4	@ (adr r2, 8007ad4 <UART_SetConfig+0x1ac>)
 8007ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad4:	08007aed 	.word	0x08007aed
 8007ad8:	08007af5 	.word	0x08007af5
 8007adc:	08007afd 	.word	0x08007afd
 8007ae0:	08007b05 	.word	0x08007b05
 8007ae4:	08007b0d 	.word	0x08007b0d
 8007ae8:	08007b15 	.word	0x08007b15
 8007aec:	2300      	movs	r3, #0
 8007aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007af2:	e1ec      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007af4:	2304      	movs	r3, #4
 8007af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007afa:	e1e8      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007afc:	2308      	movs	r3, #8
 8007afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b02:	e1e4      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007b04:	2310      	movs	r3, #16
 8007b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b0a:	e1e0      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007b0c:	2320      	movs	r3, #32
 8007b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b12:	e1dc      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007b14:	2340      	movs	r3, #64	@ 0x40
 8007b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b1a:	e1d8      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007b1c:	2380      	movs	r3, #128	@ 0x80
 8007b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b22:	e1d4      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a4f      	ldr	r2, [pc, #316]	@ (8007c68 <UART_SetConfig+0x340>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d130      	bne.n	8007b90 <UART_SetConfig+0x268>
 8007b2e:	4b4c      	ldr	r3, [pc, #304]	@ (8007c60 <UART_SetConfig+0x338>)
 8007b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b32:	f003 0307 	and.w	r3, r3, #7
 8007b36:	2b05      	cmp	r3, #5
 8007b38:	d826      	bhi.n	8007b88 <UART_SetConfig+0x260>
 8007b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b40 <UART_SetConfig+0x218>)
 8007b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b40:	08007b59 	.word	0x08007b59
 8007b44:	08007b61 	.word	0x08007b61
 8007b48:	08007b69 	.word	0x08007b69
 8007b4c:	08007b71 	.word	0x08007b71
 8007b50:	08007b79 	.word	0x08007b79
 8007b54:	08007b81 	.word	0x08007b81
 8007b58:	2300      	movs	r3, #0
 8007b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b5e:	e1b6      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007b60:	2304      	movs	r3, #4
 8007b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b66:	e1b2      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007b68:	2308      	movs	r3, #8
 8007b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b6e:	e1ae      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007b70:	2310      	movs	r3, #16
 8007b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b76:	e1aa      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007b78:	2320      	movs	r3, #32
 8007b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b7e:	e1a6      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007b80:	2340      	movs	r3, #64	@ 0x40
 8007b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b86:	e1a2      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007b88:	2380      	movs	r3, #128	@ 0x80
 8007b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b8e:	e19e      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a35      	ldr	r2, [pc, #212]	@ (8007c6c <UART_SetConfig+0x344>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d130      	bne.n	8007bfc <UART_SetConfig+0x2d4>
 8007b9a:	4b31      	ldr	r3, [pc, #196]	@ (8007c60 <UART_SetConfig+0x338>)
 8007b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b9e:	f003 0307 	and.w	r3, r3, #7
 8007ba2:	2b05      	cmp	r3, #5
 8007ba4:	d826      	bhi.n	8007bf4 <UART_SetConfig+0x2cc>
 8007ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8007bac <UART_SetConfig+0x284>)
 8007ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bac:	08007bc5 	.word	0x08007bc5
 8007bb0:	08007bcd 	.word	0x08007bcd
 8007bb4:	08007bd5 	.word	0x08007bd5
 8007bb8:	08007bdd 	.word	0x08007bdd
 8007bbc:	08007be5 	.word	0x08007be5
 8007bc0:	08007bed 	.word	0x08007bed
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bca:	e180      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007bcc:	2304      	movs	r3, #4
 8007bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bd2:	e17c      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007bd4:	2308      	movs	r3, #8
 8007bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bda:	e178      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007bdc:	2310      	movs	r3, #16
 8007bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007be2:	e174      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007be4:	2320      	movs	r3, #32
 8007be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bea:	e170      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007bec:	2340      	movs	r3, #64	@ 0x40
 8007bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bf2:	e16c      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007bf4:	2380      	movs	r3, #128	@ 0x80
 8007bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bfa:	e168      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a1b      	ldr	r2, [pc, #108]	@ (8007c70 <UART_SetConfig+0x348>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d142      	bne.n	8007c8c <UART_SetConfig+0x364>
 8007c06:	4b16      	ldr	r3, [pc, #88]	@ (8007c60 <UART_SetConfig+0x338>)
 8007c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c0a:	f003 0307 	and.w	r3, r3, #7
 8007c0e:	2b05      	cmp	r3, #5
 8007c10:	d838      	bhi.n	8007c84 <UART_SetConfig+0x35c>
 8007c12:	a201      	add	r2, pc, #4	@ (adr r2, 8007c18 <UART_SetConfig+0x2f0>)
 8007c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c18:	08007c31 	.word	0x08007c31
 8007c1c:	08007c39 	.word	0x08007c39
 8007c20:	08007c41 	.word	0x08007c41
 8007c24:	08007c49 	.word	0x08007c49
 8007c28:	08007c75 	.word	0x08007c75
 8007c2c:	08007c7d 	.word	0x08007c7d
 8007c30:	2300      	movs	r3, #0
 8007c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c36:	e14a      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007c38:	2304      	movs	r3, #4
 8007c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c3e:	e146      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007c40:	2308      	movs	r3, #8
 8007c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c46:	e142      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007c48:	2310      	movs	r3, #16
 8007c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c4e:	e13e      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007c50:	cfff69f3 	.word	0xcfff69f3
 8007c54:	58000c00 	.word	0x58000c00
 8007c58:	11fff4ff 	.word	0x11fff4ff
 8007c5c:	40011000 	.word	0x40011000
 8007c60:	58024400 	.word	0x58024400
 8007c64:	40004400 	.word	0x40004400
 8007c68:	40004800 	.word	0x40004800
 8007c6c:	40004c00 	.word	0x40004c00
 8007c70:	40005000 	.word	0x40005000
 8007c74:	2320      	movs	r3, #32
 8007c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c7a:	e128      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007c7c:	2340      	movs	r3, #64	@ 0x40
 8007c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c82:	e124      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007c84:	2380      	movs	r3, #128	@ 0x80
 8007c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c8a:	e120      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4acb      	ldr	r2, [pc, #812]	@ (8007fc0 <UART_SetConfig+0x698>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d176      	bne.n	8007d84 <UART_SetConfig+0x45c>
 8007c96:	4bcb      	ldr	r3, [pc, #812]	@ (8007fc4 <UART_SetConfig+0x69c>)
 8007c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c9e:	2b28      	cmp	r3, #40	@ 0x28
 8007ca0:	d86c      	bhi.n	8007d7c <UART_SetConfig+0x454>
 8007ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ca8 <UART_SetConfig+0x380>)
 8007ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca8:	08007d4d 	.word	0x08007d4d
 8007cac:	08007d7d 	.word	0x08007d7d
 8007cb0:	08007d7d 	.word	0x08007d7d
 8007cb4:	08007d7d 	.word	0x08007d7d
 8007cb8:	08007d7d 	.word	0x08007d7d
 8007cbc:	08007d7d 	.word	0x08007d7d
 8007cc0:	08007d7d 	.word	0x08007d7d
 8007cc4:	08007d7d 	.word	0x08007d7d
 8007cc8:	08007d55 	.word	0x08007d55
 8007ccc:	08007d7d 	.word	0x08007d7d
 8007cd0:	08007d7d 	.word	0x08007d7d
 8007cd4:	08007d7d 	.word	0x08007d7d
 8007cd8:	08007d7d 	.word	0x08007d7d
 8007cdc:	08007d7d 	.word	0x08007d7d
 8007ce0:	08007d7d 	.word	0x08007d7d
 8007ce4:	08007d7d 	.word	0x08007d7d
 8007ce8:	08007d5d 	.word	0x08007d5d
 8007cec:	08007d7d 	.word	0x08007d7d
 8007cf0:	08007d7d 	.word	0x08007d7d
 8007cf4:	08007d7d 	.word	0x08007d7d
 8007cf8:	08007d7d 	.word	0x08007d7d
 8007cfc:	08007d7d 	.word	0x08007d7d
 8007d00:	08007d7d 	.word	0x08007d7d
 8007d04:	08007d7d 	.word	0x08007d7d
 8007d08:	08007d65 	.word	0x08007d65
 8007d0c:	08007d7d 	.word	0x08007d7d
 8007d10:	08007d7d 	.word	0x08007d7d
 8007d14:	08007d7d 	.word	0x08007d7d
 8007d18:	08007d7d 	.word	0x08007d7d
 8007d1c:	08007d7d 	.word	0x08007d7d
 8007d20:	08007d7d 	.word	0x08007d7d
 8007d24:	08007d7d 	.word	0x08007d7d
 8007d28:	08007d6d 	.word	0x08007d6d
 8007d2c:	08007d7d 	.word	0x08007d7d
 8007d30:	08007d7d 	.word	0x08007d7d
 8007d34:	08007d7d 	.word	0x08007d7d
 8007d38:	08007d7d 	.word	0x08007d7d
 8007d3c:	08007d7d 	.word	0x08007d7d
 8007d40:	08007d7d 	.word	0x08007d7d
 8007d44:	08007d7d 	.word	0x08007d7d
 8007d48:	08007d75 	.word	0x08007d75
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d52:	e0bc      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007d54:	2304      	movs	r3, #4
 8007d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d5a:	e0b8      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007d5c:	2308      	movs	r3, #8
 8007d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d62:	e0b4      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007d64:	2310      	movs	r3, #16
 8007d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d6a:	e0b0      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007d6c:	2320      	movs	r3, #32
 8007d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d72:	e0ac      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007d74:	2340      	movs	r3, #64	@ 0x40
 8007d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d7a:	e0a8      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007d7c:	2380      	movs	r3, #128	@ 0x80
 8007d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d82:	e0a4      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a8f      	ldr	r2, [pc, #572]	@ (8007fc8 <UART_SetConfig+0x6a0>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d130      	bne.n	8007df0 <UART_SetConfig+0x4c8>
 8007d8e:	4b8d      	ldr	r3, [pc, #564]	@ (8007fc4 <UART_SetConfig+0x69c>)
 8007d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d92:	f003 0307 	and.w	r3, r3, #7
 8007d96:	2b05      	cmp	r3, #5
 8007d98:	d826      	bhi.n	8007de8 <UART_SetConfig+0x4c0>
 8007d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007da0 <UART_SetConfig+0x478>)
 8007d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da0:	08007db9 	.word	0x08007db9
 8007da4:	08007dc1 	.word	0x08007dc1
 8007da8:	08007dc9 	.word	0x08007dc9
 8007dac:	08007dd1 	.word	0x08007dd1
 8007db0:	08007dd9 	.word	0x08007dd9
 8007db4:	08007de1 	.word	0x08007de1
 8007db8:	2300      	movs	r3, #0
 8007dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dbe:	e086      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007dc0:	2304      	movs	r3, #4
 8007dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dc6:	e082      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007dc8:	2308      	movs	r3, #8
 8007dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dce:	e07e      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007dd0:	2310      	movs	r3, #16
 8007dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dd6:	e07a      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007dd8:	2320      	movs	r3, #32
 8007dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dde:	e076      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007de0:	2340      	movs	r3, #64	@ 0x40
 8007de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007de6:	e072      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007de8:	2380      	movs	r3, #128	@ 0x80
 8007dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dee:	e06e      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a75      	ldr	r2, [pc, #468]	@ (8007fcc <UART_SetConfig+0x6a4>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d130      	bne.n	8007e5c <UART_SetConfig+0x534>
 8007dfa:	4b72      	ldr	r3, [pc, #456]	@ (8007fc4 <UART_SetConfig+0x69c>)
 8007dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dfe:	f003 0307 	and.w	r3, r3, #7
 8007e02:	2b05      	cmp	r3, #5
 8007e04:	d826      	bhi.n	8007e54 <UART_SetConfig+0x52c>
 8007e06:	a201      	add	r2, pc, #4	@ (adr r2, 8007e0c <UART_SetConfig+0x4e4>)
 8007e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0c:	08007e25 	.word	0x08007e25
 8007e10:	08007e2d 	.word	0x08007e2d
 8007e14:	08007e35 	.word	0x08007e35
 8007e18:	08007e3d 	.word	0x08007e3d
 8007e1c:	08007e45 	.word	0x08007e45
 8007e20:	08007e4d 	.word	0x08007e4d
 8007e24:	2300      	movs	r3, #0
 8007e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e2a:	e050      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007e2c:	2304      	movs	r3, #4
 8007e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e32:	e04c      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007e34:	2308      	movs	r3, #8
 8007e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e3a:	e048      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007e3c:	2310      	movs	r3, #16
 8007e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e42:	e044      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007e44:	2320      	movs	r3, #32
 8007e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e4a:	e040      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007e4c:	2340      	movs	r3, #64	@ 0x40
 8007e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e52:	e03c      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007e54:	2380      	movs	r3, #128	@ 0x80
 8007e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e5a:	e038      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a5b      	ldr	r2, [pc, #364]	@ (8007fd0 <UART_SetConfig+0x6a8>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d130      	bne.n	8007ec8 <UART_SetConfig+0x5a0>
 8007e66:	4b57      	ldr	r3, [pc, #348]	@ (8007fc4 <UART_SetConfig+0x69c>)
 8007e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e6a:	f003 0307 	and.w	r3, r3, #7
 8007e6e:	2b05      	cmp	r3, #5
 8007e70:	d826      	bhi.n	8007ec0 <UART_SetConfig+0x598>
 8007e72:	a201      	add	r2, pc, #4	@ (adr r2, 8007e78 <UART_SetConfig+0x550>)
 8007e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e78:	08007e91 	.word	0x08007e91
 8007e7c:	08007e99 	.word	0x08007e99
 8007e80:	08007ea1 	.word	0x08007ea1
 8007e84:	08007ea9 	.word	0x08007ea9
 8007e88:	08007eb1 	.word	0x08007eb1
 8007e8c:	08007eb9 	.word	0x08007eb9
 8007e90:	2302      	movs	r3, #2
 8007e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e96:	e01a      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007e98:	2304      	movs	r3, #4
 8007e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e9e:	e016      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007ea0:	2308      	movs	r3, #8
 8007ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ea6:	e012      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007ea8:	2310      	movs	r3, #16
 8007eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eae:	e00e      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007eb0:	2320      	movs	r3, #32
 8007eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eb6:	e00a      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007eb8:	2340      	movs	r3, #64	@ 0x40
 8007eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ebe:	e006      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007ec0:	2380      	movs	r3, #128	@ 0x80
 8007ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ec6:	e002      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007ec8:	2380      	movs	r3, #128	@ 0x80
 8007eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a3f      	ldr	r2, [pc, #252]	@ (8007fd0 <UART_SetConfig+0x6a8>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	f040 80f8 	bne.w	80080ca <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007eda:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007ede:	2b20      	cmp	r3, #32
 8007ee0:	dc46      	bgt.n	8007f70 <UART_SetConfig+0x648>
 8007ee2:	2b02      	cmp	r3, #2
 8007ee4:	f2c0 8082 	blt.w	8007fec <UART_SetConfig+0x6c4>
 8007ee8:	3b02      	subs	r3, #2
 8007eea:	2b1e      	cmp	r3, #30
 8007eec:	d87e      	bhi.n	8007fec <UART_SetConfig+0x6c4>
 8007eee:	a201      	add	r2, pc, #4	@ (adr r2, 8007ef4 <UART_SetConfig+0x5cc>)
 8007ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef4:	08007f77 	.word	0x08007f77
 8007ef8:	08007fed 	.word	0x08007fed
 8007efc:	08007f7f 	.word	0x08007f7f
 8007f00:	08007fed 	.word	0x08007fed
 8007f04:	08007fed 	.word	0x08007fed
 8007f08:	08007fed 	.word	0x08007fed
 8007f0c:	08007f8f 	.word	0x08007f8f
 8007f10:	08007fed 	.word	0x08007fed
 8007f14:	08007fed 	.word	0x08007fed
 8007f18:	08007fed 	.word	0x08007fed
 8007f1c:	08007fed 	.word	0x08007fed
 8007f20:	08007fed 	.word	0x08007fed
 8007f24:	08007fed 	.word	0x08007fed
 8007f28:	08007fed 	.word	0x08007fed
 8007f2c:	08007f9f 	.word	0x08007f9f
 8007f30:	08007fed 	.word	0x08007fed
 8007f34:	08007fed 	.word	0x08007fed
 8007f38:	08007fed 	.word	0x08007fed
 8007f3c:	08007fed 	.word	0x08007fed
 8007f40:	08007fed 	.word	0x08007fed
 8007f44:	08007fed 	.word	0x08007fed
 8007f48:	08007fed 	.word	0x08007fed
 8007f4c:	08007fed 	.word	0x08007fed
 8007f50:	08007fed 	.word	0x08007fed
 8007f54:	08007fed 	.word	0x08007fed
 8007f58:	08007fed 	.word	0x08007fed
 8007f5c:	08007fed 	.word	0x08007fed
 8007f60:	08007fed 	.word	0x08007fed
 8007f64:	08007fed 	.word	0x08007fed
 8007f68:	08007fed 	.word	0x08007fed
 8007f6c:	08007fdf 	.word	0x08007fdf
 8007f70:	2b40      	cmp	r3, #64	@ 0x40
 8007f72:	d037      	beq.n	8007fe4 <UART_SetConfig+0x6bc>
 8007f74:	e03a      	b.n	8007fec <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007f76:	f7fe f92f 	bl	80061d8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007f7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007f7c:	e03c      	b.n	8007ff8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fe f93e 	bl	8006204 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f8c:	e034      	b.n	8007ff8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f8e:	f107 0318 	add.w	r3, r7, #24
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fe fa8a 	bl	80064ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f9c:	e02c      	b.n	8007ff8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f9e:	4b09      	ldr	r3, [pc, #36]	@ (8007fc4 <UART_SetConfig+0x69c>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 0320 	and.w	r3, r3, #32
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d016      	beq.n	8007fd8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007faa:	4b06      	ldr	r3, [pc, #24]	@ (8007fc4 <UART_SetConfig+0x69c>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	08db      	lsrs	r3, r3, #3
 8007fb0:	f003 0303 	and.w	r3, r3, #3
 8007fb4:	4a07      	ldr	r2, [pc, #28]	@ (8007fd4 <UART_SetConfig+0x6ac>)
 8007fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8007fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007fbc:	e01c      	b.n	8007ff8 <UART_SetConfig+0x6d0>
 8007fbe:	bf00      	nop
 8007fc0:	40011400 	.word	0x40011400
 8007fc4:	58024400 	.word	0x58024400
 8007fc8:	40007800 	.word	0x40007800
 8007fcc:	40007c00 	.word	0x40007c00
 8007fd0:	58000c00 	.word	0x58000c00
 8007fd4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007fd8:	4b9d      	ldr	r3, [pc, #628]	@ (8008250 <UART_SetConfig+0x928>)
 8007fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fdc:	e00c      	b.n	8007ff8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007fde:	4b9d      	ldr	r3, [pc, #628]	@ (8008254 <UART_SetConfig+0x92c>)
 8007fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fe2:	e009      	b.n	8007ff8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fe4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fea:	e005      	b.n	8007ff8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007fec:	2300      	movs	r3, #0
 8007fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007ff6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	f000 81de 	beq.w	80083bc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008004:	4a94      	ldr	r2, [pc, #592]	@ (8008258 <UART_SetConfig+0x930>)
 8008006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800800a:	461a      	mov	r2, r3
 800800c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800800e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008012:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	4613      	mov	r3, r2
 800801a:	005b      	lsls	r3, r3, #1
 800801c:	4413      	add	r3, r2
 800801e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008020:	429a      	cmp	r2, r3
 8008022:	d305      	bcc.n	8008030 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800802a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800802c:	429a      	cmp	r2, r3
 800802e:	d903      	bls.n	8008038 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008036:	e1c1      	b.n	80083bc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800803a:	2200      	movs	r2, #0
 800803c:	60bb      	str	r3, [r7, #8]
 800803e:	60fa      	str	r2, [r7, #12]
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008044:	4a84      	ldr	r2, [pc, #528]	@ (8008258 <UART_SetConfig+0x930>)
 8008046:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800804a:	b29b      	uxth	r3, r3
 800804c:	2200      	movs	r2, #0
 800804e:	603b      	str	r3, [r7, #0]
 8008050:	607a      	str	r2, [r7, #4]
 8008052:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008056:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800805a:	f7f8 f991 	bl	8000380 <__aeabi_uldivmod>
 800805e:	4602      	mov	r2, r0
 8008060:	460b      	mov	r3, r1
 8008062:	4610      	mov	r0, r2
 8008064:	4619      	mov	r1, r3
 8008066:	f04f 0200 	mov.w	r2, #0
 800806a:	f04f 0300 	mov.w	r3, #0
 800806e:	020b      	lsls	r3, r1, #8
 8008070:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008074:	0202      	lsls	r2, r0, #8
 8008076:	6979      	ldr	r1, [r7, #20]
 8008078:	6849      	ldr	r1, [r1, #4]
 800807a:	0849      	lsrs	r1, r1, #1
 800807c:	2000      	movs	r0, #0
 800807e:	460c      	mov	r4, r1
 8008080:	4605      	mov	r5, r0
 8008082:	eb12 0804 	adds.w	r8, r2, r4
 8008086:	eb43 0905 	adc.w	r9, r3, r5
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	469a      	mov	sl, r3
 8008092:	4693      	mov	fp, r2
 8008094:	4652      	mov	r2, sl
 8008096:	465b      	mov	r3, fp
 8008098:	4640      	mov	r0, r8
 800809a:	4649      	mov	r1, r9
 800809c:	f7f8 f970 	bl	8000380 <__aeabi_uldivmod>
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	4613      	mov	r3, r2
 80080a6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80080a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080ae:	d308      	bcc.n	80080c2 <UART_SetConfig+0x79a>
 80080b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080b6:	d204      	bcs.n	80080c2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80080be:	60da      	str	r2, [r3, #12]
 80080c0:	e17c      	b.n	80083bc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80080c8:	e178      	b.n	80083bc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	69db      	ldr	r3, [r3, #28]
 80080ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080d2:	f040 80c5 	bne.w	8008260 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80080d6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80080da:	2b20      	cmp	r3, #32
 80080dc:	dc48      	bgt.n	8008170 <UART_SetConfig+0x848>
 80080de:	2b00      	cmp	r3, #0
 80080e0:	db7b      	blt.n	80081da <UART_SetConfig+0x8b2>
 80080e2:	2b20      	cmp	r3, #32
 80080e4:	d879      	bhi.n	80081da <UART_SetConfig+0x8b2>
 80080e6:	a201      	add	r2, pc, #4	@ (adr r2, 80080ec <UART_SetConfig+0x7c4>)
 80080e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ec:	08008177 	.word	0x08008177
 80080f0:	0800817f 	.word	0x0800817f
 80080f4:	080081db 	.word	0x080081db
 80080f8:	080081db 	.word	0x080081db
 80080fc:	08008187 	.word	0x08008187
 8008100:	080081db 	.word	0x080081db
 8008104:	080081db 	.word	0x080081db
 8008108:	080081db 	.word	0x080081db
 800810c:	08008197 	.word	0x08008197
 8008110:	080081db 	.word	0x080081db
 8008114:	080081db 	.word	0x080081db
 8008118:	080081db 	.word	0x080081db
 800811c:	080081db 	.word	0x080081db
 8008120:	080081db 	.word	0x080081db
 8008124:	080081db 	.word	0x080081db
 8008128:	080081db 	.word	0x080081db
 800812c:	080081a7 	.word	0x080081a7
 8008130:	080081db 	.word	0x080081db
 8008134:	080081db 	.word	0x080081db
 8008138:	080081db 	.word	0x080081db
 800813c:	080081db 	.word	0x080081db
 8008140:	080081db 	.word	0x080081db
 8008144:	080081db 	.word	0x080081db
 8008148:	080081db 	.word	0x080081db
 800814c:	080081db 	.word	0x080081db
 8008150:	080081db 	.word	0x080081db
 8008154:	080081db 	.word	0x080081db
 8008158:	080081db 	.word	0x080081db
 800815c:	080081db 	.word	0x080081db
 8008160:	080081db 	.word	0x080081db
 8008164:	080081db 	.word	0x080081db
 8008168:	080081db 	.word	0x080081db
 800816c:	080081cd 	.word	0x080081cd
 8008170:	2b40      	cmp	r3, #64	@ 0x40
 8008172:	d02e      	beq.n	80081d2 <UART_SetConfig+0x8aa>
 8008174:	e031      	b.n	80081da <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008176:	f7fc fdb7 	bl	8004ce8 <HAL_RCC_GetPCLK1Freq>
 800817a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800817c:	e033      	b.n	80081e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800817e:	f7fc fdc9 	bl	8004d14 <HAL_RCC_GetPCLK2Freq>
 8008182:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008184:	e02f      	b.n	80081e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008186:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800818a:	4618      	mov	r0, r3
 800818c:	f7fe f83a 	bl	8006204 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008194:	e027      	b.n	80081e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008196:	f107 0318 	add.w	r3, r7, #24
 800819a:	4618      	mov	r0, r3
 800819c:	f7fe f986 	bl	80064ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081a4:	e01f      	b.n	80081e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081a6:	4b2d      	ldr	r3, [pc, #180]	@ (800825c <UART_SetConfig+0x934>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 0320 	and.w	r3, r3, #32
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d009      	beq.n	80081c6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80081b2:	4b2a      	ldr	r3, [pc, #168]	@ (800825c <UART_SetConfig+0x934>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	08db      	lsrs	r3, r3, #3
 80081b8:	f003 0303 	and.w	r3, r3, #3
 80081bc:	4a24      	ldr	r2, [pc, #144]	@ (8008250 <UART_SetConfig+0x928>)
 80081be:	fa22 f303 	lsr.w	r3, r2, r3
 80081c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80081c4:	e00f      	b.n	80081e6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80081c6:	4b22      	ldr	r3, [pc, #136]	@ (8008250 <UART_SetConfig+0x928>)
 80081c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081ca:	e00c      	b.n	80081e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80081cc:	4b21      	ldr	r3, [pc, #132]	@ (8008254 <UART_SetConfig+0x92c>)
 80081ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081d0:	e009      	b.n	80081e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081d8:	e005      	b.n	80081e6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80081da:	2300      	movs	r3, #0
 80081dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80081e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f000 80e7 	beq.w	80083bc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081f2:	4a19      	ldr	r2, [pc, #100]	@ (8008258 <UART_SetConfig+0x930>)
 80081f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081f8:	461a      	mov	r2, r3
 80081fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008200:	005a      	lsls	r2, r3, #1
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	085b      	lsrs	r3, r3, #1
 8008208:	441a      	add	r2, r3
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008212:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008216:	2b0f      	cmp	r3, #15
 8008218:	d916      	bls.n	8008248 <UART_SetConfig+0x920>
 800821a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800821c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008220:	d212      	bcs.n	8008248 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008224:	b29b      	uxth	r3, r3
 8008226:	f023 030f 	bic.w	r3, r3, #15
 800822a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800822c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800822e:	085b      	lsrs	r3, r3, #1
 8008230:	b29b      	uxth	r3, r3
 8008232:	f003 0307 	and.w	r3, r3, #7
 8008236:	b29a      	uxth	r2, r3
 8008238:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800823a:	4313      	orrs	r3, r2
 800823c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008244:	60da      	str	r2, [r3, #12]
 8008246:	e0b9      	b.n	80083bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800824e:	e0b5      	b.n	80083bc <UART_SetConfig+0xa94>
 8008250:	03d09000 	.word	0x03d09000
 8008254:	003d0900 	.word	0x003d0900
 8008258:	0801dae8 	.word	0x0801dae8
 800825c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008260:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008264:	2b20      	cmp	r3, #32
 8008266:	dc49      	bgt.n	80082fc <UART_SetConfig+0x9d4>
 8008268:	2b00      	cmp	r3, #0
 800826a:	db7c      	blt.n	8008366 <UART_SetConfig+0xa3e>
 800826c:	2b20      	cmp	r3, #32
 800826e:	d87a      	bhi.n	8008366 <UART_SetConfig+0xa3e>
 8008270:	a201      	add	r2, pc, #4	@ (adr r2, 8008278 <UART_SetConfig+0x950>)
 8008272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008276:	bf00      	nop
 8008278:	08008303 	.word	0x08008303
 800827c:	0800830b 	.word	0x0800830b
 8008280:	08008367 	.word	0x08008367
 8008284:	08008367 	.word	0x08008367
 8008288:	08008313 	.word	0x08008313
 800828c:	08008367 	.word	0x08008367
 8008290:	08008367 	.word	0x08008367
 8008294:	08008367 	.word	0x08008367
 8008298:	08008323 	.word	0x08008323
 800829c:	08008367 	.word	0x08008367
 80082a0:	08008367 	.word	0x08008367
 80082a4:	08008367 	.word	0x08008367
 80082a8:	08008367 	.word	0x08008367
 80082ac:	08008367 	.word	0x08008367
 80082b0:	08008367 	.word	0x08008367
 80082b4:	08008367 	.word	0x08008367
 80082b8:	08008333 	.word	0x08008333
 80082bc:	08008367 	.word	0x08008367
 80082c0:	08008367 	.word	0x08008367
 80082c4:	08008367 	.word	0x08008367
 80082c8:	08008367 	.word	0x08008367
 80082cc:	08008367 	.word	0x08008367
 80082d0:	08008367 	.word	0x08008367
 80082d4:	08008367 	.word	0x08008367
 80082d8:	08008367 	.word	0x08008367
 80082dc:	08008367 	.word	0x08008367
 80082e0:	08008367 	.word	0x08008367
 80082e4:	08008367 	.word	0x08008367
 80082e8:	08008367 	.word	0x08008367
 80082ec:	08008367 	.word	0x08008367
 80082f0:	08008367 	.word	0x08008367
 80082f4:	08008367 	.word	0x08008367
 80082f8:	08008359 	.word	0x08008359
 80082fc:	2b40      	cmp	r3, #64	@ 0x40
 80082fe:	d02e      	beq.n	800835e <UART_SetConfig+0xa36>
 8008300:	e031      	b.n	8008366 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008302:	f7fc fcf1 	bl	8004ce8 <HAL_RCC_GetPCLK1Freq>
 8008306:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008308:	e033      	b.n	8008372 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800830a:	f7fc fd03 	bl	8004d14 <HAL_RCC_GetPCLK2Freq>
 800830e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008310:	e02f      	b.n	8008372 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008312:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008316:	4618      	mov	r0, r3
 8008318:	f7fd ff74 	bl	8006204 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800831c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800831e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008320:	e027      	b.n	8008372 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008322:	f107 0318 	add.w	r3, r7, #24
 8008326:	4618      	mov	r0, r3
 8008328:	f7fe f8c0 	bl	80064ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008330:	e01f      	b.n	8008372 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008332:	4b2d      	ldr	r3, [pc, #180]	@ (80083e8 <UART_SetConfig+0xac0>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f003 0320 	and.w	r3, r3, #32
 800833a:	2b00      	cmp	r3, #0
 800833c:	d009      	beq.n	8008352 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800833e:	4b2a      	ldr	r3, [pc, #168]	@ (80083e8 <UART_SetConfig+0xac0>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	08db      	lsrs	r3, r3, #3
 8008344:	f003 0303 	and.w	r3, r3, #3
 8008348:	4a28      	ldr	r2, [pc, #160]	@ (80083ec <UART_SetConfig+0xac4>)
 800834a:	fa22 f303 	lsr.w	r3, r2, r3
 800834e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008350:	e00f      	b.n	8008372 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008352:	4b26      	ldr	r3, [pc, #152]	@ (80083ec <UART_SetConfig+0xac4>)
 8008354:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008356:	e00c      	b.n	8008372 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008358:	4b25      	ldr	r3, [pc, #148]	@ (80083f0 <UART_SetConfig+0xac8>)
 800835a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800835c:	e009      	b.n	8008372 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800835e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008364:	e005      	b.n	8008372 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008366:	2300      	movs	r3, #0
 8008368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008370:	bf00      	nop
    }

    if (pclk != 0U)
 8008372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008374:	2b00      	cmp	r3, #0
 8008376:	d021      	beq.n	80083bc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800837c:	4a1d      	ldr	r2, [pc, #116]	@ (80083f4 <UART_SetConfig+0xacc>)
 800837e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008382:	461a      	mov	r2, r3
 8008384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008386:	fbb3 f2f2 	udiv	r2, r3, r2
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	085b      	lsrs	r3, r3, #1
 8008390:	441a      	add	r2, r3
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	fbb2 f3f3 	udiv	r3, r2, r3
 800839a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800839c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800839e:	2b0f      	cmp	r3, #15
 80083a0:	d909      	bls.n	80083b6 <UART_SetConfig+0xa8e>
 80083a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083a8:	d205      	bcs.n	80083b6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80083aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ac:	b29a      	uxth	r2, r3
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	60da      	str	r2, [r3, #12]
 80083b4:	e002      	b.n	80083bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	2201      	movs	r2, #1
 80083c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	2200      	movs	r2, #0
 80083d0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	2200      	movs	r2, #0
 80083d6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80083d8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3748      	adds	r7, #72	@ 0x48
 80083e0:	46bd      	mov	sp, r7
 80083e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083e6:	bf00      	nop
 80083e8:	58024400 	.word	0x58024400
 80083ec:	03d09000 	.word	0x03d09000
 80083f0:	003d0900 	.word	0x003d0900
 80083f4:	0801dae8 	.word	0x0801dae8

080083f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008404:	f003 0308 	and.w	r3, r3, #8
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00a      	beq.n	8008422 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	430a      	orrs	r2, r1
 8008420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008426:	f003 0301 	and.w	r3, r3, #1
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00a      	beq.n	8008444 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	430a      	orrs	r2, r1
 8008442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008448:	f003 0302 	and.w	r3, r3, #2
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00a      	beq.n	8008466 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	430a      	orrs	r2, r1
 8008464:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800846a:	f003 0304 	and.w	r3, r3, #4
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00a      	beq.n	8008488 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	430a      	orrs	r2, r1
 8008486:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800848c:	f003 0310 	and.w	r3, r3, #16
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00a      	beq.n	80084aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	430a      	orrs	r2, r1
 80084a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ae:	f003 0320 	and.w	r3, r3, #32
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00a      	beq.n	80084cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	430a      	orrs	r2, r1
 80084ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d01a      	beq.n	800850e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	430a      	orrs	r2, r1
 80084ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084f6:	d10a      	bne.n	800850e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	430a      	orrs	r2, r1
 800850c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00a      	beq.n	8008530 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	430a      	orrs	r2, r1
 800852e:	605a      	str	r2, [r3, #4]
  }
}
 8008530:	bf00      	nop
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b098      	sub	sp, #96	@ 0x60
 8008540:	af02      	add	r7, sp, #8
 8008542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800854c:	f7f8 ff38 	bl	80013c0 <HAL_GetTick>
 8008550:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 0308 	and.w	r3, r3, #8
 800855c:	2b08      	cmp	r3, #8
 800855e:	d12f      	bne.n	80085c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008560:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008564:	9300      	str	r3, [sp, #0]
 8008566:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008568:	2200      	movs	r2, #0
 800856a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f88e 	bl	8008690 <UART_WaitOnFlagUntilTimeout>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d022      	beq.n	80085c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008582:	e853 3f00 	ldrex	r3, [r3]
 8008586:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800858a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800858e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	461a      	mov	r2, r3
 8008596:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008598:	647b      	str	r3, [r7, #68]	@ 0x44
 800859a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800859e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085a0:	e841 2300 	strex	r3, r2, [r1]
 80085a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1e6      	bne.n	800857a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2220      	movs	r2, #32
 80085b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	e063      	b.n	8008688 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 0304 	and.w	r3, r3, #4
 80085ca:	2b04      	cmp	r3, #4
 80085cc:	d149      	bne.n	8008662 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80085d2:	9300      	str	r3, [sp, #0]
 80085d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085d6:	2200      	movs	r2, #0
 80085d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 f857 	bl	8008690 <UART_WaitOnFlagUntilTimeout>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d03c      	beq.n	8008662 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f0:	e853 3f00 	ldrex	r3, [r3]
 80085f4:	623b      	str	r3, [r7, #32]
   return(result);
 80085f6:	6a3b      	ldr	r3, [r7, #32]
 80085f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	461a      	mov	r2, r3
 8008604:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008606:	633b      	str	r3, [r7, #48]	@ 0x30
 8008608:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800860c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800860e:	e841 2300 	strex	r3, r2, [r1]
 8008612:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008616:	2b00      	cmp	r3, #0
 8008618:	d1e6      	bne.n	80085e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	3308      	adds	r3, #8
 8008620:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	e853 3f00 	ldrex	r3, [r3]
 8008628:	60fb      	str	r3, [r7, #12]
   return(result);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f023 0301 	bic.w	r3, r3, #1
 8008630:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	3308      	adds	r3, #8
 8008638:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800863a:	61fa      	str	r2, [r7, #28]
 800863c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863e:	69b9      	ldr	r1, [r7, #24]
 8008640:	69fa      	ldr	r2, [r7, #28]
 8008642:	e841 2300 	strex	r3, r2, [r1]
 8008646:	617b      	str	r3, [r7, #20]
   return(result);
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1e5      	bne.n	800861a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2220      	movs	r2, #32
 8008652:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800865e:	2303      	movs	r3, #3
 8008660:	e012      	b.n	8008688 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2220      	movs	r2, #32
 8008666:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2220      	movs	r2, #32
 800866e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3758      	adds	r7, #88	@ 0x58
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	603b      	str	r3, [r7, #0]
 800869c:	4613      	mov	r3, r2
 800869e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086a0:	e04f      	b.n	8008742 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086a8:	d04b      	beq.n	8008742 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086aa:	f7f8 fe89 	bl	80013c0 <HAL_GetTick>
 80086ae:	4602      	mov	r2, r0
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	69ba      	ldr	r2, [r7, #24]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d302      	bcc.n	80086c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d101      	bne.n	80086c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80086c0:	2303      	movs	r3, #3
 80086c2:	e04e      	b.n	8008762 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 0304 	and.w	r3, r3, #4
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d037      	beq.n	8008742 <UART_WaitOnFlagUntilTimeout+0xb2>
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	2b80      	cmp	r3, #128	@ 0x80
 80086d6:	d034      	beq.n	8008742 <UART_WaitOnFlagUntilTimeout+0xb2>
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	2b40      	cmp	r3, #64	@ 0x40
 80086dc:	d031      	beq.n	8008742 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	69db      	ldr	r3, [r3, #28]
 80086e4:	f003 0308 	and.w	r3, r3, #8
 80086e8:	2b08      	cmp	r3, #8
 80086ea:	d110      	bne.n	800870e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2208      	movs	r2, #8
 80086f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f000 f839 	bl	800876c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2208      	movs	r2, #8
 80086fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	e029      	b.n	8008762 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	69db      	ldr	r3, [r3, #28]
 8008714:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008718:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800871c:	d111      	bne.n	8008742 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008726:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f000 f81f 	bl	800876c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2220      	movs	r2, #32
 8008732:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2200      	movs	r2, #0
 800873a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800873e:	2303      	movs	r3, #3
 8008740:	e00f      	b.n	8008762 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	69da      	ldr	r2, [r3, #28]
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	4013      	ands	r3, r2
 800874c:	68ba      	ldr	r2, [r7, #8]
 800874e:	429a      	cmp	r2, r3
 8008750:	bf0c      	ite	eq
 8008752:	2301      	moveq	r3, #1
 8008754:	2300      	movne	r3, #0
 8008756:	b2db      	uxtb	r3, r3
 8008758:	461a      	mov	r2, r3
 800875a:	79fb      	ldrb	r3, [r7, #7]
 800875c:	429a      	cmp	r2, r3
 800875e:	d0a0      	beq.n	80086a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
	...

0800876c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800876c:	b480      	push	{r7}
 800876e:	b095      	sub	sp, #84	@ 0x54
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800877c:	e853 3f00 	ldrex	r3, [r3]
 8008780:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008784:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008788:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	461a      	mov	r2, r3
 8008790:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008792:	643b      	str	r3, [r7, #64]	@ 0x40
 8008794:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008796:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008798:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800879a:	e841 2300 	strex	r3, r2, [r1]
 800879e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80087a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1e6      	bne.n	8008774 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	3308      	adds	r3, #8
 80087ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ae:	6a3b      	ldr	r3, [r7, #32]
 80087b0:	e853 3f00 	ldrex	r3, [r3]
 80087b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80087b6:	69fa      	ldr	r2, [r7, #28]
 80087b8:	4b1e      	ldr	r3, [pc, #120]	@ (8008834 <UART_EndRxTransfer+0xc8>)
 80087ba:	4013      	ands	r3, r2
 80087bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	3308      	adds	r3, #8
 80087c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80087c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087ce:	e841 2300 	strex	r3, r2, [r1]
 80087d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80087d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1e5      	bne.n	80087a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d118      	bne.n	8008814 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	e853 3f00 	ldrex	r3, [r3]
 80087ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	f023 0310 	bic.w	r3, r3, #16
 80087f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	461a      	mov	r2, r3
 80087fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008800:	61bb      	str	r3, [r7, #24]
 8008802:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008804:	6979      	ldr	r1, [r7, #20]
 8008806:	69ba      	ldr	r2, [r7, #24]
 8008808:	e841 2300 	strex	r3, r2, [r1]
 800880c:	613b      	str	r3, [r7, #16]
   return(result);
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d1e6      	bne.n	80087e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2220      	movs	r2, #32
 8008818:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008828:	bf00      	nop
 800882a:	3754      	adds	r7, #84	@ 0x54
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr
 8008834:	effffffe 	.word	0xeffffffe

08008838 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008844:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2200      	movs	r2, #0
 8008852:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008856:	68f8      	ldr	r0, [r7, #12]
 8008858:	f7ff f850 	bl	80078fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800885c:	bf00      	nop
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b088      	sub	sp, #32
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	e853 3f00 	ldrex	r3, [r3]
 8008878:	60bb      	str	r3, [r7, #8]
   return(result);
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008880:	61fb      	str	r3, [r7, #28]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	461a      	mov	r2, r3
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	61bb      	str	r3, [r7, #24]
 800888c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888e:	6979      	ldr	r1, [r7, #20]
 8008890:	69ba      	ldr	r2, [r7, #24]
 8008892:	e841 2300 	strex	r3, r2, [r1]
 8008896:	613b      	str	r3, [r7, #16]
   return(result);
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1e6      	bne.n	800886c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2220      	movs	r2, #32
 80088a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f7ff f81b 	bl	80078e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088b2:	bf00      	nop
 80088b4:	3720      	adds	r7, #32
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80088ba:	b480      	push	{r7}
 80088bc:	b083      	sub	sp, #12
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80088c2:	bf00      	nop
 80088c4:	370c      	adds	r7, #12
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr

080088ce <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80088ce:	b480      	push	{r7}
 80088d0:	b083      	sub	sp, #12
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80088d6:	bf00      	nop
 80088d8:	370c      	adds	r7, #12
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr

080088e2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80088e2:	b480      	push	{r7}
 80088e4:	b083      	sub	sp, #12
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80088ea:	bf00      	nop
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b085      	sub	sp, #20
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008904:	2b01      	cmp	r3, #1
 8008906:	d101      	bne.n	800890c <HAL_UARTEx_DisableFifoMode+0x16>
 8008908:	2302      	movs	r3, #2
 800890a:	e027      	b.n	800895c <HAL_UARTEx_DisableFifoMode+0x66>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2224      	movs	r2, #36	@ 0x24
 8008918:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f022 0201 	bic.w	r2, r2, #1
 8008932:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800893a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2220      	movs	r2, #32
 800894e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008978:	2b01      	cmp	r3, #1
 800897a:	d101      	bne.n	8008980 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800897c:	2302      	movs	r3, #2
 800897e:	e02d      	b.n	80089dc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2224      	movs	r2, #36	@ 0x24
 800898c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f022 0201 	bic.w	r2, r2, #1
 80089a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	683a      	ldr	r2, [r7, #0]
 80089b8:	430a      	orrs	r2, r1
 80089ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 f84f 	bl	8008a60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2220      	movs	r2, #32
 80089ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3710      	adds	r7, #16
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d101      	bne.n	80089fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80089f8:	2302      	movs	r3, #2
 80089fa:	e02d      	b.n	8008a58 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2224      	movs	r2, #36	@ 0x24
 8008a08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f022 0201 	bic.w	r2, r2, #1
 8008a22:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	683a      	ldr	r2, [r7, #0]
 8008a34:	430a      	orrs	r2, r1
 8008a36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 f811 	bl	8008a60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68fa      	ldr	r2, [r7, #12]
 8008a44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2220      	movs	r2, #32
 8008a4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d108      	bne.n	8008a82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008a80:	e031      	b.n	8008ae6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008a82:	2310      	movs	r3, #16
 8008a84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008a86:	2310      	movs	r3, #16
 8008a88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	0e5b      	lsrs	r3, r3, #25
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	f003 0307 	and.w	r3, r3, #7
 8008a98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	0f5b      	lsrs	r3, r3, #29
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	f003 0307 	and.w	r3, r3, #7
 8008aa8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008aaa:	7bbb      	ldrb	r3, [r7, #14]
 8008aac:	7b3a      	ldrb	r2, [r7, #12]
 8008aae:	4911      	ldr	r1, [pc, #68]	@ (8008af4 <UARTEx_SetNbDataToProcess+0x94>)
 8008ab0:	5c8a      	ldrb	r2, [r1, r2]
 8008ab2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ab6:	7b3a      	ldrb	r2, [r7, #12]
 8008ab8:	490f      	ldr	r1, [pc, #60]	@ (8008af8 <UARTEx_SetNbDataToProcess+0x98>)
 8008aba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008abc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ac8:	7bfb      	ldrb	r3, [r7, #15]
 8008aca:	7b7a      	ldrb	r2, [r7, #13]
 8008acc:	4909      	ldr	r1, [pc, #36]	@ (8008af4 <UARTEx_SetNbDataToProcess+0x94>)
 8008ace:	5c8a      	ldrb	r2, [r1, r2]
 8008ad0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008ad4:	7b7a      	ldrb	r2, [r7, #13]
 8008ad6:	4908      	ldr	r1, [pc, #32]	@ (8008af8 <UARTEx_SetNbDataToProcess+0x98>)
 8008ad8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ada:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ade:	b29a      	uxth	r2, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008ae6:	bf00      	nop
 8008ae8:	3714      	adds	r7, #20
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	0801db00 	.word	0x0801db00
 8008af8:	0801db08 	.word	0x0801db08

08008afc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8008b02:	f000 fd83 	bl	800960c <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8008b06:	4b12      	ldr	r3, [pc, #72]	@ (8008b50 <MX_LWIP_Init+0x54>)
 8008b08:	2200      	movs	r2, #0
 8008b0a:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8008b0c:	4b11      	ldr	r3, [pc, #68]	@ (8008b54 <MX_LWIP_Init+0x58>)
 8008b0e:	2200      	movs	r2, #0
 8008b10:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8008b12:	4b11      	ldr	r3, [pc, #68]	@ (8008b58 <MX_LWIP_Init+0x5c>)
 8008b14:	2200      	movs	r2, #0
 8008b16:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8008b18:	4b10      	ldr	r3, [pc, #64]	@ (8008b5c <MX_LWIP_Init+0x60>)
 8008b1a:	9302      	str	r3, [sp, #8]
 8008b1c:	4b10      	ldr	r3, [pc, #64]	@ (8008b60 <MX_LWIP_Init+0x64>)
 8008b1e:	9301      	str	r3, [sp, #4]
 8008b20:	2300      	movs	r3, #0
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	4b0c      	ldr	r3, [pc, #48]	@ (8008b58 <MX_LWIP_Init+0x5c>)
 8008b26:	4a0b      	ldr	r2, [pc, #44]	@ (8008b54 <MX_LWIP_Init+0x58>)
 8008b28:	4909      	ldr	r1, [pc, #36]	@ (8008b50 <MX_LWIP_Init+0x54>)
 8008b2a:	480e      	ldr	r0, [pc, #56]	@ (8008b64 <MX_LWIP_Init+0x68>)
 8008b2c:	f001 fa66 	bl	8009ffc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008b30:	480c      	ldr	r0, [pc, #48]	@ (8008b64 <MX_LWIP_Init+0x68>)
 8008b32:	f001 fc1d 	bl	800a370 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8008b36:	480b      	ldr	r0, [pc, #44]	@ (8008b64 <MX_LWIP_Init+0x68>)
 8008b38:	f001 fc2a 	bl	800a390 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8008b3c:	490a      	ldr	r1, [pc, #40]	@ (8008b68 <MX_LWIP_Init+0x6c>)
 8008b3e:	4809      	ldr	r0, [pc, #36]	@ (8008b64 <MX_LWIP_Init+0x68>)
 8008b40:	f001 fd2c 	bl	800a59c <netif_set_link_callback>

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8008b44:	4807      	ldr	r0, [pc, #28]	@ (8008b64 <MX_LWIP_Init+0x68>)
 8008b46:	f009 fbb3 	bl	80122b0 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008b4a:	bf00      	nop
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	24000224 	.word	0x24000224
 8008b54:	24000228 	.word	0x24000228
 8008b58:	2400022c 	.word	0x2400022c
 8008b5c:	0801683d 	.word	0x0801683d
 8008b60:	08008e01 	.word	0x08008e01
 8008b64:	240001ec 	.word	0x240001ec
 8008b68:	08008b6d 	.word	0x08008b6d

08008b6c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008b8c:	4b51      	ldr	r3, [pc, #324]	@ (8008cd4 <low_level_init+0x154>)
 8008b8e:	4a52      	ldr	r2, [pc, #328]	@ (8008cd8 <low_level_init+0x158>)
 8008b90:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8008b92:	2300      	movs	r3, #0
 8008b94:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8008b96:	2380      	movs	r3, #128	@ 0x80
 8008b98:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8008b9a:	23e1      	movs	r3, #225	@ 0xe1
 8008b9c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8008baa:	4a4a      	ldr	r2, [pc, #296]	@ (8008cd4 <low_level_init+0x154>)
 8008bac:	f107 0308 	add.w	r3, r7, #8
 8008bb0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8008bb2:	4b48      	ldr	r3, [pc, #288]	@ (8008cd4 <low_level_init+0x154>)
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8008bb8:	4b46      	ldr	r3, [pc, #280]	@ (8008cd4 <low_level_init+0x154>)
 8008bba:	4a48      	ldr	r2, [pc, #288]	@ (8008cdc <low_level_init+0x15c>)
 8008bbc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8008bbe:	4b45      	ldr	r3, [pc, #276]	@ (8008cd4 <low_level_init+0x154>)
 8008bc0:	4a47      	ldr	r2, [pc, #284]	@ (8008ce0 <low_level_init+0x160>)
 8008bc2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8008bc4:	4b43      	ldr	r3, [pc, #268]	@ (8008cd4 <low_level_init+0x154>)
 8008bc6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8008bca:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008bcc:	4841      	ldr	r0, [pc, #260]	@ (8008cd4 <low_level_init+0x154>)
 8008bce:	f7f9 fb03 	bl	80021d8 <HAL_ETH_Init>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8008bd6:	2238      	movs	r2, #56	@ 0x38
 8008bd8:	2100      	movs	r1, #0
 8008bda:	4842      	ldr	r0, [pc, #264]	@ (8008ce4 <low_level_init+0x164>)
 8008bdc:	f00e f9ce 	bl	8016f7c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8008be0:	4b40      	ldr	r3, [pc, #256]	@ (8008ce4 <low_level_init+0x164>)
 8008be2:	2221      	movs	r2, #33	@ 0x21
 8008be4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8008be6:	4b3f      	ldr	r3, [pc, #252]	@ (8008ce4 <low_level_init+0x164>)
 8008be8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8008bec:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8008bee:	4b3d      	ldr	r3, [pc, #244]	@ (8008ce4 <low_level_init+0x164>)
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8008bf4:	483c      	ldr	r0, [pc, #240]	@ (8008ce8 <low_level_init+0x168>)
 8008bf6:	f001 f8c9 	bl	8009d8c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2206      	movs	r2, #6
 8008bfe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008c02:	4b34      	ldr	r3, [pc, #208]	@ (8008cd4 <low_level_init+0x154>)
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	781a      	ldrb	r2, [r3, #0]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008c0e:	4b31      	ldr	r3, [pc, #196]	@ (8008cd4 <low_level_init+0x154>)
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	785a      	ldrb	r2, [r3, #1]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008c1a:	4b2e      	ldr	r3, [pc, #184]	@ (8008cd4 <low_level_init+0x154>)
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	789a      	ldrb	r2, [r3, #2]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008c26:	4b2b      	ldr	r3, [pc, #172]	@ (8008cd4 <low_level_init+0x154>)
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	78da      	ldrb	r2, [r3, #3]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008c32:	4b28      	ldr	r3, [pc, #160]	@ (8008cd4 <low_level_init+0x154>)
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	791a      	ldrb	r2, [r3, #4]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008c3e:	4b25      	ldr	r3, [pc, #148]	@ (8008cd4 <low_level_init+0x154>)
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	795a      	ldrb	r2, [r3, #5]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8008c50:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008c58:	f043 030a 	orr.w	r3, r3, #10
 8008c5c:	b2da      	uxtb	r2, r3
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

    /* ALLTON OWN DRIVER INCLUDE */

   DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8008c64:	4921      	ldr	r1, [pc, #132]	@ (8008cec <low_level_init+0x16c>)
 8008c66:	4822      	ldr	r0, [pc, #136]	@ (8008cf0 <low_level_init+0x170>)
 8008c68:	f7f8 f9d5 	bl	8001016 <DP83848_RegisterBusIO>

   if(DP83848_Init(&DP83848) != DP83848_STATUS_OK)
 8008c6c:	4820      	ldr	r0, [pc, #128]	@ (8008cf0 <low_level_init+0x170>)
 8008c6e:	f7f8 fa04 	bl	800107a <DP83848_Init>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d006      	beq.n	8008c86 <low_level_init+0x106>
       {
         netif_set_link_down(netif);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f001 fc5f 	bl	800a53c <netif_set_link_down>
         netif_set_down(netif);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f001 fbf2 	bl	800a468 <netif_set_down>
         return;
 8008c84:	e022      	b.n	8008ccc <low_level_init+0x14c>
       }

   if (hal_eth_init_status == HAL_OK)
 8008c86:	7bfb      	ldrb	r3, [r7, #15]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d103      	bne.n	8008c94 <low_level_init+0x114>
       {
       /* Get link state */
       ethernet_link_check_state(netif);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 fb27 	bl	80092e0 <ethernet_link_check_state>
 8008c92:	e001      	b.n	8008c98 <low_level_init+0x118>
       }
   else
       {
         Error_Handler();
 8008c94:	f7f7 ff0e 	bl	8000ab4 <Error_Handler>

   /* END ALLTON OWN DRIVER INCLUDE */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8008c98:	4916      	ldr	r1, [pc, #88]	@ (8008cf4 <low_level_init+0x174>)
 8008c9a:	4817      	ldr	r0, [pc, #92]	@ (8008cf8 <low_level_init+0x178>)
 8008c9c:	f7f8 fac1 	bl	8001222 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8008ca0:	4815      	ldr	r0, [pc, #84]	@ (8008cf8 <low_level_init+0x178>)
 8008ca2:	f7f8 faf0 	bl	8001286 <LAN8742_Init>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d006      	beq.n	8008cba <low_level_init+0x13a>
  {
    netif_set_link_down(netif);
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f001 fc45 	bl	800a53c <netif_set_link_down>
    netif_set_down(netif);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f001 fbd8 	bl	800a468 <netif_set_down>
    return;
 8008cb8:	e008      	b.n	8008ccc <low_level_init+0x14c>
  }

  if (hal_eth_init_status == HAL_OK)
 8008cba:	7bfb      	ldrb	r3, [r7, #15]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d103      	bne.n	8008cc8 <low_level_init+0x148>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fb0d 	bl	80092e0 <ethernet_link_check_state>
 8008cc6:	e001      	b.n	8008ccc <low_level_init+0x14c>
  }
  else
  {
    Error_Handler();
 8008cc8:	f7f7 fef4 	bl	8000ab4 <Error_Handler>




/* USER CODE END LOW_LEVEL_INIT */
}
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	24000238 	.word	0x24000238
 8008cd8:	40028000 	.word	0x40028000
 8008cdc:	30040060 	.word	0x30040060
 8008ce0:	30040000 	.word	0x30040000
 8008ce4:	240002e8 	.word	0x240002e8
 8008ce8:	0801db10 	.word	0x0801db10
 8008cec:	24000024 	.word	0x24000024
 8008cf0:	24000340 	.word	0x24000340
 8008cf4:	24000010 	.word	0x24000010
 8008cf8:	24000320 	.word	0x24000320

08008cfc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b092      	sub	sp, #72	@ 0x48
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8008d06:	2300      	movs	r3, #0
 8008d08:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8008d14:	f107 030c 	add.w	r3, r7, #12
 8008d18:	2230      	movs	r2, #48	@ 0x30
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f00e f92d 	bl	8016f7c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008d22:	f107 030c 	add.w	r3, r7, #12
 8008d26:	2230      	movs	r2, #48	@ 0x30
 8008d28:	2100      	movs	r1, #0
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f00e f926 	bl	8016f7c <memset>

  for(q = p; q != NULL; q = q->next)
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d34:	e045      	b.n	8008dc2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8008d36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d38:	2b03      	cmp	r3, #3
 8008d3a:	d902      	bls.n	8008d42 <low_level_output+0x46>
      return ERR_IF;
 8008d3c:	f06f 030b 	mvn.w	r3, #11
 8008d40:	e055      	b.n	8008dee <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8008d42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d44:	6859      	ldr	r1, [r3, #4]
 8008d46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d48:	4613      	mov	r3, r2
 8008d4a:	005b      	lsls	r3, r3, #1
 8008d4c:	4413      	add	r3, r2
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	3348      	adds	r3, #72	@ 0x48
 8008d52:	443b      	add	r3, r7
 8008d54:	3b3c      	subs	r3, #60	@ 0x3c
 8008d56:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8008d58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d5a:	895b      	ldrh	r3, [r3, #10]
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d60:	4613      	mov	r3, r2
 8008d62:	005b      	lsls	r3, r3, #1
 8008d64:	4413      	add	r3, r2
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	3348      	adds	r3, #72	@ 0x48
 8008d6a:	443b      	add	r3, r7
 8008d6c:	3b38      	subs	r3, #56	@ 0x38
 8008d6e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8008d70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d011      	beq.n	8008d9a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8008d76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d78:	1e5a      	subs	r2, r3, #1
 8008d7a:	f107 000c 	add.w	r0, r7, #12
 8008d7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008d80:	460b      	mov	r3, r1
 8008d82:	005b      	lsls	r3, r3, #1
 8008d84:	440b      	add	r3, r1
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	18c1      	adds	r1, r0, r3
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	005b      	lsls	r3, r3, #1
 8008d8e:	4413      	add	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	3348      	adds	r3, #72	@ 0x48
 8008d94:	443b      	add	r3, r7
 8008d96:	3b34      	subs	r3, #52	@ 0x34
 8008d98:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8008d9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d109      	bne.n	8008db6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8008da2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008da4:	4613      	mov	r3, r2
 8008da6:	005b      	lsls	r3, r3, #1
 8008da8:	4413      	add	r3, r2
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	3348      	adds	r3, #72	@ 0x48
 8008dae:	443b      	add	r3, r7
 8008db0:	3b34      	subs	r3, #52	@ 0x34
 8008db2:	2200      	movs	r2, #0
 8008db4:	601a      	str	r2, [r3, #0]
    }

    i++;
 8008db6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008db8:	3301      	adds	r3, #1
 8008dba:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8008dbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008dc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d1b6      	bne.n	8008d36 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	891b      	ldrh	r3, [r3, #8]
 8008dcc:	461a      	mov	r2, r3
 8008dce:	4b0a      	ldr	r3, [pc, #40]	@ (8008df8 <low_level_output+0xfc>)
 8008dd0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8008dd2:	4a09      	ldr	r2, [pc, #36]	@ (8008df8 <low_level_output+0xfc>)
 8008dd4:	f107 030c 	add.w	r3, r7, #12
 8008dd8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8008dda:	4a07      	ldr	r2, [pc, #28]	@ (8008df8 <low_level_output+0xfc>)
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8008de0:	2214      	movs	r2, #20
 8008de2:	4905      	ldr	r1, [pc, #20]	@ (8008df8 <low_level_output+0xfc>)
 8008de4:	4805      	ldr	r0, [pc, #20]	@ (8008dfc <low_level_output+0x100>)
 8008de6:	f7f9 fba7 	bl	8002538 <HAL_ETH_Transmit>

  return errval;
 8008dea:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3748      	adds	r7, #72	@ 0x48
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	240002e8 	.word	0x240002e8
 8008dfc:	24000238 	.word	0x24000238

08008e00 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d106      	bne.n	8008e1c <ethernetif_init+0x1c>
 8008e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8008e48 <ethernetif_init+0x48>)
 8008e10:	f240 12b9 	movw	r2, #441	@ 0x1b9
 8008e14:	490d      	ldr	r1, [pc, #52]	@ (8008e4c <ethernetif_init+0x4c>)
 8008e16:	480e      	ldr	r0, [pc, #56]	@ (8008e50 <ethernetif_init+0x50>)
 8008e18:	f00d ff50 	bl	8016cbc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2273      	movs	r2, #115	@ 0x73
 8008e20:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2274      	movs	r2, #116	@ 0x74
 8008e28:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a09      	ldr	r2, [pc, #36]	@ (8008e54 <ethernetif_init+0x54>)
 8008e30:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4a08      	ldr	r2, [pc, #32]	@ (8008e58 <ethernetif_init+0x58>)
 8008e36:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f7ff fea1 	bl	8008b80 <low_level_init>

  return ERR_OK;
 8008e3e:	2300      	movs	r3, #0
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3708      	adds	r7, #8
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	08017c44 	.word	0x08017c44
 8008e4c:	08017c60 	.word	0x08017c60
 8008e50:	08017c70 	.word	0x08017c70
 8008e54:	0801473d 	.word	0x0801473d
 8008e58:	08008cfd 	.word	0x08008cfd

08008e5c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008e68:	68f9      	ldr	r1, [r7, #12]
 8008e6a:	4807      	ldr	r0, [pc, #28]	@ (8008e88 <pbuf_free_custom+0x2c>)
 8008e6c:	f001 f870 	bl	8009f50 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8008e70:	4b06      	ldr	r3, [pc, #24]	@ (8008e8c <pbuf_free_custom+0x30>)
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d102      	bne.n	8008e7e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8008e78:	4b04      	ldr	r3, [pc, #16]	@ (8008e8c <pbuf_free_custom+0x30>)
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	701a      	strb	r2, [r3, #0]
  }
}
 8008e7e:	bf00      	nop
 8008e80:	3710      	adds	r7, #16
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	0801db10 	.word	0x0801db10
 8008e8c:	24000234 	.word	0x24000234

08008e90 <low_level_input_own>:

/* USER CODE BEGIN 6 */

static struct pbuf * low_level_input_own(struct netif *netif)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b086      	sub	sp, #24
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
	  struct pbuf *p = NULL;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	60bb      	str	r3, [r7, #8]

	  if(RxAllocStatus == RX_ALLOC_OK)
 8008e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8008f1c <low_level_input_own+0x8c>)
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d136      	bne.n	8008f12 <low_level_input_own+0x82>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8008ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8008f20 <low_level_input_own+0x90>)
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8008eac:	f3bf 8f4f 	dsb	sy
}
 8008eb0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8008eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8008f20 <low_level_input_own+0x90>)
 8008eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008eb8:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	0b5b      	lsrs	r3, r3, #13
 8008ebe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008ec2:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	08db      	lsrs	r3, r3, #3
 8008ec8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ecc:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	015a      	lsls	r2, r3, #5
 8008ed2:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8008ed6:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8008edc:	4910      	ldr	r1, [pc, #64]	@ (8008f20 <low_level_input_own+0x90>)
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	1e5a      	subs	r2, r3, #1
 8008ee8:	60fa      	str	r2, [r7, #12]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d1ef      	bne.n	8008ece <low_level_input_own+0x3e>
    } while(sets-- != 0U);
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	1e5a      	subs	r2, r3, #1
 8008ef2:	613a      	str	r2, [r7, #16]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d1e5      	bne.n	8008ec4 <low_level_input_own+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8008ef8:	f3bf 8f4f 	dsb	sy
}
 8008efc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008efe:	f3bf 8f6f 	isb	sy
}
 8008f02:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8008f04:	bf00      	nop
	  {
		/* Clean and Invalidate data cache */
		SCB_CleanInvalidateDCache();
	    HAL_ETH_ReadData(&heth, (void **)&p);
 8008f06:	f107 0308 	add.w	r3, r7, #8
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	4805      	ldr	r0, [pc, #20]	@ (8008f24 <low_level_input_own+0x94>)
 8008f0e:	f7f9 fbaa 	bl	8002666 <HAL_ETH_ReadData>
	  }

	  return p;
 8008f12:	68bb      	ldr	r3, [r7, #8]
//  }
//  else
//  {
//    return NULL;
//  }
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3718      	adds	r7, #24
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	24000234 	.word	0x24000234
 8008f20:	e000ed00 	.word	0xe000ed00
 8008f24:	24000238 	.word	0x24000238

08008f28 <ethernetif_input_own>:

  return errval;
}

void ethernetif_input_own(struct netif *netif)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input_own(netif);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f7ff ffad 	bl	8008e90 <low_level_input_own>
 8008f36:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d010      	beq.n	8008f60 <ethernetif_input_own+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	6879      	ldr	r1, [r7, #4]
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	4798      	blx	r3
 8008f48:	4603      	mov	r3, r0
 8008f4a:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8008f4c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d006      	beq.n	8008f62 <ethernetif_input_own+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f001 feed 	bl	800ad34 <pbuf_free>
    p = NULL;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	60fb      	str	r3, [r7, #12]
 8008f5e:	e000      	b.n	8008f62 <ethernetif_input_own+0x3a>
  if (p == NULL) return;
 8008f60:	bf00      	nop
  }

}
 8008f62:	3710      	adds	r7, #16
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008f6c:	f7f8 fa28 	bl	80013c0 <HAL_GetTick>
 8008f70:	4603      	mov	r3, r0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	bd80      	pop	{r7, pc}
	...

08008f78 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b08e      	sub	sp, #56	@ 0x38
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f84:	2200      	movs	r2, #0
 8008f86:	601a      	str	r2, [r3, #0]
 8008f88:	605a      	str	r2, [r3, #4]
 8008f8a:	609a      	str	r2, [r3, #8]
 8008f8c:	60da      	str	r2, [r3, #12]
 8008f8e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a59      	ldr	r2, [pc, #356]	@ (80090fc <HAL_ETH_MspInit+0x184>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	f040 80ab 	bne.w	80090f2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8008f9c:	4b58      	ldr	r3, [pc, #352]	@ (8009100 <HAL_ETH_MspInit+0x188>)
 8008f9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008fa2:	4a57      	ldr	r2, [pc, #348]	@ (8009100 <HAL_ETH_MspInit+0x188>)
 8008fa4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fa8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8008fac:	4b54      	ldr	r3, [pc, #336]	@ (8009100 <HAL_ETH_MspInit+0x188>)
 8008fae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008fb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008fb6:	623b      	str	r3, [r7, #32]
 8008fb8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8008fba:	4b51      	ldr	r3, [pc, #324]	@ (8009100 <HAL_ETH_MspInit+0x188>)
 8008fbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008fc0:	4a4f      	ldr	r2, [pc, #316]	@ (8009100 <HAL_ETH_MspInit+0x188>)
 8008fc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008fc6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8008fca:	4b4d      	ldr	r3, [pc, #308]	@ (8009100 <HAL_ETH_MspInit+0x188>)
 8008fcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008fd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008fd4:	61fb      	str	r3, [r7, #28]
 8008fd6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8008fd8:	4b49      	ldr	r3, [pc, #292]	@ (8009100 <HAL_ETH_MspInit+0x188>)
 8008fda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008fde:	4a48      	ldr	r2, [pc, #288]	@ (8009100 <HAL_ETH_MspInit+0x188>)
 8008fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fe4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8008fe8:	4b45      	ldr	r3, [pc, #276]	@ (8009100 <HAL_ETH_MspInit+0x188>)
 8008fea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ff2:	61bb      	str	r3, [r7, #24]
 8008ff4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008ff6:	4b42      	ldr	r3, [pc, #264]	@ (8009100 <HAL_ETH_MspInit+0x188>)
 8008ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ffc:	4a40      	ldr	r2, [pc, #256]	@ (8009100 <HAL_ETH_MspInit+0x188>)
 8008ffe:	f043 0304 	orr.w	r3, r3, #4
 8009002:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009006:	4b3e      	ldr	r3, [pc, #248]	@ (8009100 <HAL_ETH_MspInit+0x188>)
 8009008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800900c:	f003 0304 	and.w	r3, r3, #4
 8009010:	617b      	str	r3, [r7, #20]
 8009012:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009014:	4b3a      	ldr	r3, [pc, #232]	@ (8009100 <HAL_ETH_MspInit+0x188>)
 8009016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800901a:	4a39      	ldr	r2, [pc, #228]	@ (8009100 <HAL_ETH_MspInit+0x188>)
 800901c:	f043 0301 	orr.w	r3, r3, #1
 8009020:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009024:	4b36      	ldr	r3, [pc, #216]	@ (8009100 <HAL_ETH_MspInit+0x188>)
 8009026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800902a:	f003 0301 	and.w	r3, r3, #1
 800902e:	613b      	str	r3, [r7, #16]
 8009030:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009032:	4b33      	ldr	r3, [pc, #204]	@ (8009100 <HAL_ETH_MspInit+0x188>)
 8009034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009038:	4a31      	ldr	r2, [pc, #196]	@ (8009100 <HAL_ETH_MspInit+0x188>)
 800903a:	f043 0302 	orr.w	r3, r3, #2
 800903e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009042:	4b2f      	ldr	r3, [pc, #188]	@ (8009100 <HAL_ETH_MspInit+0x188>)
 8009044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009048:	f003 0302 	and.w	r3, r3, #2
 800904c:	60fb      	str	r3, [r7, #12]
 800904e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009050:	4b2b      	ldr	r3, [pc, #172]	@ (8009100 <HAL_ETH_MspInit+0x188>)
 8009052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009056:	4a2a      	ldr	r2, [pc, #168]	@ (8009100 <HAL_ETH_MspInit+0x188>)
 8009058:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800905c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009060:	4b27      	ldr	r3, [pc, #156]	@ (8009100 <HAL_ETH_MspInit+0x188>)
 8009062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800906a:	60bb      	str	r3, [r7, #8]
 800906c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800906e:	2332      	movs	r3, #50	@ 0x32
 8009070:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009072:	2302      	movs	r3, #2
 8009074:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009076:	2300      	movs	r3, #0
 8009078:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800907a:	2303      	movs	r3, #3
 800907c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800907e:	230b      	movs	r3, #11
 8009080:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009086:	4619      	mov	r1, r3
 8009088:	481e      	ldr	r0, [pc, #120]	@ (8009104 <HAL_ETH_MspInit+0x18c>)
 800908a:	f7fa fc8b 	bl	80039a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800908e:	2386      	movs	r3, #134	@ 0x86
 8009090:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009092:	2302      	movs	r3, #2
 8009094:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009096:	2300      	movs	r3, #0
 8009098:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800909a:	2303      	movs	r3, #3
 800909c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800909e:	230b      	movs	r3, #11
 80090a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80090a6:	4619      	mov	r1, r3
 80090a8:	4817      	ldr	r0, [pc, #92]	@ (8009108 <HAL_ETH_MspInit+0x190>)
 80090aa:	f7fa fc7b 	bl	80039a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80090ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80090b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090b4:	2302      	movs	r3, #2
 80090b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090b8:	2300      	movs	r3, #0
 80090ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090bc:	2303      	movs	r3, #3
 80090be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80090c0:	230b      	movs	r3, #11
 80090c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80090c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80090c8:	4619      	mov	r1, r3
 80090ca:	4810      	ldr	r0, [pc, #64]	@ (800910c <HAL_ETH_MspInit+0x194>)
 80090cc:	f7fa fc6a 	bl	80039a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80090d0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80090d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090d6:	2302      	movs	r3, #2
 80090d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090da:	2300      	movs	r3, #0
 80090dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090de:	2303      	movs	r3, #3
 80090e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80090e2:	230b      	movs	r3, #11
 80090e4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80090e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80090ea:	4619      	mov	r1, r3
 80090ec:	4808      	ldr	r0, [pc, #32]	@ (8009110 <HAL_ETH_MspInit+0x198>)
 80090ee:	f7fa fc59 	bl	80039a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80090f2:	bf00      	nop
 80090f4:	3738      	adds	r7, #56	@ 0x38
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	40028000 	.word	0x40028000
 8009100:	58024400 	.word	0x58024400
 8009104:	58020800 	.word	0x58020800
 8009108:	58020000 	.word	0x58020000
 800910c:	58020400 	.word	0x58020400
 8009110:	58021800 	.word	0x58021800

08009114 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8009118:	4802      	ldr	r0, [pc, #8]	@ (8009124 <ETH_PHY_IO_Init+0x10>)
 800911a:	f7f9 fe71 	bl	8002e00 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800911e:	2300      	movs	r3, #0
}
 8009120:	4618      	mov	r0, r3
 8009122:	bd80      	pop	{r7, pc}
 8009124:	24000238 	.word	0x24000238

08009128 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8009128:	b480      	push	{r7}
 800912a:	af00      	add	r7, sp, #0
  return 0;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	68ba      	ldr	r2, [r7, #8]
 8009148:	68f9      	ldr	r1, [r7, #12]
 800914a:	4807      	ldr	r0, [pc, #28]	@ (8009168 <ETH_PHY_IO_ReadReg+0x30>)
 800914c:	f7f9 fbc1 	bl	80028d2 <HAL_ETH_ReadPHYRegister>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d002      	beq.n	800915c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8009156:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800915a:	e000      	b.n	800915e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	3710      	adds	r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	24000238 	.word	0x24000238

0800916c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	68ba      	ldr	r2, [r7, #8]
 800917c:	68f9      	ldr	r1, [r7, #12]
 800917e:	4807      	ldr	r0, [pc, #28]	@ (800919c <ETH_PHY_IO_WriteReg+0x30>)
 8009180:	f7f9 fbfc 	bl	800297c <HAL_ETH_WritePHYRegister>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d002      	beq.n	8009190 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800918a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800918e:	e000      	b.n	8009192 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	24000238 	.word	0x24000238

080091a0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80091a4:	f7f8 f90c 	bl	80013c0 <HAL_GetTick>
 80091a8:	4603      	mov	r3, r0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	bd80      	pop	{r7, pc}
	...

080091b0 <HAL_ETH_RxAllocateCallback>:
  }

}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b086      	sub	sp, #24
 80091b4:	af02      	add	r7, sp, #8
 80091b6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80091b8:	4812      	ldr	r0, [pc, #72]	@ (8009204 <HAL_ETH_RxAllocateCallback+0x54>)
 80091ba:	f000 fe5b 	bl	8009e74 <memp_malloc_pool>
 80091be:	60f8      	str	r0, [r7, #12]
  if (p)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d014      	beq.n	80091f0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f103 0220 	add.w	r2, r3, #32
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	4a0d      	ldr	r2, [pc, #52]	@ (8009208 <HAL_ETH_RxAllocateCallback+0x58>)
 80091d4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80091de:	9201      	str	r2, [sp, #4]
 80091e0:	9300      	str	r3, [sp, #0]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2241      	movs	r2, #65	@ 0x41
 80091e6:	2100      	movs	r1, #0
 80091e8:	2000      	movs	r0, #0
 80091ea:	f001 fbc1 	bl	800a970 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80091ee:	e005      	b.n	80091fc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80091f0:	4b06      	ldr	r3, [pc, #24]	@ (800920c <HAL_ETH_RxAllocateCallback+0x5c>)
 80091f2:	2201      	movs	r2, #1
 80091f4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	601a      	str	r2, [r3, #0]
}
 80091fc:	bf00      	nop
 80091fe:	3710      	adds	r7, #16
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	0801db10 	.word	0x0801db10
 8009208:	08008e5d 	.word	0x08008e5d
 800920c:	24000234 	.word	0x24000234

08009210 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8009210:	b480      	push	{r7}
 8009212:	b08d      	sub	sp, #52	@ 0x34
 8009214:	af00      	add	r7, sp, #0
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	607a      	str	r2, [r7, #4]
 800921c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 8009226:	2300      	movs	r3, #0
 8009228:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	3b20      	subs	r3, #32
 800922e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 8009230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009232:	2200      	movs	r2, #0
 8009234:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8009236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009238:	2200      	movs	r2, #0
 800923a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800923c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800923e:	887a      	ldrh	r2, [r7, #2]
 8009240:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8009242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d103      	bne.n	8009252 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800924a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800924c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800924e:	601a      	str	r2, [r3, #0]
 8009250:	e003      	b.n	800925a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8009252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009258:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800925a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800925c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800925e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8009260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009266:	e009      	b.n	800927c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8009268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800926a:	891a      	ldrh	r2, [r3, #8]
 800926c:	887b      	ldrh	r3, [r7, #2]
 800926e:	4413      	add	r3, r2
 8009270:	b29a      	uxth	r2, r3
 8009272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009274:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8009276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800927c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1f2      	bne.n	8009268 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8009282:	887b      	ldrh	r3, [r7, #2]
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	623a      	str	r2, [r7, #32]
 8009288:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	2b00      	cmp	r3, #0
 800928e:	dd1d      	ble.n	80092cc <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8009290:	6a3b      	ldr	r3, [r7, #32]
 8009292:	f003 021f 	and.w	r2, r3, #31
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	4413      	add	r3, r2
 800929a:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800929c:	6a3b      	ldr	r3, [r7, #32]
 800929e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80092a0:	f3bf 8f4f 	dsb	sy
}
 80092a4:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80092a6:	4a0d      	ldr	r2, [pc, #52]	@ (80092dc <HAL_ETH_RxLinkCallback+0xcc>)
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	3320      	adds	r3, #32
 80092b2:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80092b4:	69bb      	ldr	r3, [r7, #24]
 80092b6:	3b20      	subs	r3, #32
 80092b8:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	dcf2      	bgt.n	80092a6 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 80092c0:	f3bf 8f4f 	dsb	sy
}
 80092c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80092c6:	f3bf 8f6f 	isb	sy
}
 80092ca:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80092cc:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 80092ce:	bf00      	nop
 80092d0:	3734      	adds	r7, #52	@ 0x34
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	e000ed00 	.word	0xe000ed00

080092e0 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b0a0      	sub	sp, #128	@ 0x80
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80092e8:	f107 030c 	add.w	r3, r7, #12
 80092ec:	2264      	movs	r2, #100	@ 0x64
 80092ee:	2100      	movs	r1, #0
 80092f0:	4618      	mov	r0, r3
 80092f2:	f00d fe43 	bl	8016f7c <memset>
  int32_t PHYLinkState = 0;
 80092f6:	2300      	movs	r3, #0
 80092f8:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80092fa:	2300      	movs	r3, #0
 80092fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80092fe:	2300      	movs	r3, #0
 8009300:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009302:	2300      	movs	r3, #0
 8009304:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8009306:	483a      	ldr	r0, [pc, #232]	@ (80093f0 <ethernet_link_check_state+0x110>)
 8009308:	f7f7 ff04 	bl	8001114 <DP83848_GetLinkState>
 800930c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009314:	089b      	lsrs	r3, r3, #2
 8009316:	f003 0301 	and.w	r3, r3, #1
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00c      	beq.n	800933a <ethernet_link_check_state+0x5a>
 8009320:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009322:	2b01      	cmp	r3, #1
 8009324:	dc09      	bgt.n	800933a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8009326:	4833      	ldr	r0, [pc, #204]	@ (80093f4 <ethernet_link_check_state+0x114>)
 8009328:	f7f9 f8b6 	bl	8002498 <HAL_ETH_Stop>
    netif_set_down(netif);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f001 f89b 	bl	800a468 <netif_set_down>
    netif_set_link_down(netif);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f001 f902 	bl	800a53c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8009338:	e055      	b.n	80093e6 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009340:	f003 0304 	and.w	r3, r3, #4
 8009344:	2b00      	cmp	r3, #0
 8009346:	d14e      	bne.n	80093e6 <ethernet_link_check_state+0x106>
 8009348:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800934a:	2b01      	cmp	r3, #1
 800934c:	dd4b      	ble.n	80093e6 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800934e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009350:	3b02      	subs	r3, #2
 8009352:	2b03      	cmp	r3, #3
 8009354:	d82a      	bhi.n	80093ac <ethernet_link_check_state+0xcc>
 8009356:	a201      	add	r2, pc, #4	@ (adr r2, 800935c <ethernet_link_check_state+0x7c>)
 8009358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800935c:	0800936d 	.word	0x0800936d
 8009360:	0800937f 	.word	0x0800937f
 8009364:	0800938f 	.word	0x0800938f
 8009368:	0800939f 	.word	0x0800939f
      duplex = ETH_FULLDUPLEX_MODE;
 800936c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009370:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8009372:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009376:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009378:	2301      	movs	r3, #1
 800937a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800937c:	e017      	b.n	80093ae <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800937e:	2300      	movs	r3, #0
 8009380:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8009382:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009386:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009388:	2301      	movs	r3, #1
 800938a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800938c:	e00f      	b.n	80093ae <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800938e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009392:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8009394:	2300      	movs	r3, #0
 8009396:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009398:	2301      	movs	r3, #1
 800939a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800939c:	e007      	b.n	80093ae <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800939e:	2300      	movs	r3, #0
 80093a0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80093a2:	2300      	movs	r3, #0
 80093a4:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80093a6:	2301      	movs	r3, #1
 80093a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80093aa:	e000      	b.n	80093ae <ethernet_link_check_state+0xce>
      break;
 80093ac:	bf00      	nop
    if(linkchanged)
 80093ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d018      	beq.n	80093e6 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80093b4:	f107 030c 	add.w	r3, r7, #12
 80093b8:	4619      	mov	r1, r3
 80093ba:	480e      	ldr	r0, [pc, #56]	@ (80093f4 <ethernet_link_check_state+0x114>)
 80093bc:	f7f9 fb32 	bl	8002a24 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80093c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80093c2:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 80093c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80093c6:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80093c8:	f107 030c 	add.w	r3, r7, #12
 80093cc:	4619      	mov	r1, r3
 80093ce:	4809      	ldr	r0, [pc, #36]	@ (80093f4 <ethernet_link_check_state+0x114>)
 80093d0:	f7f9 fcfc 	bl	8002dcc <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80093d4:	4807      	ldr	r0, [pc, #28]	@ (80093f4 <ethernet_link_check_state+0x114>)
 80093d6:	f7f8 fffd 	bl	80023d4 <HAL_ETH_Start>
      netif_set_up(netif);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 ffd8 	bl	800a390 <netif_set_up>
      netif_set_link_up(netif);
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f001 f873 	bl	800a4cc <netif_set_link_up>
}
 80093e6:	bf00      	nop
 80093e8:	3780      	adds	r7, #128	@ 0x80
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop
 80093f0:	24000340 	.word	0x24000340
 80093f4:	24000238 	.word	0x24000238

080093f8 <lwip_strerr>:
 * @param err an lwip internal err_t
 * @return a string representation for err
 */
const char *
lwip_strerr(err_t err)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b083      	sub	sp, #12
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	4603      	mov	r3, r0
 8009400:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_strerr))) {
 8009402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009406:	2b00      	cmp	r3, #0
 8009408:	dc04      	bgt.n	8009414 <lwip_strerr+0x1c>
 800940a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800940e:	f113 0f10 	cmn.w	r3, #16
 8009412:	da01      	bge.n	8009418 <lwip_strerr+0x20>
    return "Unknown error.";
 8009414:	4b06      	ldr	r3, [pc, #24]	@ (8009430 <lwip_strerr+0x38>)
 8009416:	e005      	b.n	8009424 <lwip_strerr+0x2c>
  }
  return err_strerr[-err];
 8009418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800941c:	425b      	negs	r3, r3
 800941e:	4a05      	ldr	r2, [pc, #20]	@ (8009434 <lwip_strerr+0x3c>)
 8009420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8009424:	4618      	mov	r0, r3
 8009426:	370c      	adds	r7, #12
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr
 8009430:	08017dd4 	.word	0x08017dd4
 8009434:	24000038 	.word	0x24000038

08009438 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	4603      	mov	r3, r0
 8009440:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009442:	88fb      	ldrh	r3, [r7, #6]
 8009444:	021b      	lsls	r3, r3, #8
 8009446:	b21a      	sxth	r2, r3
 8009448:	88fb      	ldrh	r3, [r7, #6]
 800944a:	0a1b      	lsrs	r3, r3, #8
 800944c:	b29b      	uxth	r3, r3
 800944e:	b21b      	sxth	r3, r3
 8009450:	4313      	orrs	r3, r2
 8009452:	b21b      	sxth	r3, r3
 8009454:	b29b      	uxth	r3, r3
}
 8009456:	4618      	mov	r0, r3
 8009458:	370c      	adds	r7, #12
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr

08009462 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009462:	b480      	push	{r7}
 8009464:	b083      	sub	sp, #12
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	061a      	lsls	r2, r3, #24
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	021b      	lsls	r3, r3, #8
 8009472:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009476:	431a      	orrs	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	0a1b      	lsrs	r3, r3, #8
 800947c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009480:	431a      	orrs	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	0e1b      	lsrs	r3, r3, #24
 8009486:	4313      	orrs	r3, r2
}
 8009488:	4618      	mov	r0, r3
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8009494:	b480      	push	{r7}
 8009496:	b089      	sub	sp, #36	@ 0x24
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80094a2:	2300      	movs	r3, #0
 80094a4:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80094a6:	2300      	movs	r3, #0
 80094a8:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	f003 0301 	and.w	r3, r3, #1
 80094b0:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00d      	beq.n	80094d4 <lwip_standard_chksum+0x40>
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	dd0a      	ble.n	80094d4 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80094be:	69fa      	ldr	r2, [r7, #28]
 80094c0:	1c53      	adds	r3, r2, #1
 80094c2:	61fb      	str	r3, [r7, #28]
 80094c4:	f107 030e 	add.w	r3, r7, #14
 80094c8:	3301      	adds	r3, #1
 80094ca:	7812      	ldrb	r2, [r2, #0]
 80094cc:	701a      	strb	r2, [r3, #0]
    len--;
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	3b01      	subs	r3, #1
 80094d2:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80094d8:	e00a      	b.n	80094f0 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	1c9a      	adds	r2, r3, #2
 80094de:	61ba      	str	r2, [r7, #24]
 80094e0:	881b      	ldrh	r3, [r3, #0]
 80094e2:	461a      	mov	r2, r3
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	4413      	add	r3, r2
 80094e8:	617b      	str	r3, [r7, #20]
    len -= 2;
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	3b02      	subs	r3, #2
 80094ee:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	dcf1      	bgt.n	80094da <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	dd04      	ble.n	8009506 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80094fc:	f107 030e 	add.w	r3, r7, #14
 8009500:	69ba      	ldr	r2, [r7, #24]
 8009502:	7812      	ldrb	r2, [r2, #0]
 8009504:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8009506:	89fb      	ldrh	r3, [r7, #14]
 8009508:	461a      	mov	r2, r3
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	4413      	add	r3, r2
 800950e:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	0c1a      	lsrs	r2, r3, #16
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	b29b      	uxth	r3, r3
 8009518:	4413      	add	r3, r2
 800951a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	0c1a      	lsrs	r2, r3, #16
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	b29b      	uxth	r3, r3
 8009524:	4413      	add	r3, r2
 8009526:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d007      	beq.n	800953e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	021b      	lsls	r3, r3, #8
 8009532:	b29a      	uxth	r2, r3
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	0a1b      	lsrs	r3, r3, #8
 8009538:	b2db      	uxtb	r3, r3
 800953a:	4313      	orrs	r3, r2
 800953c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	b29b      	uxth	r3, r3
}
 8009542:	4618      	mov	r0, r3
 8009544:	3724      	adds	r7, #36	@ 0x24
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr

0800954e <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b082      	sub	sp, #8
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
 8009556:	460b      	mov	r3, r1
 8009558:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800955a:	887b      	ldrh	r3, [r7, #2]
 800955c:	4619      	mov	r1, r3
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f7ff ff98 	bl	8009494 <lwip_standard_chksum>
 8009564:	4603      	mov	r3, r0
 8009566:	43db      	mvns	r3, r3
 8009568:	b29b      	uxth	r3, r3
}
 800956a:	4618      	mov	r0, r3
 800956c:	3708      	adds	r7, #8
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b086      	sub	sp, #24
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800957a:	2300      	movs	r3, #0
 800957c:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800957e:	2300      	movs	r3, #0
 8009580:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	613b      	str	r3, [r7, #16]
 8009586:	e02b      	b.n	80095e0 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	685a      	ldr	r2, [r3, #4]
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	895b      	ldrh	r3, [r3, #10]
 8009590:	4619      	mov	r1, r3
 8009592:	4610      	mov	r0, r2
 8009594:	f7ff ff7e 	bl	8009494 <lwip_standard_chksum>
 8009598:	4603      	mov	r3, r0
 800959a:	461a      	mov	r2, r3
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	4413      	add	r3, r2
 80095a0:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	0c1a      	lsrs	r2, r3, #16
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	4413      	add	r3, r2
 80095ac:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	895b      	ldrh	r3, [r3, #10]
 80095b2:	f003 0301 	and.w	r3, r3, #1
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d00e      	beq.n	80095da <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	bf0c      	ite	eq
 80095c2:	2301      	moveq	r3, #1
 80095c4:	2300      	movne	r3, #0
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	021b      	lsls	r3, r3, #8
 80095ce:	b29a      	uxth	r2, r3
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	0a1b      	lsrs	r3, r3, #8
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	4313      	orrs	r3, r2
 80095d8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	613b      	str	r3, [r7, #16]
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1d0      	bne.n	8009588 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d007      	beq.n	80095fc <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	021b      	lsls	r3, r3, #8
 80095f0:	b29a      	uxth	r2, r3
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	0a1b      	lsrs	r3, r3, #8
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	4313      	orrs	r3, r2
 80095fa:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	b29b      	uxth	r3, r3
 8009600:	43db      	mvns	r3, r3
 8009602:	b29b      	uxth	r3, r3
}
 8009604:	4618      	mov	r0, r3
 8009606:	3718      	adds	r7, #24
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009612:	2300      	movs	r3, #0
 8009614:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8009616:	f000 f8d9 	bl	80097cc <mem_init>
  memp_init();
 800961a:	f000 fbe7 	bl	8009dec <memp_init>
  pbuf_init();
  netif_init();
 800961e:	f000 fce5 	bl	8009fec <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009622:	f007 fb85 	bl	8010d30 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009626:	f001 fe4f 	bl	800b2c8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800962a:	f007 faed 	bl	8010c08 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800962e:	bf00      	nop
 8009630:	3708      	adds	r7, #8
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
	...

08009638 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	4603      	mov	r3, r0
 8009640:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009642:	4b05      	ldr	r3, [pc, #20]	@ (8009658 <ptr_to_mem+0x20>)
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	88fb      	ldrh	r3, [r7, #6]
 8009648:	4413      	add	r3, r2
}
 800964a:	4618      	mov	r0, r3
 800964c:	370c      	adds	r7, #12
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr
 8009656:	bf00      	nop
 8009658:	24000378 	.word	0x24000378

0800965c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009664:	4b05      	ldr	r3, [pc, #20]	@ (800967c <mem_to_ptr+0x20>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	1ad3      	subs	r3, r2, r3
 800966c:	b29b      	uxth	r3, r3
}
 800966e:	4618      	mov	r0, r3
 8009670:	370c      	adds	r7, #12
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr
 800967a:	bf00      	nop
 800967c:	24000378 	.word	0x24000378

08009680 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009680:	b590      	push	{r4, r7, lr}
 8009682:	b085      	sub	sp, #20
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009688:	4b47      	ldr	r3, [pc, #284]	@ (80097a8 <plug_holes+0x128>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	429a      	cmp	r2, r3
 8009690:	d206      	bcs.n	80096a0 <plug_holes+0x20>
 8009692:	4b46      	ldr	r3, [pc, #280]	@ (80097ac <plug_holes+0x12c>)
 8009694:	f240 12df 	movw	r2, #479	@ 0x1df
 8009698:	4945      	ldr	r1, [pc, #276]	@ (80097b0 <plug_holes+0x130>)
 800969a:	4846      	ldr	r0, [pc, #280]	@ (80097b4 <plug_holes+0x134>)
 800969c:	f00d fb0e 	bl	8016cbc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80096a0:	4b45      	ldr	r3, [pc, #276]	@ (80097b8 <plug_holes+0x138>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d306      	bcc.n	80096b8 <plug_holes+0x38>
 80096aa:	4b40      	ldr	r3, [pc, #256]	@ (80097ac <plug_holes+0x12c>)
 80096ac:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80096b0:	4942      	ldr	r1, [pc, #264]	@ (80097bc <plug_holes+0x13c>)
 80096b2:	4840      	ldr	r0, [pc, #256]	@ (80097b4 <plug_holes+0x134>)
 80096b4:	f00d fb02 	bl	8016cbc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	791b      	ldrb	r3, [r3, #4]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d006      	beq.n	80096ce <plug_holes+0x4e>
 80096c0:	4b3a      	ldr	r3, [pc, #232]	@ (80097ac <plug_holes+0x12c>)
 80096c2:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80096c6:	493e      	ldr	r1, [pc, #248]	@ (80097c0 <plug_holes+0x140>)
 80096c8:	483a      	ldr	r0, [pc, #232]	@ (80097b4 <plug_holes+0x134>)
 80096ca:	f00d faf7 	bl	8016cbc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	881b      	ldrh	r3, [r3, #0]
 80096d2:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d906      	bls.n	80096e8 <plug_holes+0x68>
 80096da:	4b34      	ldr	r3, [pc, #208]	@ (80097ac <plug_holes+0x12c>)
 80096dc:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80096e0:	4938      	ldr	r1, [pc, #224]	@ (80097c4 <plug_holes+0x144>)
 80096e2:	4834      	ldr	r0, [pc, #208]	@ (80097b4 <plug_holes+0x134>)
 80096e4:	f00d faea 	bl	8016cbc <iprintf>

  nmem = ptr_to_mem(mem->next);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	881b      	ldrh	r3, [r3, #0]
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7ff ffa3 	bl	8009638 <ptr_to_mem>
 80096f2:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d025      	beq.n	8009748 <plug_holes+0xc8>
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	791b      	ldrb	r3, [r3, #4]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d121      	bne.n	8009748 <plug_holes+0xc8>
 8009704:	4b2c      	ldr	r3, [pc, #176]	@ (80097b8 <plug_holes+0x138>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	68fa      	ldr	r2, [r7, #12]
 800970a:	429a      	cmp	r2, r3
 800970c:	d01c      	beq.n	8009748 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800970e:	4b2e      	ldr	r3, [pc, #184]	@ (80097c8 <plug_holes+0x148>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	68fa      	ldr	r2, [r7, #12]
 8009714:	429a      	cmp	r2, r3
 8009716:	d102      	bne.n	800971e <plug_holes+0x9e>
      lfree = mem;
 8009718:	4a2b      	ldr	r2, [pc, #172]	@ (80097c8 <plug_holes+0x148>)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	881a      	ldrh	r2, [r3, #0]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	881b      	ldrh	r3, [r3, #0]
 800972a:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800972e:	4293      	cmp	r3, r2
 8009730:	d00a      	beq.n	8009748 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	881b      	ldrh	r3, [r3, #0]
 8009736:	4618      	mov	r0, r3
 8009738:	f7ff ff7e 	bl	8009638 <ptr_to_mem>
 800973c:	4604      	mov	r4, r0
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f7ff ff8c 	bl	800965c <mem_to_ptr>
 8009744:	4603      	mov	r3, r0
 8009746:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	885b      	ldrh	r3, [r3, #2]
 800974c:	4618      	mov	r0, r3
 800974e:	f7ff ff73 	bl	8009638 <ptr_to_mem>
 8009752:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009754:	68ba      	ldr	r2, [r7, #8]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	429a      	cmp	r2, r3
 800975a:	d020      	beq.n	800979e <plug_holes+0x11e>
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	791b      	ldrb	r3, [r3, #4]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d11c      	bne.n	800979e <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009764:	4b18      	ldr	r3, [pc, #96]	@ (80097c8 <plug_holes+0x148>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	429a      	cmp	r2, r3
 800976c:	d102      	bne.n	8009774 <plug_holes+0xf4>
      lfree = pmem;
 800976e:	4a16      	ldr	r2, [pc, #88]	@ (80097c8 <plug_holes+0x148>)
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	881a      	ldrh	r2, [r3, #0]
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	881b      	ldrh	r3, [r3, #0]
 8009780:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8009784:	4293      	cmp	r3, r2
 8009786:	d00a      	beq.n	800979e <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	881b      	ldrh	r3, [r3, #0]
 800978c:	4618      	mov	r0, r3
 800978e:	f7ff ff53 	bl	8009638 <ptr_to_mem>
 8009792:	4604      	mov	r4, r0
 8009794:	68b8      	ldr	r0, [r7, #8]
 8009796:	f7ff ff61 	bl	800965c <mem_to_ptr>
 800979a:	4603      	mov	r3, r0
 800979c:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800979e:	bf00      	nop
 80097a0:	3714      	adds	r7, #20
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd90      	pop	{r4, r7, pc}
 80097a6:	bf00      	nop
 80097a8:	24000378 	.word	0x24000378
 80097ac:	08017de4 	.word	0x08017de4
 80097b0:	08017e14 	.word	0x08017e14
 80097b4:	08017e2c 	.word	0x08017e2c
 80097b8:	2400037c 	.word	0x2400037c
 80097bc:	08017e54 	.word	0x08017e54
 80097c0:	08017e70 	.word	0x08017e70
 80097c4:	08017e8c 	.word	0x08017e8c
 80097c8:	24000380 	.word	0x24000380

080097cc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80097d2:	4b16      	ldr	r3, [pc, #88]	@ (800982c <mem_init+0x60>)
 80097d4:	4a16      	ldr	r2, [pc, #88]	@ (8009830 <mem_init+0x64>)
 80097d6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80097d8:	4b14      	ldr	r3, [pc, #80]	@ (800982c <mem_init+0x60>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 80097e4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80097f2:	f643 70e8 	movw	r0, #16360	@ 0x3fe8
 80097f6:	f7ff ff1f 	bl	8009638 <ptr_to_mem>
 80097fa:	4603      	mov	r3, r0
 80097fc:	4a0d      	ldr	r2, [pc, #52]	@ (8009834 <mem_init+0x68>)
 80097fe:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009800:	4b0c      	ldr	r3, [pc, #48]	@ (8009834 <mem_init+0x68>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2201      	movs	r2, #1
 8009806:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8009808:	4b0a      	ldr	r3, [pc, #40]	@ (8009834 <mem_init+0x68>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8009810:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8009812:	4b08      	ldr	r3, [pc, #32]	@ (8009834 <mem_init+0x68>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800981a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800981c:	4b03      	ldr	r3, [pc, #12]	@ (800982c <mem_init+0x60>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a05      	ldr	r2, [pc, #20]	@ (8009838 <mem_init+0x6c>)
 8009822:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8009824:	bf00      	nop
 8009826:	3708      	adds	r7, #8
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	24000378 	.word	0x24000378
 8009830:	30020000 	.word	0x30020000
 8009834:	2400037c 	.word	0x2400037c
 8009838:	24000380 	.word	0x24000380

0800983c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b086      	sub	sp, #24
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f7ff ff09 	bl	800965c <mem_to_ptr>
 800984a:	4603      	mov	r3, r0
 800984c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	881b      	ldrh	r3, [r3, #0]
 8009852:	4618      	mov	r0, r3
 8009854:	f7ff fef0 	bl	8009638 <ptr_to_mem>
 8009858:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	885b      	ldrh	r3, [r3, #2]
 800985e:	4618      	mov	r0, r3
 8009860:	f7ff feea 	bl	8009638 <ptr_to_mem>
 8009864:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	881b      	ldrh	r3, [r3, #0]
 800986a:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800986e:	4293      	cmp	r3, r2
 8009870:	d819      	bhi.n	80098a6 <mem_link_valid+0x6a>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	885b      	ldrh	r3, [r3, #2]
 8009876:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800987a:	4293      	cmp	r3, r2
 800987c:	d813      	bhi.n	80098a6 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009882:	8afa      	ldrh	r2, [r7, #22]
 8009884:	429a      	cmp	r2, r3
 8009886:	d004      	beq.n	8009892 <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	881b      	ldrh	r3, [r3, #0]
 800988c:	8afa      	ldrh	r2, [r7, #22]
 800988e:	429a      	cmp	r2, r3
 8009890:	d109      	bne.n	80098a6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009892:	4b08      	ldr	r3, [pc, #32]	@ (80098b4 <mem_link_valid+0x78>)
 8009894:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009896:	693a      	ldr	r2, [r7, #16]
 8009898:	429a      	cmp	r2, r3
 800989a:	d006      	beq.n	80098aa <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	885b      	ldrh	r3, [r3, #2]
 80098a0:	8afa      	ldrh	r2, [r7, #22]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d001      	beq.n	80098aa <mem_link_valid+0x6e>
    return 0;
 80098a6:	2300      	movs	r3, #0
 80098a8:	e000      	b.n	80098ac <mem_link_valid+0x70>
  }
  return 1;
 80098aa:	2301      	movs	r3, #1
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3718      	adds	r7, #24
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	2400037c 	.word	0x2400037c

080098b8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d04c      	beq.n	8009960 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f003 0303 	and.w	r3, r3, #3
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d007      	beq.n	80098e0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80098d0:	4b25      	ldr	r3, [pc, #148]	@ (8009968 <mem_free+0xb0>)
 80098d2:	f240 2273 	movw	r2, #627	@ 0x273
 80098d6:	4925      	ldr	r1, [pc, #148]	@ (800996c <mem_free+0xb4>)
 80098d8:	4825      	ldr	r0, [pc, #148]	@ (8009970 <mem_free+0xb8>)
 80098da:	f00d f9ef 	bl	8016cbc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80098de:	e040      	b.n	8009962 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	3b08      	subs	r3, #8
 80098e4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80098e6:	4b23      	ldr	r3, [pc, #140]	@ (8009974 <mem_free+0xbc>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	68fa      	ldr	r2, [r7, #12]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d306      	bcc.n	80098fe <mem_free+0x46>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f103 020c 	add.w	r2, r3, #12
 80098f6:	4b20      	ldr	r3, [pc, #128]	@ (8009978 <mem_free+0xc0>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d907      	bls.n	800990e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80098fe:	4b1a      	ldr	r3, [pc, #104]	@ (8009968 <mem_free+0xb0>)
 8009900:	f240 227f 	movw	r2, #639	@ 0x27f
 8009904:	491d      	ldr	r1, [pc, #116]	@ (800997c <mem_free+0xc4>)
 8009906:	481a      	ldr	r0, [pc, #104]	@ (8009970 <mem_free+0xb8>)
 8009908:	f00d f9d8 	bl	8016cbc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800990c:	e029      	b.n	8009962 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	791b      	ldrb	r3, [r3, #4]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d107      	bne.n	8009926 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009916:	4b14      	ldr	r3, [pc, #80]	@ (8009968 <mem_free+0xb0>)
 8009918:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800991c:	4918      	ldr	r1, [pc, #96]	@ (8009980 <mem_free+0xc8>)
 800991e:	4814      	ldr	r0, [pc, #80]	@ (8009970 <mem_free+0xb8>)
 8009920:	f00d f9cc 	bl	8016cbc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009924:	e01d      	b.n	8009962 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	f7ff ff88 	bl	800983c <mem_link_valid>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d107      	bne.n	8009942 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009932:	4b0d      	ldr	r3, [pc, #52]	@ (8009968 <mem_free+0xb0>)
 8009934:	f240 2295 	movw	r2, #661	@ 0x295
 8009938:	4912      	ldr	r1, [pc, #72]	@ (8009984 <mem_free+0xcc>)
 800993a:	480d      	ldr	r0, [pc, #52]	@ (8009970 <mem_free+0xb8>)
 800993c:	f00d f9be 	bl	8016cbc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009940:	e00f      	b.n	8009962 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2200      	movs	r2, #0
 8009946:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8009948:	4b0f      	ldr	r3, [pc, #60]	@ (8009988 <mem_free+0xd0>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	429a      	cmp	r2, r3
 8009950:	d202      	bcs.n	8009958 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009952:	4a0d      	ldr	r2, [pc, #52]	@ (8009988 <mem_free+0xd0>)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f7ff fe91 	bl	8009680 <plug_holes>
 800995e:	e000      	b.n	8009962 <mem_free+0xaa>
    return;
 8009960:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	08017de4 	.word	0x08017de4
 800996c:	08017eb8 	.word	0x08017eb8
 8009970:	08017e2c 	.word	0x08017e2c
 8009974:	24000378 	.word	0x24000378
 8009978:	2400037c 	.word	0x2400037c
 800997c:	08017edc 	.word	0x08017edc
 8009980:	08017ef8 	.word	0x08017ef8
 8009984:	08017f20 	.word	0x08017f20
 8009988:	24000380 	.word	0x24000380

0800998c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b088      	sub	sp, #32
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	460b      	mov	r3, r1
 8009996:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009998:	887b      	ldrh	r3, [r7, #2]
 800999a:	3303      	adds	r3, #3
 800999c:	b29b      	uxth	r3, r3
 800999e:	f023 0303 	bic.w	r3, r3, #3
 80099a2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80099a4:	8bfb      	ldrh	r3, [r7, #30]
 80099a6:	2b0b      	cmp	r3, #11
 80099a8:	d801      	bhi.n	80099ae <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80099aa:	230c      	movs	r3, #12
 80099ac:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80099ae:	8bfb      	ldrh	r3, [r7, #30]
 80099b0:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d803      	bhi.n	80099c0 <mem_trim+0x34>
 80099b8:	8bfa      	ldrh	r2, [r7, #30]
 80099ba:	887b      	ldrh	r3, [r7, #2]
 80099bc:	429a      	cmp	r2, r3
 80099be:	d201      	bcs.n	80099c4 <mem_trim+0x38>
    return NULL;
 80099c0:	2300      	movs	r3, #0
 80099c2:	e0d0      	b.n	8009b66 <mem_trim+0x1da>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80099c4:	4b6a      	ldr	r3, [pc, #424]	@ (8009b70 <mem_trim+0x1e4>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d304      	bcc.n	80099d8 <mem_trim+0x4c>
 80099ce:	4b69      	ldr	r3, [pc, #420]	@ (8009b74 <mem_trim+0x1e8>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d306      	bcc.n	80099e6 <mem_trim+0x5a>
 80099d8:	4b67      	ldr	r3, [pc, #412]	@ (8009b78 <mem_trim+0x1ec>)
 80099da:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80099de:	4967      	ldr	r1, [pc, #412]	@ (8009b7c <mem_trim+0x1f0>)
 80099e0:	4867      	ldr	r0, [pc, #412]	@ (8009b80 <mem_trim+0x1f4>)
 80099e2:	f00d f96b 	bl	8016cbc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80099e6:	4b62      	ldr	r3, [pc, #392]	@ (8009b70 <mem_trim+0x1e4>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d304      	bcc.n	80099fa <mem_trim+0x6e>
 80099f0:	4b60      	ldr	r3, [pc, #384]	@ (8009b74 <mem_trim+0x1e8>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d301      	bcc.n	80099fe <mem_trim+0x72>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	e0b3      	b.n	8009b66 <mem_trim+0x1da>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	3b08      	subs	r3, #8
 8009a02:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8009a04:	69b8      	ldr	r0, [r7, #24]
 8009a06:	f7ff fe29 	bl	800965c <mem_to_ptr>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009a0e:	69bb      	ldr	r3, [r7, #24]
 8009a10:	881a      	ldrh	r2, [r3, #0]
 8009a12:	8afb      	ldrh	r3, [r7, #22]
 8009a14:	1ad3      	subs	r3, r2, r3
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	3b08      	subs	r3, #8
 8009a1a:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009a1c:	8bfa      	ldrh	r2, [r7, #30]
 8009a1e:	8abb      	ldrh	r3, [r7, #20]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d906      	bls.n	8009a32 <mem_trim+0xa6>
 8009a24:	4b54      	ldr	r3, [pc, #336]	@ (8009b78 <mem_trim+0x1ec>)
 8009a26:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8009a2a:	4956      	ldr	r1, [pc, #344]	@ (8009b84 <mem_trim+0x1f8>)
 8009a2c:	4854      	ldr	r0, [pc, #336]	@ (8009b80 <mem_trim+0x1f4>)
 8009a2e:	f00d f945 	bl	8016cbc <iprintf>
  if (newsize > size) {
 8009a32:	8bfa      	ldrh	r2, [r7, #30]
 8009a34:	8abb      	ldrh	r3, [r7, #20]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d901      	bls.n	8009a3e <mem_trim+0xb2>
    /* not supported */
    return NULL;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	e093      	b.n	8009b66 <mem_trim+0x1da>
  }
  if (newsize == size) {
 8009a3e:	8bfa      	ldrh	r2, [r7, #30]
 8009a40:	8abb      	ldrh	r3, [r7, #20]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d101      	bne.n	8009a4a <mem_trim+0xbe>
    /* No change in size, simply return */
    return rmem;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	e08d      	b.n	8009b66 <mem_trim+0x1da>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	881b      	ldrh	r3, [r3, #0]
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7ff fdf2 	bl	8009638 <ptr_to_mem>
 8009a54:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	791b      	ldrb	r3, [r3, #4]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d141      	bne.n	8009ae2 <mem_trim+0x156>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	881b      	ldrh	r3, [r3, #0]
 8009a62:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d106      	bne.n	8009a78 <mem_trim+0xec>
 8009a6a:	4b43      	ldr	r3, [pc, #268]	@ (8009b78 <mem_trim+0x1ec>)
 8009a6c:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8009a70:	4945      	ldr	r1, [pc, #276]	@ (8009b88 <mem_trim+0x1fc>)
 8009a72:	4843      	ldr	r0, [pc, #268]	@ (8009b80 <mem_trim+0x1f4>)
 8009a74:	f00d f922 	bl	8016cbc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	881b      	ldrh	r3, [r3, #0]
 8009a7c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009a7e:	8afa      	ldrh	r2, [r7, #22]
 8009a80:	8bfb      	ldrh	r3, [r7, #30]
 8009a82:	4413      	add	r3, r2
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	3308      	adds	r3, #8
 8009a88:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8009a8a:	4b40      	ldr	r3, [pc, #256]	@ (8009b8c <mem_trim+0x200>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	693a      	ldr	r2, [r7, #16]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d106      	bne.n	8009aa2 <mem_trim+0x116>
      lfree = ptr_to_mem(ptr2);
 8009a94:	89fb      	ldrh	r3, [r7, #14]
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7ff fdce 	bl	8009638 <ptr_to_mem>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	4a3b      	ldr	r2, [pc, #236]	@ (8009b8c <mem_trim+0x200>)
 8009aa0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8009aa2:	89fb      	ldrh	r3, [r7, #14]
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7ff fdc7 	bl	8009638 <ptr_to_mem>
 8009aaa:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	89ba      	ldrh	r2, [r7, #12]
 8009ab6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	8afa      	ldrh	r2, [r7, #22]
 8009abc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	89fa      	ldrh	r2, [r7, #14]
 8009ac2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	881b      	ldrh	r3, [r3, #0]
 8009ac8:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d049      	beq.n	8009b64 <mem_trim+0x1d8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	881b      	ldrh	r3, [r3, #0]
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7ff fdaf 	bl	8009638 <ptr_to_mem>
 8009ada:	4602      	mov	r2, r0
 8009adc:	89fb      	ldrh	r3, [r7, #14]
 8009ade:	8053      	strh	r3, [r2, #2]
 8009ae0:	e040      	b.n	8009b64 <mem_trim+0x1d8>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009ae2:	8bfb      	ldrh	r3, [r7, #30]
 8009ae4:	f103 0214 	add.w	r2, r3, #20
 8009ae8:	8abb      	ldrh	r3, [r7, #20]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d83a      	bhi.n	8009b64 <mem_trim+0x1d8>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009aee:	8afa      	ldrh	r2, [r7, #22]
 8009af0:	8bfb      	ldrh	r3, [r7, #30]
 8009af2:	4413      	add	r3, r2
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	3308      	adds	r3, #8
 8009af8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009afa:	69bb      	ldr	r3, [r7, #24]
 8009afc:	881b      	ldrh	r3, [r3, #0]
 8009afe:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d106      	bne.n	8009b14 <mem_trim+0x188>
 8009b06:	4b1c      	ldr	r3, [pc, #112]	@ (8009b78 <mem_trim+0x1ec>)
 8009b08:	f240 3216 	movw	r2, #790	@ 0x316
 8009b0c:	491e      	ldr	r1, [pc, #120]	@ (8009b88 <mem_trim+0x1fc>)
 8009b0e:	481c      	ldr	r0, [pc, #112]	@ (8009b80 <mem_trim+0x1f4>)
 8009b10:	f00d f8d4 	bl	8016cbc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8009b14:	89fb      	ldrh	r3, [r7, #14]
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7ff fd8e 	bl	8009638 <ptr_to_mem>
 8009b1c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8009b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8009b8c <mem_trim+0x200>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	693a      	ldr	r2, [r7, #16]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d202      	bcs.n	8009b2e <mem_trim+0x1a2>
      lfree = mem2;
 8009b28:	4a18      	ldr	r2, [pc, #96]	@ (8009b8c <mem_trim+0x200>)
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	2200      	movs	r2, #0
 8009b32:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	881a      	ldrh	r2, [r3, #0]
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	8afa      	ldrh	r2, [r7, #22]
 8009b40:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	89fa      	ldrh	r2, [r7, #14]
 8009b46:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	881b      	ldrh	r3, [r3, #0]
 8009b4c:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d007      	beq.n	8009b64 <mem_trim+0x1d8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	881b      	ldrh	r3, [r3, #0]
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f7ff fd6d 	bl	8009638 <ptr_to_mem>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	89fb      	ldrh	r3, [r7, #14]
 8009b62:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8009b64:	687b      	ldr	r3, [r7, #4]
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3720      	adds	r7, #32
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	24000378 	.word	0x24000378
 8009b74:	2400037c 	.word	0x2400037c
 8009b78:	08017de4 	.word	0x08017de4
 8009b7c:	08017f54 	.word	0x08017f54
 8009b80:	08017e2c 	.word	0x08017e2c
 8009b84:	08017f6c 	.word	0x08017f6c
 8009b88:	08017f8c 	.word	0x08017f8c
 8009b8c:	24000380 	.word	0x24000380

08009b90 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b088      	sub	sp, #32
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	4603      	mov	r3, r0
 8009b98:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009b9a:	88fb      	ldrh	r3, [r7, #6]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d101      	bne.n	8009ba4 <mem_malloc+0x14>
    return NULL;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	e0dd      	b.n	8009d60 <mem_malloc+0x1d0>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009ba4:	88fb      	ldrh	r3, [r7, #6]
 8009ba6:	3303      	adds	r3, #3
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	f023 0303 	bic.w	r3, r3, #3
 8009bae:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8009bb0:	8bbb      	ldrh	r3, [r7, #28]
 8009bb2:	2b0b      	cmp	r3, #11
 8009bb4:	d801      	bhi.n	8009bba <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8009bb6:	230c      	movs	r3, #12
 8009bb8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009bba:	8bbb      	ldrh	r3, [r7, #28]
 8009bbc:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d803      	bhi.n	8009bcc <mem_malloc+0x3c>
 8009bc4:	8bba      	ldrh	r2, [r7, #28]
 8009bc6:	88fb      	ldrh	r3, [r7, #6]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d201      	bcs.n	8009bd0 <mem_malloc+0x40>
    return NULL;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	e0c7      	b.n	8009d60 <mem_malloc+0x1d0>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009bd0:	4b65      	ldr	r3, [pc, #404]	@ (8009d68 <mem_malloc+0x1d8>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f7ff fd41 	bl	800965c <mem_to_ptr>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	83fb      	strh	r3, [r7, #30]
 8009bde:	e0b6      	b.n	8009d4e <mem_malloc+0x1be>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8009be0:	8bfb      	ldrh	r3, [r7, #30]
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7ff fd28 	bl	8009638 <ptr_to_mem>
 8009be8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	791b      	ldrb	r3, [r3, #4]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	f040 80a6 	bne.w	8009d40 <mem_malloc+0x1b0>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	881b      	ldrh	r3, [r3, #0]
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	8bfb      	ldrh	r3, [r7, #30]
 8009bfc:	1ad3      	subs	r3, r2, r3
 8009bfe:	f1a3 0208 	sub.w	r2, r3, #8
 8009c02:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8009c04:	429a      	cmp	r2, r3
 8009c06:	f0c0 809b 	bcc.w	8009d40 <mem_malloc+0x1b0>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	881b      	ldrh	r3, [r3, #0]
 8009c0e:	461a      	mov	r2, r3
 8009c10:	8bfb      	ldrh	r3, [r7, #30]
 8009c12:	1ad3      	subs	r3, r2, r3
 8009c14:	f1a3 0208 	sub.w	r2, r3, #8
 8009c18:	8bbb      	ldrh	r3, [r7, #28]
 8009c1a:	3314      	adds	r3, #20
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d335      	bcc.n	8009c8c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009c20:	8bfa      	ldrh	r2, [r7, #30]
 8009c22:	8bbb      	ldrh	r3, [r7, #28]
 8009c24:	4413      	add	r3, r2
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	3308      	adds	r3, #8
 8009c2a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009c2c:	8a7b      	ldrh	r3, [r7, #18]
 8009c2e:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d106      	bne.n	8009c44 <mem_malloc+0xb4>
 8009c36:	4b4d      	ldr	r3, [pc, #308]	@ (8009d6c <mem_malloc+0x1dc>)
 8009c38:	f240 3287 	movw	r2, #903	@ 0x387
 8009c3c:	494c      	ldr	r1, [pc, #304]	@ (8009d70 <mem_malloc+0x1e0>)
 8009c3e:	484d      	ldr	r0, [pc, #308]	@ (8009d74 <mem_malloc+0x1e4>)
 8009c40:	f00d f83c 	bl	8016cbc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009c44:	8a7b      	ldrh	r3, [r7, #18]
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7ff fcf6 	bl	8009638 <ptr_to_mem>
 8009c4c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2200      	movs	r2, #0
 8009c52:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	881a      	ldrh	r2, [r3, #0]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	8bfa      	ldrh	r2, [r7, #30]
 8009c60:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	8a7a      	ldrh	r2, [r7, #18]
 8009c66:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	881b      	ldrh	r3, [r3, #0]
 8009c72:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d00b      	beq.n	8009c92 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	881b      	ldrh	r3, [r3, #0]
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7ff fcda 	bl	8009638 <ptr_to_mem>
 8009c84:	4602      	mov	r2, r0
 8009c86:	8a7b      	ldrh	r3, [r7, #18]
 8009c88:	8053      	strh	r3, [r2, #2]
 8009c8a:	e002      	b.n	8009c92 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009c92:	4b35      	ldr	r3, [pc, #212]	@ (8009d68 <mem_malloc+0x1d8>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	697a      	ldr	r2, [r7, #20]
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d127      	bne.n	8009cec <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8009c9c:	4b32      	ldr	r3, [pc, #200]	@ (8009d68 <mem_malloc+0x1d8>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009ca2:	e005      	b.n	8009cb0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8009ca4:	69bb      	ldr	r3, [r7, #24]
 8009ca6:	881b      	ldrh	r3, [r3, #0]
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7ff fcc5 	bl	8009638 <ptr_to_mem>
 8009cae:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	791b      	ldrb	r3, [r3, #4]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d004      	beq.n	8009cc2 <mem_malloc+0x132>
 8009cb8:	4b2f      	ldr	r3, [pc, #188]	@ (8009d78 <mem_malloc+0x1e8>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	69ba      	ldr	r2, [r7, #24]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d1f0      	bne.n	8009ca4 <mem_malloc+0x114>
          }
          lfree = cur;
 8009cc2:	4a29      	ldr	r2, [pc, #164]	@ (8009d68 <mem_malloc+0x1d8>)
 8009cc4:	69bb      	ldr	r3, [r7, #24]
 8009cc6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009cc8:	4b27      	ldr	r3, [pc, #156]	@ (8009d68 <mem_malloc+0x1d8>)
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	4b2a      	ldr	r3, [pc, #168]	@ (8009d78 <mem_malloc+0x1e8>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d00b      	beq.n	8009cec <mem_malloc+0x15c>
 8009cd4:	4b24      	ldr	r3, [pc, #144]	@ (8009d68 <mem_malloc+0x1d8>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	791b      	ldrb	r3, [r3, #4]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d006      	beq.n	8009cec <mem_malloc+0x15c>
 8009cde:	4b23      	ldr	r3, [pc, #140]	@ (8009d6c <mem_malloc+0x1dc>)
 8009ce0:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8009ce4:	4925      	ldr	r1, [pc, #148]	@ (8009d7c <mem_malloc+0x1ec>)
 8009ce6:	4823      	ldr	r0, [pc, #140]	@ (8009d74 <mem_malloc+0x1e4>)
 8009ce8:	f00c ffe8 	bl	8016cbc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009cec:	8bba      	ldrh	r2, [r7, #28]
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	4413      	add	r3, r2
 8009cf2:	3308      	adds	r3, #8
 8009cf4:	4a20      	ldr	r2, [pc, #128]	@ (8009d78 <mem_malloc+0x1e8>)
 8009cf6:	6812      	ldr	r2, [r2, #0]
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d906      	bls.n	8009d0a <mem_malloc+0x17a>
 8009cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8009d6c <mem_malloc+0x1dc>)
 8009cfe:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8009d02:	491f      	ldr	r1, [pc, #124]	@ (8009d80 <mem_malloc+0x1f0>)
 8009d04:	481b      	ldr	r0, [pc, #108]	@ (8009d74 <mem_malloc+0x1e4>)
 8009d06:	f00c ffd9 	bl	8016cbc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	f003 0303 	and.w	r3, r3, #3
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d006      	beq.n	8009d22 <mem_malloc+0x192>
 8009d14:	4b15      	ldr	r3, [pc, #84]	@ (8009d6c <mem_malloc+0x1dc>)
 8009d16:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8009d1a:	491a      	ldr	r1, [pc, #104]	@ (8009d84 <mem_malloc+0x1f4>)
 8009d1c:	4815      	ldr	r0, [pc, #84]	@ (8009d74 <mem_malloc+0x1e4>)
 8009d1e:	f00c ffcd 	bl	8016cbc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	f003 0303 	and.w	r3, r3, #3
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d006      	beq.n	8009d3a <mem_malloc+0x1aa>
 8009d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8009d6c <mem_malloc+0x1dc>)
 8009d2e:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8009d32:	4915      	ldr	r1, [pc, #84]	@ (8009d88 <mem_malloc+0x1f8>)
 8009d34:	480f      	ldr	r0, [pc, #60]	@ (8009d74 <mem_malloc+0x1e4>)
 8009d36:	f00c ffc1 	bl	8016cbc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	3308      	adds	r3, #8
 8009d3e:	e00f      	b.n	8009d60 <mem_malloc+0x1d0>
         ptr = ptr_to_mem(ptr)->next) {
 8009d40:	8bfb      	ldrh	r3, [r7, #30]
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7ff fc78 	bl	8009638 <ptr_to_mem>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	881b      	ldrh	r3, [r3, #0]
 8009d4c:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009d4e:	8bfa      	ldrh	r2, [r7, #30]
 8009d50:	8bb9      	ldrh	r1, [r7, #28]
 8009d52:	f643 73e8 	movw	r3, #16360	@ 0x3fe8
 8009d56:	1a5b      	subs	r3, r3, r1
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	f4ff af41 	bcc.w	8009be0 <mem_malloc+0x50>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009d5e:	2300      	movs	r3, #0
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3720      	adds	r7, #32
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	24000380 	.word	0x24000380
 8009d6c:	08017de4 	.word	0x08017de4
 8009d70:	08017f8c 	.word	0x08017f8c
 8009d74:	08017e2c 	.word	0x08017e2c
 8009d78:	2400037c 	.word	0x2400037c
 8009d7c:	08017fa0 	.word	0x08017fa0
 8009d80:	08017fbc 	.word	0x08017fbc
 8009d84:	08017fec 	.word	0x08017fec
 8009d88:	0801801c 	.word	0x0801801c

08009d8c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b085      	sub	sp, #20
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	689b      	ldr	r3, [r3, #8]
 8009da0:	3303      	adds	r3, #3
 8009da2:	f023 0303 	bic.w	r3, r3, #3
 8009da6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009da8:	2300      	movs	r3, #0
 8009daa:	60fb      	str	r3, [r7, #12]
 8009dac:	e011      	b.n	8009dd2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	68ba      	ldr	r2, [r7, #8]
 8009dbe:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	889b      	ldrh	r3, [r3, #4]
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	4413      	add	r3, r2
 8009dca:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	3301      	adds	r3, #1
 8009dd0:	60fb      	str	r3, [r7, #12]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	88db      	ldrh	r3, [r3, #6]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	dbe7      	blt.n	8009dae <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009dde:	bf00      	nop
 8009de0:	bf00      	nop
 8009de2:	3714      	adds	r7, #20
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr

08009dec <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009df2:	2300      	movs	r3, #0
 8009df4:	80fb      	strh	r3, [r7, #6]
 8009df6:	e009      	b.n	8009e0c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009df8:	88fb      	ldrh	r3, [r7, #6]
 8009dfa:	4a08      	ldr	r2, [pc, #32]	@ (8009e1c <memp_init+0x30>)
 8009dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7ff ffc3 	bl	8009d8c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009e06:	88fb      	ldrh	r3, [r7, #6]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	80fb      	strh	r3, [r7, #6]
 8009e0c:	88fb      	ldrh	r3, [r7, #6]
 8009e0e:	2b08      	cmp	r3, #8
 8009e10:	d9f2      	bls.n	8009df8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009e12:	bf00      	nop
 8009e14:	bf00      	nop
 8009e16:	3708      	adds	r7, #8
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	0801dbb0 	.word	0x0801dbb0

08009e20 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d012      	beq.n	8009e5c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	6812      	ldr	r2, [r2, #0]
 8009e3e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f003 0303 	and.w	r3, r3, #3
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d006      	beq.n	8009e58 <do_memp_malloc_pool+0x38>
 8009e4a:	4b07      	ldr	r3, [pc, #28]	@ (8009e68 <do_memp_malloc_pool+0x48>)
 8009e4c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8009e50:	4906      	ldr	r1, [pc, #24]	@ (8009e6c <do_memp_malloc_pool+0x4c>)
 8009e52:	4807      	ldr	r0, [pc, #28]	@ (8009e70 <do_memp_malloc_pool+0x50>)
 8009e54:	f00c ff32 	bl	8016cbc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	e000      	b.n	8009e5e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009e5c:	2300      	movs	r3, #0
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3710      	adds	r7, #16
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	080180a8 	.word	0x080180a8
 8009e6c:	080180d8 	.word	0x080180d8
 8009e70:	080180fc 	.word	0x080180fc

08009e74 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b082      	sub	sp, #8
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d106      	bne.n	8009e90 <memp_malloc_pool+0x1c>
 8009e82:	4b0a      	ldr	r3, [pc, #40]	@ (8009eac <memp_malloc_pool+0x38>)
 8009e84:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8009e88:	4909      	ldr	r1, [pc, #36]	@ (8009eb0 <memp_malloc_pool+0x3c>)
 8009e8a:	480a      	ldr	r0, [pc, #40]	@ (8009eb4 <memp_malloc_pool+0x40>)
 8009e8c:	f00c ff16 	bl	8016cbc <iprintf>
  if (desc == NULL) {
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d101      	bne.n	8009e9a <memp_malloc_pool+0x26>
    return NULL;
 8009e96:	2300      	movs	r3, #0
 8009e98:	e003      	b.n	8009ea2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f7ff ffc0 	bl	8009e20 <do_memp_malloc_pool>
 8009ea0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3708      	adds	r7, #8
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	080180a8 	.word	0x080180a8
 8009eb0:	08018124 	.word	0x08018124
 8009eb4:	080180fc 	.word	0x080180fc

08009eb8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b084      	sub	sp, #16
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009ec2:	79fb      	ldrb	r3, [r7, #7]
 8009ec4:	2b08      	cmp	r3, #8
 8009ec6:	d908      	bls.n	8009eda <memp_malloc+0x22>
 8009ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8009ef4 <memp_malloc+0x3c>)
 8009eca:	f240 1257 	movw	r2, #343	@ 0x157
 8009ece:	490a      	ldr	r1, [pc, #40]	@ (8009ef8 <memp_malloc+0x40>)
 8009ed0:	480a      	ldr	r0, [pc, #40]	@ (8009efc <memp_malloc+0x44>)
 8009ed2:	f00c fef3 	bl	8016cbc <iprintf>
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	e008      	b.n	8009eec <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009eda:	79fb      	ldrb	r3, [r7, #7]
 8009edc:	4a08      	ldr	r2, [pc, #32]	@ (8009f00 <memp_malloc+0x48>)
 8009ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7ff ff9c 	bl	8009e20 <do_memp_malloc_pool>
 8009ee8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009eea:	68fb      	ldr	r3, [r7, #12]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3710      	adds	r7, #16
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	080180a8 	.word	0x080180a8
 8009ef8:	08018138 	.word	0x08018138
 8009efc:	080180fc 	.word	0x080180fc
 8009f00:	0801dbb0 	.word	0x0801dbb0

08009f04 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	f003 0303 	and.w	r3, r3, #3
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d006      	beq.n	8009f26 <do_memp_free_pool+0x22>
 8009f18:	4b0a      	ldr	r3, [pc, #40]	@ (8009f44 <do_memp_free_pool+0x40>)
 8009f1a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8009f1e:	490a      	ldr	r1, [pc, #40]	@ (8009f48 <do_memp_free_pool+0x44>)
 8009f20:	480a      	ldr	r0, [pc, #40]	@ (8009f4c <do_memp_free_pool+0x48>)
 8009f22:	f00c fecb 	bl	8016cbc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	68fa      	ldr	r2, [r7, #12]
 8009f3a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8009f3c:	bf00      	nop
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	080180a8 	.word	0x080180a8
 8009f48:	08018158 	.word	0x08018158
 8009f4c:	080180fc 	.word	0x080180fc

08009f50 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d106      	bne.n	8009f6e <memp_free_pool+0x1e>
 8009f60:	4b0a      	ldr	r3, [pc, #40]	@ (8009f8c <memp_free_pool+0x3c>)
 8009f62:	f240 1295 	movw	r2, #405	@ 0x195
 8009f66:	490a      	ldr	r1, [pc, #40]	@ (8009f90 <memp_free_pool+0x40>)
 8009f68:	480a      	ldr	r0, [pc, #40]	@ (8009f94 <memp_free_pool+0x44>)
 8009f6a:	f00c fea7 	bl	8016cbc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d007      	beq.n	8009f84 <memp_free_pool+0x34>
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d004      	beq.n	8009f84 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8009f7a:	6839      	ldr	r1, [r7, #0]
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f7ff ffc1 	bl	8009f04 <do_memp_free_pool>
 8009f82:	e000      	b.n	8009f86 <memp_free_pool+0x36>
    return;
 8009f84:	bf00      	nop
}
 8009f86:	3708      	adds	r7, #8
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	080180a8 	.word	0x080180a8
 8009f90:	08018124 	.word	0x08018124
 8009f94:	080180fc 	.word	0x080180fc

08009f98 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	6039      	str	r1, [r7, #0]
 8009fa2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009fa4:	79fb      	ldrb	r3, [r7, #7]
 8009fa6:	2b08      	cmp	r3, #8
 8009fa8:	d907      	bls.n	8009fba <memp_free+0x22>
 8009faa:	4b0c      	ldr	r3, [pc, #48]	@ (8009fdc <memp_free+0x44>)
 8009fac:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8009fb0:	490b      	ldr	r1, [pc, #44]	@ (8009fe0 <memp_free+0x48>)
 8009fb2:	480c      	ldr	r0, [pc, #48]	@ (8009fe4 <memp_free+0x4c>)
 8009fb4:	f00c fe82 	bl	8016cbc <iprintf>
 8009fb8:	e00c      	b.n	8009fd4 <memp_free+0x3c>

  if (mem == NULL) {
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d008      	beq.n	8009fd2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009fc0:	79fb      	ldrb	r3, [r7, #7]
 8009fc2:	4a09      	ldr	r2, [pc, #36]	@ (8009fe8 <memp_free+0x50>)
 8009fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fc8:	6839      	ldr	r1, [r7, #0]
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7ff ff9a 	bl	8009f04 <do_memp_free_pool>
 8009fd0:	e000      	b.n	8009fd4 <memp_free+0x3c>
    return;
 8009fd2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009fd4:	3708      	adds	r7, #8
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	080180a8 	.word	0x080180a8
 8009fe0:	08018178 	.word	0x08018178
 8009fe4:	080180fc 	.word	0x080180fc
 8009fe8:	0801dbb0 	.word	0x0801dbb0

08009fec <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009fec:	b480      	push	{r7}
 8009fee:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009ff0:	bf00      	nop
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr
	...

08009ffc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b086      	sub	sp, #24
 800a000:	af00      	add	r7, sp, #0
 800a002:	60f8      	str	r0, [r7, #12]
 800a004:	60b9      	str	r1, [r7, #8]
 800a006:	607a      	str	r2, [r7, #4]
 800a008:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d108      	bne.n	800a022 <netif_add+0x26>
 800a010:	4b5b      	ldr	r3, [pc, #364]	@ (800a180 <netif_add+0x184>)
 800a012:	f240 1227 	movw	r2, #295	@ 0x127
 800a016:	495b      	ldr	r1, [pc, #364]	@ (800a184 <netif_add+0x188>)
 800a018:	485b      	ldr	r0, [pc, #364]	@ (800a188 <netif_add+0x18c>)
 800a01a:	f00c fe4f 	bl	8016cbc <iprintf>
 800a01e:	2300      	movs	r3, #0
 800a020:	e0a9      	b.n	800a176 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a024:	2b00      	cmp	r3, #0
 800a026:	d108      	bne.n	800a03a <netif_add+0x3e>
 800a028:	4b55      	ldr	r3, [pc, #340]	@ (800a180 <netif_add+0x184>)
 800a02a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800a02e:	4957      	ldr	r1, [pc, #348]	@ (800a18c <netif_add+0x190>)
 800a030:	4855      	ldr	r0, [pc, #340]	@ (800a188 <netif_add+0x18c>)
 800a032:	f00c fe43 	bl	8016cbc <iprintf>
 800a036:	2300      	movs	r3, #0
 800a038:	e09d      	b.n	800a176 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d101      	bne.n	800a044 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a040:	4b53      	ldr	r3, [pc, #332]	@ (800a190 <netif_add+0x194>)
 800a042:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d101      	bne.n	800a04e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a04a:	4b51      	ldr	r3, [pc, #324]	@ (800a190 <netif_add+0x194>)
 800a04c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d101      	bne.n	800a058 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a054:	4b4e      	ldr	r3, [pc, #312]	@ (800a190 <netif_add+0x194>)
 800a056:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2200      	movs	r2, #0
 800a05c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2200      	movs	r2, #0
 800a062:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2200      	movs	r2, #0
 800a068:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	4a49      	ldr	r2, [pc, #292]	@ (800a194 <netif_add+0x198>)
 800a06e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2200      	movs	r2, #0
 800a074:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2200      	movs	r2, #0
 800a07a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	3324      	adds	r3, #36	@ 0x24
 800a082:	2204      	movs	r2, #4
 800a084:	2100      	movs	r1, #0
 800a086:	4618      	mov	r0, r3
 800a088:	f00c ff78 	bl	8016f7c <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2200      	movs	r2, #0
 800a090:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	6a3a      	ldr	r2, [r7, #32]
 800a096:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a098:	4b3f      	ldr	r3, [pc, #252]	@ (800a198 <netif_add+0x19c>)
 800a09a:	781a      	ldrb	r2, [r3, #0]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a0a6:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	68b9      	ldr	r1, [r7, #8]
 800a0ae:	68f8      	ldr	r0, [r7, #12]
 800a0b0:	f000 f914 	bl	800a2dc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b6:	68f8      	ldr	r0, [r7, #12]
 800a0b8:	4798      	blx	r3
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d001      	beq.n	800a0c4 <netif_add+0xc8>
    return NULL;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	e058      	b.n	800a176 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a0ca:	2bff      	cmp	r3, #255	@ 0xff
 800a0cc:	d103      	bne.n	800a0d6 <netif_add+0xda>
        netif->num = 0;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a0da:	4b30      	ldr	r3, [pc, #192]	@ (800a19c <netif_add+0x1a0>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	617b      	str	r3, [r7, #20]
 800a0e0:	e02b      	b.n	800a13a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a0e2:	697a      	ldr	r2, [r7, #20]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d106      	bne.n	800a0f8 <netif_add+0xfc>
 800a0ea:	4b25      	ldr	r3, [pc, #148]	@ (800a180 <netif_add+0x184>)
 800a0ec:	f240 128b 	movw	r2, #395	@ 0x18b
 800a0f0:	492b      	ldr	r1, [pc, #172]	@ (800a1a0 <netif_add+0x1a4>)
 800a0f2:	4825      	ldr	r0, [pc, #148]	@ (800a188 <netif_add+0x18c>)
 800a0f4:	f00c fde2 	bl	8016cbc <iprintf>
        num_netifs++;
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	2bff      	cmp	r3, #255	@ 0xff
 800a102:	dd06      	ble.n	800a112 <netif_add+0x116>
 800a104:	4b1e      	ldr	r3, [pc, #120]	@ (800a180 <netif_add+0x184>)
 800a106:	f240 128d 	movw	r2, #397	@ 0x18d
 800a10a:	4926      	ldr	r1, [pc, #152]	@ (800a1a4 <netif_add+0x1a8>)
 800a10c:	481e      	ldr	r0, [pc, #120]	@ (800a188 <netif_add+0x18c>)
 800a10e:	f00c fdd5 	bl	8016cbc <iprintf>
        if (netif2->num == netif->num) {
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a11e:	429a      	cmp	r2, r3
 800a120:	d108      	bne.n	800a134 <netif_add+0x138>
          netif->num++;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a128:	3301      	adds	r3, #1
 800a12a:	b2da      	uxtb	r2, r3
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 800a132:	e005      	b.n	800a140 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	617b      	str	r3, [r7, #20]
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d1d0      	bne.n	800a0e2 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d1be      	bne.n	800a0c4 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a14c:	2bfe      	cmp	r3, #254	@ 0xfe
 800a14e:	d103      	bne.n	800a158 <netif_add+0x15c>
    netif_num = 0;
 800a150:	4b11      	ldr	r3, [pc, #68]	@ (800a198 <netif_add+0x19c>)
 800a152:	2200      	movs	r2, #0
 800a154:	701a      	strb	r2, [r3, #0]
 800a156:	e006      	b.n	800a166 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a15e:	3301      	adds	r3, #1
 800a160:	b2da      	uxtb	r2, r3
 800a162:	4b0d      	ldr	r3, [pc, #52]	@ (800a198 <netif_add+0x19c>)
 800a164:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a166:	4b0d      	ldr	r3, [pc, #52]	@ (800a19c <netif_add+0x1a0>)
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a16e:	4a0b      	ldr	r2, [pc, #44]	@ (800a19c <netif_add+0x1a0>)
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a174:	68fb      	ldr	r3, [r7, #12]
}
 800a176:	4618      	mov	r0, r3
 800a178:	3718      	adds	r7, #24
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	08018194 	.word	0x08018194
 800a184:	08018228 	.word	0x08018228
 800a188:	080181e4 	.word	0x080181e4
 800a18c:	08018244 	.word	0x08018244
 800a190:	0801dc64 	.word	0x0801dc64
 800a194:	0800a5bf 	.word	0x0800a5bf
 800a198:	240032ec 	.word	0x240032ec
 800a19c:	240032e4 	.word	0x240032e4
 800a1a0:	08018268 	.word	0x08018268
 800a1a4:	0801827c 	.word	0x0801827c

0800a1a8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a1b2:	6839      	ldr	r1, [r7, #0]
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f002 fcad 	bl	800cb14 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a1ba:	6839      	ldr	r1, [r7, #0]
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f007 fbbf 	bl	8011940 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a1c2:	bf00      	nop
 800a1c4:	3708      	adds	r7, #8
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
	...

0800a1cc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b086      	sub	sp, #24
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d106      	bne.n	800a1ec <netif_do_set_ipaddr+0x20>
 800a1de:	4b1d      	ldr	r3, [pc, #116]	@ (800a254 <netif_do_set_ipaddr+0x88>)
 800a1e0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800a1e4:	491c      	ldr	r1, [pc, #112]	@ (800a258 <netif_do_set_ipaddr+0x8c>)
 800a1e6:	481d      	ldr	r0, [pc, #116]	@ (800a25c <netif_do_set_ipaddr+0x90>)
 800a1e8:	f00c fd68 	bl	8016cbc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d106      	bne.n	800a200 <netif_do_set_ipaddr+0x34>
 800a1f2:	4b18      	ldr	r3, [pc, #96]	@ (800a254 <netif_do_set_ipaddr+0x88>)
 800a1f4:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800a1f8:	4917      	ldr	r1, [pc, #92]	@ (800a258 <netif_do_set_ipaddr+0x8c>)
 800a1fa:	4818      	ldr	r0, [pc, #96]	@ (800a25c <netif_do_set_ipaddr+0x90>)
 800a1fc:	f00c fd5e 	bl	8016cbc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	3304      	adds	r3, #4
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d01c      	beq.n	800a248 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	3304      	adds	r3, #4
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a21e:	f107 0314 	add.w	r3, r7, #20
 800a222:	4619      	mov	r1, r3
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f7ff ffbf 	bl	800a1a8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d002      	beq.n	800a236 <netif_do_set_ipaddr+0x6a>
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	e000      	b.n	800a238 <netif_do_set_ipaddr+0x6c>
 800a236:	2300      	movs	r3, #0
 800a238:	68fa      	ldr	r2, [r7, #12]
 800a23a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a23c:	2101      	movs	r1, #1
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	f000 f8d2 	bl	800a3e8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a244:	2301      	movs	r3, #1
 800a246:	e000      	b.n	800a24a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3718      	adds	r7, #24
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	08018194 	.word	0x08018194
 800a258:	080182ac 	.word	0x080182ac
 800a25c:	080181e4 	.word	0x080181e4

0800a260 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a260:	b480      	push	{r7}
 800a262:	b085      	sub	sp, #20
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	3308      	adds	r3, #8
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	429a      	cmp	r2, r3
 800a278:	d00a      	beq.n	800a290 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d002      	beq.n	800a286 <netif_do_set_netmask+0x26>
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	e000      	b.n	800a288 <netif_do_set_netmask+0x28>
 800a286:	2300      	movs	r3, #0
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a28c:	2301      	movs	r3, #1
 800a28e:	e000      	b.n	800a292 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	3714      	adds	r7, #20
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr

0800a29e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800a29e:	b480      	push	{r7}
 800a2a0:	b085      	sub	sp, #20
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	60f8      	str	r0, [r7, #12]
 800a2a6:	60b9      	str	r1, [r7, #8]
 800a2a8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	330c      	adds	r3, #12
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d00a      	beq.n	800a2ce <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d002      	beq.n	800a2c4 <netif_do_set_gw+0x26>
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	e000      	b.n	800a2c6 <netif_do_set_gw+0x28>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e000      	b.n	800a2d0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800a2ce:	2300      	movs	r3, #0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3714      	adds	r7, #20
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b088      	sub	sp, #32
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	607a      	str	r2, [r7, #4]
 800a2e8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d101      	bne.n	800a2fc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800a2f8:	4b1c      	ldr	r3, [pc, #112]	@ (800a36c <netif_set_addr+0x90>)
 800a2fa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d101      	bne.n	800a306 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800a302:	4b1a      	ldr	r3, [pc, #104]	@ (800a36c <netif_set_addr+0x90>)
 800a304:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d101      	bne.n	800a310 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800a30c:	4b17      	ldr	r3, [pc, #92]	@ (800a36c <netif_set_addr+0x90>)
 800a30e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d003      	beq.n	800a31e <netif_set_addr+0x42>
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d101      	bne.n	800a322 <netif_set_addr+0x46>
 800a31e:	2301      	movs	r3, #1
 800a320:	e000      	b.n	800a324 <netif_set_addr+0x48>
 800a322:	2300      	movs	r3, #0
 800a324:	617b      	str	r3, [r7, #20]
  if (remove) {
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d006      	beq.n	800a33a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a32c:	f107 0310 	add.w	r3, r7, #16
 800a330:	461a      	mov	r2, r3
 800a332:	68b9      	ldr	r1, [r7, #8]
 800a334:	68f8      	ldr	r0, [r7, #12]
 800a336:	f7ff ff49 	bl	800a1cc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800a33a:	69fa      	ldr	r2, [r7, #28]
 800a33c:	6879      	ldr	r1, [r7, #4]
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f7ff ff8e 	bl	800a260 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800a344:	69ba      	ldr	r2, [r7, #24]
 800a346:	6839      	ldr	r1, [r7, #0]
 800a348:	68f8      	ldr	r0, [r7, #12]
 800a34a:	f7ff ffa8 	bl	800a29e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d106      	bne.n	800a362 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a354:	f107 0310 	add.w	r3, r7, #16
 800a358:	461a      	mov	r2, r3
 800a35a:	68b9      	ldr	r1, [r7, #8]
 800a35c:	68f8      	ldr	r0, [r7, #12]
 800a35e:	f7ff ff35 	bl	800a1cc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800a362:	bf00      	nop
 800a364:	3720      	adds	r7, #32
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	0801dc64 	.word	0x0801dc64

0800a370 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a378:	4a04      	ldr	r2, [pc, #16]	@ (800a38c <netif_set_default+0x1c>)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a37e:	bf00      	nop
 800a380:	370c      	adds	r7, #12
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr
 800a38a:	bf00      	nop
 800a38c:	240032e8 	.word	0x240032e8

0800a390 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d107      	bne.n	800a3ae <netif_set_up+0x1e>
 800a39e:	4b0f      	ldr	r3, [pc, #60]	@ (800a3dc <netif_set_up+0x4c>)
 800a3a0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800a3a4:	490e      	ldr	r1, [pc, #56]	@ (800a3e0 <netif_set_up+0x50>)
 800a3a6:	480f      	ldr	r0, [pc, #60]	@ (800a3e4 <netif_set_up+0x54>)
 800a3a8:	f00c fc88 	bl	8016cbc <iprintf>
 800a3ac:	e013      	b.n	800a3d6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a3b4:	f003 0301 	and.w	r3, r3, #1
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d10c      	bne.n	800a3d6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a3c2:	f043 0301 	orr.w	r3, r3, #1
 800a3c6:	b2da      	uxtb	r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a3ce:	2103      	movs	r1, #3
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 f809 	bl	800a3e8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800a3d6:	3708      	adds	r7, #8
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	08018194 	.word	0x08018194
 800a3e0:	0801831c 	.word	0x0801831c
 800a3e4:	080181e4 	.word	0x080181e4

0800a3e8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d106      	bne.n	800a408 <netif_issue_reports+0x20>
 800a3fa:	4b18      	ldr	r3, [pc, #96]	@ (800a45c <netif_issue_reports+0x74>)
 800a3fc:	f240 326d 	movw	r2, #877	@ 0x36d
 800a400:	4917      	ldr	r1, [pc, #92]	@ (800a460 <netif_issue_reports+0x78>)
 800a402:	4818      	ldr	r0, [pc, #96]	@ (800a464 <netif_issue_reports+0x7c>)
 800a404:	f00c fc5a 	bl	8016cbc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a40e:	f003 0304 	and.w	r3, r3, #4
 800a412:	2b00      	cmp	r3, #0
 800a414:	d01e      	beq.n	800a454 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a41c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a420:	2b00      	cmp	r3, #0
 800a422:	d017      	beq.n	800a454 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a424:	78fb      	ldrb	r3, [r7, #3]
 800a426:	f003 0301 	and.w	r3, r3, #1
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d013      	beq.n	800a456 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	3304      	adds	r3, #4
 800a432:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a434:	2b00      	cmp	r3, #0
 800a436:	d00e      	beq.n	800a456 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a43e:	f003 0308 	and.w	r3, r3, #8
 800a442:	2b00      	cmp	r3, #0
 800a444:	d007      	beq.n	800a456 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	3304      	adds	r3, #4
 800a44a:	4619      	mov	r1, r3
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f00a fc95 	bl	8014d7c <etharp_request>
 800a452:	e000      	b.n	800a456 <netif_issue_reports+0x6e>
    return;
 800a454:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800a456:	3708      	adds	r7, #8
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	08018194 	.word	0x08018194
 800a460:	08018338 	.word	0x08018338
 800a464:	080181e4 	.word	0x080181e4

0800a468 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d107      	bne.n	800a486 <netif_set_down+0x1e>
 800a476:	4b12      	ldr	r3, [pc, #72]	@ (800a4c0 <netif_set_down+0x58>)
 800a478:	f240 329b 	movw	r2, #923	@ 0x39b
 800a47c:	4911      	ldr	r1, [pc, #68]	@ (800a4c4 <netif_set_down+0x5c>)
 800a47e:	4812      	ldr	r0, [pc, #72]	@ (800a4c8 <netif_set_down+0x60>)
 800a480:	f00c fc1c 	bl	8016cbc <iprintf>
 800a484:	e019      	b.n	800a4ba <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a48c:	f003 0301 	and.w	r3, r3, #1
 800a490:	2b00      	cmp	r3, #0
 800a492:	d012      	beq.n	800a4ba <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a49a:	f023 0301 	bic.w	r3, r3, #1
 800a49e:	b2da      	uxtb	r2, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a4ac:	f003 0308 	and.w	r3, r3, #8
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d002      	beq.n	800a4ba <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f009 ffad 	bl	8014414 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a4ba:	3708      	adds	r7, #8
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}
 800a4c0:	08018194 	.word	0x08018194
 800a4c4:	0801835c 	.word	0x0801835c
 800a4c8:	080181e4 	.word	0x080181e4

0800a4cc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d107      	bne.n	800a4ea <netif_set_link_up+0x1e>
 800a4da:	4b15      	ldr	r3, [pc, #84]	@ (800a530 <netif_set_link_up+0x64>)
 800a4dc:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800a4e0:	4914      	ldr	r1, [pc, #80]	@ (800a534 <netif_set_link_up+0x68>)
 800a4e2:	4815      	ldr	r0, [pc, #84]	@ (800a538 <netif_set_link_up+0x6c>)
 800a4e4:	f00c fbea 	bl	8016cbc <iprintf>
 800a4e8:	e01e      	b.n	800a528 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a4f0:	f003 0304 	and.w	r3, r3, #4
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d117      	bne.n	800a528 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a4fe:	f043 0304 	orr.w	r3, r3, #4
 800a502:	b2da      	uxtb	r2, r3
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f007 ff80 	bl	8012410 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a510:	2103      	movs	r1, #3
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f7ff ff68 	bl	800a3e8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	69db      	ldr	r3, [r3, #28]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d003      	beq.n	800a528 <netif_set_link_up+0x5c>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	69db      	ldr	r3, [r3, #28]
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a528:	3708      	adds	r7, #8
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	08018194 	.word	0x08018194
 800a534:	0801837c 	.word	0x0801837c
 800a538:	080181e4 	.word	0x080181e4

0800a53c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d107      	bne.n	800a55a <netif_set_link_down+0x1e>
 800a54a:	4b11      	ldr	r3, [pc, #68]	@ (800a590 <netif_set_link_down+0x54>)
 800a54c:	f240 4206 	movw	r2, #1030	@ 0x406
 800a550:	4910      	ldr	r1, [pc, #64]	@ (800a594 <netif_set_link_down+0x58>)
 800a552:	4811      	ldr	r0, [pc, #68]	@ (800a598 <netif_set_link_down+0x5c>)
 800a554:	f00c fbb2 	bl	8016cbc <iprintf>
 800a558:	e017      	b.n	800a58a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a560:	f003 0304 	and.w	r3, r3, #4
 800a564:	2b00      	cmp	r3, #0
 800a566:	d010      	beq.n	800a58a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a56e:	f023 0304 	bic.w	r3, r3, #4
 800a572:	b2da      	uxtb	r2, r3
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	69db      	ldr	r3, [r3, #28]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d003      	beq.n	800a58a <netif_set_link_down+0x4e>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	69db      	ldr	r3, [r3, #28]
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a58a:	3708      	adds	r7, #8
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	08018194 	.word	0x08018194
 800a594:	080183a0 	.word	0x080183a0
 800a598:	080181e4 	.word	0x080181e4

0800a59c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d002      	beq.n	800a5b2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	683a      	ldr	r2, [r7, #0]
 800a5b0:	61da      	str	r2, [r3, #28]
  }
}
 800a5b2:	bf00      	nop
 800a5b4:	370c      	adds	r7, #12
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr

0800a5be <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800a5be:	b480      	push	{r7}
 800a5c0:	b085      	sub	sp, #20
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	60f8      	str	r0, [r7, #12]
 800a5c6:	60b9      	str	r1, [r7, #8]
 800a5c8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800a5ca:	f06f 030b 	mvn.w	r3, #11
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3714      	adds	r7, #20
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr
	...

0800a5dc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b085      	sub	sp, #20
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a5e6:	79fb      	ldrb	r3, [r7, #7]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d013      	beq.n	800a614 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800a5ec:	4b0d      	ldr	r3, [pc, #52]	@ (800a624 <netif_get_by_index+0x48>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	60fb      	str	r3, [r7, #12]
 800a5f2:	e00c      	b.n	800a60e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	79fa      	ldrb	r2, [r7, #7]
 800a600:	429a      	cmp	r2, r3
 800a602:	d101      	bne.n	800a608 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	e006      	b.n	800a616 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	60fb      	str	r3, [r7, #12]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d1ef      	bne.n	800a5f4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800a614:	2300      	movs	r3, #0
}
 800a616:	4618      	mov	r0, r3
 800a618:	3714      	adds	r7, #20
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr
 800a622:	bf00      	nop
 800a624:	240032e4 	.word	0x240032e4

0800a628 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a62e:	4b0d      	ldr	r3, [pc, #52]	@ (800a664 <pbuf_free_ooseq+0x3c>)
 800a630:	2200      	movs	r2, #0
 800a632:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a634:	4b0c      	ldr	r3, [pc, #48]	@ (800a668 <pbuf_free_ooseq+0x40>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	607b      	str	r3, [r7, #4]
 800a63a:	e00d      	b.n	800a658 <pbuf_free_ooseq+0x30>
    if (pcb->ooseq != NULL) {
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a640:	2b00      	cmp	r3, #0
 800a642:	d006      	beq.n	800a652 <pbuf_free_ooseq+0x2a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
 800a644:	4809      	ldr	r0, [pc, #36]	@ (800a66c <pbuf_free_ooseq+0x44>)
 800a646:	f00c fba9 	bl	8016d9c <puts>
      tcp_free_ooseq(pcb);
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f002 faa0 	bl	800cb90 <tcp_free_ooseq>
      return;
 800a650:	e005      	b.n	800a65e <pbuf_free_ooseq+0x36>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	68db      	ldr	r3, [r3, #12]
 800a656:	607b      	str	r3, [r7, #4]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d1ee      	bne.n	800a63c <pbuf_free_ooseq+0x14>
    }
  }
}
 800a65e:	3708      	adds	r7, #8
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}
 800a664:	240032ed 	.word	0x240032ed
 800a668:	240032fc 	.word	0x240032fc
 800a66c:	080183c4 	.word	0x080183c4

0800a670 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800a670:	b480      	push	{r7}
 800a672:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800a674:	4b03      	ldr	r3, [pc, #12]	@ (800a684 <pbuf_pool_is_empty+0x14>)
 800a676:	2201      	movs	r2, #1
 800a678:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800a67a:	bf00      	nop
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr
 800a684:	240032ed 	.word	0x240032ed

0800a688 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800a688:	b480      	push	{r7}
 800a68a:	b085      	sub	sp, #20
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	4611      	mov	r1, r2
 800a694:	461a      	mov	r2, r3
 800a696:	460b      	mov	r3, r1
 800a698:	80fb      	strh	r3, [r7, #6]
 800a69a:	4613      	mov	r3, r2
 800a69c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	68ba      	ldr	r2, [r7, #8]
 800a6a8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	88fa      	ldrh	r2, [r7, #6]
 800a6ae:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	88ba      	ldrh	r2, [r7, #4]
 800a6b4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800a6b6:	8b3b      	ldrh	r3, [r7, #24]
 800a6b8:	b2da      	uxtb	r2, r3
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	7f3a      	ldrb	r2, [r7, #28]
 800a6c2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	73da      	strb	r2, [r3, #15]
}
 800a6d0:	bf00      	nop
 800a6d2:	3714      	adds	r7, #20
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b08c      	sub	sp, #48	@ 0x30
 800a6e0:	af02      	add	r7, sp, #8
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	71fb      	strb	r3, [r7, #7]
 800a6e6:	460b      	mov	r3, r1
 800a6e8:	80bb      	strh	r3, [r7, #4]
 800a6ea:	4613      	mov	r3, r2
 800a6ec:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a6ee:	79fb      	ldrb	r3, [r7, #7]
 800a6f0:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));
 800a6f2:	88bb      	ldrh	r3, [r7, #4]
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	4874      	ldr	r0, [pc, #464]	@ (800a8c8 <pbuf_alloc+0x1ec>)
 800a6f8:	f00c fae0 	bl	8016cbc <iprintf>

  switch (type) {
 800a6fc:	887b      	ldrh	r3, [r7, #2]
 800a6fe:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800a702:	d07f      	beq.n	800a804 <pbuf_alloc+0x128>
 800a704:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800a708:	f300 80c8 	bgt.w	800a89c <pbuf_alloc+0x1c0>
 800a70c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800a710:	d010      	beq.n	800a734 <pbuf_alloc+0x58>
 800a712:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800a716:	f300 80c1 	bgt.w	800a89c <pbuf_alloc+0x1c0>
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d002      	beq.n	800a724 <pbuf_alloc+0x48>
 800a71e:	2b41      	cmp	r3, #65	@ 0x41
 800a720:	f040 80bc 	bne.w	800a89c <pbuf_alloc+0x1c0>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a724:	887a      	ldrh	r2, [r7, #2]
 800a726:	88bb      	ldrh	r3, [r7, #4]
 800a728:	4619      	mov	r1, r3
 800a72a:	2000      	movs	r0, #0
 800a72c:	f000 f8dc 	bl	800a8e8 <pbuf_alloc_reference>
 800a730:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800a732:	e0bd      	b.n	800a8b0 <pbuf_alloc+0x1d4>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a734:	2300      	movs	r3, #0
 800a736:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800a738:	2300      	movs	r3, #0
 800a73a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a73c:	88bb      	ldrh	r3, [r7, #4]
 800a73e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a740:	2008      	movs	r0, #8
 800a742:	f7ff fbb9 	bl	8009eb8 <memp_malloc>
 800a746:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d109      	bne.n	800a762 <pbuf_alloc+0x86>
          PBUF_POOL_IS_EMPTY();
 800a74e:	f7ff ff8f 	bl	800a670 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800a752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a754:	2b00      	cmp	r3, #0
 800a756:	d002      	beq.n	800a75e <pbuf_alloc+0x82>
            pbuf_free(p);
 800a758:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a75a:	f000 faeb 	bl	800ad34 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a75e:	2300      	movs	r3, #0
 800a760:	e0ad      	b.n	800a8be <pbuf_alloc+0x1e2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a762:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a764:	3303      	adds	r3, #3
 800a766:	b29b      	uxth	r3, r3
 800a768:	f023 0303 	bic.w	r3, r3, #3
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800a772:	b29b      	uxth	r3, r3
 800a774:	8b7a      	ldrh	r2, [r7, #26]
 800a776:	4293      	cmp	r3, r2
 800a778:	bf28      	it	cs
 800a77a:	4613      	movcs	r3, r2
 800a77c:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a77e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a780:	3310      	adds	r3, #16
 800a782:	693a      	ldr	r2, [r7, #16]
 800a784:	4413      	add	r3, r2
 800a786:	3303      	adds	r3, #3
 800a788:	f023 0303 	bic.w	r3, r3, #3
 800a78c:	4618      	mov	r0, r3
 800a78e:	89f9      	ldrh	r1, [r7, #14]
 800a790:	8b7a      	ldrh	r2, [r7, #26]
 800a792:	2300      	movs	r3, #0
 800a794:	9301      	str	r3, [sp, #4]
 800a796:	887b      	ldrh	r3, [r7, #2]
 800a798:	9300      	str	r3, [sp, #0]
 800a79a:	460b      	mov	r3, r1
 800a79c:	4601      	mov	r1, r0
 800a79e:	6938      	ldr	r0, [r7, #16]
 800a7a0:	f7ff ff72 	bl	800a688 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	f003 0303 	and.w	r3, r3, #3
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d006      	beq.n	800a7be <pbuf_alloc+0xe2>
 800a7b0:	4b46      	ldr	r3, [pc, #280]	@ (800a8cc <pbuf_alloc+0x1f0>)
 800a7b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a7b6:	4946      	ldr	r1, [pc, #280]	@ (800a8d0 <pbuf_alloc+0x1f4>)
 800a7b8:	4846      	ldr	r0, [pc, #280]	@ (800a8d4 <pbuf_alloc+0x1f8>)
 800a7ba:	f00c fa7f 	bl	8016cbc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a7be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a7c0:	3303      	adds	r3, #3
 800a7c2:	f023 0303 	bic.w	r3, r3, #3
 800a7c6:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800a7ca:	d106      	bne.n	800a7da <pbuf_alloc+0xfe>
 800a7cc:	4b3f      	ldr	r3, [pc, #252]	@ (800a8cc <pbuf_alloc+0x1f0>)
 800a7ce:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800a7d2:	4941      	ldr	r1, [pc, #260]	@ (800a8d8 <pbuf_alloc+0x1fc>)
 800a7d4:	483f      	ldr	r0, [pc, #252]	@ (800a8d4 <pbuf_alloc+0x1f8>)
 800a7d6:	f00c fa71 	bl	8016cbc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800a7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d102      	bne.n	800a7e6 <pbuf_alloc+0x10a>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7e4:	e002      	b.n	800a7ec <pbuf_alloc+0x110>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	693a      	ldr	r2, [r7, #16]
 800a7ea:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800a7f0:	8b7a      	ldrh	r2, [r7, #26]
 800a7f2:	89fb      	ldrh	r3, [r7, #14]
 800a7f4:	1ad3      	subs	r3, r2, r3
 800a7f6:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800a7fc:	8b7b      	ldrh	r3, [r7, #26]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d19e      	bne.n	800a740 <pbuf_alloc+0x64>
      break;
 800a802:	e055      	b.n	800a8b0 <pbuf_alloc+0x1d4>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a804:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a806:	3303      	adds	r3, #3
 800a808:	b29b      	uxth	r3, r3
 800a80a:	f023 0303 	bic.w	r3, r3, #3
 800a80e:	b29a      	uxth	r2, r3
 800a810:	88bb      	ldrh	r3, [r7, #4]
 800a812:	3303      	adds	r3, #3
 800a814:	b29b      	uxth	r3, r3
 800a816:	f023 0303 	bic.w	r3, r3, #3
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	4413      	add	r3, r2
 800a81e:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a820:	8b3b      	ldrh	r3, [r7, #24]
 800a822:	3310      	adds	r3, #16
 800a824:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a826:	8b3a      	ldrh	r2, [r7, #24]
 800a828:	88bb      	ldrh	r3, [r7, #4]
 800a82a:	3303      	adds	r3, #3
 800a82c:	f023 0303 	bic.w	r3, r3, #3
 800a830:	429a      	cmp	r2, r3
 800a832:	d306      	bcc.n	800a842 <pbuf_alloc+0x166>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800a834:	8afa      	ldrh	r2, [r7, #22]
 800a836:	88bb      	ldrh	r3, [r7, #4]
 800a838:	3303      	adds	r3, #3
 800a83a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a83e:	429a      	cmp	r2, r3
 800a840:	d201      	bcs.n	800a846 <pbuf_alloc+0x16a>
        return NULL;
 800a842:	2300      	movs	r3, #0
 800a844:	e03b      	b.n	800a8be <pbuf_alloc+0x1e2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a846:	8afb      	ldrh	r3, [r7, #22]
 800a848:	4618      	mov	r0, r3
 800a84a:	f7ff f9a1 	bl	8009b90 <mem_malloc>
 800a84e:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800a850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a852:	2b00      	cmp	r3, #0
 800a854:	d101      	bne.n	800a85a <pbuf_alloc+0x17e>
        return NULL;
 800a856:	2300      	movs	r3, #0
 800a858:	e031      	b.n	800a8be <pbuf_alloc+0x1e2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a85a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a85c:	3310      	adds	r3, #16
 800a85e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a860:	4413      	add	r3, r2
 800a862:	3303      	adds	r3, #3
 800a864:	f023 0303 	bic.w	r3, r3, #3
 800a868:	4618      	mov	r0, r3
 800a86a:	88b9      	ldrh	r1, [r7, #4]
 800a86c:	88ba      	ldrh	r2, [r7, #4]
 800a86e:	2300      	movs	r3, #0
 800a870:	9301      	str	r3, [sp, #4]
 800a872:	887b      	ldrh	r3, [r7, #2]
 800a874:	9300      	str	r3, [sp, #0]
 800a876:	460b      	mov	r3, r1
 800a878:	4601      	mov	r1, r0
 800a87a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a87c:	f7ff ff04 	bl	800a688 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	f003 0303 	and.w	r3, r3, #3
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d010      	beq.n	800a8ae <pbuf_alloc+0x1d2>
 800a88c:	4b0f      	ldr	r3, [pc, #60]	@ (800a8cc <pbuf_alloc+0x1f0>)
 800a88e:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800a892:	4912      	ldr	r1, [pc, #72]	@ (800a8dc <pbuf_alloc+0x200>)
 800a894:	480f      	ldr	r0, [pc, #60]	@ (800a8d4 <pbuf_alloc+0x1f8>)
 800a896:	f00c fa11 	bl	8016cbc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800a89a:	e008      	b.n	800a8ae <pbuf_alloc+0x1d2>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a89c:	4b0b      	ldr	r3, [pc, #44]	@ (800a8cc <pbuf_alloc+0x1f0>)
 800a89e:	f240 1227 	movw	r2, #295	@ 0x127
 800a8a2:	490f      	ldr	r1, [pc, #60]	@ (800a8e0 <pbuf_alloc+0x204>)
 800a8a4:	480b      	ldr	r0, [pc, #44]	@ (800a8d4 <pbuf_alloc+0x1f8>)
 800a8a6:	f00c fa09 	bl	8016cbc <iprintf>
      return NULL;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	e007      	b.n	800a8be <pbuf_alloc+0x1e2>
      break;
 800a8ae:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
 800a8b0:	88bb      	ldrh	r3, [r7, #4]
 800a8b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	480b      	ldr	r0, [pc, #44]	@ (800a8e4 <pbuf_alloc+0x208>)
 800a8b8:	f00c fa00 	bl	8016cbc <iprintf>
  return p;
 800a8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3728      	adds	r7, #40	@ 0x28
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	080183f4 	.word	0x080183f4
 800a8cc:	0801840c 	.word	0x0801840c
 800a8d0:	0801843c 	.word	0x0801843c
 800a8d4:	0801846c 	.word	0x0801846c
 800a8d8:	08018494 	.word	0x08018494
 800a8dc:	080184c8 	.word	0x080184c8
 800a8e0:	080184f4 	.word	0x080184f4
 800a8e4:	08018510 	.word	0x08018510

0800a8e8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b086      	sub	sp, #24
 800a8ec:	af02      	add	r7, sp, #8
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	807b      	strh	r3, [r7, #2]
 800a8f4:	4613      	mov	r3, r2
 800a8f6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a8f8:	883b      	ldrh	r3, [r7, #0]
 800a8fa:	2b41      	cmp	r3, #65	@ 0x41
 800a8fc:	d009      	beq.n	800a912 <pbuf_alloc_reference+0x2a>
 800a8fe:	883b      	ldrh	r3, [r7, #0]
 800a900:	2b01      	cmp	r3, #1
 800a902:	d006      	beq.n	800a912 <pbuf_alloc_reference+0x2a>
 800a904:	4b14      	ldr	r3, [pc, #80]	@ (800a958 <pbuf_alloc_reference+0x70>)
 800a906:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800a90a:	4914      	ldr	r1, [pc, #80]	@ (800a95c <pbuf_alloc_reference+0x74>)
 800a90c:	4814      	ldr	r0, [pc, #80]	@ (800a960 <pbuf_alloc_reference+0x78>)
 800a90e:	f00c f9d5 	bl	8016cbc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a912:	2007      	movs	r0, #7
 800a914:	f7ff fad0 	bl	8009eb8 <memp_malloc>
 800a918:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d10b      	bne.n	800a938 <pbuf_alloc_reference+0x50>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 800a920:	883b      	ldrh	r3, [r7, #0]
 800a922:	2b01      	cmp	r3, #1
 800a924:	d101      	bne.n	800a92a <pbuf_alloc_reference+0x42>
 800a926:	4b0f      	ldr	r3, [pc, #60]	@ (800a964 <pbuf_alloc_reference+0x7c>)
 800a928:	e000      	b.n	800a92c <pbuf_alloc_reference+0x44>
 800a92a:	4b0f      	ldr	r3, [pc, #60]	@ (800a968 <pbuf_alloc_reference+0x80>)
 800a92c:	4619      	mov	r1, r3
 800a92e:	480f      	ldr	r0, [pc, #60]	@ (800a96c <pbuf_alloc_reference+0x84>)
 800a930:	f00c f9c4 	bl	8016cbc <iprintf>
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a934:	2300      	movs	r3, #0
 800a936:	e00b      	b.n	800a950 <pbuf_alloc_reference+0x68>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a938:	8879      	ldrh	r1, [r7, #2]
 800a93a:	887a      	ldrh	r2, [r7, #2]
 800a93c:	2300      	movs	r3, #0
 800a93e:	9301      	str	r3, [sp, #4]
 800a940:	883b      	ldrh	r3, [r7, #0]
 800a942:	9300      	str	r3, [sp, #0]
 800a944:	460b      	mov	r3, r1
 800a946:	6879      	ldr	r1, [r7, #4]
 800a948:	68f8      	ldr	r0, [r7, #12]
 800a94a:	f7ff fe9d 	bl	800a688 <pbuf_init_alloced_pbuf>
  return p;
 800a94e:	68fb      	ldr	r3, [r7, #12]
}
 800a950:	4618      	mov	r0, r3
 800a952:	3710      	adds	r7, #16
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}
 800a958:	0801840c 	.word	0x0801840c
 800a95c:	08018530 	.word	0x08018530
 800a960:	0801846c 	.word	0x0801846c
 800a964:	08018544 	.word	0x08018544
 800a968:	08018548 	.word	0x08018548
 800a96c:	0801854c 	.word	0x0801854c

0800a970 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b088      	sub	sp, #32
 800a974:	af02      	add	r7, sp, #8
 800a976:	607b      	str	r3, [r7, #4]
 800a978:	4603      	mov	r3, r0
 800a97a:	73fb      	strb	r3, [r7, #15]
 800a97c:	460b      	mov	r3, r1
 800a97e:	81bb      	strh	r3, [r7, #12]
 800a980:	4613      	mov	r3, r2
 800a982:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a984:	7bfb      	ldrb	r3, [r7, #15]
 800a986:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));
 800a988:	89bb      	ldrh	r3, [r7, #12]
 800a98a:	4619      	mov	r1, r3
 800a98c:	4817      	ldr	r0, [pc, #92]	@ (800a9ec <pbuf_alloced_custom+0x7c>)
 800a98e:	f00c f995 	bl	8016cbc <iprintf>

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a992:	8a7b      	ldrh	r3, [r7, #18]
 800a994:	3303      	adds	r3, #3
 800a996:	f023 0203 	bic.w	r2, r3, #3
 800a99a:	89bb      	ldrh	r3, [r7, #12]
 800a99c:	441a      	add	r2, r3
 800a99e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d906      	bls.n	800a9b2 <pbuf_alloced_custom+0x42>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
 800a9a4:	89bb      	ldrh	r3, [r7, #12]
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	4811      	ldr	r0, [pc, #68]	@ (800a9f0 <pbuf_alloced_custom+0x80>)
 800a9aa:	f00c f987 	bl	8016cbc <iprintf>
    return NULL;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	e018      	b.n	800a9e4 <pbuf_alloced_custom+0x74>
  }

  if (payload_mem != NULL) {
 800a9b2:	6a3b      	ldr	r3, [r7, #32]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d007      	beq.n	800a9c8 <pbuf_alloced_custom+0x58>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a9b8:	8a7b      	ldrh	r3, [r7, #18]
 800a9ba:	3303      	adds	r3, #3
 800a9bc:	f023 0303 	bic.w	r3, r3, #3
 800a9c0:	6a3a      	ldr	r2, [r7, #32]
 800a9c2:	4413      	add	r3, r2
 800a9c4:	617b      	str	r3, [r7, #20]
 800a9c6:	e001      	b.n	800a9cc <pbuf_alloced_custom+0x5c>
  } else {
    payload = NULL;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	89b9      	ldrh	r1, [r7, #12]
 800a9d0:	89ba      	ldrh	r2, [r7, #12]
 800a9d2:	2302      	movs	r3, #2
 800a9d4:	9301      	str	r3, [sp, #4]
 800a9d6:	897b      	ldrh	r3, [r7, #10]
 800a9d8:	9300      	str	r3, [sp, #0]
 800a9da:	460b      	mov	r3, r1
 800a9dc:	6979      	ldr	r1, [r7, #20]
 800a9de:	f7ff fe53 	bl	800a688 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a9e2:	687b      	ldr	r3, [r7, #4]
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3718      	adds	r7, #24
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	08018590 	.word	0x08018590
 800a9f0:	080185b4 	.word	0x080185b4

0800a9f4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d106      	bne.n	800aa14 <pbuf_realloc+0x20>
 800aa06:	4b3a      	ldr	r3, [pc, #232]	@ (800aaf0 <pbuf_realloc+0xfc>)
 800aa08:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800aa0c:	4939      	ldr	r1, [pc, #228]	@ (800aaf4 <pbuf_realloc+0x100>)
 800aa0e:	483a      	ldr	r0, [pc, #232]	@ (800aaf8 <pbuf_realloc+0x104>)
 800aa10:	f00c f954 	bl	8016cbc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	891b      	ldrh	r3, [r3, #8]
 800aa18:	887a      	ldrh	r2, [r7, #2]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d263      	bcs.n	800aae6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	891a      	ldrh	r2, [r3, #8]
 800aa22:	887b      	ldrh	r3, [r7, #2]
 800aa24:	1ad3      	subs	r3, r2, r3
 800aa26:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800aa28:	887b      	ldrh	r3, [r7, #2]
 800aa2a:	817b      	strh	r3, [r7, #10]
  q = p;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800aa30:	e018      	b.n	800aa64 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	895b      	ldrh	r3, [r3, #10]
 800aa36:	897a      	ldrh	r2, [r7, #10]
 800aa38:	1ad3      	subs	r3, r2, r3
 800aa3a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	891a      	ldrh	r2, [r3, #8]
 800aa40:	893b      	ldrh	r3, [r7, #8]
 800aa42:	1ad3      	subs	r3, r2, r3
 800aa44:	b29a      	uxth	r2, r3
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d106      	bne.n	800aa64 <pbuf_realloc+0x70>
 800aa56:	4b26      	ldr	r3, [pc, #152]	@ (800aaf0 <pbuf_realloc+0xfc>)
 800aa58:	f240 12af 	movw	r2, #431	@ 0x1af
 800aa5c:	4927      	ldr	r1, [pc, #156]	@ (800aafc <pbuf_realloc+0x108>)
 800aa5e:	4826      	ldr	r0, [pc, #152]	@ (800aaf8 <pbuf_realloc+0x104>)
 800aa60:	f00c f92c 	bl	8016cbc <iprintf>
  while (rem_len > q->len) {
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	895b      	ldrh	r3, [r3, #10]
 800aa68:	897a      	ldrh	r2, [r7, #10]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d8e1      	bhi.n	800aa32 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	7b1b      	ldrb	r3, [r3, #12]
 800aa72:	f003 030f 	and.w	r3, r3, #15
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d121      	bne.n	800aabe <pbuf_realloc+0xca>
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	895b      	ldrh	r3, [r3, #10]
 800aa7e:	897a      	ldrh	r2, [r7, #10]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d01c      	beq.n	800aabe <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	7b5b      	ldrb	r3, [r3, #13]
 800aa88:	f003 0302 	and.w	r3, r3, #2
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d116      	bne.n	800aabe <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	685a      	ldr	r2, [r3, #4]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	1ad3      	subs	r3, r2, r3
 800aa98:	b29a      	uxth	r2, r3
 800aa9a:	897b      	ldrh	r3, [r7, #10]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	68f8      	ldr	r0, [r7, #12]
 800aaa4:	f7fe ff72 	bl	800998c <mem_trim>
 800aaa8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d106      	bne.n	800aabe <pbuf_realloc+0xca>
 800aab0:	4b0f      	ldr	r3, [pc, #60]	@ (800aaf0 <pbuf_realloc+0xfc>)
 800aab2:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800aab6:	4912      	ldr	r1, [pc, #72]	@ (800ab00 <pbuf_realloc+0x10c>)
 800aab8:	480f      	ldr	r0, [pc, #60]	@ (800aaf8 <pbuf_realloc+0x104>)
 800aaba:	f00c f8ff 	bl	8016cbc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	897a      	ldrh	r2, [r7, #10]
 800aac2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	895a      	ldrh	r2, [r3, #10]
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d004      	beq.n	800aade <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4618      	mov	r0, r3
 800aada:	f000 f92b 	bl	800ad34 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2200      	movs	r2, #0
 800aae2:	601a      	str	r2, [r3, #0]
 800aae4:	e000      	b.n	800aae8 <pbuf_realloc+0xf4>
    return;
 800aae6:	bf00      	nop

}
 800aae8:	3710      	adds	r7, #16
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop
 800aaf0:	0801840c 	.word	0x0801840c
 800aaf4:	080185e8 	.word	0x080185e8
 800aaf8:	0801846c 	.word	0x0801846c
 800aafc:	08018600 	.word	0x08018600
 800ab00:	08018618 	.word	0x08018618

0800ab04 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b086      	sub	sp, #24
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	4613      	mov	r3, r2
 800ab10:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d106      	bne.n	800ab26 <pbuf_add_header_impl+0x22>
 800ab18:	4b32      	ldr	r3, [pc, #200]	@ (800abe4 <pbuf_add_header_impl+0xe0>)
 800ab1a:	f240 12df 	movw	r2, #479	@ 0x1df
 800ab1e:	4932      	ldr	r1, [pc, #200]	@ (800abe8 <pbuf_add_header_impl+0xe4>)
 800ab20:	4832      	ldr	r0, [pc, #200]	@ (800abec <pbuf_add_header_impl+0xe8>)
 800ab22:	f00c f8cb 	bl	8016cbc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d003      	beq.n	800ab34 <pbuf_add_header_impl+0x30>
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab32:	d301      	bcc.n	800ab38 <pbuf_add_header_impl+0x34>
    return 1;
 800ab34:	2301      	movs	r3, #1
 800ab36:	e051      	b.n	800abdc <pbuf_add_header_impl+0xd8>
  }
  if (header_size_increment == 0) {
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d101      	bne.n	800ab42 <pbuf_add_header_impl+0x3e>
    return 0;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	e04c      	b.n	800abdc <pbuf_add_header_impl+0xd8>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	891a      	ldrh	r2, [r3, #8]
 800ab4a:	8a7b      	ldrh	r3, [r7, #18]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	8a7a      	ldrh	r2, [r7, #18]
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d901      	bls.n	800ab5a <pbuf_add_header_impl+0x56>
    return 1;
 800ab56:	2301      	movs	r3, #1
 800ab58:	e040      	b.n	800abdc <pbuf_add_header_impl+0xd8>
  }

  type_internal = p->type_internal;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	7b1b      	ldrb	r3, [r3, #12]
 800ab5e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ab60:	8a3b      	ldrh	r3, [r7, #16]
 800ab62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d013      	beq.n	800ab92 <pbuf_add_header_impl+0x8e>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	685a      	ldr	r2, [r3, #4]
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	425b      	negs	r3, r3
 800ab72:	4413      	add	r3, r2
 800ab74:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	3310      	adds	r3, #16
 800ab7a:	697a      	ldr	r2, [r7, #20]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d214      	bcs.n	800abaa <pbuf_add_header_impl+0xa6>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	3310      	adds	r3, #16
 800ab84:	461a      	mov	r2, r3
 800ab86:	6979      	ldr	r1, [r7, #20]
 800ab88:	4819      	ldr	r0, [pc, #100]	@ (800abf0 <pbuf_add_header_impl+0xec>)
 800ab8a:	f00c f897 	bl	8016cbc <iprintf>
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	e024      	b.n	800abdc <pbuf_add_header_impl+0xd8>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ab92:	79fb      	ldrb	r3, [r7, #7]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d006      	beq.n	800aba6 <pbuf_add_header_impl+0xa2>
      payload = (u8_t *)p->payload - header_size_increment;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	685a      	ldr	r2, [r3, #4]
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	425b      	negs	r3, r3
 800aba0:	4413      	add	r3, r2
 800aba2:	617b      	str	r3, [r7, #20]
 800aba4:	e001      	b.n	800abaa <pbuf_add_header_impl+0xa6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800aba6:	2301      	movs	r3, #1
 800aba8:	e018      	b.n	800abdc <pbuf_add_header_impl+0xd8>
    }
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	6859      	ldr	r1, [r3, #4]
 800abae:	8a7b      	ldrh	r3, [r7, #18]
 800abb0:	697a      	ldr	r2, [r7, #20]
 800abb2:	4810      	ldr	r0, [pc, #64]	@ (800abf4 <pbuf_add_header_impl+0xf0>)
 800abb4:	f00c f882 	bl	8016cbc <iprintf>
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	697a      	ldr	r2, [r7, #20]
 800abbc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	895a      	ldrh	r2, [r3, #10]
 800abc2:	8a7b      	ldrh	r3, [r7, #18]
 800abc4:	4413      	add	r3, r2
 800abc6:	b29a      	uxth	r2, r3
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	891a      	ldrh	r2, [r3, #8]
 800abd0:	8a7b      	ldrh	r3, [r7, #18]
 800abd2:	4413      	add	r3, r2
 800abd4:	b29a      	uxth	r2, r3
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	811a      	strh	r2, [r3, #8]


  return 0;
 800abda:	2300      	movs	r3, #0
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3718      	adds	r7, #24
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	0801840c 	.word	0x0801840c
 800abe8:	08018634 	.word	0x08018634
 800abec:	0801846c 	.word	0x0801846c
 800abf0:	08018640 	.word	0x08018640
 800abf4:	0801868c 	.word	0x0801868c

0800abf8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ac02:	2200      	movs	r2, #0
 800ac04:	6839      	ldr	r1, [r7, #0]
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f7ff ff7c 	bl	800ab04 <pbuf_add_header_impl>
 800ac0c:	4603      	mov	r3, r0
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3708      	adds	r7, #8
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
	...

0800ac18 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d106      	bne.n	800ac36 <pbuf_remove_header+0x1e>
 800ac28:	4b23      	ldr	r3, [pc, #140]	@ (800acb8 <pbuf_remove_header+0xa0>)
 800ac2a:	f240 224b 	movw	r2, #587	@ 0x24b
 800ac2e:	4923      	ldr	r1, [pc, #140]	@ (800acbc <pbuf_remove_header+0xa4>)
 800ac30:	4823      	ldr	r0, [pc, #140]	@ (800acc0 <pbuf_remove_header+0xa8>)
 800ac32:	f00c f843 	bl	8016cbc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d003      	beq.n	800ac44 <pbuf_remove_header+0x2c>
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac42:	d301      	bcc.n	800ac48 <pbuf_remove_header+0x30>
    return 1;
 800ac44:	2301      	movs	r3, #1
 800ac46:	e033      	b.n	800acb0 <pbuf_remove_header+0x98>
  }
  if (header_size_decrement == 0) {
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d101      	bne.n	800ac52 <pbuf_remove_header+0x3a>
    return 0;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	e02e      	b.n	800acb0 <pbuf_remove_header+0x98>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	895b      	ldrh	r3, [r3, #10]
 800ac5a:	89fa      	ldrh	r2, [r7, #14]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d908      	bls.n	800ac72 <pbuf_remove_header+0x5a>
 800ac60:	4b15      	ldr	r3, [pc, #84]	@ (800acb8 <pbuf_remove_header+0xa0>)
 800ac62:	f240 2255 	movw	r2, #597	@ 0x255
 800ac66:	4917      	ldr	r1, [pc, #92]	@ (800acc4 <pbuf_remove_header+0xac>)
 800ac68:	4815      	ldr	r0, [pc, #84]	@ (800acc0 <pbuf_remove_header+0xa8>)
 800ac6a:	f00c f827 	bl	8016cbc <iprintf>
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e01e      	b.n	800acb0 <pbuf_remove_header+0x98>

  /* remember current payload pointer */
  payload = p->payload;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	685a      	ldr	r2, [r3, #4]
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	441a      	add	r2, r3
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	895a      	ldrh	r2, [r3, #10]
 800ac88:	89fb      	ldrh	r3, [r7, #14]
 800ac8a:	1ad3      	subs	r3, r2, r3
 800ac8c:	b29a      	uxth	r2, r3
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	891a      	ldrh	r2, [r3, #8]
 800ac96:	89fb      	ldrh	r3, [r7, #14]
 800ac98:	1ad3      	subs	r3, r2, r3
 800ac9a:	b29a      	uxth	r2, r3
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	685a      	ldr	r2, [r3, #4]
 800aca4:	89fb      	ldrh	r3, [r7, #14]
 800aca6:	68b9      	ldr	r1, [r7, #8]
 800aca8:	4807      	ldr	r0, [pc, #28]	@ (800acc8 <pbuf_remove_header+0xb0>)
 800acaa:	f00c f807 	bl	8016cbc <iprintf>
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800acae:	2300      	movs	r3, #0
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3710      	adds	r7, #16
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	0801840c 	.word	0x0801840c
 800acbc:	08018634 	.word	0x08018634
 800acc0:	0801846c 	.word	0x0801846c
 800acc4:	080186b4 	.word	0x080186b4
 800acc8:	080186d4 	.word	0x080186d4

0800accc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	460b      	mov	r3, r1
 800acd6:	807b      	strh	r3, [r7, #2]
 800acd8:	4613      	mov	r3, r2
 800acda:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800acdc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	da08      	bge.n	800acf6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ace4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ace8:	425b      	negs	r3, r3
 800acea:	4619      	mov	r1, r3
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f7ff ff93 	bl	800ac18 <pbuf_remove_header>
 800acf2:	4603      	mov	r3, r0
 800acf4:	e007      	b.n	800ad06 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800acf6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800acfa:	787a      	ldrb	r2, [r7, #1]
 800acfc:	4619      	mov	r1, r3
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f7ff ff00 	bl	800ab04 <pbuf_add_header_impl>
 800ad04:	4603      	mov	r3, r0
  }
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3708      	adds	r7, #8
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}

0800ad0e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ad0e:	b580      	push	{r7, lr}
 800ad10:	b082      	sub	sp, #8
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
 800ad16:	460b      	mov	r3, r1
 800ad18:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ad1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	4619      	mov	r1, r3
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f7ff ffd2 	bl	800accc <pbuf_header_impl>
 800ad28:	4603      	mov	r3, r0
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3708      	adds	r7, #8
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
	...

0800ad34 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b086      	sub	sp, #24
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d10e      	bne.n	800ad60 <pbuf_free+0x2c>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d106      	bne.n	800ad56 <pbuf_free+0x22>
 800ad48:	4b40      	ldr	r3, [pc, #256]	@ (800ae4c <pbuf_free+0x118>)
 800ad4a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800ad4e:	4940      	ldr	r1, [pc, #256]	@ (800ae50 <pbuf_free+0x11c>)
 800ad50:	4840      	ldr	r0, [pc, #256]	@ (800ae54 <pbuf_free+0x120>)
 800ad52:	f00b ffb3 	bl	8016cbc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 800ad56:	4840      	ldr	r0, [pc, #256]	@ (800ae58 <pbuf_free+0x124>)
 800ad58:	f00c f820 	bl	8016d9c <puts>
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	e071      	b.n	800ae44 <pbuf_free+0x110>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));
 800ad60:	6879      	ldr	r1, [r7, #4]
 800ad62:	483e      	ldr	r0, [pc, #248]	@ (800ae5c <pbuf_free+0x128>)
 800ad64:	f00b ffaa 	bl	8016cbc <iprintf>

  PERF_START;

  count = 0;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ad6c:	e066      	b.n	800ae3c <pbuf_free+0x108>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	7b9b      	ldrb	r3, [r3, #14]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d106      	bne.n	800ad84 <pbuf_free+0x50>
 800ad76:	4b35      	ldr	r3, [pc, #212]	@ (800ae4c <pbuf_free+0x118>)
 800ad78:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800ad7c:	4938      	ldr	r1, [pc, #224]	@ (800ae60 <pbuf_free+0x12c>)
 800ad7e:	4835      	ldr	r0, [pc, #212]	@ (800ae54 <pbuf_free+0x120>)
 800ad80:	f00b ff9c 	bl	8016cbc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	7b9b      	ldrb	r3, [r3, #14]
 800ad88:	3b01      	subs	r3, #1
 800ad8a:	b2da      	uxtb	r2, r3
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	739a      	strb	r2, [r3, #14]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	7b9b      	ldrb	r3, [r3, #14]
 800ad94:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ad96:	7dbb      	ldrb	r3, [r7, #22]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d147      	bne.n	800ae2c <pbuf_free+0xf8>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
 800ada2:	6879      	ldr	r1, [r7, #4]
 800ada4:	482f      	ldr	r0, [pc, #188]	@ (800ae64 <pbuf_free+0x130>)
 800ada6:	f00b ff89 	bl	8016cbc <iprintf>
      alloc_src = pbuf_get_allocsrc(p);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	7b1b      	ldrb	r3, [r3, #12]
 800adae:	f003 030f 	and.w	r3, r3, #15
 800adb2:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	7b5b      	ldrb	r3, [r3, #13]
 800adb8:	f003 0302 	and.w	r3, r3, #2
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d011      	beq.n	800ade4 <pbuf_free+0xb0>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	691b      	ldr	r3, [r3, #16]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d106      	bne.n	800adda <pbuf_free+0xa6>
 800adcc:	4b1f      	ldr	r3, [pc, #124]	@ (800ae4c <pbuf_free+0x118>)
 800adce:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800add2:	4925      	ldr	r1, [pc, #148]	@ (800ae68 <pbuf_free+0x134>)
 800add4:	481f      	ldr	r0, [pc, #124]	@ (800ae54 <pbuf_free+0x120>)
 800add6:	f00b ff71 	bl	8016cbc <iprintf>
        pc->custom_free_function(p);
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	691b      	ldr	r3, [r3, #16]
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	4798      	blx	r3
 800ade2:	e01d      	b.n	800ae20 <pbuf_free+0xec>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ade4:	7bfb      	ldrb	r3, [r7, #15]
 800ade6:	2b02      	cmp	r3, #2
 800ade8:	d104      	bne.n	800adf4 <pbuf_free+0xc0>
          memp_free(MEMP_PBUF_POOL, p);
 800adea:	6879      	ldr	r1, [r7, #4]
 800adec:	2008      	movs	r0, #8
 800adee:	f7ff f8d3 	bl	8009f98 <memp_free>
 800adf2:	e015      	b.n	800ae20 <pbuf_free+0xec>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800adf4:	7bfb      	ldrb	r3, [r7, #15]
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	d104      	bne.n	800ae04 <pbuf_free+0xd0>
          memp_free(MEMP_PBUF, p);
 800adfa:	6879      	ldr	r1, [r7, #4]
 800adfc:	2007      	movs	r0, #7
 800adfe:	f7ff f8cb 	bl	8009f98 <memp_free>
 800ae02:	e00d      	b.n	800ae20 <pbuf_free+0xec>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ae04:	7bfb      	ldrb	r3, [r7, #15]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d103      	bne.n	800ae12 <pbuf_free+0xde>
          mem_free(p);
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f7fe fd54 	bl	80098b8 <mem_free>
 800ae10:	e006      	b.n	800ae20 <pbuf_free+0xec>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ae12:	4b0e      	ldr	r3, [pc, #56]	@ (800ae4c <pbuf_free+0x118>)
 800ae14:	f240 320f 	movw	r2, #783	@ 0x30f
 800ae18:	4914      	ldr	r1, [pc, #80]	@ (800ae6c <pbuf_free+0x138>)
 800ae1a:	480e      	ldr	r0, [pc, #56]	@ (800ae54 <pbuf_free+0x120>)
 800ae1c:	f00b ff4e 	bl	8016cbc <iprintf>
        }
      }
      count++;
 800ae20:	7dfb      	ldrb	r3, [r7, #23]
 800ae22:	3301      	adds	r3, #1
 800ae24:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	607b      	str	r3, [r7, #4]
 800ae2a:	e007      	b.n	800ae3c <pbuf_free+0x108>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
 800ae2c:	7dbb      	ldrb	r3, [r7, #22]
 800ae2e:	461a      	mov	r2, r3
 800ae30:	6879      	ldr	r1, [r7, #4]
 800ae32:	480f      	ldr	r0, [pc, #60]	@ (800ae70 <pbuf_free+0x13c>)
 800ae34:	f00b ff42 	bl	8016cbc <iprintf>
      /* stop walking through the chain */
      p = NULL;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d195      	bne.n	800ad6e <pbuf_free+0x3a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ae42:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3718      	adds	r7, #24
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}
 800ae4c:	0801840c 	.word	0x0801840c
 800ae50:	08018634 	.word	0x08018634
 800ae54:	0801846c 	.word	0x0801846c
 800ae58:	08018700 	.word	0x08018700
 800ae5c:	08018724 	.word	0x08018724
 800ae60:	08018734 	.word	0x08018734
 800ae64:	0801874c 	.word	0x0801874c
 800ae68:	08018768 	.word	0x08018768
 800ae6c:	0801878c 	.word	0x0801878c
 800ae70:	080187a0 	.word	0x080187a0

0800ae74 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b085      	sub	sp, #20
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ae80:	e005      	b.n	800ae8e <pbuf_clen+0x1a>
    ++len;
 800ae82:	89fb      	ldrh	r3, [r7, #14]
 800ae84:	3301      	adds	r3, #1
 800ae86:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d1f6      	bne.n	800ae82 <pbuf_clen+0xe>
  }
  return len;
 800ae94:	89fb      	ldrh	r3, [r7, #14]
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3714      	adds	r7, #20
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr
	...

0800aea4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b082      	sub	sp, #8
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d010      	beq.n	800aed4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	7b9b      	ldrb	r3, [r3, #14]
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	b2da      	uxtb	r2, r3
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	7b9b      	ldrb	r3, [r3, #14]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d106      	bne.n	800aed4 <pbuf_ref+0x30>
 800aec6:	4b05      	ldr	r3, [pc, #20]	@ (800aedc <pbuf_ref+0x38>)
 800aec8:	f240 3242 	movw	r2, #834	@ 0x342
 800aecc:	4904      	ldr	r1, [pc, #16]	@ (800aee0 <pbuf_ref+0x3c>)
 800aece:	4805      	ldr	r0, [pc, #20]	@ (800aee4 <pbuf_ref+0x40>)
 800aed0:	f00b fef4 	bl	8016cbc <iprintf>
  }
}
 800aed4:	bf00      	nop
 800aed6:	3708      	adds	r7, #8
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	0801840c 	.word	0x0801840c
 800aee0:	080187cc 	.word	0x080187cc
 800aee4:	0801846c 	.word	0x0801846c

0800aee8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d002      	beq.n	800aefe <pbuf_cat+0x16>
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d107      	bne.n	800af0e <pbuf_cat+0x26>
 800aefe:	4b20      	ldr	r3, [pc, #128]	@ (800af80 <pbuf_cat+0x98>)
 800af00:	f240 3259 	movw	r2, #857	@ 0x359
 800af04:	491f      	ldr	r1, [pc, #124]	@ (800af84 <pbuf_cat+0x9c>)
 800af06:	4820      	ldr	r0, [pc, #128]	@ (800af88 <pbuf_cat+0xa0>)
 800af08:	f00b fed8 	bl	8016cbc <iprintf>
 800af0c:	e034      	b.n	800af78 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	60fb      	str	r3, [r7, #12]
 800af12:	e00a      	b.n	800af2a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	891a      	ldrh	r2, [r3, #8]
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	891b      	ldrh	r3, [r3, #8]
 800af1c:	4413      	add	r3, r2
 800af1e:	b29a      	uxth	r2, r3
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	60fb      	str	r3, [r7, #12]
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d1f0      	bne.n	800af14 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	891a      	ldrh	r2, [r3, #8]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	895b      	ldrh	r3, [r3, #10]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d006      	beq.n	800af4c <pbuf_cat+0x64>
 800af3e:	4b10      	ldr	r3, [pc, #64]	@ (800af80 <pbuf_cat+0x98>)
 800af40:	f240 3262 	movw	r2, #866	@ 0x362
 800af44:	4911      	ldr	r1, [pc, #68]	@ (800af8c <pbuf_cat+0xa4>)
 800af46:	4810      	ldr	r0, [pc, #64]	@ (800af88 <pbuf_cat+0xa0>)
 800af48:	f00b feb8 	bl	8016cbc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d006      	beq.n	800af62 <pbuf_cat+0x7a>
 800af54:	4b0a      	ldr	r3, [pc, #40]	@ (800af80 <pbuf_cat+0x98>)
 800af56:	f240 3263 	movw	r2, #867	@ 0x363
 800af5a:	490d      	ldr	r1, [pc, #52]	@ (800af90 <pbuf_cat+0xa8>)
 800af5c:	480a      	ldr	r0, [pc, #40]	@ (800af88 <pbuf_cat+0xa0>)
 800af5e:	f00b fead 	bl	8016cbc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	891a      	ldrh	r2, [r3, #8]
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	891b      	ldrh	r3, [r3, #8]
 800af6a:	4413      	add	r3, r2
 800af6c:	b29a      	uxth	r2, r3
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	683a      	ldr	r2, [r7, #0]
 800af76:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800af78:	3710      	adds	r7, #16
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	0801840c 	.word	0x0801840c
 800af84:	080187e0 	.word	0x080187e0
 800af88:	0801846c 	.word	0x0801846c
 800af8c:	08018818 	.word	0x08018818
 800af90:	08018848 	.word	0x08018848

0800af94 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b082      	sub	sp, #8
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800af9e:	6839      	ldr	r1, [r7, #0]
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f7ff ffa1 	bl	800aee8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800afa6:	6838      	ldr	r0, [r7, #0]
 800afa8:	f7ff ff7c 	bl	800aea4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
 800afac:	683a      	ldr	r2, [r7, #0]
 800afae:	6879      	ldr	r1, [r7, #4]
 800afb0:	4803      	ldr	r0, [pc, #12]	@ (800afc0 <pbuf_chain+0x2c>)
 800afb2:	f00b fe83 	bl	8016cbc <iprintf>
}
 800afb6:	bf00      	nop
 800afb8:	3708      	adds	r7, #8
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	08018858 	.word	0x08018858

0800afc4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b086      	sub	sp, #24
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800afce:	2300      	movs	r3, #0
 800afd0:	617b      	str	r3, [r7, #20]
 800afd2:	2300      	movs	r3, #0
 800afd4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
 800afd6:	683a      	ldr	r2, [r7, #0]
 800afd8:	6879      	ldr	r1, [r7, #4]
 800afda:	4860      	ldr	r0, [pc, #384]	@ (800b15c <pbuf_copy+0x198>)
 800afdc:	f00b fe6e 	bl	8016cbc <iprintf>
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d008      	beq.n	800aff8 <pbuf_copy+0x34>
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d005      	beq.n	800aff8 <pbuf_copy+0x34>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	891a      	ldrh	r2, [r3, #8]
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	891b      	ldrh	r3, [r3, #8]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d209      	bcs.n	800b00c <pbuf_copy+0x48>
 800aff8:	4b59      	ldr	r3, [pc, #356]	@ (800b160 <pbuf_copy+0x19c>)
 800affa:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800affe:	4959      	ldr	r1, [pc, #356]	@ (800b164 <pbuf_copy+0x1a0>)
 800b000:	4859      	ldr	r0, [pc, #356]	@ (800b168 <pbuf_copy+0x1a4>)
 800b002:	f00b fe5b 	bl	8016cbc <iprintf>
 800b006:	f06f 030f 	mvn.w	r3, #15
 800b00a:	e0a2      	b.n	800b152 <pbuf_copy+0x18e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	895b      	ldrh	r3, [r3, #10]
 800b010:	461a      	mov	r2, r3
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	1ad2      	subs	r2, r2, r3
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	895b      	ldrh	r3, [r3, #10]
 800b01a:	4619      	mov	r1, r3
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	1acb      	subs	r3, r1, r3
 800b020:	429a      	cmp	r2, r3
 800b022:	d306      	bcc.n	800b032 <pbuf_copy+0x6e>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	895b      	ldrh	r3, [r3, #10]
 800b028:	461a      	mov	r2, r3
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	1ad3      	subs	r3, r2, r3
 800b02e:	60fb      	str	r3, [r7, #12]
 800b030:	e005      	b.n	800b03e <pbuf_copy+0x7a>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	895b      	ldrh	r3, [r3, #10]
 800b036:	461a      	mov	r2, r3
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	1ad3      	subs	r3, r2, r3
 800b03c:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	685a      	ldr	r2, [r3, #4]
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	18d0      	adds	r0, r2, r3
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	685a      	ldr	r2, [r3, #4]
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	4413      	add	r3, r2
 800b04e:	68fa      	ldr	r2, [r7, #12]
 800b050:	4619      	mov	r1, r3
 800b052:	f00c f808 	bl	8017066 <memcpy>
    offset_to += len;
 800b056:	697a      	ldr	r2, [r7, #20]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	4413      	add	r3, r2
 800b05c:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b05e:	693a      	ldr	r2, [r7, #16]
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	4413      	add	r3, r2
 800b064:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	895b      	ldrh	r3, [r3, #10]
 800b06a:	461a      	mov	r2, r3
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	4293      	cmp	r3, r2
 800b070:	d906      	bls.n	800b080 <pbuf_copy+0xbc>
 800b072:	4b3b      	ldr	r3, [pc, #236]	@ (800b160 <pbuf_copy+0x19c>)
 800b074:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800b078:	493c      	ldr	r1, [pc, #240]	@ (800b16c <pbuf_copy+0x1a8>)
 800b07a:	483b      	ldr	r0, [pc, #236]	@ (800b168 <pbuf_copy+0x1a4>)
 800b07c:	f00b fe1e 	bl	8016cbc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	895b      	ldrh	r3, [r3, #10]
 800b084:	461a      	mov	r2, r3
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	4293      	cmp	r3, r2
 800b08a:	d906      	bls.n	800b09a <pbuf_copy+0xd6>
 800b08c:	4b34      	ldr	r3, [pc, #208]	@ (800b160 <pbuf_copy+0x19c>)
 800b08e:	f240 32da 	movw	r2, #986	@ 0x3da
 800b092:	4937      	ldr	r1, [pc, #220]	@ (800b170 <pbuf_copy+0x1ac>)
 800b094:	4834      	ldr	r0, [pc, #208]	@ (800b168 <pbuf_copy+0x1a4>)
 800b096:	f00b fe11 	bl	8016cbc <iprintf>
    if (offset_from >= p_from->len) {
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	895b      	ldrh	r3, [r3, #10]
 800b09e:	461a      	mov	r2, r3
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d304      	bcc.n	800b0b0 <pbuf_copy+0xec>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	895b      	ldrh	r3, [r3, #10]
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d114      	bne.n	800b0e6 <pbuf_copy+0x122>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d10c      	bne.n	800b0e6 <pbuf_copy+0x122>
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d009      	beq.n	800b0e6 <pbuf_copy+0x122>
 800b0d2:	4b23      	ldr	r3, [pc, #140]	@ (800b160 <pbuf_copy+0x19c>)
 800b0d4:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800b0d8:	4926      	ldr	r1, [pc, #152]	@ (800b174 <pbuf_copy+0x1b0>)
 800b0da:	4823      	ldr	r0, [pc, #140]	@ (800b168 <pbuf_copy+0x1a4>)
 800b0dc:	f00b fdee 	bl	8016cbc <iprintf>
 800b0e0:	f06f 030f 	mvn.w	r3, #15
 800b0e4:	e035      	b.n	800b152 <pbuf_copy+0x18e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d013      	beq.n	800b114 <pbuf_copy+0x150>
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	895a      	ldrh	r2, [r3, #10]
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	891b      	ldrh	r3, [r3, #8]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d10d      	bne.n	800b114 <pbuf_copy+0x150>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d009      	beq.n	800b114 <pbuf_copy+0x150>
 800b100:	4b17      	ldr	r3, [pc, #92]	@ (800b160 <pbuf_copy+0x19c>)
 800b102:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800b106:	491c      	ldr	r1, [pc, #112]	@ (800b178 <pbuf_copy+0x1b4>)
 800b108:	4817      	ldr	r0, [pc, #92]	@ (800b168 <pbuf_copy+0x1a4>)
 800b10a:	f00b fdd7 	bl	8016cbc <iprintf>
 800b10e:	f06f 0305 	mvn.w	r3, #5
 800b112:	e01e      	b.n	800b152 <pbuf_copy+0x18e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d013      	beq.n	800b142 <pbuf_copy+0x17e>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	895a      	ldrh	r2, [r3, #10]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	891b      	ldrh	r3, [r3, #8]
 800b122:	429a      	cmp	r2, r3
 800b124:	d10d      	bne.n	800b142 <pbuf_copy+0x17e>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d009      	beq.n	800b142 <pbuf_copy+0x17e>
 800b12e:	4b0c      	ldr	r3, [pc, #48]	@ (800b160 <pbuf_copy+0x19c>)
 800b130:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800b134:	4910      	ldr	r1, [pc, #64]	@ (800b178 <pbuf_copy+0x1b4>)
 800b136:	480c      	ldr	r0, [pc, #48]	@ (800b168 <pbuf_copy+0x1a4>)
 800b138:	f00b fdc0 	bl	8016cbc <iprintf>
 800b13c:	f06f 0305 	mvn.w	r3, #5
 800b140:	e007      	b.n	800b152 <pbuf_copy+0x18e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	2b00      	cmp	r3, #0
 800b146:	f47f af61 	bne.w	800b00c <pbuf_copy+0x48>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
 800b14a:	480c      	ldr	r0, [pc, #48]	@ (800b17c <pbuf_copy+0x1b8>)
 800b14c:	f00b fe26 	bl	8016d9c <puts>
  return ERR_OK;
 800b150:	2300      	movs	r3, #0
}
 800b152:	4618      	mov	r0, r3
 800b154:	3718      	adds	r7, #24
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	08018914 	.word	0x08018914
 800b160:	0801840c 	.word	0x0801840c
 800b164:	08018928 	.word	0x08018928
 800b168:	0801846c 	.word	0x0801846c
 800b16c:	08018958 	.word	0x08018958
 800b170:	08018970 	.word	0x08018970
 800b174:	0801898c 	.word	0x0801898c
 800b178:	0801899c 	.word	0x0801899c
 800b17c:	080189c8 	.word	0x080189c8

0800b180 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b088      	sub	sp, #32
 800b184:	af00      	add	r7, sp, #0
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	60b9      	str	r1, [r7, #8]
 800b18a:	4611      	mov	r1, r2
 800b18c:	461a      	mov	r2, r3
 800b18e:	460b      	mov	r3, r1
 800b190:	80fb      	strh	r3, [r7, #6]
 800b192:	4613      	mov	r3, r2
 800b194:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b196:	2300      	movs	r3, #0
 800b198:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b19a:	2300      	movs	r3, #0
 800b19c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d108      	bne.n	800b1b6 <pbuf_copy_partial+0x36>
 800b1a4:	4b2b      	ldr	r3, [pc, #172]	@ (800b254 <pbuf_copy_partial+0xd4>)
 800b1a6:	f240 420a 	movw	r2, #1034	@ 0x40a
 800b1aa:	492b      	ldr	r1, [pc, #172]	@ (800b258 <pbuf_copy_partial+0xd8>)
 800b1ac:	482b      	ldr	r0, [pc, #172]	@ (800b25c <pbuf_copy_partial+0xdc>)
 800b1ae:	f00b fd85 	bl	8016cbc <iprintf>
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	e04a      	b.n	800b24c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d108      	bne.n	800b1ce <pbuf_copy_partial+0x4e>
 800b1bc:	4b25      	ldr	r3, [pc, #148]	@ (800b254 <pbuf_copy_partial+0xd4>)
 800b1be:	f240 420b 	movw	r2, #1035	@ 0x40b
 800b1c2:	4927      	ldr	r1, [pc, #156]	@ (800b260 <pbuf_copy_partial+0xe0>)
 800b1c4:	4825      	ldr	r0, [pc, #148]	@ (800b25c <pbuf_copy_partial+0xdc>)
 800b1c6:	f00b fd79 	bl	8016cbc <iprintf>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	e03e      	b.n	800b24c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	61fb      	str	r3, [r7, #28]
 800b1d2:	e034      	b.n	800b23e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b1d4:	88bb      	ldrh	r3, [r7, #4]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d00a      	beq.n	800b1f0 <pbuf_copy_partial+0x70>
 800b1da:	69fb      	ldr	r3, [r7, #28]
 800b1dc:	895b      	ldrh	r3, [r3, #10]
 800b1de:	88ba      	ldrh	r2, [r7, #4]
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d305      	bcc.n	800b1f0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	895b      	ldrh	r3, [r3, #10]
 800b1e8:	88ba      	ldrh	r2, [r7, #4]
 800b1ea:	1ad3      	subs	r3, r2, r3
 800b1ec:	80bb      	strh	r3, [r7, #4]
 800b1ee:	e023      	b.n	800b238 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	895a      	ldrh	r2, [r3, #10]
 800b1f4:	88bb      	ldrh	r3, [r7, #4]
 800b1f6:	1ad3      	subs	r3, r2, r3
 800b1f8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b1fa:	8b3a      	ldrh	r2, [r7, #24]
 800b1fc:	88fb      	ldrh	r3, [r7, #6]
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d901      	bls.n	800b206 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b202:	88fb      	ldrh	r3, [r7, #6]
 800b204:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b206:	8b7b      	ldrh	r3, [r7, #26]
 800b208:	68ba      	ldr	r2, [r7, #8]
 800b20a:	18d0      	adds	r0, r2, r3
 800b20c:	69fb      	ldr	r3, [r7, #28]
 800b20e:	685a      	ldr	r2, [r3, #4]
 800b210:	88bb      	ldrh	r3, [r7, #4]
 800b212:	4413      	add	r3, r2
 800b214:	8b3a      	ldrh	r2, [r7, #24]
 800b216:	4619      	mov	r1, r3
 800b218:	f00b ff25 	bl	8017066 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b21c:	8afa      	ldrh	r2, [r7, #22]
 800b21e:	8b3b      	ldrh	r3, [r7, #24]
 800b220:	4413      	add	r3, r2
 800b222:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b224:	8b7a      	ldrh	r2, [r7, #26]
 800b226:	8b3b      	ldrh	r3, [r7, #24]
 800b228:	4413      	add	r3, r2
 800b22a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b22c:	88fa      	ldrh	r2, [r7, #6]
 800b22e:	8b3b      	ldrh	r3, [r7, #24]
 800b230:	1ad3      	subs	r3, r2, r3
 800b232:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b234:	2300      	movs	r3, #0
 800b236:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b238:	69fb      	ldr	r3, [r7, #28]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	61fb      	str	r3, [r7, #28]
 800b23e:	88fb      	ldrh	r3, [r7, #6]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d002      	beq.n	800b24a <pbuf_copy_partial+0xca>
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d1c4      	bne.n	800b1d4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b24a:	8afb      	ldrh	r3, [r7, #22]
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3720      	adds	r7, #32
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	0801840c 	.word	0x0801840c
 800b258:	080189ec 	.word	0x080189ec
 800b25c:	0801846c 	.word	0x0801846c
 800b260:	08018a0c 	.word	0x08018a0c

0800b264 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
 800b26a:	4603      	mov	r3, r0
 800b26c:	603a      	str	r2, [r7, #0]
 800b26e:	71fb      	strb	r3, [r7, #7]
 800b270:	460b      	mov	r3, r1
 800b272:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	8919      	ldrh	r1, [r3, #8]
 800b278:	88ba      	ldrh	r2, [r7, #4]
 800b27a:	79fb      	ldrb	r3, [r7, #7]
 800b27c:	4618      	mov	r0, r3
 800b27e:	f7ff fa2d 	bl	800a6dc <pbuf_alloc>
 800b282:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d101      	bne.n	800b28e <pbuf_clone+0x2a>
    return NULL;
 800b28a:	2300      	movs	r3, #0
 800b28c:	e011      	b.n	800b2b2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b28e:	6839      	ldr	r1, [r7, #0]
 800b290:	68f8      	ldr	r0, [r7, #12]
 800b292:	f7ff fe97 	bl	800afc4 <pbuf_copy>
 800b296:	4603      	mov	r3, r0
 800b298:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b29a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d006      	beq.n	800b2b0 <pbuf_clone+0x4c>
 800b2a2:	4b06      	ldr	r3, [pc, #24]	@ (800b2bc <pbuf_clone+0x58>)
 800b2a4:	f240 5224 	movw	r2, #1316	@ 0x524
 800b2a8:	4905      	ldr	r1, [pc, #20]	@ (800b2c0 <pbuf_clone+0x5c>)
 800b2aa:	4806      	ldr	r0, [pc, #24]	@ (800b2c4 <pbuf_clone+0x60>)
 800b2ac:	f00b fd06 	bl	8016cbc <iprintf>
  return q;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3710      	adds	r7, #16
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	0801840c 	.word	0x0801840c
 800b2c0:	08018b18 	.word	0x08018b18
 800b2c4:	0801846c 	.word	0x0801846c

0800b2c8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b2cc:	f00b fbf6 	bl	8016abc <rand>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b2d8:	b29b      	uxth	r3, r3
 800b2da:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800b2de:	b29a      	uxth	r2, r3
 800b2e0:	4b01      	ldr	r3, [pc, #4]	@ (800b2e8 <tcp_init+0x20>)
 800b2e2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b2e4:	bf00      	nop
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	2400007c 	.word	0x2400007c

0800b2ec <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	7d1b      	ldrb	r3, [r3, #20]
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d105      	bne.n	800b308 <tcp_free+0x1c>
 800b2fc:	4b06      	ldr	r3, [pc, #24]	@ (800b318 <tcp_free+0x2c>)
 800b2fe:	22d4      	movs	r2, #212	@ 0xd4
 800b300:	4906      	ldr	r1, [pc, #24]	@ (800b31c <tcp_free+0x30>)
 800b302:	4807      	ldr	r0, [pc, #28]	@ (800b320 <tcp_free+0x34>)
 800b304:	f00b fcda 	bl	8016cbc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b308:	6879      	ldr	r1, [r7, #4]
 800b30a:	2001      	movs	r0, #1
 800b30c:	f7fe fe44 	bl	8009f98 <memp_free>
}
 800b310:	bf00      	nop
 800b312:	3708      	adds	r7, #8
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}
 800b318:	08018ba4 	.word	0x08018ba4
 800b31c:	08018bd4 	.word	0x08018bd4
 800b320:	08018be8 	.word	0x08018be8

0800b324 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	7d1b      	ldrb	r3, [r3, #20]
 800b330:	2b01      	cmp	r3, #1
 800b332:	d105      	bne.n	800b340 <tcp_free_listen+0x1c>
 800b334:	4b06      	ldr	r3, [pc, #24]	@ (800b350 <tcp_free_listen+0x2c>)
 800b336:	22df      	movs	r2, #223	@ 0xdf
 800b338:	4906      	ldr	r1, [pc, #24]	@ (800b354 <tcp_free_listen+0x30>)
 800b33a:	4807      	ldr	r0, [pc, #28]	@ (800b358 <tcp_free_listen+0x34>)
 800b33c:	f00b fcbe 	bl	8016cbc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b340:	6879      	ldr	r1, [r7, #4]
 800b342:	2002      	movs	r0, #2
 800b344:	f7fe fe28 	bl	8009f98 <memp_free>
}
 800b348:	bf00      	nop
 800b34a:	3708      	adds	r7, #8
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	08018ba4 	.word	0x08018ba4
 800b354:	08018c10 	.word	0x08018c10
 800b358:	08018be8 	.word	0x08018be8

0800b35c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b360:	f000 ff0e 	bl	800c180 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b364:	4b07      	ldr	r3, [pc, #28]	@ (800b384 <tcp_tmr+0x28>)
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	3301      	adds	r3, #1
 800b36a:	b2da      	uxtb	r2, r3
 800b36c:	4b05      	ldr	r3, [pc, #20]	@ (800b384 <tcp_tmr+0x28>)
 800b36e:	701a      	strb	r2, [r3, #0]
 800b370:	4b04      	ldr	r3, [pc, #16]	@ (800b384 <tcp_tmr+0x28>)
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	f003 0301 	and.w	r3, r3, #1
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d001      	beq.n	800b380 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b37c:	f000 fb70 	bl	800ba60 <tcp_slowtmr>
  }
}
 800b380:	bf00      	nop
 800b382:	bd80      	pop	{r7, pc}
 800b384:	24003305 	.word	0x24003305

0800b388 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b084      	sub	sp, #16
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d105      	bne.n	800b3a4 <tcp_remove_listener+0x1c>
 800b398:	4b0d      	ldr	r3, [pc, #52]	@ (800b3d0 <tcp_remove_listener+0x48>)
 800b39a:	22ff      	movs	r2, #255	@ 0xff
 800b39c:	490d      	ldr	r1, [pc, #52]	@ (800b3d4 <tcp_remove_listener+0x4c>)
 800b39e:	480e      	ldr	r0, [pc, #56]	@ (800b3d8 <tcp_remove_listener+0x50>)
 800b3a0:	f00b fc8c 	bl	8016cbc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	60fb      	str	r3, [r7, #12]
 800b3a8:	e00a      	b.n	800b3c0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b3ae:	683a      	ldr	r2, [r7, #0]
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d102      	bne.n	800b3ba <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	68db      	ldr	r3, [r3, #12]
 800b3be:	60fb      	str	r3, [r7, #12]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d1f1      	bne.n	800b3aa <tcp_remove_listener+0x22>
    }
  }
}
 800b3c6:	bf00      	nop
 800b3c8:	bf00      	nop
 800b3ca:	3710      	adds	r7, #16
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}
 800b3d0:	08018ba4 	.word	0x08018ba4
 800b3d4:	08018c2c 	.word	0x08018c2c
 800b3d8:	08018be8 	.word	0x08018be8

0800b3dc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d106      	bne.n	800b3f8 <tcp_listen_closed+0x1c>
 800b3ea:	4b14      	ldr	r3, [pc, #80]	@ (800b43c <tcp_listen_closed+0x60>)
 800b3ec:	f240 1211 	movw	r2, #273	@ 0x111
 800b3f0:	4913      	ldr	r1, [pc, #76]	@ (800b440 <tcp_listen_closed+0x64>)
 800b3f2:	4814      	ldr	r0, [pc, #80]	@ (800b444 <tcp_listen_closed+0x68>)
 800b3f4:	f00b fc62 	bl	8016cbc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	7d1b      	ldrb	r3, [r3, #20]
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d006      	beq.n	800b40e <tcp_listen_closed+0x32>
 800b400:	4b0e      	ldr	r3, [pc, #56]	@ (800b43c <tcp_listen_closed+0x60>)
 800b402:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800b406:	4910      	ldr	r1, [pc, #64]	@ (800b448 <tcp_listen_closed+0x6c>)
 800b408:	480e      	ldr	r0, [pc, #56]	@ (800b444 <tcp_listen_closed+0x68>)
 800b40a:	f00b fc57 	bl	8016cbc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b40e:	2301      	movs	r3, #1
 800b410:	60fb      	str	r3, [r7, #12]
 800b412:	e00b      	b.n	800b42c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b414:	4a0d      	ldr	r2, [pc, #52]	@ (800b44c <tcp_listen_closed+0x70>)
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	6879      	ldr	r1, [r7, #4]
 800b420:	4618      	mov	r0, r3
 800b422:	f7ff ffb1 	bl	800b388 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	3301      	adds	r3, #1
 800b42a:	60fb      	str	r3, [r7, #12]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2b03      	cmp	r3, #3
 800b430:	d9f0      	bls.n	800b414 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800b432:	bf00      	nop
 800b434:	bf00      	nop
 800b436:	3710      	adds	r7, #16
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}
 800b43c:	08018ba4 	.word	0x08018ba4
 800b440:	08018c54 	.word	0x08018c54
 800b444:	08018be8 	.word	0x08018be8
 800b448:	08018c60 	.word	0x08018c60
 800b44c:	0801dc18 	.word	0x0801dc18

0800b450 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b450:	b5b0      	push	{r4, r5, r7, lr}
 800b452:	b088      	sub	sp, #32
 800b454:	af04      	add	r7, sp, #16
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	460b      	mov	r3, r1
 800b45a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d106      	bne.n	800b470 <tcp_close_shutdown+0x20>
 800b462:	4b63      	ldr	r3, [pc, #396]	@ (800b5f0 <tcp_close_shutdown+0x1a0>)
 800b464:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800b468:	4962      	ldr	r1, [pc, #392]	@ (800b5f4 <tcp_close_shutdown+0x1a4>)
 800b46a:	4863      	ldr	r0, [pc, #396]	@ (800b5f8 <tcp_close_shutdown+0x1a8>)
 800b46c:	f00b fc26 	bl	8016cbc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b470:	78fb      	ldrb	r3, [r7, #3]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d066      	beq.n	800b544 <tcp_close_shutdown+0xf4>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	7d1b      	ldrb	r3, [r3, #20]
 800b47a:	2b04      	cmp	r3, #4
 800b47c:	d003      	beq.n	800b486 <tcp_close_shutdown+0x36>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	7d1b      	ldrb	r3, [r3, #20]
 800b482:	2b07      	cmp	r3, #7
 800b484:	d15e      	bne.n	800b544 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d104      	bne.n	800b498 <tcp_close_shutdown+0x48>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b492:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800b496:	d055      	beq.n	800b544 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	8b5b      	ldrh	r3, [r3, #26]
 800b49c:	f003 0310 	and.w	r3, r3, #16
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d106      	bne.n	800b4b2 <tcp_close_shutdown+0x62>
 800b4a4:	4b52      	ldr	r3, [pc, #328]	@ (800b5f0 <tcp_close_shutdown+0x1a0>)
 800b4a6:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800b4aa:	4954      	ldr	r1, [pc, #336]	@ (800b5fc <tcp_close_shutdown+0x1ac>)
 800b4ac:	4852      	ldr	r0, [pc, #328]	@ (800b5f8 <tcp_close_shutdown+0x1a8>)
 800b4ae:	f00b fc05 	bl	8016cbc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800b4ba:	687d      	ldr	r5, [r7, #4]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	3304      	adds	r3, #4
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	8ad2      	ldrh	r2, [r2, #22]
 800b4c4:	6879      	ldr	r1, [r7, #4]
 800b4c6:	8b09      	ldrh	r1, [r1, #24]
 800b4c8:	9102      	str	r1, [sp, #8]
 800b4ca:	9201      	str	r2, [sp, #4]
 800b4cc:	9300      	str	r3, [sp, #0]
 800b4ce:	462b      	mov	r3, r5
 800b4d0:	4622      	mov	r2, r4
 800b4d2:	4601      	mov	r1, r0
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f005 f881 	bl	80105dc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f001 f974 	bl	800c7c8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b4e0:	4b47      	ldr	r3, [pc, #284]	@ (800b600 <tcp_close_shutdown+0x1b0>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d105      	bne.n	800b4f6 <tcp_close_shutdown+0xa6>
 800b4ea:	4b45      	ldr	r3, [pc, #276]	@ (800b600 <tcp_close_shutdown+0x1b0>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	68db      	ldr	r3, [r3, #12]
 800b4f0:	4a43      	ldr	r2, [pc, #268]	@ (800b600 <tcp_close_shutdown+0x1b0>)
 800b4f2:	6013      	str	r3, [r2, #0]
 800b4f4:	e013      	b.n	800b51e <tcp_close_shutdown+0xce>
 800b4f6:	4b42      	ldr	r3, [pc, #264]	@ (800b600 <tcp_close_shutdown+0x1b0>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	60fb      	str	r3, [r7, #12]
 800b4fc:	e00c      	b.n	800b518 <tcp_close_shutdown+0xc8>
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	68db      	ldr	r3, [r3, #12]
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	429a      	cmp	r2, r3
 800b506:	d104      	bne.n	800b512 <tcp_close_shutdown+0xc2>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	68da      	ldr	r2, [r3, #12]
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	60da      	str	r2, [r3, #12]
 800b510:	e005      	b.n	800b51e <tcp_close_shutdown+0xce>
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	60fb      	str	r3, [r7, #12]
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d1ef      	bne.n	800b4fe <tcp_close_shutdown+0xae>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2200      	movs	r2, #0
 800b522:	60da      	str	r2, [r3, #12]
 800b524:	4b37      	ldr	r3, [pc, #220]	@ (800b604 <tcp_close_shutdown+0x1b4>)
 800b526:	2201      	movs	r2, #1
 800b528:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800b52a:	4b37      	ldr	r3, [pc, #220]	@ (800b608 <tcp_close_shutdown+0x1b8>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	687a      	ldr	r2, [r7, #4]
 800b530:	429a      	cmp	r2, r3
 800b532:	d102      	bne.n	800b53a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800b534:	f003 ff3c 	bl	800f3b0 <tcp_trigger_input_pcb_close>
 800b538:	e002      	b.n	800b540 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f7ff fed6 	bl	800b2ec <tcp_free>
      }
      return ERR_OK;
 800b540:	2300      	movs	r3, #0
 800b542:	e050      	b.n	800b5e6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	7d1b      	ldrb	r3, [r3, #20]
 800b548:	2b02      	cmp	r3, #2
 800b54a:	d03b      	beq.n	800b5c4 <tcp_close_shutdown+0x174>
 800b54c:	2b02      	cmp	r3, #2
 800b54e:	dc44      	bgt.n	800b5da <tcp_close_shutdown+0x18a>
 800b550:	2b00      	cmp	r3, #0
 800b552:	d002      	beq.n	800b55a <tcp_close_shutdown+0x10a>
 800b554:	2b01      	cmp	r3, #1
 800b556:	d02a      	beq.n	800b5ae <tcp_close_shutdown+0x15e>
 800b558:	e03f      	b.n	800b5da <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	8adb      	ldrh	r3, [r3, #22]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d021      	beq.n	800b5a6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b562:	4b2a      	ldr	r3, [pc, #168]	@ (800b60c <tcp_close_shutdown+0x1bc>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	429a      	cmp	r2, r3
 800b56a:	d105      	bne.n	800b578 <tcp_close_shutdown+0x128>
 800b56c:	4b27      	ldr	r3, [pc, #156]	@ (800b60c <tcp_close_shutdown+0x1bc>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	68db      	ldr	r3, [r3, #12]
 800b572:	4a26      	ldr	r2, [pc, #152]	@ (800b60c <tcp_close_shutdown+0x1bc>)
 800b574:	6013      	str	r3, [r2, #0]
 800b576:	e013      	b.n	800b5a0 <tcp_close_shutdown+0x150>
 800b578:	4b24      	ldr	r3, [pc, #144]	@ (800b60c <tcp_close_shutdown+0x1bc>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	60bb      	str	r3, [r7, #8]
 800b57e:	e00c      	b.n	800b59a <tcp_close_shutdown+0x14a>
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	68db      	ldr	r3, [r3, #12]
 800b584:	687a      	ldr	r2, [r7, #4]
 800b586:	429a      	cmp	r2, r3
 800b588:	d104      	bne.n	800b594 <tcp_close_shutdown+0x144>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	68da      	ldr	r2, [r3, #12]
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	60da      	str	r2, [r3, #12]
 800b592:	e005      	b.n	800b5a0 <tcp_close_shutdown+0x150>
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	68db      	ldr	r3, [r3, #12]
 800b598:	60bb      	str	r3, [r7, #8]
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d1ef      	bne.n	800b580 <tcp_close_shutdown+0x130>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f7ff fea0 	bl	800b2ec <tcp_free>
      break;
 800b5ac:	e01a      	b.n	800b5e4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f7ff ff14 	bl	800b3dc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b5b4:	6879      	ldr	r1, [r7, #4]
 800b5b6:	4816      	ldr	r0, [pc, #88]	@ (800b610 <tcp_close_shutdown+0x1c0>)
 800b5b8:	f001 f978 	bl	800c8ac <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f7ff feb1 	bl	800b324 <tcp_free_listen>
      break;
 800b5c2:	e00f      	b.n	800b5e4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b5c4:	6879      	ldr	r1, [r7, #4]
 800b5c6:	480e      	ldr	r0, [pc, #56]	@ (800b600 <tcp_close_shutdown+0x1b0>)
 800b5c8:	f001 f970 	bl	800c8ac <tcp_pcb_remove>
 800b5cc:	4b0d      	ldr	r3, [pc, #52]	@ (800b604 <tcp_close_shutdown+0x1b4>)
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f7ff fe8a 	bl	800b2ec <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800b5d8:	e004      	b.n	800b5e4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 f81a 	bl	800b614 <tcp_close_shutdown_fin>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	e000      	b.n	800b5e6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800b5e4:	2300      	movs	r3, #0
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3710      	adds	r7, #16
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bdb0      	pop	{r4, r5, r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	08018ba4 	.word	0x08018ba4
 800b5f4:	08018c78 	.word	0x08018c78
 800b5f8:	08018be8 	.word	0x08018be8
 800b5fc:	08018c98 	.word	0x08018c98
 800b600:	240032fc 	.word	0x240032fc
 800b604:	24003304 	.word	0x24003304
 800b608:	24003340 	.word	0x24003340
 800b60c:	240032f4 	.word	0x240032f4
 800b610:	240032f8 	.word	0x240032f8

0800b614 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b084      	sub	sp, #16
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d106      	bne.n	800b630 <tcp_close_shutdown_fin+0x1c>
 800b622:	4b2e      	ldr	r3, [pc, #184]	@ (800b6dc <tcp_close_shutdown_fin+0xc8>)
 800b624:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800b628:	492d      	ldr	r1, [pc, #180]	@ (800b6e0 <tcp_close_shutdown_fin+0xcc>)
 800b62a:	482e      	ldr	r0, [pc, #184]	@ (800b6e4 <tcp_close_shutdown_fin+0xd0>)
 800b62c:	f00b fb46 	bl	8016cbc <iprintf>

  switch (pcb->state) {
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	7d1b      	ldrb	r3, [r3, #20]
 800b634:	2b07      	cmp	r3, #7
 800b636:	d020      	beq.n	800b67a <tcp_close_shutdown_fin+0x66>
 800b638:	2b07      	cmp	r3, #7
 800b63a:	dc2b      	bgt.n	800b694 <tcp_close_shutdown_fin+0x80>
 800b63c:	2b03      	cmp	r3, #3
 800b63e:	d002      	beq.n	800b646 <tcp_close_shutdown_fin+0x32>
 800b640:	2b04      	cmp	r3, #4
 800b642:	d00d      	beq.n	800b660 <tcp_close_shutdown_fin+0x4c>
 800b644:	e026      	b.n	800b694 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f004 f8ca 	bl	800f7e0 <tcp_send_fin>
 800b64c:	4603      	mov	r3, r0
 800b64e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b650:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d11f      	bne.n	800b698 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2205      	movs	r2, #5
 800b65c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b65e:	e01b      	b.n	800b698 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f004 f8bd 	bl	800f7e0 <tcp_send_fin>
 800b666:	4603      	mov	r3, r0
 800b668:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b66a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d114      	bne.n	800b69c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2205      	movs	r2, #5
 800b676:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b678:	e010      	b.n	800b69c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f004 f8b0 	bl	800f7e0 <tcp_send_fin>
 800b680:	4603      	mov	r3, r0
 800b682:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d109      	bne.n	800b6a0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2209      	movs	r2, #9
 800b690:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b692:	e005      	b.n	800b6a0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800b694:	2300      	movs	r3, #0
 800b696:	e01c      	b.n	800b6d2 <tcp_close_shutdown_fin+0xbe>
      break;
 800b698:	bf00      	nop
 800b69a:	e002      	b.n	800b6a2 <tcp_close_shutdown_fin+0x8e>
      break;
 800b69c:	bf00      	nop
 800b69e:	e000      	b.n	800b6a2 <tcp_close_shutdown_fin+0x8e>
      break;
 800b6a0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b6a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d103      	bne.n	800b6b2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f004 f9d6 	bl	800fa5c <tcp_output>
 800b6b0:	e00d      	b.n	800b6ce <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800b6b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b6ba:	d108      	bne.n	800b6ce <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	8b5b      	ldrh	r3, [r3, #26]
 800b6c0:	f043 0308 	orr.w	r3, r3, #8
 800b6c4:	b29a      	uxth	r2, r3
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	e001      	b.n	800b6d2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800b6ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3710      	adds	r7, #16
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	08018ba4 	.word	0x08018ba4
 800b6e0:	08018c54 	.word	0x08018c54
 800b6e4:	08018be8 	.word	0x08018be8

0800b6e8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b082      	sub	sp, #8
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d109      	bne.n	800b70a <tcp_close+0x22>
 800b6f6:	4b13      	ldr	r3, [pc, #76]	@ (800b744 <tcp_close+0x5c>)
 800b6f8:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800b6fc:	4912      	ldr	r1, [pc, #72]	@ (800b748 <tcp_close+0x60>)
 800b6fe:	4813      	ldr	r0, [pc, #76]	@ (800b74c <tcp_close+0x64>)
 800b700:	f00b fadc 	bl	8016cbc <iprintf>
 800b704:	f06f 030f 	mvn.w	r3, #15
 800b708:	e017      	b.n	800b73a <tcp_close+0x52>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
 800b70a:	4811      	ldr	r0, [pc, #68]	@ (800b750 <tcp_close+0x68>)
 800b70c:	f00b fad6 	bl	8016cbc <iprintf>

  tcp_debug_print_state(pcb->state);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	7d1b      	ldrb	r3, [r3, #20]
 800b714:	4618      	mov	r0, r3
 800b716:	f001 fa4f 	bl	800cbb8 <tcp_debug_print_state>

  if (pcb->state != LISTEN) {
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	7d1b      	ldrb	r3, [r3, #20]
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d006      	beq.n	800b730 <tcp_close+0x48>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	8b5b      	ldrh	r3, [r3, #26]
 800b726:	f043 0310 	orr.w	r3, r3, #16
 800b72a:	b29a      	uxth	r2, r3
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b730:	2101      	movs	r1, #1
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f7ff fe8c 	bl	800b450 <tcp_close_shutdown>
 800b738:	4603      	mov	r3, r0
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3708      	adds	r7, #8
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop
 800b744:	08018ba4 	.word	0x08018ba4
 800b748:	08018cb4 	.word	0x08018cb4
 800b74c:	08018be8 	.word	0x08018be8
 800b750:	08018ccc 	.word	0x08018ccc

0800b754 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b08e      	sub	sp, #56	@ 0x38
 800b758:	af04      	add	r7, sp, #16
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d107      	bne.n	800b774 <tcp_abandon+0x20>
 800b764:	4b52      	ldr	r3, [pc, #328]	@ (800b8b0 <tcp_abandon+0x15c>)
 800b766:	f240 223d 	movw	r2, #573	@ 0x23d
 800b76a:	4952      	ldr	r1, [pc, #328]	@ (800b8b4 <tcp_abandon+0x160>)
 800b76c:	4852      	ldr	r0, [pc, #328]	@ (800b8b8 <tcp_abandon+0x164>)
 800b76e:	f00b faa5 	bl	8016cbc <iprintf>
 800b772:	e099      	b.n	800b8a8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	7d1b      	ldrb	r3, [r3, #20]
 800b778:	2b01      	cmp	r3, #1
 800b77a:	d106      	bne.n	800b78a <tcp_abandon+0x36>
 800b77c:	4b4c      	ldr	r3, [pc, #304]	@ (800b8b0 <tcp_abandon+0x15c>)
 800b77e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800b782:	494e      	ldr	r1, [pc, #312]	@ (800b8bc <tcp_abandon+0x168>)
 800b784:	484c      	ldr	r0, [pc, #304]	@ (800b8b8 <tcp_abandon+0x164>)
 800b786:	f00b fa99 	bl	8016cbc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	7d1b      	ldrb	r3, [r3, #20]
 800b78e:	2b0a      	cmp	r3, #10
 800b790:	d107      	bne.n	800b7a2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b792:	6879      	ldr	r1, [r7, #4]
 800b794:	484a      	ldr	r0, [pc, #296]	@ (800b8c0 <tcp_abandon+0x16c>)
 800b796:	f001 f889 	bl	800c8ac <tcp_pcb_remove>
    tcp_free(pcb);
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f7ff fda6 	bl	800b2ec <tcp_free>
 800b7a0:	e082      	b.n	800b8a8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7ae:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7b4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7bc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	691b      	ldr	r3, [r3, #16]
 800b7c2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	7d1b      	ldrb	r3, [r3, #20]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d126      	bne.n	800b81a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	8adb      	ldrh	r3, [r3, #22]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d02e      	beq.n	800b832 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b7d4:	4b3b      	ldr	r3, [pc, #236]	@ (800b8c4 <tcp_abandon+0x170>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d105      	bne.n	800b7ea <tcp_abandon+0x96>
 800b7de:	4b39      	ldr	r3, [pc, #228]	@ (800b8c4 <tcp_abandon+0x170>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	68db      	ldr	r3, [r3, #12]
 800b7e4:	4a37      	ldr	r2, [pc, #220]	@ (800b8c4 <tcp_abandon+0x170>)
 800b7e6:	6013      	str	r3, [r2, #0]
 800b7e8:	e013      	b.n	800b812 <tcp_abandon+0xbe>
 800b7ea:	4b36      	ldr	r3, [pc, #216]	@ (800b8c4 <tcp_abandon+0x170>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	61fb      	str	r3, [r7, #28]
 800b7f0:	e00c      	b.n	800b80c <tcp_abandon+0xb8>
 800b7f2:	69fb      	ldr	r3, [r7, #28]
 800b7f4:	68db      	ldr	r3, [r3, #12]
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d104      	bne.n	800b806 <tcp_abandon+0xb2>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	68da      	ldr	r2, [r3, #12]
 800b800:	69fb      	ldr	r3, [r7, #28]
 800b802:	60da      	str	r2, [r3, #12]
 800b804:	e005      	b.n	800b812 <tcp_abandon+0xbe>
 800b806:	69fb      	ldr	r3, [r7, #28]
 800b808:	68db      	ldr	r3, [r3, #12]
 800b80a:	61fb      	str	r3, [r7, #28]
 800b80c:	69fb      	ldr	r3, [r7, #28]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d1ef      	bne.n	800b7f2 <tcp_abandon+0x9e>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2200      	movs	r2, #0
 800b816:	60da      	str	r2, [r3, #12]
 800b818:	e00b      	b.n	800b832 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	8adb      	ldrh	r3, [r3, #22]
 800b822:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b824:	6879      	ldr	r1, [r7, #4]
 800b826:	4828      	ldr	r0, [pc, #160]	@ (800b8c8 <tcp_abandon+0x174>)
 800b828:	f001 f840 	bl	800c8ac <tcp_pcb_remove>
 800b82c:	4b27      	ldr	r3, [pc, #156]	@ (800b8cc <tcp_abandon+0x178>)
 800b82e:	2201      	movs	r2, #1
 800b830:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b836:	2b00      	cmp	r3, #0
 800b838:	d004      	beq.n	800b844 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b83e:	4618      	mov	r0, r3
 800b840:	f000 fd88 	bl	800c354 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d004      	beq.n	800b856 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b850:	4618      	mov	r0, r3
 800b852:	f000 fd7f 	bl	800c354 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d004      	beq.n	800b868 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b862:	4618      	mov	r0, r3
 800b864:	f000 fd76 	bl	800c354 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d00e      	beq.n	800b88c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b86e:	6879      	ldr	r1, [r7, #4]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	3304      	adds	r3, #4
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	8b12      	ldrh	r2, [r2, #24]
 800b878:	9202      	str	r2, [sp, #8]
 800b87a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800b87c:	9201      	str	r2, [sp, #4]
 800b87e:	9300      	str	r3, [sp, #0]
 800b880:	460b      	mov	r3, r1
 800b882:	697a      	ldr	r2, [r7, #20]
 800b884:	69b9      	ldr	r1, [r7, #24]
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f004 fea8 	bl	80105dc <tcp_rst>
    }
    last_state = pcb->state;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	7d1b      	ldrb	r3, [r3, #20]
 800b890:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f7ff fd2a 	bl	800b2ec <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d004      	beq.n	800b8a8 <tcp_abandon+0x154>
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	f06f 010c 	mvn.w	r1, #12
 800b8a4:	68f8      	ldr	r0, [r7, #12]
 800b8a6:	4798      	blx	r3
  }
}
 800b8a8:	3728      	adds	r7, #40	@ 0x28
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	08018ba4 	.word	0x08018ba4
 800b8b4:	08018d00 	.word	0x08018d00
 800b8b8:	08018be8 	.word	0x08018be8
 800b8bc:	08018d1c 	.word	0x08018d1c
 800b8c0:	24003300 	.word	0x24003300
 800b8c4:	240032f4 	.word	0x240032f4
 800b8c8:	240032fc 	.word	0x240032fc
 800b8cc:	24003304 	.word	0x24003304

0800b8d0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b8d8:	2101      	movs	r1, #1
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f7ff ff3a 	bl	800b754 <tcp_abandon>
}
 800b8e0:	bf00      	nop
 800b8e2:	3708      	adds	r7, #8
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b084      	sub	sp, #16
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d106      	bne.n	800b904 <tcp_update_rcv_ann_wnd+0x1c>
 800b8f6:	4b25      	ldr	r3, [pc, #148]	@ (800b98c <tcp_update_rcv_ann_wnd+0xa4>)
 800b8f8:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800b8fc:	4924      	ldr	r1, [pc, #144]	@ (800b990 <tcp_update_rcv_ann_wnd+0xa8>)
 800b8fe:	4825      	ldr	r0, [pc, #148]	@ (800b994 <tcp_update_rcv_ann_wnd+0xac>)
 800b900:	f00b f9dc 	bl	8016cbc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800b90c:	4413      	add	r3, r2
 800b90e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b914:	687a      	ldr	r2, [r7, #4]
 800b916:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800b918:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800b91c:	bf28      	it	cs
 800b91e:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800b922:	b292      	uxth	r2, r2
 800b924:	4413      	add	r3, r2
 800b926:	68fa      	ldr	r2, [r7, #12]
 800b928:	1ad3      	subs	r3, r2, r3
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	db08      	blt.n	800b940 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b93a:	68fa      	ldr	r2, [r7, #12]
 800b93c:	1ad3      	subs	r3, r2, r3
 800b93e:	e020      	b.n	800b982 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b948:	1ad3      	subs	r3, r2, r3
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	dd03      	ble.n	800b956 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2200      	movs	r2, #0
 800b952:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b954:	e014      	b.n	800b980 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b95e:	1ad3      	subs	r3, r2, r3
 800b960:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b968:	d306      	bcc.n	800b978 <tcp_update_rcv_ann_wnd+0x90>
 800b96a:	4b08      	ldr	r3, [pc, #32]	@ (800b98c <tcp_update_rcv_ann_wnd+0xa4>)
 800b96c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800b970:	4909      	ldr	r1, [pc, #36]	@ (800b998 <tcp_update_rcv_ann_wnd+0xb0>)
 800b972:	4808      	ldr	r0, [pc, #32]	@ (800b994 <tcp_update_rcv_ann_wnd+0xac>)
 800b974:	f00b f9a2 	bl	8016cbc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	b29a      	uxth	r2, r3
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800b980:	2300      	movs	r3, #0
  }
}
 800b982:	4618      	mov	r0, r3
 800b984:	3710      	adds	r7, #16
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop
 800b98c:	08018ba4 	.word	0x08018ba4
 800b990:	08018e34 	.word	0x08018e34
 800b994:	08018be8 	.word	0x08018be8
 800b998:	08018e58 	.word	0x08018e58

0800b99c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b084      	sub	sp, #16
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	460b      	mov	r3, r1
 800b9a6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d107      	bne.n	800b9be <tcp_recved+0x22>
 800b9ae:	4b26      	ldr	r3, [pc, #152]	@ (800ba48 <tcp_recved+0xac>)
 800b9b0:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800b9b4:	4925      	ldr	r1, [pc, #148]	@ (800ba4c <tcp_recved+0xb0>)
 800b9b6:	4826      	ldr	r0, [pc, #152]	@ (800ba50 <tcp_recved+0xb4>)
 800b9b8:	f00b f980 	bl	8016cbc <iprintf>
 800b9bc:	e041      	b.n	800ba42 <tcp_recved+0xa6>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	7d1b      	ldrb	r3, [r3, #20]
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d106      	bne.n	800b9d4 <tcp_recved+0x38>
 800b9c6:	4b20      	ldr	r3, [pc, #128]	@ (800ba48 <tcp_recved+0xac>)
 800b9c8:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800b9cc:	4921      	ldr	r1, [pc, #132]	@ (800ba54 <tcp_recved+0xb8>)
 800b9ce:	4820      	ldr	r0, [pc, #128]	@ (800ba50 <tcp_recved+0xb4>)
 800b9d0:	f00b f974 	bl	8016cbc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b9d8:	887b      	ldrh	r3, [r7, #2]
 800b9da:	4413      	add	r3, r2
 800b9dc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b9de:	89fb      	ldrh	r3, [r7, #14]
 800b9e0:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800b9e4:	d804      	bhi.n	800b9f0 <tcp_recved+0x54>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b9ea:	89fa      	ldrh	r2, [r7, #14]
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	d207      	bcs.n	800ba00 <tcp_recved+0x64>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
 800b9f0:	4819      	ldr	r0, [pc, #100]	@ (800ba58 <tcp_recved+0xbc>)
 800b9f2:	f00b f9d3 	bl	8016d9c <puts>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800b9fc:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b9fe:	e002      	b.n	800ba06 <tcp_recved+0x6a>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	89fa      	ldrh	r2, [r7, #14]
 800ba04:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f7ff ff6e 	bl	800b8e8 <tcp_update_rcv_ann_wnd>
 800ba0c:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800ba14:	d309      	bcc.n	800ba2a <tcp_recved+0x8e>
    tcp_ack_now(pcb);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	8b5b      	ldrh	r3, [r3, #26]
 800ba1a:	f043 0302 	orr.w	r3, r3, #2
 800ba1e:	b29a      	uxth	r2, r3
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f004 f819 	bl	800fa5c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
 800ba2a:	8879      	ldrh	r1, [r7, #2]
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba30:	461a      	mov	r2, r3
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba36:	f5c3 6306 	rsb	r3, r3, #2144	@ 0x860
 800ba3a:	b29b      	uxth	r3, r3
 800ba3c:	4807      	ldr	r0, [pc, #28]	@ (800ba5c <tcp_recved+0xc0>)
 800ba3e:	f00b f93d 	bl	8016cbc <iprintf>
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ba42:	3710      	adds	r7, #16
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}
 800ba48:	08018ba4 	.word	0x08018ba4
 800ba4c:	08018e74 	.word	0x08018e74
 800ba50:	08018be8 	.word	0x08018be8
 800ba54:	08018e8c 	.word	0x08018e8c
 800ba58:	08018eb4 	.word	0x08018eb4
 800ba5c:	08018ef0 	.word	0x08018ef0

0800ba60 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ba60:	b5b0      	push	{r4, r5, r7, lr}
 800ba62:	b092      	sub	sp, #72	@ 0x48
 800ba64:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ba66:	2300      	movs	r3, #0
 800ba68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

  ++tcp_ticks;
 800ba6c:	4b9e      	ldr	r3, [pc, #632]	@ (800bce8 <tcp_slowtmr+0x288>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	3301      	adds	r3, #1
 800ba72:	4a9d      	ldr	r2, [pc, #628]	@ (800bce8 <tcp_slowtmr+0x288>)
 800ba74:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ba76:	4b9d      	ldr	r3, [pc, #628]	@ (800bcec <tcp_slowtmr+0x28c>)
 800ba78:	781b      	ldrb	r3, [r3, #0]
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	b2da      	uxtb	r2, r3
 800ba7e:	4b9b      	ldr	r3, [pc, #620]	@ (800bcec <tcp_slowtmr+0x28c>)
 800ba80:	701a      	strb	r2, [r3, #0]
 800ba82:	e000      	b.n	800ba86 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800ba84:	bf00      	nop
  prev = NULL;
 800ba86:	2300      	movs	r3, #0
 800ba88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pcb = tcp_active_pcbs;
 800ba8a:	4b99      	ldr	r3, [pc, #612]	@ (800bcf0 <tcp_slowtmr+0x290>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (pcb == NULL) {
 800ba90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	f040 82fc 	bne.w	800c090 <tcp_slowtmr+0x630>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
 800ba98:	4896      	ldr	r0, [pc, #600]	@ (800bcf4 <tcp_slowtmr+0x294>)
 800ba9a:	f00b f97f 	bl	8016d9c <puts>
  while (pcb != NULL) {
 800ba9e:	e2f7      	b.n	800c090 <tcp_slowtmr+0x630>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
 800baa0:	4895      	ldr	r0, [pc, #596]	@ (800bcf8 <tcp_slowtmr+0x298>)
 800baa2:	f00b f97b 	bl	8016d9c <puts>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800baa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baa8:	7d1b      	ldrb	r3, [r3, #20]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d106      	bne.n	800babc <tcp_slowtmr+0x5c>
 800baae:	4b93      	ldr	r3, [pc, #588]	@ (800bcfc <tcp_slowtmr+0x29c>)
 800bab0:	f240 42be 	movw	r2, #1214	@ 0x4be
 800bab4:	4992      	ldr	r1, [pc, #584]	@ (800bd00 <tcp_slowtmr+0x2a0>)
 800bab6:	4893      	ldr	r0, [pc, #588]	@ (800bd04 <tcp_slowtmr+0x2a4>)
 800bab8:	f00b f900 	bl	8016cbc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800babc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800babe:	7d1b      	ldrb	r3, [r3, #20]
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d106      	bne.n	800bad2 <tcp_slowtmr+0x72>
 800bac4:	4b8d      	ldr	r3, [pc, #564]	@ (800bcfc <tcp_slowtmr+0x29c>)
 800bac6:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800baca:	498f      	ldr	r1, [pc, #572]	@ (800bd08 <tcp_slowtmr+0x2a8>)
 800bacc:	488d      	ldr	r0, [pc, #564]	@ (800bd04 <tcp_slowtmr+0x2a4>)
 800bace:	f00b f8f5 	bl	8016cbc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800bad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bad4:	7d1b      	ldrb	r3, [r3, #20]
 800bad6:	2b0a      	cmp	r3, #10
 800bad8:	d106      	bne.n	800bae8 <tcp_slowtmr+0x88>
 800bada:	4b88      	ldr	r3, [pc, #544]	@ (800bcfc <tcp_slowtmr+0x29c>)
 800badc:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800bae0:	498a      	ldr	r1, [pc, #552]	@ (800bd0c <tcp_slowtmr+0x2ac>)
 800bae2:	4888      	ldr	r0, [pc, #544]	@ (800bd04 <tcp_slowtmr+0x2a4>)
 800bae4:	f00b f8ea 	bl	8016cbc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800bae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baea:	7f9a      	ldrb	r2, [r3, #30]
 800baec:	4b7f      	ldr	r3, [pc, #508]	@ (800bcec <tcp_slowtmr+0x28c>)
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d105      	bne.n	800bb00 <tcp_slowtmr+0xa0>
      prev = pcb;
 800baf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pcb = pcb->next;
 800baf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bafa:	68db      	ldr	r3, [r3, #12]
 800bafc:	633b      	str	r3, [r7, #48]	@ 0x30
      continue;
 800bafe:	e2c7      	b.n	800c090 <tcp_slowtmr+0x630>
    pcb->last_timer = tcp_timer_ctr;
 800bb00:	4b7a      	ldr	r3, [pc, #488]	@ (800bcec <tcp_slowtmr+0x28c>)
 800bb02:	781a      	ldrb	r2, [r3, #0]
 800bb04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb06:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    pcb_reset = 0;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800bb14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb16:	7d1b      	ldrb	r3, [r3, #20]
 800bb18:	2b02      	cmp	r3, #2
 800bb1a:	d10d      	bne.n	800bb38 <tcp_slowtmr+0xd8>
 800bb1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bb22:	2b05      	cmp	r3, #5
 800bb24:	d908      	bls.n	800bb38 <tcp_slowtmr+0xd8>
      ++pcb_remove;
 800bb26:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 800bb30:	4877      	ldr	r0, [pc, #476]	@ (800bd10 <tcp_slowtmr+0x2b0>)
 800bb32:	f00b f933 	bl	8016d9c <puts>
 800bb36:	e12b      	b.n	800bd90 <tcp_slowtmr+0x330>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800bb38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bb3e:	2b0b      	cmp	r3, #11
 800bb40:	d908      	bls.n	800bb54 <tcp_slowtmr+0xf4>
      ++pcb_remove;
 800bb42:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bb46:	3301      	adds	r3, #1
 800bb48:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
 800bb4c:	4871      	ldr	r0, [pc, #452]	@ (800bd14 <tcp_slowtmr+0x2b4>)
 800bb4e:	f00b f925 	bl	8016d9c <puts>
 800bb52:	e11d      	b.n	800bd90 <tcp_slowtmr+0x330>
      if (pcb->persist_backoff > 0) {
 800bb54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb56:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d075      	beq.n	800bc4a <tcp_slowtmr+0x1ea>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800bb5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d006      	beq.n	800bb74 <tcp_slowtmr+0x114>
 800bb66:	4b65      	ldr	r3, [pc, #404]	@ (800bcfc <tcp_slowtmr+0x29c>)
 800bb68:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800bb6c:	496a      	ldr	r1, [pc, #424]	@ (800bd18 <tcp_slowtmr+0x2b8>)
 800bb6e:	4865      	ldr	r0, [pc, #404]	@ (800bd04 <tcp_slowtmr+0x2a4>)
 800bb70:	f00b f8a4 	bl	8016cbc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800bb74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d106      	bne.n	800bb8a <tcp_slowtmr+0x12a>
 800bb7c:	4b5f      	ldr	r3, [pc, #380]	@ (800bcfc <tcp_slowtmr+0x29c>)
 800bb7e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800bb82:	4966      	ldr	r1, [pc, #408]	@ (800bd1c <tcp_slowtmr+0x2bc>)
 800bb84:	485f      	ldr	r0, [pc, #380]	@ (800bd04 <tcp_slowtmr+0x2a4>)
 800bb86:	f00b f899 	bl	8016cbc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800bb8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb8c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800bb90:	2b0b      	cmp	r3, #11
 800bb92:	d905      	bls.n	800bba0 <tcp_slowtmr+0x140>
          ++pcb_remove; /* max probes reached */
 800bb94:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bb98:	3301      	adds	r3, #1
 800bb9a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bb9e:	e0f7      	b.n	800bd90 <tcp_slowtmr+0x330>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800bba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bba2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800bba6:	3b01      	subs	r3, #1
 800bba8:	4a5d      	ldr	r2, [pc, #372]	@ (800bd20 <tcp_slowtmr+0x2c0>)
 800bbaa:	5cd3      	ldrb	r3, [r2, r3]
 800bbac:	757b      	strb	r3, [r7, #21]
          if (pcb->persist_cnt < backoff_cnt) {
 800bbae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbb0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800bbb4:	7d7a      	ldrb	r2, [r7, #21]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d907      	bls.n	800bbca <tcp_slowtmr+0x16a>
            pcb->persist_cnt++;
 800bbba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbbc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	b2da      	uxtb	r2, r3
 800bbc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbc6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800bbca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbcc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800bbd0:	7d7a      	ldrb	r2, [r7, #21]
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	f200 80dc 	bhi.w	800bd90 <tcp_slowtmr+0x330>
            int next_slot = 1; /* increment timer to next slot */
 800bbd8:	2301      	movs	r3, #1
 800bbda:	627b      	str	r3, [r7, #36]	@ 0x24
            if (pcb->snd_wnd == 0) {
 800bbdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d108      	bne.n	800bbf8 <tcp_slowtmr+0x198>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800bbe6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bbe8:	f004 fe30 	bl	801084c <tcp_zero_window_probe>
 800bbec:	4603      	mov	r3, r0
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d014      	beq.n	800bc1c <tcp_slowtmr+0x1bc>
                next_slot = 0; /* try probe again with current slot */
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbf6:	e011      	b.n	800bc1c <tcp_slowtmr+0x1bc>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800bbf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bbfe:	4619      	mov	r1, r3
 800bc00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc02:	f003 fca1 	bl	800f548 <tcp_split_unsent_seg>
 800bc06:	4603      	mov	r3, r0
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d107      	bne.n	800bc1c <tcp_slowtmr+0x1bc>
                if (tcp_output(pcb) == ERR_OK) {
 800bc0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc0e:	f003 ff25 	bl	800fa5c <tcp_output>
 800bc12:	4603      	mov	r3, r0
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d101      	bne.n	800bc1c <tcp_slowtmr+0x1bc>
                  next_slot = 0;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	627b      	str	r3, [r7, #36]	@ 0x24
            if (next_slot) {
 800bc1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	f000 80b6 	beq.w	800bd90 <tcp_slowtmr+0x330>
              pcb->persist_cnt = 0;
 800bc24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc26:	2200      	movs	r2, #0
 800bc28:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800bc2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc2e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800bc32:	2b06      	cmp	r3, #6
 800bc34:	f200 80ac 	bhi.w	800bd90 <tcp_slowtmr+0x330>
                pcb->persist_backoff++;
 800bc38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc3a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800bc3e:	3301      	adds	r3, #1
 800bc40:	b2da      	uxtb	r2, r3
 800bc42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc44:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800bc48:	e0a2      	b.n	800bd90 <tcp_slowtmr+0x330>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800bc4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc4c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	db0f      	blt.n	800bc74 <tcp_slowtmr+0x214>
 800bc54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc56:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800bc5a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d008      	beq.n	800bc74 <tcp_slowtmr+0x214>
          ++pcb->rtime;
 800bc62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc64:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800bc68:	b29b      	uxth	r3, r3
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	b29b      	uxth	r3, r3
 800bc6e:	b21a      	sxth	r2, r3
 800bc70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc72:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800bc74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc76:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800bc7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc7c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800bc80:	429a      	cmp	r2, r3
 800bc82:	f2c0 8085 	blt.w	800bd90 <tcp_slowtmr+0x330>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800bc86:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc88:	f004 f9de 	bl	8010048 <tcp_rexmit_rto_prepare>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d007      	beq.n	800bca2 <tcp_slowtmr+0x242>
 800bc92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d17a      	bne.n	800bd90 <tcp_slowtmr+0x330>
 800bc9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d076      	beq.n	800bd90 <tcp_slowtmr+0x330>
            if (pcb->state != SYN_SENT) {
 800bca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bca4:	7d1b      	ldrb	r3, [r3, #20]
 800bca6:	2b02      	cmp	r3, #2
 800bca8:	d043      	beq.n	800bd32 <tcp_slowtmr+0x2d2>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800bcaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bcb0:	2b0c      	cmp	r3, #12
 800bcb2:	bf28      	it	cs
 800bcb4:	230c      	movcs	r3, #12
 800bcb6:	77fb      	strb	r3, [r7, #31]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800bcb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800bcbe:	10db      	asrs	r3, r3, #3
 800bcc0:	b21b      	sxth	r3, r3
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcc6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800bcca:	4413      	add	r3, r2
 800bccc:	7ffa      	ldrb	r2, [r7, #31]
 800bcce:	4915      	ldr	r1, [pc, #84]	@ (800bd24 <tcp_slowtmr+0x2c4>)
 800bcd0:	5c8a      	ldrb	r2, [r1, r2]
 800bcd2:	4093      	lsls	r3, r2
 800bcd4:	61bb      	str	r3, [r7, #24]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800bcd6:	69bb      	ldr	r3, [r7, #24]
 800bcd8:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	dc23      	bgt.n	800bd28 <tcp_slowtmr+0x2c8>
 800bce0:	69bb      	ldr	r3, [r7, #24]
 800bce2:	b21a      	sxth	r2, r3
 800bce4:	e022      	b.n	800bd2c <tcp_slowtmr+0x2cc>
 800bce6:	bf00      	nop
 800bce8:	240032f0 	.word	0x240032f0
 800bcec:	24003306 	.word	0x24003306
 800bcf0:	240032fc 	.word	0x240032fc
 800bcf4:	08018fa4 	.word	0x08018fa4
 800bcf8:	08018fc0 	.word	0x08018fc0
 800bcfc:	08018ba4 	.word	0x08018ba4
 800bd00:	08018fe4 	.word	0x08018fe4
 800bd04:	08018be8 	.word	0x08018be8
 800bd08:	08019010 	.word	0x08019010
 800bd0c:	0801903c 	.word	0x0801903c
 800bd10:	0801906c 	.word	0x0801906c
 800bd14:	08019094 	.word	0x08019094
 800bd18:	080190bc 	.word	0x080190bc
 800bd1c:	080190f0 	.word	0x080190f0
 800bd20:	0801dc10 	.word	0x0801dc10
 800bd24:	0801dc00 	.word	0x0801dc00
 800bd28:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800bd2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd2e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800bd32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd34:	2200      	movs	r2, #0
 800bd36:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800bd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800bd3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd40:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bd44:	4293      	cmp	r3, r2
 800bd46:	bf28      	it	cs
 800bd48:	4613      	movcs	r3, r2
 800bd4a:	82fb      	strh	r3, [r7, #22]
            pcb->ssthresh = eff_wnd >> 1;
 800bd4c:	8afb      	ldrh	r3, [r7, #22]
 800bd4e:	085b      	lsrs	r3, r3, #1
 800bd50:	b29a      	uxth	r2, r3
 800bd52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd54:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800bd58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd5a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800bd5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bd62:	005b      	lsls	r3, r3, #1
 800bd64:	b29b      	uxth	r3, r3
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d206      	bcs.n	800bd78 <tcp_slowtmr+0x318>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800bd6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd6c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bd6e:	005b      	lsls	r3, r3, #1
 800bd70:	b29a      	uxth	r2, r3
 800bd72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd74:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800bd78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd7a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800bd7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd7e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800bd82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd84:	2200      	movs	r2, #0
 800bd86:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800bd8a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bd8c:	f004 f9d6 	bl	801013c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800bd90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd92:	7d1b      	ldrb	r3, [r3, #20]
 800bd94:	2b06      	cmp	r3, #6
 800bd96:	d114      	bne.n	800bdc2 <tcp_slowtmr+0x362>
      if (pcb->flags & TF_RXCLOSED) {
 800bd98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd9a:	8b5b      	ldrh	r3, [r3, #26]
 800bd9c:	f003 0310 	and.w	r3, r3, #16
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d00e      	beq.n	800bdc2 <tcp_slowtmr+0x362>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bda4:	4b8e      	ldr	r3, [pc, #568]	@ (800bfe0 <tcp_slowtmr+0x580>)
 800bda6:	681a      	ldr	r2, [r3, #0]
 800bda8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdaa:	6a1b      	ldr	r3, [r3, #32]
 800bdac:	1ad3      	subs	r3, r2, r3
 800bdae:	2b28      	cmp	r3, #40	@ 0x28
 800bdb0:	d907      	bls.n	800bdc2 <tcp_slowtmr+0x362>
          ++pcb_remove;
 800bdb2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in FIN-WAIT-2\n"));
 800bdbc:	4889      	ldr	r0, [pc, #548]	@ (800bfe4 <tcp_slowtmr+0x584>)
 800bdbe:	f00a ffed 	bl	8016d9c <puts>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800bdc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdc4:	7a5b      	ldrb	r3, [r3, #9]
 800bdc6:	f003 0308 	and.w	r3, r3, #8
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d067      	beq.n	800be9e <tcp_slowtmr+0x43e>
        ((pcb->state == ESTABLISHED) ||
 800bdce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdd0:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800bdd2:	2b04      	cmp	r3, #4
 800bdd4:	d003      	beq.n	800bdde <tcp_slowtmr+0x37e>
         (pcb->state == CLOSE_WAIT))) {
 800bdd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdd8:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800bdda:	2b07      	cmp	r3, #7
 800bddc:	d15f      	bne.n	800be9e <tcp_slowtmr+0x43e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bdde:	4b80      	ldr	r3, [pc, #512]	@ (800bfe0 <tcp_slowtmr+0x580>)
 800bde0:	681a      	ldr	r2, [r3, #0]
 800bde2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bde4:	6a1b      	ldr	r3, [r3, #32]
 800bde6:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800bde8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdea:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800bdee:	4b7e      	ldr	r3, [pc, #504]	@ (800bfe8 <tcp_slowtmr+0x588>)
 800bdf0:	440b      	add	r3, r1
 800bdf2:	497e      	ldr	r1, [pc, #504]	@ (800bfec <tcp_slowtmr+0x58c>)
 800bdf4:	fba1 1303 	umull	r1, r3, r1, r3
 800bdf8:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d927      	bls.n	800be4e <tcp_slowtmr+0x3ee>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
 800bdfe:	487c      	ldr	r0, [pc, #496]	@ (800bff0 <tcp_slowtmr+0x590>)
 800be00:	f00a ff5c 	bl	8016cbc <iprintf>
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
 800be04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be06:	685b      	ldr	r3, [r3, #4]
 800be08:	b2db      	uxtb	r3, r3
 800be0a:	4619      	mov	r1, r3
 800be0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	0a1b      	lsrs	r3, r3, #8
 800be12:	b2db      	uxtb	r3, r3
 800be14:	461a      	mov	r2, r3
 800be16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	0c1b      	lsrs	r3, r3, #16
 800be1c:	b2db      	uxtb	r3, r3
 800be1e:	4618      	mov	r0, r3
 800be20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	0e1b      	lsrs	r3, r3, #24
 800be26:	b2db      	uxtb	r3, r3
 800be28:	9300      	str	r3, [sp, #0]
 800be2a:	4603      	mov	r3, r0
 800be2c:	4871      	ldr	r0, [pc, #452]	@ (800bff4 <tcp_slowtmr+0x594>)
 800be2e:	f00a ff45 	bl	8016cbc <iprintf>
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));
 800be32:	200a      	movs	r0, #10
 800be34:	f00a ff54 	bl	8016ce0 <putchar>
        ++pcb_remove;
 800be38:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800be3c:	3301      	adds	r3, #1
 800be3e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        ++pcb_reset;
 800be42:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800be46:	3301      	adds	r3, #1
 800be48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800be4c:	e027      	b.n	800be9e <tcp_slowtmr+0x43e>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800be4e:	4b64      	ldr	r3, [pc, #400]	@ (800bfe0 <tcp_slowtmr+0x580>)
 800be50:	681a      	ldr	r2, [r3, #0]
 800be52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be54:	6a1b      	ldr	r3, [r3, #32]
 800be56:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800be58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be5a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800be5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be60:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800be64:	4618      	mov	r0, r3
 800be66:	4b64      	ldr	r3, [pc, #400]	@ (800bff8 <tcp_slowtmr+0x598>)
 800be68:	fb00 f303 	mul.w	r3, r0, r3
 800be6c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800be6e:	495f      	ldr	r1, [pc, #380]	@ (800bfec <tcp_slowtmr+0x58c>)
 800be70:	fba1 1303 	umull	r1, r3, r1, r3
 800be74:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800be76:	429a      	cmp	r2, r3
 800be78:	d911      	bls.n	800be9e <tcp_slowtmr+0x43e>
        err = tcp_keepalive(pcb);
 800be7a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800be7c:	f004 fc66 	bl	801074c <tcp_keepalive>
 800be80:	4603      	mov	r3, r0
 800be82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        if (err == ERR_OK) {
 800be86:	f997 302a 	ldrsb.w	r3, [r7, #42]	@ 0x2a
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d107      	bne.n	800be9e <tcp_slowtmr+0x43e>
          pcb->keep_cnt_sent++;
 800be8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be90:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800be94:	3301      	adds	r3, #1
 800be96:	b2da      	uxtb	r2, r3
 800be98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be9a:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800be9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d011      	beq.n	800beca <tcp_slowtmr+0x46a>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800bea6:	4b4e      	ldr	r3, [pc, #312]	@ (800bfe0 <tcp_slowtmr+0x580>)
 800bea8:	681a      	ldr	r2, [r3, #0]
 800beaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beac:	6a1b      	ldr	r3, [r3, #32]
 800beae:	1ad2      	subs	r2, r2, r3
 800beb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beb2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800beb6:	4619      	mov	r1, r3
 800beb8:	460b      	mov	r3, r1
 800beba:	005b      	lsls	r3, r3, #1
 800bebc:	440b      	add	r3, r1
 800bebe:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d302      	bcc.n	800beca <tcp_slowtmr+0x46a>
      tcp_free_ooseq(pcb);
 800bec4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bec6:	f000 fe63 	bl	800cb90 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800beca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800becc:	7d1b      	ldrb	r3, [r3, #20]
 800bece:	2b03      	cmp	r3, #3
 800bed0:	d10e      	bne.n	800bef0 <tcp_slowtmr+0x490>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bed2:	4b43      	ldr	r3, [pc, #268]	@ (800bfe0 <tcp_slowtmr+0x580>)
 800bed4:	681a      	ldr	r2, [r3, #0]
 800bed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bed8:	6a1b      	ldr	r3, [r3, #32]
 800beda:	1ad3      	subs	r3, r2, r3
 800bedc:	2b28      	cmp	r3, #40	@ 0x28
 800bede:	d907      	bls.n	800bef0 <tcp_slowtmr+0x490>
        ++pcb_remove;
 800bee0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bee4:	3301      	adds	r3, #1
 800bee6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
 800beea:	4844      	ldr	r0, [pc, #272]	@ (800bffc <tcp_slowtmr+0x59c>)
 800beec:	f00a ff56 	bl	8016d9c <puts>
    if (pcb->state == LAST_ACK) {
 800bef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bef2:	7d1b      	ldrb	r3, [r3, #20]
 800bef4:	2b09      	cmp	r3, #9
 800bef6:	d10e      	bne.n	800bf16 <tcp_slowtmr+0x4b6>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bef8:	4b39      	ldr	r3, [pc, #228]	@ (800bfe0 <tcp_slowtmr+0x580>)
 800befa:	681a      	ldr	r2, [r3, #0]
 800befc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800befe:	6a1b      	ldr	r3, [r3, #32]
 800bf00:	1ad3      	subs	r3, r2, r3
 800bf02:	2bf0      	cmp	r3, #240	@ 0xf0
 800bf04:	d907      	bls.n	800bf16 <tcp_slowtmr+0x4b6>
        ++pcb_remove;
 800bf06:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bf0a:	3301      	adds	r3, #1
 800bf0c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
 800bf10:	483b      	ldr	r0, [pc, #236]	@ (800c000 <tcp_slowtmr+0x5a0>)
 800bf12:	f00a ff43 	bl	8016d9c <puts>
    if (pcb_remove) {
 800bf16:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d07e      	beq.n	800c01c <tcp_slowtmr+0x5bc>
      tcp_err_fn err_fn = pcb->errf;
 800bf1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf24:	613b      	str	r3, [r7, #16]
      tcp_pcb_purge(pcb);
 800bf26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bf28:	f000 fc4e 	bl	800c7c8 <tcp_pcb_purge>
      if (prev != NULL) {
 800bf2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d010      	beq.n	800bf54 <tcp_slowtmr+0x4f4>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800bf32:	4b34      	ldr	r3, [pc, #208]	@ (800c004 <tcp_slowtmr+0x5a4>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	d106      	bne.n	800bf4a <tcp_slowtmr+0x4ea>
 800bf3c:	4b32      	ldr	r3, [pc, #200]	@ (800c008 <tcp_slowtmr+0x5a8>)
 800bf3e:	f240 526d 	movw	r2, #1389	@ 0x56d
 800bf42:	4932      	ldr	r1, [pc, #200]	@ (800c00c <tcp_slowtmr+0x5ac>)
 800bf44:	4832      	ldr	r0, [pc, #200]	@ (800c010 <tcp_slowtmr+0x5b0>)
 800bf46:	f00a feb9 	bl	8016cbc <iprintf>
        prev->next = pcb->next;
 800bf4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf4c:	68da      	ldr	r2, [r3, #12]
 800bf4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf50:	60da      	str	r2, [r3, #12]
 800bf52:	e00f      	b.n	800bf74 <tcp_slowtmr+0x514>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800bf54:	4b2b      	ldr	r3, [pc, #172]	@ (800c004 <tcp_slowtmr+0x5a4>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d006      	beq.n	800bf6c <tcp_slowtmr+0x50c>
 800bf5e:	4b2a      	ldr	r3, [pc, #168]	@ (800c008 <tcp_slowtmr+0x5a8>)
 800bf60:	f240 5271 	movw	r2, #1393	@ 0x571
 800bf64:	492b      	ldr	r1, [pc, #172]	@ (800c014 <tcp_slowtmr+0x5b4>)
 800bf66:	482a      	ldr	r0, [pc, #168]	@ (800c010 <tcp_slowtmr+0x5b0>)
 800bf68:	f00a fea8 	bl	8016cbc <iprintf>
        tcp_active_pcbs = pcb->next;
 800bf6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf6e:	68db      	ldr	r3, [r3, #12]
 800bf70:	4a24      	ldr	r2, [pc, #144]	@ (800c004 <tcp_slowtmr+0x5a4>)
 800bf72:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800bf74:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d013      	beq.n	800bfa4 <tcp_slowtmr+0x544>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bf7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf7e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800bf80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf82:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800bf84:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
 800bf86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf88:	3304      	adds	r3, #4
 800bf8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf8c:	8ad2      	ldrh	r2, [r2, #22]
 800bf8e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bf90:	8b09      	ldrh	r1, [r1, #24]
 800bf92:	9102      	str	r1, [sp, #8]
 800bf94:	9201      	str	r2, [sp, #4]
 800bf96:	9300      	str	r3, [sp, #0]
 800bf98:	462b      	mov	r3, r5
 800bf9a:	4622      	mov	r2, r4
 800bf9c:	4601      	mov	r1, r0
 800bf9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bfa0:	f004 fb1c 	bl	80105dc <tcp_rst>
      err_arg = pcb->callback_arg;
 800bfa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfa6:	691b      	ldr	r3, [r3, #16]
 800bfa8:	60fb      	str	r3, [r7, #12]
      last_state = pcb->state;
 800bfaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfac:	7d1b      	ldrb	r3, [r3, #20]
 800bfae:	72fb      	strb	r3, [r7, #11]
      pcb2 = pcb;
 800bfb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfb2:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 800bfb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfb6:	68db      	ldr	r3, [r3, #12]
 800bfb8:	633b      	str	r3, [r7, #48]	@ 0x30
      tcp_free(pcb2);
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f7ff f996 	bl	800b2ec <tcp_free>
      tcp_active_pcbs_changed = 0;
 800bfc0:	4b15      	ldr	r3, [pc, #84]	@ (800c018 <tcp_slowtmr+0x5b8>)
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d004      	beq.n	800bfd6 <tcp_slowtmr+0x576>
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	f06f 010c 	mvn.w	r1, #12
 800bfd2:	68f8      	ldr	r0, [r7, #12]
 800bfd4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800bfd6:	4b10      	ldr	r3, [pc, #64]	@ (800c018 <tcp_slowtmr+0x5b8>)
 800bfd8:	781b      	ldrb	r3, [r3, #0]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d058      	beq.n	800c090 <tcp_slowtmr+0x630>
        goto tcp_slowtmr_start;
 800bfde:	e552      	b.n	800ba86 <tcp_slowtmr+0x26>
 800bfe0:	240032f0 	.word	0x240032f0
 800bfe4:	08019128 	.word	0x08019128
 800bfe8:	000a4cb8 	.word	0x000a4cb8
 800bfec:	10624dd3 	.word	0x10624dd3
 800bff0:	08019158 	.word	0x08019158
 800bff4:	08019190 	.word	0x08019190
 800bff8:	000124f8 	.word	0x000124f8
 800bffc:	080191a0 	.word	0x080191a0
 800c000:	080191cc 	.word	0x080191cc
 800c004:	240032fc 	.word	0x240032fc
 800c008:	08018ba4 	.word	0x08018ba4
 800c00c:	080191f8 	.word	0x080191f8
 800c010:	08018be8 	.word	0x08018be8
 800c014:	08019224 	.word	0x08019224
 800c018:	24003304 	.word	0x24003304
      prev = pcb;
 800c01c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c01e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pcb = pcb->next;
 800c020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c022:	68db      	ldr	r3, [r3, #12]
 800c024:	633b      	str	r3, [r7, #48]	@ 0x30
      ++prev->polltmr;
 800c026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c028:	7f1b      	ldrb	r3, [r3, #28]
 800c02a:	3301      	adds	r3, #1
 800c02c:	b2da      	uxtb	r2, r3
 800c02e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c030:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c034:	7f1a      	ldrb	r2, [r3, #28]
 800c036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c038:	7f5b      	ldrb	r3, [r3, #29]
 800c03a:	429a      	cmp	r2, r3
 800c03c:	d328      	bcc.n	800c090 <tcp_slowtmr+0x630>
        prev->polltmr = 0;
 800c03e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c040:	2200      	movs	r2, #0
 800c042:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
 800c044:	4845      	ldr	r0, [pc, #276]	@ (800c15c <tcp_slowtmr+0x6fc>)
 800c046:	f00a fea9 	bl	8016d9c <puts>
        tcp_active_pcbs_changed = 0;
 800c04a:	4b45      	ldr	r3, [pc, #276]	@ (800c160 <tcp_slowtmr+0x700>)
 800c04c:	2200      	movs	r2, #0
 800c04e:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c052:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c056:	2b00      	cmp	r3, #0
 800c058:	d00b      	beq.n	800c072 <tcp_slowtmr+0x612>
 800c05a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c05c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c060:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c062:	6912      	ldr	r2, [r2, #16]
 800c064:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c066:	4610      	mov	r0, r2
 800c068:	4798      	blx	r3
 800c06a:	4603      	mov	r3, r0
 800c06c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c070:	e002      	b.n	800c078 <tcp_slowtmr+0x618>
 800c072:	2300      	movs	r3, #0
 800c074:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        if (tcp_active_pcbs_changed) {
 800c078:	4b39      	ldr	r3, [pc, #228]	@ (800c160 <tcp_slowtmr+0x700>)
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	f47f ad01 	bne.w	800ba84 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c082:	f997 302a 	ldrsb.w	r3, [r7, #42]	@ 0x2a
 800c086:	2b00      	cmp	r3, #0
 800c088:	d102      	bne.n	800c090 <tcp_slowtmr+0x630>
          tcp_output(prev);
 800c08a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c08c:	f003 fce6 	bl	800fa5c <tcp_output>
  while (pcb != NULL) {
 800c090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c092:	2b00      	cmp	r3, #0
 800c094:	f47f ad04 	bne.w	800baa0 <tcp_slowtmr+0x40>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c098:	2300      	movs	r3, #0
 800c09a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pcb = tcp_tw_pcbs;
 800c09c:	4b31      	ldr	r3, [pc, #196]	@ (800c164 <tcp_slowtmr+0x704>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	633b      	str	r3, [r7, #48]	@ 0x30
  while (pcb != NULL) {
 800c0a2:	e052      	b.n	800c14a <tcp_slowtmr+0x6ea>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c0a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0a6:	7d1b      	ldrb	r3, [r3, #20]
 800c0a8:	2b0a      	cmp	r3, #10
 800c0aa:	d006      	beq.n	800c0ba <tcp_slowtmr+0x65a>
 800c0ac:	4b2e      	ldr	r3, [pc, #184]	@ (800c168 <tcp_slowtmr+0x708>)
 800c0ae:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800c0b2:	492e      	ldr	r1, [pc, #184]	@ (800c16c <tcp_slowtmr+0x70c>)
 800c0b4:	482e      	ldr	r0, [pc, #184]	@ (800c170 <tcp_slowtmr+0x710>)
 800c0b6:	f00a fe01 	bl	8016cbc <iprintf>
    pcb_remove = 0;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c0c0:	4b2c      	ldr	r3, [pc, #176]	@ (800c174 <tcp_slowtmr+0x714>)
 800c0c2:	681a      	ldr	r2, [r3, #0]
 800c0c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0c6:	6a1b      	ldr	r3, [r3, #32]
 800c0c8:	1ad3      	subs	r3, r2, r3
 800c0ca:	2bf0      	cmp	r3, #240	@ 0xf0
 800c0cc:	d904      	bls.n	800c0d8 <tcp_slowtmr+0x678>
      ++pcb_remove;
 800c0ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c0d8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d02f      	beq.n	800c140 <tcp_slowtmr+0x6e0>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c0e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c0e2:	f000 fb71 	bl	800c7c8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c0e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d010      	beq.n	800c10e <tcp_slowtmr+0x6ae>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c0ec:	4b1d      	ldr	r3, [pc, #116]	@ (800c164 <tcp_slowtmr+0x704>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d106      	bne.n	800c104 <tcp_slowtmr+0x6a4>
 800c0f6:	4b1c      	ldr	r3, [pc, #112]	@ (800c168 <tcp_slowtmr+0x708>)
 800c0f8:	f240 52af 	movw	r2, #1455	@ 0x5af
 800c0fc:	491e      	ldr	r1, [pc, #120]	@ (800c178 <tcp_slowtmr+0x718>)
 800c0fe:	481c      	ldr	r0, [pc, #112]	@ (800c170 <tcp_slowtmr+0x710>)
 800c100:	f00a fddc 	bl	8016cbc <iprintf>
        prev->next = pcb->next;
 800c104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c106:	68da      	ldr	r2, [r3, #12]
 800c108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c10a:	60da      	str	r2, [r3, #12]
 800c10c:	e00f      	b.n	800c12e <tcp_slowtmr+0x6ce>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c10e:	4b15      	ldr	r3, [pc, #84]	@ (800c164 <tcp_slowtmr+0x704>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c114:	429a      	cmp	r2, r3
 800c116:	d006      	beq.n	800c126 <tcp_slowtmr+0x6c6>
 800c118:	4b13      	ldr	r3, [pc, #76]	@ (800c168 <tcp_slowtmr+0x708>)
 800c11a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800c11e:	4917      	ldr	r1, [pc, #92]	@ (800c17c <tcp_slowtmr+0x71c>)
 800c120:	4813      	ldr	r0, [pc, #76]	@ (800c170 <tcp_slowtmr+0x710>)
 800c122:	f00a fdcb 	bl	8016cbc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c128:	68db      	ldr	r3, [r3, #12]
 800c12a:	4a0e      	ldr	r2, [pc, #56]	@ (800c164 <tcp_slowtmr+0x704>)
 800c12c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c130:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800c132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c134:	68db      	ldr	r3, [r3, #12]
 800c136:	633b      	str	r3, [r7, #48]	@ 0x30
      tcp_free(pcb2);
 800c138:	6a38      	ldr	r0, [r7, #32]
 800c13a:	f7ff f8d7 	bl	800b2ec <tcp_free>
 800c13e:	e004      	b.n	800c14a <tcp_slowtmr+0x6ea>
    } else {
      prev = pcb;
 800c140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c142:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pcb = pcb->next;
 800c144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c146:	68db      	ldr	r3, [r3, #12]
 800c148:	633b      	str	r3, [r7, #48]	@ 0x30
  while (pcb != NULL) {
 800c14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d1a9      	bne.n	800c0a4 <tcp_slowtmr+0x644>
    }
  }
}
 800c150:	bf00      	nop
 800c152:	bf00      	nop
 800c154:	3738      	adds	r7, #56	@ 0x38
 800c156:	46bd      	mov	sp, r7
 800c158:	bdb0      	pop	{r4, r5, r7, pc}
 800c15a:	bf00      	nop
 800c15c:	08019250 	.word	0x08019250
 800c160:	24003304 	.word	0x24003304
 800c164:	24003300 	.word	0x24003300
 800c168:	08018ba4 	.word	0x08018ba4
 800c16c:	08019274 	.word	0x08019274
 800c170:	08018be8 	.word	0x08018be8
 800c174:	240032f0 	.word	0x240032f0
 800c178:	080192a4 	.word	0x080192a4
 800c17c:	080192cc 	.word	0x080192cc

0800c180 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c186:	4b30      	ldr	r3, [pc, #192]	@ (800c248 <tcp_fasttmr+0xc8>)
 800c188:	781b      	ldrb	r3, [r3, #0]
 800c18a:	3301      	adds	r3, #1
 800c18c:	b2da      	uxtb	r2, r3
 800c18e:	4b2e      	ldr	r3, [pc, #184]	@ (800c248 <tcp_fasttmr+0xc8>)
 800c190:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c192:	4b2e      	ldr	r3, [pc, #184]	@ (800c24c <tcp_fasttmr+0xcc>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c198:	e04e      	b.n	800c238 <tcp_fasttmr+0xb8>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	7f9a      	ldrb	r2, [r3, #30]
 800c19e:	4b2a      	ldr	r3, [pc, #168]	@ (800c248 <tcp_fasttmr+0xc8>)
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d045      	beq.n	800c232 <tcp_fasttmr+0xb2>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c1a6:	4b28      	ldr	r3, [pc, #160]	@ (800c248 <tcp_fasttmr+0xc8>)
 800c1a8:	781a      	ldrb	r2, [r3, #0]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	8b5b      	ldrh	r3, [r3, #26]
 800c1b2:	f003 0301 	and.w	r3, r3, #1
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d013      	beq.n	800c1e2 <tcp_fasttmr+0x62>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
 800c1ba:	4825      	ldr	r0, [pc, #148]	@ (800c250 <tcp_fasttmr+0xd0>)
 800c1bc:	f00a fdee 	bl	8016d9c <puts>
        tcp_ack_now(pcb);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	8b5b      	ldrh	r3, [r3, #26]
 800c1c4:	f043 0302 	orr.w	r3, r3, #2
 800c1c8:	b29a      	uxth	r2, r3
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f003 fc44 	bl	800fa5c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	8b5b      	ldrh	r3, [r3, #26]
 800c1d8:	f023 0303 	bic.w	r3, r3, #3
 800c1dc:	b29a      	uxth	r2, r3
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	8b5b      	ldrh	r3, [r3, #26]
 800c1e6:	f003 0308 	and.w	r3, r3, #8
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d00c      	beq.n	800c208 <tcp_fasttmr+0x88>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
 800c1ee:	4819      	ldr	r0, [pc, #100]	@ (800c254 <tcp_fasttmr+0xd4>)
 800c1f0:	f00a fdd4 	bl	8016d9c <puts>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	8b5b      	ldrh	r3, [r3, #26]
 800c1f8:	f023 0308 	bic.w	r3, r3, #8
 800c1fc:	b29a      	uxth	r2, r3
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f7ff fa06 	bl	800b614 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c212:	2b00      	cmp	r3, #0
 800c214:	d00a      	beq.n	800c22c <tcp_fasttmr+0xac>
        tcp_active_pcbs_changed = 0;
 800c216:	4b10      	ldr	r3, [pc, #64]	@ (800c258 <tcp_fasttmr+0xd8>)
 800c218:	2200      	movs	r2, #0
 800c21a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 f81d 	bl	800c25c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c222:	4b0d      	ldr	r3, [pc, #52]	@ (800c258 <tcp_fasttmr+0xd8>)
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d000      	beq.n	800c22c <tcp_fasttmr+0xac>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c22a:	e7b2      	b.n	800c192 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	607b      	str	r3, [r7, #4]
 800c230:	e002      	b.n	800c238 <tcp_fasttmr+0xb8>
    } else {
      pcb = pcb->next;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	68db      	ldr	r3, [r3, #12]
 800c236:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d1ad      	bne.n	800c19a <tcp_fasttmr+0x1a>
    }
  }
}
 800c23e:	bf00      	nop
 800c240:	bf00      	nop
 800c242:	3708      	adds	r7, #8
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}
 800c248:	24003306 	.word	0x24003306
 800c24c:	240032fc 	.word	0x240032fc
 800c250:	080192f4 	.word	0x080192f4
 800c254:	08019310 	.word	0x08019310
 800c258:	24003304 	.word	0x24003304

0800c25c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c25c:	b590      	push	{r4, r7, lr}
 800c25e:	b085      	sub	sp, #20
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d109      	bne.n	800c27e <tcp_process_refused_data+0x22>
 800c26a:	4b37      	ldr	r3, [pc, #220]	@ (800c348 <tcp_process_refused_data+0xec>)
 800c26c:	f240 6209 	movw	r2, #1545	@ 0x609
 800c270:	4936      	ldr	r1, [pc, #216]	@ (800c34c <tcp_process_refused_data+0xf0>)
 800c272:	4837      	ldr	r0, [pc, #220]	@ (800c350 <tcp_process_refused_data+0xf4>)
 800c274:	f00a fd22 	bl	8016cbc <iprintf>
 800c278:	f06f 030f 	mvn.w	r3, #15
 800c27c:	e060      	b.n	800c340 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c282:	7b5b      	ldrb	r3, [r3, #13]
 800c284:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c28a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2200      	movs	r2, #0
 800c290:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d00b      	beq.n	800c2b4 <tcp_process_refused_data+0x58>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6918      	ldr	r0, [r3, #16]
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	68ba      	ldr	r2, [r7, #8]
 800c2aa:	6879      	ldr	r1, [r7, #4]
 800c2ac:	47a0      	blx	r4
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	73fb      	strb	r3, [r7, #15]
 800c2b2:	e007      	b.n	800c2c4 <tcp_process_refused_data+0x68>
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	68ba      	ldr	r2, [r7, #8]
 800c2b8:	6879      	ldr	r1, [r7, #4]
 800c2ba:	2000      	movs	r0, #0
 800c2bc:	f000 f8a6 	bl	800c40c <tcp_recv_null>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c2c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d12a      	bne.n	800c322 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c2cc:	7bbb      	ldrb	r3, [r7, #14]
 800c2ce:	f003 0320 	and.w	r3, r3, #32
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d033      	beq.n	800c33e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c2da:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c2de:	d005      	beq.n	800c2ec <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c2e4:	3301      	adds	r3, #1
 800c2e6:	b29a      	uxth	r2, r3
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d00b      	beq.n	800c30e <tcp_process_refused_data+0xb2>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6918      	ldr	r0, [r3, #16]
 800c300:	2300      	movs	r3, #0
 800c302:	2200      	movs	r2, #0
 800c304:	6879      	ldr	r1, [r7, #4]
 800c306:	47a0      	blx	r4
 800c308:	4603      	mov	r3, r0
 800c30a:	73fb      	strb	r3, [r7, #15]
 800c30c:	e001      	b.n	800c312 <tcp_process_refused_data+0xb6>
 800c30e:	2300      	movs	r3, #0
 800c310:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800c312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c316:	f113 0f0d 	cmn.w	r3, #13
 800c31a:	d110      	bne.n	800c33e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800c31c:	f06f 030c 	mvn.w	r3, #12
 800c320:	e00e      	b.n	800c340 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800c322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c326:	f113 0f0d 	cmn.w	r3, #13
 800c32a:	d102      	bne.n	800c332 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800c32c:	f06f 030c 	mvn.w	r3, #12
 800c330:	e006      	b.n	800c340 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	68ba      	ldr	r2, [r7, #8]
 800c336:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800c338:	f06f 0304 	mvn.w	r3, #4
 800c33c:	e000      	b.n	800c340 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800c33e:	2300      	movs	r3, #0
}
 800c340:	4618      	mov	r0, r3
 800c342:	3714      	adds	r7, #20
 800c344:	46bd      	mov	sp, r7
 800c346:	bd90      	pop	{r4, r7, pc}
 800c348:	08018ba4 	.word	0x08018ba4
 800c34c:	0801932c 	.word	0x0801932c
 800c350:	08018be8 	.word	0x08018be8

0800c354 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b084      	sub	sp, #16
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800c35c:	e007      	b.n	800c36e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f000 f80a 	bl	800c37e <tcp_seg_free>
    seg = next;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d1f4      	bne.n	800c35e <tcp_segs_free+0xa>
  }
}
 800c374:	bf00      	nop
 800c376:	bf00      	nop
 800c378:	3710      	adds	r7, #16
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}

0800c37e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800c37e:	b580      	push	{r7, lr}
 800c380:	b082      	sub	sp, #8
 800c382:	af00      	add	r7, sp, #0
 800c384:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d00f      	beq.n	800c3ac <tcp_seg_free+0x2e>
    if (seg->p != NULL) {
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d007      	beq.n	800c3a4 <tcp_seg_free+0x26>
      pbuf_free(seg->p);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	4618      	mov	r0, r3
 800c39a:	f7fe fccb 	bl	800ad34 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	605a      	str	r2, [r3, #4]
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c3a4:	6879      	ldr	r1, [r7, #4]
 800c3a6:	2003      	movs	r0, #3
 800c3a8:	f7fd fdf6 	bl	8009f98 <memp_free>
  }
}
 800c3ac:	bf00      	nop
 800c3ae:	3708      	adds	r7, #8
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}

0800c3b4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b084      	sub	sp, #16
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d106      	bne.n	800c3d0 <tcp_seg_copy+0x1c>
 800c3c2:	4b0f      	ldr	r3, [pc, #60]	@ (800c400 <tcp_seg_copy+0x4c>)
 800c3c4:	f240 6282 	movw	r2, #1666	@ 0x682
 800c3c8:	490e      	ldr	r1, [pc, #56]	@ (800c404 <tcp_seg_copy+0x50>)
 800c3ca:	480f      	ldr	r0, [pc, #60]	@ (800c408 <tcp_seg_copy+0x54>)
 800c3cc:	f00a fc76 	bl	8016cbc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800c3d0:	2003      	movs	r0, #3
 800c3d2:	f7fd fd71 	bl	8009eb8 <memp_malloc>
 800c3d6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d101      	bne.n	800c3e2 <tcp_seg_copy+0x2e>
    return NULL;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	e00a      	b.n	800c3f8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c3e2:	2214      	movs	r2, #20
 800c3e4:	6879      	ldr	r1, [r7, #4]
 800c3e6:	68f8      	ldr	r0, [r7, #12]
 800c3e8:	f00a fe3d 	bl	8017066 <memcpy>
  pbuf_ref(cseg->p);
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7fe fd57 	bl	800aea4 <pbuf_ref>
  return cseg;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3710      	adds	r7, #16
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}
 800c400:	08018ba4 	.word	0x08018ba4
 800c404:	08019370 	.word	0x08019370
 800c408:	08018be8 	.word	0x08018be8

0800c40c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b084      	sub	sp, #16
 800c410:	af00      	add	r7, sp, #0
 800c412:	60f8      	str	r0, [r7, #12]
 800c414:	60b9      	str	r1, [r7, #8]
 800c416:	607a      	str	r2, [r7, #4]
 800c418:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d109      	bne.n	800c434 <tcp_recv_null+0x28>
 800c420:	4b12      	ldr	r3, [pc, #72]	@ (800c46c <tcp_recv_null+0x60>)
 800c422:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800c426:	4912      	ldr	r1, [pc, #72]	@ (800c470 <tcp_recv_null+0x64>)
 800c428:	4812      	ldr	r0, [pc, #72]	@ (800c474 <tcp_recv_null+0x68>)
 800c42a:	f00a fc47 	bl	8016cbc <iprintf>
 800c42e:	f06f 030f 	mvn.w	r3, #15
 800c432:	e016      	b.n	800c462 <tcp_recv_null+0x56>

  if (p != NULL) {
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d009      	beq.n	800c44e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	891b      	ldrh	r3, [r3, #8]
 800c43e:	4619      	mov	r1, r3
 800c440:	68b8      	ldr	r0, [r7, #8]
 800c442:	f7ff faab 	bl	800b99c <tcp_recved>
    pbuf_free(p);
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f7fe fc74 	bl	800ad34 <pbuf_free>
 800c44c:	e008      	b.n	800c460 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800c44e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d104      	bne.n	800c460 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800c456:	68b8      	ldr	r0, [r7, #8]
 800c458:	f7ff f946 	bl	800b6e8 <tcp_close>
 800c45c:	4603      	mov	r3, r0
 800c45e:	e000      	b.n	800c462 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800c460:	2300      	movs	r3, #0
}
 800c462:	4618      	mov	r0, r3
 800c464:	3710      	adds	r7, #16
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop
 800c46c:	08018ba4 	.word	0x08018ba4
 800c470:	0801938c 	.word	0x0801938c
 800c474:	08018be8 	.word	0x08018be8

0800c478 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b086      	sub	sp, #24
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	4603      	mov	r3, r0
 800c480:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c486:	2b00      	cmp	r3, #0
 800c488:	db01      	blt.n	800c48e <tcp_kill_prio+0x16>
 800c48a:	79fb      	ldrb	r3, [r7, #7]
 800c48c:	e000      	b.n	800c490 <tcp_kill_prio+0x18>
 800c48e:	237f      	movs	r3, #127	@ 0x7f
 800c490:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800c492:	7afb      	ldrb	r3, [r7, #11]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d039      	beq.n	800c50c <tcp_kill_prio+0x94>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800c498:	7afb      	ldrb	r3, [r7, #11]
 800c49a:	3b01      	subs	r3, #1
 800c49c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c4a6:	4b1b      	ldr	r3, [pc, #108]	@ (800c514 <tcp_kill_prio+0x9c>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	617b      	str	r3, [r7, #20]
 800c4ac:	e01f      	b.n	800c4ee <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	7d5b      	ldrb	r3, [r3, #21]
 800c4b2:	7afa      	ldrb	r2, [r7, #11]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d80c      	bhi.n	800c4d2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800c4bc:	7afa      	ldrb	r2, [r7, #11]
 800c4be:	429a      	cmp	r2, r3
 800c4c0:	d112      	bne.n	800c4e8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c4c2:	4b15      	ldr	r3, [pc, #84]	@ (800c518 <tcp_kill_prio+0xa0>)
 800c4c4:	681a      	ldr	r2, [r3, #0]
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	6a1b      	ldr	r3, [r3, #32]
 800c4ca:	1ad3      	subs	r3, r2, r3
 800c4cc:	68fa      	ldr	r2, [r7, #12]
 800c4ce:	429a      	cmp	r2, r3
 800c4d0:	d80a      	bhi.n	800c4e8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800c4d2:	4b11      	ldr	r3, [pc, #68]	@ (800c518 <tcp_kill_prio+0xa0>)
 800c4d4:	681a      	ldr	r2, [r3, #0]
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	6a1b      	ldr	r3, [r3, #32]
 800c4da:	1ad3      	subs	r3, r2, r3
 800c4dc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	7d5b      	ldrb	r3, [r3, #21]
 800c4e6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	68db      	ldr	r3, [r3, #12]
 800c4ec:	617b      	str	r3, [r7, #20]
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d1dc      	bne.n	800c4ae <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d009      	beq.n	800c50e <tcp_kill_prio+0x96>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
 800c4fa:	68fa      	ldr	r2, [r7, #12]
 800c4fc:	6939      	ldr	r1, [r7, #16]
 800c4fe:	4807      	ldr	r0, [pc, #28]	@ (800c51c <tcp_kill_prio+0xa4>)
 800c500:	f00a fbdc 	bl	8016cbc <iprintf>
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c504:	6938      	ldr	r0, [r7, #16]
 800c506:	f7ff f9e3 	bl	800b8d0 <tcp_abort>
 800c50a:	e000      	b.n	800c50e <tcp_kill_prio+0x96>
    return;
 800c50c:	bf00      	nop
  }
}
 800c50e:	3718      	adds	r7, #24
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}
 800c514:	240032fc 	.word	0x240032fc
 800c518:	240032f0 	.word	0x240032f0
 800c51c:	080193a8 	.word	0x080193a8

0800c520 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b086      	sub	sp, #24
 800c524:	af00      	add	r7, sp, #0
 800c526:	4603      	mov	r3, r0
 800c528:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800c52a:	79fb      	ldrb	r3, [r7, #7]
 800c52c:	2b08      	cmp	r3, #8
 800c52e:	d009      	beq.n	800c544 <tcp_kill_state+0x24>
 800c530:	79fb      	ldrb	r3, [r7, #7]
 800c532:	2b09      	cmp	r3, #9
 800c534:	d006      	beq.n	800c544 <tcp_kill_state+0x24>
 800c536:	4b1f      	ldr	r3, [pc, #124]	@ (800c5b4 <tcp_kill_state+0x94>)
 800c538:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800c53c:	491e      	ldr	r1, [pc, #120]	@ (800c5b8 <tcp_kill_state+0x98>)
 800c53e:	481f      	ldr	r0, [pc, #124]	@ (800c5bc <tcp_kill_state+0x9c>)
 800c540:	f00a fbbc 	bl	8016cbc <iprintf>

  inactivity = 0;
 800c544:	2300      	movs	r3, #0
 800c546:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c548:	2300      	movs	r3, #0
 800c54a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c54c:	4b1c      	ldr	r3, [pc, #112]	@ (800c5c0 <tcp_kill_state+0xa0>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	617b      	str	r3, [r7, #20]
 800c552:	e017      	b.n	800c584 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	7d1b      	ldrb	r3, [r3, #20]
 800c558:	79fa      	ldrb	r2, [r7, #7]
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d10f      	bne.n	800c57e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c55e:	4b19      	ldr	r3, [pc, #100]	@ (800c5c4 <tcp_kill_state+0xa4>)
 800c560:	681a      	ldr	r2, [r3, #0]
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	6a1b      	ldr	r3, [r3, #32]
 800c566:	1ad3      	subs	r3, r2, r3
 800c568:	68fa      	ldr	r2, [r7, #12]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d807      	bhi.n	800c57e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800c56e:	4b15      	ldr	r3, [pc, #84]	@ (800c5c4 <tcp_kill_state+0xa4>)
 800c570:	681a      	ldr	r2, [r3, #0]
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	6a1b      	ldr	r3, [r3, #32]
 800c576:	1ad3      	subs	r3, r2, r3
 800c578:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	68db      	ldr	r3, [r3, #12]
 800c582:	617b      	str	r3, [r7, #20]
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d1e4      	bne.n	800c554 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d00c      	beq.n	800c5aa <tcp_kill_state+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
 800c590:	79fb      	ldrb	r3, [r7, #7]
 800c592:	4a0d      	ldr	r2, [pc, #52]	@ (800c5c8 <tcp_kill_state+0xa8>)
 800c594:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	693a      	ldr	r2, [r7, #16]
 800c59c:	480b      	ldr	r0, [pc, #44]	@ (800c5cc <tcp_kill_state+0xac>)
 800c59e:	f00a fb8d 	bl	8016cbc <iprintf>
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800c5a2:	2100      	movs	r1, #0
 800c5a4:	6938      	ldr	r0, [r7, #16]
 800c5a6:	f7ff f8d5 	bl	800b754 <tcp_abandon>
  }
}
 800c5aa:	bf00      	nop
 800c5ac:	3718      	adds	r7, #24
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
 800c5b2:	bf00      	nop
 800c5b4:	08018ba4 	.word	0x08018ba4
 800c5b8:	080193d4 	.word	0x080193d4
 800c5bc:	08018be8 	.word	0x08018be8
 800c5c0:	240032fc 	.word	0x240032fc
 800c5c4:	240032f0 	.word	0x240032f0
 800c5c8:	0801dbd4 	.word	0x0801dbd4
 800c5cc:	080193e4 	.word	0x080193e4

0800c5d0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b084      	sub	sp, #16
 800c5d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c5de:	4b14      	ldr	r3, [pc, #80]	@ (800c630 <tcp_kill_timewait+0x60>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	60fb      	str	r3, [r7, #12]
 800c5e4:	e012      	b.n	800c60c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c5e6:	4b13      	ldr	r3, [pc, #76]	@ (800c634 <tcp_kill_timewait+0x64>)
 800c5e8:	681a      	ldr	r2, [r3, #0]
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	6a1b      	ldr	r3, [r3, #32]
 800c5ee:	1ad3      	subs	r3, r2, r3
 800c5f0:	687a      	ldr	r2, [r7, #4]
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	d807      	bhi.n	800c606 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800c5f6:	4b0f      	ldr	r3, [pc, #60]	@ (800c634 <tcp_kill_timewait+0x64>)
 800c5f8:	681a      	ldr	r2, [r3, #0]
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	6a1b      	ldr	r3, [r3, #32]
 800c5fe:	1ad3      	subs	r3, r2, r3
 800c600:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	68db      	ldr	r3, [r3, #12]
 800c60a:	60fb      	str	r3, [r7, #12]
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d1e9      	bne.n	800c5e6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d007      	beq.n	800c628 <tcp_kill_timewait+0x58>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
 800c618:	687a      	ldr	r2, [r7, #4]
 800c61a:	68b9      	ldr	r1, [r7, #8]
 800c61c:	4806      	ldr	r0, [pc, #24]	@ (800c638 <tcp_kill_timewait+0x68>)
 800c61e:	f00a fb4d 	bl	8016cbc <iprintf>
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c622:	68b8      	ldr	r0, [r7, #8]
 800c624:	f7ff f954 	bl	800b8d0 <tcp_abort>
  }
}
 800c628:	bf00      	nop
 800c62a:	3710      	adds	r7, #16
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}
 800c630:	24003300 	.word	0x24003300
 800c634:	240032f0 	.word	0x240032f0
 800c638:	08019418 	.word	0x08019418

0800c63c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b082      	sub	sp, #8
 800c640:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800c642:	4b12      	ldr	r3, [pc, #72]	@ (800c68c <tcp_handle_closepend+0x50>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c648:	e017      	b.n	800c67a <tcp_handle_closepend+0x3e>
    struct tcp_pcb *next = pcb->next;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	68db      	ldr	r3, [r3, #12]
 800c64e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	8b5b      	ldrh	r3, [r3, #26]
 800c654:	f003 0308 	and.w	r3, r3, #8
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d00c      	beq.n	800c676 <tcp_handle_closepend+0x3a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
 800c65c:	480c      	ldr	r0, [pc, #48]	@ (800c690 <tcp_handle_closepend+0x54>)
 800c65e:	f00a fb9d 	bl	8016d9c <puts>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	8b5b      	ldrh	r3, [r3, #26]
 800c666:	f023 0308 	bic.w	r3, r3, #8
 800c66a:	b29a      	uxth	r2, r3
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f7fe ffcf 	bl	800b614 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d1e4      	bne.n	800c64a <tcp_handle_closepend+0xe>
  }
}
 800c680:	bf00      	nop
 800c682:	bf00      	nop
 800c684:	3708      	adds	r7, #8
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}
 800c68a:	bf00      	nop
 800c68c:	240032fc 	.word	0x240032fc
 800c690:	08019454 	.word	0x08019454

0800c694 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b084      	sub	sp, #16
 800c698:	af00      	add	r7, sp, #0
 800c69a:	4603      	mov	r3, r0
 800c69c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c69e:	2001      	movs	r0, #1
 800c6a0:	f7fd fc0a 	bl	8009eb8 <memp_malloc>
 800c6a4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d134      	bne.n	800c716 <tcp_alloc+0x82>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800c6ac:	f7ff ffc6 	bl	800c63c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
 800c6b0:	483d      	ldr	r0, [pc, #244]	@ (800c7a8 <tcp_alloc+0x114>)
 800c6b2:	f00a fb73 	bl	8016d9c <puts>
    tcp_kill_timewait();
 800c6b6:	f7ff ff8b 	bl	800c5d0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c6ba:	2001      	movs	r0, #1
 800c6bc:	f7fd fbfc 	bl	8009eb8 <memp_malloc>
 800c6c0:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d126      	bne.n	800c716 <tcp_alloc+0x82>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
 800c6c8:	4838      	ldr	r0, [pc, #224]	@ (800c7ac <tcp_alloc+0x118>)
 800c6ca:	f00a fb67 	bl	8016d9c <puts>
      tcp_kill_state(LAST_ACK);
 800c6ce:	2009      	movs	r0, #9
 800c6d0:	f7ff ff26 	bl	800c520 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c6d4:	2001      	movs	r0, #1
 800c6d6:	f7fd fbef 	bl	8009eb8 <memp_malloc>
 800c6da:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d119      	bne.n	800c716 <tcp_alloc+0x82>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
 800c6e2:	4833      	ldr	r0, [pc, #204]	@ (800c7b0 <tcp_alloc+0x11c>)
 800c6e4:	f00a fb5a 	bl	8016d9c <puts>
        tcp_kill_state(CLOSING);
 800c6e8:	2008      	movs	r0, #8
 800c6ea:	f7ff ff19 	bl	800c520 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c6ee:	2001      	movs	r0, #1
 800c6f0:	f7fd fbe2 	bl	8009eb8 <memp_malloc>
 800c6f4:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d10c      	bne.n	800c716 <tcp_alloc+0x82>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
 800c6fc:	79fb      	ldrb	r3, [r7, #7]
 800c6fe:	4619      	mov	r1, r3
 800c700:	482c      	ldr	r0, [pc, #176]	@ (800c7b4 <tcp_alloc+0x120>)
 800c702:	f00a fadb 	bl	8016cbc <iprintf>
          tcp_kill_prio(prio);
 800c706:	79fb      	ldrb	r3, [r7, #7]
 800c708:	4618      	mov	r0, r3
 800c70a:	f7ff feb5 	bl	800c478 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c70e:	2001      	movs	r0, #1
 800c710:	f7fd fbd2 	bl	8009eb8 <memp_malloc>
 800c714:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d03f      	beq.n	800c79c <tcp_alloc+0x108>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c71c:	229c      	movs	r2, #156	@ 0x9c
 800c71e:	2100      	movs	r1, #0
 800c720:	68f8      	ldr	r0, [r7, #12]
 800c722:	f00a fc2b 	bl	8016f7c <memset>
    pcb->prio = prio;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	79fa      	ldrb	r2, [r7, #7]
 800c72a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800c732:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800c73c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	22ff      	movs	r2, #255	@ 0xff
 800c74a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800c752:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2206      	movs	r2, #6
 800c758:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	2206      	movs	r2, #6
 800c760:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c768:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	2201      	movs	r2, #1
 800c76e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800c772:	4b11      	ldr	r3, [pc, #68]	@ (800c7b8 <tcp_alloc+0x124>)
 800c774:	681a      	ldr	r2, [r3, #0]
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c77a:	4b10      	ldr	r3, [pc, #64]	@ (800c7bc <tcp_alloc+0x128>)
 800c77c:	781a      	ldrb	r2, [r3, #0]
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800c788:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	4a0c      	ldr	r2, [pc, #48]	@ (800c7c0 <tcp_alloc+0x12c>)
 800c790:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	4a0b      	ldr	r2, [pc, #44]	@ (800c7c4 <tcp_alloc+0x130>)
 800c798:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800c79c:	68fb      	ldr	r3, [r7, #12]
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3710      	adds	r7, #16
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}
 800c7a6:	bf00      	nop
 800c7a8:	08019478 	.word	0x08019478
 800c7ac:	080194ac 	.word	0x080194ac
 800c7b0:	080194e0 	.word	0x080194e0
 800c7b4:	08019514 	.word	0x08019514
 800c7b8:	240032f0 	.word	0x240032f0
 800c7bc:	24003306 	.word	0x24003306
 800c7c0:	0800c40d 	.word	0x0800c40d
 800c7c4:	006ddd00 	.word	0x006ddd00

0800c7c8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d107      	bne.n	800c7e6 <tcp_pcb_purge+0x1e>
 800c7d6:	4b2d      	ldr	r3, [pc, #180]	@ (800c88c <tcp_pcb_purge+0xc4>)
 800c7d8:	f640 0251 	movw	r2, #2129	@ 0x851
 800c7dc:	492c      	ldr	r1, [pc, #176]	@ (800c890 <tcp_pcb_purge+0xc8>)
 800c7de:	482d      	ldr	r0, [pc, #180]	@ (800c894 <tcp_pcb_purge+0xcc>)
 800c7e0:	f00a fa6c 	bl	8016cbc <iprintf>
 800c7e4:	e04e      	b.n	800c884 <tcp_pcb_purge+0xbc>

  if (pcb->state != CLOSED &&
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	7d1b      	ldrb	r3, [r3, #20]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d04a      	beq.n	800c884 <tcp_pcb_purge+0xbc>
      pcb->state != TIME_WAIT &&
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800c7f2:	2b0a      	cmp	r3, #10
 800c7f4:	d046      	beq.n	800c884 <tcp_pcb_purge+0xbc>
      pcb->state != LISTEN) {
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800c7fa:	2b01      	cmp	r3, #1
 800c7fc:	d042      	beq.n	800c884 <tcp_pcb_purge+0xbc>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));
 800c7fe:	4826      	ldr	r0, [pc, #152]	@ (800c898 <tcp_pcb_purge+0xd0>)
 800c800:	f00a facc 	bl	8016d9c <puts>

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d00a      	beq.n	800c822 <tcp_pcb_purge+0x5a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
 800c80c:	4823      	ldr	r0, [pc, #140]	@ (800c89c <tcp_pcb_purge+0xd4>)
 800c80e:	f00a fac5 	bl	8016d9c <puts>
      pbuf_free(pcb->refused_data);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c816:	4618      	mov	r0, r3
 800c818:	f7fe fa8c 	bl	800ad34 <pbuf_free>
      pcb->refused_data = NULL;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2200      	movs	r2, #0
 800c820:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unsent != NULL) {
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c826:	2b00      	cmp	r3, #0
 800c828:	d002      	beq.n	800c830 <tcp_pcb_purge+0x68>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: not all data sent\n"));
 800c82a:	481d      	ldr	r0, [pc, #116]	@ (800c8a0 <tcp_pcb_purge+0xd8>)
 800c82c:	f00a fab6 	bl	8016d9c <puts>
    }
    if (pcb->unacked != NULL) {
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c834:	2b00      	cmp	r3, #0
 800c836:	d002      	beq.n	800c83e <tcp_pcb_purge+0x76>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
 800c838:	481a      	ldr	r0, [pc, #104]	@ (800c8a4 <tcp_pcb_purge+0xdc>)
 800c83a:	f00a faaf 	bl	8016d9c <puts>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c842:	2b00      	cmp	r3, #0
 800c844:	d005      	beq.n	800c852 <tcp_pcb_purge+0x8a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
 800c846:	4818      	ldr	r0, [pc, #96]	@ (800c8a8 <tcp_pcb_purge+0xe0>)
 800c848:	f00a faa8 	bl	8016d9c <puts>
      tcp_free_ooseq(pcb);
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f000 f99f 	bl	800cb90 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c858:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c85e:	4618      	mov	r0, r3
 800c860:	f7ff fd78 	bl	800c354 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c868:	4618      	mov	r0, r3
 800c86a:	f7ff fd73 	bl	800c354 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2200      	movs	r2, #0
 800c872:	66da      	str	r2, [r3, #108]	@ 0x6c
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2200      	movs	r2, #0
 800c880:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800c884:	3708      	adds	r7, #8
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}
 800c88a:	bf00      	nop
 800c88c:	08018ba4 	.word	0x08018ba4
 800c890:	08019604 	.word	0x08019604
 800c894:	08018be8 	.word	0x08018be8
 800c898:	08019620 	.word	0x08019620
 800c89c:	08019630 	.word	0x08019630
 800c8a0:	0801965c 	.word	0x0801965c
 800c8a4:	08019680 	.word	0x08019680
 800c8a8:	080196a8 	.word	0x080196a8

0800c8ac <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b084      	sub	sp, #16
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d106      	bne.n	800c8ca <tcp_pcb_remove+0x1e>
 800c8bc:	4b44      	ldr	r3, [pc, #272]	@ (800c9d0 <tcp_pcb_remove+0x124>)
 800c8be:	f640 0283 	movw	r2, #2179	@ 0x883
 800c8c2:	4944      	ldr	r1, [pc, #272]	@ (800c9d4 <tcp_pcb_remove+0x128>)
 800c8c4:	4844      	ldr	r0, [pc, #272]	@ (800c9d8 <tcp_pcb_remove+0x12c>)
 800c8c6:	f00a f9f9 	bl	8016cbc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d106      	bne.n	800c8de <tcp_pcb_remove+0x32>
 800c8d0:	4b3f      	ldr	r3, [pc, #252]	@ (800c9d0 <tcp_pcb_remove+0x124>)
 800c8d2:	f640 0284 	movw	r2, #2180	@ 0x884
 800c8d6:	4941      	ldr	r1, [pc, #260]	@ (800c9dc <tcp_pcb_remove+0x130>)
 800c8d8:	483f      	ldr	r0, [pc, #252]	@ (800c9d8 <tcp_pcb_remove+0x12c>)
 800c8da:	f00a f9ef 	bl	8016cbc <iprintf>

  TCP_RMV(pcblist, pcb);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	683a      	ldr	r2, [r7, #0]
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d105      	bne.n	800c8f4 <tcp_pcb_remove+0x48>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	68da      	ldr	r2, [r3, #12]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	601a      	str	r2, [r3, #0]
 800c8f2:	e013      	b.n	800c91c <tcp_pcb_remove+0x70>
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	60fb      	str	r3, [r7, #12]
 800c8fa:	e00c      	b.n	800c916 <tcp_pcb_remove+0x6a>
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	68db      	ldr	r3, [r3, #12]
 800c900:	683a      	ldr	r2, [r7, #0]
 800c902:	429a      	cmp	r2, r3
 800c904:	d104      	bne.n	800c910 <tcp_pcb_remove+0x64>
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	68da      	ldr	r2, [r3, #12]
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	60da      	str	r2, [r3, #12]
 800c90e:	e005      	b.n	800c91c <tcp_pcb_remove+0x70>
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	68db      	ldr	r3, [r3, #12]
 800c914:	60fb      	str	r3, [r7, #12]
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d1ef      	bne.n	800c8fc <tcp_pcb_remove+0x50>
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	2200      	movs	r2, #0
 800c920:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800c922:	6838      	ldr	r0, [r7, #0]
 800c924:	f7ff ff50 	bl	800c7c8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	7d1b      	ldrb	r3, [r3, #20]
 800c92c:	2b0a      	cmp	r3, #10
 800c92e:	d013      	beq.n	800c958 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800c934:	2b01      	cmp	r3, #1
 800c936:	d00f      	beq.n	800c958 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	8b5b      	ldrh	r3, [r3, #26]
 800c93c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800c940:	2b00      	cmp	r3, #0
 800c942:	d009      	beq.n	800c958 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	8b5b      	ldrh	r3, [r3, #26]
 800c948:	f043 0302 	orr.w	r3, r3, #2
 800c94c:	b29a      	uxth	r2, r3
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c952:	6838      	ldr	r0, [r7, #0]
 800c954:	f003 f882 	bl	800fa5c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	7d1b      	ldrb	r3, [r3, #20]
 800c95c:	2b01      	cmp	r3, #1
 800c95e:	d020      	beq.n	800c9a2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c964:	2b00      	cmp	r3, #0
 800c966:	d006      	beq.n	800c976 <tcp_pcb_remove+0xca>
 800c968:	4b19      	ldr	r3, [pc, #100]	@ (800c9d0 <tcp_pcb_remove+0x124>)
 800c96a:	f640 0293 	movw	r2, #2195	@ 0x893
 800c96e:	491c      	ldr	r1, [pc, #112]	@ (800c9e0 <tcp_pcb_remove+0x134>)
 800c970:	4819      	ldr	r0, [pc, #100]	@ (800c9d8 <tcp_pcb_remove+0x12c>)
 800c972:	f00a f9a3 	bl	8016cbc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d006      	beq.n	800c98c <tcp_pcb_remove+0xe0>
 800c97e:	4b14      	ldr	r3, [pc, #80]	@ (800c9d0 <tcp_pcb_remove+0x124>)
 800c980:	f640 0294 	movw	r2, #2196	@ 0x894
 800c984:	4917      	ldr	r1, [pc, #92]	@ (800c9e4 <tcp_pcb_remove+0x138>)
 800c986:	4814      	ldr	r0, [pc, #80]	@ (800c9d8 <tcp_pcb_remove+0x12c>)
 800c988:	f00a f998 	bl	8016cbc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c990:	2b00      	cmp	r3, #0
 800c992:	d006      	beq.n	800c9a2 <tcp_pcb_remove+0xf6>
 800c994:	4b0e      	ldr	r3, [pc, #56]	@ (800c9d0 <tcp_pcb_remove+0x124>)
 800c996:	f640 0296 	movw	r2, #2198	@ 0x896
 800c99a:	4913      	ldr	r1, [pc, #76]	@ (800c9e8 <tcp_pcb_remove+0x13c>)
 800c99c:	480e      	ldr	r0, [pc, #56]	@ (800c9d8 <tcp_pcb_remove+0x12c>)
 800c99e:	f00a f98d 	bl	8016cbc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
 800c9ae:	f000 f919 	bl	800cbe4 <tcp_pcbs_sane>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d106      	bne.n	800c9c6 <tcp_pcb_remove+0x11a>
 800c9b8:	4b05      	ldr	r3, [pc, #20]	@ (800c9d0 <tcp_pcb_remove+0x124>)
 800c9ba:	f640 029e 	movw	r2, #2206	@ 0x89e
 800c9be:	490b      	ldr	r1, [pc, #44]	@ (800c9ec <tcp_pcb_remove+0x140>)
 800c9c0:	4805      	ldr	r0, [pc, #20]	@ (800c9d8 <tcp_pcb_remove+0x12c>)
 800c9c2:	f00a f97b 	bl	8016cbc <iprintf>
}
 800c9c6:	bf00      	nop
 800c9c8:	3710      	adds	r7, #16
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	08018ba4 	.word	0x08018ba4
 800c9d4:	080196cc 	.word	0x080196cc
 800c9d8:	08018be8 	.word	0x08018be8
 800c9dc:	080196e8 	.word	0x080196e8
 800c9e0:	08019708 	.word	0x08019708
 800c9e4:	08019720 	.word	0x08019720
 800c9e8:	0801973c 	.word	0x0801973c
 800c9ec:	08019754 	.word	0x08019754

0800c9f0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b082      	sub	sp, #8
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d106      	bne.n	800ca0c <tcp_next_iss+0x1c>
 800c9fe:	4b0a      	ldr	r3, [pc, #40]	@ (800ca28 <tcp_next_iss+0x38>)
 800ca00:	f640 02af 	movw	r2, #2223	@ 0x8af
 800ca04:	4909      	ldr	r1, [pc, #36]	@ (800ca2c <tcp_next_iss+0x3c>)
 800ca06:	480a      	ldr	r0, [pc, #40]	@ (800ca30 <tcp_next_iss+0x40>)
 800ca08:	f00a f958 	bl	8016cbc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ca0c:	4b09      	ldr	r3, [pc, #36]	@ (800ca34 <tcp_next_iss+0x44>)
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	4b09      	ldr	r3, [pc, #36]	@ (800ca38 <tcp_next_iss+0x48>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4413      	add	r3, r2
 800ca16:	4a07      	ldr	r2, [pc, #28]	@ (800ca34 <tcp_next_iss+0x44>)
 800ca18:	6013      	str	r3, [r2, #0]
  return iss;
 800ca1a:	4b06      	ldr	r3, [pc, #24]	@ (800ca34 <tcp_next_iss+0x44>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3708      	adds	r7, #8
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}
 800ca26:	bf00      	nop
 800ca28:	08018ba4 	.word	0x08018ba4
 800ca2c:	08019774 	.word	0x08019774
 800ca30:	08018be8 	.word	0x08018be8
 800ca34:	24000080 	.word	0x24000080
 800ca38:	240032f0 	.word	0x240032f0

0800ca3c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b086      	sub	sp, #24
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	4603      	mov	r3, r0
 800ca44:	60b9      	str	r1, [r7, #8]
 800ca46:	607a      	str	r2, [r7, #4]
 800ca48:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d106      	bne.n	800ca5e <tcp_eff_send_mss_netif+0x22>
 800ca50:	4b14      	ldr	r3, [pc, #80]	@ (800caa4 <tcp_eff_send_mss_netif+0x68>)
 800ca52:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800ca56:	4914      	ldr	r1, [pc, #80]	@ (800caa8 <tcp_eff_send_mss_netif+0x6c>)
 800ca58:	4814      	ldr	r0, [pc, #80]	@ (800caac <tcp_eff_send_mss_netif+0x70>)
 800ca5a:	f00a f92f 	bl	8016cbc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d101      	bne.n	800ca68 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ca64:	89fb      	ldrh	r3, [r7, #14]
 800ca66:	e019      	b.n	800ca9c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ca6c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ca6e:	8afb      	ldrh	r3, [r7, #22]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d012      	beq.n	800ca9a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ca74:	2328      	movs	r3, #40	@ 0x28
 800ca76:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ca78:	8afa      	ldrh	r2, [r7, #22]
 800ca7a:	8abb      	ldrh	r3, [r7, #20]
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	d904      	bls.n	800ca8a <tcp_eff_send_mss_netif+0x4e>
 800ca80:	8afa      	ldrh	r2, [r7, #22]
 800ca82:	8abb      	ldrh	r3, [r7, #20]
 800ca84:	1ad3      	subs	r3, r2, r3
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	e000      	b.n	800ca8c <tcp_eff_send_mss_netif+0x50>
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ca8e:	8a7a      	ldrh	r2, [r7, #18]
 800ca90:	89fb      	ldrh	r3, [r7, #14]
 800ca92:	4293      	cmp	r3, r2
 800ca94:	bf28      	it	cs
 800ca96:	4613      	movcs	r3, r2
 800ca98:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ca9a:	89fb      	ldrh	r3, [r7, #14]
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3718      	adds	r7, #24
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	08018ba4 	.word	0x08018ba4
 800caa8:	08019790 	.word	0x08019790
 800caac:	08018be8 	.word	0x08018be8

0800cab0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b084      	sub	sp, #16
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d119      	bne.n	800caf8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800cac4:	4b10      	ldr	r3, [pc, #64]	@ (800cb08 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800cac6:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800caca:	4910      	ldr	r1, [pc, #64]	@ (800cb0c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800cacc:	4810      	ldr	r0, [pc, #64]	@ (800cb10 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800cace:	f00a f8f5 	bl	8016cbc <iprintf>

  while (pcb != NULL) {
 800cad2:	e011      	b.n	800caf8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681a      	ldr	r2, [r3, #0]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	429a      	cmp	r2, r3
 800cade:	d108      	bne.n	800caf2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	68db      	ldr	r3, [r3, #12]
 800cae4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800cae6:	68f8      	ldr	r0, [r7, #12]
 800cae8:	f7fe fef2 	bl	800b8d0 <tcp_abort>
      pcb = next;
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	60fb      	str	r3, [r7, #12]
 800caf0:	e002      	b.n	800caf8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	68db      	ldr	r3, [r3, #12]
 800caf6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d1ea      	bne.n	800cad4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800cafe:	bf00      	nop
 800cb00:	bf00      	nop
 800cb02:	3710      	adds	r7, #16
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}
 800cb08:	08018ba4 	.word	0x08018ba4
 800cb0c:	080197b8 	.word	0x080197b8
 800cb10:	08018be8 	.word	0x08018be8

0800cb14 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b084      	sub	sp, #16
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d02a      	beq.n	800cb7a <tcp_netif_ip_addr_changed+0x66>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d026      	beq.n	800cb7a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800cb2c:	4b15      	ldr	r3, [pc, #84]	@ (800cb84 <tcp_netif_ip_addr_changed+0x70>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4619      	mov	r1, r3
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f7ff ffbc 	bl	800cab0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800cb38:	4b13      	ldr	r3, [pc, #76]	@ (800cb88 <tcp_netif_ip_addr_changed+0x74>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4619      	mov	r1, r3
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f7ff ffb6 	bl	800cab0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d017      	beq.n	800cb7a <tcp_netif_ip_addr_changed+0x66>
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d013      	beq.n	800cb7a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cb52:	4b0e      	ldr	r3, [pc, #56]	@ (800cb8c <tcp_netif_ip_addr_changed+0x78>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	60fb      	str	r3, [r7, #12]
 800cb58:	e00c      	b.n	800cb74 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d103      	bne.n	800cb6e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	681a      	ldr	r2, [r3, #0]
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	68db      	ldr	r3, [r3, #12]
 800cb72:	60fb      	str	r3, [r7, #12]
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d1ef      	bne.n	800cb5a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800cb7a:	bf00      	nop
 800cb7c:	3710      	adds	r7, #16
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}
 800cb82:	bf00      	nop
 800cb84:	240032fc 	.word	0x240032fc
 800cb88:	240032f4 	.word	0x240032f4
 800cb8c:	240032f8 	.word	0x240032f8

0800cb90 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b082      	sub	sp, #8
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d007      	beq.n	800cbb0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cba4:	4618      	mov	r0, r3
 800cba6:	f7ff fbd5 	bl	800c354 <tcp_segs_free>
    pcb->ooseq = NULL;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2200      	movs	r2, #0
 800cbae:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800cbb0:	bf00      	nop
 800cbb2:	3708      	adds	r7, #8
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}

0800cbb8 <tcp_debug_print_state>:
 *
 * @param s enum tcp_state to print
 */
void
tcp_debug_print_state(enum tcp_state s)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b082      	sub	sp, #8
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	71fb      	strb	r3, [r7, #7]
  LWIP_DEBUGF(TCP_DEBUG, ("State: %s\n", tcp_state_str[s]));
 800cbc2:	79fb      	ldrb	r3, [r7, #7]
 800cbc4:	4a05      	ldr	r2, [pc, #20]	@ (800cbdc <tcp_debug_print_state+0x24>)
 800cbc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbca:	4619      	mov	r1, r3
 800cbcc:	4804      	ldr	r0, [pc, #16]	@ (800cbe0 <tcp_debug_print_state+0x28>)
 800cbce:	f00a f875 	bl	8016cbc <iprintf>
}
 800cbd2:	bf00      	nop
 800cbd4:	3708      	adds	r7, #8
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	bf00      	nop
 800cbdc:	0801dbd4 	.word	0x0801dbd4
 800cbe0:	08019920 	.word	0x08019920

0800cbe4 <tcp_pcbs_sane>:
/**
 * Check state consistency of the tcp_pcb lists.
 */
s16_t
tcp_pcbs_sane(void)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b082      	sub	sp, #8
 800cbe8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cbea:	4b22      	ldr	r3, [pc, #136]	@ (800cc74 <tcp_pcbs_sane+0x90>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	607b      	str	r3, [r7, #4]
 800cbf0:	e023      	b.n	800cc3a <tcp_pcbs_sane+0x56>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != CLOSED", pcb->state != CLOSED);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	7d1b      	ldrb	r3, [r3, #20]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d106      	bne.n	800cc08 <tcp_pcbs_sane+0x24>
 800cbfa:	4b1f      	ldr	r3, [pc, #124]	@ (800cc78 <tcp_pcbs_sane+0x94>)
 800cbfc:	f640 12d9 	movw	r2, #2521	@ 0x9d9
 800cc00:	491e      	ldr	r1, [pc, #120]	@ (800cc7c <tcp_pcbs_sane+0x98>)
 800cc02:	481f      	ldr	r0, [pc, #124]	@ (800cc80 <tcp_pcbs_sane+0x9c>)
 800cc04:	f00a f85a 	bl	8016cbc <iprintf>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != LISTEN", pcb->state != LISTEN);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	7d1b      	ldrb	r3, [r3, #20]
 800cc0c:	2b01      	cmp	r3, #1
 800cc0e:	d106      	bne.n	800cc1e <tcp_pcbs_sane+0x3a>
 800cc10:	4b19      	ldr	r3, [pc, #100]	@ (800cc78 <tcp_pcbs_sane+0x94>)
 800cc12:	f640 12da 	movw	r2, #2522	@ 0x9da
 800cc16:	491b      	ldr	r1, [pc, #108]	@ (800cc84 <tcp_pcbs_sane+0xa0>)
 800cc18:	4819      	ldr	r0, [pc, #100]	@ (800cc80 <tcp_pcbs_sane+0x9c>)
 800cc1a:	f00a f84f 	bl	8016cbc <iprintf>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	7d1b      	ldrb	r3, [r3, #20]
 800cc22:	2b0a      	cmp	r3, #10
 800cc24:	d106      	bne.n	800cc34 <tcp_pcbs_sane+0x50>
 800cc26:	4b14      	ldr	r3, [pc, #80]	@ (800cc78 <tcp_pcbs_sane+0x94>)
 800cc28:	f640 12db 	movw	r2, #2523	@ 0x9db
 800cc2c:	4916      	ldr	r1, [pc, #88]	@ (800cc88 <tcp_pcbs_sane+0xa4>)
 800cc2e:	4814      	ldr	r0, [pc, #80]	@ (800cc80 <tcp_pcbs_sane+0x9c>)
 800cc30:	f00a f844 	bl	8016cbc <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	68db      	ldr	r3, [r3, #12]
 800cc38:	607b      	str	r3, [r7, #4]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d1d8      	bne.n	800cbf2 <tcp_pcbs_sane+0xe>
  }
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc40:	4b12      	ldr	r3, [pc, #72]	@ (800cc8c <tcp_pcbs_sane+0xa8>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	607b      	str	r3, [r7, #4]
 800cc46:	e00d      	b.n	800cc64 <tcp_pcbs_sane+0x80>
    LWIP_ASSERT("tcp_pcbs_sane: tw pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	7d1b      	ldrb	r3, [r3, #20]
 800cc4c:	2b0a      	cmp	r3, #10
 800cc4e:	d006      	beq.n	800cc5e <tcp_pcbs_sane+0x7a>
 800cc50:	4b09      	ldr	r3, [pc, #36]	@ (800cc78 <tcp_pcbs_sane+0x94>)
 800cc52:	f640 12de 	movw	r2, #2526	@ 0x9de
 800cc56:	490e      	ldr	r1, [pc, #56]	@ (800cc90 <tcp_pcbs_sane+0xac>)
 800cc58:	4809      	ldr	r0, [pc, #36]	@ (800cc80 <tcp_pcbs_sane+0x9c>)
 800cc5a:	f00a f82f 	bl	8016cbc <iprintf>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	607b      	str	r3, [r7, #4]
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d1ee      	bne.n	800cc48 <tcp_pcbs_sane+0x64>
  }
  return 1;
 800cc6a:	2301      	movs	r3, #1
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3708      	adds	r7, #8
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}
 800cc74:	240032fc 	.word	0x240032fc
 800cc78:	08018ba4 	.word	0x08018ba4
 800cc7c:	080199f8 	.word	0x080199f8
 800cc80:	08018be8 	.word	0x08018be8
 800cc84:	08019a24 	.word	0x08019a24
 800cc88:	08019a50 	.word	0x08019a50
 800cc8c:	24003300 	.word	0x24003300
 800cc90:	08019a80 	.word	0x08019a80

0800cc94 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800cc94:	b590      	push	{r4, r7, lr}
 800cc96:	b08d      	sub	sp, #52	@ 0x34
 800cc98:	af04      	add	r7, sp, #16
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d105      	bne.n	800ccb0 <tcp_input+0x1c>
 800cca4:	4b9b      	ldr	r3, [pc, #620]	@ (800cf14 <tcp_input+0x280>)
 800cca6:	2283      	movs	r2, #131	@ 0x83
 800cca8:	499b      	ldr	r1, [pc, #620]	@ (800cf18 <tcp_input+0x284>)
 800ccaa:	489c      	ldr	r0, [pc, #624]	@ (800cf1c <tcp_input+0x288>)
 800ccac:	f00a f806 	bl	8016cbc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	685b      	ldr	r3, [r3, #4]
 800ccb4:	4a9a      	ldr	r2, [pc, #616]	@ (800cf20 <tcp_input+0x28c>)
 800ccb6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	895b      	ldrh	r3, [r3, #10]
 800ccbc:	2b13      	cmp	r3, #19
 800ccbe:	f240 83dd 	bls.w	800d47c <tcp_input+0x7e8>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ccc2:	4b98      	ldr	r3, [pc, #608]	@ (800cf24 <tcp_input+0x290>)
 800ccc4:	695b      	ldr	r3, [r3, #20]
 800ccc6:	4a97      	ldr	r2, [pc, #604]	@ (800cf24 <tcp_input+0x290>)
 800ccc8:	6812      	ldr	r2, [r2, #0]
 800ccca:	4611      	mov	r1, r2
 800cccc:	4618      	mov	r0, r3
 800ccce:	f008 ff35 	bl	8015b3c <ip4_addr_isbroadcast_u32>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	f040 83d3 	bne.w	800d480 <tcp_input+0x7ec>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ccda:	4b92      	ldr	r3, [pc, #584]	@ (800cf24 <tcp_input+0x290>)
 800ccdc:	695b      	ldr	r3, [r3, #20]
 800ccde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cce2:	2be0      	cmp	r3, #224	@ 0xe0
 800cce4:	f000 83cc 	beq.w	800d480 <tcp_input+0x7ec>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800cce8:	4b8d      	ldr	r3, [pc, #564]	@ (800cf20 <tcp_input+0x28c>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	899b      	ldrh	r3, [r3, #12]
 800ccee:	b29b      	uxth	r3, r3
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f7fc fba1 	bl	8009438 <lwip_htons>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	0b1b      	lsrs	r3, r3, #12
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	b2db      	uxtb	r3, r3
 800ccfe:	009b      	lsls	r3, r3, #2
 800cd00:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800cd02:	7cbb      	ldrb	r3, [r7, #18]
 800cd04:	2b13      	cmp	r3, #19
 800cd06:	f240 83bd 	bls.w	800d484 <tcp_input+0x7f0>
 800cd0a:	7cbb      	ldrb	r3, [r7, #18]
 800cd0c:	b29a      	uxth	r2, r3
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	891b      	ldrh	r3, [r3, #8]
 800cd12:	429a      	cmp	r2, r3
 800cd14:	f200 83b6 	bhi.w	800d484 <tcp_input+0x7f0>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800cd18:	7cbb      	ldrb	r3, [r7, #18]
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	3b14      	subs	r3, #20
 800cd1e:	b29a      	uxth	r2, r3
 800cd20:	4b81      	ldr	r3, [pc, #516]	@ (800cf28 <tcp_input+0x294>)
 800cd22:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800cd24:	4b81      	ldr	r3, [pc, #516]	@ (800cf2c <tcp_input+0x298>)
 800cd26:	2200      	movs	r2, #0
 800cd28:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	895a      	ldrh	r2, [r3, #10]
 800cd2e:	7cbb      	ldrb	r3, [r7, #18]
 800cd30:	b29b      	uxth	r3, r3
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d309      	bcc.n	800cd4a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800cd36:	4b7c      	ldr	r3, [pc, #496]	@ (800cf28 <tcp_input+0x294>)
 800cd38:	881a      	ldrh	r2, [r3, #0]
 800cd3a:	4b7d      	ldr	r3, [pc, #500]	@ (800cf30 <tcp_input+0x29c>)
 800cd3c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800cd3e:	7cbb      	ldrb	r3, [r7, #18]
 800cd40:	4619      	mov	r1, r3
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f7fd ff68 	bl	800ac18 <pbuf_remove_header>
 800cd48:	e04e      	b.n	800cde8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d105      	bne.n	800cd5e <tcp_input+0xca>
 800cd52:	4b70      	ldr	r3, [pc, #448]	@ (800cf14 <tcp_input+0x280>)
 800cd54:	22c2      	movs	r2, #194	@ 0xc2
 800cd56:	4977      	ldr	r1, [pc, #476]	@ (800cf34 <tcp_input+0x2a0>)
 800cd58:	4870      	ldr	r0, [pc, #448]	@ (800cf1c <tcp_input+0x288>)
 800cd5a:	f009 ffaf 	bl	8016cbc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800cd5e:	2114      	movs	r1, #20
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f7fd ff59 	bl	800ac18 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	895a      	ldrh	r2, [r3, #10]
 800cd6a:	4b71      	ldr	r3, [pc, #452]	@ (800cf30 <tcp_input+0x29c>)
 800cd6c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800cd6e:	4b6e      	ldr	r3, [pc, #440]	@ (800cf28 <tcp_input+0x294>)
 800cd70:	881a      	ldrh	r2, [r3, #0]
 800cd72:	4b6f      	ldr	r3, [pc, #444]	@ (800cf30 <tcp_input+0x29c>)
 800cd74:	881b      	ldrh	r3, [r3, #0]
 800cd76:	1ad3      	subs	r3, r2, r3
 800cd78:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800cd7a:	4b6d      	ldr	r3, [pc, #436]	@ (800cf30 <tcp_input+0x29c>)
 800cd7c:	881b      	ldrh	r3, [r3, #0]
 800cd7e:	4619      	mov	r1, r3
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f7fd ff49 	bl	800ac18 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	895b      	ldrh	r3, [r3, #10]
 800cd8c:	8a3a      	ldrh	r2, [r7, #16]
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	f200 837a 	bhi.w	800d488 <tcp_input+0x7f4>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	685b      	ldr	r3, [r3, #4]
 800cd9a:	4a64      	ldr	r2, [pc, #400]	@ (800cf2c <tcp_input+0x298>)
 800cd9c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	8a3a      	ldrh	r2, [r7, #16]
 800cda4:	4611      	mov	r1, r2
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7fd ff36 	bl	800ac18 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	891a      	ldrh	r2, [r3, #8]
 800cdb0:	8a3b      	ldrh	r3, [r7, #16]
 800cdb2:	1ad3      	subs	r3, r2, r3
 800cdb4:	b29a      	uxth	r2, r3
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	895b      	ldrh	r3, [r3, #10]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d005      	beq.n	800cdce <tcp_input+0x13a>
 800cdc2:	4b54      	ldr	r3, [pc, #336]	@ (800cf14 <tcp_input+0x280>)
 800cdc4:	22df      	movs	r2, #223	@ 0xdf
 800cdc6:	495c      	ldr	r1, [pc, #368]	@ (800cf38 <tcp_input+0x2a4>)
 800cdc8:	4854      	ldr	r0, [pc, #336]	@ (800cf1c <tcp_input+0x288>)
 800cdca:	f009 ff77 	bl	8016cbc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	891a      	ldrh	r2, [r3, #8]
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	891b      	ldrh	r3, [r3, #8]
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d005      	beq.n	800cde8 <tcp_input+0x154>
 800cddc:	4b4d      	ldr	r3, [pc, #308]	@ (800cf14 <tcp_input+0x280>)
 800cdde:	22e0      	movs	r2, #224	@ 0xe0
 800cde0:	4956      	ldr	r1, [pc, #344]	@ (800cf3c <tcp_input+0x2a8>)
 800cde2:	484e      	ldr	r0, [pc, #312]	@ (800cf1c <tcp_input+0x288>)
 800cde4:	f009 ff6a 	bl	8016cbc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800cde8:	4b4d      	ldr	r3, [pc, #308]	@ (800cf20 <tcp_input+0x28c>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	881b      	ldrh	r3, [r3, #0]
 800cdee:	b29b      	uxth	r3, r3
 800cdf0:	4a4b      	ldr	r2, [pc, #300]	@ (800cf20 <tcp_input+0x28c>)
 800cdf2:	6814      	ldr	r4, [r2, #0]
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f7fc fb1f 	bl	8009438 <lwip_htons>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800cdfe:	4b48      	ldr	r3, [pc, #288]	@ (800cf20 <tcp_input+0x28c>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	885b      	ldrh	r3, [r3, #2]
 800ce04:	b29b      	uxth	r3, r3
 800ce06:	4a46      	ldr	r2, [pc, #280]	@ (800cf20 <tcp_input+0x28c>)
 800ce08:	6814      	ldr	r4, [r2, #0]
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7fc fb14 	bl	8009438 <lwip_htons>
 800ce10:	4603      	mov	r3, r0
 800ce12:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ce14:	4b42      	ldr	r3, [pc, #264]	@ (800cf20 <tcp_input+0x28c>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	685b      	ldr	r3, [r3, #4]
 800ce1a:	4a41      	ldr	r2, [pc, #260]	@ (800cf20 <tcp_input+0x28c>)
 800ce1c:	6814      	ldr	r4, [r2, #0]
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f7fc fb1f 	bl	8009462 <lwip_htonl>
 800ce24:	4603      	mov	r3, r0
 800ce26:	6063      	str	r3, [r4, #4]
 800ce28:	6863      	ldr	r3, [r4, #4]
 800ce2a:	4a45      	ldr	r2, [pc, #276]	@ (800cf40 <tcp_input+0x2ac>)
 800ce2c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ce2e:	4b3c      	ldr	r3, [pc, #240]	@ (800cf20 <tcp_input+0x28c>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	689b      	ldr	r3, [r3, #8]
 800ce34:	4a3a      	ldr	r2, [pc, #232]	@ (800cf20 <tcp_input+0x28c>)
 800ce36:	6814      	ldr	r4, [r2, #0]
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f7fc fb12 	bl	8009462 <lwip_htonl>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	60a3      	str	r3, [r4, #8]
 800ce42:	68a3      	ldr	r3, [r4, #8]
 800ce44:	4a3f      	ldr	r2, [pc, #252]	@ (800cf44 <tcp_input+0x2b0>)
 800ce46:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ce48:	4b35      	ldr	r3, [pc, #212]	@ (800cf20 <tcp_input+0x28c>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	89db      	ldrh	r3, [r3, #14]
 800ce4e:	b29b      	uxth	r3, r3
 800ce50:	4a33      	ldr	r2, [pc, #204]	@ (800cf20 <tcp_input+0x28c>)
 800ce52:	6814      	ldr	r4, [r2, #0]
 800ce54:	4618      	mov	r0, r3
 800ce56:	f7fc faef 	bl	8009438 <lwip_htons>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ce5e:	4b30      	ldr	r3, [pc, #192]	@ (800cf20 <tcp_input+0x28c>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	899b      	ldrh	r3, [r3, #12]
 800ce64:	b29b      	uxth	r3, r3
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7fc fae6 	bl	8009438 <lwip_htons>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	b2db      	uxtb	r3, r3
 800ce70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ce74:	b2da      	uxtb	r2, r3
 800ce76:	4b34      	ldr	r3, [pc, #208]	@ (800cf48 <tcp_input+0x2b4>)
 800ce78:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	891a      	ldrh	r2, [r3, #8]
 800ce7e:	4b33      	ldr	r3, [pc, #204]	@ (800cf4c <tcp_input+0x2b8>)
 800ce80:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ce82:	4b31      	ldr	r3, [pc, #196]	@ (800cf48 <tcp_input+0x2b4>)
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	f003 0303 	and.w	r3, r3, #3
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d00c      	beq.n	800cea8 <tcp_input+0x214>
    tcplen++;
 800ce8e:	4b2f      	ldr	r3, [pc, #188]	@ (800cf4c <tcp_input+0x2b8>)
 800ce90:	881b      	ldrh	r3, [r3, #0]
 800ce92:	3301      	adds	r3, #1
 800ce94:	b29a      	uxth	r2, r3
 800ce96:	4b2d      	ldr	r3, [pc, #180]	@ (800cf4c <tcp_input+0x2b8>)
 800ce98:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	891a      	ldrh	r2, [r3, #8]
 800ce9e:	4b2b      	ldr	r3, [pc, #172]	@ (800cf4c <tcp_input+0x2b8>)
 800cea0:	881b      	ldrh	r3, [r3, #0]
 800cea2:	429a      	cmp	r2, r3
 800cea4:	f200 82f2 	bhi.w	800d48c <tcp_input+0x7f8>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ceac:	4b28      	ldr	r3, [pc, #160]	@ (800cf50 <tcp_input+0x2bc>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	61bb      	str	r3, [r7, #24]
 800ceb2:	e09d      	b.n	800cff0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ceb4:	69bb      	ldr	r3, [r7, #24]
 800ceb6:	7d1b      	ldrb	r3, [r3, #20]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d105      	bne.n	800cec8 <tcp_input+0x234>
 800cebc:	4b15      	ldr	r3, [pc, #84]	@ (800cf14 <tcp_input+0x280>)
 800cebe:	22fb      	movs	r2, #251	@ 0xfb
 800cec0:	4924      	ldr	r1, [pc, #144]	@ (800cf54 <tcp_input+0x2c0>)
 800cec2:	4816      	ldr	r0, [pc, #88]	@ (800cf1c <tcp_input+0x288>)
 800cec4:	f009 fefa 	bl	8016cbc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800cec8:	69bb      	ldr	r3, [r7, #24]
 800ceca:	7d1b      	ldrb	r3, [r3, #20]
 800cecc:	2b0a      	cmp	r3, #10
 800cece:	d105      	bne.n	800cedc <tcp_input+0x248>
 800ced0:	4b10      	ldr	r3, [pc, #64]	@ (800cf14 <tcp_input+0x280>)
 800ced2:	22fc      	movs	r2, #252	@ 0xfc
 800ced4:	4920      	ldr	r1, [pc, #128]	@ (800cf58 <tcp_input+0x2c4>)
 800ced6:	4811      	ldr	r0, [pc, #68]	@ (800cf1c <tcp_input+0x288>)
 800ced8:	f009 fef0 	bl	8016cbc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800cedc:	69bb      	ldr	r3, [r7, #24]
 800cede:	7d1b      	ldrb	r3, [r3, #20]
 800cee0:	2b01      	cmp	r3, #1
 800cee2:	d105      	bne.n	800cef0 <tcp_input+0x25c>
 800cee4:	4b0b      	ldr	r3, [pc, #44]	@ (800cf14 <tcp_input+0x280>)
 800cee6:	22fd      	movs	r2, #253	@ 0xfd
 800cee8:	491c      	ldr	r1, [pc, #112]	@ (800cf5c <tcp_input+0x2c8>)
 800ceea:	480c      	ldr	r0, [pc, #48]	@ (800cf1c <tcp_input+0x288>)
 800ceec:	f009 fee6 	bl	8016cbc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cef0:	69bb      	ldr	r3, [r7, #24]
 800cef2:	7a1b      	ldrb	r3, [r3, #8]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d033      	beq.n	800cf60 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cef8:	69bb      	ldr	r3, [r7, #24]
 800cefa:	7a1a      	ldrb	r2, [r3, #8]
 800cefc:	4b09      	ldr	r3, [pc, #36]	@ (800cf24 <tcp_input+0x290>)
 800cefe:	685b      	ldr	r3, [r3, #4]
 800cf00:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cf04:	3301      	adds	r3, #1
 800cf06:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d029      	beq.n	800cf60 <tcp_input+0x2cc>
      prev = pcb;
 800cf0c:	69bb      	ldr	r3, [r7, #24]
 800cf0e:	61fb      	str	r3, [r7, #28]
      continue;
 800cf10:	e06b      	b.n	800cfea <tcp_input+0x356>
 800cf12:	bf00      	nop
 800cf14:	08019aac 	.word	0x08019aac
 800cf18:	08019ae0 	.word	0x08019ae0
 800cf1c:	08019af8 	.word	0x08019af8
 800cf20:	2400331c 	.word	0x2400331c
 800cf24:	24000360 	.word	0x24000360
 800cf28:	24003320 	.word	0x24003320
 800cf2c:	24003324 	.word	0x24003324
 800cf30:	24003322 	.word	0x24003322
 800cf34:	08019b20 	.word	0x08019b20
 800cf38:	08019b30 	.word	0x08019b30
 800cf3c:	08019b3c 	.word	0x08019b3c
 800cf40:	2400332c 	.word	0x2400332c
 800cf44:	24003330 	.word	0x24003330
 800cf48:	24003338 	.word	0x24003338
 800cf4c:	24003336 	.word	0x24003336
 800cf50:	240032fc 	.word	0x240032fc
 800cf54:	08019b5c 	.word	0x08019b5c
 800cf58:	08019b84 	.word	0x08019b84
 800cf5c:	08019bb0 	.word	0x08019bb0
    }

    if (pcb->remote_port == tcphdr->src &&
 800cf60:	69bb      	ldr	r3, [r7, #24]
 800cf62:	8b1a      	ldrh	r2, [r3, #24]
 800cf64:	4b72      	ldr	r3, [pc, #456]	@ (800d130 <tcp_input+0x49c>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	881b      	ldrh	r3, [r3, #0]
 800cf6a:	b29b      	uxth	r3, r3
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d13a      	bne.n	800cfe6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800cf70:	69bb      	ldr	r3, [r7, #24]
 800cf72:	8ada      	ldrh	r2, [r3, #22]
 800cf74:	4b6e      	ldr	r3, [pc, #440]	@ (800d130 <tcp_input+0x49c>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	885b      	ldrh	r3, [r3, #2]
 800cf7a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d132      	bne.n	800cfe6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cf80:	69bb      	ldr	r3, [r7, #24]
 800cf82:	685a      	ldr	r2, [r3, #4]
 800cf84:	4b6b      	ldr	r3, [pc, #428]	@ (800d134 <tcp_input+0x4a0>)
 800cf86:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	d12c      	bne.n	800cfe6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cf8c:	69bb      	ldr	r3, [r7, #24]
 800cf8e:	681a      	ldr	r2, [r3, #0]
 800cf90:	4b68      	ldr	r3, [pc, #416]	@ (800d134 <tcp_input+0x4a0>)
 800cf92:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d126      	bne.n	800cfe6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800cf98:	69bb      	ldr	r3, [r7, #24]
 800cf9a:	68db      	ldr	r3, [r3, #12]
 800cf9c:	69ba      	ldr	r2, [r7, #24]
 800cf9e:	429a      	cmp	r2, r3
 800cfa0:	d106      	bne.n	800cfb0 <tcp_input+0x31c>
 800cfa2:	4b65      	ldr	r3, [pc, #404]	@ (800d138 <tcp_input+0x4a4>)
 800cfa4:	f240 120d 	movw	r2, #269	@ 0x10d
 800cfa8:	4964      	ldr	r1, [pc, #400]	@ (800d13c <tcp_input+0x4a8>)
 800cfaa:	4865      	ldr	r0, [pc, #404]	@ (800d140 <tcp_input+0x4ac>)
 800cfac:	f009 fe86 	bl	8016cbc <iprintf>
      if (prev != NULL) {
 800cfb0:	69fb      	ldr	r3, [r7, #28]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d00a      	beq.n	800cfcc <tcp_input+0x338>
        prev->next = pcb->next;
 800cfb6:	69bb      	ldr	r3, [r7, #24]
 800cfb8:	68da      	ldr	r2, [r3, #12]
 800cfba:	69fb      	ldr	r3, [r7, #28]
 800cfbc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800cfbe:	4b61      	ldr	r3, [pc, #388]	@ (800d144 <tcp_input+0x4b0>)
 800cfc0:	681a      	ldr	r2, [r3, #0]
 800cfc2:	69bb      	ldr	r3, [r7, #24]
 800cfc4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800cfc6:	4a5f      	ldr	r2, [pc, #380]	@ (800d144 <tcp_input+0x4b0>)
 800cfc8:	69bb      	ldr	r3, [r7, #24]
 800cfca:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800cfcc:	69bb      	ldr	r3, [r7, #24]
 800cfce:	68db      	ldr	r3, [r3, #12]
 800cfd0:	69ba      	ldr	r2, [r7, #24]
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	d111      	bne.n	800cffa <tcp_input+0x366>
 800cfd6:	4b58      	ldr	r3, [pc, #352]	@ (800d138 <tcp_input+0x4a4>)
 800cfd8:	f240 1215 	movw	r2, #277	@ 0x115
 800cfdc:	495a      	ldr	r1, [pc, #360]	@ (800d148 <tcp_input+0x4b4>)
 800cfde:	4858      	ldr	r0, [pc, #352]	@ (800d140 <tcp_input+0x4ac>)
 800cfe0:	f009 fe6c 	bl	8016cbc <iprintf>
      break;
 800cfe4:	e009      	b.n	800cffa <tcp_input+0x366>
    }
    prev = pcb;
 800cfe6:	69bb      	ldr	r3, [r7, #24]
 800cfe8:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cfea:	69bb      	ldr	r3, [r7, #24]
 800cfec:	68db      	ldr	r3, [r3, #12]
 800cfee:	61bb      	str	r3, [r7, #24]
 800cff0:	69bb      	ldr	r3, [r7, #24]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	f47f af5e 	bne.w	800ceb4 <tcp_input+0x220>
 800cff8:	e000      	b.n	800cffc <tcp_input+0x368>
      break;
 800cffa:	bf00      	nop
  }

  if (pcb == NULL) {
 800cffc:	69bb      	ldr	r3, [r7, #24]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	f040 80aa 	bne.w	800d158 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d004:	4b51      	ldr	r3, [pc, #324]	@ (800d14c <tcp_input+0x4b8>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	61bb      	str	r3, [r7, #24]
 800d00a:	e03f      	b.n	800d08c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d00c:	69bb      	ldr	r3, [r7, #24]
 800d00e:	7d1b      	ldrb	r3, [r3, #20]
 800d010:	2b0a      	cmp	r3, #10
 800d012:	d006      	beq.n	800d022 <tcp_input+0x38e>
 800d014:	4b48      	ldr	r3, [pc, #288]	@ (800d138 <tcp_input+0x4a4>)
 800d016:	f240 121f 	movw	r2, #287	@ 0x11f
 800d01a:	494d      	ldr	r1, [pc, #308]	@ (800d150 <tcp_input+0x4bc>)
 800d01c:	4848      	ldr	r0, [pc, #288]	@ (800d140 <tcp_input+0x4ac>)
 800d01e:	f009 fe4d 	bl	8016cbc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d022:	69bb      	ldr	r3, [r7, #24]
 800d024:	7a1b      	ldrb	r3, [r3, #8]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d009      	beq.n	800d03e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d02a:	69bb      	ldr	r3, [r7, #24]
 800d02c:	7a1a      	ldrb	r2, [r3, #8]
 800d02e:	4b41      	ldr	r3, [pc, #260]	@ (800d134 <tcp_input+0x4a0>)
 800d030:	685b      	ldr	r3, [r3, #4]
 800d032:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d036:	3301      	adds	r3, #1
 800d038:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d03a:	429a      	cmp	r2, r3
 800d03c:	d122      	bne.n	800d084 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800d03e:	69bb      	ldr	r3, [r7, #24]
 800d040:	8b1a      	ldrh	r2, [r3, #24]
 800d042:	4b3b      	ldr	r3, [pc, #236]	@ (800d130 <tcp_input+0x49c>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	881b      	ldrh	r3, [r3, #0]
 800d048:	b29b      	uxth	r3, r3
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d11b      	bne.n	800d086 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800d04e:	69bb      	ldr	r3, [r7, #24]
 800d050:	8ada      	ldrh	r2, [r3, #22]
 800d052:	4b37      	ldr	r3, [pc, #220]	@ (800d130 <tcp_input+0x49c>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	885b      	ldrh	r3, [r3, #2]
 800d058:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d113      	bne.n	800d086 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d05e:	69bb      	ldr	r3, [r7, #24]
 800d060:	685a      	ldr	r2, [r3, #4]
 800d062:	4b34      	ldr	r3, [pc, #208]	@ (800d134 <tcp_input+0x4a0>)
 800d064:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800d066:	429a      	cmp	r2, r3
 800d068:	d10d      	bne.n	800d086 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d06a:	69bb      	ldr	r3, [r7, #24]
 800d06c:	681a      	ldr	r2, [r3, #0]
 800d06e:	4b31      	ldr	r3, [pc, #196]	@ (800d134 <tcp_input+0x4a0>)
 800d070:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d072:	429a      	cmp	r2, r3
 800d074:	d107      	bne.n	800d086 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800d076:	69b8      	ldr	r0, [r7, #24]
 800d078:	f000 fb7c 	bl	800d774 <tcp_timewait_input>
        }
        pbuf_free(p);
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f7fd fe59 	bl	800ad34 <pbuf_free>
        return;
 800d082:	e209      	b.n	800d498 <tcp_input+0x804>
        continue;
 800d084:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d086:	69bb      	ldr	r3, [r7, #24]
 800d088:	68db      	ldr	r3, [r3, #12]
 800d08a:	61bb      	str	r3, [r7, #24]
 800d08c:	69bb      	ldr	r3, [r7, #24]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d1bc      	bne.n	800d00c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800d092:	2300      	movs	r3, #0
 800d094:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d096:	4b2f      	ldr	r3, [pc, #188]	@ (800d154 <tcp_input+0x4c0>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	617b      	str	r3, [r7, #20]
 800d09c:	e02a      	b.n	800d0f4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	7a1b      	ldrb	r3, [r3, #8]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d00c      	beq.n	800d0c0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	7a1a      	ldrb	r2, [r3, #8]
 800d0aa:	4b22      	ldr	r3, [pc, #136]	@ (800d134 <tcp_input+0x4a0>)
 800d0ac:	685b      	ldr	r3, [r3, #4]
 800d0ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	d002      	beq.n	800d0c0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	61fb      	str	r3, [r7, #28]
        continue;
 800d0be:	e016      	b.n	800d0ee <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	8ada      	ldrh	r2, [r3, #22]
 800d0c4:	4b1a      	ldr	r3, [pc, #104]	@ (800d130 <tcp_input+0x49c>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	885b      	ldrh	r3, [r3, #2]
 800d0ca:	b29b      	uxth	r3, r3
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d10c      	bne.n	800d0ea <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	681a      	ldr	r2, [r3, #0]
 800d0d4:	4b17      	ldr	r3, [pc, #92]	@ (800d134 <tcp_input+0x4a0>)
 800d0d6:	695b      	ldr	r3, [r3, #20]
 800d0d8:	429a      	cmp	r2, r3
 800d0da:	d00f      	beq.n	800d0fc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d00d      	beq.n	800d0fe <tcp_input+0x46a>
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d009      	beq.n	800d0fe <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	68db      	ldr	r3, [r3, #12]
 800d0f2:	617b      	str	r3, [r7, #20]
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d1d1      	bne.n	800d09e <tcp_input+0x40a>
 800d0fa:	e000      	b.n	800d0fe <tcp_input+0x46a>
            break;
 800d0fc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d029      	beq.n	800d158 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d104:	69fb      	ldr	r3, [r7, #28]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d00a      	beq.n	800d120 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	68da      	ldr	r2, [r3, #12]
 800d10e:	69fb      	ldr	r3, [r7, #28]
 800d110:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d112:	4b10      	ldr	r3, [pc, #64]	@ (800d154 <tcp_input+0x4c0>)
 800d114:	681a      	ldr	r2, [r3, #0]
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d11a:	4a0e      	ldr	r2, [pc, #56]	@ (800d154 <tcp_input+0x4c0>)
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d120:	6978      	ldr	r0, [r7, #20]
 800d122:	f000 fa15 	bl	800d550 <tcp_listen_input>
      }
      pbuf_free(p);
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f7fd fe04 	bl	800ad34 <pbuf_free>
      return;
 800d12c:	e1b4      	b.n	800d498 <tcp_input+0x804>
 800d12e:	bf00      	nop
 800d130:	2400331c 	.word	0x2400331c
 800d134:	24000360 	.word	0x24000360
 800d138:	08019aac 	.word	0x08019aac
 800d13c:	08019bd8 	.word	0x08019bd8
 800d140:	08019af8 	.word	0x08019af8
 800d144:	240032fc 	.word	0x240032fc
 800d148:	08019c04 	.word	0x08019c04
 800d14c:	24003300 	.word	0x24003300
 800d150:	08019c30 	.word	0x08019c30
 800d154:	240032f8 	.word	0x240032f8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d158:	69bb      	ldr	r3, [r7, #24]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	f000 8158 	beq.w	800d410 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d160:	4b95      	ldr	r3, [pc, #596]	@ (800d3b8 <tcp_input+0x724>)
 800d162:	2200      	movs	r2, #0
 800d164:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	891a      	ldrh	r2, [r3, #8]
 800d16a:	4b93      	ldr	r3, [pc, #588]	@ (800d3b8 <tcp_input+0x724>)
 800d16c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d16e:	4a92      	ldr	r2, [pc, #584]	@ (800d3b8 <tcp_input+0x724>)
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d174:	4b91      	ldr	r3, [pc, #580]	@ (800d3bc <tcp_input+0x728>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	4a8f      	ldr	r2, [pc, #572]	@ (800d3b8 <tcp_input+0x724>)
 800d17a:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 800d17c:	4b90      	ldr	r3, [pc, #576]	@ (800d3c0 <tcp_input+0x72c>)
 800d17e:	2200      	movs	r2, #0
 800d180:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d182:	4b90      	ldr	r3, [pc, #576]	@ (800d3c4 <tcp_input+0x730>)
 800d184:	2200      	movs	r2, #0
 800d186:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d188:	4b8f      	ldr	r3, [pc, #572]	@ (800d3c8 <tcp_input+0x734>)
 800d18a:	2200      	movs	r2, #0
 800d18c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d18e:	4b8f      	ldr	r3, [pc, #572]	@ (800d3cc <tcp_input+0x738>)
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	f003 0308 	and.w	r3, r3, #8
 800d196:	2b00      	cmp	r3, #0
 800d198:	d006      	beq.n	800d1a8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	7b5b      	ldrb	r3, [r3, #13]
 800d19e:	f043 0301 	orr.w	r3, r3, #1
 800d1a2:	b2da      	uxtb	r2, r3
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d1a8:	69bb      	ldr	r3, [r7, #24]
 800d1aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d017      	beq.n	800d1e0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d1b0:	69b8      	ldr	r0, [r7, #24]
 800d1b2:	f7ff f853 	bl	800c25c <tcp_process_refused_data>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	f113 0f0d 	cmn.w	r3, #13
 800d1bc:	d007      	beq.n	800d1ce <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d1be:	69bb      	ldr	r3, [r7, #24]
 800d1c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d00c      	beq.n	800d1e0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d1c6:	4b82      	ldr	r3, [pc, #520]	@ (800d3d0 <tcp_input+0x73c>)
 800d1c8:	881b      	ldrh	r3, [r3, #0]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d008      	beq.n	800d1e0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d1ce:	69bb      	ldr	r3, [r7, #24]
 800d1d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	f040 80e3 	bne.w	800d39e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d1d8:	69b8      	ldr	r0, [r7, #24]
 800d1da:	f003 fa55 	bl	8010688 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d1de:	e0de      	b.n	800d39e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800d1e0:	4a7c      	ldr	r2, [pc, #496]	@ (800d3d4 <tcp_input+0x740>)
 800d1e2:	69bb      	ldr	r3, [r7, #24]
 800d1e4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d1e6:	69b8      	ldr	r0, [r7, #24]
 800d1e8:	f000 fb3e 	bl	800d868 <tcp_process>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d1f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d1f4:	f113 0f0d 	cmn.w	r3, #13
 800d1f8:	f000 80d3 	beq.w	800d3a2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800d1fc:	4b71      	ldr	r3, [pc, #452]	@ (800d3c4 <tcp_input+0x730>)
 800d1fe:	781b      	ldrb	r3, [r3, #0]
 800d200:	f003 0308 	and.w	r3, r3, #8
 800d204:	2b00      	cmp	r3, #0
 800d206:	d015      	beq.n	800d234 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d208:	69bb      	ldr	r3, [r7, #24]
 800d20a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d008      	beq.n	800d224 <tcp_input+0x590>
 800d212:	69bb      	ldr	r3, [r7, #24]
 800d214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d218:	69ba      	ldr	r2, [r7, #24]
 800d21a:	6912      	ldr	r2, [r2, #16]
 800d21c:	f06f 010d 	mvn.w	r1, #13
 800d220:	4610      	mov	r0, r2
 800d222:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d224:	69b9      	ldr	r1, [r7, #24]
 800d226:	486c      	ldr	r0, [pc, #432]	@ (800d3d8 <tcp_input+0x744>)
 800d228:	f7ff fb40 	bl	800c8ac <tcp_pcb_remove>
        tcp_free(pcb);
 800d22c:	69b8      	ldr	r0, [r7, #24]
 800d22e:	f7fe f85d 	bl	800b2ec <tcp_free>
 800d232:	e0da      	b.n	800d3ea <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800d234:	2300      	movs	r3, #0
 800d236:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d238:	4b63      	ldr	r3, [pc, #396]	@ (800d3c8 <tcp_input+0x734>)
 800d23a:	881b      	ldrh	r3, [r3, #0]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d01d      	beq.n	800d27c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d240:	4b61      	ldr	r3, [pc, #388]	@ (800d3c8 <tcp_input+0x734>)
 800d242:	881b      	ldrh	r3, [r3, #0]
 800d244:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d246:	69bb      	ldr	r3, [r7, #24]
 800d248:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d00a      	beq.n	800d266 <tcp_input+0x5d2>
 800d250:	69bb      	ldr	r3, [r7, #24]
 800d252:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d256:	69ba      	ldr	r2, [r7, #24]
 800d258:	6910      	ldr	r0, [r2, #16]
 800d25a:	89fa      	ldrh	r2, [r7, #14]
 800d25c:	69b9      	ldr	r1, [r7, #24]
 800d25e:	4798      	blx	r3
 800d260:	4603      	mov	r3, r0
 800d262:	74fb      	strb	r3, [r7, #19]
 800d264:	e001      	b.n	800d26a <tcp_input+0x5d6>
 800d266:	2300      	movs	r3, #0
 800d268:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d26a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d26e:	f113 0f0d 	cmn.w	r3, #13
 800d272:	f000 8098 	beq.w	800d3a6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d276:	4b54      	ldr	r3, [pc, #336]	@ (800d3c8 <tcp_input+0x734>)
 800d278:	2200      	movs	r2, #0
 800d27a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d27c:	69b8      	ldr	r0, [r7, #24]
 800d27e:	f000 f927 	bl	800d4d0 <tcp_input_delayed_close>
 800d282:	4603      	mov	r3, r0
 800d284:	2b00      	cmp	r3, #0
 800d286:	f040 8090 	bne.w	800d3aa <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d28a:	4b4d      	ldr	r3, [pc, #308]	@ (800d3c0 <tcp_input+0x72c>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d041      	beq.n	800d316 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d292:	69bb      	ldr	r3, [r7, #24]
 800d294:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d296:	2b00      	cmp	r3, #0
 800d298:	d006      	beq.n	800d2a8 <tcp_input+0x614>
 800d29a:	4b50      	ldr	r3, [pc, #320]	@ (800d3dc <tcp_input+0x748>)
 800d29c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800d2a0:	494f      	ldr	r1, [pc, #316]	@ (800d3e0 <tcp_input+0x74c>)
 800d2a2:	4850      	ldr	r0, [pc, #320]	@ (800d3e4 <tcp_input+0x750>)
 800d2a4:	f009 fd0a 	bl	8016cbc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d2a8:	69bb      	ldr	r3, [r7, #24]
 800d2aa:	8b5b      	ldrh	r3, [r3, #26]
 800d2ac:	f003 0310 	and.w	r3, r3, #16
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d008      	beq.n	800d2c6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d2b4:	4b42      	ldr	r3, [pc, #264]	@ (800d3c0 <tcp_input+0x72c>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f7fd fd3b 	bl	800ad34 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d2be:	69b8      	ldr	r0, [r7, #24]
 800d2c0:	f7fe fb06 	bl	800b8d0 <tcp_abort>
            goto aborted;
 800d2c4:	e091      	b.n	800d3ea <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d2c6:	69bb      	ldr	r3, [r7, #24]
 800d2c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d00c      	beq.n	800d2ea <tcp_input+0x656>
 800d2d0:	69bb      	ldr	r3, [r7, #24]
 800d2d2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d2d6:	69bb      	ldr	r3, [r7, #24]
 800d2d8:	6918      	ldr	r0, [r3, #16]
 800d2da:	4b39      	ldr	r3, [pc, #228]	@ (800d3c0 <tcp_input+0x72c>)
 800d2dc:	681a      	ldr	r2, [r3, #0]
 800d2de:	2300      	movs	r3, #0
 800d2e0:	69b9      	ldr	r1, [r7, #24]
 800d2e2:	47a0      	blx	r4
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	74fb      	strb	r3, [r7, #19]
 800d2e8:	e008      	b.n	800d2fc <tcp_input+0x668>
 800d2ea:	4b35      	ldr	r3, [pc, #212]	@ (800d3c0 <tcp_input+0x72c>)
 800d2ec:	681a      	ldr	r2, [r3, #0]
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	69b9      	ldr	r1, [r7, #24]
 800d2f2:	2000      	movs	r0, #0
 800d2f4:	f7ff f88a 	bl	800c40c <tcp_recv_null>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d2fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d300:	f113 0f0d 	cmn.w	r3, #13
 800d304:	d053      	beq.n	800d3ae <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d306:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d003      	beq.n	800d316 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d30e:	4b2c      	ldr	r3, [pc, #176]	@ (800d3c0 <tcp_input+0x72c>)
 800d310:	681a      	ldr	r2, [r3, #0]
 800d312:	69bb      	ldr	r3, [r7, #24]
 800d314:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d316:	4b2b      	ldr	r3, [pc, #172]	@ (800d3c4 <tcp_input+0x730>)
 800d318:	781b      	ldrb	r3, [r3, #0]
 800d31a:	f003 0320 	and.w	r3, r3, #32
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d030      	beq.n	800d384 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800d322:	69bb      	ldr	r3, [r7, #24]
 800d324:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d326:	2b00      	cmp	r3, #0
 800d328:	d009      	beq.n	800d33e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d32a:	69bb      	ldr	r3, [r7, #24]
 800d32c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d32e:	7b5a      	ldrb	r2, [r3, #13]
 800d330:	69bb      	ldr	r3, [r7, #24]
 800d332:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d334:	f042 0220 	orr.w	r2, r2, #32
 800d338:	b2d2      	uxtb	r2, r2
 800d33a:	735a      	strb	r2, [r3, #13]
 800d33c:	e022      	b.n	800d384 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d33e:	69bb      	ldr	r3, [r7, #24]
 800d340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d342:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d346:	d005      	beq.n	800d354 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800d348:	69bb      	ldr	r3, [r7, #24]
 800d34a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d34c:	3301      	adds	r3, #1
 800d34e:	b29a      	uxth	r2, r3
 800d350:	69bb      	ldr	r3, [r7, #24]
 800d352:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d354:	69bb      	ldr	r3, [r7, #24]
 800d356:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d00b      	beq.n	800d376 <tcp_input+0x6e2>
 800d35e:	69bb      	ldr	r3, [r7, #24]
 800d360:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d364:	69bb      	ldr	r3, [r7, #24]
 800d366:	6918      	ldr	r0, [r3, #16]
 800d368:	2300      	movs	r3, #0
 800d36a:	2200      	movs	r2, #0
 800d36c:	69b9      	ldr	r1, [r7, #24]
 800d36e:	47a0      	blx	r4
 800d370:	4603      	mov	r3, r0
 800d372:	74fb      	strb	r3, [r7, #19]
 800d374:	e001      	b.n	800d37a <tcp_input+0x6e6>
 800d376:	2300      	movs	r3, #0
 800d378:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d37a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d37e:	f113 0f0d 	cmn.w	r3, #13
 800d382:	d016      	beq.n	800d3b2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d384:	4b13      	ldr	r3, [pc, #76]	@ (800d3d4 <tcp_input+0x740>)
 800d386:	2200      	movs	r2, #0
 800d388:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d38a:	69b8      	ldr	r0, [r7, #24]
 800d38c:	f000 f8a0 	bl	800d4d0 <tcp_input_delayed_close>
 800d390:	4603      	mov	r3, r0
 800d392:	2b00      	cmp	r3, #0
 800d394:	d128      	bne.n	800d3e8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d396:	69b8      	ldr	r0, [r7, #24]
 800d398:	f002 fb60 	bl	800fa5c <tcp_output>
 800d39c:	e025      	b.n	800d3ea <tcp_input+0x756>
        goto aborted;
 800d39e:	bf00      	nop
 800d3a0:	e023      	b.n	800d3ea <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d3a2:	bf00      	nop
 800d3a4:	e021      	b.n	800d3ea <tcp_input+0x756>
              goto aborted;
 800d3a6:	bf00      	nop
 800d3a8:	e01f      	b.n	800d3ea <tcp_input+0x756>
          goto aborted;
 800d3aa:	bf00      	nop
 800d3ac:	e01d      	b.n	800d3ea <tcp_input+0x756>
            goto aborted;
 800d3ae:	bf00      	nop
 800d3b0:	e01b      	b.n	800d3ea <tcp_input+0x756>
              goto aborted;
 800d3b2:	bf00      	nop
 800d3b4:	e019      	b.n	800d3ea <tcp_input+0x756>
 800d3b6:	bf00      	nop
 800d3b8:	24003308 	.word	0x24003308
 800d3bc:	2400331c 	.word	0x2400331c
 800d3c0:	2400333c 	.word	0x2400333c
 800d3c4:	24003339 	.word	0x24003339
 800d3c8:	24003334 	.word	0x24003334
 800d3cc:	24003338 	.word	0x24003338
 800d3d0:	24003336 	.word	0x24003336
 800d3d4:	24003340 	.word	0x24003340
 800d3d8:	240032fc 	.word	0x240032fc
 800d3dc:	08019aac 	.word	0x08019aac
 800d3e0:	08019c60 	.word	0x08019c60
 800d3e4:	08019af8 	.word	0x08019af8
          goto aborted;
 800d3e8:	bf00      	nop
    tcp_input_pcb = NULL;
 800d3ea:	4b2d      	ldr	r3, [pc, #180]	@ (800d4a0 <tcp_input+0x80c>)
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d3f0:	4b2c      	ldr	r3, [pc, #176]	@ (800d4a4 <tcp_input+0x810>)
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800d3f6:	4b2c      	ldr	r3, [pc, #176]	@ (800d4a8 <tcp_input+0x814>)
 800d3f8:	685b      	ldr	r3, [r3, #4]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d031      	beq.n	800d462 <tcp_input+0x7ce>
      pbuf_free(inseg.p);
 800d3fe:	4b2a      	ldr	r3, [pc, #168]	@ (800d4a8 <tcp_input+0x814>)
 800d400:	685b      	ldr	r3, [r3, #4]
 800d402:	4618      	mov	r0, r3
 800d404:	f7fd fc96 	bl	800ad34 <pbuf_free>
      inseg.p = NULL;
 800d408:	4b27      	ldr	r3, [pc, #156]	@ (800d4a8 <tcp_input+0x814>)
 800d40a:	2200      	movs	r2, #0
 800d40c:	605a      	str	r2, [r3, #4]
 800d40e:	e028      	b.n	800d462 <tcp_input+0x7ce>
    }
  } else {
    /* If no matching PCB was found, send a TCP RST (reset) to the
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d410:	4b26      	ldr	r3, [pc, #152]	@ (800d4ac <tcp_input+0x818>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	899b      	ldrh	r3, [r3, #12]
 800d416:	b29b      	uxth	r3, r3
 800d418:	4618      	mov	r0, r3
 800d41a:	f7fc f80d 	bl	8009438 <lwip_htons>
 800d41e:	4603      	mov	r3, r0
 800d420:	b2db      	uxtb	r3, r3
 800d422:	f003 0304 	and.w	r3, r3, #4
 800d426:	2b00      	cmp	r3, #0
 800d428:	d118      	bne.n	800d45c <tcp_input+0x7c8>
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d42a:	4b21      	ldr	r3, [pc, #132]	@ (800d4b0 <tcp_input+0x81c>)
 800d42c:	6819      	ldr	r1, [r3, #0]
 800d42e:	4b21      	ldr	r3, [pc, #132]	@ (800d4b4 <tcp_input+0x820>)
 800d430:	881b      	ldrh	r3, [r3, #0]
 800d432:	461a      	mov	r2, r3
 800d434:	4b20      	ldr	r3, [pc, #128]	@ (800d4b8 <tcp_input+0x824>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d43a:	4b1c      	ldr	r3, [pc, #112]	@ (800d4ac <tcp_input+0x818>)
 800d43c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d43e:	885b      	ldrh	r3, [r3, #2]
 800d440:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d442:	4a1a      	ldr	r2, [pc, #104]	@ (800d4ac <tcp_input+0x818>)
 800d444:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d446:	8812      	ldrh	r2, [r2, #0]
 800d448:	b292      	uxth	r2, r2
 800d44a:	9202      	str	r2, [sp, #8]
 800d44c:	9301      	str	r3, [sp, #4]
 800d44e:	4b1b      	ldr	r3, [pc, #108]	@ (800d4bc <tcp_input+0x828>)
 800d450:	9300      	str	r3, [sp, #0]
 800d452:	4b1b      	ldr	r3, [pc, #108]	@ (800d4c0 <tcp_input+0x82c>)
 800d454:	4602      	mov	r2, r0
 800d456:	2000      	movs	r0, #0
 800d458:	f003 f8c0 	bl	80105dc <tcp_rst>
    }
    pbuf_free(p);
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f7fd fc69 	bl	800ad34 <pbuf_free>
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
 800d462:	f7ff fbbf 	bl	800cbe4 <tcp_pcbs_sane>
 800d466:	4603      	mov	r3, r0
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d114      	bne.n	800d496 <tcp_input+0x802>
 800d46c:	4b15      	ldr	r3, [pc, #84]	@ (800d4c4 <tcp_input+0x830>)
 800d46e:	f240 2249 	movw	r2, #585	@ 0x249
 800d472:	4915      	ldr	r1, [pc, #84]	@ (800d4c8 <tcp_input+0x834>)
 800d474:	4815      	ldr	r0, [pc, #84]	@ (800d4cc <tcp_input+0x838>)
 800d476:	f009 fc21 	bl	8016cbc <iprintf>
  PERF_STOP("tcp_input");
  return;
 800d47a:	e00c      	b.n	800d496 <tcp_input+0x802>
    goto dropped;
 800d47c:	bf00      	nop
 800d47e:	e006      	b.n	800d48e <tcp_input+0x7fa>
    goto dropped;
 800d480:	bf00      	nop
 800d482:	e004      	b.n	800d48e <tcp_input+0x7fa>
    goto dropped;
 800d484:	bf00      	nop
 800d486:	e002      	b.n	800d48e <tcp_input+0x7fa>
      goto dropped;
 800d488:	bf00      	nop
 800d48a:	e000      	b.n	800d48e <tcp_input+0x7fa>
      goto dropped;
 800d48c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f7fd fc50 	bl	800ad34 <pbuf_free>
 800d494:	e000      	b.n	800d498 <tcp_input+0x804>
  return;
 800d496:	bf00      	nop
}
 800d498:	3724      	adds	r7, #36	@ 0x24
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd90      	pop	{r4, r7, pc}
 800d49e:	bf00      	nop
 800d4a0:	24003340 	.word	0x24003340
 800d4a4:	2400333c 	.word	0x2400333c
 800d4a8:	24003308 	.word	0x24003308
 800d4ac:	2400331c 	.word	0x2400331c
 800d4b0:	24003330 	.word	0x24003330
 800d4b4:	24003336 	.word	0x24003336
 800d4b8:	2400332c 	.word	0x2400332c
 800d4bc:	24000370 	.word	0x24000370
 800d4c0:	24000374 	.word	0x24000374
 800d4c4:	08019aac 	.word	0x08019aac
 800d4c8:	08019c7c 	.word	0x08019c7c
 800d4cc:	08019af8 	.word	0x08019af8

0800d4d0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b082      	sub	sp, #8
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d106      	bne.n	800d4ec <tcp_input_delayed_close+0x1c>
 800d4de:	4b17      	ldr	r3, [pc, #92]	@ (800d53c <tcp_input_delayed_close+0x6c>)
 800d4e0:	f240 225a 	movw	r2, #602	@ 0x25a
 800d4e4:	4916      	ldr	r1, [pc, #88]	@ (800d540 <tcp_input_delayed_close+0x70>)
 800d4e6:	4817      	ldr	r0, [pc, #92]	@ (800d544 <tcp_input_delayed_close+0x74>)
 800d4e8:	f009 fbe8 	bl	8016cbc <iprintf>

  if (recv_flags & TF_CLOSED) {
 800d4ec:	4b16      	ldr	r3, [pc, #88]	@ (800d548 <tcp_input_delayed_close+0x78>)
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	f003 0310 	and.w	r3, r3, #16
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d01c      	beq.n	800d532 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	8b5b      	ldrh	r3, [r3, #26]
 800d4fc:	f003 0310 	and.w	r3, r3, #16
 800d500:	2b00      	cmp	r3, #0
 800d502:	d10d      	bne.n	800d520 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d008      	beq.n	800d520 <tcp_input_delayed_close+0x50>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d514:	687a      	ldr	r2, [r7, #4]
 800d516:	6912      	ldr	r2, [r2, #16]
 800d518:	f06f 010e 	mvn.w	r1, #14
 800d51c:	4610      	mov	r0, r2
 800d51e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d520:	6879      	ldr	r1, [r7, #4]
 800d522:	480a      	ldr	r0, [pc, #40]	@ (800d54c <tcp_input_delayed_close+0x7c>)
 800d524:	f7ff f9c2 	bl	800c8ac <tcp_pcb_remove>
    tcp_free(pcb);
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	f7fd fedf 	bl	800b2ec <tcp_free>
    return 1;
 800d52e:	2301      	movs	r3, #1
 800d530:	e000      	b.n	800d534 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800d532:	2300      	movs	r3, #0
}
 800d534:	4618      	mov	r0, r3
 800d536:	3708      	adds	r7, #8
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}
 800d53c:	08019aac 	.word	0x08019aac
 800d540:	08019c98 	.word	0x08019c98
 800d544:	08019af8 	.word	0x08019af8
 800d548:	24003339 	.word	0x24003339
 800d54c:	240032fc 	.word	0x240032fc

0800d550 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800d550:	b590      	push	{r4, r7, lr}
 800d552:	b08b      	sub	sp, #44	@ 0x2c
 800d554:	af04      	add	r7, sp, #16
 800d556:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800d558:	4b77      	ldr	r3, [pc, #476]	@ (800d738 <tcp_listen_input+0x1e8>)
 800d55a:	781b      	ldrb	r3, [r3, #0]
 800d55c:	f003 0304 	and.w	r3, r3, #4
 800d560:	2b00      	cmp	r3, #0
 800d562:	f040 80e2 	bne.w	800d72a <tcp_listen_input+0x1da>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d106      	bne.n	800d57a <tcp_listen_input+0x2a>
 800d56c:	4b73      	ldr	r3, [pc, #460]	@ (800d73c <tcp_listen_input+0x1ec>)
 800d56e:	f240 2281 	movw	r2, #641	@ 0x281
 800d572:	4973      	ldr	r1, [pc, #460]	@ (800d740 <tcp_listen_input+0x1f0>)
 800d574:	4873      	ldr	r0, [pc, #460]	@ (800d744 <tcp_listen_input+0x1f4>)
 800d576:	f009 fba1 	bl	8016cbc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800d57a:	4b6f      	ldr	r3, [pc, #444]	@ (800d738 <tcp_listen_input+0x1e8>)
 800d57c:	781b      	ldrb	r3, [r3, #0]
 800d57e:	f003 0310 	and.w	r3, r3, #16
 800d582:	2b00      	cmp	r3, #0
 800d584:	d019      	beq.n	800d5ba <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d586:	4b70      	ldr	r3, [pc, #448]	@ (800d748 <tcp_listen_input+0x1f8>)
 800d588:	6819      	ldr	r1, [r3, #0]
 800d58a:	4b70      	ldr	r3, [pc, #448]	@ (800d74c <tcp_listen_input+0x1fc>)
 800d58c:	881b      	ldrh	r3, [r3, #0]
 800d58e:	461a      	mov	r2, r3
 800d590:	4b6f      	ldr	r3, [pc, #444]	@ (800d750 <tcp_listen_input+0x200>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d596:	4b6f      	ldr	r3, [pc, #444]	@ (800d754 <tcp_listen_input+0x204>)
 800d598:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d59a:	885b      	ldrh	r3, [r3, #2]
 800d59c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d59e:	4a6d      	ldr	r2, [pc, #436]	@ (800d754 <tcp_listen_input+0x204>)
 800d5a0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d5a2:	8812      	ldrh	r2, [r2, #0]
 800d5a4:	b292      	uxth	r2, r2
 800d5a6:	9202      	str	r2, [sp, #8]
 800d5a8:	9301      	str	r3, [sp, #4]
 800d5aa:	4b6b      	ldr	r3, [pc, #428]	@ (800d758 <tcp_listen_input+0x208>)
 800d5ac:	9300      	str	r3, [sp, #0]
 800d5ae:	4b6b      	ldr	r3, [pc, #428]	@ (800d75c <tcp_listen_input+0x20c>)
 800d5b0:	4602      	mov	r2, r0
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f003 f812 	bl	80105dc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800d5b8:	e0b9      	b.n	800d72e <tcp_listen_input+0x1de>
  } else if (flags & TCP_SYN) {
 800d5ba:	4b5f      	ldr	r3, [pc, #380]	@ (800d738 <tcp_listen_input+0x1e8>)
 800d5bc:	781b      	ldrb	r3, [r3, #0]
 800d5be:	f003 0302 	and.w	r3, r3, #2
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	f000 80b3 	beq.w	800d72e <tcp_listen_input+0x1de>
    LWIP_DEBUGF(TCP_DEBUG, ("TCP connection request %"U16_F" -> %"U16_F".\n", tcphdr->src, tcphdr->dest));
 800d5c8:	4b62      	ldr	r3, [pc, #392]	@ (800d754 <tcp_listen_input+0x204>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	881b      	ldrh	r3, [r3, #0]
 800d5ce:	b29b      	uxth	r3, r3
 800d5d0:	4619      	mov	r1, r3
 800d5d2:	4b60      	ldr	r3, [pc, #384]	@ (800d754 <tcp_listen_input+0x204>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	885b      	ldrh	r3, [r3, #2]
 800d5d8:	b29b      	uxth	r3, r3
 800d5da:	461a      	mov	r2, r3
 800d5dc:	4860      	ldr	r0, [pc, #384]	@ (800d760 <tcp_listen_input+0x210>)
 800d5de:	f009 fb6d 	bl	8016cbc <iprintf>
    npcb = tcp_alloc(pcb->prio);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	7d5b      	ldrb	r3, [r3, #21]
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f7ff f854 	bl	800c694 <tcp_alloc>
 800d5ec:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d114      	bne.n	800d61e <tcp_listen_input+0xce>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: could not allocate PCB\n"));
 800d5f4:	485b      	ldr	r0, [pc, #364]	@ (800d764 <tcp_listen_input+0x214>)
 800d5f6:	f009 fbd1 	bl	8016d9c <puts>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	699b      	ldr	r3, [r3, #24]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d00a      	beq.n	800d618 <tcp_listen_input+0xc8>
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	699b      	ldr	r3, [r3, #24]
 800d606:	687a      	ldr	r2, [r7, #4]
 800d608:	6910      	ldr	r0, [r2, #16]
 800d60a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d60e:	2100      	movs	r1, #0
 800d610:	4798      	blx	r3
 800d612:	4603      	mov	r3, r0
 800d614:	73bb      	strb	r3, [r7, #14]
      return;
 800d616:	e08b      	b.n	800d730 <tcp_listen_input+0x1e0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d618:	23f0      	movs	r3, #240	@ 0xf0
 800d61a:	73bb      	strb	r3, [r7, #14]
      return;
 800d61c:	e088      	b.n	800d730 <tcp_listen_input+0x1e0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d61e:	4b52      	ldr	r3, [pc, #328]	@ (800d768 <tcp_listen_input+0x218>)
 800d620:	695a      	ldr	r2, [r3, #20]
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d626:	4b50      	ldr	r3, [pc, #320]	@ (800d768 <tcp_listen_input+0x218>)
 800d628:	691a      	ldr	r2, [r3, #16]
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	8ada      	ldrh	r2, [r3, #22]
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800d636:	4b47      	ldr	r3, [pc, #284]	@ (800d754 <tcp_listen_input+0x204>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	881b      	ldrh	r3, [r3, #0]
 800d63c:	b29a      	uxth	r2, r3
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	2203      	movs	r2, #3
 800d646:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800d648:	4b41      	ldr	r3, [pc, #260]	@ (800d750 <tcp_listen_input+0x200>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	1c5a      	adds	r2, r3, #1
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800d65a:	6978      	ldr	r0, [r7, #20]
 800d65c:	f7ff f9c8 	bl	800c9f0 <tcp_next_iss>
 800d660:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	693a      	ldr	r2, [r7, #16]
 800d666:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	693a      	ldr	r2, [r7, #16]
 800d66c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	693a      	ldr	r2, [r7, #16]
 800d672:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800d674:	697b      	ldr	r3, [r7, #20]
 800d676:	693a      	ldr	r2, [r7, #16]
 800d678:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d67a:	4b35      	ldr	r3, [pc, #212]	@ (800d750 <tcp_listen_input+0x200>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	1e5a      	subs	r2, r3, #1
 800d680:	697b      	ldr	r3, [r7, #20]
 800d682:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	691a      	ldr	r2, [r3, #16]
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	687a      	ldr	r2, [r7, #4]
 800d690:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	7a5b      	ldrb	r3, [r3, #9]
 800d696:	f003 030c 	and.w	r3, r3, #12
 800d69a:	b2da      	uxtb	r2, r3
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	7a1a      	ldrb	r2, [r3, #8]
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800d6a8:	4b30      	ldr	r3, [pc, #192]	@ (800d76c <tcp_listen_input+0x21c>)
 800d6aa:	681a      	ldr	r2, [r3, #0]
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	60da      	str	r2, [r3, #12]
 800d6b0:	4a2e      	ldr	r2, [pc, #184]	@ (800d76c <tcp_listen_input+0x21c>)
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	6013      	str	r3, [r2, #0]
 800d6b6:	f003 f9db 	bl	8010a70 <tcp_timer_needed>
 800d6ba:	4b2d      	ldr	r3, [pc, #180]	@ (800d770 <tcp_listen_input+0x220>)
 800d6bc:	2201      	movs	r2, #1
 800d6be:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800d6c0:	6978      	ldr	r0, [r7, #20]
 800d6c2:	f001 fdff 	bl	800f2c4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800d6c6:	4b23      	ldr	r3, [pc, #140]	@ (800d754 <tcp_listen_input+0x204>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	89db      	ldrh	r3, [r3, #14]
 800d6cc:	b29a      	uxth	r2, r3
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d6e0:	697b      	ldr	r3, [r7, #20]
 800d6e2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	3304      	adds	r3, #4
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f007 fda7 	bl	801523c <ip4_route>
 800d6ee:	4601      	mov	r1, r0
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	3304      	adds	r3, #4
 800d6f4:	461a      	mov	r2, r3
 800d6f6:	4620      	mov	r0, r4
 800d6f8:	f7ff f9a0 	bl	800ca3c <tcp_eff_send_mss_netif>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	461a      	mov	r2, r3
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d704:	2112      	movs	r1, #18
 800d706:	6978      	ldr	r0, [r7, #20]
 800d708:	f002 f8ba 	bl	800f880 <tcp_enqueue_flags>
 800d70c:	4603      	mov	r3, r0
 800d70e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800d710:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d004      	beq.n	800d722 <tcp_listen_input+0x1d2>
      tcp_abandon(npcb, 0);
 800d718:	2100      	movs	r1, #0
 800d71a:	6978      	ldr	r0, [r7, #20]
 800d71c:	f7fe f81a 	bl	800b754 <tcp_abandon>
      return;
 800d720:	e006      	b.n	800d730 <tcp_listen_input+0x1e0>
    tcp_output(npcb);
 800d722:	6978      	ldr	r0, [r7, #20]
 800d724:	f002 f99a 	bl	800fa5c <tcp_output>
  return;
 800d728:	e001      	b.n	800d72e <tcp_listen_input+0x1de>
    return;
 800d72a:	bf00      	nop
 800d72c:	e000      	b.n	800d730 <tcp_listen_input+0x1e0>
  return;
 800d72e:	bf00      	nop
}
 800d730:	371c      	adds	r7, #28
 800d732:	46bd      	mov	sp, r7
 800d734:	bd90      	pop	{r4, r7, pc}
 800d736:	bf00      	nop
 800d738:	24003338 	.word	0x24003338
 800d73c:	08019aac 	.word	0x08019aac
 800d740:	08019cc0 	.word	0x08019cc0
 800d744:	08019af8 	.word	0x08019af8
 800d748:	24003330 	.word	0x24003330
 800d74c:	24003336 	.word	0x24003336
 800d750:	2400332c 	.word	0x2400332c
 800d754:	2400331c 	.word	0x2400331c
 800d758:	24000370 	.word	0x24000370
 800d75c:	24000374 	.word	0x24000374
 800d760:	08019ce0 	.word	0x08019ce0
 800d764:	08019d04 	.word	0x08019d04
 800d768:	24000360 	.word	0x24000360
 800d76c:	240032fc 	.word	0x240032fc
 800d770:	24003304 	.word	0x24003304

0800d774 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b086      	sub	sp, #24
 800d778:	af04      	add	r7, sp, #16
 800d77a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800d77c:	4b2f      	ldr	r3, [pc, #188]	@ (800d83c <tcp_timewait_input+0xc8>)
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	f003 0304 	and.w	r3, r3, #4
 800d784:	2b00      	cmp	r3, #0
 800d786:	d153      	bne.n	800d830 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d106      	bne.n	800d79c <tcp_timewait_input+0x28>
 800d78e:	4b2c      	ldr	r3, [pc, #176]	@ (800d840 <tcp_timewait_input+0xcc>)
 800d790:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800d794:	492b      	ldr	r1, [pc, #172]	@ (800d844 <tcp_timewait_input+0xd0>)
 800d796:	482c      	ldr	r0, [pc, #176]	@ (800d848 <tcp_timewait_input+0xd4>)
 800d798:	f009 fa90 	bl	8016cbc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800d79c:	4b27      	ldr	r3, [pc, #156]	@ (800d83c <tcp_timewait_input+0xc8>)
 800d79e:	781b      	ldrb	r3, [r3, #0]
 800d7a0:	f003 0302 	and.w	r3, r3, #2
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d02a      	beq.n	800d7fe <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800d7a8:	4b28      	ldr	r3, [pc, #160]	@ (800d84c <tcp_timewait_input+0xd8>)
 800d7aa:	681a      	ldr	r2, [r3, #0]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7b0:	1ad3      	subs	r3, r2, r3
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	db2d      	blt.n	800d812 <tcp_timewait_input+0x9e>
 800d7b6:	4b25      	ldr	r3, [pc, #148]	@ (800d84c <tcp_timewait_input+0xd8>)
 800d7b8:	681a      	ldr	r2, [r3, #0]
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7be:	6879      	ldr	r1, [r7, #4]
 800d7c0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d7c2:	440b      	add	r3, r1
 800d7c4:	1ad3      	subs	r3, r2, r3
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	dc23      	bgt.n	800d812 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d7ca:	4b21      	ldr	r3, [pc, #132]	@ (800d850 <tcp_timewait_input+0xdc>)
 800d7cc:	6819      	ldr	r1, [r3, #0]
 800d7ce:	4b21      	ldr	r3, [pc, #132]	@ (800d854 <tcp_timewait_input+0xe0>)
 800d7d0:	881b      	ldrh	r3, [r3, #0]
 800d7d2:	461a      	mov	r2, r3
 800d7d4:	4b1d      	ldr	r3, [pc, #116]	@ (800d84c <tcp_timewait_input+0xd8>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d7da:	4b1f      	ldr	r3, [pc, #124]	@ (800d858 <tcp_timewait_input+0xe4>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d7de:	885b      	ldrh	r3, [r3, #2]
 800d7e0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d7e2:	4a1d      	ldr	r2, [pc, #116]	@ (800d858 <tcp_timewait_input+0xe4>)
 800d7e4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d7e6:	8812      	ldrh	r2, [r2, #0]
 800d7e8:	b292      	uxth	r2, r2
 800d7ea:	9202      	str	r2, [sp, #8]
 800d7ec:	9301      	str	r3, [sp, #4]
 800d7ee:	4b1b      	ldr	r3, [pc, #108]	@ (800d85c <tcp_timewait_input+0xe8>)
 800d7f0:	9300      	str	r3, [sp, #0]
 800d7f2:	4b1b      	ldr	r3, [pc, #108]	@ (800d860 <tcp_timewait_input+0xec>)
 800d7f4:	4602      	mov	r2, r0
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f002 fef0 	bl	80105dc <tcp_rst>
      return;
 800d7fc:	e01b      	b.n	800d836 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800d7fe:	4b0f      	ldr	r3, [pc, #60]	@ (800d83c <tcp_timewait_input+0xc8>)
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	f003 0301 	and.w	r3, r3, #1
 800d806:	2b00      	cmp	r3, #0
 800d808:	d003      	beq.n	800d812 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800d80a:	4b16      	ldr	r3, [pc, #88]	@ (800d864 <tcp_timewait_input+0xf0>)
 800d80c:	681a      	ldr	r2, [r3, #0]
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800d812:	4b10      	ldr	r3, [pc, #64]	@ (800d854 <tcp_timewait_input+0xe0>)
 800d814:	881b      	ldrh	r3, [r3, #0]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d00c      	beq.n	800d834 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	8b5b      	ldrh	r3, [r3, #26]
 800d81e:	f043 0302 	orr.w	r3, r3, #2
 800d822:	b29a      	uxth	r2, r3
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f002 f917 	bl	800fa5c <tcp_output>
  }
  return;
 800d82e:	e001      	b.n	800d834 <tcp_timewait_input+0xc0>
    return;
 800d830:	bf00      	nop
 800d832:	e000      	b.n	800d836 <tcp_timewait_input+0xc2>
  return;
 800d834:	bf00      	nop
}
 800d836:	3708      	adds	r7, #8
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}
 800d83c:	24003338 	.word	0x24003338
 800d840:	08019aac 	.word	0x08019aac
 800d844:	08019d30 	.word	0x08019d30
 800d848:	08019af8 	.word	0x08019af8
 800d84c:	2400332c 	.word	0x2400332c
 800d850:	24003330 	.word	0x24003330
 800d854:	24003336 	.word	0x24003336
 800d858:	2400331c 	.word	0x2400331c
 800d85c:	24000370 	.word	0x24000370
 800d860:	24000374 	.word	0x24000374
 800d864:	240032f0 	.word	0x240032f0

0800d868 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800d868:	b590      	push	{r4, r7, lr}
 800d86a:	b08d      	sub	sp, #52	@ 0x34
 800d86c:	af04      	add	r7, sp, #16
 800d86e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800d870:	2300      	movs	r3, #0
 800d872:	73fb      	strb	r3, [r7, #15]
  err_t err;

  err = ERR_OK;
 800d874:	2300      	movs	r3, #0
 800d876:	73bb      	strb	r3, [r7, #14]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d106      	bne.n	800d88c <tcp_process+0x24>
 800d87e:	4b88      	ldr	r3, [pc, #544]	@ (800daa0 <tcp_process+0x238>)
 800d880:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800d884:	4987      	ldr	r1, [pc, #540]	@ (800daa4 <tcp_process+0x23c>)
 800d886:	4888      	ldr	r0, [pc, #544]	@ (800daa8 <tcp_process+0x240>)
 800d888:	f009 fa18 	bl	8016cbc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800d88c:	4b87      	ldr	r3, [pc, #540]	@ (800daac <tcp_process+0x244>)
 800d88e:	781b      	ldrb	r3, [r3, #0]
 800d890:	f003 0304 	and.w	r3, r3, #4
 800d894:	2b00      	cmp	r3, #0
 800d896:	d056      	beq.n	800d946 <tcp_process+0xde>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	7d1b      	ldrb	r3, [r3, #20]
 800d89c:	2b02      	cmp	r3, #2
 800d89e:	d108      	bne.n	800d8b2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d8a4:	4b82      	ldr	r3, [pc, #520]	@ (800dab0 <tcp_process+0x248>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d123      	bne.n	800d8f4 <tcp_process+0x8c>
        acceptable = 1;
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	73fb      	strb	r3, [r7, #15]
 800d8b0:	e020      	b.n	800d8f4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d8b6:	4b7f      	ldr	r3, [pc, #508]	@ (800dab4 <tcp_process+0x24c>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d102      	bne.n	800d8c4 <tcp_process+0x5c>
        acceptable = 1;
 800d8be:	2301      	movs	r3, #1
 800d8c0:	73fb      	strb	r3, [r7, #15]
 800d8c2:	e017      	b.n	800d8f4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d8c4:	4b7b      	ldr	r3, [pc, #492]	@ (800dab4 <tcp_process+0x24c>)
 800d8c6:	681a      	ldr	r2, [r3, #0]
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8cc:	1ad3      	subs	r3, r2, r3
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	db10      	blt.n	800d8f4 <tcp_process+0x8c>
 800d8d2:	4b78      	ldr	r3, [pc, #480]	@ (800dab4 <tcp_process+0x24c>)
 800d8d4:	681a      	ldr	r2, [r3, #0]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8da:	6879      	ldr	r1, [r7, #4]
 800d8dc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d8de:	440b      	add	r3, r1
 800d8e0:	1ad3      	subs	r3, r2, r3
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	dc06      	bgt.n	800d8f4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	8b5b      	ldrh	r3, [r3, #26]
 800d8ea:	f043 0302 	orr.w	r3, r3, #2
 800d8ee:	b29a      	uxth	r2, r3
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800d8f4:	7bfb      	ldrb	r3, [r7, #15]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d01b      	beq.n	800d932 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	7d1b      	ldrb	r3, [r3, #20]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d106      	bne.n	800d910 <tcp_process+0xa8>
 800d902:	4b67      	ldr	r3, [pc, #412]	@ (800daa0 <tcp_process+0x238>)
 800d904:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800d908:	496b      	ldr	r1, [pc, #428]	@ (800dab8 <tcp_process+0x250>)
 800d90a:	4867      	ldr	r0, [pc, #412]	@ (800daa8 <tcp_process+0x240>)
 800d90c:	f009 f9d6 	bl	8016cbc <iprintf>
      recv_flags |= TF_RESET;
 800d910:	4b6a      	ldr	r3, [pc, #424]	@ (800dabc <tcp_process+0x254>)
 800d912:	781b      	ldrb	r3, [r3, #0]
 800d914:	f043 0308 	orr.w	r3, r3, #8
 800d918:	b2da      	uxtb	r2, r3
 800d91a:	4b68      	ldr	r3, [pc, #416]	@ (800dabc <tcp_process+0x254>)
 800d91c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	8b5b      	ldrh	r3, [r3, #26]
 800d922:	f023 0301 	bic.w	r3, r3, #1
 800d926:	b29a      	uxth	r2, r3
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800d92c:	f06f 030d 	mvn.w	r3, #13
 800d930:	e3e3      	b.n	800e0fa <tcp_process+0x892>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
 800d932:	4b60      	ldr	r3, [pc, #384]	@ (800dab4 <tcp_process+0x24c>)
 800d934:	6819      	ldr	r1, [r3, #0]
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d93a:	461a      	mov	r2, r3
 800d93c:	4860      	ldr	r0, [pc, #384]	@ (800dac0 <tcp_process+0x258>)
 800d93e:	f009 f9bd 	bl	8016cbc <iprintf>
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800d942:	2300      	movs	r3, #0
 800d944:	e3d9      	b.n	800e0fa <tcp_process+0x892>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d946:	4b59      	ldr	r3, [pc, #356]	@ (800daac <tcp_process+0x244>)
 800d948:	781b      	ldrb	r3, [r3, #0]
 800d94a:	f003 0302 	and.w	r3, r3, #2
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d010      	beq.n	800d974 <tcp_process+0x10c>
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	7d1b      	ldrb	r3, [r3, #20]
 800d956:	2b02      	cmp	r3, #2
 800d958:	d00c      	beq.n	800d974 <tcp_process+0x10c>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	7d1b      	ldrb	r3, [r3, #20]
 800d95e:	2b03      	cmp	r3, #3
 800d960:	d008      	beq.n	800d974 <tcp_process+0x10c>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	8b5b      	ldrh	r3, [r3, #26]
 800d966:	f043 0302 	orr.w	r3, r3, #2
 800d96a:	b29a      	uxth	r2, r3
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800d970:	2300      	movs	r3, #0
 800d972:	e3c2      	b.n	800e0fa <tcp_process+0x892>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	8b5b      	ldrh	r3, [r3, #26]
 800d978:	f003 0310 	and.w	r3, r3, #16
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d103      	bne.n	800d988 <tcp_process+0x120>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800d980:	4b50      	ldr	r3, [pc, #320]	@ (800dac4 <tcp_process+0x25c>)
 800d982:	681a      	ldr	r2, [r3, #0]
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2200      	movs	r2, #0
 800d98c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2200      	movs	r2, #0
 800d994:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f001 fc93 	bl	800f2c4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	7d1b      	ldrb	r3, [r3, #20]
 800d9a2:	3b02      	subs	r3, #2
 800d9a4:	2b07      	cmp	r3, #7
 800d9a6:	f200 8398 	bhi.w	800e0da <tcp_process+0x872>
 800d9aa:	a201      	add	r2, pc, #4	@ (adr r2, 800d9b0 <tcp_process+0x148>)
 800d9ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9b0:	0800d9d1 	.word	0x0800d9d1
 800d9b4:	0800dbfb 	.word	0x0800dbfb
 800d9b8:	0800ddd1 	.word	0x0800ddd1
 800d9bc:	0800ddfb 	.word	0x0800ddfb
 800d9c0:	0800df03 	.word	0x0800df03
 800d9c4:	0800ddd1 	.word	0x0800ddd1
 800d9c8:	0800dfe1 	.word	0x0800dfe1
 800d9cc:	0800e08b 	.word	0x0800e08b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d9d0:	4b36      	ldr	r3, [pc, #216]	@ (800daac <tcp_process+0x244>)
 800d9d2:	781b      	ldrb	r3, [r3, #0]
 800d9d4:	f003 0310 	and.w	r3, r3, #16
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	f000 80e1 	beq.w	800dba0 <tcp_process+0x338>
 800d9de:	4b33      	ldr	r3, [pc, #204]	@ (800daac <tcp_process+0x244>)
 800d9e0:	781b      	ldrb	r3, [r3, #0]
 800d9e2:	f003 0302 	and.w	r3, r3, #2
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	f000 80da 	beq.w	800dba0 <tcp_process+0x338>
          && (ackno == pcb->lastack + 1)) {
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9f0:	1c5a      	adds	r2, r3, #1
 800d9f2:	4b2f      	ldr	r3, [pc, #188]	@ (800dab0 <tcp_process+0x248>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	f040 80d2 	bne.w	800dba0 <tcp_process+0x338>
        pcb->rcv_nxt = seqno + 1;
 800d9fc:	4b2d      	ldr	r3, [pc, #180]	@ (800dab4 <tcp_process+0x24c>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	1c5a      	adds	r2, r3, #1
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800da0e:	4b28      	ldr	r3, [pc, #160]	@ (800dab0 <tcp_process+0x248>)
 800da10:	681a      	ldr	r2, [r3, #0]
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800da16:	4b2c      	ldr	r3, [pc, #176]	@ (800dac8 <tcp_process+0x260>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	89db      	ldrh	r3, [r3, #14]
 800da1c:	b29a      	uxth	r2, r3
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800da30:	4b20      	ldr	r3, [pc, #128]	@ (800dab4 <tcp_process+0x24c>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	1e5a      	subs	r2, r3, #1
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2204      	movs	r2, #4
 800da3e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	3304      	adds	r3, #4
 800da48:	4618      	mov	r0, r3
 800da4a:	f007 fbf7 	bl	801523c <ip4_route>
 800da4e:	4601      	mov	r1, r0
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	3304      	adds	r3, #4
 800da54:	461a      	mov	r2, r3
 800da56:	4620      	mov	r0, r4
 800da58:	f7fe fff0 	bl	800ca3c <tcp_eff_send_mss_netif>
 800da5c:	4603      	mov	r3, r0
 800da5e:	461a      	mov	r2, r3
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800da68:	009a      	lsls	r2, r3, #2
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800da6e:	005b      	lsls	r3, r3, #1
 800da70:	f241 111c 	movw	r1, #4380	@ 0x111c
 800da74:	428b      	cmp	r3, r1
 800da76:	bf38      	it	cc
 800da78:	460b      	movcc	r3, r1
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d204      	bcs.n	800da88 <tcp_process+0x220>
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800da82:	009b      	lsls	r3, r3, #2
 800da84:	b29b      	uxth	r3, r3
 800da86:	e023      	b.n	800dad0 <tcp_process+0x268>
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800da8c:	005b      	lsls	r3, r3, #1
 800da8e:	f241 121c 	movw	r2, #4380	@ 0x111c
 800da92:	4293      	cmp	r3, r2
 800da94:	d91a      	bls.n	800dacc <tcp_process+0x264>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800da9a:	005b      	lsls	r3, r3, #1
 800da9c:	b29b      	uxth	r3, r3
 800da9e:	e017      	b.n	800dad0 <tcp_process+0x268>
 800daa0:	08019aac 	.word	0x08019aac
 800daa4:	08019d50 	.word	0x08019d50
 800daa8:	08019af8 	.word	0x08019af8
 800daac:	24003338 	.word	0x24003338
 800dab0:	24003330 	.word	0x24003330
 800dab4:	2400332c 	.word	0x2400332c
 800dab8:	08019d6c 	.word	0x08019d6c
 800dabc:	24003339 	.word	0x24003339
 800dac0:	08019d8c 	.word	0x08019d8c
 800dac4:	240032f0 	.word	0x240032f0
 800dac8:	2400331c 	.word	0x2400331c
 800dacc:	f241 131c 	movw	r3, #4380	@ 0x111c
 800dad0:	687a      	ldr	r2, [r7, #4]
 800dad2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d106      	bne.n	800daee <tcp_process+0x286>
 800dae0:	4b94      	ldr	r3, [pc, #592]	@ (800dd34 <tcp_process+0x4cc>)
 800dae2:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800dae6:	4994      	ldr	r1, [pc, #592]	@ (800dd38 <tcp_process+0x4d0>)
 800dae8:	4894      	ldr	r0, [pc, #592]	@ (800dd3c <tcp_process+0x4d4>)
 800daea:	f009 f8e7 	bl	8016cbc <iprintf>
        --pcb->snd_queuelen;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800daf4:	3b01      	subs	r3, #1
 800daf6:	b29a      	uxth	r2, r3
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db02:	613b      	str	r3, [r7, #16]
        if (rseg == NULL) {
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d111      	bne.n	800db2e <tcp_process+0x2c6>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db0e:	613b      	str	r3, [r7, #16]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d106      	bne.n	800db24 <tcp_process+0x2bc>
 800db16:	4b87      	ldr	r3, [pc, #540]	@ (800dd34 <tcp_process+0x4cc>)
 800db18:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800db1c:	4988      	ldr	r1, [pc, #544]	@ (800dd40 <tcp_process+0x4d8>)
 800db1e:	4887      	ldr	r0, [pc, #540]	@ (800dd3c <tcp_process+0x4d4>)
 800db20:	f009 f8cc 	bl	8016cbc <iprintf>
          pcb->unsent = rseg->next;
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	681a      	ldr	r2, [r3, #0]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800db2c:	e003      	b.n	800db36 <tcp_process+0x2ce>
        } else {
          pcb->unacked = rseg->next;
 800db2e:	693b      	ldr	r3, [r7, #16]
 800db30:	681a      	ldr	r2, [r3, #0]
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800db36:	6938      	ldr	r0, [r7, #16]
 800db38:	f7fe fc21 	bl	800c37e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db40:	2b00      	cmp	r3, #0
 800db42:	d104      	bne.n	800db4e <tcp_process+0x2e6>
          pcb->rtime = -1;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800db4a:	861a      	strh	r2, [r3, #48]	@ 0x30
 800db4c:	e006      	b.n	800db5c <tcp_process+0x2f4>
        } else {
          pcb->rtime = 0;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2200      	movs	r2, #0
 800db52:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2200      	movs	r2, #0
 800db58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800db62:	2b00      	cmp	r3, #0
 800db64:	d00a      	beq.n	800db7c <tcp_process+0x314>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800db6c:	687a      	ldr	r2, [r7, #4]
 800db6e:	6910      	ldr	r0, [r2, #16]
 800db70:	2200      	movs	r2, #0
 800db72:	6879      	ldr	r1, [r7, #4]
 800db74:	4798      	blx	r3
 800db76:	4603      	mov	r3, r0
 800db78:	73bb      	strb	r3, [r7, #14]
 800db7a:	e001      	b.n	800db80 <tcp_process+0x318>
 800db7c:	2300      	movs	r3, #0
 800db7e:	73bb      	strb	r3, [r7, #14]
        if (err == ERR_ABRT) {
 800db80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db84:	f113 0f0d 	cmn.w	r3, #13
 800db88:	d102      	bne.n	800db90 <tcp_process+0x328>
          return ERR_ABRT;
 800db8a:	f06f 030c 	mvn.w	r3, #12
 800db8e:	e2b4      	b.n	800e0fa <tcp_process+0x892>
        }
        tcp_ack_now(pcb);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	8b5b      	ldrh	r3, [r3, #26]
 800db94:	f043 0302 	orr.w	r3, r3, #2
 800db98:	b29a      	uxth	r2, r3
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800db9e:	e29e      	b.n	800e0de <tcp_process+0x876>
      else if (flags & TCP_ACK) {
 800dba0:	4b68      	ldr	r3, [pc, #416]	@ (800dd44 <tcp_process+0x4dc>)
 800dba2:	781b      	ldrb	r3, [r3, #0]
 800dba4:	f003 0310 	and.w	r3, r3, #16
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	f000 8298 	beq.w	800e0de <tcp_process+0x876>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dbae:	4b66      	ldr	r3, [pc, #408]	@ (800dd48 <tcp_process+0x4e0>)
 800dbb0:	6819      	ldr	r1, [r3, #0]
 800dbb2:	4b66      	ldr	r3, [pc, #408]	@ (800dd4c <tcp_process+0x4e4>)
 800dbb4:	881b      	ldrh	r3, [r3, #0]
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	4b65      	ldr	r3, [pc, #404]	@ (800dd50 <tcp_process+0x4e8>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dbbe:	4b65      	ldr	r3, [pc, #404]	@ (800dd54 <tcp_process+0x4ec>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dbc2:	885b      	ldrh	r3, [r3, #2]
 800dbc4:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dbc6:	4a63      	ldr	r2, [pc, #396]	@ (800dd54 <tcp_process+0x4ec>)
 800dbc8:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dbca:	8812      	ldrh	r2, [r2, #0]
 800dbcc:	b292      	uxth	r2, r2
 800dbce:	9202      	str	r2, [sp, #8]
 800dbd0:	9301      	str	r3, [sp, #4]
 800dbd2:	4b61      	ldr	r3, [pc, #388]	@ (800dd58 <tcp_process+0x4f0>)
 800dbd4:	9300      	str	r3, [sp, #0]
 800dbd6:	4b61      	ldr	r3, [pc, #388]	@ (800dd5c <tcp_process+0x4f4>)
 800dbd8:	4602      	mov	r2, r0
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f002 fcfe 	bl	80105dc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dbe6:	2b05      	cmp	r3, #5
 800dbe8:	f200 8279 	bhi.w	800e0de <tcp_process+0x876>
          pcb->rtime = 0;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2200      	movs	r2, #0
 800dbf0:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f002 faca 	bl	801018c <tcp_rexmit_rto>
      break;
 800dbf8:	e271      	b.n	800e0de <tcp_process+0x876>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800dbfa:	4b52      	ldr	r3, [pc, #328]	@ (800dd44 <tcp_process+0x4dc>)
 800dbfc:	781b      	ldrb	r3, [r3, #0]
 800dbfe:	f003 0310 	and.w	r3, r3, #16
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	f000 80d0 	beq.w	800dda8 <tcp_process+0x540>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dc08:	4b4f      	ldr	r3, [pc, #316]	@ (800dd48 <tcp_process+0x4e0>)
 800dc0a:	681a      	ldr	r2, [r3, #0]
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc10:	1ad3      	subs	r3, r2, r3
 800dc12:	3b01      	subs	r3, #1
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	f2c0 80ad 	blt.w	800dd74 <tcp_process+0x50c>
 800dc1a:	4b4b      	ldr	r3, [pc, #300]	@ (800dd48 <tcp_process+0x4e0>)
 800dc1c:	681a      	ldr	r2, [r3, #0]
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc22:	1ad3      	subs	r3, r2, r3
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	f300 80a5 	bgt.w	800dd74 <tcp_process+0x50c>
          pcb->state = ESTABLISHED;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2204      	movs	r2, #4
 800dc2e:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
 800dc30:	4b4b      	ldr	r3, [pc, #300]	@ (800dd60 <tcp_process+0x4f8>)
 800dc32:	691b      	ldr	r3, [r3, #16]
 800dc34:	881b      	ldrh	r3, [r3, #0]
 800dc36:	b29b      	uxth	r3, r3
 800dc38:	4619      	mov	r1, r3
 800dc3a:	4b49      	ldr	r3, [pc, #292]	@ (800dd60 <tcp_process+0x4f8>)
 800dc3c:	691b      	ldr	r3, [r3, #16]
 800dc3e:	885b      	ldrh	r3, [r3, #2]
 800dc40:	b29b      	uxth	r3, r3
 800dc42:	461a      	mov	r2, r3
 800dc44:	4847      	ldr	r0, [pc, #284]	@ (800dd64 <tcp_process+0x4fc>)
 800dc46:	f009 f839 	bl	8016cbc <iprintf>
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d102      	bne.n	800dc58 <tcp_process+0x3f0>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800dc52:	23fa      	movs	r3, #250	@ 0xfa
 800dc54:	73bb      	strb	r3, [r7, #14]
 800dc56:	e01d      	b.n	800dc94 <tcp_process+0x42c>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dc5c:	699b      	ldr	r3, [r3, #24]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d106      	bne.n	800dc70 <tcp_process+0x408>
 800dc62:	4b34      	ldr	r3, [pc, #208]	@ (800dd34 <tcp_process+0x4cc>)
 800dc64:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800dc68:	493f      	ldr	r1, [pc, #252]	@ (800dd68 <tcp_process+0x500>)
 800dc6a:	4834      	ldr	r0, [pc, #208]	@ (800dd3c <tcp_process+0x4d4>)
 800dc6c:	f009 f826 	bl	8016cbc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dc74:	699b      	ldr	r3, [r3, #24]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d00a      	beq.n	800dc90 <tcp_process+0x428>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dc7e:	699b      	ldr	r3, [r3, #24]
 800dc80:	687a      	ldr	r2, [r7, #4]
 800dc82:	6910      	ldr	r0, [r2, #16]
 800dc84:	2200      	movs	r2, #0
 800dc86:	6879      	ldr	r1, [r7, #4]
 800dc88:	4798      	blx	r3
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	73bb      	strb	r3, [r7, #14]
 800dc8e:	e001      	b.n	800dc94 <tcp_process+0x42c>
 800dc90:	23f0      	movs	r3, #240	@ 0xf0
 800dc92:	73bb      	strb	r3, [r7, #14]
          }
          if (err != ERR_OK) {
 800dc94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d00a      	beq.n	800dcb2 <tcp_process+0x44a>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800dc9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dca0:	f113 0f0d 	cmn.w	r3, #13
 800dca4:	d002      	beq.n	800dcac <tcp_process+0x444>
              tcp_abort(pcb);
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f7fd fe12 	bl	800b8d0 <tcp_abort>
            }
            return ERR_ABRT;
 800dcac:	f06f 030c 	mvn.w	r3, #12
 800dcb0:	e223      	b.n	800e0fa <tcp_process+0x892>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	f000 fb3c 	bl	800e330 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800dcb8:	4b2c      	ldr	r3, [pc, #176]	@ (800dd6c <tcp_process+0x504>)
 800dcba:	881b      	ldrh	r3, [r3, #0]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d005      	beq.n	800dccc <tcp_process+0x464>
            recv_acked--;
 800dcc0:	4b2a      	ldr	r3, [pc, #168]	@ (800dd6c <tcp_process+0x504>)
 800dcc2:	881b      	ldrh	r3, [r3, #0]
 800dcc4:	3b01      	subs	r3, #1
 800dcc6:	b29a      	uxth	r2, r3
 800dcc8:	4b28      	ldr	r3, [pc, #160]	@ (800dd6c <tcp_process+0x504>)
 800dcca:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800dcd0:	009a      	lsls	r2, r3, #2
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800dcd6:	005b      	lsls	r3, r3, #1
 800dcd8:	f241 111c 	movw	r1, #4380	@ 0x111c
 800dcdc:	428b      	cmp	r3, r1
 800dcde:	bf38      	it	cc
 800dce0:	460b      	movcc	r3, r1
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d204      	bcs.n	800dcf0 <tcp_process+0x488>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800dcea:	009b      	lsls	r3, r3, #2
 800dcec:	b29b      	uxth	r3, r3
 800dcee:	e00d      	b.n	800dd0c <tcp_process+0x4a4>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800dcf4:	005b      	lsls	r3, r3, #1
 800dcf6:	f241 121c 	movw	r2, #4380	@ 0x111c
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	d904      	bls.n	800dd08 <tcp_process+0x4a0>
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800dd02:	005b      	lsls	r3, r3, #1
 800dd04:	b29b      	uxth	r3, r3
 800dd06:	e001      	b.n	800dd0c <tcp_process+0x4a4>
 800dd08:	f241 131c 	movw	r3, #4380	@ 0x111c
 800dd0c:	687a      	ldr	r2, [r7, #4]
 800dd0e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800dd12:	4b17      	ldr	r3, [pc, #92]	@ (800dd70 <tcp_process+0x508>)
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	f003 0320 	and.w	r3, r3, #32
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d057      	beq.n	800ddce <tcp_process+0x566>
            tcp_ack_now(pcb);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	8b5b      	ldrh	r3, [r3, #26]
 800dd22:	f043 0302 	orr.w	r3, r3, #2
 800dd26:	b29a      	uxth	r2, r3
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2207      	movs	r2, #7
 800dd30:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800dd32:	e04c      	b.n	800ddce <tcp_process+0x566>
 800dd34:	08019aac 	.word	0x08019aac
 800dd38:	08019dc4 	.word	0x08019dc4
 800dd3c:	08019af8 	.word	0x08019af8
 800dd40:	08019ddc 	.word	0x08019ddc
 800dd44:	24003338 	.word	0x24003338
 800dd48:	24003330 	.word	0x24003330
 800dd4c:	24003336 	.word	0x24003336
 800dd50:	2400332c 	.word	0x2400332c
 800dd54:	2400331c 	.word	0x2400331c
 800dd58:	24000370 	.word	0x24000370
 800dd5c:	24000374 	.word	0x24000374
 800dd60:	24003308 	.word	0x24003308
 800dd64:	08019df0 	.word	0x08019df0
 800dd68:	08019e18 	.word	0x08019e18
 800dd6c:	24003334 	.word	0x24003334
 800dd70:	24003339 	.word	0x24003339
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd74:	4b8c      	ldr	r3, [pc, #560]	@ (800dfa8 <tcp_process+0x740>)
 800dd76:	6819      	ldr	r1, [r3, #0]
 800dd78:	4b8c      	ldr	r3, [pc, #560]	@ (800dfac <tcp_process+0x744>)
 800dd7a:	881b      	ldrh	r3, [r3, #0]
 800dd7c:	461a      	mov	r2, r3
 800dd7e:	4b8c      	ldr	r3, [pc, #560]	@ (800dfb0 <tcp_process+0x748>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dd84:	4b8b      	ldr	r3, [pc, #556]	@ (800dfb4 <tcp_process+0x74c>)
 800dd86:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd88:	885b      	ldrh	r3, [r3, #2]
 800dd8a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dd8c:	4a89      	ldr	r2, [pc, #548]	@ (800dfb4 <tcp_process+0x74c>)
 800dd8e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd90:	8812      	ldrh	r2, [r2, #0]
 800dd92:	b292      	uxth	r2, r2
 800dd94:	9202      	str	r2, [sp, #8]
 800dd96:	9301      	str	r3, [sp, #4]
 800dd98:	4b87      	ldr	r3, [pc, #540]	@ (800dfb8 <tcp_process+0x750>)
 800dd9a:	9300      	str	r3, [sp, #0]
 800dd9c:	4b87      	ldr	r3, [pc, #540]	@ (800dfbc <tcp_process+0x754>)
 800dd9e:	4602      	mov	r2, r0
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f002 fc1b 	bl	80105dc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800dda6:	e19c      	b.n	800e0e2 <tcp_process+0x87a>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800dda8:	4b85      	ldr	r3, [pc, #532]	@ (800dfc0 <tcp_process+0x758>)
 800ddaa:	781b      	ldrb	r3, [r3, #0]
 800ddac:	f003 0302 	and.w	r3, r3, #2
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	f000 8196 	beq.w	800e0e2 <tcp_process+0x87a>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddba:	1e5a      	subs	r2, r3, #1
 800ddbc:	4b7c      	ldr	r3, [pc, #496]	@ (800dfb0 <tcp_process+0x748>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	429a      	cmp	r2, r3
 800ddc2:	f040 818e 	bne.w	800e0e2 <tcp_process+0x87a>
        tcp_rexmit(pcb);
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f002 fa02 	bl	80101d0 <tcp_rexmit>
      break;
 800ddcc:	e189      	b.n	800e0e2 <tcp_process+0x87a>
 800ddce:	e188      	b.n	800e0e2 <tcp_process+0x87a>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ddd0:	6878      	ldr	r0, [r7, #4]
 800ddd2:	f000 faad 	bl	800e330 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ddd6:	4b7b      	ldr	r3, [pc, #492]	@ (800dfc4 <tcp_process+0x75c>)
 800ddd8:	781b      	ldrb	r3, [r3, #0]
 800ddda:	f003 0320 	and.w	r3, r3, #32
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	f000 8181 	beq.w	800e0e6 <tcp_process+0x87e>
        tcp_ack_now(pcb);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	8b5b      	ldrh	r3, [r3, #26]
 800dde8:	f043 0302 	orr.w	r3, r3, #2
 800ddec:	b29a      	uxth	r2, r3
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	2207      	movs	r2, #7
 800ddf6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ddf8:	e175      	b.n	800e0e6 <tcp_process+0x87e>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f000 fa98 	bl	800e330 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800de00:	4b70      	ldr	r3, [pc, #448]	@ (800dfc4 <tcp_process+0x75c>)
 800de02:	781b      	ldrb	r3, [r3, #0]
 800de04:	f003 0320 	and.w	r3, r3, #32
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d063      	beq.n	800ded4 <tcp_process+0x66c>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800de0c:	4b6c      	ldr	r3, [pc, #432]	@ (800dfc0 <tcp_process+0x758>)
 800de0e:	781b      	ldrb	r3, [r3, #0]
 800de10:	f003 0310 	and.w	r3, r3, #16
 800de14:	2b00      	cmp	r3, #0
 800de16:	d052      	beq.n	800debe <tcp_process+0x656>
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800de1c:	4b62      	ldr	r3, [pc, #392]	@ (800dfa8 <tcp_process+0x740>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	429a      	cmp	r2, r3
 800de22:	d14c      	bne.n	800debe <tcp_process+0x656>
            pcb->unsent == NULL) {
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d148      	bne.n	800debe <tcp_process+0x656>
          LWIP_DEBUGF(TCP_DEBUG,
 800de2c:	4b66      	ldr	r3, [pc, #408]	@ (800dfc8 <tcp_process+0x760>)
 800de2e:	691b      	ldr	r3, [r3, #16]
 800de30:	881b      	ldrh	r3, [r3, #0]
 800de32:	b29b      	uxth	r3, r3
 800de34:	4619      	mov	r1, r3
 800de36:	4b64      	ldr	r3, [pc, #400]	@ (800dfc8 <tcp_process+0x760>)
 800de38:	691b      	ldr	r3, [r3, #16]
 800de3a:	885b      	ldrh	r3, [r3, #2]
 800de3c:	b29b      	uxth	r3, r3
 800de3e:	461a      	mov	r2, r3
 800de40:	4862      	ldr	r0, [pc, #392]	@ (800dfcc <tcp_process+0x764>)
 800de42:	f008 ff3b 	bl	8016cbc <iprintf>
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	8b5b      	ldrh	r3, [r3, #26]
 800de4a:	f043 0302 	orr.w	r3, r3, #2
 800de4e:	b29a      	uxth	r2, r3
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f7fe fcb7 	bl	800c7c8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800de5a:	4b5d      	ldr	r3, [pc, #372]	@ (800dfd0 <tcp_process+0x768>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	687a      	ldr	r2, [r7, #4]
 800de60:	429a      	cmp	r2, r3
 800de62:	d105      	bne.n	800de70 <tcp_process+0x608>
 800de64:	4b5a      	ldr	r3, [pc, #360]	@ (800dfd0 <tcp_process+0x768>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	68db      	ldr	r3, [r3, #12]
 800de6a:	4a59      	ldr	r2, [pc, #356]	@ (800dfd0 <tcp_process+0x768>)
 800de6c:	6013      	str	r3, [r2, #0]
 800de6e:	e013      	b.n	800de98 <tcp_process+0x630>
 800de70:	4b57      	ldr	r3, [pc, #348]	@ (800dfd0 <tcp_process+0x768>)
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	61bb      	str	r3, [r7, #24]
 800de76:	e00c      	b.n	800de92 <tcp_process+0x62a>
 800de78:	69bb      	ldr	r3, [r7, #24]
 800de7a:	68db      	ldr	r3, [r3, #12]
 800de7c:	687a      	ldr	r2, [r7, #4]
 800de7e:	429a      	cmp	r2, r3
 800de80:	d104      	bne.n	800de8c <tcp_process+0x624>
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	68da      	ldr	r2, [r3, #12]
 800de86:	69bb      	ldr	r3, [r7, #24]
 800de88:	60da      	str	r2, [r3, #12]
 800de8a:	e005      	b.n	800de98 <tcp_process+0x630>
 800de8c:	69bb      	ldr	r3, [r7, #24]
 800de8e:	68db      	ldr	r3, [r3, #12]
 800de90:	61bb      	str	r3, [r7, #24]
 800de92:	69bb      	ldr	r3, [r7, #24]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d1ef      	bne.n	800de78 <tcp_process+0x610>
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2200      	movs	r2, #0
 800de9c:	60da      	str	r2, [r3, #12]
 800de9e:	4b4d      	ldr	r3, [pc, #308]	@ (800dfd4 <tcp_process+0x76c>)
 800dea0:	2201      	movs	r2, #1
 800dea2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	220a      	movs	r2, #10
 800dea8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800deaa:	4b4b      	ldr	r3, [pc, #300]	@ (800dfd8 <tcp_process+0x770>)
 800deac:	681a      	ldr	r2, [r3, #0]
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	60da      	str	r2, [r3, #12]
 800deb2:	4a49      	ldr	r2, [pc, #292]	@ (800dfd8 <tcp_process+0x770>)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	6013      	str	r3, [r2, #0]
 800deb8:	f002 fdda 	bl	8010a70 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800debc:	e115      	b.n	800e0ea <tcp_process+0x882>
          tcp_ack_now(pcb);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	8b5b      	ldrh	r3, [r3, #26]
 800dec2:	f043 0302 	orr.w	r3, r3, #2
 800dec6:	b29a      	uxth	r2, r3
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2208      	movs	r2, #8
 800ded0:	751a      	strb	r2, [r3, #20]
      break;
 800ded2:	e10a      	b.n	800e0ea <tcp_process+0x882>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ded4:	4b3a      	ldr	r3, [pc, #232]	@ (800dfc0 <tcp_process+0x758>)
 800ded6:	781b      	ldrb	r3, [r3, #0]
 800ded8:	f003 0310 	and.w	r3, r3, #16
 800dedc:	2b00      	cmp	r3, #0
 800dede:	f000 8104 	beq.w	800e0ea <tcp_process+0x882>
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dee6:	4b30      	ldr	r3, [pc, #192]	@ (800dfa8 <tcp_process+0x740>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	429a      	cmp	r2, r3
 800deec:	f040 80fd 	bne.w	800e0ea <tcp_process+0x882>
                 pcb->unsent == NULL) {
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800def4:	2b00      	cmp	r3, #0
 800def6:	f040 80f8 	bne.w	800e0ea <tcp_process+0x882>
        pcb->state = FIN_WAIT_2;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2206      	movs	r2, #6
 800defe:	751a      	strb	r2, [r3, #20]
      break;
 800df00:	e0f3      	b.n	800e0ea <tcp_process+0x882>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f000 fa14 	bl	800e330 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800df08:	4b2e      	ldr	r3, [pc, #184]	@ (800dfc4 <tcp_process+0x75c>)
 800df0a:	781b      	ldrb	r3, [r3, #0]
 800df0c:	f003 0320 	and.w	r3, r3, #32
 800df10:	2b00      	cmp	r3, #0
 800df12:	f000 80ec 	beq.w	800e0ee <tcp_process+0x886>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
 800df16:	4b2c      	ldr	r3, [pc, #176]	@ (800dfc8 <tcp_process+0x760>)
 800df18:	691b      	ldr	r3, [r3, #16]
 800df1a:	881b      	ldrh	r3, [r3, #0]
 800df1c:	b29b      	uxth	r3, r3
 800df1e:	4619      	mov	r1, r3
 800df20:	4b29      	ldr	r3, [pc, #164]	@ (800dfc8 <tcp_process+0x760>)
 800df22:	691b      	ldr	r3, [r3, #16]
 800df24:	885b      	ldrh	r3, [r3, #2]
 800df26:	b29b      	uxth	r3, r3
 800df28:	461a      	mov	r2, r3
 800df2a:	482c      	ldr	r0, [pc, #176]	@ (800dfdc <tcp_process+0x774>)
 800df2c:	f008 fec6 	bl	8016cbc <iprintf>
        tcp_ack_now(pcb);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	8b5b      	ldrh	r3, [r3, #26]
 800df34:	f043 0302 	orr.w	r3, r3, #2
 800df38:	b29a      	uxth	r2, r3
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f7fe fc42 	bl	800c7c8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800df44:	4b22      	ldr	r3, [pc, #136]	@ (800dfd0 <tcp_process+0x768>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	687a      	ldr	r2, [r7, #4]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d105      	bne.n	800df5a <tcp_process+0x6f2>
 800df4e:	4b20      	ldr	r3, [pc, #128]	@ (800dfd0 <tcp_process+0x768>)
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	68db      	ldr	r3, [r3, #12]
 800df54:	4a1e      	ldr	r2, [pc, #120]	@ (800dfd0 <tcp_process+0x768>)
 800df56:	6013      	str	r3, [r2, #0]
 800df58:	e013      	b.n	800df82 <tcp_process+0x71a>
 800df5a:	4b1d      	ldr	r3, [pc, #116]	@ (800dfd0 <tcp_process+0x768>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	617b      	str	r3, [r7, #20]
 800df60:	e00c      	b.n	800df7c <tcp_process+0x714>
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	68db      	ldr	r3, [r3, #12]
 800df66:	687a      	ldr	r2, [r7, #4]
 800df68:	429a      	cmp	r2, r3
 800df6a:	d104      	bne.n	800df76 <tcp_process+0x70e>
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	68da      	ldr	r2, [r3, #12]
 800df70:	697b      	ldr	r3, [r7, #20]
 800df72:	60da      	str	r2, [r3, #12]
 800df74:	e005      	b.n	800df82 <tcp_process+0x71a>
 800df76:	697b      	ldr	r3, [r7, #20]
 800df78:	68db      	ldr	r3, [r3, #12]
 800df7a:	617b      	str	r3, [r7, #20]
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d1ef      	bne.n	800df62 <tcp_process+0x6fa>
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2200      	movs	r2, #0
 800df86:	60da      	str	r2, [r3, #12]
 800df88:	4b12      	ldr	r3, [pc, #72]	@ (800dfd4 <tcp_process+0x76c>)
 800df8a:	2201      	movs	r2, #1
 800df8c:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	220a      	movs	r2, #10
 800df92:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800df94:	4b10      	ldr	r3, [pc, #64]	@ (800dfd8 <tcp_process+0x770>)
 800df96:	681a      	ldr	r2, [r3, #0]
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	60da      	str	r2, [r3, #12]
 800df9c:	4a0e      	ldr	r2, [pc, #56]	@ (800dfd8 <tcp_process+0x770>)
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6013      	str	r3, [r2, #0]
 800dfa2:	f002 fd65 	bl	8010a70 <tcp_timer_needed>
      }
      break;
 800dfa6:	e0a2      	b.n	800e0ee <tcp_process+0x886>
 800dfa8:	24003330 	.word	0x24003330
 800dfac:	24003336 	.word	0x24003336
 800dfb0:	2400332c 	.word	0x2400332c
 800dfb4:	2400331c 	.word	0x2400331c
 800dfb8:	24000370 	.word	0x24000370
 800dfbc:	24000374 	.word	0x24000374
 800dfc0:	24003338 	.word	0x24003338
 800dfc4:	24003339 	.word	0x24003339
 800dfc8:	24003308 	.word	0x24003308
 800dfcc:	08019e38 	.word	0x08019e38
 800dfd0:	240032fc 	.word	0x240032fc
 800dfd4:	24003304 	.word	0x24003304
 800dfd8:	24003300 	.word	0x24003300
 800dfdc:	08019e68 	.word	0x08019e68
    case CLOSING:
      tcp_receive(pcb);
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	f000 f9a5 	bl	800e330 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800dfe6:	4b47      	ldr	r3, [pc, #284]	@ (800e104 <tcp_process+0x89c>)
 800dfe8:	781b      	ldrb	r3, [r3, #0]
 800dfea:	f003 0310 	and.w	r3, r3, #16
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d07f      	beq.n	800e0f2 <tcp_process+0x88a>
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dff6:	4b44      	ldr	r3, [pc, #272]	@ (800e108 <tcp_process+0x8a0>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	429a      	cmp	r2, r3
 800dffc:	d179      	bne.n	800e0f2 <tcp_process+0x88a>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e002:	2b00      	cmp	r3, #0
 800e004:	d175      	bne.n	800e0f2 <tcp_process+0x88a>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
 800e006:	4b41      	ldr	r3, [pc, #260]	@ (800e10c <tcp_process+0x8a4>)
 800e008:	691b      	ldr	r3, [r3, #16]
 800e00a:	881b      	ldrh	r3, [r3, #0]
 800e00c:	b29b      	uxth	r3, r3
 800e00e:	4619      	mov	r1, r3
 800e010:	4b3e      	ldr	r3, [pc, #248]	@ (800e10c <tcp_process+0x8a4>)
 800e012:	691b      	ldr	r3, [r3, #16]
 800e014:	885b      	ldrh	r3, [r3, #2]
 800e016:	b29b      	uxth	r3, r3
 800e018:	461a      	mov	r2, r3
 800e01a:	483d      	ldr	r0, [pc, #244]	@ (800e110 <tcp_process+0x8a8>)
 800e01c:	f008 fe4e 	bl	8016cbc <iprintf>
        tcp_pcb_purge(pcb);
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f7fe fbd1 	bl	800c7c8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e026:	4b3b      	ldr	r3, [pc, #236]	@ (800e114 <tcp_process+0x8ac>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	687a      	ldr	r2, [r7, #4]
 800e02c:	429a      	cmp	r2, r3
 800e02e:	d105      	bne.n	800e03c <tcp_process+0x7d4>
 800e030:	4b38      	ldr	r3, [pc, #224]	@ (800e114 <tcp_process+0x8ac>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	68db      	ldr	r3, [r3, #12]
 800e036:	4a37      	ldr	r2, [pc, #220]	@ (800e114 <tcp_process+0x8ac>)
 800e038:	6013      	str	r3, [r2, #0]
 800e03a:	e013      	b.n	800e064 <tcp_process+0x7fc>
 800e03c:	4b35      	ldr	r3, [pc, #212]	@ (800e114 <tcp_process+0x8ac>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	61fb      	str	r3, [r7, #28]
 800e042:	e00c      	b.n	800e05e <tcp_process+0x7f6>
 800e044:	69fb      	ldr	r3, [r7, #28]
 800e046:	68db      	ldr	r3, [r3, #12]
 800e048:	687a      	ldr	r2, [r7, #4]
 800e04a:	429a      	cmp	r2, r3
 800e04c:	d104      	bne.n	800e058 <tcp_process+0x7f0>
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	68da      	ldr	r2, [r3, #12]
 800e052:	69fb      	ldr	r3, [r7, #28]
 800e054:	60da      	str	r2, [r3, #12]
 800e056:	e005      	b.n	800e064 <tcp_process+0x7fc>
 800e058:	69fb      	ldr	r3, [r7, #28]
 800e05a:	68db      	ldr	r3, [r3, #12]
 800e05c:	61fb      	str	r3, [r7, #28]
 800e05e:	69fb      	ldr	r3, [r7, #28]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d1ef      	bne.n	800e044 <tcp_process+0x7dc>
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2200      	movs	r2, #0
 800e068:	60da      	str	r2, [r3, #12]
 800e06a:	4b2b      	ldr	r3, [pc, #172]	@ (800e118 <tcp_process+0x8b0>)
 800e06c:	2201      	movs	r2, #1
 800e06e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	220a      	movs	r2, #10
 800e074:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e076:	4b29      	ldr	r3, [pc, #164]	@ (800e11c <tcp_process+0x8b4>)
 800e078:	681a      	ldr	r2, [r3, #0]
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	60da      	str	r2, [r3, #12]
 800e07e:	4a27      	ldr	r2, [pc, #156]	@ (800e11c <tcp_process+0x8b4>)
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6013      	str	r3, [r2, #0]
 800e084:	f002 fcf4 	bl	8010a70 <tcp_timer_needed>
      }
      break;
 800e088:	e033      	b.n	800e0f2 <tcp_process+0x88a>
    case LAST_ACK:
      tcp_receive(pcb);
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f000 f950 	bl	800e330 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e090:	4b1c      	ldr	r3, [pc, #112]	@ (800e104 <tcp_process+0x89c>)
 800e092:	781b      	ldrb	r3, [r3, #0]
 800e094:	f003 0310 	and.w	r3, r3, #16
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d02c      	beq.n	800e0f6 <tcp_process+0x88e>
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e0a0:	4b19      	ldr	r3, [pc, #100]	@ (800e108 <tcp_process+0x8a0>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	d126      	bne.n	800e0f6 <tcp_process+0x88e>
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d122      	bne.n	800e0f6 <tcp_process+0x88e>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
 800e0b0:	4b16      	ldr	r3, [pc, #88]	@ (800e10c <tcp_process+0x8a4>)
 800e0b2:	691b      	ldr	r3, [r3, #16]
 800e0b4:	881b      	ldrh	r3, [r3, #0]
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	4619      	mov	r1, r3
 800e0ba:	4b14      	ldr	r3, [pc, #80]	@ (800e10c <tcp_process+0x8a4>)
 800e0bc:	691b      	ldr	r3, [r3, #16]
 800e0be:	885b      	ldrh	r3, [r3, #2]
 800e0c0:	b29b      	uxth	r3, r3
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	4816      	ldr	r0, [pc, #88]	@ (800e120 <tcp_process+0x8b8>)
 800e0c6:	f008 fdf9 	bl	8016cbc <iprintf>
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e0ca:	4b16      	ldr	r3, [pc, #88]	@ (800e124 <tcp_process+0x8bc>)
 800e0cc:	781b      	ldrb	r3, [r3, #0]
 800e0ce:	f043 0310 	orr.w	r3, r3, #16
 800e0d2:	b2da      	uxtb	r2, r3
 800e0d4:	4b13      	ldr	r3, [pc, #76]	@ (800e124 <tcp_process+0x8bc>)
 800e0d6:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e0d8:	e00d      	b.n	800e0f6 <tcp_process+0x88e>
    default:
      break;
 800e0da:	bf00      	nop
 800e0dc:	e00c      	b.n	800e0f8 <tcp_process+0x890>
      break;
 800e0de:	bf00      	nop
 800e0e0:	e00a      	b.n	800e0f8 <tcp_process+0x890>
      break;
 800e0e2:	bf00      	nop
 800e0e4:	e008      	b.n	800e0f8 <tcp_process+0x890>
      break;
 800e0e6:	bf00      	nop
 800e0e8:	e006      	b.n	800e0f8 <tcp_process+0x890>
      break;
 800e0ea:	bf00      	nop
 800e0ec:	e004      	b.n	800e0f8 <tcp_process+0x890>
      break;
 800e0ee:	bf00      	nop
 800e0f0:	e002      	b.n	800e0f8 <tcp_process+0x890>
      break;
 800e0f2:	bf00      	nop
 800e0f4:	e000      	b.n	800e0f8 <tcp_process+0x890>
      break;
 800e0f6:	bf00      	nop
  }
  return ERR_OK;
 800e0f8:	2300      	movs	r3, #0
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	3724      	adds	r7, #36	@ 0x24
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd90      	pop	{r4, r7, pc}
 800e102:	bf00      	nop
 800e104:	24003338 	.word	0x24003338
 800e108:	24003330 	.word	0x24003330
 800e10c:	24003308 	.word	0x24003308
 800e110:	08019e98 	.word	0x08019e98
 800e114:	240032fc 	.word	0x240032fc
 800e118:	24003304 	.word	0x24003304
 800e11c:	24003300 	.word	0x24003300
 800e120:	08019ec4 	.word	0x08019ec4
 800e124:	24003339 	.word	0x24003339

0800e128 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e128:	b590      	push	{r4, r7, lr}
 800e12a:	b085      	sub	sp, #20
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
 800e130:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d106      	bne.n	800e146 <tcp_oos_insert_segment+0x1e>
 800e138:	4b3b      	ldr	r3, [pc, #236]	@ (800e228 <tcp_oos_insert_segment+0x100>)
 800e13a:	f240 421f 	movw	r2, #1055	@ 0x41f
 800e13e:	493b      	ldr	r1, [pc, #236]	@ (800e22c <tcp_oos_insert_segment+0x104>)
 800e140:	483b      	ldr	r0, [pc, #236]	@ (800e230 <tcp_oos_insert_segment+0x108>)
 800e142:	f008 fdbb 	bl	8016cbc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	691b      	ldr	r3, [r3, #16]
 800e14a:	899b      	ldrh	r3, [r3, #12]
 800e14c:	b29b      	uxth	r3, r3
 800e14e:	4618      	mov	r0, r3
 800e150:	f7fb f972 	bl	8009438 <lwip_htons>
 800e154:	4603      	mov	r3, r0
 800e156:	b2db      	uxtb	r3, r3
 800e158:	f003 0301 	and.w	r3, r3, #1
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d028      	beq.n	800e1b2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e160:	6838      	ldr	r0, [r7, #0]
 800e162:	f7fe f8f7 	bl	800c354 <tcp_segs_free>
    next = NULL;
 800e166:	2300      	movs	r3, #0
 800e168:	603b      	str	r3, [r7, #0]
 800e16a:	e056      	b.n	800e21a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	691b      	ldr	r3, [r3, #16]
 800e170:	899b      	ldrh	r3, [r3, #12]
 800e172:	b29b      	uxth	r3, r3
 800e174:	4618      	mov	r0, r3
 800e176:	f7fb f95f 	bl	8009438 <lwip_htons>
 800e17a:	4603      	mov	r3, r0
 800e17c:	b2db      	uxtb	r3, r3
 800e17e:	f003 0301 	and.w	r3, r3, #1
 800e182:	2b00      	cmp	r3, #0
 800e184:	d00d      	beq.n	800e1a2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	691b      	ldr	r3, [r3, #16]
 800e18a:	899b      	ldrh	r3, [r3, #12]
 800e18c:	b29c      	uxth	r4, r3
 800e18e:	2001      	movs	r0, #1
 800e190:	f7fb f952 	bl	8009438 <lwip_htons>
 800e194:	4603      	mov	r3, r0
 800e196:	461a      	mov	r2, r3
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	691b      	ldr	r3, [r3, #16]
 800e19c:	4322      	orrs	r2, r4
 800e19e:	b292      	uxth	r2, r2
 800e1a0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800e1ac:	68f8      	ldr	r0, [r7, #12]
 800e1ae:	f7fe f8e6 	bl	800c37e <tcp_seg_free>
    while (next &&
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d00e      	beq.n	800e1d6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	891b      	ldrh	r3, [r3, #8]
 800e1bc:	461a      	mov	r2, r3
 800e1be:	4b1d      	ldr	r3, [pc, #116]	@ (800e234 <tcp_oos_insert_segment+0x10c>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	441a      	add	r2, r3
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	691b      	ldr	r3, [r3, #16]
 800e1c8:	685b      	ldr	r3, [r3, #4]
 800e1ca:	6839      	ldr	r1, [r7, #0]
 800e1cc:	8909      	ldrh	r1, [r1, #8]
 800e1ce:	440b      	add	r3, r1
 800e1d0:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	daca      	bge.n	800e16c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d01e      	beq.n	800e21a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	891b      	ldrh	r3, [r3, #8]
 800e1e0:	461a      	mov	r2, r3
 800e1e2:	4b14      	ldr	r3, [pc, #80]	@ (800e234 <tcp_oos_insert_segment+0x10c>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	441a      	add	r2, r3
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	691b      	ldr	r3, [r3, #16]
 800e1ec:	685b      	ldr	r3, [r3, #4]
 800e1ee:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	dd12      	ble.n	800e21a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	691b      	ldr	r3, [r3, #16]
 800e1f8:	685b      	ldr	r3, [r3, #4]
 800e1fa:	b29a      	uxth	r2, r3
 800e1fc:	4b0d      	ldr	r3, [pc, #52]	@ (800e234 <tcp_oos_insert_segment+0x10c>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	b29b      	uxth	r3, r3
 800e202:	1ad3      	subs	r3, r2, r3
 800e204:	b29a      	uxth	r2, r3
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	685a      	ldr	r2, [r3, #4]
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	891b      	ldrh	r3, [r3, #8]
 800e212:	4619      	mov	r1, r3
 800e214:	4610      	mov	r0, r2
 800e216:	f7fc fbed 	bl	800a9f4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	683a      	ldr	r2, [r7, #0]
 800e21e:	601a      	str	r2, [r3, #0]
}
 800e220:	bf00      	nop
 800e222:	3714      	adds	r7, #20
 800e224:	46bd      	mov	sp, r7
 800e226:	bd90      	pop	{r4, r7, pc}
 800e228:	08019aac 	.word	0x08019aac
 800e22c:	08019ef4 	.word	0x08019ef4
 800e230:	08019af8 	.word	0x08019af8
 800e234:	2400332c 	.word	0x2400332c

0800e238 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800e238:	b5b0      	push	{r4, r5, r7, lr}
 800e23a:	b086      	sub	sp, #24
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	60f8      	str	r0, [r7, #12]
 800e240:	60b9      	str	r1, [r7, #8]
 800e242:	607a      	str	r2, [r7, #4]
 800e244:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e246:	e03e      	b.n	800e2c6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	685b      	ldr	r3, [r3, #4]
 800e256:	4618      	mov	r0, r3
 800e258:	f7fc fe0c 	bl	800ae74 <pbuf_clen>
 800e25c:	4603      	mov	r3, r0
 800e25e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e266:	8a7a      	ldrh	r2, [r7, #18]
 800e268:	429a      	cmp	r2, r3
 800e26a:	d906      	bls.n	800e27a <tcp_free_acked_segments+0x42>
 800e26c:	4b2a      	ldr	r3, [pc, #168]	@ (800e318 <tcp_free_acked_segments+0xe0>)
 800e26e:	f240 4257 	movw	r2, #1111	@ 0x457
 800e272:	492a      	ldr	r1, [pc, #168]	@ (800e31c <tcp_free_acked_segments+0xe4>)
 800e274:	482a      	ldr	r0, [pc, #168]	@ (800e320 <tcp_free_acked_segments+0xe8>)
 800e276:	f008 fd21 	bl	8016cbc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800e280:	8a7b      	ldrh	r3, [r7, #18]
 800e282:	1ad3      	subs	r3, r2, r3
 800e284:	b29a      	uxth	r2, r3
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	891a      	ldrh	r2, [r3, #8]
 800e290:	4b24      	ldr	r3, [pc, #144]	@ (800e324 <tcp_free_acked_segments+0xec>)
 800e292:	881b      	ldrh	r3, [r3, #0]
 800e294:	4413      	add	r3, r2
 800e296:	b29a      	uxth	r2, r3
 800e298:	4b22      	ldr	r3, [pc, #136]	@ (800e324 <tcp_free_acked_segments+0xec>)
 800e29a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800e29c:	6978      	ldr	r0, [r7, #20]
 800e29e:	f7fe f86e 	bl	800c37e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d00c      	beq.n	800e2c6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d109      	bne.n	800e2c6 <tcp_free_acked_segments+0x8e>
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d106      	bne.n	800e2c6 <tcp_free_acked_segments+0x8e>
 800e2b8:	4b17      	ldr	r3, [pc, #92]	@ (800e318 <tcp_free_acked_segments+0xe0>)
 800e2ba:	f240 4261 	movw	r2, #1121	@ 0x461
 800e2be:	491a      	ldr	r1, [pc, #104]	@ (800e328 <tcp_free_acked_segments+0xf0>)
 800e2c0:	4817      	ldr	r0, [pc, #92]	@ (800e320 <tcp_free_acked_segments+0xe8>)
 800e2c2:	f008 fcfb 	bl	8016cbc <iprintf>
  while (seg_list != NULL &&
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d020      	beq.n	800e30e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	691b      	ldr	r3, [r3, #16]
 800e2d0:	685b      	ldr	r3, [r3, #4]
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f7fb f8c5 	bl	8009462 <lwip_htonl>
 800e2d8:	4604      	mov	r4, r0
 800e2da:	68bb      	ldr	r3, [r7, #8]
 800e2dc:	891b      	ldrh	r3, [r3, #8]
 800e2de:	461d      	mov	r5, r3
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	691b      	ldr	r3, [r3, #16]
 800e2e4:	899b      	ldrh	r3, [r3, #12]
 800e2e6:	b29b      	uxth	r3, r3
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f7fb f8a5 	bl	8009438 <lwip_htons>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	b2db      	uxtb	r3, r3
 800e2f2:	f003 0303 	and.w	r3, r3, #3
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d001      	beq.n	800e2fe <tcp_free_acked_segments+0xc6>
 800e2fa:	2301      	movs	r3, #1
 800e2fc:	e000      	b.n	800e300 <tcp_free_acked_segments+0xc8>
 800e2fe:	2300      	movs	r3, #0
 800e300:	442b      	add	r3, r5
 800e302:	18e2      	adds	r2, r4, r3
 800e304:	4b09      	ldr	r3, [pc, #36]	@ (800e32c <tcp_free_acked_segments+0xf4>)
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	dd9c      	ble.n	800e248 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800e30e:	68bb      	ldr	r3, [r7, #8]
}
 800e310:	4618      	mov	r0, r3
 800e312:	3718      	adds	r7, #24
 800e314:	46bd      	mov	sp, r7
 800e316:	bdb0      	pop	{r4, r5, r7, pc}
 800e318:	08019aac 	.word	0x08019aac
 800e31c:	08019f1c 	.word	0x08019f1c
 800e320:	08019af8 	.word	0x08019af8
 800e324:	24003334 	.word	0x24003334
 800e328:	08019f44 	.word	0x08019f44
 800e32c:	24003330 	.word	0x24003330

0800e330 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e330:	b5b0      	push	{r4, r5, r7, lr}
 800e332:	b094      	sub	sp, #80	@ 0x50
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800e338:	2300      	movs	r3, #0
 800e33a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d106      	bne.n	800e350 <tcp_receive+0x20>
 800e342:	4b91      	ldr	r3, [pc, #580]	@ (800e588 <tcp_receive+0x258>)
 800e344:	f240 427b 	movw	r2, #1147	@ 0x47b
 800e348:	4990      	ldr	r1, [pc, #576]	@ (800e58c <tcp_receive+0x25c>)
 800e34a:	4891      	ldr	r0, [pc, #580]	@ (800e590 <tcp_receive+0x260>)
 800e34c:	f008 fcb6 	bl	8016cbc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	7d1b      	ldrb	r3, [r3, #20]
 800e354:	2b03      	cmp	r3, #3
 800e356:	d806      	bhi.n	800e366 <tcp_receive+0x36>
 800e358:	4b8b      	ldr	r3, [pc, #556]	@ (800e588 <tcp_receive+0x258>)
 800e35a:	f240 427c 	movw	r2, #1148	@ 0x47c
 800e35e:	498d      	ldr	r1, [pc, #564]	@ (800e594 <tcp_receive+0x264>)
 800e360:	488b      	ldr	r0, [pc, #556]	@ (800e590 <tcp_receive+0x260>)
 800e362:	f008 fcab 	bl	8016cbc <iprintf>

  if (flags & TCP_ACK) {
 800e366:	4b8c      	ldr	r3, [pc, #560]	@ (800e598 <tcp_receive+0x268>)
 800e368:	781b      	ldrb	r3, [r3, #0]
 800e36a:	f003 0310 	and.w	r3, r3, #16
 800e36e:	2b00      	cmp	r3, #0
 800e370:	f000 8264 	beq.w	800e83c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e37a:	461a      	mov	r2, r3
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e380:	4413      	add	r3, r2
 800e382:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e388:	4b84      	ldr	r3, [pc, #528]	@ (800e59c <tcp_receive+0x26c>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	1ad3      	subs	r3, r2, r3
 800e38e:	2b00      	cmp	r3, #0
 800e390:	db1b      	blt.n	800e3ca <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e396:	4b81      	ldr	r3, [pc, #516]	@ (800e59c <tcp_receive+0x26c>)
 800e398:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d106      	bne.n	800e3ac <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e3a2:	4b7f      	ldr	r3, [pc, #508]	@ (800e5a0 <tcp_receive+0x270>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	1ad3      	subs	r3, r2, r3
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	db0e      	blt.n	800e3ca <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e3b0:	4b7b      	ldr	r3, [pc, #492]	@ (800e5a0 <tcp_receive+0x270>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d125      	bne.n	800e404 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e3b8:	4b7a      	ldr	r3, [pc, #488]	@ (800e5a4 <tcp_receive+0x274>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	89db      	ldrh	r3, [r3, #14]
 800e3be:	b29a      	uxth	r2, r3
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	d91c      	bls.n	800e404 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e3ca:	4b76      	ldr	r3, [pc, #472]	@ (800e5a4 <tcp_receive+0x274>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	89db      	ldrh	r3, [r3, #14]
 800e3d0:	b29a      	uxth	r2, r3
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e3e4:	429a      	cmp	r2, r3
 800e3e6:	d205      	bcs.n	800e3f4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800e3f4:	4b69      	ldr	r3, [pc, #420]	@ (800e59c <tcp_receive+0x26c>)
 800e3f6:	681a      	ldr	r2, [r3, #0]
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800e3fc:	4b68      	ldr	r3, [pc, #416]	@ (800e5a0 <tcp_receive+0x270>)
 800e3fe:	681a      	ldr	r2, [r3, #0]
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e404:	4b66      	ldr	r3, [pc, #408]	@ (800e5a0 <tcp_receive+0x270>)
 800e406:	681a      	ldr	r2, [r3, #0]
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e40c:	1ad3      	subs	r3, r2, r3
 800e40e:	2b00      	cmp	r3, #0
 800e410:	dc58      	bgt.n	800e4c4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800e412:	4b65      	ldr	r3, [pc, #404]	@ (800e5a8 <tcp_receive+0x278>)
 800e414:	881b      	ldrh	r3, [r3, #0]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d14b      	bne.n	800e4b2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e41e:	687a      	ldr	r2, [r7, #4]
 800e420:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800e424:	4413      	add	r3, r2
 800e426:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e428:	429a      	cmp	r2, r3
 800e42a:	d142      	bne.n	800e4b2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e432:	2b00      	cmp	r3, #0
 800e434:	db3d      	blt.n	800e4b2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e43a:	4b59      	ldr	r3, [pc, #356]	@ (800e5a0 <tcp_receive+0x270>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	429a      	cmp	r2, r3
 800e440:	d137      	bne.n	800e4b2 <tcp_receive+0x182>
              found_dupack = 1;
 800e442:	2301      	movs	r3, #1
 800e444:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e44c:	2bff      	cmp	r3, #255	@ 0xff
 800e44e:	d007      	beq.n	800e460 <tcp_receive+0x130>
                ++pcb->dupacks;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e456:	3301      	adds	r3, #1
 800e458:	b2da      	uxtb	r2, r3
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e466:	2b03      	cmp	r3, #3
 800e468:	d91b      	bls.n	800e4a2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e474:	4413      	add	r3, r2
 800e476:	b29a      	uxth	r2, r3
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e47e:	429a      	cmp	r2, r3
 800e480:	d30a      	bcc.n	800e498 <tcp_receive+0x168>
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e48c:	4413      	add	r3, r2
 800e48e:	b29a      	uxth	r2, r3
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800e496:	e004      	b.n	800e4a2 <tcp_receive+0x172>
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e49e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e4a8:	2b02      	cmp	r3, #2
 800e4aa:	d902      	bls.n	800e4b2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f001 fefb 	bl	80102a8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e4b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	f040 8161 	bne.w	800e77c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2200      	movs	r2, #0
 800e4be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e4c2:	e15b      	b.n	800e77c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e4c4:	4b36      	ldr	r3, [pc, #216]	@ (800e5a0 <tcp_receive+0x270>)
 800e4c6:	681a      	ldr	r2, [r3, #0]
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4cc:	1ad3      	subs	r3, r2, r3
 800e4ce:	3b01      	subs	r3, #1
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	f2c0 814e 	blt.w	800e772 <tcp_receive+0x442>
 800e4d6:	4b32      	ldr	r3, [pc, #200]	@ (800e5a0 <tcp_receive+0x270>)
 800e4d8:	681a      	ldr	r2, [r3, #0]
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4de:	1ad3      	subs	r3, r2, r3
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	f300 8146 	bgt.w	800e772 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	8b5b      	ldrh	r3, [r3, #26]
 800e4ea:	f003 0304 	and.w	r3, r3, #4
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d010      	beq.n	800e514 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	8b5b      	ldrh	r3, [r3, #26]
 800e4f6:	f023 0304 	bic.w	r3, r3, #4
 800e4fa:	b29a      	uxth	r2, r3
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2200      	movs	r2, #0
 800e510:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2200      	movs	r2, #0
 800e518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e522:	10db      	asrs	r3, r3, #3
 800e524:	b21b      	sxth	r3, r3
 800e526:	b29a      	uxth	r2, r3
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e52e:	b29b      	uxth	r3, r3
 800e530:	4413      	add	r3, r2
 800e532:	b29b      	uxth	r3, r3
 800e534:	b21a      	sxth	r2, r3
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e53c:	4b18      	ldr	r3, [pc, #96]	@ (800e5a0 <tcp_receive+0x270>)
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	b29a      	uxth	r2, r3
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e546:	b29b      	uxth	r3, r3
 800e548:	1ad3      	subs	r3, r2, r3
 800e54a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2200      	movs	r2, #0
 800e550:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800e554:	4b12      	ldr	r3, [pc, #72]	@ (800e5a0 <tcp_receive+0x270>)
 800e556:	681a      	ldr	r2, [r3, #0]
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	7d1b      	ldrb	r3, [r3, #20]
 800e560:	2b03      	cmp	r3, #3
 800e562:	f240 8097 	bls.w	800e694 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800e572:	429a      	cmp	r2, r3
 800e574:	d245      	bcs.n	800e602 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	8b5b      	ldrh	r3, [r3, #26]
 800e57a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d014      	beq.n	800e5ac <tcp_receive+0x27c>
 800e582:	2301      	movs	r3, #1
 800e584:	e013      	b.n	800e5ae <tcp_receive+0x27e>
 800e586:	bf00      	nop
 800e588:	08019aac 	.word	0x08019aac
 800e58c:	08019f64 	.word	0x08019f64
 800e590:	08019af8 	.word	0x08019af8
 800e594:	08019f80 	.word	0x08019f80
 800e598:	24003338 	.word	0x24003338
 800e59c:	2400332c 	.word	0x2400332c
 800e5a0:	24003330 	.word	0x24003330
 800e5a4:	2400331c 	.word	0x2400331c
 800e5a8:	24003336 	.word	0x24003336
 800e5ac:	2302      	movs	r3, #2
 800e5ae:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e5b2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800e5b6:	b29a      	uxth	r2, r3
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e5bc:	fb12 f303 	smulbb	r3, r2, r3
 800e5c0:	b29b      	uxth	r3, r3
 800e5c2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e5c4:	4293      	cmp	r3, r2
 800e5c6:	bf28      	it	cs
 800e5c8:	4613      	movcs	r3, r2
 800e5ca:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e5d2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e5d4:	4413      	add	r3, r2
 800e5d6:	b29a      	uxth	r2, r3
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	d309      	bcc.n	800e5f6 <tcp_receive+0x2c6>
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e5e8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e5ea:	4413      	add	r3, r2
 800e5ec:	b29a      	uxth	r2, r3
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800e5f4:	e04e      	b.n	800e694 <tcp_receive+0x364>
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e5fc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800e600:	e048      	b.n	800e694 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800e608:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e60a:	4413      	add	r3, r2
 800e60c:	b29a      	uxth	r2, r3
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e614:	429a      	cmp	r2, r3
 800e616:	d309      	bcc.n	800e62c <tcp_receive+0x2fc>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800e61e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e620:	4413      	add	r3, r2
 800e622:	b29a      	uxth	r2, r3
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800e62a:	e004      	b.n	800e636 <tcp_receive+0x306>
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e632:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e642:	429a      	cmp	r2, r3
 800e644:	d326      	bcc.n	800e694 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e652:	1ad3      	subs	r3, r2, r3
 800e654:	b29a      	uxth	r2, r3
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e666:	4413      	add	r3, r2
 800e668:	b29a      	uxth	r2, r3
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e670:	429a      	cmp	r2, r3
 800e672:	d30a      	bcc.n	800e68a <tcp_receive+0x35a>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e67e:	4413      	add	r3, r2
 800e680:	b29a      	uxth	r2, r3
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800e688:	e004      	b.n	800e694 <tcp_receive+0x364>
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e690:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e69c:	4a98      	ldr	r2, [pc, #608]	@ (800e900 <tcp_receive+0x5d0>)
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f7ff fdca 	bl	800e238 <tcp_free_acked_segments>
 800e6a4:	4602      	mov	r2, r0
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e6b2:	4a94      	ldr	r2, [pc, #592]	@ (800e904 <tcp_receive+0x5d4>)
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f7ff fdbf 	bl	800e238 <tcp_free_acked_segments>
 800e6ba:	4602      	mov	r2, r0
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d104      	bne.n	800e6d2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e6ce:	861a      	strh	r2, [r3, #48]	@ 0x30
 800e6d0:	e002      	b.n	800e6d8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2200      	movs	r2, #0
 800e6dc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d103      	bne.n	800e6ee <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800e6f4:	4b84      	ldr	r3, [pc, #528]	@ (800e908 <tcp_receive+0x5d8>)
 800e6f6:	881b      	ldrh	r3, [r3, #0]
 800e6f8:	4413      	add	r3, r2
 800e6fa:	b29a      	uxth	r2, r3
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	8b5b      	ldrh	r3, [r3, #26]
 800e706:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d035      	beq.n	800e77a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e712:	2b00      	cmp	r3, #0
 800e714:	d118      	bne.n	800e748 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d00c      	beq.n	800e738 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e726:	691b      	ldr	r3, [r3, #16]
 800e728:	685b      	ldr	r3, [r3, #4]
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7fa fe99 	bl	8009462 <lwip_htonl>
 800e730:	4603      	mov	r3, r0
 800e732:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800e734:	2b00      	cmp	r3, #0
 800e736:	dc20      	bgt.n	800e77a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	8b5b      	ldrh	r3, [r3, #26]
 800e73c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e740:	b29a      	uxth	r2, r3
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e746:	e018      	b.n	800e77a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e750:	691b      	ldr	r3, [r3, #16]
 800e752:	685b      	ldr	r3, [r3, #4]
 800e754:	4618      	mov	r0, r3
 800e756:	f7fa fe84 	bl	8009462 <lwip_htonl>
 800e75a:	4603      	mov	r3, r0
 800e75c:	1ae3      	subs	r3, r4, r3
 800e75e:	2b00      	cmp	r3, #0
 800e760:	dc0b      	bgt.n	800e77a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	8b5b      	ldrh	r3, [r3, #26]
 800e766:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e76a:	b29a      	uxth	r2, r3
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e770:	e003      	b.n	800e77a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	f001 ff88 	bl	8010688 <tcp_send_empty_ack>
 800e778:	e000      	b.n	800e77c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e77a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e780:	2b00      	cmp	r3, #0
 800e782:	d05b      	beq.n	800e83c <tcp_receive+0x50c>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e788:	4b60      	ldr	r3, [pc, #384]	@ (800e90c <tcp_receive+0x5dc>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	1ad3      	subs	r3, r2, r3
 800e78e:	2b00      	cmp	r3, #0
 800e790:	da54      	bge.n	800e83c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e792:	4b5f      	ldr	r3, [pc, #380]	@ (800e910 <tcp_receive+0x5e0>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	b29a      	uxth	r2, r3
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e79c:	b29b      	uxth	r3, r3
 800e79e:	1ad3      	subs	r3, r2, r3
 800e7a0:	b29b      	uxth	r3, r3
 800e7a2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800e7a6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e7b0:	10db      	asrs	r3, r3, #3
 800e7b2:	b21b      	sxth	r3, r3
 800e7b4:	b29b      	uxth	r3, r3
 800e7b6:	1ad3      	subs	r3, r2, r3
 800e7b8:	b29b      	uxth	r3, r3
 800e7ba:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e7c4:	b29a      	uxth	r2, r3
 800e7c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800e7ca:	4413      	add	r3, r2
 800e7cc:	b29b      	uxth	r3, r3
 800e7ce:	b21a      	sxth	r2, r3
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800e7d4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	da05      	bge.n	800e7e8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800e7dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800e7e0:	425b      	negs	r3, r3
 800e7e2:	b29b      	uxth	r3, r3
 800e7e4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800e7e8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e7f2:	109b      	asrs	r3, r3, #2
 800e7f4:	b21b      	sxth	r3, r3
 800e7f6:	b29b      	uxth	r3, r3
 800e7f8:	1ad3      	subs	r3, r2, r3
 800e7fa:	b29b      	uxth	r3, r3
 800e7fc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e806:	b29a      	uxth	r2, r3
 800e808:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800e80c:	4413      	add	r3, r2
 800e80e:	b29b      	uxth	r3, r3
 800e810:	b21a      	sxth	r2, r3
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e81c:	10db      	asrs	r3, r3, #3
 800e81e:	b21b      	sxth	r3, r3
 800e820:	b29a      	uxth	r2, r3
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e828:	b29b      	uxth	r3, r3
 800e82a:	4413      	add	r3, r2
 800e82c:	b29b      	uxth	r3, r3
 800e82e:	b21a      	sxth	r2, r3
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2200      	movs	r2, #0
 800e83a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800e83c:	4b35      	ldr	r3, [pc, #212]	@ (800e914 <tcp_receive+0x5e4>)
 800e83e:	881b      	ldrh	r3, [r3, #0]
 800e840:	2b00      	cmp	r3, #0
 800e842:	f000 84df 	beq.w	800f204 <tcp_receive+0xed4>
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	7d1b      	ldrb	r3, [r3, #20]
 800e84a:	2b06      	cmp	r3, #6
 800e84c:	f200 84da 	bhi.w	800f204 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e854:	4b30      	ldr	r3, [pc, #192]	@ (800e918 <tcp_receive+0x5e8>)
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	1ad3      	subs	r3, r2, r3
 800e85a:	3b01      	subs	r3, #1
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	f2c0 808f 	blt.w	800e980 <tcp_receive+0x650>
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e866:	4b2b      	ldr	r3, [pc, #172]	@ (800e914 <tcp_receive+0x5e4>)
 800e868:	881b      	ldrh	r3, [r3, #0]
 800e86a:	4619      	mov	r1, r3
 800e86c:	4b2a      	ldr	r3, [pc, #168]	@ (800e918 <tcp_receive+0x5e8>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	440b      	add	r3, r1
 800e872:	1ad3      	subs	r3, r2, r3
 800e874:	3301      	adds	r3, #1
 800e876:	2b00      	cmp	r3, #0
 800e878:	f300 8082 	bgt.w	800e980 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800e87c:	4b27      	ldr	r3, [pc, #156]	@ (800e91c <tcp_receive+0x5ec>)
 800e87e:	685b      	ldr	r3, [r3, #4]
 800e880:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e886:	4b24      	ldr	r3, [pc, #144]	@ (800e918 <tcp_receive+0x5e8>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	1ad3      	subs	r3, r2, r3
 800e88c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800e88e:	4b23      	ldr	r3, [pc, #140]	@ (800e91c <tcp_receive+0x5ec>)
 800e890:	685b      	ldr	r3, [r3, #4]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d106      	bne.n	800e8a4 <tcp_receive+0x574>
 800e896:	4b22      	ldr	r3, [pc, #136]	@ (800e920 <tcp_receive+0x5f0>)
 800e898:	f240 5294 	movw	r2, #1428	@ 0x594
 800e89c:	4921      	ldr	r1, [pc, #132]	@ (800e924 <tcp_receive+0x5f4>)
 800e89e:	4822      	ldr	r0, [pc, #136]	@ (800e928 <tcp_receive+0x5f8>)
 800e8a0:	f008 fa0c 	bl	8016cbc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800e8a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8a6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	d906      	bls.n	800e8bc <tcp_receive+0x58c>
 800e8ae:	4b1c      	ldr	r3, [pc, #112]	@ (800e920 <tcp_receive+0x5f0>)
 800e8b0:	f240 5295 	movw	r2, #1429	@ 0x595
 800e8b4:	491d      	ldr	r1, [pc, #116]	@ (800e92c <tcp_receive+0x5fc>)
 800e8b6:	481c      	ldr	r0, [pc, #112]	@ (800e928 <tcp_receive+0x5f8>)
 800e8b8:	f008 fa00 	bl	8016cbc <iprintf>
      off = (u16_t)off32;
 800e8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8be:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e8c2:	4b16      	ldr	r3, [pc, #88]	@ (800e91c <tcp_receive+0x5ec>)
 800e8c4:	685b      	ldr	r3, [r3, #4]
 800e8c6:	891b      	ldrh	r3, [r3, #8]
 800e8c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	d906      	bls.n	800e8de <tcp_receive+0x5ae>
 800e8d0:	4b13      	ldr	r3, [pc, #76]	@ (800e920 <tcp_receive+0x5f0>)
 800e8d2:	f240 5297 	movw	r2, #1431	@ 0x597
 800e8d6:	4916      	ldr	r1, [pc, #88]	@ (800e930 <tcp_receive+0x600>)
 800e8d8:	4813      	ldr	r0, [pc, #76]	@ (800e928 <tcp_receive+0x5f8>)
 800e8da:	f008 f9ef 	bl	8016cbc <iprintf>
      inseg.len -= off;
 800e8de:	4b0f      	ldr	r3, [pc, #60]	@ (800e91c <tcp_receive+0x5ec>)
 800e8e0:	891a      	ldrh	r2, [r3, #8]
 800e8e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800e8e6:	1ad3      	subs	r3, r2, r3
 800e8e8:	b29a      	uxth	r2, r3
 800e8ea:	4b0c      	ldr	r3, [pc, #48]	@ (800e91c <tcp_receive+0x5ec>)
 800e8ec:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e8ee:	4b0b      	ldr	r3, [pc, #44]	@ (800e91c <tcp_receive+0x5ec>)
 800e8f0:	685b      	ldr	r3, [r3, #4]
 800e8f2:	891a      	ldrh	r2, [r3, #8]
 800e8f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800e8f8:	1ad3      	subs	r3, r2, r3
 800e8fa:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800e8fc:	e02a      	b.n	800e954 <tcp_receive+0x624>
 800e8fe:	bf00      	nop
 800e900:	08019f9c 	.word	0x08019f9c
 800e904:	08019fa4 	.word	0x08019fa4
 800e908:	24003334 	.word	0x24003334
 800e90c:	24003330 	.word	0x24003330
 800e910:	240032f0 	.word	0x240032f0
 800e914:	24003336 	.word	0x24003336
 800e918:	2400332c 	.word	0x2400332c
 800e91c:	24003308 	.word	0x24003308
 800e920:	08019aac 	.word	0x08019aac
 800e924:	08019fac 	.word	0x08019fac
 800e928:	08019af8 	.word	0x08019af8
 800e92c:	08019fbc 	.word	0x08019fbc
 800e930:	08019fcc 	.word	0x08019fcc
        off -= p->len;
 800e934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e936:	895b      	ldrh	r3, [r3, #10]
 800e938:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800e93c:	1ad3      	subs	r3, r2, r3
 800e93e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800e942:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e944:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e946:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800e948:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e94a:	2200      	movs	r2, #0
 800e94c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800e94e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800e954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e956:	895b      	ldrh	r3, [r3, #10]
 800e958:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800e95c:	429a      	cmp	r2, r3
 800e95e:	d8e9      	bhi.n	800e934 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800e960:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800e964:	4619      	mov	r1, r3
 800e966:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e968:	f7fc f956 	bl	800ac18 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e970:	4a90      	ldr	r2, [pc, #576]	@ (800ebb4 <tcp_receive+0x884>)
 800e972:	6013      	str	r3, [r2, #0]
 800e974:	4b90      	ldr	r3, [pc, #576]	@ (800ebb8 <tcp_receive+0x888>)
 800e976:	691b      	ldr	r3, [r3, #16]
 800e978:	4a8e      	ldr	r2, [pc, #568]	@ (800ebb4 <tcp_receive+0x884>)
 800e97a:	6812      	ldr	r2, [r2, #0]
 800e97c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e97e:	e00d      	b.n	800e99c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e980:	4b8c      	ldr	r3, [pc, #560]	@ (800ebb4 <tcp_receive+0x884>)
 800e982:	681a      	ldr	r2, [r3, #0]
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e988:	1ad3      	subs	r3, r2, r3
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	da06      	bge.n	800e99c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	8b5b      	ldrh	r3, [r3, #26]
 800e992:	f043 0302 	orr.w	r3, r3, #2
 800e996:	b29a      	uxth	r2, r3
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e99c:	4b85      	ldr	r3, [pc, #532]	@ (800ebb4 <tcp_receive+0x884>)
 800e99e:	681a      	ldr	r2, [r3, #0]
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9a4:	1ad3      	subs	r3, r2, r3
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	f2c0 8427 	blt.w	800f1fa <tcp_receive+0xeca>
 800e9ac:	4b81      	ldr	r3, [pc, #516]	@ (800ebb4 <tcp_receive+0x884>)
 800e9ae:	681a      	ldr	r2, [r3, #0]
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9b4:	6879      	ldr	r1, [r7, #4]
 800e9b6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e9b8:	440b      	add	r3, r1
 800e9ba:	1ad3      	subs	r3, r2, r3
 800e9bc:	3301      	adds	r3, #1
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	f300 841b 	bgt.w	800f1fa <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e9c8:	4b7a      	ldr	r3, [pc, #488]	@ (800ebb4 <tcp_receive+0x884>)
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	f040 8298 	bne.w	800ef02 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800e9d2:	4b79      	ldr	r3, [pc, #484]	@ (800ebb8 <tcp_receive+0x888>)
 800e9d4:	891c      	ldrh	r4, [r3, #8]
 800e9d6:	4b78      	ldr	r3, [pc, #480]	@ (800ebb8 <tcp_receive+0x888>)
 800e9d8:	691b      	ldr	r3, [r3, #16]
 800e9da:	899b      	ldrh	r3, [r3, #12]
 800e9dc:	b29b      	uxth	r3, r3
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f7fa fd2a 	bl	8009438 <lwip_htons>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	b2db      	uxtb	r3, r3
 800e9e8:	f003 0303 	and.w	r3, r3, #3
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d001      	beq.n	800e9f4 <tcp_receive+0x6c4>
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	e000      	b.n	800e9f6 <tcp_receive+0x6c6>
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	4423      	add	r3, r4
 800e9f8:	b29a      	uxth	r2, r3
 800e9fa:	4b70      	ldr	r3, [pc, #448]	@ (800ebbc <tcp_receive+0x88c>)
 800e9fc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ea02:	4b6e      	ldr	r3, [pc, #440]	@ (800ebbc <tcp_receive+0x88c>)
 800ea04:	881b      	ldrh	r3, [r3, #0]
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d274      	bcs.n	800eaf4 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ea0a:	4b6b      	ldr	r3, [pc, #428]	@ (800ebb8 <tcp_receive+0x888>)
 800ea0c:	691b      	ldr	r3, [r3, #16]
 800ea0e:	899b      	ldrh	r3, [r3, #12]
 800ea10:	b29b      	uxth	r3, r3
 800ea12:	4618      	mov	r0, r3
 800ea14:	f7fa fd10 	bl	8009438 <lwip_htons>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	b2db      	uxtb	r3, r3
 800ea1c:	f003 0301 	and.w	r3, r3, #1
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d01e      	beq.n	800ea62 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ea24:	4b64      	ldr	r3, [pc, #400]	@ (800ebb8 <tcp_receive+0x888>)
 800ea26:	691b      	ldr	r3, [r3, #16]
 800ea28:	899b      	ldrh	r3, [r3, #12]
 800ea2a:	b29b      	uxth	r3, r3
 800ea2c:	b21b      	sxth	r3, r3
 800ea2e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ea32:	b21c      	sxth	r4, r3
 800ea34:	4b60      	ldr	r3, [pc, #384]	@ (800ebb8 <tcp_receive+0x888>)
 800ea36:	691b      	ldr	r3, [r3, #16]
 800ea38:	899b      	ldrh	r3, [r3, #12]
 800ea3a:	b29b      	uxth	r3, r3
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f7fa fcfb 	bl	8009438 <lwip_htons>
 800ea42:	4603      	mov	r3, r0
 800ea44:	b2db      	uxtb	r3, r3
 800ea46:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800ea4a:	b29b      	uxth	r3, r3
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f7fa fcf3 	bl	8009438 <lwip_htons>
 800ea52:	4603      	mov	r3, r0
 800ea54:	b21b      	sxth	r3, r3
 800ea56:	4323      	orrs	r3, r4
 800ea58:	b21a      	sxth	r2, r3
 800ea5a:	4b57      	ldr	r3, [pc, #348]	@ (800ebb8 <tcp_receive+0x888>)
 800ea5c:	691b      	ldr	r3, [r3, #16]
 800ea5e:	b292      	uxth	r2, r2
 800ea60:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ea66:	4b54      	ldr	r3, [pc, #336]	@ (800ebb8 <tcp_receive+0x888>)
 800ea68:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ea6a:	4b53      	ldr	r3, [pc, #332]	@ (800ebb8 <tcp_receive+0x888>)
 800ea6c:	691b      	ldr	r3, [r3, #16]
 800ea6e:	899b      	ldrh	r3, [r3, #12]
 800ea70:	b29b      	uxth	r3, r3
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7fa fce0 	bl	8009438 <lwip_htons>
 800ea78:	4603      	mov	r3, r0
 800ea7a:	b2db      	uxtb	r3, r3
 800ea7c:	f003 0302 	and.w	r3, r3, #2
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d005      	beq.n	800ea90 <tcp_receive+0x760>
            inseg.len -= 1;
 800ea84:	4b4c      	ldr	r3, [pc, #304]	@ (800ebb8 <tcp_receive+0x888>)
 800ea86:	891b      	ldrh	r3, [r3, #8]
 800ea88:	3b01      	subs	r3, #1
 800ea8a:	b29a      	uxth	r2, r3
 800ea8c:	4b4a      	ldr	r3, [pc, #296]	@ (800ebb8 <tcp_receive+0x888>)
 800ea8e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ea90:	4b49      	ldr	r3, [pc, #292]	@ (800ebb8 <tcp_receive+0x888>)
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	4a48      	ldr	r2, [pc, #288]	@ (800ebb8 <tcp_receive+0x888>)
 800ea96:	8912      	ldrh	r2, [r2, #8]
 800ea98:	4611      	mov	r1, r2
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f7fb ffaa 	bl	800a9f4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800eaa0:	4b45      	ldr	r3, [pc, #276]	@ (800ebb8 <tcp_receive+0x888>)
 800eaa2:	891c      	ldrh	r4, [r3, #8]
 800eaa4:	4b44      	ldr	r3, [pc, #272]	@ (800ebb8 <tcp_receive+0x888>)
 800eaa6:	691b      	ldr	r3, [r3, #16]
 800eaa8:	899b      	ldrh	r3, [r3, #12]
 800eaaa:	b29b      	uxth	r3, r3
 800eaac:	4618      	mov	r0, r3
 800eaae:	f7fa fcc3 	bl	8009438 <lwip_htons>
 800eab2:	4603      	mov	r3, r0
 800eab4:	b2db      	uxtb	r3, r3
 800eab6:	f003 0303 	and.w	r3, r3, #3
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d001      	beq.n	800eac2 <tcp_receive+0x792>
 800eabe:	2301      	movs	r3, #1
 800eac0:	e000      	b.n	800eac4 <tcp_receive+0x794>
 800eac2:	2300      	movs	r3, #0
 800eac4:	4423      	add	r3, r4
 800eac6:	b29a      	uxth	r2, r3
 800eac8:	4b3c      	ldr	r3, [pc, #240]	@ (800ebbc <tcp_receive+0x88c>)
 800eaca:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800eacc:	4b3b      	ldr	r3, [pc, #236]	@ (800ebbc <tcp_receive+0x88c>)
 800eace:	881b      	ldrh	r3, [r3, #0]
 800ead0:	461a      	mov	r2, r3
 800ead2:	4b38      	ldr	r3, [pc, #224]	@ (800ebb4 <tcp_receive+0x884>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	441a      	add	r2, r3
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eadc:	6879      	ldr	r1, [r7, #4]
 800eade:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800eae0:	440b      	add	r3, r1
 800eae2:	429a      	cmp	r2, r3
 800eae4:	d006      	beq.n	800eaf4 <tcp_receive+0x7c4>
 800eae6:	4b36      	ldr	r3, [pc, #216]	@ (800ebc0 <tcp_receive+0x890>)
 800eae8:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800eaec:	4935      	ldr	r1, [pc, #212]	@ (800ebc4 <tcp_receive+0x894>)
 800eaee:	4836      	ldr	r0, [pc, #216]	@ (800ebc8 <tcp_receive+0x898>)
 800eaf0:	f008 f8e4 	bl	8016cbc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	f000 80e6 	beq.w	800ecca <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800eafe:	4b2e      	ldr	r3, [pc, #184]	@ (800ebb8 <tcp_receive+0x888>)
 800eb00:	691b      	ldr	r3, [r3, #16]
 800eb02:	899b      	ldrh	r3, [r3, #12]
 800eb04:	b29b      	uxth	r3, r3
 800eb06:	4618      	mov	r0, r3
 800eb08:	f7fa fc96 	bl	8009438 <lwip_htons>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	b2db      	uxtb	r3, r3
 800eb10:	f003 0301 	and.w	r3, r3, #1
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d010      	beq.n	800eb3a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800eb18:	e00a      	b.n	800eb30 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb1e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb24:	681a      	ldr	r2, [r3, #0]
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800eb2a:	68f8      	ldr	r0, [r7, #12]
 800eb2c:	f7fd fc27 	bl	800c37e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d1f0      	bne.n	800eb1a <tcp_receive+0x7ea>
 800eb38:	e0c7      	b.n	800ecca <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800eb40:	e051      	b.n	800ebe6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800eb42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb44:	691b      	ldr	r3, [r3, #16]
 800eb46:	899b      	ldrh	r3, [r3, #12]
 800eb48:	b29b      	uxth	r3, r3
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f7fa fc74 	bl	8009438 <lwip_htons>
 800eb50:	4603      	mov	r3, r0
 800eb52:	b2db      	uxtb	r3, r3
 800eb54:	f003 0301 	and.w	r3, r3, #1
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d03c      	beq.n	800ebd6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800eb5c:	4b16      	ldr	r3, [pc, #88]	@ (800ebb8 <tcp_receive+0x888>)
 800eb5e:	691b      	ldr	r3, [r3, #16]
 800eb60:	899b      	ldrh	r3, [r3, #12]
 800eb62:	b29b      	uxth	r3, r3
 800eb64:	4618      	mov	r0, r3
 800eb66:	f7fa fc67 	bl	8009438 <lwip_htons>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	b2db      	uxtb	r3, r3
 800eb6e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d12f      	bne.n	800ebd6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800eb76:	4b10      	ldr	r3, [pc, #64]	@ (800ebb8 <tcp_receive+0x888>)
 800eb78:	691b      	ldr	r3, [r3, #16]
 800eb7a:	899b      	ldrh	r3, [r3, #12]
 800eb7c:	b29c      	uxth	r4, r3
 800eb7e:	2001      	movs	r0, #1
 800eb80:	f7fa fc5a 	bl	8009438 <lwip_htons>
 800eb84:	4603      	mov	r3, r0
 800eb86:	461a      	mov	r2, r3
 800eb88:	4b0b      	ldr	r3, [pc, #44]	@ (800ebb8 <tcp_receive+0x888>)
 800eb8a:	691b      	ldr	r3, [r3, #16]
 800eb8c:	4322      	orrs	r2, r4
 800eb8e:	b292      	uxth	r2, r2
 800eb90:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800eb92:	4b09      	ldr	r3, [pc, #36]	@ (800ebb8 <tcp_receive+0x888>)
 800eb94:	891c      	ldrh	r4, [r3, #8]
 800eb96:	4b08      	ldr	r3, [pc, #32]	@ (800ebb8 <tcp_receive+0x888>)
 800eb98:	691b      	ldr	r3, [r3, #16]
 800eb9a:	899b      	ldrh	r3, [r3, #12]
 800eb9c:	b29b      	uxth	r3, r3
 800eb9e:	4618      	mov	r0, r3
 800eba0:	f7fa fc4a 	bl	8009438 <lwip_htons>
 800eba4:	4603      	mov	r3, r0
 800eba6:	b2db      	uxtb	r3, r3
 800eba8:	f003 0303 	and.w	r3, r3, #3
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d00d      	beq.n	800ebcc <tcp_receive+0x89c>
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	e00c      	b.n	800ebce <tcp_receive+0x89e>
 800ebb4:	2400332c 	.word	0x2400332c
 800ebb8:	24003308 	.word	0x24003308
 800ebbc:	24003336 	.word	0x24003336
 800ebc0:	08019aac 	.word	0x08019aac
 800ebc4:	08019fdc 	.word	0x08019fdc
 800ebc8:	08019af8 	.word	0x08019af8
 800ebcc:	2300      	movs	r3, #0
 800ebce:	4423      	add	r3, r4
 800ebd0:	b29a      	uxth	r2, r3
 800ebd2:	4b98      	ldr	r3, [pc, #608]	@ (800ee34 <tcp_receive+0xb04>)
 800ebd4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800ebd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebd8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800ebda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800ebe0:	6938      	ldr	r0, [r7, #16]
 800ebe2:	f7fd fbcc 	bl	800c37e <tcp_seg_free>
            while (next &&
 800ebe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d00e      	beq.n	800ec0a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ebec:	4b91      	ldr	r3, [pc, #580]	@ (800ee34 <tcp_receive+0xb04>)
 800ebee:	881b      	ldrh	r3, [r3, #0]
 800ebf0:	461a      	mov	r2, r3
 800ebf2:	4b91      	ldr	r3, [pc, #580]	@ (800ee38 <tcp_receive+0xb08>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	441a      	add	r2, r3
 800ebf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebfa:	691b      	ldr	r3, [r3, #16]
 800ebfc:	685b      	ldr	r3, [r3, #4]
 800ebfe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ec00:	8909      	ldrh	r1, [r1, #8]
 800ec02:	440b      	add	r3, r1
 800ec04:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	da9b      	bge.n	800eb42 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ec0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d059      	beq.n	800ecc4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800ec10:	4b88      	ldr	r3, [pc, #544]	@ (800ee34 <tcp_receive+0xb04>)
 800ec12:	881b      	ldrh	r3, [r3, #0]
 800ec14:	461a      	mov	r2, r3
 800ec16:	4b88      	ldr	r3, [pc, #544]	@ (800ee38 <tcp_receive+0xb08>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	441a      	add	r2, r3
 800ec1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec1e:	691b      	ldr	r3, [r3, #16]
 800ec20:	685b      	ldr	r3, [r3, #4]
 800ec22:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	dd4d      	ble.n	800ecc4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ec28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec2a:	691b      	ldr	r3, [r3, #16]
 800ec2c:	685b      	ldr	r3, [r3, #4]
 800ec2e:	b29a      	uxth	r2, r3
 800ec30:	4b81      	ldr	r3, [pc, #516]	@ (800ee38 <tcp_receive+0xb08>)
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	b29b      	uxth	r3, r3
 800ec36:	1ad3      	subs	r3, r2, r3
 800ec38:	b29a      	uxth	r2, r3
 800ec3a:	4b80      	ldr	r3, [pc, #512]	@ (800ee3c <tcp_receive+0xb0c>)
 800ec3c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ec3e:	4b7f      	ldr	r3, [pc, #508]	@ (800ee3c <tcp_receive+0xb0c>)
 800ec40:	691b      	ldr	r3, [r3, #16]
 800ec42:	899b      	ldrh	r3, [r3, #12]
 800ec44:	b29b      	uxth	r3, r3
 800ec46:	4618      	mov	r0, r3
 800ec48:	f7fa fbf6 	bl	8009438 <lwip_htons>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	b2db      	uxtb	r3, r3
 800ec50:	f003 0302 	and.w	r3, r3, #2
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d005      	beq.n	800ec64 <tcp_receive+0x934>
                inseg.len -= 1;
 800ec58:	4b78      	ldr	r3, [pc, #480]	@ (800ee3c <tcp_receive+0xb0c>)
 800ec5a:	891b      	ldrh	r3, [r3, #8]
 800ec5c:	3b01      	subs	r3, #1
 800ec5e:	b29a      	uxth	r2, r3
 800ec60:	4b76      	ldr	r3, [pc, #472]	@ (800ee3c <tcp_receive+0xb0c>)
 800ec62:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ec64:	4b75      	ldr	r3, [pc, #468]	@ (800ee3c <tcp_receive+0xb0c>)
 800ec66:	685b      	ldr	r3, [r3, #4]
 800ec68:	4a74      	ldr	r2, [pc, #464]	@ (800ee3c <tcp_receive+0xb0c>)
 800ec6a:	8912      	ldrh	r2, [r2, #8]
 800ec6c:	4611      	mov	r1, r2
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f7fb fec0 	bl	800a9f4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ec74:	4b71      	ldr	r3, [pc, #452]	@ (800ee3c <tcp_receive+0xb0c>)
 800ec76:	891c      	ldrh	r4, [r3, #8]
 800ec78:	4b70      	ldr	r3, [pc, #448]	@ (800ee3c <tcp_receive+0xb0c>)
 800ec7a:	691b      	ldr	r3, [r3, #16]
 800ec7c:	899b      	ldrh	r3, [r3, #12]
 800ec7e:	b29b      	uxth	r3, r3
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7fa fbd9 	bl	8009438 <lwip_htons>
 800ec86:	4603      	mov	r3, r0
 800ec88:	b2db      	uxtb	r3, r3
 800ec8a:	f003 0303 	and.w	r3, r3, #3
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d001      	beq.n	800ec96 <tcp_receive+0x966>
 800ec92:	2301      	movs	r3, #1
 800ec94:	e000      	b.n	800ec98 <tcp_receive+0x968>
 800ec96:	2300      	movs	r3, #0
 800ec98:	4423      	add	r3, r4
 800ec9a:	b29a      	uxth	r2, r3
 800ec9c:	4b65      	ldr	r3, [pc, #404]	@ (800ee34 <tcp_receive+0xb04>)
 800ec9e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800eca0:	4b64      	ldr	r3, [pc, #400]	@ (800ee34 <tcp_receive+0xb04>)
 800eca2:	881b      	ldrh	r3, [r3, #0]
 800eca4:	461a      	mov	r2, r3
 800eca6:	4b64      	ldr	r3, [pc, #400]	@ (800ee38 <tcp_receive+0xb08>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	441a      	add	r2, r3
 800ecac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ecae:	691b      	ldr	r3, [r3, #16]
 800ecb0:	685b      	ldr	r3, [r3, #4]
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	d006      	beq.n	800ecc4 <tcp_receive+0x994>
 800ecb6:	4b62      	ldr	r3, [pc, #392]	@ (800ee40 <tcp_receive+0xb10>)
 800ecb8:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800ecbc:	4961      	ldr	r1, [pc, #388]	@ (800ee44 <tcp_receive+0xb14>)
 800ecbe:	4862      	ldr	r0, [pc, #392]	@ (800ee48 <tcp_receive+0xb18>)
 800ecc0:	f007 fffc 	bl	8016cbc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ecc8:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ecca:	4b5a      	ldr	r3, [pc, #360]	@ (800ee34 <tcp_receive+0xb04>)
 800eccc:	881b      	ldrh	r3, [r3, #0]
 800ecce:	461a      	mov	r2, r3
 800ecd0:	4b59      	ldr	r3, [pc, #356]	@ (800ee38 <tcp_receive+0xb08>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	441a      	add	r2, r3
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ecde:	4b55      	ldr	r3, [pc, #340]	@ (800ee34 <tcp_receive+0xb04>)
 800ece0:	881b      	ldrh	r3, [r3, #0]
 800ece2:	429a      	cmp	r2, r3
 800ece4:	d206      	bcs.n	800ecf4 <tcp_receive+0x9c4>
 800ece6:	4b56      	ldr	r3, [pc, #344]	@ (800ee40 <tcp_receive+0xb10>)
 800ece8:	f240 6207 	movw	r2, #1543	@ 0x607
 800ecec:	4957      	ldr	r1, [pc, #348]	@ (800ee4c <tcp_receive+0xb1c>)
 800ecee:	4856      	ldr	r0, [pc, #344]	@ (800ee48 <tcp_receive+0xb18>)
 800ecf0:	f007 ffe4 	bl	8016cbc <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ecf8:	4b4e      	ldr	r3, [pc, #312]	@ (800ee34 <tcp_receive+0xb04>)
 800ecfa:	881b      	ldrh	r3, [r3, #0]
 800ecfc:	1ad3      	subs	r3, r2, r3
 800ecfe:	b29a      	uxth	r2, r3
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f7fc fdef 	bl	800b8e8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ed0a:	4b4c      	ldr	r3, [pc, #304]	@ (800ee3c <tcp_receive+0xb0c>)
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	891b      	ldrh	r3, [r3, #8]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d006      	beq.n	800ed22 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800ed14:	4b49      	ldr	r3, [pc, #292]	@ (800ee3c <tcp_receive+0xb0c>)
 800ed16:	685b      	ldr	r3, [r3, #4]
 800ed18:	4a4d      	ldr	r2, [pc, #308]	@ (800ee50 <tcp_receive+0xb20>)
 800ed1a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800ed1c:	4b47      	ldr	r3, [pc, #284]	@ (800ee3c <tcp_receive+0xb0c>)
 800ed1e:	2200      	movs	r2, #0
 800ed20:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ed22:	4b46      	ldr	r3, [pc, #280]	@ (800ee3c <tcp_receive+0xb0c>)
 800ed24:	691b      	ldr	r3, [r3, #16]
 800ed26:	899b      	ldrh	r3, [r3, #12]
 800ed28:	b29b      	uxth	r3, r3
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f7fa fb84 	bl	8009438 <lwip_htons>
 800ed30:	4603      	mov	r3, r0
 800ed32:	b2db      	uxtb	r3, r3
 800ed34:	f003 0301 	and.w	r3, r3, #1
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	f000 80b8 	beq.w	800eeae <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800ed3e:	4b45      	ldr	r3, [pc, #276]	@ (800ee54 <tcp_receive+0xb24>)
 800ed40:	781b      	ldrb	r3, [r3, #0]
 800ed42:	f043 0320 	orr.w	r3, r3, #32
 800ed46:	b2da      	uxtb	r2, r3
 800ed48:	4b42      	ldr	r3, [pc, #264]	@ (800ee54 <tcp_receive+0xb24>)
 800ed4a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ed4c:	e0af      	b.n	800eeae <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ed52:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ed58:	691b      	ldr	r3, [r3, #16]
 800ed5a:	685b      	ldr	r3, [r3, #4]
 800ed5c:	4a36      	ldr	r2, [pc, #216]	@ (800ee38 <tcp_receive+0xb08>)
 800ed5e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ed60:	68bb      	ldr	r3, [r7, #8]
 800ed62:	891b      	ldrh	r3, [r3, #8]
 800ed64:	461c      	mov	r4, r3
 800ed66:	68bb      	ldr	r3, [r7, #8]
 800ed68:	691b      	ldr	r3, [r3, #16]
 800ed6a:	899b      	ldrh	r3, [r3, #12]
 800ed6c:	b29b      	uxth	r3, r3
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f7fa fb62 	bl	8009438 <lwip_htons>
 800ed74:	4603      	mov	r3, r0
 800ed76:	b2db      	uxtb	r3, r3
 800ed78:	f003 0303 	and.w	r3, r3, #3
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d001      	beq.n	800ed84 <tcp_receive+0xa54>
 800ed80:	2301      	movs	r3, #1
 800ed82:	e000      	b.n	800ed86 <tcp_receive+0xa56>
 800ed84:	2300      	movs	r3, #0
 800ed86:	191a      	adds	r2, r3, r4
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed8c:	441a      	add	r2, r3
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed96:	461c      	mov	r4, r3
 800ed98:	68bb      	ldr	r3, [r7, #8]
 800ed9a:	891b      	ldrh	r3, [r3, #8]
 800ed9c:	461d      	mov	r5, r3
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	691b      	ldr	r3, [r3, #16]
 800eda2:	899b      	ldrh	r3, [r3, #12]
 800eda4:	b29b      	uxth	r3, r3
 800eda6:	4618      	mov	r0, r3
 800eda8:	f7fa fb46 	bl	8009438 <lwip_htons>
 800edac:	4603      	mov	r3, r0
 800edae:	b2db      	uxtb	r3, r3
 800edb0:	f003 0303 	and.w	r3, r3, #3
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d001      	beq.n	800edbc <tcp_receive+0xa8c>
 800edb8:	2301      	movs	r3, #1
 800edba:	e000      	b.n	800edbe <tcp_receive+0xa8e>
 800edbc:	2300      	movs	r3, #0
 800edbe:	442b      	add	r3, r5
 800edc0:	429c      	cmp	r4, r3
 800edc2:	d206      	bcs.n	800edd2 <tcp_receive+0xaa2>
 800edc4:	4b1e      	ldr	r3, [pc, #120]	@ (800ee40 <tcp_receive+0xb10>)
 800edc6:	f240 622b 	movw	r2, #1579	@ 0x62b
 800edca:	4923      	ldr	r1, [pc, #140]	@ (800ee58 <tcp_receive+0xb28>)
 800edcc:	481e      	ldr	r0, [pc, #120]	@ (800ee48 <tcp_receive+0xb18>)
 800edce:	f007 ff75 	bl	8016cbc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	891b      	ldrh	r3, [r3, #8]
 800edd6:	461c      	mov	r4, r3
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	691b      	ldr	r3, [r3, #16]
 800eddc:	899b      	ldrh	r3, [r3, #12]
 800edde:	b29b      	uxth	r3, r3
 800ede0:	4618      	mov	r0, r3
 800ede2:	f7fa fb29 	bl	8009438 <lwip_htons>
 800ede6:	4603      	mov	r3, r0
 800ede8:	b2db      	uxtb	r3, r3
 800edea:	f003 0303 	and.w	r3, r3, #3
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d001      	beq.n	800edf6 <tcp_receive+0xac6>
 800edf2:	2301      	movs	r3, #1
 800edf4:	e000      	b.n	800edf8 <tcp_receive+0xac8>
 800edf6:	2300      	movs	r3, #0
 800edf8:	1919      	adds	r1, r3, r4
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800edfe:	b28b      	uxth	r3, r1
 800ee00:	1ad3      	subs	r3, r2, r3
 800ee02:	b29a      	uxth	r2, r3
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f7fc fd6d 	bl	800b8e8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800ee0e:	68bb      	ldr	r3, [r7, #8]
 800ee10:	685b      	ldr	r3, [r3, #4]
 800ee12:	891b      	ldrh	r3, [r3, #8]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d028      	beq.n	800ee6a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ee18:	4b0d      	ldr	r3, [pc, #52]	@ (800ee50 <tcp_receive+0xb20>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d01d      	beq.n	800ee5c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800ee20:	4b0b      	ldr	r3, [pc, #44]	@ (800ee50 <tcp_receive+0xb20>)
 800ee22:	681a      	ldr	r2, [r3, #0]
 800ee24:	68bb      	ldr	r3, [r7, #8]
 800ee26:	685b      	ldr	r3, [r3, #4]
 800ee28:	4619      	mov	r1, r3
 800ee2a:	4610      	mov	r0, r2
 800ee2c:	f7fc f85c 	bl	800aee8 <pbuf_cat>
 800ee30:	e018      	b.n	800ee64 <tcp_receive+0xb34>
 800ee32:	bf00      	nop
 800ee34:	24003336 	.word	0x24003336
 800ee38:	2400332c 	.word	0x2400332c
 800ee3c:	24003308 	.word	0x24003308
 800ee40:	08019aac 	.word	0x08019aac
 800ee44:	0801a014 	.word	0x0801a014
 800ee48:	08019af8 	.word	0x08019af8
 800ee4c:	0801a050 	.word	0x0801a050
 800ee50:	2400333c 	.word	0x2400333c
 800ee54:	24003339 	.word	0x24003339
 800ee58:	0801a070 	.word	0x0801a070
            } else {
              recv_data = cseg->p;
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	685b      	ldr	r3, [r3, #4]
 800ee60:	4a70      	ldr	r2, [pc, #448]	@ (800f024 <tcp_receive+0xcf4>)
 800ee62:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ee64:	68bb      	ldr	r3, [r7, #8]
 800ee66:	2200      	movs	r2, #0
 800ee68:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	691b      	ldr	r3, [r3, #16]
 800ee6e:	899b      	ldrh	r3, [r3, #12]
 800ee70:	b29b      	uxth	r3, r3
 800ee72:	4618      	mov	r0, r3
 800ee74:	f7fa fae0 	bl	8009438 <lwip_htons>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	b2db      	uxtb	r3, r3
 800ee7c:	f003 0301 	and.w	r3, r3, #1
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d00d      	beq.n	800eea0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ee84:	4b68      	ldr	r3, [pc, #416]	@ (800f028 <tcp_receive+0xcf8>)
 800ee86:	781b      	ldrb	r3, [r3, #0]
 800ee88:	f043 0320 	orr.w	r3, r3, #32
 800ee8c:	b2da      	uxtb	r2, r3
 800ee8e:	4b66      	ldr	r3, [pc, #408]	@ (800f028 <tcp_receive+0xcf8>)
 800ee90:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	7d1b      	ldrb	r3, [r3, #20]
 800ee96:	2b04      	cmp	r3, #4
 800ee98:	d102      	bne.n	800eea0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	2207      	movs	r2, #7
 800ee9e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	681a      	ldr	r2, [r3, #0]
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800eea8:	68b8      	ldr	r0, [r7, #8]
 800eeaa:	f7fd fa68 	bl	800c37e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d008      	beq.n	800eec8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eeba:	691b      	ldr	r3, [r3, #16]
 800eebc:	685a      	ldr	r2, [r3, #4]
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800eec2:	429a      	cmp	r2, r3
 800eec4:	f43f af43 	beq.w	800ed4e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	8b5b      	ldrh	r3, [r3, #26]
 800eecc:	f003 0301 	and.w	r3, r3, #1
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d00e      	beq.n	800eef2 <tcp_receive+0xbc2>
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	8b5b      	ldrh	r3, [r3, #26]
 800eed8:	f023 0301 	bic.w	r3, r3, #1
 800eedc:	b29a      	uxth	r2, r3
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	835a      	strh	r2, [r3, #26]
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	8b5b      	ldrh	r3, [r3, #26]
 800eee6:	f043 0302 	orr.w	r3, r3, #2
 800eeea:	b29a      	uxth	r2, r3
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800eef0:	e187      	b.n	800f202 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	8b5b      	ldrh	r3, [r3, #26]
 800eef6:	f043 0301 	orr.w	r3, r3, #1
 800eefa:	b29a      	uxth	r2, r3
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ef00:	e17f      	b.n	800f202 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d106      	bne.n	800ef18 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ef0a:	4848      	ldr	r0, [pc, #288]	@ (800f02c <tcp_receive+0xcfc>)
 800ef0c:	f7fd fa52 	bl	800c3b4 <tcp_seg_copy>
 800ef10:	4602      	mov	r2, r0
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	675a      	str	r2, [r3, #116]	@ 0x74
 800ef16:	e16c      	b.n	800f1f2 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ef18:	2300      	movs	r3, #0
 800ef1a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ef20:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ef22:	e156      	b.n	800f1d2 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800ef24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef26:	691b      	ldr	r3, [r3, #16]
 800ef28:	685a      	ldr	r2, [r3, #4]
 800ef2a:	4b41      	ldr	r3, [pc, #260]	@ (800f030 <tcp_receive+0xd00>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	429a      	cmp	r2, r3
 800ef30:	d11d      	bne.n	800ef6e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ef32:	4b3e      	ldr	r3, [pc, #248]	@ (800f02c <tcp_receive+0xcfc>)
 800ef34:	891a      	ldrh	r2, [r3, #8]
 800ef36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef38:	891b      	ldrh	r3, [r3, #8]
 800ef3a:	429a      	cmp	r2, r3
 800ef3c:	f240 814e 	bls.w	800f1dc <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ef40:	483a      	ldr	r0, [pc, #232]	@ (800f02c <tcp_receive+0xcfc>)
 800ef42:	f7fd fa37 	bl	800c3b4 <tcp_seg_copy>
 800ef46:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ef48:	697b      	ldr	r3, [r7, #20]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	f000 8148 	beq.w	800f1e0 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800ef50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d003      	beq.n	800ef5e <tcp_receive+0xc2e>
                    prev->next = cseg;
 800ef56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef58:	697a      	ldr	r2, [r7, #20]
 800ef5a:	601a      	str	r2, [r3, #0]
 800ef5c:	e002      	b.n	800ef64 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	697a      	ldr	r2, [r7, #20]
 800ef62:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ef64:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ef66:	6978      	ldr	r0, [r7, #20]
 800ef68:	f7ff f8de 	bl	800e128 <tcp_oos_insert_segment>
                }
                break;
 800ef6c:	e138      	b.n	800f1e0 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ef6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d117      	bne.n	800efa4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ef74:	4b2e      	ldr	r3, [pc, #184]	@ (800f030 <tcp_receive+0xd00>)
 800ef76:	681a      	ldr	r2, [r3, #0]
 800ef78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef7a:	691b      	ldr	r3, [r3, #16]
 800ef7c:	685b      	ldr	r3, [r3, #4]
 800ef7e:	1ad3      	subs	r3, r2, r3
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	da57      	bge.n	800f034 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ef84:	4829      	ldr	r0, [pc, #164]	@ (800f02c <tcp_receive+0xcfc>)
 800ef86:	f7fd fa15 	bl	800c3b4 <tcp_seg_copy>
 800ef8a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ef8c:	69bb      	ldr	r3, [r7, #24]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	f000 8128 	beq.w	800f1e4 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	69ba      	ldr	r2, [r7, #24]
 800ef98:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ef9a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ef9c:	69b8      	ldr	r0, [r7, #24]
 800ef9e:	f7ff f8c3 	bl	800e128 <tcp_oos_insert_segment>
                  }
                  break;
 800efa2:	e11f      	b.n	800f1e4 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800efa4:	4b22      	ldr	r3, [pc, #136]	@ (800f030 <tcp_receive+0xd00>)
 800efa6:	681a      	ldr	r2, [r3, #0]
 800efa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efaa:	691b      	ldr	r3, [r3, #16]
 800efac:	685b      	ldr	r3, [r3, #4]
 800efae:	1ad3      	subs	r3, r2, r3
 800efb0:	3b01      	subs	r3, #1
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	db3e      	blt.n	800f034 <tcp_receive+0xd04>
 800efb6:	4b1e      	ldr	r3, [pc, #120]	@ (800f030 <tcp_receive+0xd00>)
 800efb8:	681a      	ldr	r2, [r3, #0]
 800efba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efbc:	691b      	ldr	r3, [r3, #16]
 800efbe:	685b      	ldr	r3, [r3, #4]
 800efc0:	1ad3      	subs	r3, r2, r3
 800efc2:	3301      	adds	r3, #1
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	dc35      	bgt.n	800f034 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800efc8:	4818      	ldr	r0, [pc, #96]	@ (800f02c <tcp_receive+0xcfc>)
 800efca:	f7fd f9f3 	bl	800c3b4 <tcp_seg_copy>
 800efce:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800efd0:	69fb      	ldr	r3, [r7, #28]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	f000 8108 	beq.w	800f1e8 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800efd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efda:	691b      	ldr	r3, [r3, #16]
 800efdc:	685b      	ldr	r3, [r3, #4]
 800efde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800efe0:	8912      	ldrh	r2, [r2, #8]
 800efe2:	441a      	add	r2, r3
 800efe4:	4b12      	ldr	r3, [pc, #72]	@ (800f030 <tcp_receive+0xd00>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	1ad3      	subs	r3, r2, r3
 800efea:	2b00      	cmp	r3, #0
 800efec:	dd12      	ble.n	800f014 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800efee:	4b10      	ldr	r3, [pc, #64]	@ (800f030 <tcp_receive+0xd00>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	b29a      	uxth	r2, r3
 800eff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eff6:	691b      	ldr	r3, [r3, #16]
 800eff8:	685b      	ldr	r3, [r3, #4]
 800effa:	b29b      	uxth	r3, r3
 800effc:	1ad3      	subs	r3, r2, r3
 800effe:	b29a      	uxth	r2, r3
 800f000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f002:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f006:	685a      	ldr	r2, [r3, #4]
 800f008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f00a:	891b      	ldrh	r3, [r3, #8]
 800f00c:	4619      	mov	r1, r3
 800f00e:	4610      	mov	r0, r2
 800f010:	f7fb fcf0 	bl	800a9f4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f016:	69fa      	ldr	r2, [r7, #28]
 800f018:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f01a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f01c:	69f8      	ldr	r0, [r7, #28]
 800f01e:	f7ff f883 	bl	800e128 <tcp_oos_insert_segment>
                  }
                  break;
 800f022:	e0e1      	b.n	800f1e8 <tcp_receive+0xeb8>
 800f024:	2400333c 	.word	0x2400333c
 800f028:	24003339 	.word	0x24003339
 800f02c:	24003308 	.word	0x24003308
 800f030:	2400332c 	.word	0x2400332c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f036:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	f040 80c5 	bne.w	800f1cc <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f042:	4b7f      	ldr	r3, [pc, #508]	@ (800f240 <tcp_receive+0xf10>)
 800f044:	681a      	ldr	r2, [r3, #0]
 800f046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f048:	691b      	ldr	r3, [r3, #16]
 800f04a:	685b      	ldr	r3, [r3, #4]
 800f04c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f04e:	2b00      	cmp	r3, #0
 800f050:	f340 80bc 	ble.w	800f1cc <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f056:	691b      	ldr	r3, [r3, #16]
 800f058:	899b      	ldrh	r3, [r3, #12]
 800f05a:	b29b      	uxth	r3, r3
 800f05c:	4618      	mov	r0, r3
 800f05e:	f7fa f9eb 	bl	8009438 <lwip_htons>
 800f062:	4603      	mov	r3, r0
 800f064:	b2db      	uxtb	r3, r3
 800f066:	f003 0301 	and.w	r3, r3, #1
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	f040 80be 	bne.w	800f1ec <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f070:	4874      	ldr	r0, [pc, #464]	@ (800f244 <tcp_receive+0xf14>)
 800f072:	f7fd f99f 	bl	800c3b4 <tcp_seg_copy>
 800f076:	4602      	mov	r2, r0
 800f078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f07a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f07c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	2b00      	cmp	r3, #0
 800f082:	f000 80b5 	beq.w	800f1f0 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f088:	691b      	ldr	r3, [r3, #16]
 800f08a:	685b      	ldr	r3, [r3, #4]
 800f08c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f08e:	8912      	ldrh	r2, [r2, #8]
 800f090:	441a      	add	r2, r3
 800f092:	4b6b      	ldr	r3, [pc, #428]	@ (800f240 <tcp_receive+0xf10>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	1ad3      	subs	r3, r2, r3
 800f098:	2b00      	cmp	r3, #0
 800f09a:	dd12      	ble.n	800f0c2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f09c:	4b68      	ldr	r3, [pc, #416]	@ (800f240 <tcp_receive+0xf10>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	b29a      	uxth	r2, r3
 800f0a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0a4:	691b      	ldr	r3, [r3, #16]
 800f0a6:	685b      	ldr	r3, [r3, #4]
 800f0a8:	b29b      	uxth	r3, r3
 800f0aa:	1ad3      	subs	r3, r2, r3
 800f0ac:	b29a      	uxth	r2, r3
 800f0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0b0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0b4:	685a      	ldr	r2, [r3, #4]
 800f0b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0b8:	891b      	ldrh	r3, [r3, #8]
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	4610      	mov	r0, r2
 800f0be:	f7fb fc99 	bl	800a9f4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f0c2:	4b61      	ldr	r3, [pc, #388]	@ (800f248 <tcp_receive+0xf18>)
 800f0c4:	881b      	ldrh	r3, [r3, #0]
 800f0c6:	461a      	mov	r2, r3
 800f0c8:	4b5d      	ldr	r3, [pc, #372]	@ (800f240 <tcp_receive+0xf10>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	441a      	add	r2, r3
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0d2:	6879      	ldr	r1, [r7, #4]
 800f0d4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f0d6:	440b      	add	r3, r1
 800f0d8:	1ad3      	subs	r3, r2, r3
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	f340 8088 	ble.w	800f1f0 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f0e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	691b      	ldr	r3, [r3, #16]
 800f0e6:	899b      	ldrh	r3, [r3, #12]
 800f0e8:	b29b      	uxth	r3, r3
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f7fa f9a4 	bl	8009438 <lwip_htons>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	b2db      	uxtb	r3, r3
 800f0f4:	f003 0301 	and.w	r3, r3, #1
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d021      	beq.n	800f140 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f0fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	691b      	ldr	r3, [r3, #16]
 800f102:	899b      	ldrh	r3, [r3, #12]
 800f104:	b29b      	uxth	r3, r3
 800f106:	b21b      	sxth	r3, r3
 800f108:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f10c:	b21c      	sxth	r4, r3
 800f10e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	691b      	ldr	r3, [r3, #16]
 800f114:	899b      	ldrh	r3, [r3, #12]
 800f116:	b29b      	uxth	r3, r3
 800f118:	4618      	mov	r0, r3
 800f11a:	f7fa f98d 	bl	8009438 <lwip_htons>
 800f11e:	4603      	mov	r3, r0
 800f120:	b2db      	uxtb	r3, r3
 800f122:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800f126:	b29b      	uxth	r3, r3
 800f128:	4618      	mov	r0, r3
 800f12a:	f7fa f985 	bl	8009438 <lwip_htons>
 800f12e:	4603      	mov	r3, r0
 800f130:	b21b      	sxth	r3, r3
 800f132:	4323      	orrs	r3, r4
 800f134:	b21a      	sxth	r2, r3
 800f136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	691b      	ldr	r3, [r3, #16]
 800f13c:	b292      	uxth	r2, r2
 800f13e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f144:	b29a      	uxth	r2, r3
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f14a:	4413      	add	r3, r2
 800f14c:	b299      	uxth	r1, r3
 800f14e:	4b3c      	ldr	r3, [pc, #240]	@ (800f240 <tcp_receive+0xf10>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	b29a      	uxth	r2, r3
 800f154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	1a8a      	subs	r2, r1, r2
 800f15a:	b292      	uxth	r2, r2
 800f15c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f15e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	685a      	ldr	r2, [r3, #4]
 800f164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	891b      	ldrh	r3, [r3, #8]
 800f16a:	4619      	mov	r1, r3
 800f16c:	4610      	mov	r0, r2
 800f16e:	f7fb fc41 	bl	800a9f4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	891c      	ldrh	r4, [r3, #8]
 800f178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	691b      	ldr	r3, [r3, #16]
 800f17e:	899b      	ldrh	r3, [r3, #12]
 800f180:	b29b      	uxth	r3, r3
 800f182:	4618      	mov	r0, r3
 800f184:	f7fa f958 	bl	8009438 <lwip_htons>
 800f188:	4603      	mov	r3, r0
 800f18a:	b2db      	uxtb	r3, r3
 800f18c:	f003 0303 	and.w	r3, r3, #3
 800f190:	2b00      	cmp	r3, #0
 800f192:	d001      	beq.n	800f198 <tcp_receive+0xe68>
 800f194:	2301      	movs	r3, #1
 800f196:	e000      	b.n	800f19a <tcp_receive+0xe6a>
 800f198:	2300      	movs	r3, #0
 800f19a:	4423      	add	r3, r4
 800f19c:	b29a      	uxth	r2, r3
 800f19e:	4b2a      	ldr	r3, [pc, #168]	@ (800f248 <tcp_receive+0xf18>)
 800f1a0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f1a2:	4b29      	ldr	r3, [pc, #164]	@ (800f248 <tcp_receive+0xf18>)
 800f1a4:	881b      	ldrh	r3, [r3, #0]
 800f1a6:	461a      	mov	r2, r3
 800f1a8:	4b25      	ldr	r3, [pc, #148]	@ (800f240 <tcp_receive+0xf10>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	441a      	add	r2, r3
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1b2:	6879      	ldr	r1, [r7, #4]
 800f1b4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f1b6:	440b      	add	r3, r1
 800f1b8:	429a      	cmp	r2, r3
 800f1ba:	d019      	beq.n	800f1f0 <tcp_receive+0xec0>
 800f1bc:	4b23      	ldr	r3, [pc, #140]	@ (800f24c <tcp_receive+0xf1c>)
 800f1be:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800f1c2:	4923      	ldr	r1, [pc, #140]	@ (800f250 <tcp_receive+0xf20>)
 800f1c4:	4823      	ldr	r0, [pc, #140]	@ (800f254 <tcp_receive+0xf24>)
 800f1c6:	f007 fd79 	bl	8016cbc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f1ca:	e011      	b.n	800f1f0 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f1d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	f47f aea5 	bne.w	800ef24 <tcp_receive+0xbf4>
 800f1da:	e00a      	b.n	800f1f2 <tcp_receive+0xec2>
                break;
 800f1dc:	bf00      	nop
 800f1de:	e008      	b.n	800f1f2 <tcp_receive+0xec2>
                break;
 800f1e0:	bf00      	nop
 800f1e2:	e006      	b.n	800f1f2 <tcp_receive+0xec2>
                  break;
 800f1e4:	bf00      	nop
 800f1e6:	e004      	b.n	800f1f2 <tcp_receive+0xec2>
                  break;
 800f1e8:	bf00      	nop
 800f1ea:	e002      	b.n	800f1f2 <tcp_receive+0xec2>
                  break;
 800f1ec:	bf00      	nop
 800f1ee:	e000      	b.n	800f1f2 <tcp_receive+0xec2>
                break;
 800f1f0:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f001 fa48 	bl	8010688 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800f1f8:	e003      	b.n	800f202 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f1fa:	6878      	ldr	r0, [r7, #4]
 800f1fc:	f001 fa44 	bl	8010688 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f200:	e01a      	b.n	800f238 <tcp_receive+0xf08>
 800f202:	e019      	b.n	800f238 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f204:	4b0e      	ldr	r3, [pc, #56]	@ (800f240 <tcp_receive+0xf10>)
 800f206:	681a      	ldr	r2, [r3, #0]
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f20c:	1ad3      	subs	r3, r2, r3
 800f20e:	2b00      	cmp	r3, #0
 800f210:	db0a      	blt.n	800f228 <tcp_receive+0xef8>
 800f212:	4b0b      	ldr	r3, [pc, #44]	@ (800f240 <tcp_receive+0xf10>)
 800f214:	681a      	ldr	r2, [r3, #0]
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f21a:	6879      	ldr	r1, [r7, #4]
 800f21c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f21e:	440b      	add	r3, r1
 800f220:	1ad3      	subs	r3, r2, r3
 800f222:	3301      	adds	r3, #1
 800f224:	2b00      	cmp	r3, #0
 800f226:	dd07      	ble.n	800f238 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	8b5b      	ldrh	r3, [r3, #26]
 800f22c:	f043 0302 	orr.w	r3, r3, #2
 800f230:	b29a      	uxth	r2, r3
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800f236:	e7ff      	b.n	800f238 <tcp_receive+0xf08>
 800f238:	bf00      	nop
 800f23a:	3750      	adds	r7, #80	@ 0x50
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bdb0      	pop	{r4, r5, r7, pc}
 800f240:	2400332c 	.word	0x2400332c
 800f244:	24003308 	.word	0x24003308
 800f248:	24003336 	.word	0x24003336
 800f24c:	08019aac 	.word	0x08019aac
 800f250:	08019fdc 	.word	0x08019fdc
 800f254:	08019af8 	.word	0x08019af8

0800f258 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800f258:	b480      	push	{r7}
 800f25a:	b083      	sub	sp, #12
 800f25c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800f25e:	4b15      	ldr	r3, [pc, #84]	@ (800f2b4 <tcp_get_next_optbyte+0x5c>)
 800f260:	881b      	ldrh	r3, [r3, #0]
 800f262:	1c5a      	adds	r2, r3, #1
 800f264:	b291      	uxth	r1, r2
 800f266:	4a13      	ldr	r2, [pc, #76]	@ (800f2b4 <tcp_get_next_optbyte+0x5c>)
 800f268:	8011      	strh	r1, [r2, #0]
 800f26a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f26c:	4b12      	ldr	r3, [pc, #72]	@ (800f2b8 <tcp_get_next_optbyte+0x60>)
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d004      	beq.n	800f27e <tcp_get_next_optbyte+0x26>
 800f274:	4b11      	ldr	r3, [pc, #68]	@ (800f2bc <tcp_get_next_optbyte+0x64>)
 800f276:	881b      	ldrh	r3, [r3, #0]
 800f278:	88fa      	ldrh	r2, [r7, #6]
 800f27a:	429a      	cmp	r2, r3
 800f27c:	d208      	bcs.n	800f290 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f27e:	4b10      	ldr	r3, [pc, #64]	@ (800f2c0 <tcp_get_next_optbyte+0x68>)
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	3314      	adds	r3, #20
 800f284:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f286:	88fb      	ldrh	r3, [r7, #6]
 800f288:	683a      	ldr	r2, [r7, #0]
 800f28a:	4413      	add	r3, r2
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	e00b      	b.n	800f2a8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f290:	88fb      	ldrh	r3, [r7, #6]
 800f292:	b2da      	uxtb	r2, r3
 800f294:	4b09      	ldr	r3, [pc, #36]	@ (800f2bc <tcp_get_next_optbyte+0x64>)
 800f296:	881b      	ldrh	r3, [r3, #0]
 800f298:	b2db      	uxtb	r3, r3
 800f29a:	1ad3      	subs	r3, r2, r3
 800f29c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800f29e:	4b06      	ldr	r3, [pc, #24]	@ (800f2b8 <tcp_get_next_optbyte+0x60>)
 800f2a0:	681a      	ldr	r2, [r3, #0]
 800f2a2:	797b      	ldrb	r3, [r7, #5]
 800f2a4:	4413      	add	r3, r2
 800f2a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	370c      	adds	r7, #12
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b2:	4770      	bx	lr
 800f2b4:	24003328 	.word	0x24003328
 800f2b8:	24003324 	.word	0x24003324
 800f2bc:	24003322 	.word	0x24003322
 800f2c0:	2400331c 	.word	0x2400331c

0800f2c4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b084      	sub	sp, #16
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d106      	bne.n	800f2e0 <tcp_parseopt+0x1c>
 800f2d2:	4b32      	ldr	r3, [pc, #200]	@ (800f39c <tcp_parseopt+0xd8>)
 800f2d4:	f240 727d 	movw	r2, #1917	@ 0x77d
 800f2d8:	4931      	ldr	r1, [pc, #196]	@ (800f3a0 <tcp_parseopt+0xdc>)
 800f2da:	4832      	ldr	r0, [pc, #200]	@ (800f3a4 <tcp_parseopt+0xe0>)
 800f2dc:	f007 fcee 	bl	8016cbc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f2e0:	4b31      	ldr	r3, [pc, #196]	@ (800f3a8 <tcp_parseopt+0xe4>)
 800f2e2:	881b      	ldrh	r3, [r3, #0]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d056      	beq.n	800f396 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f2e8:	4b30      	ldr	r3, [pc, #192]	@ (800f3ac <tcp_parseopt+0xe8>)
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	801a      	strh	r2, [r3, #0]
 800f2ee:	e046      	b.n	800f37e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800f2f0:	f7ff ffb2 	bl	800f258 <tcp_get_next_optbyte>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f2f8:	7bfb      	ldrb	r3, [r7, #15]
 800f2fa:	2b02      	cmp	r3, #2
 800f2fc:	d006      	beq.n	800f30c <tcp_parseopt+0x48>
 800f2fe:	2b02      	cmp	r3, #2
 800f300:	dc2a      	bgt.n	800f358 <tcp_parseopt+0x94>
 800f302:	2b00      	cmp	r3, #0
 800f304:	d042      	beq.n	800f38c <tcp_parseopt+0xc8>
 800f306:	2b01      	cmp	r3, #1
 800f308:	d038      	beq.n	800f37c <tcp_parseopt+0xb8>
 800f30a:	e025      	b.n	800f358 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f30c:	f7ff ffa4 	bl	800f258 <tcp_get_next_optbyte>
 800f310:	4603      	mov	r3, r0
 800f312:	2b04      	cmp	r3, #4
 800f314:	d13c      	bne.n	800f390 <tcp_parseopt+0xcc>
 800f316:	4b25      	ldr	r3, [pc, #148]	@ (800f3ac <tcp_parseopt+0xe8>)
 800f318:	881b      	ldrh	r3, [r3, #0]
 800f31a:	3301      	adds	r3, #1
 800f31c:	4a22      	ldr	r2, [pc, #136]	@ (800f3a8 <tcp_parseopt+0xe4>)
 800f31e:	8812      	ldrh	r2, [r2, #0]
 800f320:	4293      	cmp	r3, r2
 800f322:	da35      	bge.n	800f390 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f324:	f7ff ff98 	bl	800f258 <tcp_get_next_optbyte>
 800f328:	4603      	mov	r3, r0
 800f32a:	021b      	lsls	r3, r3, #8
 800f32c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800f32e:	f7ff ff93 	bl	800f258 <tcp_get_next_optbyte>
 800f332:	4603      	mov	r3, r0
 800f334:	461a      	mov	r2, r3
 800f336:	89bb      	ldrh	r3, [r7, #12]
 800f338:	4313      	orrs	r3, r2
 800f33a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f33c:	89bb      	ldrh	r3, [r7, #12]
 800f33e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800f342:	d804      	bhi.n	800f34e <tcp_parseopt+0x8a>
 800f344:	89bb      	ldrh	r3, [r7, #12]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d001      	beq.n	800f34e <tcp_parseopt+0x8a>
 800f34a:	89ba      	ldrh	r2, [r7, #12]
 800f34c:	e001      	b.n	800f352 <tcp_parseopt+0x8e>
 800f34e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800f356:	e012      	b.n	800f37e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800f358:	f7ff ff7e 	bl	800f258 <tcp_get_next_optbyte>
 800f35c:	4603      	mov	r3, r0
 800f35e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800f360:	7afb      	ldrb	r3, [r7, #11]
 800f362:	2b01      	cmp	r3, #1
 800f364:	d916      	bls.n	800f394 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800f366:	7afb      	ldrb	r3, [r7, #11]
 800f368:	b29a      	uxth	r2, r3
 800f36a:	4b10      	ldr	r3, [pc, #64]	@ (800f3ac <tcp_parseopt+0xe8>)
 800f36c:	881b      	ldrh	r3, [r3, #0]
 800f36e:	4413      	add	r3, r2
 800f370:	b29b      	uxth	r3, r3
 800f372:	3b02      	subs	r3, #2
 800f374:	b29a      	uxth	r2, r3
 800f376:	4b0d      	ldr	r3, [pc, #52]	@ (800f3ac <tcp_parseopt+0xe8>)
 800f378:	801a      	strh	r2, [r3, #0]
 800f37a:	e000      	b.n	800f37e <tcp_parseopt+0xba>
          break;
 800f37c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f37e:	4b0b      	ldr	r3, [pc, #44]	@ (800f3ac <tcp_parseopt+0xe8>)
 800f380:	881a      	ldrh	r2, [r3, #0]
 800f382:	4b09      	ldr	r3, [pc, #36]	@ (800f3a8 <tcp_parseopt+0xe4>)
 800f384:	881b      	ldrh	r3, [r3, #0]
 800f386:	429a      	cmp	r2, r3
 800f388:	d3b2      	bcc.n	800f2f0 <tcp_parseopt+0x2c>
 800f38a:	e004      	b.n	800f396 <tcp_parseopt+0xd2>
          return;
 800f38c:	bf00      	nop
 800f38e:	e002      	b.n	800f396 <tcp_parseopt+0xd2>
            return;
 800f390:	bf00      	nop
 800f392:	e000      	b.n	800f396 <tcp_parseopt+0xd2>
            return;
 800f394:	bf00      	nop
      }
    }
  }
}
 800f396:	3710      	adds	r7, #16
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}
 800f39c:	08019aac 	.word	0x08019aac
 800f3a0:	0801a098 	.word	0x0801a098
 800f3a4:	08019af8 	.word	0x08019af8
 800f3a8:	24003320 	.word	0x24003320
 800f3ac:	24003328 	.word	0x24003328

0800f3b0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f3b0:	b480      	push	{r7}
 800f3b2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f3b4:	4b05      	ldr	r3, [pc, #20]	@ (800f3cc <tcp_trigger_input_pcb_close+0x1c>)
 800f3b6:	781b      	ldrb	r3, [r3, #0]
 800f3b8:	f043 0310 	orr.w	r3, r3, #16
 800f3bc:	b2da      	uxtb	r2, r3
 800f3be:	4b03      	ldr	r3, [pc, #12]	@ (800f3cc <tcp_trigger_input_pcb_close+0x1c>)
 800f3c0:	701a      	strb	r2, [r3, #0]
}
 800f3c2:	bf00      	nop
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ca:	4770      	bx	lr
 800f3cc:	24003339 	.word	0x24003339

0800f3d0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b084      	sub	sp, #16
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	60f8      	str	r0, [r7, #12]
 800f3d8:	60b9      	str	r1, [r7, #8]
 800f3da:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d00a      	beq.n	800f3f8 <tcp_route+0x28>
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	7a1b      	ldrb	r3, [r3, #8]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d006      	beq.n	800f3f8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	7a1b      	ldrb	r3, [r3, #8]
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f7fb f8f4 	bl	800a5dc <netif_get_by_index>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	e003      	b.n	800f400 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800f3f8:	6878      	ldr	r0, [r7, #4]
 800f3fa:	f005 ff1f 	bl	801523c <ip4_route>
 800f3fe:	4603      	mov	r3, r0
  }
}
 800f400:	4618      	mov	r0, r3
 800f402:	3710      	adds	r7, #16
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}

0800f408 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800f408:	b590      	push	{r4, r7, lr}
 800f40a:	b087      	sub	sp, #28
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	60f8      	str	r0, [r7, #12]
 800f410:	60b9      	str	r1, [r7, #8]
 800f412:	603b      	str	r3, [r7, #0]
 800f414:	4613      	mov	r3, r2
 800f416:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d105      	bne.n	800f42a <tcp_create_segment+0x22>
 800f41e:	4b45      	ldr	r3, [pc, #276]	@ (800f534 <tcp_create_segment+0x12c>)
 800f420:	22a3      	movs	r2, #163	@ 0xa3
 800f422:	4945      	ldr	r1, [pc, #276]	@ (800f538 <tcp_create_segment+0x130>)
 800f424:	4845      	ldr	r0, [pc, #276]	@ (800f53c <tcp_create_segment+0x134>)
 800f426:	f007 fc49 	bl	8016cbc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f42a:	68bb      	ldr	r3, [r7, #8]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d105      	bne.n	800f43c <tcp_create_segment+0x34>
 800f430:	4b40      	ldr	r3, [pc, #256]	@ (800f534 <tcp_create_segment+0x12c>)
 800f432:	22a4      	movs	r2, #164	@ 0xa4
 800f434:	4942      	ldr	r1, [pc, #264]	@ (800f540 <tcp_create_segment+0x138>)
 800f436:	4841      	ldr	r0, [pc, #260]	@ (800f53c <tcp_create_segment+0x134>)
 800f438:	f007 fc40 	bl	8016cbc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f43c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f440:	009b      	lsls	r3, r3, #2
 800f442:	b2db      	uxtb	r3, r3
 800f444:	f003 0304 	and.w	r3, r3, #4
 800f448:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f44a:	2003      	movs	r0, #3
 800f44c:	f7fa fd34 	bl	8009eb8 <memp_malloc>
 800f450:	6138      	str	r0, [r7, #16]
 800f452:	693b      	ldr	r3, [r7, #16]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d104      	bne.n	800f462 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f458:	68b8      	ldr	r0, [r7, #8]
 800f45a:	f7fb fc6b 	bl	800ad34 <pbuf_free>
    return NULL;
 800f45e:	2300      	movs	r3, #0
 800f460:	e063      	b.n	800f52a <tcp_create_segment+0x122>
  }
  seg->flags = optflags;
 800f462:	693b      	ldr	r3, [r7, #16]
 800f464:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800f468:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 800f46a:	693b      	ldr	r3, [r7, #16]
 800f46c:	2200      	movs	r2, #0
 800f46e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f470:	693b      	ldr	r3, [r7, #16]
 800f472:	68ba      	ldr	r2, [r7, #8]
 800f474:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f476:	68bb      	ldr	r3, [r7, #8]
 800f478:	891a      	ldrh	r2, [r3, #8]
 800f47a:	7dfb      	ldrb	r3, [r7, #23]
 800f47c:	b29b      	uxth	r3, r3
 800f47e:	429a      	cmp	r2, r3
 800f480:	d205      	bcs.n	800f48e <tcp_create_segment+0x86>
 800f482:	4b2c      	ldr	r3, [pc, #176]	@ (800f534 <tcp_create_segment+0x12c>)
 800f484:	22b0      	movs	r2, #176	@ 0xb0
 800f486:	492f      	ldr	r1, [pc, #188]	@ (800f544 <tcp_create_segment+0x13c>)
 800f488:	482c      	ldr	r0, [pc, #176]	@ (800f53c <tcp_create_segment+0x134>)
 800f48a:	f007 fc17 	bl	8016cbc <iprintf>
  seg->len = p->tot_len - optlen;
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	891a      	ldrh	r2, [r3, #8]
 800f492:	7dfb      	ldrb	r3, [r7, #23]
 800f494:	b29b      	uxth	r3, r3
 800f496:	1ad3      	subs	r3, r2, r3
 800f498:	b29a      	uxth	r2, r3
 800f49a:	693b      	ldr	r3, [r7, #16]
 800f49c:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 800f49e:	693b      	ldr	r3, [r7, #16]
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f4a4:	2114      	movs	r1, #20
 800f4a6:	68b8      	ldr	r0, [r7, #8]
 800f4a8:	f7fb fba6 	bl	800abf8 <pbuf_add_header>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d004      	beq.n	800f4bc <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f4b2:	6938      	ldr	r0, [r7, #16]
 800f4b4:	f7fc ff63 	bl	800c37e <tcp_seg_free>
    return NULL;
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	e036      	b.n	800f52a <tcp_create_segment+0x122>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f4bc:	693b      	ldr	r3, [r7, #16]
 800f4be:	685b      	ldr	r3, [r3, #4]
 800f4c0:	685a      	ldr	r2, [r3, #4]
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	8ada      	ldrh	r2, [r3, #22]
 800f4ca:	693b      	ldr	r3, [r7, #16]
 800f4cc:	691c      	ldr	r4, [r3, #16]
 800f4ce:	4610      	mov	r0, r2
 800f4d0:	f7f9 ffb2 	bl	8009438 <lwip_htons>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	8b1a      	ldrh	r2, [r3, #24]
 800f4dc:	693b      	ldr	r3, [r7, #16]
 800f4de:	691c      	ldr	r4, [r3, #16]
 800f4e0:	4610      	mov	r0, r2
 800f4e2:	f7f9 ffa9 	bl	8009438 <lwip_htons>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f4ea:	693b      	ldr	r3, [r7, #16]
 800f4ec:	691c      	ldr	r4, [r3, #16]
 800f4ee:	6838      	ldr	r0, [r7, #0]
 800f4f0:	f7f9 ffb7 	bl	8009462 <lwip_htonl>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f4f8:	7dfb      	ldrb	r3, [r7, #23]
 800f4fa:	089b      	lsrs	r3, r3, #2
 800f4fc:	b2db      	uxtb	r3, r3
 800f4fe:	3305      	adds	r3, #5
 800f500:	b29b      	uxth	r3, r3
 800f502:	031b      	lsls	r3, r3, #12
 800f504:	b29a      	uxth	r2, r3
 800f506:	79fb      	ldrb	r3, [r7, #7]
 800f508:	b29b      	uxth	r3, r3
 800f50a:	4313      	orrs	r3, r2
 800f50c:	b29a      	uxth	r2, r3
 800f50e:	693b      	ldr	r3, [r7, #16]
 800f510:	691c      	ldr	r4, [r3, #16]
 800f512:	4610      	mov	r0, r2
 800f514:	f7f9 ff90 	bl	8009438 <lwip_htons>
 800f518:	4603      	mov	r3, r0
 800f51a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f51c:	693b      	ldr	r3, [r7, #16]
 800f51e:	691b      	ldr	r3, [r3, #16]
 800f520:	2200      	movs	r2, #0
 800f522:	749a      	strb	r2, [r3, #18]
 800f524:	2200      	movs	r2, #0
 800f526:	74da      	strb	r2, [r3, #19]
  return seg;
 800f528:	693b      	ldr	r3, [r7, #16]
}
 800f52a:	4618      	mov	r0, r3
 800f52c:	371c      	adds	r7, #28
 800f52e:	46bd      	mov	sp, r7
 800f530:	bd90      	pop	{r4, r7, pc}
 800f532:	bf00      	nop
 800f534:	0801a0b4 	.word	0x0801a0b4
 800f538:	0801a0e8 	.word	0x0801a0e8
 800f53c:	0801a108 	.word	0x0801a108
 800f540:	0801a130 	.word	0x0801a130
 800f544:	0801a154 	.word	0x0801a154

0800f548 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800f548:	b590      	push	{r4, r7, lr}
 800f54a:	b08b      	sub	sp, #44	@ 0x2c
 800f54c:	af02      	add	r7, sp, #8
 800f54e:	6078      	str	r0, [r7, #4]
 800f550:	460b      	mov	r3, r1
 800f552:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800f554:	2300      	movs	r3, #0
 800f556:	61bb      	str	r3, [r7, #24]
 800f558:	2300      	movs	r3, #0
 800f55a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800f55c:	2300      	movs	r3, #0
 800f55e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d106      	bne.n	800f574 <tcp_split_unsent_seg+0x2c>
 800f566:	4b97      	ldr	r3, [pc, #604]	@ (800f7c4 <tcp_split_unsent_seg+0x27c>)
 800f568:	f240 324b 	movw	r2, #843	@ 0x34b
 800f56c:	4996      	ldr	r1, [pc, #600]	@ (800f7c8 <tcp_split_unsent_seg+0x280>)
 800f56e:	4897      	ldr	r0, [pc, #604]	@ (800f7cc <tcp_split_unsent_seg+0x284>)
 800f570:	f007 fba4 	bl	8016cbc <iprintf>

  useg = pcb->unsent;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f578:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800f57a:	697b      	ldr	r3, [r7, #20]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d102      	bne.n	800f586 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800f580:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f584:	e119      	b.n	800f7ba <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 800f586:	887b      	ldrh	r3, [r7, #2]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d109      	bne.n	800f5a0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800f58c:	4b8d      	ldr	r3, [pc, #564]	@ (800f7c4 <tcp_split_unsent_seg+0x27c>)
 800f58e:	f240 3253 	movw	r2, #851	@ 0x353
 800f592:	498f      	ldr	r1, [pc, #572]	@ (800f7d0 <tcp_split_unsent_seg+0x288>)
 800f594:	488d      	ldr	r0, [pc, #564]	@ (800f7cc <tcp_split_unsent_seg+0x284>)
 800f596:	f007 fb91 	bl	8016cbc <iprintf>
    return ERR_VAL;
 800f59a:	f06f 0305 	mvn.w	r3, #5
 800f59e:	e10c      	b.n	800f7ba <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	891b      	ldrh	r3, [r3, #8]
 800f5a4:	887a      	ldrh	r2, [r7, #2]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d301      	bcc.n	800f5ae <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	e105      	b.n	800f7ba <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f5b2:	887a      	ldrh	r2, [r7, #2]
 800f5b4:	429a      	cmp	r2, r3
 800f5b6:	d906      	bls.n	800f5c6 <tcp_split_unsent_seg+0x7e>
 800f5b8:	4b82      	ldr	r3, [pc, #520]	@ (800f7c4 <tcp_split_unsent_seg+0x27c>)
 800f5ba:	f240 325b 	movw	r2, #859	@ 0x35b
 800f5be:	4985      	ldr	r1, [pc, #532]	@ (800f7d4 <tcp_split_unsent_seg+0x28c>)
 800f5c0:	4882      	ldr	r0, [pc, #520]	@ (800f7cc <tcp_split_unsent_seg+0x284>)
 800f5c2:	f007 fb7b 	bl	8016cbc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800f5c6:	697b      	ldr	r3, [r7, #20]
 800f5c8:	891b      	ldrh	r3, [r3, #8]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d106      	bne.n	800f5dc <tcp_split_unsent_seg+0x94>
 800f5ce:	4b7d      	ldr	r3, [pc, #500]	@ (800f7c4 <tcp_split_unsent_seg+0x27c>)
 800f5d0:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800f5d4:	4980      	ldr	r1, [pc, #512]	@ (800f7d8 <tcp_split_unsent_seg+0x290>)
 800f5d6:	487d      	ldr	r0, [pc, #500]	@ (800f7cc <tcp_split_unsent_seg+0x284>)
 800f5d8:	f007 fb70 	bl	8016cbc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800f5dc:	697b      	ldr	r3, [r7, #20]
 800f5de:	7b1b      	ldrb	r3, [r3, #12]
 800f5e0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f5e2:	7bfb      	ldrb	r3, [r7, #15]
 800f5e4:	009b      	lsls	r3, r3, #2
 800f5e6:	b2db      	uxtb	r3, r3
 800f5e8:	f003 0304 	and.w	r3, r3, #4
 800f5ec:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	891a      	ldrh	r2, [r3, #8]
 800f5f2:	887b      	ldrh	r3, [r7, #2]
 800f5f4:	1ad3      	subs	r3, r2, r3
 800f5f6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800f5f8:	7bbb      	ldrb	r3, [r7, #14]
 800f5fa:	b29a      	uxth	r2, r3
 800f5fc:	89bb      	ldrh	r3, [r7, #12]
 800f5fe:	4413      	add	r3, r2
 800f600:	b29b      	uxth	r3, r3
 800f602:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f606:	4619      	mov	r1, r3
 800f608:	2036      	movs	r0, #54	@ 0x36
 800f60a:	f7fb f867 	bl	800a6dc <pbuf_alloc>
 800f60e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f610:	693b      	ldr	r3, [r7, #16]
 800f612:	2b00      	cmp	r3, #0
 800f614:	f000 80ba 	beq.w	800f78c <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	685b      	ldr	r3, [r3, #4]
 800f61c:	891a      	ldrh	r2, [r3, #8]
 800f61e:	697b      	ldr	r3, [r7, #20]
 800f620:	891b      	ldrh	r3, [r3, #8]
 800f622:	1ad3      	subs	r3, r2, r3
 800f624:	b29a      	uxth	r2, r3
 800f626:	887b      	ldrh	r3, [r7, #2]
 800f628:	4413      	add	r3, r2
 800f62a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800f62c:	697b      	ldr	r3, [r7, #20]
 800f62e:	6858      	ldr	r0, [r3, #4]
 800f630:	693b      	ldr	r3, [r7, #16]
 800f632:	685a      	ldr	r2, [r3, #4]
 800f634:	7bbb      	ldrb	r3, [r7, #14]
 800f636:	18d1      	adds	r1, r2, r3
 800f638:	897b      	ldrh	r3, [r7, #10]
 800f63a:	89ba      	ldrh	r2, [r7, #12]
 800f63c:	f7fb fda0 	bl	800b180 <pbuf_copy_partial>
 800f640:	4603      	mov	r3, r0
 800f642:	461a      	mov	r2, r3
 800f644:	89bb      	ldrh	r3, [r7, #12]
 800f646:	4293      	cmp	r3, r2
 800f648:	f040 80a2 	bne.w	800f790 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	691b      	ldr	r3, [r3, #16]
 800f650:	899b      	ldrh	r3, [r3, #12]
 800f652:	b29b      	uxth	r3, r3
 800f654:	4618      	mov	r0, r3
 800f656:	f7f9 feef 	bl	8009438 <lwip_htons>
 800f65a:	4603      	mov	r3, r0
 800f65c:	b2db      	uxtb	r3, r3
 800f65e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f662:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800f664:	2300      	movs	r3, #0
 800f666:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 800f668:	7ffb      	ldrb	r3, [r7, #31]
 800f66a:	f003 0308 	and.w	r3, r3, #8
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d007      	beq.n	800f682 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800f672:	7ffb      	ldrb	r3, [r7, #31]
 800f674:	f023 0308 	bic.w	r3, r3, #8
 800f678:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 800f67a:	7fbb      	ldrb	r3, [r7, #30]
 800f67c:	f043 0308 	orr.w	r3, r3, #8
 800f680:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 800f682:	7ffb      	ldrb	r3, [r7, #31]
 800f684:	f003 0301 	and.w	r3, r3, #1
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d007      	beq.n	800f69c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800f68c:	7ffb      	ldrb	r3, [r7, #31]
 800f68e:	f023 0301 	bic.w	r3, r3, #1
 800f692:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 800f694:	7fbb      	ldrb	r3, [r7, #30]
 800f696:	f043 0301 	orr.w	r3, r3, #1
 800f69a:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	691b      	ldr	r3, [r3, #16]
 800f6a0:	685b      	ldr	r3, [r3, #4]
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f7f9 fedd 	bl	8009462 <lwip_htonl>
 800f6a8:	4602      	mov	r2, r0
 800f6aa:	887b      	ldrh	r3, [r7, #2]
 800f6ac:	18d1      	adds	r1, r2, r3
 800f6ae:	7fba      	ldrb	r2, [r7, #30]
 800f6b0:	7bfb      	ldrb	r3, [r7, #15]
 800f6b2:	9300      	str	r3, [sp, #0]
 800f6b4:	460b      	mov	r3, r1
 800f6b6:	6939      	ldr	r1, [r7, #16]
 800f6b8:	6878      	ldr	r0, [r7, #4]
 800f6ba:	f7ff fea5 	bl	800f408 <tcp_create_segment>
 800f6be:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 800f6c0:	69bb      	ldr	r3, [r7, #24]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d066      	beq.n	800f794 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800f6c6:	697b      	ldr	r3, [r7, #20]
 800f6c8:	685b      	ldr	r3, [r3, #4]
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f7fb fbd2 	bl	800ae74 <pbuf_clen>
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	461a      	mov	r2, r3
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f6da:	1a9b      	subs	r3, r3, r2
 800f6dc:	b29a      	uxth	r2, r3
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800f6e4:	697b      	ldr	r3, [r7, #20]
 800f6e6:	6858      	ldr	r0, [r3, #4]
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	685b      	ldr	r3, [r3, #4]
 800f6ec:	891a      	ldrh	r2, [r3, #8]
 800f6ee:	89bb      	ldrh	r3, [r7, #12]
 800f6f0:	1ad3      	subs	r3, r2, r3
 800f6f2:	b29b      	uxth	r3, r3
 800f6f4:	4619      	mov	r1, r3
 800f6f6:	f7fb f97d 	bl	800a9f4 <pbuf_realloc>
  useg->len -= remainder;
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	891a      	ldrh	r2, [r3, #8]
 800f6fe:	89bb      	ldrh	r3, [r7, #12]
 800f700:	1ad3      	subs	r3, r2, r3
 800f702:	b29a      	uxth	r2, r3
 800f704:	697b      	ldr	r3, [r7, #20]
 800f706:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	691b      	ldr	r3, [r3, #16]
 800f70c:	899b      	ldrh	r3, [r3, #12]
 800f70e:	b29c      	uxth	r4, r3
 800f710:	7ffb      	ldrb	r3, [r7, #31]
 800f712:	b29b      	uxth	r3, r3
 800f714:	4618      	mov	r0, r3
 800f716:	f7f9 fe8f 	bl	8009438 <lwip_htons>
 800f71a:	4603      	mov	r3, r0
 800f71c:	461a      	mov	r2, r3
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	691b      	ldr	r3, [r3, #16]
 800f722:	4322      	orrs	r2, r4
 800f724:	b292      	uxth	r2, r2
 800f726:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 800f728:	697b      	ldr	r3, [r7, #20]
 800f72a:	2200      	movs	r2, #0
 800f72c:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	685b      	ldr	r3, [r3, #4]
 800f732:	4618      	mov	r0, r3
 800f734:	f7fb fb9e 	bl	800ae74 <pbuf_clen>
 800f738:	4603      	mov	r3, r0
 800f73a:	461a      	mov	r2, r3
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f742:	4413      	add	r3, r2
 800f744:	b29a      	uxth	r2, r3
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f74c:	69bb      	ldr	r3, [r7, #24]
 800f74e:	685b      	ldr	r3, [r3, #4]
 800f750:	4618      	mov	r0, r3
 800f752:	f7fb fb8f 	bl	800ae74 <pbuf_clen>
 800f756:	4603      	mov	r3, r0
 800f758:	461a      	mov	r2, r3
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f760:	4413      	add	r3, r2
 800f762:	b29a      	uxth	r2, r3
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	681a      	ldr	r2, [r3, #0]
 800f76e:	69bb      	ldr	r3, [r7, #24]
 800f770:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	69ba      	ldr	r2, [r7, #24]
 800f776:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800f778:	69bb      	ldr	r3, [r7, #24]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d103      	bne.n	800f788 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2200      	movs	r2, #0
 800f784:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800f788:	2300      	movs	r3, #0
 800f78a:	e016      	b.n	800f7ba <tcp_split_unsent_seg+0x272>
    goto memerr;
 800f78c:	bf00      	nop
 800f78e:	e002      	b.n	800f796 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 800f790:	bf00      	nop
 800f792:	e000      	b.n	800f796 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 800f794:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800f796:	69bb      	ldr	r3, [r7, #24]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d006      	beq.n	800f7aa <tcp_split_unsent_seg+0x262>
 800f79c:	4b09      	ldr	r3, [pc, #36]	@ (800f7c4 <tcp_split_unsent_seg+0x27c>)
 800f79e:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800f7a2:	490e      	ldr	r1, [pc, #56]	@ (800f7dc <tcp_split_unsent_seg+0x294>)
 800f7a4:	4809      	ldr	r0, [pc, #36]	@ (800f7cc <tcp_split_unsent_seg+0x284>)
 800f7a6:	f007 fa89 	bl	8016cbc <iprintf>
  if (p != NULL) {
 800f7aa:	693b      	ldr	r3, [r7, #16]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d002      	beq.n	800f7b6 <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 800f7b0:	6938      	ldr	r0, [r7, #16]
 800f7b2:	f7fb fabf 	bl	800ad34 <pbuf_free>
  }

  return ERR_MEM;
 800f7b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	3724      	adds	r7, #36	@ 0x24
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	bd90      	pop	{r4, r7, pc}
 800f7c2:	bf00      	nop
 800f7c4:	0801a0b4 	.word	0x0801a0b4
 800f7c8:	0801a4a4 	.word	0x0801a4a4
 800f7cc:	0801a108 	.word	0x0801a108
 800f7d0:	0801a4c8 	.word	0x0801a4c8
 800f7d4:	0801a4ec 	.word	0x0801a4ec
 800f7d8:	0801a4fc 	.word	0x0801a4fc
 800f7dc:	0801a50c 	.word	0x0801a50c

0800f7e0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800f7e0:	b590      	push	{r4, r7, lr}
 800f7e2:	b085      	sub	sp, #20
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d106      	bne.n	800f7fc <tcp_send_fin+0x1c>
 800f7ee:	4b21      	ldr	r3, [pc, #132]	@ (800f874 <tcp_send_fin+0x94>)
 800f7f0:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800f7f4:	4920      	ldr	r1, [pc, #128]	@ (800f878 <tcp_send_fin+0x98>)
 800f7f6:	4821      	ldr	r0, [pc, #132]	@ (800f87c <tcp_send_fin+0x9c>)
 800f7f8:	f007 fa60 	bl	8016cbc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f800:	2b00      	cmp	r3, #0
 800f802:	d02e      	beq.n	800f862 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f808:	60fb      	str	r3, [r7, #12]
 800f80a:	e002      	b.n	800f812 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d1f8      	bne.n	800f80c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	691b      	ldr	r3, [r3, #16]
 800f81e:	899b      	ldrh	r3, [r3, #12]
 800f820:	b29b      	uxth	r3, r3
 800f822:	4618      	mov	r0, r3
 800f824:	f7f9 fe08 	bl	8009438 <lwip_htons>
 800f828:	4603      	mov	r3, r0
 800f82a:	b2db      	uxtb	r3, r3
 800f82c:	f003 0307 	and.w	r3, r3, #7
 800f830:	2b00      	cmp	r3, #0
 800f832:	d116      	bne.n	800f862 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	691b      	ldr	r3, [r3, #16]
 800f838:	899b      	ldrh	r3, [r3, #12]
 800f83a:	b29c      	uxth	r4, r3
 800f83c:	2001      	movs	r0, #1
 800f83e:	f7f9 fdfb 	bl	8009438 <lwip_htons>
 800f842:	4603      	mov	r3, r0
 800f844:	461a      	mov	r2, r3
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	691b      	ldr	r3, [r3, #16]
 800f84a:	4322      	orrs	r2, r4
 800f84c:	b292      	uxth	r2, r2
 800f84e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	8b5b      	ldrh	r3, [r3, #26]
 800f854:	f043 0320 	orr.w	r3, r3, #32
 800f858:	b29a      	uxth	r2, r3
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800f85e:	2300      	movs	r3, #0
 800f860:	e004      	b.n	800f86c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800f862:	2101      	movs	r1, #1
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	f000 f80b 	bl	800f880 <tcp_enqueue_flags>
 800f86a:	4603      	mov	r3, r0
}
 800f86c:	4618      	mov	r0, r3
 800f86e:	3714      	adds	r7, #20
 800f870:	46bd      	mov	sp, r7
 800f872:	bd90      	pop	{r4, r7, pc}
 800f874:	0801a0b4 	.word	0x0801a0b4
 800f878:	0801a518 	.word	0x0801a518
 800f87c:	0801a108 	.word	0x0801a108

0800f880 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b088      	sub	sp, #32
 800f884:	af02      	add	r7, sp, #8
 800f886:	6078      	str	r0, [r7, #4]
 800f888:	460b      	mov	r3, r1
 800f88a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800f88c:	2300      	movs	r3, #0
 800f88e:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 800f890:	2300      	movs	r3, #0
 800f892:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f894:	78fb      	ldrb	r3, [r7, #3]
 800f896:	f003 0303 	and.w	r3, r3, #3
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d106      	bne.n	800f8ac <tcp_enqueue_flags+0x2c>
 800f89e:	4b67      	ldr	r3, [pc, #412]	@ (800fa3c <tcp_enqueue_flags+0x1bc>)
 800f8a0:	f240 4211 	movw	r2, #1041	@ 0x411
 800f8a4:	4966      	ldr	r1, [pc, #408]	@ (800fa40 <tcp_enqueue_flags+0x1c0>)
 800f8a6:	4867      	ldr	r0, [pc, #412]	@ (800fa44 <tcp_enqueue_flags+0x1c4>)
 800f8a8:	f007 fa08 	bl	8016cbc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d106      	bne.n	800f8c0 <tcp_enqueue_flags+0x40>
 800f8b2:	4b62      	ldr	r3, [pc, #392]	@ (800fa3c <tcp_enqueue_flags+0x1bc>)
 800f8b4:	f240 4213 	movw	r2, #1043	@ 0x413
 800f8b8:	4963      	ldr	r1, [pc, #396]	@ (800fa48 <tcp_enqueue_flags+0x1c8>)
 800f8ba:	4862      	ldr	r0, [pc, #392]	@ (800fa44 <tcp_enqueue_flags+0x1c4>)
 800f8bc:	f007 f9fe 	bl	8016cbc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800f8c0:	78fb      	ldrb	r3, [r7, #3]
 800f8c2:	f003 0302 	and.w	r3, r3, #2
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d001      	beq.n	800f8ce <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800f8ca:	2301      	movs	r3, #1
 800f8cc:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f8ce:	7dfb      	ldrb	r3, [r7, #23]
 800f8d0:	009b      	lsls	r3, r3, #2
 800f8d2:	b2db      	uxtb	r3, r3
 800f8d4:	f003 0304 	and.w	r3, r3, #4
 800f8d8:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f8da:	7dbb      	ldrb	r3, [r7, #22]
 800f8dc:	b29b      	uxth	r3, r3
 800f8de:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f8e2:	4619      	mov	r1, r3
 800f8e4:	2036      	movs	r0, #54	@ 0x36
 800f8e6:	f7fa fef9 	bl	800a6dc <pbuf_alloc>
 800f8ea:	60f8      	str	r0, [r7, #12]
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d109      	bne.n	800f906 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	8b5b      	ldrh	r3, [r3, #26]
 800f8f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f8fa:	b29a      	uxth	r2, r3
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f900:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f904:	e095      	b.n	800fa32 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	895a      	ldrh	r2, [r3, #10]
 800f90a:	7dbb      	ldrb	r3, [r7, #22]
 800f90c:	b29b      	uxth	r3, r3
 800f90e:	429a      	cmp	r2, r3
 800f910:	d206      	bcs.n	800f920 <tcp_enqueue_flags+0xa0>
 800f912:	4b4a      	ldr	r3, [pc, #296]	@ (800fa3c <tcp_enqueue_flags+0x1bc>)
 800f914:	f240 4239 	movw	r2, #1081	@ 0x439
 800f918:	494c      	ldr	r1, [pc, #304]	@ (800fa4c <tcp_enqueue_flags+0x1cc>)
 800f91a:	484a      	ldr	r0, [pc, #296]	@ (800fa44 <tcp_enqueue_flags+0x1c4>)
 800f91c:	f007 f9ce 	bl	8016cbc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800f924:	78fa      	ldrb	r2, [r7, #3]
 800f926:	7dfb      	ldrb	r3, [r7, #23]
 800f928:	9300      	str	r3, [sp, #0]
 800f92a:	460b      	mov	r3, r1
 800f92c:	68f9      	ldr	r1, [r7, #12]
 800f92e:	6878      	ldr	r0, [r7, #4]
 800f930:	f7ff fd6a 	bl	800f408 <tcp_create_segment>
 800f934:	60b8      	str	r0, [r7, #8]
 800f936:	68bb      	ldr	r3, [r7, #8]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d109      	bne.n	800f950 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	8b5b      	ldrh	r3, [r3, #26]
 800f940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f944:	b29a      	uxth	r2, r3
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f94a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f94e:	e070      	b.n	800fa32 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800f950:	68bb      	ldr	r3, [r7, #8]
 800f952:	691b      	ldr	r3, [r3, #16]
 800f954:	f003 0303 	and.w	r3, r3, #3
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d006      	beq.n	800f96a <tcp_enqueue_flags+0xea>
 800f95c:	4b37      	ldr	r3, [pc, #220]	@ (800fa3c <tcp_enqueue_flags+0x1bc>)
 800f95e:	f240 4242 	movw	r2, #1090	@ 0x442
 800f962:	493b      	ldr	r1, [pc, #236]	@ (800fa50 <tcp_enqueue_flags+0x1d0>)
 800f964:	4837      	ldr	r0, [pc, #220]	@ (800fa44 <tcp_enqueue_flags+0x1c4>)
 800f966:	f007 f9a9 	bl	8016cbc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800f96a:	68bb      	ldr	r3, [r7, #8]
 800f96c:	891b      	ldrh	r3, [r3, #8]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d006      	beq.n	800f980 <tcp_enqueue_flags+0x100>
 800f972:	4b32      	ldr	r3, [pc, #200]	@ (800fa3c <tcp_enqueue_flags+0x1bc>)
 800f974:	f240 4243 	movw	r2, #1091	@ 0x443
 800f978:	4936      	ldr	r1, [pc, #216]	@ (800fa54 <tcp_enqueue_flags+0x1d4>)
 800f97a:	4832      	ldr	r0, [pc, #200]	@ (800fa44 <tcp_enqueue_flags+0x1c4>)
 800f97c:	f007 f99e 	bl	8016cbc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f984:	2b00      	cmp	r3, #0
 800f986:	d103      	bne.n	800f990 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	68ba      	ldr	r2, [r7, #8]
 800f98c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800f98e:	e00d      	b.n	800f9ac <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f994:	613b      	str	r3, [r7, #16]
 800f996:	e002      	b.n	800f99e <tcp_enqueue_flags+0x11e>
 800f998:	693b      	ldr	r3, [r7, #16]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	613b      	str	r3, [r7, #16]
 800f99e:	693b      	ldr	r3, [r7, #16]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d1f8      	bne.n	800f998 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800f9a6:	693b      	ldr	r3, [r7, #16]
 800f9a8:	68ba      	ldr	r2, [r7, #8]
 800f9aa:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800f9b4:	78fb      	ldrb	r3, [r7, #3]
 800f9b6:	f003 0302 	and.w	r3, r3, #2
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d104      	bne.n	800f9c8 <tcp_enqueue_flags+0x148>
 800f9be:	78fb      	ldrb	r3, [r7, #3]
 800f9c0:	f003 0301 	and.w	r3, r3, #1
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d004      	beq.n	800f9d2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f9cc:	1c5a      	adds	r2, r3, #1
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800f9d2:	78fb      	ldrb	r3, [r7, #3]
 800f9d4:	f003 0301 	and.w	r3, r3, #1
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d006      	beq.n	800f9ea <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	8b5b      	ldrh	r3, [r3, #26]
 800f9e0:	f043 0320 	orr.w	r3, r3, #32
 800f9e4:	b29a      	uxth	r2, r3
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f9ea:	68bb      	ldr	r3, [r7, #8]
 800f9ec:	685b      	ldr	r3, [r3, #4]
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f7fb fa40 	bl	800ae74 <pbuf_clen>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	461a      	mov	r2, r3
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f9fe:	4413      	add	r3, r2
 800fa00:	b29a      	uxth	r2, r3
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d00e      	beq.n	800fa30 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d10a      	bne.n	800fa30 <tcp_enqueue_flags+0x1b0>
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d106      	bne.n	800fa30 <tcp_enqueue_flags+0x1b0>
 800fa22:	4b06      	ldr	r3, [pc, #24]	@ (800fa3c <tcp_enqueue_flags+0x1bc>)
 800fa24:	f240 4265 	movw	r2, #1125	@ 0x465
 800fa28:	490b      	ldr	r1, [pc, #44]	@ (800fa58 <tcp_enqueue_flags+0x1d8>)
 800fa2a:	4806      	ldr	r0, [pc, #24]	@ (800fa44 <tcp_enqueue_flags+0x1c4>)
 800fa2c:	f007 f946 	bl	8016cbc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800fa30:	2300      	movs	r3, #0
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3718      	adds	r7, #24
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}
 800fa3a:	bf00      	nop
 800fa3c:	0801a0b4 	.word	0x0801a0b4
 800fa40:	0801a534 	.word	0x0801a534
 800fa44:	0801a108 	.word	0x0801a108
 800fa48:	0801a58c 	.word	0x0801a58c
 800fa4c:	0801a5ac 	.word	0x0801a5ac
 800fa50:	0801a5e8 	.word	0x0801a5e8
 800fa54:	0801a600 	.word	0x0801a600
 800fa58:	0801a62c 	.word	0x0801a62c

0800fa5c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800fa5c:	b5b0      	push	{r4, r5, r7, lr}
 800fa5e:	b08a      	sub	sp, #40	@ 0x28
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d106      	bne.n	800fa78 <tcp_output+0x1c>
 800fa6a:	4b8a      	ldr	r3, [pc, #552]	@ (800fc94 <tcp_output+0x238>)
 800fa6c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800fa70:	4989      	ldr	r1, [pc, #548]	@ (800fc98 <tcp_output+0x23c>)
 800fa72:	488a      	ldr	r0, [pc, #552]	@ (800fc9c <tcp_output+0x240>)
 800fa74:	f007 f922 	bl	8016cbc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	7d1b      	ldrb	r3, [r3, #20]
 800fa7c:	2b01      	cmp	r3, #1
 800fa7e:	d106      	bne.n	800fa8e <tcp_output+0x32>
 800fa80:	4b84      	ldr	r3, [pc, #528]	@ (800fc94 <tcp_output+0x238>)
 800fa82:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800fa86:	4986      	ldr	r1, [pc, #536]	@ (800fca0 <tcp_output+0x244>)
 800fa88:	4884      	ldr	r0, [pc, #528]	@ (800fc9c <tcp_output+0x240>)
 800fa8a:	f007 f917 	bl	8016cbc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800fa8e:	4b85      	ldr	r3, [pc, #532]	@ (800fca4 <tcp_output+0x248>)
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	687a      	ldr	r2, [r7, #4]
 800fa94:	429a      	cmp	r2, r3
 800fa96:	d101      	bne.n	800fa9c <tcp_output+0x40>
    return ERR_OK;
 800fa98:	2300      	movs	r3, #0
 800fa9a:	e1d1      	b.n	800fe40 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800faa8:	4293      	cmp	r3, r2
 800faaa:	bf28      	it	cs
 800faac:	4613      	movcs	r3, r2
 800faae:	b29b      	uxth	r3, r3
 800fab0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fab6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800fab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d10b      	bne.n	800fad6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	8b5b      	ldrh	r3, [r3, #26]
 800fac2:	f003 0302 	and.w	r3, r3, #2
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	f000 81ad 	beq.w	800fe26 <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	f000 fddb 	bl	8010688 <tcp_send_empty_ack>
 800fad2:	4603      	mov	r3, r0
 800fad4:	e1b4      	b.n	800fe40 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800fad6:	6879      	ldr	r1, [r7, #4]
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	3304      	adds	r3, #4
 800fadc:	461a      	mov	r2, r3
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	f7ff fc76 	bl	800f3d0 <tcp_route>
 800fae4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800fae6:	697b      	ldr	r3, [r7, #20]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d102      	bne.n	800faf2 <tcp_output+0x96>
    return ERR_RTE;
 800faec:	f06f 0303 	mvn.w	r3, #3
 800faf0:	e1a6      	b.n	800fe40 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d003      	beq.n	800fb00 <tcp_output+0xa4>
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d111      	bne.n	800fb24 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800fb00:	697b      	ldr	r3, [r7, #20]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d002      	beq.n	800fb0c <tcp_output+0xb0>
 800fb06:	697b      	ldr	r3, [r7, #20]
 800fb08:	3304      	adds	r3, #4
 800fb0a:	e000      	b.n	800fb0e <tcp_output+0xb2>
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800fb10:	693b      	ldr	r3, [r7, #16]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d102      	bne.n	800fb1c <tcp_output+0xc0>
      return ERR_RTE;
 800fb16:	f06f 0303 	mvn.w	r3, #3
 800fb1a:	e191      	b.n	800fe40 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800fb1c:	693b      	ldr	r3, [r7, #16]
 800fb1e:	681a      	ldr	r2, [r3, #0]
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800fb24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb26:	691b      	ldr	r3, [r3, #16]
 800fb28:	685b      	ldr	r3, [r3, #4]
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	f7f9 fc99 	bl	8009462 <lwip_htonl>
 800fb30:	4602      	mov	r2, r0
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb36:	1ad3      	subs	r3, r2, r3
 800fb38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb3a:	8912      	ldrh	r2, [r2, #8]
 800fb3c:	4413      	add	r3, r2
 800fb3e:	69ba      	ldr	r2, [r7, #24]
 800fb40:	429a      	cmp	r2, r3
 800fb42:	d227      	bcs.n	800fb94 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800fb4a:	461a      	mov	r2, r3
 800fb4c:	69bb      	ldr	r3, [r7, #24]
 800fb4e:	4293      	cmp	r3, r2
 800fb50:	d114      	bne.n	800fb7c <tcp_output+0x120>
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d110      	bne.n	800fb7c <tcp_output+0x120>
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d10b      	bne.n	800fb7c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2200      	movs	r2, #0
 800fb68:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	2201      	movs	r2, #1
 800fb70:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2200      	movs	r2, #0
 800fb78:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	8b5b      	ldrh	r3, [r3, #26]
 800fb80:	f003 0302 	and.w	r3, r3, #2
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	f000 8150 	beq.w	800fe2a <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	f000 fd7c 	bl	8010688 <tcp_send_empty_ack>
 800fb90:	4603      	mov	r3, r0
 800fb92:	e155      	b.n	800fe40 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2200      	movs	r2, #0
 800fb98:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fba0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800fba2:	6a3b      	ldr	r3, [r7, #32]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	f000 811f 	beq.w	800fde8 <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 800fbaa:	e002      	b.n	800fbb2 <tcp_output+0x156>
 800fbac:	6a3b      	ldr	r3, [r7, #32]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	623b      	str	r3, [r7, #32]
 800fbb2:	6a3b      	ldr	r3, [r7, #32]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d1f8      	bne.n	800fbac <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800fbba:	e115      	b.n	800fde8 <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800fbbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbbe:	691b      	ldr	r3, [r3, #16]
 800fbc0:	899b      	ldrh	r3, [r3, #12]
 800fbc2:	b29b      	uxth	r3, r3
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f7f9 fc37 	bl	8009438 <lwip_htons>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	b2db      	uxtb	r3, r3
 800fbce:	f003 0304 	and.w	r3, r3, #4
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d006      	beq.n	800fbe4 <tcp_output+0x188>
 800fbd6:	4b2f      	ldr	r3, [pc, #188]	@ (800fc94 <tcp_output+0x238>)
 800fbd8:	f240 5236 	movw	r2, #1334	@ 0x536
 800fbdc:	4932      	ldr	r1, [pc, #200]	@ (800fca8 <tcp_output+0x24c>)
 800fbde:	482f      	ldr	r0, [pc, #188]	@ (800fc9c <tcp_output+0x240>)
 800fbe0:	f007 f86c 	bl	8016cbc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d01f      	beq.n	800fc2c <tcp_output+0x1d0>
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	8b5b      	ldrh	r3, [r3, #26]
 800fbf0:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d119      	bne.n	800fc2c <tcp_output+0x1d0>
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d00b      	beq.n	800fc18 <tcp_output+0x1bc>
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d110      	bne.n	800fc2c <tcp_output+0x1d0>
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fc0e:	891a      	ldrh	r2, [r3, #8]
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fc14:	429a      	cmp	r2, r3
 800fc16:	d209      	bcs.n	800fc2c <tcp_output+0x1d0>
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d004      	beq.n	800fc2c <tcp_output+0x1d0>
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fc28:	2b08      	cmp	r3, #8
 800fc2a:	d901      	bls.n	800fc30 <tcp_output+0x1d4>
 800fc2c:	2301      	movs	r3, #1
 800fc2e:	e000      	b.n	800fc32 <tcp_output+0x1d6>
 800fc30:	2300      	movs	r3, #0
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d106      	bne.n	800fc44 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	8b5b      	ldrh	r3, [r3, #26]
 800fc3a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	f000 80e7 	beq.w	800fe12 <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	7d1b      	ldrb	r3, [r3, #20]
 800fc48:	2b02      	cmp	r3, #2
 800fc4a:	d00d      	beq.n	800fc68 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800fc4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc4e:	691b      	ldr	r3, [r3, #16]
 800fc50:	899b      	ldrh	r3, [r3, #12]
 800fc52:	b29c      	uxth	r4, r3
 800fc54:	2010      	movs	r0, #16
 800fc56:	f7f9 fbef 	bl	8009438 <lwip_htons>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	461a      	mov	r2, r3
 800fc5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc60:	691b      	ldr	r3, [r3, #16]
 800fc62:	4322      	orrs	r2, r4
 800fc64:	b292      	uxth	r2, r2
 800fc66:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800fc68:	697a      	ldr	r2, [r7, #20]
 800fc6a:	6879      	ldr	r1, [r7, #4]
 800fc6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fc6e:	f000 f90b 	bl	800fe88 <tcp_output_segment>
 800fc72:	4603      	mov	r3, r0
 800fc74:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800fc76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d016      	beq.n	800fcac <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	8b5b      	ldrh	r3, [r3, #26]
 800fc82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc86:	b29a      	uxth	r2, r3
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	835a      	strh	r2, [r3, #26]
      return err;
 800fc8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc90:	e0d6      	b.n	800fe40 <tcp_output+0x3e4>
 800fc92:	bf00      	nop
 800fc94:	0801a0b4 	.word	0x0801a0b4
 800fc98:	0801a654 	.word	0x0801a654
 800fc9c:	0801a108 	.word	0x0801a108
 800fca0:	0801a66c 	.word	0x0801a66c
 800fca4:	24003340 	.word	0x24003340
 800fca8:	0801a694 	.word	0x0801a694
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 800fcac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcae:	2200      	movs	r2, #0
 800fcb0:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800fcb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcb4:	681a      	ldr	r2, [r3, #0]
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	7d1b      	ldrb	r3, [r3, #20]
 800fcbe:	2b02      	cmp	r3, #2
 800fcc0:	d006      	beq.n	800fcd0 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	8b5b      	ldrh	r3, [r3, #26]
 800fcc6:	f023 0303 	bic.w	r3, r3, #3
 800fcca:	b29a      	uxth	r2, r3
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800fcd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcd2:	691b      	ldr	r3, [r3, #16]
 800fcd4:	685b      	ldr	r3, [r3, #4]
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f7f9 fbc3 	bl	8009462 <lwip_htonl>
 800fcdc:	4604      	mov	r4, r0
 800fcde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fce0:	891b      	ldrh	r3, [r3, #8]
 800fce2:	461d      	mov	r5, r3
 800fce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fce6:	691b      	ldr	r3, [r3, #16]
 800fce8:	899b      	ldrh	r3, [r3, #12]
 800fcea:	b29b      	uxth	r3, r3
 800fcec:	4618      	mov	r0, r3
 800fcee:	f7f9 fba3 	bl	8009438 <lwip_htons>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	b2db      	uxtb	r3, r3
 800fcf6:	f003 0303 	and.w	r3, r3, #3
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d001      	beq.n	800fd02 <tcp_output+0x2a6>
 800fcfe:	2301      	movs	r3, #1
 800fd00:	e000      	b.n	800fd04 <tcp_output+0x2a8>
 800fd02:	2300      	movs	r3, #0
 800fd04:	442b      	add	r3, r5
 800fd06:	4423      	add	r3, r4
 800fd08:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd0e:	68bb      	ldr	r3, [r7, #8]
 800fd10:	1ad3      	subs	r3, r2, r3
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	da02      	bge.n	800fd1c <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	68ba      	ldr	r2, [r7, #8]
 800fd1a:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800fd1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd1e:	891b      	ldrh	r3, [r3, #8]
 800fd20:	461c      	mov	r4, r3
 800fd22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd24:	691b      	ldr	r3, [r3, #16]
 800fd26:	899b      	ldrh	r3, [r3, #12]
 800fd28:	b29b      	uxth	r3, r3
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f7f9 fb84 	bl	8009438 <lwip_htons>
 800fd30:	4603      	mov	r3, r0
 800fd32:	b2db      	uxtb	r3, r3
 800fd34:	f003 0303 	and.w	r3, r3, #3
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d001      	beq.n	800fd40 <tcp_output+0x2e4>
 800fd3c:	2301      	movs	r3, #1
 800fd3e:	e000      	b.n	800fd42 <tcp_output+0x2e6>
 800fd40:	2300      	movs	r3, #0
 800fd42:	4423      	add	r3, r4
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d049      	beq.n	800fddc <tcp_output+0x380>
      seg->next = NULL;
 800fd48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d105      	bne.n	800fd62 <tcp_output+0x306>
        pcb->unacked = seg;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fd5a:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800fd5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd5e:	623b      	str	r3, [r7, #32]
 800fd60:	e03f      	b.n	800fde2 <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800fd62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd64:	691b      	ldr	r3, [r3, #16]
 800fd66:	685b      	ldr	r3, [r3, #4]
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f7f9 fb7a 	bl	8009462 <lwip_htonl>
 800fd6e:	4604      	mov	r4, r0
 800fd70:	6a3b      	ldr	r3, [r7, #32]
 800fd72:	691b      	ldr	r3, [r3, #16]
 800fd74:	685b      	ldr	r3, [r3, #4]
 800fd76:	4618      	mov	r0, r3
 800fd78:	f7f9 fb73 	bl	8009462 <lwip_htonl>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	1ae3      	subs	r3, r4, r3
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	da24      	bge.n	800fdce <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	3370      	adds	r3, #112	@ 0x70
 800fd88:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800fd8a:	e002      	b.n	800fd92 <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800fd8c:	69fb      	ldr	r3, [r7, #28]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800fd92:	69fb      	ldr	r3, [r7, #28]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d011      	beq.n	800fdbe <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fd9a:	69fb      	ldr	r3, [r7, #28]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	691b      	ldr	r3, [r3, #16]
 800fda0:	685b      	ldr	r3, [r3, #4]
 800fda2:	4618      	mov	r0, r3
 800fda4:	f7f9 fb5d 	bl	8009462 <lwip_htonl>
 800fda8:	4604      	mov	r4, r0
 800fdaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdac:	691b      	ldr	r3, [r3, #16]
 800fdae:	685b      	ldr	r3, [r3, #4]
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f7f9 fb56 	bl	8009462 <lwip_htonl>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	dbe6      	blt.n	800fd8c <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 800fdbe:	69fb      	ldr	r3, [r7, #28]
 800fdc0:	681a      	ldr	r2, [r3, #0]
 800fdc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdc4:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800fdc6:	69fb      	ldr	r3, [r7, #28]
 800fdc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fdca:	601a      	str	r2, [r3, #0]
 800fdcc:	e009      	b.n	800fde2 <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800fdce:	6a3b      	ldr	r3, [r7, #32]
 800fdd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fdd2:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800fdd4:	6a3b      	ldr	r3, [r7, #32]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	623b      	str	r3, [r7, #32]
 800fdda:	e002      	b.n	800fde2 <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800fddc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fdde:	f7fc face 	bl	800c37e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fde6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800fde8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d012      	beq.n	800fe14 <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800fdee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdf0:	691b      	ldr	r3, [r3, #16]
 800fdf2:	685b      	ldr	r3, [r3, #4]
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	f7f9 fb34 	bl	8009462 <lwip_htonl>
 800fdfa:	4602      	mov	r2, r0
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe00:	1ad3      	subs	r3, r2, r3
 800fe02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fe04:	8912      	ldrh	r2, [r2, #8]
 800fe06:	4413      	add	r3, r2
  while (seg != NULL &&
 800fe08:	69ba      	ldr	r2, [r7, #24]
 800fe0a:	429a      	cmp	r2, r3
 800fe0c:	f4bf aed6 	bcs.w	800fbbc <tcp_output+0x160>
 800fe10:	e000      	b.n	800fe14 <tcp_output+0x3b8>
      break;
 800fe12:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d108      	bne.n	800fe2e <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	2200      	movs	r2, #0
 800fe20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800fe24:	e004      	b.n	800fe30 <tcp_output+0x3d4>
    goto output_done;
 800fe26:	bf00      	nop
 800fe28:	e002      	b.n	800fe30 <tcp_output+0x3d4>
    goto output_done;
 800fe2a:	bf00      	nop
 800fe2c:	e000      	b.n	800fe30 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800fe2e:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	8b5b      	ldrh	r3, [r3, #26]
 800fe34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fe38:	b29a      	uxth	r2, r3
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800fe3e:	2300      	movs	r3, #0
}
 800fe40:	4618      	mov	r0, r3
 800fe42:	3728      	adds	r7, #40	@ 0x28
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bdb0      	pop	{r4, r5, r7, pc}

0800fe48 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b082      	sub	sp, #8
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d106      	bne.n	800fe64 <tcp_output_segment_busy+0x1c>
 800fe56:	4b09      	ldr	r3, [pc, #36]	@ (800fe7c <tcp_output_segment_busy+0x34>)
 800fe58:	f240 529a 	movw	r2, #1434	@ 0x59a
 800fe5c:	4908      	ldr	r1, [pc, #32]	@ (800fe80 <tcp_output_segment_busy+0x38>)
 800fe5e:	4809      	ldr	r0, [pc, #36]	@ (800fe84 <tcp_output_segment_busy+0x3c>)
 800fe60:	f006 ff2c 	bl	8016cbc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	685b      	ldr	r3, [r3, #4]
 800fe68:	7b9b      	ldrb	r3, [r3, #14]
 800fe6a:	2b01      	cmp	r3, #1
 800fe6c:	d001      	beq.n	800fe72 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800fe6e:	2301      	movs	r3, #1
 800fe70:	e000      	b.n	800fe74 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800fe72:	2300      	movs	r3, #0
}
 800fe74:	4618      	mov	r0, r3
 800fe76:	3708      	adds	r7, #8
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}
 800fe7c:	0801a0b4 	.word	0x0801a0b4
 800fe80:	0801a6ac 	.word	0x0801a6ac
 800fe84:	0801a108 	.word	0x0801a108

0800fe88 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800fe88:	b5b0      	push	{r4, r5, r7, lr}
 800fe8a:	b08c      	sub	sp, #48	@ 0x30
 800fe8c:	af04      	add	r7, sp, #16
 800fe8e:	60f8      	str	r0, [r7, #12]
 800fe90:	60b9      	str	r1, [r7, #8]
 800fe92:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d106      	bne.n	800fea8 <tcp_output_segment+0x20>
 800fe9a:	4b64      	ldr	r3, [pc, #400]	@ (801002c <tcp_output_segment+0x1a4>)
 800fe9c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800fea0:	4963      	ldr	r1, [pc, #396]	@ (8010030 <tcp_output_segment+0x1a8>)
 800fea2:	4864      	ldr	r0, [pc, #400]	@ (8010034 <tcp_output_segment+0x1ac>)
 800fea4:	f006 ff0a 	bl	8016cbc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d106      	bne.n	800febc <tcp_output_segment+0x34>
 800feae:	4b5f      	ldr	r3, [pc, #380]	@ (801002c <tcp_output_segment+0x1a4>)
 800feb0:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800feb4:	4960      	ldr	r1, [pc, #384]	@ (8010038 <tcp_output_segment+0x1b0>)
 800feb6:	485f      	ldr	r0, [pc, #380]	@ (8010034 <tcp_output_segment+0x1ac>)
 800feb8:	f006 ff00 	bl	8016cbc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d106      	bne.n	800fed0 <tcp_output_segment+0x48>
 800fec2:	4b5a      	ldr	r3, [pc, #360]	@ (801002c <tcp_output_segment+0x1a4>)
 800fec4:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800fec8:	495c      	ldr	r1, [pc, #368]	@ (801003c <tcp_output_segment+0x1b4>)
 800feca:	485a      	ldr	r0, [pc, #360]	@ (8010034 <tcp_output_segment+0x1ac>)
 800fecc:	f006 fef6 	bl	8016cbc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800fed0:	68f8      	ldr	r0, [r7, #12]
 800fed2:	f7ff ffb9 	bl	800fe48 <tcp_output_segment_busy>
 800fed6:	4603      	mov	r3, r0
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d001      	beq.n	800fee0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800fedc:	2300      	movs	r3, #0
 800fede:	e0a1      	b.n	8010024 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	691c      	ldr	r4, [r3, #16]
 800fee8:	4610      	mov	r0, r2
 800feea:	f7f9 faba 	bl	8009462 <lwip_htonl>
 800feee:	4603      	mov	r3, r0
 800fef0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800fef2:	68bb      	ldr	r3, [r7, #8]
 800fef4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	691c      	ldr	r4, [r3, #16]
 800fefa:	4610      	mov	r0, r2
 800fefc:	f7f9 fa9c 	bl	8009438 <lwip_htons>
 800ff00:	4603      	mov	r3, r0
 800ff02:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ff04:	68bb      	ldr	r3, [r7, #8]
 800ff06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff08:	68ba      	ldr	r2, [r7, #8]
 800ff0a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800ff0c:	441a      	add	r2, r3
 800ff0e:	68bb      	ldr	r3, [r7, #8]
 800ff10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	691b      	ldr	r3, [r3, #16]
 800ff16:	3314      	adds	r3, #20
 800ff18:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	7b1b      	ldrb	r3, [r3, #12]
 800ff1e:	f003 0301 	and.w	r3, r3, #1
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d015      	beq.n	800ff52 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ff26:	68bb      	ldr	r3, [r7, #8]
 800ff28:	3304      	adds	r3, #4
 800ff2a:	461a      	mov	r2, r3
 800ff2c:	6879      	ldr	r1, [r7, #4]
 800ff2e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800ff32:	f7fc fd83 	bl	800ca3c <tcp_eff_send_mss_netif>
 800ff36:	4603      	mov	r3, r0
 800ff38:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ff3a:	8b7b      	ldrh	r3, [r7, #26]
 800ff3c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800ff40:	4618      	mov	r0, r3
 800ff42:	f7f9 fa8e 	bl	8009462 <lwip_htonl>
 800ff46:	4602      	mov	r2, r0
 800ff48:	69fb      	ldr	r3, [r7, #28]
 800ff4a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ff4c:	69fb      	ldr	r3, [r7, #28]
 800ff4e:	3304      	adds	r3, #4
 800ff50:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ff52:	68bb      	ldr	r3, [r7, #8]
 800ff54:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	da02      	bge.n	800ff62 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800ff5c:	68bb      	ldr	r3, [r7, #8]
 800ff5e:	2200      	movs	r2, #0
 800ff60:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d10c      	bne.n	800ff84 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800ff6a:	4b35      	ldr	r3, [pc, #212]	@ (8010040 <tcp_output_segment+0x1b8>)
 800ff6c:	681a      	ldr	r2, [r3, #0]
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	691b      	ldr	r3, [r3, #16]
 800ff76:	685b      	ldr	r3, [r3, #4]
 800ff78:	4618      	mov	r0, r3
 800ff7a:	f7f9 fa72 	bl	8009462 <lwip_htonl>
 800ff7e:	4602      	mov	r2, r0
 800ff80:	68bb      	ldr	r3, [r7, #8]
 800ff82:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	691a      	ldr	r2, [r3, #16]
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	685b      	ldr	r3, [r3, #4]
 800ff8c:	685b      	ldr	r3, [r3, #4]
 800ff8e:	1ad3      	subs	r3, r2, r3
 800ff90:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	685b      	ldr	r3, [r3, #4]
 800ff96:	8959      	ldrh	r1, [r3, #10]
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	685b      	ldr	r3, [r3, #4]
 800ff9c:	8b3a      	ldrh	r2, [r7, #24]
 800ff9e:	1a8a      	subs	r2, r1, r2
 800ffa0:	b292      	uxth	r2, r2
 800ffa2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	685b      	ldr	r3, [r3, #4]
 800ffa8:	8919      	ldrh	r1, [r3, #8]
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	685b      	ldr	r3, [r3, #4]
 800ffae:	8b3a      	ldrh	r2, [r7, #24]
 800ffb0:	1a8a      	subs	r2, r1, r2
 800ffb2:	b292      	uxth	r2, r2
 800ffb4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	685b      	ldr	r3, [r3, #4]
 800ffba:	68fa      	ldr	r2, [r7, #12]
 800ffbc:	6912      	ldr	r2, [r2, #16]
 800ffbe:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	691b      	ldr	r3, [r3, #16]
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	741a      	strb	r2, [r3, #16]
 800ffc8:	2200      	movs	r2, #0
 800ffca:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	691a      	ldr	r2, [r3, #16]
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	7b1b      	ldrb	r3, [r3, #12]
 800ffd4:	f003 0301 	and.w	r3, r3, #1
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d001      	beq.n	800ffe0 <tcp_output_segment+0x158>
 800ffdc:	2318      	movs	r3, #24
 800ffde:	e000      	b.n	800ffe2 <tcp_output_segment+0x15a>
 800ffe0:	2314      	movs	r3, #20
 800ffe2:	4413      	add	r3, r2
 800ffe4:	69fa      	ldr	r2, [r7, #28]
 800ffe6:	429a      	cmp	r2, r3
 800ffe8:	d006      	beq.n	800fff8 <tcp_output_segment+0x170>
 800ffea:	4b10      	ldr	r3, [pc, #64]	@ (801002c <tcp_output_segment+0x1a4>)
 800ffec:	f240 621c 	movw	r2, #1564	@ 0x61c
 800fff0:	4914      	ldr	r1, [pc, #80]	@ (8010044 <tcp_output_segment+0x1bc>)
 800fff2:	4810      	ldr	r0, [pc, #64]	@ (8010034 <tcp_output_segment+0x1ac>)
 800fff4:	f006 fe62 	bl	8016cbc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	6858      	ldr	r0, [r3, #4]
 800fffc:	68b9      	ldr	r1, [r7, #8]
 800fffe:	68bb      	ldr	r3, [r7, #8]
 8010000:	1d1c      	adds	r4, r3, #4
 8010002:	68bb      	ldr	r3, [r7, #8]
 8010004:	7add      	ldrb	r5, [r3, #11]
 8010006:	68bb      	ldr	r3, [r7, #8]
 8010008:	7a9b      	ldrb	r3, [r3, #10]
 801000a:	687a      	ldr	r2, [r7, #4]
 801000c:	9202      	str	r2, [sp, #8]
 801000e:	2206      	movs	r2, #6
 8010010:	9201      	str	r2, [sp, #4]
 8010012:	9300      	str	r3, [sp, #0]
 8010014:	462b      	mov	r3, r5
 8010016:	4622      	mov	r2, r4
 8010018:	f005 fbd2 	bl	80157c0 <ip4_output_if>
 801001c:	4603      	mov	r3, r0
 801001e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8010020:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010024:	4618      	mov	r0, r3
 8010026:	3720      	adds	r7, #32
 8010028:	46bd      	mov	sp, r7
 801002a:	bdb0      	pop	{r4, r5, r7, pc}
 801002c:	0801a0b4 	.word	0x0801a0b4
 8010030:	0801a6d4 	.word	0x0801a6d4
 8010034:	0801a108 	.word	0x0801a108
 8010038:	0801a6f4 	.word	0x0801a6f4
 801003c:	0801a714 	.word	0x0801a714
 8010040:	240032f0 	.word	0x240032f0
 8010044:	0801a738 	.word	0x0801a738

08010048 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8010048:	b5b0      	push	{r4, r5, r7, lr}
 801004a:	b084      	sub	sp, #16
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d106      	bne.n	8010064 <tcp_rexmit_rto_prepare+0x1c>
 8010056:	4b36      	ldr	r3, [pc, #216]	@ (8010130 <tcp_rexmit_rto_prepare+0xe8>)
 8010058:	f240 6263 	movw	r2, #1635	@ 0x663
 801005c:	4935      	ldr	r1, [pc, #212]	@ (8010134 <tcp_rexmit_rto_prepare+0xec>)
 801005e:	4836      	ldr	r0, [pc, #216]	@ (8010138 <tcp_rexmit_rto_prepare+0xf0>)
 8010060:	f006 fe2c 	bl	8016cbc <iprintf>

  if (pcb->unacked == NULL) {
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010068:	2b00      	cmp	r3, #0
 801006a:	d102      	bne.n	8010072 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801006c:	f06f 0305 	mvn.w	r3, #5
 8010070:	e059      	b.n	8010126 <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010076:	60fb      	str	r3, [r7, #12]
 8010078:	e00b      	b.n	8010092 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801007a:	68f8      	ldr	r0, [r7, #12]
 801007c:	f7ff fee4 	bl	800fe48 <tcp_output_segment_busy>
 8010080:	4603      	mov	r3, r0
 8010082:	2b00      	cmp	r3, #0
 8010084:	d002      	beq.n	801008c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8010086:	f06f 0305 	mvn.w	r3, #5
 801008a:	e04c      	b.n	8010126 <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	60fb      	str	r3, [r7, #12]
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d1ef      	bne.n	801007a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801009a:	68f8      	ldr	r0, [r7, #12]
 801009c:	f7ff fed4 	bl	800fe48 <tcp_output_segment_busy>
 80100a0:	4603      	mov	r3, r0
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d002      	beq.n	80100ac <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80100a6:	f06f 0305 	mvn.w	r3, #5
 80100aa:	e03c      	b.n	8010126 <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d104      	bne.n	80100c6 <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	895a      	ldrh	r2, [r3, #10]
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	2200      	movs	r2, #0
 80100d2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	8b5b      	ldrh	r3, [r3, #26]
 80100d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80100dc:	b29a      	uxth	r2, r3
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	691b      	ldr	r3, [r3, #16]
 80100e6:	685b      	ldr	r3, [r3, #4]
 80100e8:	4618      	mov	r0, r3
 80100ea:	f7f9 f9ba 	bl	8009462 <lwip_htonl>
 80100ee:	4604      	mov	r4, r0
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	891b      	ldrh	r3, [r3, #8]
 80100f4:	461d      	mov	r5, r3
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	691b      	ldr	r3, [r3, #16]
 80100fa:	899b      	ldrh	r3, [r3, #12]
 80100fc:	b29b      	uxth	r3, r3
 80100fe:	4618      	mov	r0, r3
 8010100:	f7f9 f99a 	bl	8009438 <lwip_htons>
 8010104:	4603      	mov	r3, r0
 8010106:	b2db      	uxtb	r3, r3
 8010108:	f003 0303 	and.w	r3, r3, #3
 801010c:	2b00      	cmp	r3, #0
 801010e:	d001      	beq.n	8010114 <tcp_rexmit_rto_prepare+0xcc>
 8010110:	2301      	movs	r3, #1
 8010112:	e000      	b.n	8010116 <tcp_rexmit_rto_prepare+0xce>
 8010114:	2300      	movs	r3, #0
 8010116:	442b      	add	r3, r5
 8010118:	18e2      	adds	r2, r4, r3
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	2200      	movs	r2, #0
 8010122:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8010124:	2300      	movs	r3, #0
}
 8010126:	4618      	mov	r0, r3
 8010128:	3710      	adds	r7, #16
 801012a:	46bd      	mov	sp, r7
 801012c:	bdb0      	pop	{r4, r5, r7, pc}
 801012e:	bf00      	nop
 8010130:	0801a0b4 	.word	0x0801a0b4
 8010134:	0801a74c 	.word	0x0801a74c
 8010138:	0801a108 	.word	0x0801a108

0801013c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b082      	sub	sp, #8
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d106      	bne.n	8010158 <tcp_rexmit_rto_commit+0x1c>
 801014a:	4b0d      	ldr	r3, [pc, #52]	@ (8010180 <tcp_rexmit_rto_commit+0x44>)
 801014c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8010150:	490c      	ldr	r1, [pc, #48]	@ (8010184 <tcp_rexmit_rto_commit+0x48>)
 8010152:	480d      	ldr	r0, [pc, #52]	@ (8010188 <tcp_rexmit_rto_commit+0x4c>)
 8010154:	f006 fdb2 	bl	8016cbc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801015e:	2bff      	cmp	r3, #255	@ 0xff
 8010160:	d007      	beq.n	8010172 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010168:	3301      	adds	r3, #1
 801016a:	b2da      	uxtb	r2, r3
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8010172:	6878      	ldr	r0, [r7, #4]
 8010174:	f7ff fc72 	bl	800fa5c <tcp_output>
}
 8010178:	bf00      	nop
 801017a:	3708      	adds	r7, #8
 801017c:	46bd      	mov	sp, r7
 801017e:	bd80      	pop	{r7, pc}
 8010180:	0801a0b4 	.word	0x0801a0b4
 8010184:	0801a770 	.word	0x0801a770
 8010188:	0801a108 	.word	0x0801a108

0801018c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b082      	sub	sp, #8
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d106      	bne.n	80101a8 <tcp_rexmit_rto+0x1c>
 801019a:	4b0a      	ldr	r3, [pc, #40]	@ (80101c4 <tcp_rexmit_rto+0x38>)
 801019c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80101a0:	4909      	ldr	r1, [pc, #36]	@ (80101c8 <tcp_rexmit_rto+0x3c>)
 80101a2:	480a      	ldr	r0, [pc, #40]	@ (80101cc <tcp_rexmit_rto+0x40>)
 80101a4:	f006 fd8a 	bl	8016cbc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80101a8:	6878      	ldr	r0, [r7, #4]
 80101aa:	f7ff ff4d 	bl	8010048 <tcp_rexmit_rto_prepare>
 80101ae:	4603      	mov	r3, r0
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d102      	bne.n	80101ba <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80101b4:	6878      	ldr	r0, [r7, #4]
 80101b6:	f7ff ffc1 	bl	801013c <tcp_rexmit_rto_commit>
  }
}
 80101ba:	bf00      	nop
 80101bc:	3708      	adds	r7, #8
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}
 80101c2:	bf00      	nop
 80101c4:	0801a0b4 	.word	0x0801a0b4
 80101c8:	0801a794 	.word	0x0801a794
 80101cc:	0801a108 	.word	0x0801a108

080101d0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80101d0:	b590      	push	{r4, r7, lr}
 80101d2:	b085      	sub	sp, #20
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d106      	bne.n	80101ec <tcp_rexmit+0x1c>
 80101de:	4b2f      	ldr	r3, [pc, #188]	@ (801029c <tcp_rexmit+0xcc>)
 80101e0:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80101e4:	492e      	ldr	r1, [pc, #184]	@ (80102a0 <tcp_rexmit+0xd0>)
 80101e6:	482f      	ldr	r0, [pc, #188]	@ (80102a4 <tcp_rexmit+0xd4>)
 80101e8:	f006 fd68 	bl	8016cbc <iprintf>

  if (pcb->unacked == NULL) {
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d102      	bne.n	80101fa <tcp_rexmit+0x2a>
    return ERR_VAL;
 80101f4:	f06f 0305 	mvn.w	r3, #5
 80101f8:	e04c      	b.n	8010294 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80101fe:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010200:	68b8      	ldr	r0, [r7, #8]
 8010202:	f7ff fe21 	bl	800fe48 <tcp_output_segment_busy>
 8010206:	4603      	mov	r3, r0
 8010208:	2b00      	cmp	r3, #0
 801020a:	d002      	beq.n	8010212 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801020c:	f06f 0305 	mvn.w	r3, #5
 8010210:	e040      	b.n	8010294 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8010212:	68bb      	ldr	r3, [r7, #8]
 8010214:	681a      	ldr	r2, [r3, #0]
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	336c      	adds	r3, #108	@ 0x6c
 801021e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010220:	e002      	b.n	8010228 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d011      	beq.n	8010254 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	691b      	ldr	r3, [r3, #16]
 8010236:	685b      	ldr	r3, [r3, #4]
 8010238:	4618      	mov	r0, r3
 801023a:	f7f9 f912 	bl	8009462 <lwip_htonl>
 801023e:	4604      	mov	r4, r0
 8010240:	68bb      	ldr	r3, [r7, #8]
 8010242:	691b      	ldr	r3, [r3, #16]
 8010244:	685b      	ldr	r3, [r3, #4]
 8010246:	4618      	mov	r0, r3
 8010248:	f7f9 f90b 	bl	8009462 <lwip_htonl>
 801024c:	4603      	mov	r3, r0
 801024e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010250:	2b00      	cmp	r3, #0
 8010252:	dbe6      	blt.n	8010222 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	681a      	ldr	r2, [r3, #0]
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	68ba      	ldr	r2, [r7, #8]
 8010260:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010262:	68bb      	ldr	r3, [r7, #8]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d103      	bne.n	8010272 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	2200      	movs	r2, #0
 801026e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010278:	2bff      	cmp	r3, #255	@ 0xff
 801027a:	d007      	beq.n	801028c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010282:	3301      	adds	r3, #1
 8010284:	b2da      	uxtb	r2, r3
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	2200      	movs	r2, #0
 8010290:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010292:	2300      	movs	r3, #0
}
 8010294:	4618      	mov	r0, r3
 8010296:	3714      	adds	r7, #20
 8010298:	46bd      	mov	sp, r7
 801029a:	bd90      	pop	{r4, r7, pc}
 801029c:	0801a0b4 	.word	0x0801a0b4
 80102a0:	0801a7b0 	.word	0x0801a7b0
 80102a4:	0801a108 	.word	0x0801a108

080102a8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b082      	sub	sp, #8
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d106      	bne.n	80102c4 <tcp_rexmit_fast+0x1c>
 80102b6:	4b2a      	ldr	r3, [pc, #168]	@ (8010360 <tcp_rexmit_fast+0xb8>)
 80102b8:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80102bc:	4929      	ldr	r1, [pc, #164]	@ (8010364 <tcp_rexmit_fast+0xbc>)
 80102be:	482a      	ldr	r0, [pc, #168]	@ (8010368 <tcp_rexmit_fast+0xc0>)
 80102c0:	f006 fcfc 	bl	8016cbc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d045      	beq.n	8010358 <tcp_rexmit_fast+0xb0>
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	8b5b      	ldrh	r3, [r3, #26]
 80102d0:	f003 0304 	and.w	r3, r3, #4
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d13f      	bne.n	8010358 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80102d8:	6878      	ldr	r0, [r7, #4]
 80102da:	f7ff ff79 	bl	80101d0 <tcp_rexmit>
 80102de:	4603      	mov	r3, r0
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d139      	bne.n	8010358 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80102f0:	4293      	cmp	r3, r2
 80102f2:	bf28      	it	cs
 80102f4:	4613      	movcs	r3, r2
 80102f6:	b29b      	uxth	r3, r3
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	da00      	bge.n	80102fe <tcp_rexmit_fast+0x56>
 80102fc:	3301      	adds	r3, #1
 80102fe:	105b      	asrs	r3, r3, #1
 8010300:	b29a      	uxth	r2, r3
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801030e:	461a      	mov	r2, r3
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010314:	005b      	lsls	r3, r3, #1
 8010316:	429a      	cmp	r2, r3
 8010318:	d206      	bcs.n	8010328 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801031e:	005b      	lsls	r3, r3, #1
 8010320:	b29a      	uxth	r2, r3
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010332:	4619      	mov	r1, r3
 8010334:	0049      	lsls	r1, r1, #1
 8010336:	440b      	add	r3, r1
 8010338:	b29b      	uxth	r3, r3
 801033a:	4413      	add	r3, r2
 801033c:	b29a      	uxth	r2, r3
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	8b5b      	ldrh	r3, [r3, #26]
 8010348:	f043 0304 	orr.w	r3, r3, #4
 801034c:	b29a      	uxth	r2, r3
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	2200      	movs	r2, #0
 8010356:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8010358:	bf00      	nop
 801035a:	3708      	adds	r7, #8
 801035c:	46bd      	mov	sp, r7
 801035e:	bd80      	pop	{r7, pc}
 8010360:	0801a0b4 	.word	0x0801a0b4
 8010364:	0801a7c8 	.word	0x0801a7c8
 8010368:	0801a108 	.word	0x0801a108

0801036c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b086      	sub	sp, #24
 8010370:	af00      	add	r7, sp, #0
 8010372:	60f8      	str	r0, [r7, #12]
 8010374:	607b      	str	r3, [r7, #4]
 8010376:	460b      	mov	r3, r1
 8010378:	817b      	strh	r3, [r7, #10]
 801037a:	4613      	mov	r3, r2
 801037c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801037e:	897a      	ldrh	r2, [r7, #10]
 8010380:	893b      	ldrh	r3, [r7, #8]
 8010382:	4413      	add	r3, r2
 8010384:	b29b      	uxth	r3, r3
 8010386:	3314      	adds	r3, #20
 8010388:	b29b      	uxth	r3, r3
 801038a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801038e:	4619      	mov	r1, r3
 8010390:	2022      	movs	r0, #34	@ 0x22
 8010392:	f7fa f9a3 	bl	800a6dc <pbuf_alloc>
 8010396:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010398:	697b      	ldr	r3, [r7, #20]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d04d      	beq.n	801043a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801039e:	897b      	ldrh	r3, [r7, #10]
 80103a0:	3313      	adds	r3, #19
 80103a2:	697a      	ldr	r2, [r7, #20]
 80103a4:	8952      	ldrh	r2, [r2, #10]
 80103a6:	4293      	cmp	r3, r2
 80103a8:	db06      	blt.n	80103b8 <tcp_output_alloc_header_common+0x4c>
 80103aa:	4b26      	ldr	r3, [pc, #152]	@ (8010444 <tcp_output_alloc_header_common+0xd8>)
 80103ac:	f240 7223 	movw	r2, #1827	@ 0x723
 80103b0:	4925      	ldr	r1, [pc, #148]	@ (8010448 <tcp_output_alloc_header_common+0xdc>)
 80103b2:	4826      	ldr	r0, [pc, #152]	@ (801044c <tcp_output_alloc_header_common+0xe0>)
 80103b4:	f006 fc82 	bl	8016cbc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80103b8:	697b      	ldr	r3, [r7, #20]
 80103ba:	685b      	ldr	r3, [r3, #4]
 80103bc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80103be:	8c3b      	ldrh	r3, [r7, #32]
 80103c0:	4618      	mov	r0, r3
 80103c2:	f7f9 f839 	bl	8009438 <lwip_htons>
 80103c6:	4603      	mov	r3, r0
 80103c8:	461a      	mov	r2, r3
 80103ca:	693b      	ldr	r3, [r7, #16]
 80103cc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80103ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80103d0:	4618      	mov	r0, r3
 80103d2:	f7f9 f831 	bl	8009438 <lwip_htons>
 80103d6:	4603      	mov	r3, r0
 80103d8:	461a      	mov	r2, r3
 80103da:	693b      	ldr	r3, [r7, #16]
 80103dc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80103de:	693b      	ldr	r3, [r7, #16]
 80103e0:	687a      	ldr	r2, [r7, #4]
 80103e2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80103e4:	68f8      	ldr	r0, [r7, #12]
 80103e6:	f7f9 f83c 	bl	8009462 <lwip_htonl>
 80103ea:	4602      	mov	r2, r0
 80103ec:	693b      	ldr	r3, [r7, #16]
 80103ee:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80103f0:	897b      	ldrh	r3, [r7, #10]
 80103f2:	089b      	lsrs	r3, r3, #2
 80103f4:	b29b      	uxth	r3, r3
 80103f6:	3305      	adds	r3, #5
 80103f8:	b29b      	uxth	r3, r3
 80103fa:	031b      	lsls	r3, r3, #12
 80103fc:	b29a      	uxth	r2, r3
 80103fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010402:	b29b      	uxth	r3, r3
 8010404:	4313      	orrs	r3, r2
 8010406:	b29b      	uxth	r3, r3
 8010408:	4618      	mov	r0, r3
 801040a:	f7f9 f815 	bl	8009438 <lwip_htons>
 801040e:	4603      	mov	r3, r0
 8010410:	461a      	mov	r2, r3
 8010412:	693b      	ldr	r3, [r7, #16]
 8010414:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010416:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010418:	4618      	mov	r0, r3
 801041a:	f7f9 f80d 	bl	8009438 <lwip_htons>
 801041e:	4603      	mov	r3, r0
 8010420:	461a      	mov	r2, r3
 8010422:	693b      	ldr	r3, [r7, #16]
 8010424:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010426:	693b      	ldr	r3, [r7, #16]
 8010428:	2200      	movs	r2, #0
 801042a:	741a      	strb	r2, [r3, #16]
 801042c:	2200      	movs	r2, #0
 801042e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010430:	693b      	ldr	r3, [r7, #16]
 8010432:	2200      	movs	r2, #0
 8010434:	749a      	strb	r2, [r3, #18]
 8010436:	2200      	movs	r2, #0
 8010438:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801043a:	697b      	ldr	r3, [r7, #20]
}
 801043c:	4618      	mov	r0, r3
 801043e:	3718      	adds	r7, #24
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}
 8010444:	0801a0b4 	.word	0x0801a0b4
 8010448:	0801a7e8 	.word	0x0801a7e8
 801044c:	0801a108 	.word	0x0801a108

08010450 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010450:	b5b0      	push	{r4, r5, r7, lr}
 8010452:	b08a      	sub	sp, #40	@ 0x28
 8010454:	af04      	add	r7, sp, #16
 8010456:	60f8      	str	r0, [r7, #12]
 8010458:	607b      	str	r3, [r7, #4]
 801045a:	460b      	mov	r3, r1
 801045c:	817b      	strh	r3, [r7, #10]
 801045e:	4613      	mov	r3, r2
 8010460:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d106      	bne.n	8010476 <tcp_output_alloc_header+0x26>
 8010468:	4b15      	ldr	r3, [pc, #84]	@ (80104c0 <tcp_output_alloc_header+0x70>)
 801046a:	f240 7242 	movw	r2, #1858	@ 0x742
 801046e:	4915      	ldr	r1, [pc, #84]	@ (80104c4 <tcp_output_alloc_header+0x74>)
 8010470:	4815      	ldr	r0, [pc, #84]	@ (80104c8 <tcp_output_alloc_header+0x78>)
 8010472:	f006 fc23 	bl	8016cbc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	8adb      	ldrh	r3, [r3, #22]
 801047e:	68fa      	ldr	r2, [r7, #12]
 8010480:	8b12      	ldrh	r2, [r2, #24]
 8010482:	68f9      	ldr	r1, [r7, #12]
 8010484:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8010486:	893d      	ldrh	r5, [r7, #8]
 8010488:	897c      	ldrh	r4, [r7, #10]
 801048a:	9103      	str	r1, [sp, #12]
 801048c:	2110      	movs	r1, #16
 801048e:	9102      	str	r1, [sp, #8]
 8010490:	9201      	str	r2, [sp, #4]
 8010492:	9300      	str	r3, [sp, #0]
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	462a      	mov	r2, r5
 8010498:	4621      	mov	r1, r4
 801049a:	f7ff ff67 	bl	801036c <tcp_output_alloc_header_common>
 801049e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80104a0:	697b      	ldr	r3, [r7, #20]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d006      	beq.n	80104b4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104aa:	68fa      	ldr	r2, [r7, #12]
 80104ac:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80104ae:	441a      	add	r2, r3
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80104b4:	697b      	ldr	r3, [r7, #20]
}
 80104b6:	4618      	mov	r0, r3
 80104b8:	3718      	adds	r7, #24
 80104ba:	46bd      	mov	sp, r7
 80104bc:	bdb0      	pop	{r4, r5, r7, pc}
 80104be:	bf00      	nop
 80104c0:	0801a0b4 	.word	0x0801a0b4
 80104c4:	0801a818 	.word	0x0801a818
 80104c8:	0801a108 	.word	0x0801a108

080104cc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b088      	sub	sp, #32
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	60f8      	str	r0, [r7, #12]
 80104d4:	60b9      	str	r1, [r7, #8]
 80104d6:	4611      	mov	r1, r2
 80104d8:	461a      	mov	r2, r3
 80104da:	460b      	mov	r3, r1
 80104dc:	71fb      	strb	r3, [r7, #7]
 80104de:	4613      	mov	r3, r2
 80104e0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80104e2:	2300      	movs	r3, #0
 80104e4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80104e6:	68bb      	ldr	r3, [r7, #8]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d106      	bne.n	80104fa <tcp_output_fill_options+0x2e>
 80104ec:	4b12      	ldr	r3, [pc, #72]	@ (8010538 <tcp_output_fill_options+0x6c>)
 80104ee:	f240 7256 	movw	r2, #1878	@ 0x756
 80104f2:	4912      	ldr	r1, [pc, #72]	@ (801053c <tcp_output_fill_options+0x70>)
 80104f4:	4812      	ldr	r0, [pc, #72]	@ (8010540 <tcp_output_fill_options+0x74>)
 80104f6:	f006 fbe1 	bl	8016cbc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80104fa:	68bb      	ldr	r3, [r7, #8]
 80104fc:	685b      	ldr	r3, [r3, #4]
 80104fe:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010500:	69bb      	ldr	r3, [r7, #24]
 8010502:	3314      	adds	r3, #20
 8010504:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010506:	8bfb      	ldrh	r3, [r7, #30]
 8010508:	009b      	lsls	r3, r3, #2
 801050a:	461a      	mov	r2, r3
 801050c:	79fb      	ldrb	r3, [r7, #7]
 801050e:	009b      	lsls	r3, r3, #2
 8010510:	f003 0304 	and.w	r3, r3, #4
 8010514:	4413      	add	r3, r2
 8010516:	3314      	adds	r3, #20
 8010518:	69ba      	ldr	r2, [r7, #24]
 801051a:	4413      	add	r3, r2
 801051c:	697a      	ldr	r2, [r7, #20]
 801051e:	429a      	cmp	r2, r3
 8010520:	d006      	beq.n	8010530 <tcp_output_fill_options+0x64>
 8010522:	4b05      	ldr	r3, [pc, #20]	@ (8010538 <tcp_output_fill_options+0x6c>)
 8010524:	f240 7275 	movw	r2, #1909	@ 0x775
 8010528:	4906      	ldr	r1, [pc, #24]	@ (8010544 <tcp_output_fill_options+0x78>)
 801052a:	4805      	ldr	r0, [pc, #20]	@ (8010540 <tcp_output_fill_options+0x74>)
 801052c:	f006 fbc6 	bl	8016cbc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010530:	bf00      	nop
 8010532:	3720      	adds	r7, #32
 8010534:	46bd      	mov	sp, r7
 8010536:	bd80      	pop	{r7, pc}
 8010538:	0801a0b4 	.word	0x0801a0b4
 801053c:	0801a840 	.word	0x0801a840
 8010540:	0801a108 	.word	0x0801a108
 8010544:	0801a738 	.word	0x0801a738

08010548 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b08a      	sub	sp, #40	@ 0x28
 801054c:	af04      	add	r7, sp, #16
 801054e:	60f8      	str	r0, [r7, #12]
 8010550:	60b9      	str	r1, [r7, #8]
 8010552:	607a      	str	r2, [r7, #4]
 8010554:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010556:	68bb      	ldr	r3, [r7, #8]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d106      	bne.n	801056a <tcp_output_control_segment+0x22>
 801055c:	4b1c      	ldr	r3, [pc, #112]	@ (80105d0 <tcp_output_control_segment+0x88>)
 801055e:	f240 7287 	movw	r2, #1927	@ 0x787
 8010562:	491c      	ldr	r1, [pc, #112]	@ (80105d4 <tcp_output_control_segment+0x8c>)
 8010564:	481c      	ldr	r0, [pc, #112]	@ (80105d8 <tcp_output_control_segment+0x90>)
 8010566:	f006 fba9 	bl	8016cbc <iprintf>

  netif = tcp_route(pcb, src, dst);
 801056a:	683a      	ldr	r2, [r7, #0]
 801056c:	6879      	ldr	r1, [r7, #4]
 801056e:	68f8      	ldr	r0, [r7, #12]
 8010570:	f7fe ff2e 	bl	800f3d0 <tcp_route>
 8010574:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010576:	693b      	ldr	r3, [r7, #16]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d102      	bne.n	8010582 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801057c:	23fc      	movs	r3, #252	@ 0xfc
 801057e:	75fb      	strb	r3, [r7, #23]
 8010580:	e01c      	b.n	80105bc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d006      	beq.n	8010596 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	7adb      	ldrb	r3, [r3, #11]
 801058c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	7a9b      	ldrb	r3, [r3, #10]
 8010592:	757b      	strb	r3, [r7, #21]
 8010594:	e003      	b.n	801059e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010596:	23ff      	movs	r3, #255	@ 0xff
 8010598:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801059a:	2300      	movs	r3, #0
 801059c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801059e:	7dba      	ldrb	r2, [r7, #22]
 80105a0:	693b      	ldr	r3, [r7, #16]
 80105a2:	9302      	str	r3, [sp, #8]
 80105a4:	2306      	movs	r3, #6
 80105a6:	9301      	str	r3, [sp, #4]
 80105a8:	7d7b      	ldrb	r3, [r7, #21]
 80105aa:	9300      	str	r3, [sp, #0]
 80105ac:	4613      	mov	r3, r2
 80105ae:	683a      	ldr	r2, [r7, #0]
 80105b0:	6879      	ldr	r1, [r7, #4]
 80105b2:	68b8      	ldr	r0, [r7, #8]
 80105b4:	f005 f904 	bl	80157c0 <ip4_output_if>
 80105b8:	4603      	mov	r3, r0
 80105ba:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80105bc:	68b8      	ldr	r0, [r7, #8]
 80105be:	f7fa fbb9 	bl	800ad34 <pbuf_free>
  return err;
 80105c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80105c6:	4618      	mov	r0, r3
 80105c8:	3718      	adds	r7, #24
 80105ca:	46bd      	mov	sp, r7
 80105cc:	bd80      	pop	{r7, pc}
 80105ce:	bf00      	nop
 80105d0:	0801a0b4 	.word	0x0801a0b4
 80105d4:	0801a868 	.word	0x0801a868
 80105d8:	0801a108 	.word	0x0801a108

080105dc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80105dc:	b590      	push	{r4, r7, lr}
 80105de:	b08b      	sub	sp, #44	@ 0x2c
 80105e0:	af04      	add	r7, sp, #16
 80105e2:	60f8      	str	r0, [r7, #12]
 80105e4:	60b9      	str	r1, [r7, #8]
 80105e6:	607a      	str	r2, [r7, #4]
 80105e8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80105ea:	683b      	ldr	r3, [r7, #0]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d106      	bne.n	80105fe <tcp_rst+0x22>
 80105f0:	4b20      	ldr	r3, [pc, #128]	@ (8010674 <tcp_rst+0x98>)
 80105f2:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80105f6:	4920      	ldr	r1, [pc, #128]	@ (8010678 <tcp_rst+0x9c>)
 80105f8:	4820      	ldr	r0, [pc, #128]	@ (801067c <tcp_rst+0xa0>)
 80105fa:	f006 fb5f 	bl	8016cbc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80105fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010600:	2b00      	cmp	r3, #0
 8010602:	d106      	bne.n	8010612 <tcp_rst+0x36>
 8010604:	4b1b      	ldr	r3, [pc, #108]	@ (8010674 <tcp_rst+0x98>)
 8010606:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801060a:	491d      	ldr	r1, [pc, #116]	@ (8010680 <tcp_rst+0xa4>)
 801060c:	481b      	ldr	r0, [pc, #108]	@ (801067c <tcp_rst+0xa0>)
 801060e:	f006 fb55 	bl	8016cbc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010612:	2300      	movs	r3, #0
 8010614:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010616:	f246 0308 	movw	r3, #24584	@ 0x6008
 801061a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801061c:	7dfb      	ldrb	r3, [r7, #23]
 801061e:	b29c      	uxth	r4, r3
 8010620:	68b8      	ldr	r0, [r7, #8]
 8010622:	f7f8 ff1e 	bl	8009462 <lwip_htonl>
 8010626:	4602      	mov	r2, r0
 8010628:	8abb      	ldrh	r3, [r7, #20]
 801062a:	9303      	str	r3, [sp, #12]
 801062c:	2314      	movs	r3, #20
 801062e:	9302      	str	r3, [sp, #8]
 8010630:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8010632:	9301      	str	r3, [sp, #4]
 8010634:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010636:	9300      	str	r3, [sp, #0]
 8010638:	4613      	mov	r3, r2
 801063a:	2200      	movs	r2, #0
 801063c:	4621      	mov	r1, r4
 801063e:	6878      	ldr	r0, [r7, #4]
 8010640:	f7ff fe94 	bl	801036c <tcp_output_alloc_header_common>
 8010644:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010646:	693b      	ldr	r3, [r7, #16]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d103      	bne.n	8010654 <tcp_rst+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
 801064c:	480d      	ldr	r0, [pc, #52]	@ (8010684 <tcp_rst+0xa8>)
 801064e:	f006 fba5 	bl	8016d9c <puts>
    return;
 8010652:	e00b      	b.n	801066c <tcp_rst+0x90>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010654:	7dfb      	ldrb	r3, [r7, #23]
 8010656:	2200      	movs	r2, #0
 8010658:	6939      	ldr	r1, [r7, #16]
 801065a:	68f8      	ldr	r0, [r7, #12]
 801065c:	f7ff ff36 	bl	80104cc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010662:	683a      	ldr	r2, [r7, #0]
 8010664:	6939      	ldr	r1, [r7, #16]
 8010666:	68f8      	ldr	r0, [r7, #12]
 8010668:	f7ff ff6e 	bl	8010548 <tcp_output_control_segment>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801066c:	371c      	adds	r7, #28
 801066e:	46bd      	mov	sp, r7
 8010670:	bd90      	pop	{r4, r7, pc}
 8010672:	bf00      	nop
 8010674:	0801a0b4 	.word	0x0801a0b4
 8010678:	0801a894 	.word	0x0801a894
 801067c:	0801a108 	.word	0x0801a108
 8010680:	0801a8b0 	.word	0x0801a8b0
 8010684:	0801a8cc 	.word	0x0801a8cc

08010688 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010688:	b590      	push	{r4, r7, lr}
 801068a:	b087      	sub	sp, #28
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010690:	2300      	movs	r3, #0
 8010692:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8010694:	2300      	movs	r3, #0
 8010696:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d106      	bne.n	80106ac <tcp_send_empty_ack+0x24>
 801069e:	4b28      	ldr	r3, [pc, #160]	@ (8010740 <tcp_send_empty_ack+0xb8>)
 80106a0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80106a4:	4927      	ldr	r1, [pc, #156]	@ (8010744 <tcp_send_empty_ack+0xbc>)
 80106a6:	4828      	ldr	r0, [pc, #160]	@ (8010748 <tcp_send_empty_ack+0xc0>)
 80106a8:	f006 fb08 	bl	8016cbc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80106ac:	7dfb      	ldrb	r3, [r7, #23]
 80106ae:	009b      	lsls	r3, r3, #2
 80106b0:	b2db      	uxtb	r3, r3
 80106b2:	f003 0304 	and.w	r3, r3, #4
 80106b6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80106b8:	7d7b      	ldrb	r3, [r7, #21]
 80106ba:	b29c      	uxth	r4, r3
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80106c0:	4618      	mov	r0, r3
 80106c2:	f7f8 fece 	bl	8009462 <lwip_htonl>
 80106c6:	4603      	mov	r3, r0
 80106c8:	2200      	movs	r2, #0
 80106ca:	4621      	mov	r1, r4
 80106cc:	6878      	ldr	r0, [r7, #4]
 80106ce:	f7ff febf 	bl	8010450 <tcp_output_alloc_header>
 80106d2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80106d4:	693b      	ldr	r3, [r7, #16]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d109      	bne.n	80106ee <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	8b5b      	ldrh	r3, [r3, #26]
 80106de:	f043 0303 	orr.w	r3, r3, #3
 80106e2:	b29a      	uxth	r2, r3
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80106e8:	f06f 0301 	mvn.w	r3, #1
 80106ec:	e023      	b.n	8010736 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80106ee:	7dbb      	ldrb	r3, [r7, #22]
 80106f0:	7dfa      	ldrb	r2, [r7, #23]
 80106f2:	6939      	ldr	r1, [r7, #16]
 80106f4:	6878      	ldr	r0, [r7, #4]
 80106f6:	f7ff fee9 	bl	80104cc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80106fa:	687a      	ldr	r2, [r7, #4]
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	3304      	adds	r3, #4
 8010700:	6939      	ldr	r1, [r7, #16]
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f7ff ff20 	bl	8010548 <tcp_output_control_segment>
 8010708:	4603      	mov	r3, r0
 801070a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801070c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d007      	beq.n	8010724 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	8b5b      	ldrh	r3, [r3, #26]
 8010718:	f043 0303 	orr.w	r3, r3, #3
 801071c:	b29a      	uxth	r2, r3
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	835a      	strh	r2, [r3, #26]
 8010722:	e006      	b.n	8010732 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	8b5b      	ldrh	r3, [r3, #26]
 8010728:	f023 0303 	bic.w	r3, r3, #3
 801072c:	b29a      	uxth	r2, r3
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8010732:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010736:	4618      	mov	r0, r3
 8010738:	371c      	adds	r7, #28
 801073a:	46bd      	mov	sp, r7
 801073c:	bd90      	pop	{r4, r7, pc}
 801073e:	bf00      	nop
 8010740:	0801a0b4 	.word	0x0801a0b4
 8010744:	0801a8f8 	.word	0x0801a8f8
 8010748:	0801a108 	.word	0x0801a108

0801074c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801074c:	b590      	push	{r4, r7, lr}
 801074e:	b089      	sub	sp, #36	@ 0x24
 8010750:	af02      	add	r7, sp, #8
 8010752:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010754:	2300      	movs	r3, #0
 8010756:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d106      	bne.n	801076c <tcp_keepalive+0x20>
 801075e:	4b32      	ldr	r3, [pc, #200]	@ (8010828 <tcp_keepalive+0xdc>)
 8010760:	f640 0224 	movw	r2, #2084	@ 0x824
 8010764:	4931      	ldr	r1, [pc, #196]	@ (801082c <tcp_keepalive+0xe0>)
 8010766:	4832      	ldr	r0, [pc, #200]	@ (8010830 <tcp_keepalive+0xe4>)
 8010768:	f006 faa8 	bl	8016cbc <iprintf>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: sending KEEPALIVE probe to "));
 801076c:	4831      	ldr	r0, [pc, #196]	@ (8010834 <tcp_keepalive+0xe8>)
 801076e:	f006 faa5 	bl	8016cbc <iprintf>
  ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	685b      	ldr	r3, [r3, #4]
 8010776:	b2db      	uxtb	r3, r3
 8010778:	4619      	mov	r1, r3
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	685b      	ldr	r3, [r3, #4]
 801077e:	0a1b      	lsrs	r3, r3, #8
 8010780:	b2db      	uxtb	r3, r3
 8010782:	461a      	mov	r2, r3
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	685b      	ldr	r3, [r3, #4]
 8010788:	0c1b      	lsrs	r3, r3, #16
 801078a:	b2db      	uxtb	r3, r3
 801078c:	4618      	mov	r0, r3
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	685b      	ldr	r3, [r3, #4]
 8010792:	0e1b      	lsrs	r3, r3, #24
 8010794:	b2db      	uxtb	r3, r3
 8010796:	9300      	str	r3, [sp, #0]
 8010798:	4603      	mov	r3, r0
 801079a:	4827      	ldr	r0, [pc, #156]	@ (8010838 <tcp_keepalive+0xec>)
 801079c:	f006 fa8e 	bl	8016cbc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));
 80107a0:	200a      	movs	r0, #10
 80107a2:	f006 fa9d 	bl	8016ce0 <putchar>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
 80107a6:	4b25      	ldr	r3, [pc, #148]	@ (801083c <tcp_keepalive+0xf0>)
 80107a8:	6819      	ldr	r1, [r3, #0]
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	6a1a      	ldr	r2, [r3, #32]
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80107b4:	4822      	ldr	r0, [pc, #136]	@ (8010840 <tcp_keepalive+0xf4>)
 80107b6:	f006 fa81 	bl	8016cbc <iprintf>
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80107ba:	7dfb      	ldrb	r3, [r7, #23]
 80107bc:	b29c      	uxth	r4, r3
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80107c2:	3b01      	subs	r3, #1
 80107c4:	4618      	mov	r0, r3
 80107c6:	f7f8 fe4c 	bl	8009462 <lwip_htonl>
 80107ca:	4603      	mov	r3, r0
 80107cc:	2200      	movs	r2, #0
 80107ce:	4621      	mov	r1, r4
 80107d0:	6878      	ldr	r0, [r7, #4]
 80107d2:	f7ff fe3d 	bl	8010450 <tcp_output_alloc_header>
 80107d6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80107d8:	693b      	ldr	r3, [r7, #16]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d105      	bne.n	80107ea <tcp_keepalive+0x9e>
    LWIP_DEBUGF(TCP_DEBUG,
 80107de:	4819      	ldr	r0, [pc, #100]	@ (8010844 <tcp_keepalive+0xf8>)
 80107e0:	f006 fadc 	bl	8016d9c <puts>
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80107e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80107e8:	e01a      	b.n	8010820 <tcp_keepalive+0xd4>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80107ea:	7dfb      	ldrb	r3, [r7, #23]
 80107ec:	2200      	movs	r2, #0
 80107ee:	6939      	ldr	r1, [r7, #16]
 80107f0:	6878      	ldr	r0, [r7, #4]
 80107f2:	f7ff fe6b 	bl	80104cc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80107f6:	687a      	ldr	r2, [r7, #4]
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	3304      	adds	r3, #4
 80107fc:	6939      	ldr	r1, [r7, #16]
 80107fe:	6878      	ldr	r0, [r7, #4]
 8010800:	f7ff fea2 	bl	8010548 <tcp_output_control_segment>
 8010804:	4603      	mov	r3, r0
 8010806:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801080c:	1e59      	subs	r1, r3, #1
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010816:	480c      	ldr	r0, [pc, #48]	@ (8010848 <tcp_keepalive+0xfc>)
 8010818:	f006 fa50 	bl	8016cbc <iprintf>
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801081c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010820:	4618      	mov	r0, r3
 8010822:	371c      	adds	r7, #28
 8010824:	46bd      	mov	sp, r7
 8010826:	bd90      	pop	{r4, r7, pc}
 8010828:	0801a0b4 	.word	0x0801a0b4
 801082c:	0801a918 	.word	0x0801a918
 8010830:	0801a108 	.word	0x0801a108
 8010834:	0801a934 	.word	0x0801a934
 8010838:	0801a960 	.word	0x0801a960
 801083c:	240032f0 	.word	0x240032f0
 8010840:	0801a970 	.word	0x0801a970
 8010844:	0801a9b4 	.word	0x0801a9b4
 8010848:	0801a9e8 	.word	0x0801a9e8

0801084c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801084c:	b590      	push	{r4, r7, lr}
 801084e:	b08d      	sub	sp, #52	@ 0x34
 8010850:	af02      	add	r7, sp, #8
 8010852:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010854:	2300      	movs	r3, #0
 8010856:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d106      	bne.n	801086e <tcp_zero_window_probe+0x22>
 8010860:	4b66      	ldr	r3, [pc, #408]	@ (80109fc <tcp_zero_window_probe+0x1b0>)
 8010862:	f640 024f 	movw	r2, #2127	@ 0x84f
 8010866:	4966      	ldr	r1, [pc, #408]	@ (8010a00 <tcp_zero_window_probe+0x1b4>)
 8010868:	4866      	ldr	r0, [pc, #408]	@ (8010a04 <tcp_zero_window_probe+0x1b8>)
 801086a:	f006 fa27 	bl	8016cbc <iprintf>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: sending ZERO WINDOW probe to "));
 801086e:	4866      	ldr	r0, [pc, #408]	@ (8010a08 <tcp_zero_window_probe+0x1bc>)
 8010870:	f006 fa24 	bl	8016cbc <iprintf>
  ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	685b      	ldr	r3, [r3, #4]
 8010878:	b2db      	uxtb	r3, r3
 801087a:	4619      	mov	r1, r3
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	685b      	ldr	r3, [r3, #4]
 8010880:	0a1b      	lsrs	r3, r3, #8
 8010882:	b2db      	uxtb	r3, r3
 8010884:	461a      	mov	r2, r3
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	685b      	ldr	r3, [r3, #4]
 801088a:	0c1b      	lsrs	r3, r3, #16
 801088c:	b2db      	uxtb	r3, r3
 801088e:	4618      	mov	r0, r3
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	685b      	ldr	r3, [r3, #4]
 8010894:	0e1b      	lsrs	r3, r3, #24
 8010896:	b2db      	uxtb	r3, r3
 8010898:	9300      	str	r3, [sp, #0]
 801089a:	4603      	mov	r3, r0
 801089c:	485b      	ldr	r0, [pc, #364]	@ (8010a0c <tcp_zero_window_probe+0x1c0>)
 801089e:	f006 fa0d 	bl	8016cbc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));
 80108a2:	200a      	movs	r0, #10
 80108a4:	f006 fa1c 	bl	8016ce0 <putchar>

  LWIP_DEBUGF(TCP_DEBUG,
 80108a8:	4b59      	ldr	r3, [pc, #356]	@ (8010a10 <tcp_zero_window_probe+0x1c4>)
 80108aa:	6819      	ldr	r1, [r3, #0]
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	6a1a      	ldr	r2, [r3, #32]
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80108b6:	4857      	ldr	r0, [pc, #348]	@ (8010a14 <tcp_zero_window_probe+0x1c8>)
 80108b8:	f006 fa00 	bl	8016cbc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80108c0:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80108c2:	6a3b      	ldr	r3, [r7, #32]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d101      	bne.n	80108cc <tcp_zero_window_probe+0x80>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80108c8:	2300      	movs	r3, #0
 80108ca:	e093      	b.n	80109f4 <tcp_zero_window_probe+0x1a8>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80108d2:	2bff      	cmp	r3, #255	@ 0xff
 80108d4:	d007      	beq.n	80108e6 <tcp_zero_window_probe+0x9a>
    ++pcb->persist_probe;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80108dc:	3301      	adds	r3, #1
 80108de:	b2da      	uxtb	r2, r3
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80108e6:	6a3b      	ldr	r3, [r7, #32]
 80108e8:	691b      	ldr	r3, [r3, #16]
 80108ea:	899b      	ldrh	r3, [r3, #12]
 80108ec:	b29b      	uxth	r3, r3
 80108ee:	4618      	mov	r0, r3
 80108f0:	f7f8 fda2 	bl	8009438 <lwip_htons>
 80108f4:	4603      	mov	r3, r0
 80108f6:	b2db      	uxtb	r3, r3
 80108f8:	f003 0301 	and.w	r3, r3, #1
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d005      	beq.n	801090c <tcp_zero_window_probe+0xc0>
 8010900:	6a3b      	ldr	r3, [r7, #32]
 8010902:	891b      	ldrh	r3, [r3, #8]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d101      	bne.n	801090c <tcp_zero_window_probe+0xc0>
 8010908:	2301      	movs	r3, #1
 801090a:	e000      	b.n	801090e <tcp_zero_window_probe+0xc2>
 801090c:	2300      	movs	r3, #0
 801090e:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8010910:	7ffb      	ldrb	r3, [r7, #31]
 8010912:	2b00      	cmp	r3, #0
 8010914:	bf0c      	ite	eq
 8010916:	2301      	moveq	r3, #1
 8010918:	2300      	movne	r3, #0
 801091a:	b2db      	uxtb	r3, r3
 801091c:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801091e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010922:	b299      	uxth	r1, r3
 8010924:	6a3b      	ldr	r3, [r7, #32]
 8010926:	691b      	ldr	r3, [r3, #16]
 8010928:	685b      	ldr	r3, [r3, #4]
 801092a:	8bba      	ldrh	r2, [r7, #28]
 801092c:	6878      	ldr	r0, [r7, #4]
 801092e:	f7ff fd8f 	bl	8010450 <tcp_output_alloc_header>
 8010932:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8010934:	69bb      	ldr	r3, [r7, #24]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d105      	bne.n	8010946 <tcp_zero_window_probe+0xfa>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
 801093a:	4837      	ldr	r0, [pc, #220]	@ (8010a18 <tcp_zero_window_probe+0x1cc>)
 801093c:	f006 fa2e 	bl	8016d9c <puts>
    return ERR_MEM;
 8010940:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010944:	e056      	b.n	80109f4 <tcp_zero_window_probe+0x1a8>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8010946:	69bb      	ldr	r3, [r7, #24]
 8010948:	685b      	ldr	r3, [r3, #4]
 801094a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801094c:	7ffb      	ldrb	r3, [r7, #31]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d011      	beq.n	8010976 <tcp_zero_window_probe+0x12a>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010952:	697b      	ldr	r3, [r7, #20]
 8010954:	899b      	ldrh	r3, [r3, #12]
 8010956:	b29b      	uxth	r3, r3
 8010958:	b21b      	sxth	r3, r3
 801095a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801095e:	b21c      	sxth	r4, r3
 8010960:	2011      	movs	r0, #17
 8010962:	f7f8 fd69 	bl	8009438 <lwip_htons>
 8010966:	4603      	mov	r3, r0
 8010968:	b21b      	sxth	r3, r3
 801096a:	4323      	orrs	r3, r4
 801096c:	b21b      	sxth	r3, r3
 801096e:	b29a      	uxth	r2, r3
 8010970:	697b      	ldr	r3, [r7, #20]
 8010972:	819a      	strh	r2, [r3, #12]
 8010974:	e010      	b.n	8010998 <tcp_zero_window_probe+0x14c>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8010976:	69bb      	ldr	r3, [r7, #24]
 8010978:	685b      	ldr	r3, [r3, #4]
 801097a:	3314      	adds	r3, #20
 801097c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801097e:	6a3b      	ldr	r3, [r7, #32]
 8010980:	6858      	ldr	r0, [r3, #4]
 8010982:	6a3b      	ldr	r3, [r7, #32]
 8010984:	685b      	ldr	r3, [r3, #4]
 8010986:	891a      	ldrh	r2, [r3, #8]
 8010988:	6a3b      	ldr	r3, [r7, #32]
 801098a:	891b      	ldrh	r3, [r3, #8]
 801098c:	1ad3      	subs	r3, r2, r3
 801098e:	b29b      	uxth	r3, r3
 8010990:	2201      	movs	r2, #1
 8010992:	6939      	ldr	r1, [r7, #16]
 8010994:	f7fa fbf4 	bl	800b180 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8010998:	6a3b      	ldr	r3, [r7, #32]
 801099a:	691b      	ldr	r3, [r3, #16]
 801099c:	685b      	ldr	r3, [r3, #4]
 801099e:	4618      	mov	r0, r3
 80109a0:	f7f8 fd5f 	bl	8009462 <lwip_htonl>
 80109a4:	4603      	mov	r3, r0
 80109a6:	3301      	adds	r3, #1
 80109a8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	1ad3      	subs	r3, r2, r3
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	da02      	bge.n	80109bc <tcp_zero_window_probe+0x170>
    pcb->snd_nxt = snd_nxt;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	68fa      	ldr	r2, [r7, #12]
 80109ba:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80109bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80109c0:	2200      	movs	r2, #0
 80109c2:	69b9      	ldr	r1, [r7, #24]
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	f7ff fd81 	bl	80104cc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80109ca:	687a      	ldr	r2, [r7, #4]
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	3304      	adds	r3, #4
 80109d0:	69b9      	ldr	r1, [r7, #24]
 80109d2:	6878      	ldr	r0, [r7, #4]
 80109d4:	f7ff fdb8 	bl	8010548 <tcp_output_control_segment>
 80109d8:	4603      	mov	r3, r0
 80109da:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80109e0:	1e59      	subs	r1, r3, #1
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80109e6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80109ea:	480c      	ldr	r0, [pc, #48]	@ (8010a1c <tcp_zero_window_probe+0x1d0>)
 80109ec:	f006 f966 	bl	8016cbc <iprintf>
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80109f0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80109f4:	4618      	mov	r0, r3
 80109f6:	372c      	adds	r7, #44	@ 0x2c
 80109f8:	46bd      	mov	sp, r7
 80109fa:	bd90      	pop	{r4, r7, pc}
 80109fc:	0801a0b4 	.word	0x0801a0b4
 8010a00:	0801aa14 	.word	0x0801aa14
 8010a04:	0801a108 	.word	0x0801a108
 8010a08:	0801aa38 	.word	0x0801aa38
 8010a0c:	0801a960 	.word	0x0801a960
 8010a10:	240032f0 	.word	0x240032f0
 8010a14:	0801aa70 	.word	0x0801aa70
 8010a18:	0801aabc 	.word	0x0801aabc
 8010a1c:	0801aae8 	.word	0x0801aae8

08010a20 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b082      	sub	sp, #8
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010a28:	f7fa fc98 	bl	800b35c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8010a5c <tcpip_tcp_timer+0x3c>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d103      	bne.n	8010a3c <tcpip_tcp_timer+0x1c>
 8010a34:	4b0a      	ldr	r3, [pc, #40]	@ (8010a60 <tcpip_tcp_timer+0x40>)
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d006      	beq.n	8010a4a <tcpip_tcp_timer+0x2a>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010a3c:	4b09      	ldr	r3, [pc, #36]	@ (8010a64 <tcpip_tcp_timer+0x44>)
 8010a3e:	2200      	movs	r2, #0
 8010a40:	4909      	ldr	r1, [pc, #36]	@ (8010a68 <tcpip_tcp_timer+0x48>)
 8010a42:	20fa      	movs	r0, #250	@ 0xfa
 8010a44:	f000 f90a 	bl	8010c5c <sys_timeout_debug>
 8010a48:	e003      	b.n	8010a52 <tcpip_tcp_timer+0x32>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010a4a:	4b08      	ldr	r3, [pc, #32]	@ (8010a6c <tcpip_tcp_timer+0x4c>)
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	601a      	str	r2, [r3, #0]
  }
}
 8010a50:	bf00      	nop
 8010a52:	bf00      	nop
 8010a54:	3708      	adds	r7, #8
 8010a56:	46bd      	mov	sp, r7
 8010a58:	bd80      	pop	{r7, pc}
 8010a5a:	bf00      	nop
 8010a5c:	240032fc 	.word	0x240032fc
 8010a60:	24003300 	.word	0x24003300
 8010a64:	0801ab60 	.word	0x0801ab60
 8010a68:	08010a21 	.word	0x08010a21
 8010a6c:	2400334c 	.word	0x2400334c

08010a70 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010a74:	4b0b      	ldr	r3, [pc, #44]	@ (8010aa4 <tcp_timer_needed+0x34>)
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d110      	bne.n	8010a9e <tcp_timer_needed+0x2e>
 8010a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8010aa8 <tcp_timer_needed+0x38>)
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d103      	bne.n	8010a8c <tcp_timer_needed+0x1c>
 8010a84:	4b09      	ldr	r3, [pc, #36]	@ (8010aac <tcp_timer_needed+0x3c>)
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d008      	beq.n	8010a9e <tcp_timer_needed+0x2e>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8010a8c:	4b05      	ldr	r3, [pc, #20]	@ (8010aa4 <tcp_timer_needed+0x34>)
 8010a8e:	2201      	movs	r2, #1
 8010a90:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010a92:	4b07      	ldr	r3, [pc, #28]	@ (8010ab0 <tcp_timer_needed+0x40>)
 8010a94:	2200      	movs	r2, #0
 8010a96:	4907      	ldr	r1, [pc, #28]	@ (8010ab4 <tcp_timer_needed+0x44>)
 8010a98:	20fa      	movs	r0, #250	@ 0xfa
 8010a9a:	f000 f8df 	bl	8010c5c <sys_timeout_debug>
  }
}
 8010a9e:	bf00      	nop
 8010aa0:	bd80      	pop	{r7, pc}
 8010aa2:	bf00      	nop
 8010aa4:	2400334c 	.word	0x2400334c
 8010aa8:	240032fc 	.word	0x240032fc
 8010aac:	24003300 	.word	0x24003300
 8010ab0:	0801ab60 	.word	0x0801ab60
 8010ab4:	08010a21 	.word	0x08010a21

08010ab8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b086      	sub	sp, #24
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	60f8      	str	r0, [r7, #12]
 8010ac0:	60b9      	str	r1, [r7, #8]
 8010ac2:	607a      	str	r2, [r7, #4]
 8010ac4:	603b      	str	r3, [r7, #0]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010ac6:	2006      	movs	r0, #6
 8010ac8:	f7f9 f9f6 	bl	8009eb8 <memp_malloc>
 8010acc:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8010ace:	693b      	ldr	r3, [r7, #16]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d109      	bne.n	8010ae8 <sys_timeout_abs+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8010ad4:	693b      	ldr	r3, [r7, #16]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d154      	bne.n	8010b84 <sys_timeout_abs+0xcc>
 8010ada:	4b2c      	ldr	r3, [pc, #176]	@ (8010b8c <sys_timeout_abs+0xd4>)
 8010adc:	22be      	movs	r2, #190	@ 0xbe
 8010ade:	492c      	ldr	r1, [pc, #176]	@ (8010b90 <sys_timeout_abs+0xd8>)
 8010ae0:	482c      	ldr	r0, [pc, #176]	@ (8010b94 <sys_timeout_abs+0xdc>)
 8010ae2:	f006 f8eb 	bl	8016cbc <iprintf>
    return;
 8010ae6:	e04d      	b.n	8010b84 <sys_timeout_abs+0xcc>
  }

  timeout->next = NULL;
 8010ae8:	693b      	ldr	r3, [r7, #16]
 8010aea:	2200      	movs	r2, #0
 8010aec:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8010aee:	693b      	ldr	r3, [r7, #16]
 8010af0:	68ba      	ldr	r2, [r7, #8]
 8010af2:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8010af4:	693b      	ldr	r3, [r7, #16]
 8010af6:	687a      	ldr	r2, [r7, #4]
 8010af8:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8010afa:	693b      	ldr	r3, [r7, #16]
 8010afc:	68fa      	ldr	r2, [r7, #12]
 8010afe:	605a      	str	r2, [r3, #4]

#if LWIP_DEBUG_TIMERNAMES
  timeout->handler_name = handler_name;
 8010b00:	693b      	ldr	r3, [r7, #16]
 8010b02:	683a      	ldr	r2, [r7, #0]
 8010b04:	611a      	str	r2, [r3, #16]
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8010b06:	4b24      	ldr	r3, [pc, #144]	@ (8010b98 <sys_timeout_abs+0xe0>)
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d103      	bne.n	8010b16 <sys_timeout_abs+0x5e>
    next_timeout = timeout;
 8010b0e:	4a22      	ldr	r2, [pc, #136]	@ (8010b98 <sys_timeout_abs+0xe0>)
 8010b10:	693b      	ldr	r3, [r7, #16]
 8010b12:	6013      	str	r3, [r2, #0]
    return;
 8010b14:	e037      	b.n	8010b86 <sys_timeout_abs+0xce>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8010b16:	693b      	ldr	r3, [r7, #16]
 8010b18:	685a      	ldr	r2, [r3, #4]
 8010b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8010b98 <sys_timeout_abs+0xe0>)
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	685b      	ldr	r3, [r3, #4]
 8010b20:	1ad3      	subs	r3, r2, r3
 8010b22:	0fdb      	lsrs	r3, r3, #31
 8010b24:	f003 0301 	and.w	r3, r3, #1
 8010b28:	b2db      	uxtb	r3, r3
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d007      	beq.n	8010b3e <sys_timeout_abs+0x86>
    timeout->next = next_timeout;
 8010b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8010b98 <sys_timeout_abs+0xe0>)
 8010b30:	681a      	ldr	r2, [r3, #0]
 8010b32:	693b      	ldr	r3, [r7, #16]
 8010b34:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8010b36:	4a18      	ldr	r2, [pc, #96]	@ (8010b98 <sys_timeout_abs+0xe0>)
 8010b38:	693b      	ldr	r3, [r7, #16]
 8010b3a:	6013      	str	r3, [r2, #0]
 8010b3c:	e023      	b.n	8010b86 <sys_timeout_abs+0xce>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8010b3e:	4b16      	ldr	r3, [pc, #88]	@ (8010b98 <sys_timeout_abs+0xe0>)
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	617b      	str	r3, [r7, #20]
 8010b44:	e01a      	b.n	8010b7c <sys_timeout_abs+0xc4>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8010b46:	697b      	ldr	r3, [r7, #20]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d00b      	beq.n	8010b66 <sys_timeout_abs+0xae>
 8010b4e:	693b      	ldr	r3, [r7, #16]
 8010b50:	685a      	ldr	r2, [r3, #4]
 8010b52:	697b      	ldr	r3, [r7, #20]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	685b      	ldr	r3, [r3, #4]
 8010b58:	1ad3      	subs	r3, r2, r3
 8010b5a:	0fdb      	lsrs	r3, r3, #31
 8010b5c:	f003 0301 	and.w	r3, r3, #1
 8010b60:	b2db      	uxtb	r3, r3
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d007      	beq.n	8010b76 <sys_timeout_abs+0xbe>
        timeout->next = t->next;
 8010b66:	697b      	ldr	r3, [r7, #20]
 8010b68:	681a      	ldr	r2, [r3, #0]
 8010b6a:	693b      	ldr	r3, [r7, #16]
 8010b6c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8010b6e:	697b      	ldr	r3, [r7, #20]
 8010b70:	693a      	ldr	r2, [r7, #16]
 8010b72:	601a      	str	r2, [r3, #0]
        break;
 8010b74:	e007      	b.n	8010b86 <sys_timeout_abs+0xce>
    for (t = next_timeout; t != NULL; t = t->next) {
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	617b      	str	r3, [r7, #20]
 8010b7c:	697b      	ldr	r3, [r7, #20]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d1e1      	bne.n	8010b46 <sys_timeout_abs+0x8e>
 8010b82:	e000      	b.n	8010b86 <sys_timeout_abs+0xce>
    return;
 8010b84:	bf00      	nop
      }
    }
  }
}
 8010b86:	3718      	adds	r7, #24
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd80      	pop	{r7, pc}
 8010b8c:	0801ab70 	.word	0x0801ab70
 8010b90:	0801aba4 	.word	0x0801aba4
 8010b94:	0801abe4 	.word	0x0801abe4
 8010b98:	24003344 	.word	0x24003344

08010b9c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b086      	sub	sp, #24
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010ba8:	697b      	ldr	r3, [r7, #20]
 8010baa:	685b      	ldr	r3, [r3, #4]
 8010bac:	4798      	blx	r3

  now = sys_now();
 8010bae:	f7f8 f9db 	bl	8008f68 <sys_now>
 8010bb2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010bb4:	697b      	ldr	r3, [r7, #20]
 8010bb6:	681a      	ldr	r2, [r3, #0]
 8010bb8:	4b11      	ldr	r3, [pc, #68]	@ (8010c00 <lwip_cyclic_timer+0x64>)
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	4413      	add	r3, r2
 8010bbe:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010bc0:	68fa      	ldr	r2, [r7, #12]
 8010bc2:	693b      	ldr	r3, [r7, #16]
 8010bc4:	1ad3      	subs	r3, r2, r3
 8010bc6:	0fdb      	lsrs	r3, r3, #31
 8010bc8:	f003 0301 	and.w	r3, r3, #1
 8010bcc:	b2db      	uxtb	r3, r3
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d00a      	beq.n	8010be8 <lwip_cyclic_timer+0x4c>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
 8010bd2:	697b      	ldr	r3, [r7, #20]
 8010bd4:	681a      	ldr	r2, [r3, #0]
 8010bd6:	693b      	ldr	r3, [r7, #16]
 8010bd8:	18d0      	adds	r0, r2, r3
 8010bda:	697b      	ldr	r3, [r7, #20]
 8010bdc:	689b      	ldr	r3, [r3, #8]
 8010bde:	687a      	ldr	r2, [r7, #4]
 8010be0:	4908      	ldr	r1, [pc, #32]	@ (8010c04 <lwip_cyclic_timer+0x68>)
 8010be2:	f7ff ff69 	bl	8010ab8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8010be6:	e006      	b.n	8010bf6 <lwip_cyclic_timer+0x5a>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
 8010be8:	697b      	ldr	r3, [r7, #20]
 8010bea:	689b      	ldr	r3, [r3, #8]
 8010bec:	687a      	ldr	r2, [r7, #4]
 8010bee:	4905      	ldr	r1, [pc, #20]	@ (8010c04 <lwip_cyclic_timer+0x68>)
 8010bf0:	68f8      	ldr	r0, [r7, #12]
 8010bf2:	f7ff ff61 	bl	8010ab8 <sys_timeout_abs>
}
 8010bf6:	bf00      	nop
 8010bf8:	3718      	adds	r7, #24
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bd80      	pop	{r7, pc}
 8010bfe:	bf00      	nop
 8010c00:	24003348 	.word	0x24003348
 8010c04:	08010b9d 	.word	0x08010b9d

08010c08 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b082      	sub	sp, #8
 8010c0c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010c0e:	2301      	movs	r3, #1
 8010c10:	607b      	str	r3, [r7, #4]
 8010c12:	e015      	b.n	8010c40 <sys_timeouts_init+0x38>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8010c14:	490e      	ldr	r1, [pc, #56]	@ (8010c50 <sys_timeouts_init+0x48>)
 8010c16:	687a      	ldr	r2, [r7, #4]
 8010c18:	4613      	mov	r3, r2
 8010c1a:	005b      	lsls	r3, r3, #1
 8010c1c:	4413      	add	r3, r2
 8010c1e:	009b      	lsls	r3, r3, #2
 8010c20:	440b      	add	r3, r1
 8010c22:	6818      	ldr	r0, [r3, #0]
 8010c24:	687a      	ldr	r2, [r7, #4]
 8010c26:	4613      	mov	r3, r2
 8010c28:	005b      	lsls	r3, r3, #1
 8010c2a:	4413      	add	r3, r2
 8010c2c:	009b      	lsls	r3, r3, #2
 8010c2e:	4a08      	ldr	r2, [pc, #32]	@ (8010c50 <sys_timeouts_init+0x48>)
 8010c30:	441a      	add	r2, r3
 8010c32:	4b08      	ldr	r3, [pc, #32]	@ (8010c54 <sys_timeouts_init+0x4c>)
 8010c34:	4908      	ldr	r1, [pc, #32]	@ (8010c58 <sys_timeouts_init+0x50>)
 8010c36:	f000 f811 	bl	8010c5c <sys_timeout_debug>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	3301      	adds	r3, #1
 8010c3e:	607b      	str	r3, [r7, #4]
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	2b04      	cmp	r3, #4
 8010c44:	d9e6      	bls.n	8010c14 <sys_timeouts_init+0xc>
  }
}
 8010c46:	bf00      	nop
 8010c48:	bf00      	nop
 8010c4a:	3708      	adds	r7, #8
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}
 8010c50:	0801dc28 	.word	0x0801dc28
 8010c54:	0801ac0c 	.word	0x0801ac0c
 8010c58:	08010b9d 	.word	0x08010b9d

08010c5c <sys_timeout_debug>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b086      	sub	sp, #24
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	60f8      	str	r0, [r7, #12]
 8010c64:	60b9      	str	r1, [r7, #8]
 8010c66:	607a      	str	r2, [r7, #4]
 8010c68:	603b      	str	r3, [r7, #0]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010c70:	d306      	bcc.n	8010c80 <sys_timeout_debug+0x24>
 8010c72:	4b0b      	ldr	r3, [pc, #44]	@ (8010ca0 <sys_timeout_debug+0x44>)
 8010c74:	f240 1229 	movw	r2, #297	@ 0x129
 8010c78:	490a      	ldr	r1, [pc, #40]	@ (8010ca4 <sys_timeout_debug+0x48>)
 8010c7a:	480b      	ldr	r0, [pc, #44]	@ (8010ca8 <sys_timeout_debug+0x4c>)
 8010c7c:	f006 f81e 	bl	8016cbc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010c80:	f7f8 f972 	bl	8008f68 <sys_now>
 8010c84:	4602      	mov	r2, r0
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	4413      	add	r3, r2
 8010c8a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
 8010c8c:	683b      	ldr	r3, [r7, #0]
 8010c8e:	687a      	ldr	r2, [r7, #4]
 8010c90:	68b9      	ldr	r1, [r7, #8]
 8010c92:	6978      	ldr	r0, [r7, #20]
 8010c94:	f7ff ff10 	bl	8010ab8 <sys_timeout_abs>
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
#endif
}
 8010c98:	bf00      	nop
 8010c9a:	3718      	adds	r7, #24
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}
 8010ca0:	0801ab70 	.word	0x0801ab70
 8010ca4:	0801ac20 	.word	0x0801ac20
 8010ca8:	0801abe4 	.word	0x0801abe4

08010cac <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b084      	sub	sp, #16
 8010cb0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8010cb2:	f7f8 f959 	bl	8008f68 <sys_now>
 8010cb6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8010cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8010d24 <sys_check_timeouts+0x78>)
 8010cba:	781b      	ldrb	r3, [r3, #0]
 8010cbc:	b2db      	uxtb	r3, r3
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d001      	beq.n	8010cc6 <sys_check_timeouts+0x1a>
 8010cc2:	f7f9 fcb1 	bl	800a628 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8010cc6:	4b18      	ldr	r3, [pc, #96]	@ (8010d28 <sys_check_timeouts+0x7c>)
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8010ccc:	68bb      	ldr	r3, [r7, #8]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d022      	beq.n	8010d18 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8010cd2:	68bb      	ldr	r3, [r7, #8]
 8010cd4:	685b      	ldr	r3, [r3, #4]
 8010cd6:	68fa      	ldr	r2, [r7, #12]
 8010cd8:	1ad3      	subs	r3, r2, r3
 8010cda:	0fdb      	lsrs	r3, r3, #31
 8010cdc:	f003 0301 	and.w	r3, r3, #1
 8010ce0:	b2db      	uxtb	r3, r3
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d11a      	bne.n	8010d1c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8010ce6:	68bb      	ldr	r3, [r7, #8]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	4a0f      	ldr	r2, [pc, #60]	@ (8010d28 <sys_check_timeouts+0x7c>)
 8010cec:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8010cee:	68bb      	ldr	r3, [r7, #8]
 8010cf0:	689b      	ldr	r3, [r3, #8]
 8010cf2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8010cf4:	68bb      	ldr	r3, [r7, #8]
 8010cf6:	68db      	ldr	r3, [r3, #12]
 8010cf8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8010cfa:	68bb      	ldr	r3, [r7, #8]
 8010cfc:	685b      	ldr	r3, [r3, #4]
 8010cfe:	4a0b      	ldr	r2, [pc, #44]	@ (8010d2c <sys_check_timeouts+0x80>)
 8010d00:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010d02:	68b9      	ldr	r1, [r7, #8]
 8010d04:	2006      	movs	r0, #6
 8010d06:	f7f9 f947 	bl	8009f98 <memp_free>
    if (handler != NULL) {
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d0d3      	beq.n	8010cb8 <sys_check_timeouts+0xc>
      handler(arg);
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6838      	ldr	r0, [r7, #0]
 8010d14:	4798      	blx	r3
  do {
 8010d16:	e7cf      	b.n	8010cb8 <sys_check_timeouts+0xc>
      return;
 8010d18:	bf00      	nop
 8010d1a:	e000      	b.n	8010d1e <sys_check_timeouts+0x72>
      return;
 8010d1c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8010d1e:	3710      	adds	r7, #16
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd80      	pop	{r7, pc}
 8010d24:	240032ed 	.word	0x240032ed
 8010d28:	24003344 	.word	0x24003344
 8010d2c:	24003348 	.word	0x24003348

08010d30 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010d34:	f005 fec2 	bl	8016abc <rand>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	b29b      	uxth	r3, r3
 8010d3c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010d40:	b29b      	uxth	r3, r3
 8010d42:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8010d46:	b29a      	uxth	r2, r3
 8010d48:	4b01      	ldr	r3, [pc, #4]	@ (8010d50 <udp_init+0x20>)
 8010d4a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010d4c:	bf00      	nop
 8010d4e:	bd80      	pop	{r7, pc}
 8010d50:	24000084 	.word	0x24000084

08010d54 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8010d54:	b480      	push	{r7}
 8010d56:	b083      	sub	sp, #12
 8010d58:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8010d5e:	4b17      	ldr	r3, [pc, #92]	@ (8010dbc <udp_new_port+0x68>)
 8010d60:	881b      	ldrh	r3, [r3, #0]
 8010d62:	1c5a      	adds	r2, r3, #1
 8010d64:	b291      	uxth	r1, r2
 8010d66:	4a15      	ldr	r2, [pc, #84]	@ (8010dbc <udp_new_port+0x68>)
 8010d68:	8011      	strh	r1, [r2, #0]
 8010d6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010d6e:	4293      	cmp	r3, r2
 8010d70:	d103      	bne.n	8010d7a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8010d72:	4b12      	ldr	r3, [pc, #72]	@ (8010dbc <udp_new_port+0x68>)
 8010d74:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8010d78:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d7a:	4b11      	ldr	r3, [pc, #68]	@ (8010dc0 <udp_new_port+0x6c>)
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	603b      	str	r3, [r7, #0]
 8010d80:	e011      	b.n	8010da6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8010d82:	683b      	ldr	r3, [r7, #0]
 8010d84:	8a5a      	ldrh	r2, [r3, #18]
 8010d86:	4b0d      	ldr	r3, [pc, #52]	@ (8010dbc <udp_new_port+0x68>)
 8010d88:	881b      	ldrh	r3, [r3, #0]
 8010d8a:	429a      	cmp	r2, r3
 8010d8c:	d108      	bne.n	8010da0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8010d8e:	88fb      	ldrh	r3, [r7, #6]
 8010d90:	3301      	adds	r3, #1
 8010d92:	80fb      	strh	r3, [r7, #6]
 8010d94:	88fb      	ldrh	r3, [r7, #6]
 8010d96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010d9a:	d3e0      	bcc.n	8010d5e <udp_new_port+0xa>
        return 0;
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	e007      	b.n	8010db0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	68db      	ldr	r3, [r3, #12]
 8010da4:	603b      	str	r3, [r7, #0]
 8010da6:	683b      	ldr	r3, [r7, #0]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d1ea      	bne.n	8010d82 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8010dac:	4b03      	ldr	r3, [pc, #12]	@ (8010dbc <udp_new_port+0x68>)
 8010dae:	881b      	ldrh	r3, [r3, #0]
}
 8010db0:	4618      	mov	r0, r3
 8010db2:	370c      	adds	r7, #12
 8010db4:	46bd      	mov	sp, r7
 8010db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dba:	4770      	bx	lr
 8010dbc:	24000084 	.word	0x24000084
 8010dc0:	24003350 	.word	0x24003350

08010dc4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b084      	sub	sp, #16
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	60f8      	str	r0, [r7, #12]
 8010dcc:	60b9      	str	r1, [r7, #8]
 8010dce:	4613      	mov	r3, r2
 8010dd0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d105      	bne.n	8010de4 <udp_input_local_match+0x20>
 8010dd8:	4b27      	ldr	r3, [pc, #156]	@ (8010e78 <udp_input_local_match+0xb4>)
 8010dda:	2287      	movs	r2, #135	@ 0x87
 8010ddc:	4927      	ldr	r1, [pc, #156]	@ (8010e7c <udp_input_local_match+0xb8>)
 8010dde:	4828      	ldr	r0, [pc, #160]	@ (8010e80 <udp_input_local_match+0xbc>)
 8010de0:	f005 ff6c 	bl	8016cbc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010de4:	68bb      	ldr	r3, [r7, #8]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d105      	bne.n	8010df6 <udp_input_local_match+0x32>
 8010dea:	4b23      	ldr	r3, [pc, #140]	@ (8010e78 <udp_input_local_match+0xb4>)
 8010dec:	2288      	movs	r2, #136	@ 0x88
 8010dee:	4925      	ldr	r1, [pc, #148]	@ (8010e84 <udp_input_local_match+0xc0>)
 8010df0:	4823      	ldr	r0, [pc, #140]	@ (8010e80 <udp_input_local_match+0xbc>)
 8010df2:	f005 ff63 	bl	8016cbc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	7a1b      	ldrb	r3, [r3, #8]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d00b      	beq.n	8010e16 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	7a1a      	ldrb	r2, [r3, #8]
 8010e02:	4b21      	ldr	r3, [pc, #132]	@ (8010e88 <udp_input_local_match+0xc4>)
 8010e04:	685b      	ldr	r3, [r3, #4]
 8010e06:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010e0a:	3301      	adds	r3, #1
 8010e0c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010e0e:	429a      	cmp	r2, r3
 8010e10:	d001      	beq.n	8010e16 <udp_input_local_match+0x52>
    return 0;
 8010e12:	2300      	movs	r3, #0
 8010e14:	e02b      	b.n	8010e6e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8010e16:	79fb      	ldrb	r3, [r7, #7]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d018      	beq.n	8010e4e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d013      	beq.n	8010e4a <udp_input_local_match+0x86>
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d00f      	beq.n	8010e4a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010e2a:	4b17      	ldr	r3, [pc, #92]	@ (8010e88 <udp_input_local_match+0xc4>)
 8010e2c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010e32:	d00a      	beq.n	8010e4a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	681a      	ldr	r2, [r3, #0]
 8010e38:	4b13      	ldr	r3, [pc, #76]	@ (8010e88 <udp_input_local_match+0xc4>)
 8010e3a:	695b      	ldr	r3, [r3, #20]
 8010e3c:	405a      	eors	r2, r3
 8010e3e:	68bb      	ldr	r3, [r7, #8]
 8010e40:	3308      	adds	r3, #8
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d110      	bne.n	8010e6c <udp_input_local_match+0xa8>
          return 1;
 8010e4a:	2301      	movs	r3, #1
 8010e4c:	e00f      	b.n	8010e6e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d009      	beq.n	8010e68 <udp_input_local_match+0xa4>
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d005      	beq.n	8010e68 <udp_input_local_match+0xa4>
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	681a      	ldr	r2, [r3, #0]
 8010e60:	4b09      	ldr	r3, [pc, #36]	@ (8010e88 <udp_input_local_match+0xc4>)
 8010e62:	695b      	ldr	r3, [r3, #20]
 8010e64:	429a      	cmp	r2, r3
 8010e66:	d101      	bne.n	8010e6c <udp_input_local_match+0xa8>
        return 1;
 8010e68:	2301      	movs	r3, #1
 8010e6a:	e000      	b.n	8010e6e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8010e6c:	2300      	movs	r3, #0
}
 8010e6e:	4618      	mov	r0, r3
 8010e70:	3710      	adds	r7, #16
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd80      	pop	{r7, pc}
 8010e76:	bf00      	nop
 8010e78:	0801ac6c 	.word	0x0801ac6c
 8010e7c:	0801ac9c 	.word	0x0801ac9c
 8010e80:	0801acc0 	.word	0x0801acc0
 8010e84:	0801ace8 	.word	0x0801ace8
 8010e88:	24000360 	.word	0x24000360

08010e8c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010e8c:	b590      	push	{r4, r7, lr}
 8010e8e:	b08d      	sub	sp, #52	@ 0x34
 8010e90:	af02      	add	r7, sp, #8
 8010e92:	6078      	str	r0, [r7, #4]
 8010e94:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8010e96:	2300      	movs	r3, #0
 8010e98:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d105      	bne.n	8010eac <udp_input+0x20>
 8010ea0:	4b95      	ldr	r3, [pc, #596]	@ (80110f8 <udp_input+0x26c>)
 8010ea2:	22cf      	movs	r2, #207	@ 0xcf
 8010ea4:	4995      	ldr	r1, [pc, #596]	@ (80110fc <udp_input+0x270>)
 8010ea6:	4896      	ldr	r0, [pc, #600]	@ (8011100 <udp_input+0x274>)
 8010ea8:	f005 ff08 	bl	8016cbc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010eac:	683b      	ldr	r3, [r7, #0]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d105      	bne.n	8010ebe <udp_input+0x32>
 8010eb2:	4b91      	ldr	r3, [pc, #580]	@ (80110f8 <udp_input+0x26c>)
 8010eb4:	22d0      	movs	r2, #208	@ 0xd0
 8010eb6:	4993      	ldr	r1, [pc, #588]	@ (8011104 <udp_input+0x278>)
 8010eb8:	4891      	ldr	r0, [pc, #580]	@ (8011100 <udp_input+0x274>)
 8010eba:	f005 feff 	bl	8016cbc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	895b      	ldrh	r3, [r3, #10]
 8010ec2:	2b07      	cmp	r3, #7
 8010ec4:	d809      	bhi.n	8010eda <udp_input+0x4e>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	891b      	ldrh	r3, [r3, #8]
 8010eca:	4619      	mov	r1, r3
 8010ecc:	488e      	ldr	r0, [pc, #568]	@ (8011108 <udp_input+0x27c>)
 8010ece:	f005 fef5 	bl	8016cbc <iprintf>
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8010ed2:	6878      	ldr	r0, [r7, #4]
 8010ed4:	f7f9 ff2e 	bl	800ad34 <pbuf_free>
    goto end;
 8010ed8:	e18d      	b.n	80111f6 <udp_input+0x36a>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	685b      	ldr	r3, [r3, #4]
 8010ede:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010ee0:	4b8a      	ldr	r3, [pc, #552]	@ (801110c <udp_input+0x280>)
 8010ee2:	695b      	ldr	r3, [r3, #20]
 8010ee4:	4a89      	ldr	r2, [pc, #548]	@ (801110c <udp_input+0x280>)
 8010ee6:	6812      	ldr	r2, [r2, #0]
 8010ee8:	4611      	mov	r1, r2
 8010eea:	4618      	mov	r0, r3
 8010eec:	f004 fe26 	bl	8015b3c <ip4_addr_isbroadcast_u32>
 8010ef0:	4603      	mov	r3, r0
 8010ef2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	891b      	ldrh	r3, [r3, #8]
 8010ef8:	4619      	mov	r1, r3
 8010efa:	4885      	ldr	r0, [pc, #532]	@ (8011110 <udp_input+0x284>)
 8010efc:	f005 fede 	bl	8016cbc <iprintf>

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010f00:	697b      	ldr	r3, [r7, #20]
 8010f02:	881b      	ldrh	r3, [r3, #0]
 8010f04:	b29b      	uxth	r3, r3
 8010f06:	4618      	mov	r0, r3
 8010f08:	f7f8 fa96 	bl	8009438 <lwip_htons>
 8010f0c:	4603      	mov	r3, r0
 8010f0e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8010f10:	697b      	ldr	r3, [r7, #20]
 8010f12:	885b      	ldrh	r3, [r3, #2]
 8010f14:	b29b      	uxth	r3, r3
 8010f16:	4618      	mov	r0, r3
 8010f18:	f7f8 fa8e 	bl	8009438 <lwip_htons>
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 8010f20:	6978      	ldr	r0, [r7, #20]
 8010f22:	f000 fd3d 	bl	80119a0 <udp_debug_print>

  /* print the UDP source and destination */
  LWIP_DEBUGF(UDP_DEBUG, ("udp ("));
 8010f26:	487b      	ldr	r0, [pc, #492]	@ (8011114 <udp_input+0x288>)
 8010f28:	f005 fec8 	bl	8016cbc <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
 8010f2c:	4b77      	ldr	r3, [pc, #476]	@ (801110c <udp_input+0x280>)
 8010f2e:	695b      	ldr	r3, [r3, #20]
 8010f30:	b2db      	uxtb	r3, r3
 8010f32:	4619      	mov	r1, r3
 8010f34:	4b75      	ldr	r3, [pc, #468]	@ (801110c <udp_input+0x280>)
 8010f36:	695b      	ldr	r3, [r3, #20]
 8010f38:	0a1b      	lsrs	r3, r3, #8
 8010f3a:	b2db      	uxtb	r3, r3
 8010f3c:	461a      	mov	r2, r3
 8010f3e:	4b73      	ldr	r3, [pc, #460]	@ (801110c <udp_input+0x280>)
 8010f40:	695b      	ldr	r3, [r3, #20]
 8010f42:	0c1b      	lsrs	r3, r3, #16
 8010f44:	b2db      	uxtb	r3, r3
 8010f46:	4618      	mov	r0, r3
 8010f48:	4b70      	ldr	r3, [pc, #448]	@ (801110c <udp_input+0x280>)
 8010f4a:	695b      	ldr	r3, [r3, #20]
 8010f4c:	0e1b      	lsrs	r3, r3, #24
 8010f4e:	b2db      	uxtb	r3, r3
 8010f50:	9300      	str	r3, [sp, #0]
 8010f52:	4603      	mov	r3, r0
 8010f54:	4870      	ldr	r0, [pc, #448]	@ (8011118 <udp_input+0x28c>)
 8010f56:	f005 feb1 	bl	8016cbc <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
 8010f5a:	697b      	ldr	r3, [r7, #20]
 8010f5c:	885b      	ldrh	r3, [r3, #2]
 8010f5e:	b29b      	uxth	r3, r3
 8010f60:	4618      	mov	r0, r3
 8010f62:	f7f8 fa69 	bl	8009438 <lwip_htons>
 8010f66:	4603      	mov	r3, r0
 8010f68:	4619      	mov	r1, r3
 8010f6a:	486c      	ldr	r0, [pc, #432]	@ (801111c <udp_input+0x290>)
 8010f6c:	f005 fea6 	bl	8016cbc <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
 8010f70:	4b66      	ldr	r3, [pc, #408]	@ (801110c <udp_input+0x280>)
 8010f72:	691b      	ldr	r3, [r3, #16]
 8010f74:	b2db      	uxtb	r3, r3
 8010f76:	4619      	mov	r1, r3
 8010f78:	4b64      	ldr	r3, [pc, #400]	@ (801110c <udp_input+0x280>)
 8010f7a:	691b      	ldr	r3, [r3, #16]
 8010f7c:	0a1b      	lsrs	r3, r3, #8
 8010f7e:	b2db      	uxtb	r3, r3
 8010f80:	461a      	mov	r2, r3
 8010f82:	4b62      	ldr	r3, [pc, #392]	@ (801110c <udp_input+0x280>)
 8010f84:	691b      	ldr	r3, [r3, #16]
 8010f86:	0c1b      	lsrs	r3, r3, #16
 8010f88:	b2db      	uxtb	r3, r3
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	4b5f      	ldr	r3, [pc, #380]	@ (801110c <udp_input+0x280>)
 8010f8e:	691b      	ldr	r3, [r3, #16]
 8010f90:	0e1b      	lsrs	r3, r3, #24
 8010f92:	b2db      	uxtb	r3, r3
 8010f94:	9300      	str	r3, [sp, #0]
 8010f96:	4603      	mov	r3, r0
 8010f98:	485f      	ldr	r0, [pc, #380]	@ (8011118 <udp_input+0x28c>)
 8010f9a:	f005 fe8f 	bl	8016cbc <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));
 8010f9e:	697b      	ldr	r3, [r7, #20]
 8010fa0:	881b      	ldrh	r3, [r3, #0]
 8010fa2:	b29b      	uxth	r3, r3
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f7f8 fa47 	bl	8009438 <lwip_htons>
 8010faa:	4603      	mov	r3, r0
 8010fac:	4619      	mov	r1, r3
 8010fae:	485c      	ldr	r0, [pc, #368]	@ (8011120 <udp_input+0x294>)
 8010fb0:	f005 fe84 	bl	8016cbc <iprintf>

  pcb = NULL;
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8010fb8:	2300      	movs	r3, #0
 8010fba:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010fc0:	4b58      	ldr	r3, [pc, #352]	@ (8011124 <udp_input+0x298>)
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8010fc6:	e091      	b.n	80110ec <udp_input+0x260>
    /* print the PCB local and remote address */
    LWIP_DEBUGF(UDP_DEBUG, ("pcb ("));
 8010fc8:	4857      	ldr	r0, [pc, #348]	@ (8011128 <udp_input+0x29c>)
 8010fca:	f005 fe77 	bl	8016cbc <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->local_ip);
 8010fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	b2db      	uxtb	r3, r3
 8010fd4:	4619      	mov	r1, r3
 8010fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	0a1b      	lsrs	r3, r3, #8
 8010fdc:	b2db      	uxtb	r3, r3
 8010fde:	461a      	mov	r2, r3
 8010fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	0c1b      	lsrs	r3, r3, #16
 8010fe6:	b2db      	uxtb	r3, r3
 8010fe8:	4618      	mov	r0, r3
 8010fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	0e1b      	lsrs	r3, r3, #24
 8010ff0:	b2db      	uxtb	r3, r3
 8010ff2:	9300      	str	r3, [sp, #0]
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	4848      	ldr	r0, [pc, #288]	@ (8011118 <udp_input+0x28c>)
 8010ff8:	f005 fe60 	bl	8016cbc <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
 8010ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ffe:	8a5b      	ldrh	r3, [r3, #18]
 8011000:	4619      	mov	r1, r3
 8011002:	4846      	ldr	r0, [pc, #280]	@ (801111c <udp_input+0x290>)
 8011004:	f005 fe5a 	bl	8016cbc <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
 8011008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801100a:	685b      	ldr	r3, [r3, #4]
 801100c:	b2db      	uxtb	r3, r3
 801100e:	4619      	mov	r1, r3
 8011010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011012:	685b      	ldr	r3, [r3, #4]
 8011014:	0a1b      	lsrs	r3, r3, #8
 8011016:	b2db      	uxtb	r3, r3
 8011018:	461a      	mov	r2, r3
 801101a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801101c:	685b      	ldr	r3, [r3, #4]
 801101e:	0c1b      	lsrs	r3, r3, #16
 8011020:	b2db      	uxtb	r3, r3
 8011022:	4618      	mov	r0, r3
 8011024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011026:	685b      	ldr	r3, [r3, #4]
 8011028:	0e1b      	lsrs	r3, r3, #24
 801102a:	b2db      	uxtb	r3, r3
 801102c:	9300      	str	r3, [sp, #0]
 801102e:	4603      	mov	r3, r0
 8011030:	4839      	ldr	r0, [pc, #228]	@ (8011118 <udp_input+0x28c>)
 8011032:	f005 fe43 	bl	8016cbc <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));
 8011036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011038:	8a9b      	ldrh	r3, [r3, #20]
 801103a:	4619      	mov	r1, r3
 801103c:	4838      	ldr	r0, [pc, #224]	@ (8011120 <udp_input+0x294>)
 801103e:	f005 fe3d 	bl	8016cbc <iprintf>

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011044:	8a5b      	ldrh	r3, [r3, #18]
 8011046:	89fa      	ldrh	r2, [r7, #14]
 8011048:	429a      	cmp	r2, r3
 801104a:	d14a      	bne.n	80110e2 <udp_input+0x256>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801104c:	7cfb      	ldrb	r3, [r7, #19]
 801104e:	461a      	mov	r2, r3
 8011050:	6839      	ldr	r1, [r7, #0]
 8011052:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011054:	f7ff feb6 	bl	8010dc4 <udp_input_local_match>
 8011058:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801105a:	2b00      	cmp	r3, #0
 801105c:	d041      	beq.n	80110e2 <udp_input+0x256>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801105e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011060:	7c1b      	ldrb	r3, [r3, #16]
 8011062:	f003 0304 	and.w	r3, r3, #4
 8011066:	2b00      	cmp	r3, #0
 8011068:	d11d      	bne.n	80110a6 <udp_input+0x21a>
        if (uncon_pcb == NULL) {
 801106a:	69fb      	ldr	r3, [r7, #28]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d102      	bne.n	8011076 <udp_input+0x1ea>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011072:	61fb      	str	r3, [r7, #28]
 8011074:	e017      	b.n	80110a6 <udp_input+0x21a>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011076:	7cfb      	ldrb	r3, [r7, #19]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d014      	beq.n	80110a6 <udp_input+0x21a>
 801107c:	4b23      	ldr	r3, [pc, #140]	@ (801110c <udp_input+0x280>)
 801107e:	695b      	ldr	r3, [r3, #20]
 8011080:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011084:	d10f      	bne.n	80110a6 <udp_input+0x21a>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011086:	69fb      	ldr	r3, [r7, #28]
 8011088:	681a      	ldr	r2, [r3, #0]
 801108a:	683b      	ldr	r3, [r7, #0]
 801108c:	3304      	adds	r3, #4
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	429a      	cmp	r2, r3
 8011092:	d008      	beq.n	80110a6 <udp_input+0x21a>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8011094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011096:	681a      	ldr	r2, [r3, #0]
 8011098:	683b      	ldr	r3, [r7, #0]
 801109a:	3304      	adds	r3, #4
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	429a      	cmp	r2, r3
 80110a0:	d101      	bne.n	80110a6 <udp_input+0x21a>
              /* better match */
              uncon_pcb = pcb;
 80110a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110a4:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80110a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110a8:	8a9b      	ldrh	r3, [r3, #20]
 80110aa:	8a3a      	ldrh	r2, [r7, #16]
 80110ac:	429a      	cmp	r2, r3
 80110ae:	d118      	bne.n	80110e2 <udp_input+0x256>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80110b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110b2:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d005      	beq.n	80110c4 <udp_input+0x238>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80110b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110ba:	685a      	ldr	r2, [r3, #4]
 80110bc:	4b13      	ldr	r3, [pc, #76]	@ (801110c <udp_input+0x280>)
 80110be:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80110c0:	429a      	cmp	r2, r3
 80110c2:	d10e      	bne.n	80110e2 <udp_input+0x256>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80110c4:	6a3b      	ldr	r3, [r7, #32]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d030      	beq.n	801112c <udp_input+0x2a0>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80110ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110cc:	68da      	ldr	r2, [r3, #12]
 80110ce:	6a3b      	ldr	r3, [r7, #32]
 80110d0:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80110d2:	4b14      	ldr	r3, [pc, #80]	@ (8011124 <udp_input+0x298>)
 80110d4:	681a      	ldr	r2, [r3, #0]
 80110d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110d8:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80110da:	4a12      	ldr	r2, [pc, #72]	@ (8011124 <udp_input+0x298>)
 80110dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110de:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80110e0:	e024      	b.n	801112c <udp_input+0x2a0>
      }
    }

    prev = pcb;
 80110e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110e4:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80110e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110e8:	68db      	ldr	r3, [r3, #12]
 80110ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80110ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	f47f af6a 	bne.w	8010fc8 <udp_input+0x13c>
 80110f4:	e01b      	b.n	801112e <udp_input+0x2a2>
 80110f6:	bf00      	nop
 80110f8:	0801ac6c 	.word	0x0801ac6c
 80110fc:	0801ad10 	.word	0x0801ad10
 8011100:	0801acc0 	.word	0x0801acc0
 8011104:	0801ad28 	.word	0x0801ad28
 8011108:	0801ad44 	.word	0x0801ad44
 801110c:	24000360 	.word	0x24000360
 8011110:	0801ad7c 	.word	0x0801ad7c
 8011114:	0801ada8 	.word	0x0801ada8
 8011118:	0801adb0 	.word	0x0801adb0
 801111c:	0801adc0 	.word	0x0801adc0
 8011120:	0801add0 	.word	0x0801add0
 8011124:	24003350 	.word	0x24003350
 8011128:	0801add8 	.word	0x0801add8
        break;
 801112c:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801112e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011130:	2b00      	cmp	r3, #0
 8011132:	d101      	bne.n	8011138 <udp_input+0x2ac>
    pcb = uncon_pcb;
 8011134:	69fb      	ldr	r3, [r7, #28]
 8011136:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801113a:	2b00      	cmp	r3, #0
 801113c:	d002      	beq.n	8011144 <udp_input+0x2b8>
    for_us = 1;
 801113e:	2301      	movs	r3, #1
 8011140:	76fb      	strb	r3, [r7, #27]
 8011142:	e00a      	b.n	801115a <udp_input+0x2ce>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011144:	683b      	ldr	r3, [r7, #0]
 8011146:	3304      	adds	r3, #4
 8011148:	681a      	ldr	r2, [r3, #0]
 801114a:	4b2d      	ldr	r3, [pc, #180]	@ (8011200 <udp_input+0x374>)
 801114c:	695b      	ldr	r3, [r3, #20]
 801114e:	429a      	cmp	r2, r3
 8011150:	bf0c      	ite	eq
 8011152:	2301      	moveq	r3, #1
 8011154:	2300      	movne	r3, #0
 8011156:	b2db      	uxtb	r3, r3
 8011158:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801115a:	7efb      	ldrb	r3, [r7, #27]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d047      	beq.n	80111f0 <udp_input+0x364>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
 8011160:	4828      	ldr	r0, [pc, #160]	@ (8011204 <udp_input+0x378>)
 8011162:	f005 fe1b 	bl	8016d9c <puts>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011166:	2108      	movs	r1, #8
 8011168:	6878      	ldr	r0, [r7, #4]
 801116a:	f7f9 fd55 	bl	800ac18 <pbuf_remove_header>
 801116e:	4603      	mov	r3, r0
 8011170:	2b00      	cmp	r3, #0
 8011172:	d00a      	beq.n	801118a <udp_input+0x2fe>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011174:	4b24      	ldr	r3, [pc, #144]	@ (8011208 <udp_input+0x37c>)
 8011176:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801117a:	4924      	ldr	r1, [pc, #144]	@ (801120c <udp_input+0x380>)
 801117c:	4824      	ldr	r0, [pc, #144]	@ (8011210 <udp_input+0x384>)
 801117e:	f005 fd9d 	bl	8016cbc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011182:	6878      	ldr	r0, [r7, #4]
 8011184:	f7f9 fdd6 	bl	800ad34 <pbuf_free>
      goto end;
 8011188:	e035      	b.n	80111f6 <udp_input+0x36a>
    }

    if (pcb != NULL) {
 801118a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801118c:	2b00      	cmp	r3, #0
 801118e:	d012      	beq.n	80111b6 <udp_input+0x32a>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011192:	699b      	ldr	r3, [r3, #24]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d00a      	beq.n	80111ae <udp_input+0x322>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801119a:	699c      	ldr	r4, [r3, #24]
 801119c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801119e:	69d8      	ldr	r0, [r3, #28]
 80111a0:	8a3b      	ldrh	r3, [r7, #16]
 80111a2:	9300      	str	r3, [sp, #0]
 80111a4:	4b1b      	ldr	r3, [pc, #108]	@ (8011214 <udp_input+0x388>)
 80111a6:	687a      	ldr	r2, [r7, #4]
 80111a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80111aa:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80111ac:	e024      	b.n	80111f8 <udp_input+0x36c>
        pbuf_free(p);
 80111ae:	6878      	ldr	r0, [r7, #4]
 80111b0:	f7f9 fdc0 	bl	800ad34 <pbuf_free>
        goto end;
 80111b4:	e01f      	b.n	80111f6 <udp_input+0x36a>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
 80111b6:	4818      	ldr	r0, [pc, #96]	@ (8011218 <udp_input+0x38c>)
 80111b8:	f005 fdf0 	bl	8016d9c <puts>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80111bc:	7cfb      	ldrb	r3, [r7, #19]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d112      	bne.n	80111e8 <udp_input+0x35c>
 80111c2:	4b0f      	ldr	r3, [pc, #60]	@ (8011200 <udp_input+0x374>)
 80111c4:	695b      	ldr	r3, [r3, #20]
 80111c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80111ca:	2be0      	cmp	r3, #224	@ 0xe0
 80111cc:	d00c      	beq.n	80111e8 <udp_input+0x35c>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80111ce:	4b0c      	ldr	r3, [pc, #48]	@ (8011200 <udp_input+0x374>)
 80111d0:	899b      	ldrh	r3, [r3, #12]
 80111d2:	3308      	adds	r3, #8
 80111d4:	b29b      	uxth	r3, r3
 80111d6:	b21b      	sxth	r3, r3
 80111d8:	4619      	mov	r1, r3
 80111da:	6878      	ldr	r0, [r7, #4]
 80111dc:	f7f9 fd97 	bl	800ad0e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80111e0:	2103      	movs	r1, #3
 80111e2:	6878      	ldr	r0, [r7, #4]
 80111e4:	f003 ff56 	bl	8015094 <icmp_dest_unreach>
      pbuf_free(p);
 80111e8:	6878      	ldr	r0, [r7, #4]
 80111ea:	f7f9 fda3 	bl	800ad34 <pbuf_free>
  return;
 80111ee:	e003      	b.n	80111f8 <udp_input+0x36c>
    pbuf_free(p);
 80111f0:	6878      	ldr	r0, [r7, #4]
 80111f2:	f7f9 fd9f 	bl	800ad34 <pbuf_free>
  return;
 80111f6:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80111f8:	372c      	adds	r7, #44	@ 0x2c
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd90      	pop	{r4, r7, pc}
 80111fe:	bf00      	nop
 8011200:	24000360 	.word	0x24000360
 8011204:	0801ade0 	.word	0x0801ade0
 8011208:	0801ac6c 	.word	0x0801ac6c
 801120c:	0801ae00 	.word	0x0801ae00
 8011210:	0801acc0 	.word	0x0801acc0
 8011214:	24000370 	.word	0x24000370
 8011218:	0801ae1c 	.word	0x0801ae1c

0801121c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b088      	sub	sp, #32
 8011220:	af02      	add	r7, sp, #8
 8011222:	60f8      	str	r0, [r7, #12]
 8011224:	60b9      	str	r1, [r7, #8]
 8011226:	607a      	str	r2, [r7, #4]
 8011228:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d109      	bne.n	8011244 <udp_sendto_if+0x28>
 8011230:	4b2e      	ldr	r3, [pc, #184]	@ (80112ec <udp_sendto_if+0xd0>)
 8011232:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011236:	492e      	ldr	r1, [pc, #184]	@ (80112f0 <udp_sendto_if+0xd4>)
 8011238:	482e      	ldr	r0, [pc, #184]	@ (80112f4 <udp_sendto_if+0xd8>)
 801123a:	f005 fd3f 	bl	8016cbc <iprintf>
 801123e:	f06f 030f 	mvn.w	r3, #15
 8011242:	e04f      	b.n	80112e4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8011244:	68bb      	ldr	r3, [r7, #8]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d109      	bne.n	801125e <udp_sendto_if+0x42>
 801124a:	4b28      	ldr	r3, [pc, #160]	@ (80112ec <udp_sendto_if+0xd0>)
 801124c:	f240 2281 	movw	r2, #641	@ 0x281
 8011250:	4929      	ldr	r1, [pc, #164]	@ (80112f8 <udp_sendto_if+0xdc>)
 8011252:	4828      	ldr	r0, [pc, #160]	@ (80112f4 <udp_sendto_if+0xd8>)
 8011254:	f005 fd32 	bl	8016cbc <iprintf>
 8011258:	f06f 030f 	mvn.w	r3, #15
 801125c:	e042      	b.n	80112e4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d109      	bne.n	8011278 <udp_sendto_if+0x5c>
 8011264:	4b21      	ldr	r3, [pc, #132]	@ (80112ec <udp_sendto_if+0xd0>)
 8011266:	f240 2282 	movw	r2, #642	@ 0x282
 801126a:	4924      	ldr	r1, [pc, #144]	@ (80112fc <udp_sendto_if+0xe0>)
 801126c:	4821      	ldr	r0, [pc, #132]	@ (80112f4 <udp_sendto_if+0xd8>)
 801126e:	f005 fd25 	bl	8016cbc <iprintf>
 8011272:	f06f 030f 	mvn.w	r3, #15
 8011276:	e035      	b.n	80112e4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8011278:	6a3b      	ldr	r3, [r7, #32]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d109      	bne.n	8011292 <udp_sendto_if+0x76>
 801127e:	4b1b      	ldr	r3, [pc, #108]	@ (80112ec <udp_sendto_if+0xd0>)
 8011280:	f240 2283 	movw	r2, #643	@ 0x283
 8011284:	491e      	ldr	r1, [pc, #120]	@ (8011300 <udp_sendto_if+0xe4>)
 8011286:	481b      	ldr	r0, [pc, #108]	@ (80112f4 <udp_sendto_if+0xd8>)
 8011288:	f005 fd18 	bl	8016cbc <iprintf>
 801128c:	f06f 030f 	mvn.w	r3, #15
 8011290:	e028      	b.n	80112e4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d009      	beq.n	80112ac <udp_sendto_if+0x90>
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d005      	beq.n	80112ac <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80112a8:	2be0      	cmp	r3, #224	@ 0xe0
 80112aa:	d103      	bne.n	80112b4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80112ac:	6a3b      	ldr	r3, [r7, #32]
 80112ae:	3304      	adds	r3, #4
 80112b0:	617b      	str	r3, [r7, #20]
 80112b2:	e00b      	b.n	80112cc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	681a      	ldr	r2, [r3, #0]
 80112b8:	6a3b      	ldr	r3, [r7, #32]
 80112ba:	3304      	adds	r3, #4
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	429a      	cmp	r2, r3
 80112c0:	d002      	beq.n	80112c8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80112c2:	f06f 0303 	mvn.w	r3, #3
 80112c6:	e00d      	b.n	80112e4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80112cc:	887a      	ldrh	r2, [r7, #2]
 80112ce:	697b      	ldr	r3, [r7, #20]
 80112d0:	9301      	str	r3, [sp, #4]
 80112d2:	6a3b      	ldr	r3, [r7, #32]
 80112d4:	9300      	str	r3, [sp, #0]
 80112d6:	4613      	mov	r3, r2
 80112d8:	687a      	ldr	r2, [r7, #4]
 80112da:	68b9      	ldr	r1, [r7, #8]
 80112dc:	68f8      	ldr	r0, [r7, #12]
 80112de:	f000 f811 	bl	8011304 <udp_sendto_if_src>
 80112e2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80112e4:	4618      	mov	r0, r3
 80112e6:	3718      	adds	r7, #24
 80112e8:	46bd      	mov	sp, r7
 80112ea:	bd80      	pop	{r7, pc}
 80112ec:	0801ac6c 	.word	0x0801ac6c
 80112f0:	0801aed8 	.word	0x0801aed8
 80112f4:	0801acc0 	.word	0x0801acc0
 80112f8:	0801aef4 	.word	0x0801aef4
 80112fc:	0801af10 	.word	0x0801af10
 8011300:	0801af30 	.word	0x0801af30

08011304 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b08c      	sub	sp, #48	@ 0x30
 8011308:	af04      	add	r7, sp, #16
 801130a:	60f8      	str	r0, [r7, #12]
 801130c:	60b9      	str	r1, [r7, #8]
 801130e:	607a      	str	r2, [r7, #4]
 8011310:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d109      	bne.n	801132c <udp_sendto_if_src+0x28>
 8011318:	4b7a      	ldr	r3, [pc, #488]	@ (8011504 <udp_sendto_if_src+0x200>)
 801131a:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801131e:	497a      	ldr	r1, [pc, #488]	@ (8011508 <udp_sendto_if_src+0x204>)
 8011320:	487a      	ldr	r0, [pc, #488]	@ (801150c <udp_sendto_if_src+0x208>)
 8011322:	f005 fccb 	bl	8016cbc <iprintf>
 8011326:	f06f 030f 	mvn.w	r3, #15
 801132a:	e0e6      	b.n	80114fa <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801132c:	68bb      	ldr	r3, [r7, #8]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d109      	bne.n	8011346 <udp_sendto_if_src+0x42>
 8011332:	4b74      	ldr	r3, [pc, #464]	@ (8011504 <udp_sendto_if_src+0x200>)
 8011334:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8011338:	4975      	ldr	r1, [pc, #468]	@ (8011510 <udp_sendto_if_src+0x20c>)
 801133a:	4874      	ldr	r0, [pc, #464]	@ (801150c <udp_sendto_if_src+0x208>)
 801133c:	f005 fcbe 	bl	8016cbc <iprintf>
 8011340:	f06f 030f 	mvn.w	r3, #15
 8011344:	e0d9      	b.n	80114fa <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d109      	bne.n	8011360 <udp_sendto_if_src+0x5c>
 801134c:	4b6d      	ldr	r3, [pc, #436]	@ (8011504 <udp_sendto_if_src+0x200>)
 801134e:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8011352:	4970      	ldr	r1, [pc, #448]	@ (8011514 <udp_sendto_if_src+0x210>)
 8011354:	486d      	ldr	r0, [pc, #436]	@ (801150c <udp_sendto_if_src+0x208>)
 8011356:	f005 fcb1 	bl	8016cbc <iprintf>
 801135a:	f06f 030f 	mvn.w	r3, #15
 801135e:	e0cc      	b.n	80114fa <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8011360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011362:	2b00      	cmp	r3, #0
 8011364:	d109      	bne.n	801137a <udp_sendto_if_src+0x76>
 8011366:	4b67      	ldr	r3, [pc, #412]	@ (8011504 <udp_sendto_if_src+0x200>)
 8011368:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 801136c:	496a      	ldr	r1, [pc, #424]	@ (8011518 <udp_sendto_if_src+0x214>)
 801136e:	4867      	ldr	r0, [pc, #412]	@ (801150c <udp_sendto_if_src+0x208>)
 8011370:	f005 fca4 	bl	8016cbc <iprintf>
 8011374:	f06f 030f 	mvn.w	r3, #15
 8011378:	e0bf      	b.n	80114fa <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801137a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801137c:	2b00      	cmp	r3, #0
 801137e:	d109      	bne.n	8011394 <udp_sendto_if_src+0x90>
 8011380:	4b60      	ldr	r3, [pc, #384]	@ (8011504 <udp_sendto_if_src+0x200>)
 8011382:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8011386:	4965      	ldr	r1, [pc, #404]	@ (801151c <udp_sendto_if_src+0x218>)
 8011388:	4860      	ldr	r0, [pc, #384]	@ (801150c <udp_sendto_if_src+0x208>)
 801138a:	f005 fc97 	bl	8016cbc <iprintf>
 801138e:	f06f 030f 	mvn.w	r3, #15
 8011392:	e0b2      	b.n	80114fa <udp_sendto_if_src+0x1f6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	8a5b      	ldrh	r3, [r3, #18]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d115      	bne.n	80113c8 <udp_sendto_if_src+0xc4>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
 801139c:	4860      	ldr	r0, [pc, #384]	@ (8011520 <udp_sendto_if_src+0x21c>)
 801139e:	f005 fcfd 	bl	8016d9c <puts>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80113a2:	68f9      	ldr	r1, [r7, #12]
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	8a5b      	ldrh	r3, [r3, #18]
 80113a8:	461a      	mov	r2, r3
 80113aa:	68f8      	ldr	r0, [r7, #12]
 80113ac:	f000 f8cc 	bl	8011548 <udp_bind>
 80113b0:	4603      	mov	r3, r0
 80113b2:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80113b4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d005      	beq.n	80113c8 <udp_sendto_if_src+0xc4>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
 80113bc:	4859      	ldr	r0, [pc, #356]	@ (8011524 <udp_sendto_if_src+0x220>)
 80113be:	f005 fced 	bl	8016d9c <puts>
      return err;
 80113c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80113c6:	e098      	b.n	80114fa <udp_sendto_if_src+0x1f6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80113c8:	68bb      	ldr	r3, [r7, #8]
 80113ca:	891b      	ldrh	r3, [r3, #8]
 80113cc:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80113d0:	4293      	cmp	r3, r2
 80113d2:	d902      	bls.n	80113da <udp_sendto_if_src+0xd6>
    return ERR_MEM;
 80113d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80113d8:	e08f      	b.n	80114fa <udp_sendto_if_src+0x1f6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80113da:	2108      	movs	r1, #8
 80113dc:	68b8      	ldr	r0, [r7, #8]
 80113de:	f7f9 fc0b 	bl	800abf8 <pbuf_add_header>
 80113e2:	4603      	mov	r3, r0
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d01d      	beq.n	8011424 <udp_sendto_if_src+0x120>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80113e8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80113ec:	2108      	movs	r1, #8
 80113ee:	2022      	movs	r0, #34	@ 0x22
 80113f0:	f7f9 f974 	bl	800a6dc <pbuf_alloc>
 80113f4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80113f6:	69fb      	ldr	r3, [r7, #28]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d105      	bne.n	8011408 <udp_sendto_if_src+0x104>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
 80113fc:	484a      	ldr	r0, [pc, #296]	@ (8011528 <udp_sendto_if_src+0x224>)
 80113fe:	f005 fccd 	bl	8016d9c <puts>
      return ERR_MEM;
 8011402:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011406:	e078      	b.n	80114fa <udp_sendto_if_src+0x1f6>
    }
    if (p->tot_len != 0) {
 8011408:	68bb      	ldr	r3, [r7, #8]
 801140a:	891b      	ldrh	r3, [r3, #8]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d003      	beq.n	8011418 <udp_sendto_if_src+0x114>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8011410:	68b9      	ldr	r1, [r7, #8]
 8011412:	69f8      	ldr	r0, [r7, #28]
 8011414:	f7f9 fdbe 	bl	800af94 <pbuf_chain>
    }
    /* first pbuf q points to header pbuf */
    LWIP_DEBUGF(UDP_DEBUG,
 8011418:	68ba      	ldr	r2, [r7, #8]
 801141a:	69f9      	ldr	r1, [r7, #28]
 801141c:	4843      	ldr	r0, [pc, #268]	@ (801152c <udp_sendto_if_src+0x228>)
 801141e:	f005 fc4d 	bl	8016cbc <iprintf>
 8011422:	e005      	b.n	8011430 <udp_sendto_if_src+0x12c>
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8011424:	68bb      	ldr	r3, [r7, #8]
 8011426:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
 8011428:	68b9      	ldr	r1, [r7, #8]
 801142a:	4841      	ldr	r0, [pc, #260]	@ (8011530 <udp_sendto_if_src+0x22c>)
 801142c:	f005 fc46 	bl	8016cbc <iprintf>
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8011430:	69fb      	ldr	r3, [r7, #28]
 8011432:	895b      	ldrh	r3, [r3, #10]
 8011434:	2b07      	cmp	r3, #7
 8011436:	d806      	bhi.n	8011446 <udp_sendto_if_src+0x142>
 8011438:	4b32      	ldr	r3, [pc, #200]	@ (8011504 <udp_sendto_if_src+0x200>)
 801143a:	f240 320d 	movw	r2, #781	@ 0x30d
 801143e:	493d      	ldr	r1, [pc, #244]	@ (8011534 <udp_sendto_if_src+0x230>)
 8011440:	4832      	ldr	r0, [pc, #200]	@ (801150c <udp_sendto_if_src+0x208>)
 8011442:	f005 fc3b 	bl	8016cbc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8011446:	69fb      	ldr	r3, [r7, #28]
 8011448:	685b      	ldr	r3, [r3, #4]
 801144a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	8a5b      	ldrh	r3, [r3, #18]
 8011450:	4618      	mov	r0, r3
 8011452:	f7f7 fff1 	bl	8009438 <lwip_htons>
 8011456:	4603      	mov	r3, r0
 8011458:	461a      	mov	r2, r3
 801145a:	697b      	ldr	r3, [r7, #20]
 801145c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801145e:	887b      	ldrh	r3, [r7, #2]
 8011460:	4618      	mov	r0, r3
 8011462:	f7f7 ffe9 	bl	8009438 <lwip_htons>
 8011466:	4603      	mov	r3, r0
 8011468:	461a      	mov	r2, r3
 801146a:	697b      	ldr	r3, [r7, #20]
 801146c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801146e:	697b      	ldr	r3, [r7, #20]
 8011470:	2200      	movs	r2, #0
 8011472:	719a      	strb	r2, [r3, #6]
 8011474:	2200      	movs	r2, #0
 8011476:	71da      	strb	r2, [r3, #7]
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
    q->flags |= PBUF_FLAG_MCASTLOOP;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: sending datagram of length %"U16_F"\n", q->tot_len));
 8011478:	69fb      	ldr	r3, [r7, #28]
 801147a:	891b      	ldrh	r3, [r3, #8]
 801147c:	4619      	mov	r1, r3
 801147e:	482e      	ldr	r0, [pc, #184]	@ (8011538 <udp_sendto_if_src+0x234>)
 8011480:	f005 fc1c 	bl	8016cbc <iprintf>

    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
 8011484:	69fb      	ldr	r3, [r7, #28]
 8011486:	891b      	ldrh	r3, [r3, #8]
 8011488:	4619      	mov	r1, r3
 801148a:	482c      	ldr	r0, [pc, #176]	@ (801153c <udp_sendto_if_src+0x238>)
 801148c:	f005 fc16 	bl	8016cbc <iprintf>
    udphdr->len = lwip_htons(q->tot_len);
 8011490:	69fb      	ldr	r3, [r7, #28]
 8011492:	891b      	ldrh	r3, [r3, #8]
 8011494:	4618      	mov	r0, r3
 8011496:	f7f7 ffcf 	bl	8009438 <lwip_htons>
 801149a:	4603      	mov	r3, r0
 801149c:	461a      	mov	r2, r3
 801149e:	697b      	ldr	r3, [r7, #20]
 80114a0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80114a2:	2311      	movs	r3, #17
 80114a4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	7adb      	ldrb	r3, [r3, #11]
 80114aa:	74bb      	strb	r3, [r7, #18]
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
 80114ac:	697b      	ldr	r3, [r7, #20]
 80114ae:	88db      	ldrh	r3, [r3, #6]
 80114b0:	b29b      	uxth	r3, r3
 80114b2:	4619      	mov	r1, r3
 80114b4:	4822      	ldr	r0, [pc, #136]	@ (8011540 <udp_sendto_if_src+0x23c>)
 80114b6:	f005 fc01 	bl	8016cbc <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
 80114ba:	7cfb      	ldrb	r3, [r7, #19]
 80114bc:	4619      	mov	r1, r3
 80114be:	4821      	ldr	r0, [pc, #132]	@ (8011544 <udp_sendto_if_src+0x240>)
 80114c0:	f005 fbfc 	bl	8016cbc <iprintf>
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	7a9b      	ldrb	r3, [r3, #10]
 80114c8:	7cb9      	ldrb	r1, [r7, #18]
 80114ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80114cc:	9202      	str	r2, [sp, #8]
 80114ce:	7cfa      	ldrb	r2, [r7, #19]
 80114d0:	9201      	str	r2, [sp, #4]
 80114d2:	9300      	str	r3, [sp, #0]
 80114d4:	460b      	mov	r3, r1
 80114d6:	687a      	ldr	r2, [r7, #4]
 80114d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80114da:	69f8      	ldr	r0, [r7, #28]
 80114dc:	f004 f99a 	bl	8015814 <ip4_output_if_src>
 80114e0:	4603      	mov	r3, r0
 80114e2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80114e4:	69fa      	ldr	r2, [r7, #28]
 80114e6:	68bb      	ldr	r3, [r7, #8]
 80114e8:	429a      	cmp	r2, r3
 80114ea:	d004      	beq.n	80114f6 <udp_sendto_if_src+0x1f2>
    /* free the header pbuf */
    pbuf_free(q);
 80114ec:	69f8      	ldr	r0, [r7, #28]
 80114ee:	f7f9 fc21 	bl	800ad34 <pbuf_free>
    q = NULL;
 80114f2:	2300      	movs	r3, #0
 80114f4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80114f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80114fa:	4618      	mov	r0, r3
 80114fc:	3720      	adds	r7, #32
 80114fe:	46bd      	mov	sp, r7
 8011500:	bd80      	pop	{r7, pc}
 8011502:	bf00      	nop
 8011504:	0801ac6c 	.word	0x0801ac6c
 8011508:	0801af50 	.word	0x0801af50
 801150c:	0801acc0 	.word	0x0801acc0
 8011510:	0801af70 	.word	0x0801af70
 8011514:	0801af90 	.word	0x0801af90
 8011518:	0801afb4 	.word	0x0801afb4
 801151c:	0801afd8 	.word	0x0801afd8
 8011520:	0801affc 	.word	0x0801affc
 8011524:	0801b02c 	.word	0x0801b02c
 8011528:	0801b050 	.word	0x0801b050
 801152c:	0801b074 	.word	0x0801b074
 8011530:	0801b0ac 	.word	0x0801b0ac
 8011534:	0801b0d8 	.word	0x0801b0d8
 8011538:	0801b108 	.word	0x0801b108
 801153c:	0801b134 	.word	0x0801b134
 8011540:	0801b158 	.word	0x0801b158
 8011544:	0801b178 	.word	0x0801b178

08011548 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011548:	b580      	push	{r7, lr}
 801154a:	b088      	sub	sp, #32
 801154c:	af02      	add	r7, sp, #8
 801154e:	60f8      	str	r0, [r7, #12]
 8011550:	60b9      	str	r1, [r7, #8]
 8011552:	4613      	mov	r3, r2
 8011554:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011556:	68bb      	ldr	r3, [r7, #8]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d101      	bne.n	8011560 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801155c:	4b65      	ldr	r3, [pc, #404]	@ (80116f4 <udp_bind+0x1ac>)
 801155e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d109      	bne.n	801157a <udp_bind+0x32>
 8011566:	4b64      	ldr	r3, [pc, #400]	@ (80116f8 <udp_bind+0x1b0>)
 8011568:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801156c:	4963      	ldr	r1, [pc, #396]	@ (80116fc <udp_bind+0x1b4>)
 801156e:	4864      	ldr	r0, [pc, #400]	@ (8011700 <udp_bind+0x1b8>)
 8011570:	f005 fba4 	bl	8016cbc <iprintf>
 8011574:	f06f 030f 	mvn.w	r3, #15
 8011578:	e0b7      	b.n	80116ea <udp_bind+0x1a2>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
 801157a:	4862      	ldr	r0, [pc, #392]	@ (8011704 <udp_bind+0x1bc>)
 801157c:	f005 fb9e 	bl	8016cbc <iprintf>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
 8011580:	68bb      	ldr	r3, [r7, #8]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d003      	beq.n	801158e <udp_bind+0x46>
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	781b      	ldrb	r3, [r3, #0]
 801158a:	4619      	mov	r1, r3
 801158c:	e000      	b.n	8011590 <udp_bind+0x48>
 801158e:	2100      	movs	r1, #0
 8011590:	68bb      	ldr	r3, [r7, #8]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d004      	beq.n	80115a0 <udp_bind+0x58>
 8011596:	68bb      	ldr	r3, [r7, #8]
 8011598:	3301      	adds	r3, #1
 801159a:	781b      	ldrb	r3, [r3, #0]
 801159c:	461a      	mov	r2, r3
 801159e:	e000      	b.n	80115a2 <udp_bind+0x5a>
 80115a0:	2200      	movs	r2, #0
 80115a2:	68bb      	ldr	r3, [r7, #8]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d004      	beq.n	80115b2 <udp_bind+0x6a>
 80115a8:	68bb      	ldr	r3, [r7, #8]
 80115aa:	3302      	adds	r3, #2
 80115ac:	781b      	ldrb	r3, [r3, #0]
 80115ae:	4618      	mov	r0, r3
 80115b0:	e000      	b.n	80115b4 <udp_bind+0x6c>
 80115b2:	2000      	movs	r0, #0
 80115b4:	68bb      	ldr	r3, [r7, #8]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d003      	beq.n	80115c2 <udp_bind+0x7a>
 80115ba:	68bb      	ldr	r3, [r7, #8]
 80115bc:	3303      	adds	r3, #3
 80115be:	781b      	ldrb	r3, [r3, #0]
 80115c0:	e000      	b.n	80115c4 <udp_bind+0x7c>
 80115c2:	2300      	movs	r3, #0
 80115c4:	9300      	str	r3, [sp, #0]
 80115c6:	4603      	mov	r3, r0
 80115c8:	484f      	ldr	r0, [pc, #316]	@ (8011708 <udp_bind+0x1c0>)
 80115ca:	f005 fb77 	bl	8016cbc <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));
 80115ce:	88fb      	ldrh	r3, [r7, #6]
 80115d0:	4619      	mov	r1, r3
 80115d2:	484e      	ldr	r0, [pc, #312]	@ (801170c <udp_bind+0x1c4>)
 80115d4:	f005 fb72 	bl	8016cbc <iprintf>

  rebind = 0;
 80115d8:	2300      	movs	r3, #0
 80115da:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80115dc:	4b4c      	ldr	r3, [pc, #304]	@ (8011710 <udp_bind+0x1c8>)
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	617b      	str	r3, [r7, #20]
 80115e2:	e009      	b.n	80115f8 <udp_bind+0xb0>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80115e4:	68fa      	ldr	r2, [r7, #12]
 80115e6:	697b      	ldr	r3, [r7, #20]
 80115e8:	429a      	cmp	r2, r3
 80115ea:	d102      	bne.n	80115f2 <udp_bind+0xaa>
      rebind = 1;
 80115ec:	2301      	movs	r3, #1
 80115ee:	74fb      	strb	r3, [r7, #19]
      break;
 80115f0:	e005      	b.n	80115fe <udp_bind+0xb6>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80115f2:	697b      	ldr	r3, [r7, #20]
 80115f4:	68db      	ldr	r3, [r3, #12]
 80115f6:	617b      	str	r3, [r7, #20]
 80115f8:	697b      	ldr	r3, [r7, #20]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d1f2      	bne.n	80115e4 <udp_bind+0x9c>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80115fe:	88fb      	ldrh	r3, [r7, #6]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d10c      	bne.n	801161e <udp_bind+0xd6>
    port = udp_new_port();
 8011604:	f7ff fba6 	bl	8010d54 <udp_new_port>
 8011608:	4603      	mov	r3, r0
 801160a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801160c:	88fb      	ldrh	r3, [r7, #6]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d134      	bne.n	801167c <udp_bind+0x134>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
 8011612:	4840      	ldr	r0, [pc, #256]	@ (8011714 <udp_bind+0x1cc>)
 8011614:	f005 fbc2 	bl	8016d9c <puts>
      return ERR_USE;
 8011618:	f06f 0307 	mvn.w	r3, #7
 801161c:	e065      	b.n	80116ea <udp_bind+0x1a2>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801161e:	4b3c      	ldr	r3, [pc, #240]	@ (8011710 <udp_bind+0x1c8>)
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	617b      	str	r3, [r7, #20]
 8011624:	e027      	b.n	8011676 <udp_bind+0x12e>
      if (pcb != ipcb) {
 8011626:	68fa      	ldr	r2, [r7, #12]
 8011628:	697b      	ldr	r3, [r7, #20]
 801162a:	429a      	cmp	r2, r3
 801162c:	d020      	beq.n	8011670 <udp_bind+0x128>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801162e:	697b      	ldr	r3, [r7, #20]
 8011630:	8a5b      	ldrh	r3, [r3, #18]
 8011632:	88fa      	ldrh	r2, [r7, #6]
 8011634:	429a      	cmp	r2, r3
 8011636:	d11b      	bne.n	8011670 <udp_bind+0x128>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011638:	697b      	ldr	r3, [r7, #20]
 801163a:	681a      	ldr	r2, [r3, #0]
 801163c:	68bb      	ldr	r3, [r7, #8]
 801163e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8011640:	429a      	cmp	r2, r3
 8011642:	d00d      	beq.n	8011660 <udp_bind+0x118>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011644:	68bb      	ldr	r3, [r7, #8]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d00a      	beq.n	8011660 <udp_bind+0x118>
 801164a:	68bb      	ldr	r3, [r7, #8]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d006      	beq.n	8011660 <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 8011652:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011654:	2b00      	cmp	r3, #0
 8011656:	d003      	beq.n	8011660 <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 8011658:	697b      	ldr	r3, [r7, #20]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d107      	bne.n	8011670 <udp_bind+0x128>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
 8011660:	88fb      	ldrh	r3, [r7, #6]
 8011662:	4619      	mov	r1, r3
 8011664:	482c      	ldr	r0, [pc, #176]	@ (8011718 <udp_bind+0x1d0>)
 8011666:	f005 fb29 	bl	8016cbc <iprintf>
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801166a:	f06f 0307 	mvn.w	r3, #7
 801166e:	e03c      	b.n	80116ea <udp_bind+0x1a2>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011670:	697b      	ldr	r3, [r7, #20]
 8011672:	68db      	ldr	r3, [r3, #12]
 8011674:	617b      	str	r3, [r7, #20]
 8011676:	697b      	ldr	r3, [r7, #20]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d1d4      	bne.n	8011626 <udp_bind+0xde>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801167c:	68bb      	ldr	r3, [r7, #8]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d002      	beq.n	8011688 <udp_bind+0x140>
 8011682:	68bb      	ldr	r3, [r7, #8]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	e000      	b.n	801168a <udp_bind+0x142>
 8011688:	2300      	movs	r3, #0
 801168a:	68fa      	ldr	r2, [r7, #12]
 801168c:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	88fa      	ldrh	r2, [r7, #6]
 8011692:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8011694:	7cfb      	ldrb	r3, [r7, #19]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d106      	bne.n	80116a8 <udp_bind+0x160>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801169a:	4b1d      	ldr	r3, [pc, #116]	@ (8011710 <udp_bind+0x1c8>)
 801169c:	681a      	ldr	r2, [r3, #0]
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80116a2:	4a1b      	ldr	r2, [pc, #108]	@ (8011710 <udp_bind+0x1c8>)
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
 80116a8:	481c      	ldr	r0, [pc, #112]	@ (801171c <udp_bind+0x1d4>)
 80116aa:	f005 fb07 	bl	8016cbc <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	b2db      	uxtb	r3, r3
 80116b4:	4619      	mov	r1, r3
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	0a1b      	lsrs	r3, r3, #8
 80116bc:	b2db      	uxtb	r3, r3
 80116be:	461a      	mov	r2, r3
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	0c1b      	lsrs	r3, r3, #16
 80116c6:	b2db      	uxtb	r3, r3
 80116c8:	4618      	mov	r0, r3
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	0e1b      	lsrs	r3, r3, #24
 80116d0:	b2db      	uxtb	r3, r3
 80116d2:	9300      	str	r3, [sp, #0]
 80116d4:	4603      	mov	r3, r0
 80116d6:	480c      	ldr	r0, [pc, #48]	@ (8011708 <udp_bind+0x1c0>)
 80116d8:	f005 faf0 	bl	8016cbc <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	8a5b      	ldrh	r3, [r3, #18]
 80116e0:	4619      	mov	r1, r3
 80116e2:	480f      	ldr	r0, [pc, #60]	@ (8011720 <udp_bind+0x1d8>)
 80116e4:	f005 faea 	bl	8016cbc <iprintf>
  return ERR_OK;
 80116e8:	2300      	movs	r3, #0
}
 80116ea:	4618      	mov	r0, r3
 80116ec:	3718      	adds	r7, #24
 80116ee:	46bd      	mov	sp, r7
 80116f0:	bd80      	pop	{r7, pc}
 80116f2:	bf00      	nop
 80116f4:	0801dc64 	.word	0x0801dc64
 80116f8:	0801ac6c 	.word	0x0801ac6c
 80116fc:	0801b1a0 	.word	0x0801b1a0
 8011700:	0801acc0 	.word	0x0801acc0
 8011704:	0801b1b8 	.word	0x0801b1b8
 8011708:	0801adb0 	.word	0x0801adb0
 801170c:	0801b1cc 	.word	0x0801b1cc
 8011710:	24003350 	.word	0x24003350
 8011714:	0801b1dc 	.word	0x0801b1dc
 8011718:	0801b1fc 	.word	0x0801b1fc
 801171c:	0801b234 	.word	0x0801b234
 8011720:	0801b248 	.word	0x0801b248

08011724 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b088      	sub	sp, #32
 8011728:	af02      	add	r7, sp, #8
 801172a:	60f8      	str	r0, [r7, #12]
 801172c:	60b9      	str	r1, [r7, #8]
 801172e:	4613      	mov	r3, r2
 8011730:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d109      	bne.n	801174c <udp_connect+0x28>
 8011738:	4b3c      	ldr	r3, [pc, #240]	@ (801182c <udp_connect+0x108>)
 801173a:	f240 4235 	movw	r2, #1077	@ 0x435
 801173e:	493c      	ldr	r1, [pc, #240]	@ (8011830 <udp_connect+0x10c>)
 8011740:	483c      	ldr	r0, [pc, #240]	@ (8011834 <udp_connect+0x110>)
 8011742:	f005 fabb 	bl	8016cbc <iprintf>
 8011746:	f06f 030f 	mvn.w	r3, #15
 801174a:	e06b      	b.n	8011824 <udp_connect+0x100>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801174c:	68bb      	ldr	r3, [r7, #8]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d109      	bne.n	8011766 <udp_connect+0x42>
 8011752:	4b36      	ldr	r3, [pc, #216]	@ (801182c <udp_connect+0x108>)
 8011754:	f240 4236 	movw	r2, #1078	@ 0x436
 8011758:	4937      	ldr	r1, [pc, #220]	@ (8011838 <udp_connect+0x114>)
 801175a:	4836      	ldr	r0, [pc, #216]	@ (8011834 <udp_connect+0x110>)
 801175c:	f005 faae 	bl	8016cbc <iprintf>
 8011760:	f06f 030f 	mvn.w	r3, #15
 8011764:	e05e      	b.n	8011824 <udp_connect+0x100>

  if (pcb->local_port == 0) {
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	8a5b      	ldrh	r3, [r3, #18]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d10f      	bne.n	801178e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801176e:	68f9      	ldr	r1, [r7, #12]
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	8a5b      	ldrh	r3, [r3, #18]
 8011774:	461a      	mov	r2, r3
 8011776:	68f8      	ldr	r0, [r7, #12]
 8011778:	f7ff fee6 	bl	8011548 <udp_bind>
 801177c:	4603      	mov	r3, r0
 801177e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8011780:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d002      	beq.n	801178e <udp_connect+0x6a>
      return err;
 8011788:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801178c:	e04a      	b.n	8011824 <udp_connect+0x100>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801178e:	68bb      	ldr	r3, [r7, #8]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d002      	beq.n	801179a <udp_connect+0x76>
 8011794:	68bb      	ldr	r3, [r7, #8]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	e000      	b.n	801179c <udp_connect+0x78>
 801179a:	2300      	movs	r3, #0
 801179c:	68fa      	ldr	r2, [r7, #12]
 801179e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	88fa      	ldrh	r2, [r7, #6]
 80117a4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	7c1b      	ldrb	r3, [r3, #16]
 80117aa:	f043 0304 	orr.w	r3, r3, #4
 80117ae:	b2da      	uxtb	r2, r3
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	741a      	strb	r2, [r3, #16]

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_connect: connected to "));
 80117b4:	4821      	ldr	r0, [pc, #132]	@ (801183c <udp_connect+0x118>)
 80117b6:	f005 fa81 	bl	8016cbc <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	685b      	ldr	r3, [r3, #4]
 80117be:	b2db      	uxtb	r3, r3
 80117c0:	4619      	mov	r1, r3
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	685b      	ldr	r3, [r3, #4]
 80117c6:	0a1b      	lsrs	r3, r3, #8
 80117c8:	b2db      	uxtb	r3, r3
 80117ca:	461a      	mov	r2, r3
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	685b      	ldr	r3, [r3, #4]
 80117d0:	0c1b      	lsrs	r3, r3, #16
 80117d2:	b2db      	uxtb	r3, r3
 80117d4:	4618      	mov	r0, r3
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	685b      	ldr	r3, [r3, #4]
 80117da:	0e1b      	lsrs	r3, r3, #24
 80117dc:	b2db      	uxtb	r3, r3
 80117de:	9300      	str	r3, [sp, #0]
 80117e0:	4603      	mov	r3, r0
 80117e2:	4817      	ldr	r0, [pc, #92]	@ (8011840 <udp_connect+0x11c>)
 80117e4:	f005 fa6a 	bl	8016cbc <iprintf>
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	8a9b      	ldrh	r3, [r3, #20]
 80117ec:	4619      	mov	r1, r3
 80117ee:	4815      	ldr	r0, [pc, #84]	@ (8011844 <udp_connect+0x120>)
 80117f0:	f005 fa64 	bl	8016cbc <iprintf>

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80117f4:	4b14      	ldr	r3, [pc, #80]	@ (8011848 <udp_connect+0x124>)
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	617b      	str	r3, [r7, #20]
 80117fa:	e008      	b.n	801180e <udp_connect+0xea>
    if (pcb == ipcb) {
 80117fc:	68fa      	ldr	r2, [r7, #12]
 80117fe:	697b      	ldr	r3, [r7, #20]
 8011800:	429a      	cmp	r2, r3
 8011802:	d101      	bne.n	8011808 <udp_connect+0xe4>
      /* already on the list, just return */
      return ERR_OK;
 8011804:	2300      	movs	r3, #0
 8011806:	e00d      	b.n	8011824 <udp_connect+0x100>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011808:	697b      	ldr	r3, [r7, #20]
 801180a:	68db      	ldr	r3, [r3, #12]
 801180c:	617b      	str	r3, [r7, #20]
 801180e:	697b      	ldr	r3, [r7, #20]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d1f3      	bne.n	80117fc <udp_connect+0xd8>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8011814:	4b0c      	ldr	r3, [pc, #48]	@ (8011848 <udp_connect+0x124>)
 8011816:	681a      	ldr	r2, [r3, #0]
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801181c:	4a0a      	ldr	r2, [pc, #40]	@ (8011848 <udp_connect+0x124>)
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8011822:	2300      	movs	r3, #0
}
 8011824:	4618      	mov	r0, r3
 8011826:	3718      	adds	r7, #24
 8011828:	46bd      	mov	sp, r7
 801182a:	bd80      	pop	{r7, pc}
 801182c:	0801ac6c 	.word	0x0801ac6c
 8011830:	0801b258 	.word	0x0801b258
 8011834:	0801acc0 	.word	0x0801acc0
 8011838:	0801b274 	.word	0x0801b274
 801183c:	0801b290 	.word	0x0801b290
 8011840:	0801adb0 	.word	0x0801adb0
 8011844:	0801b248 	.word	0x0801b248
 8011848:	24003350 	.word	0x24003350

0801184c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801184c:	b580      	push	{r7, lr}
 801184e:	b084      	sub	sp, #16
 8011850:	af00      	add	r7, sp, #0
 8011852:	60f8      	str	r0, [r7, #12]
 8011854:	60b9      	str	r1, [r7, #8]
 8011856:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d107      	bne.n	801186e <udp_recv+0x22>
 801185e:	4b08      	ldr	r3, [pc, #32]	@ (8011880 <udp_recv+0x34>)
 8011860:	f240 428a 	movw	r2, #1162	@ 0x48a
 8011864:	4907      	ldr	r1, [pc, #28]	@ (8011884 <udp_recv+0x38>)
 8011866:	4808      	ldr	r0, [pc, #32]	@ (8011888 <udp_recv+0x3c>)
 8011868:	f005 fa28 	bl	8016cbc <iprintf>
 801186c:	e005      	b.n	801187a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	68ba      	ldr	r2, [r7, #8]
 8011872:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	687a      	ldr	r2, [r7, #4]
 8011878:	61da      	str	r2, [r3, #28]
}
 801187a:	3710      	adds	r7, #16
 801187c:	46bd      	mov	sp, r7
 801187e:	bd80      	pop	{r7, pc}
 8011880:	0801ac6c 	.word	0x0801ac6c
 8011884:	0801b2c8 	.word	0x0801b2c8
 8011888:	0801acc0 	.word	0x0801acc0

0801188c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801188c:	b580      	push	{r7, lr}
 801188e:	b084      	sub	sp, #16
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d107      	bne.n	80118aa <udp_remove+0x1e>
 801189a:	4b19      	ldr	r3, [pc, #100]	@ (8011900 <udp_remove+0x74>)
 801189c:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 80118a0:	4918      	ldr	r1, [pc, #96]	@ (8011904 <udp_remove+0x78>)
 80118a2:	4819      	ldr	r0, [pc, #100]	@ (8011908 <udp_remove+0x7c>)
 80118a4:	f005 fa0a 	bl	8016cbc <iprintf>
 80118a8:	e026      	b.n	80118f8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80118aa:	4b18      	ldr	r3, [pc, #96]	@ (801190c <udp_remove+0x80>)
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	687a      	ldr	r2, [r7, #4]
 80118b0:	429a      	cmp	r2, r3
 80118b2:	d105      	bne.n	80118c0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80118b4:	4b15      	ldr	r3, [pc, #84]	@ (801190c <udp_remove+0x80>)
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	68db      	ldr	r3, [r3, #12]
 80118ba:	4a14      	ldr	r2, [pc, #80]	@ (801190c <udp_remove+0x80>)
 80118bc:	6013      	str	r3, [r2, #0]
 80118be:	e017      	b.n	80118f0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80118c0:	4b12      	ldr	r3, [pc, #72]	@ (801190c <udp_remove+0x80>)
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	60fb      	str	r3, [r7, #12]
 80118c6:	e010      	b.n	80118ea <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	68db      	ldr	r3, [r3, #12]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d009      	beq.n	80118e4 <udp_remove+0x58>
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	68db      	ldr	r3, [r3, #12]
 80118d4:	687a      	ldr	r2, [r7, #4]
 80118d6:	429a      	cmp	r2, r3
 80118d8:	d104      	bne.n	80118e4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	68da      	ldr	r2, [r3, #12]
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	60da      	str	r2, [r3, #12]
        break;
 80118e2:	e005      	b.n	80118f0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	68db      	ldr	r3, [r3, #12]
 80118e8:	60fb      	str	r3, [r7, #12]
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d1eb      	bne.n	80118c8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80118f0:	6879      	ldr	r1, [r7, #4]
 80118f2:	2000      	movs	r0, #0
 80118f4:	f7f8 fb50 	bl	8009f98 <memp_free>
}
 80118f8:	3710      	adds	r7, #16
 80118fa:	46bd      	mov	sp, r7
 80118fc:	bd80      	pop	{r7, pc}
 80118fe:	bf00      	nop
 8011900:	0801ac6c 	.word	0x0801ac6c
 8011904:	0801b2e0 	.word	0x0801b2e0
 8011908:	0801acc0 	.word	0x0801acc0
 801190c:	24003350 	.word	0x24003350

08011910 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b082      	sub	sp, #8
 8011914:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8011916:	2000      	movs	r0, #0
 8011918:	f7f8 face 	bl	8009eb8 <memp_malloc>
 801191c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d007      	beq.n	8011934 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8011924:	2220      	movs	r2, #32
 8011926:	2100      	movs	r1, #0
 8011928:	6878      	ldr	r0, [r7, #4]
 801192a:	f005 fb27 	bl	8016f7c <memset>
    pcb->ttl = UDP_TTL;
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	22ff      	movs	r2, #255	@ 0xff
 8011932:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8011934:	687b      	ldr	r3, [r7, #4]
}
 8011936:	4618      	mov	r0, r3
 8011938:	3708      	adds	r7, #8
 801193a:	46bd      	mov	sp, r7
 801193c:	bd80      	pop	{r7, pc}
	...

08011940 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011940:	b480      	push	{r7}
 8011942:	b085      	sub	sp, #20
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
 8011948:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d01e      	beq.n	801198e <udp_netif_ip_addr_changed+0x4e>
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d01a      	beq.n	801198e <udp_netif_ip_addr_changed+0x4e>
 8011958:	683b      	ldr	r3, [r7, #0]
 801195a:	2b00      	cmp	r3, #0
 801195c:	d017      	beq.n	801198e <udp_netif_ip_addr_changed+0x4e>
 801195e:	683b      	ldr	r3, [r7, #0]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d013      	beq.n	801198e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011966:	4b0d      	ldr	r3, [pc, #52]	@ (801199c <udp_netif_ip_addr_changed+0x5c>)
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	60fb      	str	r3, [r7, #12]
 801196c:	e00c      	b.n	8011988 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	681a      	ldr	r2, [r3, #0]
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	429a      	cmp	r2, r3
 8011978:	d103      	bne.n	8011982 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801197a:	683b      	ldr	r3, [r7, #0]
 801197c:	681a      	ldr	r2, [r3, #0]
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	68db      	ldr	r3, [r3, #12]
 8011986:	60fb      	str	r3, [r7, #12]
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d1ef      	bne.n	801196e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801198e:	bf00      	nop
 8011990:	3714      	adds	r7, #20
 8011992:	46bd      	mov	sp, r7
 8011994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011998:	4770      	bx	lr
 801199a:	bf00      	nop
 801199c:	24003350 	.word	0x24003350

080119a0 <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 80119a0:	b590      	push	{r4, r7, lr}
 80119a2:	b083      	sub	sp, #12
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(UDP_DEBUG, ("UDP header:\n"));
 80119a8:	481b      	ldr	r0, [pc, #108]	@ (8011a18 <udp_debug_print+0x78>)
 80119aa:	f005 f9f7 	bl	8016d9c <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 80119ae:	481b      	ldr	r0, [pc, #108]	@ (8011a1c <udp_debug_print+0x7c>)
 80119b0:	f005 f9f4 	bl	8016d9c <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     %5"U16_F"     | (src port, dest port)\n",
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	881b      	ldrh	r3, [r3, #0]
 80119b8:	b29b      	uxth	r3, r3
 80119ba:	4618      	mov	r0, r3
 80119bc:	f7f7 fd3c 	bl	8009438 <lwip_htons>
 80119c0:	4603      	mov	r3, r0
 80119c2:	461c      	mov	r4, r3
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	885b      	ldrh	r3, [r3, #2]
 80119c8:	b29b      	uxth	r3, r3
 80119ca:	4618      	mov	r0, r3
 80119cc:	f7f7 fd34 	bl	8009438 <lwip_htons>
 80119d0:	4603      	mov	r3, r0
 80119d2:	461a      	mov	r2, r3
 80119d4:	4621      	mov	r1, r4
 80119d6:	4812      	ldr	r0, [pc, #72]	@ (8011a20 <udp_debug_print+0x80>)
 80119d8:	f005 f970 	bl	8016cbc <iprintf>
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 80119dc:	480f      	ldr	r0, [pc, #60]	@ (8011a1c <udp_debug_print+0x7c>)
 80119de:	f005 f9dd 	bl	8016d9c <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	889b      	ldrh	r3, [r3, #4]
 80119e6:	b29b      	uxth	r3, r3
 80119e8:	4618      	mov	r0, r3
 80119ea:	f7f7 fd25 	bl	8009438 <lwip_htons>
 80119ee:	4603      	mov	r3, r0
 80119f0:	461c      	mov	r4, r3
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	88db      	ldrh	r3, [r3, #6]
 80119f6:	b29b      	uxth	r3, r3
 80119f8:	4618      	mov	r0, r3
 80119fa:	f7f7 fd1d 	bl	8009438 <lwip_htons>
 80119fe:	4603      	mov	r3, r0
 8011a00:	461a      	mov	r2, r3
 8011a02:	4621      	mov	r1, r4
 8011a04:	4807      	ldr	r0, [pc, #28]	@ (8011a24 <udp_debug_print+0x84>)
 8011a06:	f005 f959 	bl	8016cbc <iprintf>
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 8011a0a:	4804      	ldr	r0, [pc, #16]	@ (8011a1c <udp_debug_print+0x7c>)
 8011a0c:	f005 f9c6 	bl	8016d9c <puts>
}
 8011a10:	bf00      	nop
 8011a12:	370c      	adds	r7, #12
 8011a14:	46bd      	mov	sp, r7
 8011a16:	bd90      	pop	{r4, r7, pc}
 8011a18:	0801b2f8 	.word	0x0801b2f8
 8011a1c:	0801b304 	.word	0x0801b304
 8011a20:	0801b328 	.word	0x0801b328
 8011a24:	0801b360 	.word	0x0801b360

08011a28 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8011a2c:	4b20      	ldr	r3, [pc, #128]	@ (8011ab0 <dhcp_inc_pcb_refcount+0x88>)
 8011a2e:	781b      	ldrb	r3, [r3, #0]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d133      	bne.n	8011a9c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8011a34:	4b1f      	ldr	r3, [pc, #124]	@ (8011ab4 <dhcp_inc_pcb_refcount+0x8c>)
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d005      	beq.n	8011a48 <dhcp_inc_pcb_refcount+0x20>
 8011a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8011ab8 <dhcp_inc_pcb_refcount+0x90>)
 8011a3e:	22e5      	movs	r2, #229	@ 0xe5
 8011a40:	491e      	ldr	r1, [pc, #120]	@ (8011abc <dhcp_inc_pcb_refcount+0x94>)
 8011a42:	481f      	ldr	r0, [pc, #124]	@ (8011ac0 <dhcp_inc_pcb_refcount+0x98>)
 8011a44:	f005 f93a 	bl	8016cbc <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8011a48:	f7ff ff62 	bl	8011910 <udp_new>
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	4a19      	ldr	r2, [pc, #100]	@ (8011ab4 <dhcp_inc_pcb_refcount+0x8c>)
 8011a50:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8011a52:	4b18      	ldr	r3, [pc, #96]	@ (8011ab4 <dhcp_inc_pcb_refcount+0x8c>)
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d102      	bne.n	8011a60 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8011a5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011a5e:	e024      	b.n	8011aaa <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8011a60:	4b14      	ldr	r3, [pc, #80]	@ (8011ab4 <dhcp_inc_pcb_refcount+0x8c>)
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	7a5a      	ldrb	r2, [r3, #9]
 8011a66:	4b13      	ldr	r3, [pc, #76]	@ (8011ab4 <dhcp_inc_pcb_refcount+0x8c>)
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	f042 0220 	orr.w	r2, r2, #32
 8011a6e:	b2d2      	uxtb	r2, r2
 8011a70:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8011a72:	4b10      	ldr	r3, [pc, #64]	@ (8011ab4 <dhcp_inc_pcb_refcount+0x8c>)
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	2244      	movs	r2, #68	@ 0x44
 8011a78:	4912      	ldr	r1, [pc, #72]	@ (8011ac4 <dhcp_inc_pcb_refcount+0x9c>)
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	f7ff fd64 	bl	8011548 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8011a80:	4b0c      	ldr	r3, [pc, #48]	@ (8011ab4 <dhcp_inc_pcb_refcount+0x8c>)
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	2243      	movs	r2, #67	@ 0x43
 8011a86:	490f      	ldr	r1, [pc, #60]	@ (8011ac4 <dhcp_inc_pcb_refcount+0x9c>)
 8011a88:	4618      	mov	r0, r3
 8011a8a:	f7ff fe4b 	bl	8011724 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8011a8e:	4b09      	ldr	r3, [pc, #36]	@ (8011ab4 <dhcp_inc_pcb_refcount+0x8c>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	2200      	movs	r2, #0
 8011a94:	490c      	ldr	r1, [pc, #48]	@ (8011ac8 <dhcp_inc_pcb_refcount+0xa0>)
 8011a96:	4618      	mov	r0, r3
 8011a98:	f7ff fed8 	bl	801184c <udp_recv>
  }

  dhcp_pcb_refcount++;
 8011a9c:	4b04      	ldr	r3, [pc, #16]	@ (8011ab0 <dhcp_inc_pcb_refcount+0x88>)
 8011a9e:	781b      	ldrb	r3, [r3, #0]
 8011aa0:	3301      	adds	r3, #1
 8011aa2:	b2da      	uxtb	r2, r3
 8011aa4:	4b02      	ldr	r3, [pc, #8]	@ (8011ab0 <dhcp_inc_pcb_refcount+0x88>)
 8011aa6:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8011aa8:	2300      	movs	r3, #0
}
 8011aaa:	4618      	mov	r0, r3
 8011aac:	bd80      	pop	{r7, pc}
 8011aae:	bf00      	nop
 8011ab0:	24003380 	.word	0x24003380
 8011ab4:	2400337c 	.word	0x2400337c
 8011ab8:	0801b394 	.word	0x0801b394
 8011abc:	0801b3cc 	.word	0x0801b3cc
 8011ac0:	0801b3f4 	.word	0x0801b3f4
 8011ac4:	0801dc64 	.word	0x0801dc64
 8011ac8:	08013769 	.word	0x08013769

08011acc <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8011ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8011b0c <dhcp_dec_pcb_refcount+0x40>)
 8011ad2:	781b      	ldrb	r3, [r3, #0]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d105      	bne.n	8011ae4 <dhcp_dec_pcb_refcount+0x18>
 8011ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8011b10 <dhcp_dec_pcb_refcount+0x44>)
 8011ada:	22ff      	movs	r2, #255	@ 0xff
 8011adc:	490d      	ldr	r1, [pc, #52]	@ (8011b14 <dhcp_dec_pcb_refcount+0x48>)
 8011ade:	480e      	ldr	r0, [pc, #56]	@ (8011b18 <dhcp_dec_pcb_refcount+0x4c>)
 8011ae0:	f005 f8ec 	bl	8016cbc <iprintf>
  dhcp_pcb_refcount--;
 8011ae4:	4b09      	ldr	r3, [pc, #36]	@ (8011b0c <dhcp_dec_pcb_refcount+0x40>)
 8011ae6:	781b      	ldrb	r3, [r3, #0]
 8011ae8:	3b01      	subs	r3, #1
 8011aea:	b2da      	uxtb	r2, r3
 8011aec:	4b07      	ldr	r3, [pc, #28]	@ (8011b0c <dhcp_dec_pcb_refcount+0x40>)
 8011aee:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8011af0:	4b06      	ldr	r3, [pc, #24]	@ (8011b0c <dhcp_dec_pcb_refcount+0x40>)
 8011af2:	781b      	ldrb	r3, [r3, #0]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d107      	bne.n	8011b08 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8011af8:	4b08      	ldr	r3, [pc, #32]	@ (8011b1c <dhcp_dec_pcb_refcount+0x50>)
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	4618      	mov	r0, r3
 8011afe:	f7ff fec5 	bl	801188c <udp_remove>
    dhcp_pcb = NULL;
 8011b02:	4b06      	ldr	r3, [pc, #24]	@ (8011b1c <dhcp_dec_pcb_refcount+0x50>)
 8011b04:	2200      	movs	r2, #0
 8011b06:	601a      	str	r2, [r3, #0]
  }
}
 8011b08:	bf00      	nop
 8011b0a:	bd80      	pop	{r7, pc}
 8011b0c:	24003380 	.word	0x24003380
 8011b10:	0801b394 	.word	0x0801b394
 8011b14:	0801b41c 	.word	0x0801b41c
 8011b18:	0801b3f4 	.word	0x0801b3f4
 8011b1c:	2400337c 	.word	0x2400337c

08011b20 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b086      	sub	sp, #24
 8011b24:	af02      	add	r7, sp, #8
 8011b26:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b2c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8011b34:	461a      	mov	r2, r3
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011b3c:	4619      	mov	r1, r3
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011b44:	9300      	str	r3, [sp, #0]
 8011b46:	460b      	mov	r3, r1
 8011b48:	6879      	ldr	r1, [r7, #4]
 8011b4a:	480a      	ldr	r0, [pc, #40]	@ (8011b74 <dhcp_handle_nak+0x54>)
 8011b4c:	f005 f8b6 	bl	8016cbc <iprintf>
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8011b50:	210c      	movs	r1, #12
 8011b52:	68f8      	ldr	r0, [r7, #12]
 8011b54:	f001 fa2c 	bl	8012fb0 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8011b58:	4b07      	ldr	r3, [pc, #28]	@ (8011b78 <dhcp_handle_nak+0x58>)
 8011b5a:	4a07      	ldr	r2, [pc, #28]	@ (8011b78 <dhcp_handle_nak+0x58>)
 8011b5c:	4906      	ldr	r1, [pc, #24]	@ (8011b78 <dhcp_handle_nak+0x58>)
 8011b5e:	6878      	ldr	r0, [r7, #4]
 8011b60:	f7f8 fbbc 	bl	800a2dc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8011b64:	6878      	ldr	r0, [r7, #4]
 8011b66:	f000 fd59 	bl	801261c <dhcp_discover>
}
 8011b6a:	bf00      	nop
 8011b6c:	3710      	adds	r7, #16
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd80      	pop	{r7, pc}
 8011b72:	bf00      	nop
 8011b74:	0801b440 	.word	0x0801b440
 8011b78:	0801dc64 	.word	0x0801dc64

08011b7c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b084      	sub	sp, #16
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b88:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8011b90:	461a      	mov	r2, r3
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011b98:	6879      	ldr	r1, [r7, #4]
 8011b9a:	481c      	ldr	r0, [pc, #112]	@ (8011c0c <dhcp_check+0x90>)
 8011b9c:	f005 f88e 	bl	8016cbc <iprintf>
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8011ba0:	2108      	movs	r1, #8
 8011ba2:	68f8      	ldr	r0, [r7, #12]
 8011ba4:	f001 fa04 	bl	8012fb0 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	331c      	adds	r3, #28
 8011bac:	2200      	movs	r2, #0
 8011bae:	4619      	mov	r1, r3
 8011bb0:	6878      	ldr	r0, [r7, #4]
 8011bb2:	f002 fec5 	bl	8014940 <etharp_query>
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8011bba:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d002      	beq.n	8011bc8 <dhcp_check+0x4c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
 8011bc2:	4813      	ldr	r0, [pc, #76]	@ (8011c10 <dhcp_check+0x94>)
 8011bc4:	f005 f8ea 	bl	8016d9c <puts>
  }
  if (dhcp->tries < 255) {
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	799b      	ldrb	r3, [r3, #6]
 8011bcc:	2bff      	cmp	r3, #255	@ 0xff
 8011bce:	d005      	beq.n	8011bdc <dhcp_check+0x60>
    dhcp->tries++;
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	799b      	ldrb	r3, [r3, #6]
 8011bd4:	3301      	adds	r3, #1
 8011bd6:	b2da      	uxtb	r2, r3
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8011bdc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8011be0:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011be2:	893b      	ldrh	r3, [r7, #8]
 8011be4:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8011be8:	4a0a      	ldr	r2, [pc, #40]	@ (8011c14 <dhcp_check+0x98>)
 8011bea:	fb82 1203 	smull	r1, r2, r2, r3
 8011bee:	1152      	asrs	r2, r2, #5
 8011bf0:	17db      	asrs	r3, r3, #31
 8011bf2:	1ad3      	subs	r3, r2, r3
 8011bf4:	b29a      	uxth	r2, r3
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
 8011bfa:	893b      	ldrh	r3, [r7, #8]
 8011bfc:	4619      	mov	r1, r3
 8011bfe:	4806      	ldr	r0, [pc, #24]	@ (8011c18 <dhcp_check+0x9c>)
 8011c00:	f005 f85c 	bl	8016cbc <iprintf>
}
 8011c04:	bf00      	nop
 8011c06:	3710      	adds	r7, #16
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	bd80      	pop	{r7, pc}
 8011c0c:	0801b464 	.word	0x0801b464
 8011c10:	0801b480 	.word	0x0801b480
 8011c14:	10624dd3 	.word	0x10624dd3
 8011c18:	0801b4a8 	.word	0x0801b4a8

08011c1c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	b086      	sub	sp, #24
 8011c20:	af02      	add	r7, sp, #8
 8011c22:	6078      	str	r0, [r7, #4]
 8011c24:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c2a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8011c32:	461a      	mov	r2, r3
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011c3a:	4619      	mov	r1, r3
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011c42:	9300      	str	r3, [sp, #0]
 8011c44:	460b      	mov	r3, r1
 8011c46:	6879      	ldr	r1, [r7, #4]
 8011c48:	4816      	ldr	r0, [pc, #88]	@ (8011ca4 <dhcp_handle_offer+0x88>)
 8011c4a:	f005 f837 	bl	8016cbc <iprintf>
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8011c4e:	4b16      	ldr	r3, [pc, #88]	@ (8011ca8 <dhcp_handle_offer+0x8c>)
 8011c50:	789b      	ldrb	r3, [r3, #2]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d01e      	beq.n	8011c94 <dhcp_handle_offer+0x78>
    dhcp->request_timeout = 0; /* stop timer */
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	2200      	movs	r2, #0
 8011c5a:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8011c5c:	4b13      	ldr	r3, [pc, #76]	@ (8011cac <dhcp_handle_offer+0x90>)
 8011c5e:	689b      	ldr	r3, [r3, #8]
 8011c60:	4618      	mov	r0, r3
 8011c62:	f7f7 fbfe 	bl	8009462 <lwip_htonl>
 8011c66:	4602      	mov	r2, r0
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	699b      	ldr	r3, [r3, #24]
 8011c70:	4619      	mov	r1, r3
 8011c72:	480f      	ldr	r0, [pc, #60]	@ (8011cb0 <dhcp_handle_offer+0x94>)
 8011c74:	f005 f822 	bl	8016cbc <iprintf>
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8011c78:	683b      	ldr	r3, [r7, #0]
 8011c7a:	691a      	ldr	r2, [r3, #16]
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	69db      	ldr	r3, [r3, #28]
 8011c84:	4619      	mov	r1, r3
 8011c86:	480b      	ldr	r0, [pc, #44]	@ (8011cb4 <dhcp_handle_offer+0x98>)
 8011c88:	f005 f818 	bl	8016cbc <iprintf>
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8011c8c:	6878      	ldr	r0, [r7, #4]
 8011c8e:	f000 f815 	bl	8011cbc <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8011c92:	e003      	b.n	8011c9c <dhcp_handle_offer+0x80>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 8011c94:	6879      	ldr	r1, [r7, #4]
 8011c96:	4808      	ldr	r0, [pc, #32]	@ (8011cb8 <dhcp_handle_offer+0x9c>)
 8011c98:	f005 f810 	bl	8016cbc <iprintf>
}
 8011c9c:	bf00      	nop
 8011c9e:	3710      	adds	r7, #16
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	bd80      	pop	{r7, pc}
 8011ca4:	0801b4d8 	.word	0x0801b4d8
 8011ca8:	24003374 	.word	0x24003374
 8011cac:	24003354 	.word	0x24003354
 8011cb0:	0801b500 	.word	0x0801b500
 8011cb4:	0801b528 	.word	0x0801b528
 8011cb8:	0801b550 	.word	0x0801b550

08011cbc <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8011cbc:	b5b0      	push	{r4, r5, r7, lr}
 8011cbe:	b08a      	sub	sp, #40	@ 0x28
 8011cc0:	af02      	add	r7, sp, #8
 8011cc2:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d109      	bne.n	8011cde <dhcp_select+0x22>
 8011cca:	4b7f      	ldr	r3, [pc, #508]	@ (8011ec8 <dhcp_select+0x20c>)
 8011ccc:	f240 1277 	movw	r2, #375	@ 0x177
 8011cd0:	497e      	ldr	r1, [pc, #504]	@ (8011ecc <dhcp_select+0x210>)
 8011cd2:	487f      	ldr	r0, [pc, #508]	@ (8011ed0 <dhcp_select+0x214>)
 8011cd4:	f004 fff2 	bl	8016cbc <iprintf>
 8011cd8:	f06f 030f 	mvn.w	r3, #15
 8011cdc:	e0ef      	b.n	8011ebe <dhcp_select+0x202>
  dhcp = netif_dhcp_data(netif);
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ce2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8011ce4:	69bb      	ldr	r3, [r7, #24]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d109      	bne.n	8011cfe <dhcp_select+0x42>
 8011cea:	4b77      	ldr	r3, [pc, #476]	@ (8011ec8 <dhcp_select+0x20c>)
 8011cec:	f240 1279 	movw	r2, #377	@ 0x179
 8011cf0:	4978      	ldr	r1, [pc, #480]	@ (8011ed4 <dhcp_select+0x218>)
 8011cf2:	4877      	ldr	r0, [pc, #476]	@ (8011ed0 <dhcp_select+0x214>)
 8011cf4:	f004 ffe2 	bl	8016cbc <iprintf>
 8011cf8:	f06f 0305 	mvn.w	r3, #5
 8011cfc:	e0df      	b.n	8011ebe <dhcp_select+0x202>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8011d04:	461a      	mov	r2, r3
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011d0c:	4619      	mov	r1, r3
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011d14:	9300      	str	r3, [sp, #0]
 8011d16:	460b      	mov	r3, r1
 8011d18:	6879      	ldr	r1, [r7, #4]
 8011d1a:	486f      	ldr	r0, [pc, #444]	@ (8011ed8 <dhcp_select+0x21c>)
 8011d1c:	f004 ffce 	bl	8016cbc <iprintf>
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8011d20:	2101      	movs	r1, #1
 8011d22:	69b8      	ldr	r0, [r7, #24]
 8011d24:	f001 f944 	bl	8012fb0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011d28:	f107 030c 	add.w	r3, r7, #12
 8011d2c:	2203      	movs	r2, #3
 8011d2e:	69b9      	ldr	r1, [r7, #24]
 8011d30:	6878      	ldr	r0, [r7, #4]
 8011d32:	f001 fe59 	bl	80139e8 <dhcp_create_msg>
 8011d36:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011d38:	697b      	ldr	r3, [r7, #20]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	f000 8088 	beq.w	8011e50 <dhcp_select+0x194>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011d40:	697b      	ldr	r3, [r7, #20]
 8011d42:	685b      	ldr	r3, [r3, #4]
 8011d44:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011d46:	89b8      	ldrh	r0, [r7, #12]
 8011d48:	693b      	ldr	r3, [r7, #16]
 8011d4a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011d4e:	2302      	movs	r3, #2
 8011d50:	2239      	movs	r2, #57	@ 0x39
 8011d52:	f001 f947 	bl	8012fe4 <dhcp_option>
 8011d56:	4603      	mov	r3, r0
 8011d58:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011d5a:	89b8      	ldrh	r0, [r7, #12]
 8011d5c:	693b      	ldr	r3, [r7, #16]
 8011d5e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011d66:	461a      	mov	r2, r3
 8011d68:	f001 f996 	bl	8013098 <dhcp_option_short>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8011d70:	89b8      	ldrh	r0, [r7, #12]
 8011d72:	693b      	ldr	r3, [r7, #16]
 8011d74:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011d78:	2304      	movs	r3, #4
 8011d7a:	2232      	movs	r2, #50	@ 0x32
 8011d7c:	f001 f932 	bl	8012fe4 <dhcp_option>
 8011d80:	4603      	mov	r3, r0
 8011d82:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8011d84:	89bc      	ldrh	r4, [r7, #12]
 8011d86:	693b      	ldr	r3, [r7, #16]
 8011d88:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8011d8c:	69bb      	ldr	r3, [r7, #24]
 8011d8e:	69db      	ldr	r3, [r3, #28]
 8011d90:	4618      	mov	r0, r3
 8011d92:	f7f7 fb66 	bl	8009462 <lwip_htonl>
 8011d96:	4603      	mov	r3, r0
 8011d98:	461a      	mov	r2, r3
 8011d9a:	4629      	mov	r1, r5
 8011d9c:	4620      	mov	r0, r4
 8011d9e:	f001 f9ad 	bl	80130fc <dhcp_option_long>
 8011da2:	4603      	mov	r3, r0
 8011da4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8011da6:	89b8      	ldrh	r0, [r7, #12]
 8011da8:	693b      	ldr	r3, [r7, #16]
 8011daa:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011dae:	2304      	movs	r3, #4
 8011db0:	2236      	movs	r2, #54	@ 0x36
 8011db2:	f001 f917 	bl	8012fe4 <dhcp_option>
 8011db6:	4603      	mov	r3, r0
 8011db8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8011dba:	89bc      	ldrh	r4, [r7, #12]
 8011dbc:	693b      	ldr	r3, [r7, #16]
 8011dbe:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8011dc2:	69bb      	ldr	r3, [r7, #24]
 8011dc4:	699b      	ldr	r3, [r3, #24]
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	f7f7 fb4b 	bl	8009462 <lwip_htonl>
 8011dcc:	4603      	mov	r3, r0
 8011dce:	461a      	mov	r2, r3
 8011dd0:	4629      	mov	r1, r5
 8011dd2:	4620      	mov	r0, r4
 8011dd4:	f001 f992 	bl	80130fc <dhcp_option_long>
 8011dd8:	4603      	mov	r3, r0
 8011dda:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011ddc:	89b8      	ldrh	r0, [r7, #12]
 8011dde:	693b      	ldr	r3, [r7, #16]
 8011de0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011de4:	2303      	movs	r3, #3
 8011de6:	2237      	movs	r2, #55	@ 0x37
 8011de8:	f001 f8fc 	bl	8012fe4 <dhcp_option>
 8011dec:	4603      	mov	r3, r0
 8011dee:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011df0:	2300      	movs	r3, #0
 8011df2:	77bb      	strb	r3, [r7, #30]
 8011df4:	e00e      	b.n	8011e14 <dhcp_select+0x158>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011df6:	89b8      	ldrh	r0, [r7, #12]
 8011df8:	693b      	ldr	r3, [r7, #16]
 8011dfa:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011dfe:	7fbb      	ldrb	r3, [r7, #30]
 8011e00:	4a36      	ldr	r2, [pc, #216]	@ (8011edc <dhcp_select+0x220>)
 8011e02:	5cd3      	ldrb	r3, [r2, r3]
 8011e04:	461a      	mov	r2, r3
 8011e06:	f001 f921 	bl	801304c <dhcp_option_byte>
 8011e0a:	4603      	mov	r3, r0
 8011e0c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011e0e:	7fbb      	ldrb	r3, [r7, #30]
 8011e10:	3301      	adds	r3, #1
 8011e12:	77bb      	strb	r3, [r7, #30]
 8011e14:	7fbb      	ldrb	r3, [r7, #30]
 8011e16:	2b02      	cmp	r3, #2
 8011e18:	d9ed      	bls.n	8011df6 <dhcp_select+0x13a>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011e1a:	89b8      	ldrh	r0, [r7, #12]
 8011e1c:	693b      	ldr	r3, [r7, #16]
 8011e1e:	33f0      	adds	r3, #240	@ 0xf0
 8011e20:	697a      	ldr	r2, [r7, #20]
 8011e22:	4619      	mov	r1, r3
 8011e24:	f001 fec4 	bl	8013bb0 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8011e28:	4b2d      	ldr	r3, [pc, #180]	@ (8011ee0 <dhcp_select+0x224>)
 8011e2a:	6818      	ldr	r0, [r3, #0]
 8011e2c:	4b2d      	ldr	r3, [pc, #180]	@ (8011ee4 <dhcp_select+0x228>)
 8011e2e:	9301      	str	r3, [sp, #4]
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	9300      	str	r3, [sp, #0]
 8011e34:	2343      	movs	r3, #67	@ 0x43
 8011e36:	4a2c      	ldr	r2, [pc, #176]	@ (8011ee8 <dhcp_select+0x22c>)
 8011e38:	6979      	ldr	r1, [r7, #20]
 8011e3a:	f7ff fa63 	bl	8011304 <udp_sendto_if_src>
 8011e3e:	4603      	mov	r3, r0
 8011e40:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011e42:	6978      	ldr	r0, [r7, #20]
 8011e44:	f7f8 ff76 	bl	800ad34 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
 8011e48:	4828      	ldr	r0, [pc, #160]	@ (8011eec <dhcp_select+0x230>)
 8011e4a:	f004 ffa7 	bl	8016d9c <puts>
 8011e4e:	e004      	b.n	8011e5a <dhcp_select+0x19e>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
 8011e50:	4827      	ldr	r0, [pc, #156]	@ (8011ef0 <dhcp_select+0x234>)
 8011e52:	f004 ffa3 	bl	8016d9c <puts>
    result = ERR_MEM;
 8011e56:	23ff      	movs	r3, #255	@ 0xff
 8011e58:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011e5a:	69bb      	ldr	r3, [r7, #24]
 8011e5c:	799b      	ldrb	r3, [r3, #6]
 8011e5e:	2bff      	cmp	r3, #255	@ 0xff
 8011e60:	d005      	beq.n	8011e6e <dhcp_select+0x1b2>
    dhcp->tries++;
 8011e62:	69bb      	ldr	r3, [r7, #24]
 8011e64:	799b      	ldrb	r3, [r3, #6]
 8011e66:	3301      	adds	r3, #1
 8011e68:	b2da      	uxtb	r2, r3
 8011e6a:	69bb      	ldr	r3, [r7, #24]
 8011e6c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8011e6e:	69bb      	ldr	r3, [r7, #24]
 8011e70:	799b      	ldrb	r3, [r3, #6]
 8011e72:	2b05      	cmp	r3, #5
 8011e74:	d80d      	bhi.n	8011e92 <dhcp_select+0x1d6>
 8011e76:	69bb      	ldr	r3, [r7, #24]
 8011e78:	799b      	ldrb	r3, [r3, #6]
 8011e7a:	461a      	mov	r2, r3
 8011e7c:	2301      	movs	r3, #1
 8011e7e:	4093      	lsls	r3, r2
 8011e80:	b29b      	uxth	r3, r3
 8011e82:	461a      	mov	r2, r3
 8011e84:	0152      	lsls	r2, r2, #5
 8011e86:	1ad2      	subs	r2, r2, r3
 8011e88:	0092      	lsls	r2, r2, #2
 8011e8a:	4413      	add	r3, r2
 8011e8c:	00db      	lsls	r3, r3, #3
 8011e8e:	b29b      	uxth	r3, r3
 8011e90:	e001      	b.n	8011e96 <dhcp_select+0x1da>
 8011e92:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8011e96:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011e98:	89fb      	ldrh	r3, [r7, #14]
 8011e9a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8011e9e:	4a15      	ldr	r2, [pc, #84]	@ (8011ef4 <dhcp_select+0x238>)
 8011ea0:	fb82 1203 	smull	r1, r2, r2, r3
 8011ea4:	1152      	asrs	r2, r2, #5
 8011ea6:	17db      	asrs	r3, r3, #31
 8011ea8:	1ad3      	subs	r3, r2, r3
 8011eaa:	b29a      	uxth	r2, r3
 8011eac:	69bb      	ldr	r3, [r7, #24]
 8011eae:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
 8011eb0:	89fb      	ldrh	r3, [r7, #14]
 8011eb2:	4619      	mov	r1, r3
 8011eb4:	4810      	ldr	r0, [pc, #64]	@ (8011ef8 <dhcp_select+0x23c>)
 8011eb6:	f004 ff01 	bl	8016cbc <iprintf>
  return result;
 8011eba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	3720      	adds	r7, #32
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	bdb0      	pop	{r4, r5, r7, pc}
 8011ec6:	bf00      	nop
 8011ec8:	0801b394 	.word	0x0801b394
 8011ecc:	0801b584 	.word	0x0801b584
 8011ed0:	0801b3f4 	.word	0x0801b3f4
 8011ed4:	0801b5a0 	.word	0x0801b5a0
 8011ed8:	0801b5bc 	.word	0x0801b5bc
 8011edc:	24000088 	.word	0x24000088
 8011ee0:	2400337c 	.word	0x2400337c
 8011ee4:	0801dc64 	.word	0x0801dc64
 8011ee8:	0801dc68 	.word	0x0801dc68
 8011eec:	0801b5dc 	.word	0x0801b5dc
 8011ef0:	0801b5f4 	.word	0x0801b5f4
 8011ef4:	10624dd3 	.word	0x10624dd3
 8011ef8:	0801b624 	.word	0x0801b624

08011efc <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b082      	sub	sp, #8
 8011f00:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
 8011f02:	482d      	ldr	r0, [pc, #180]	@ (8011fb8 <dhcp_coarse_tmr+0xbc>)
 8011f04:	f004 ff4a 	bl	8016d9c <puts>
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8011f08:	4b2c      	ldr	r3, [pc, #176]	@ (8011fbc <dhcp_coarse_tmr+0xc0>)
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	607b      	str	r3, [r7, #4]
 8011f0e:	e04b      	b.n	8011fa8 <dhcp_coarse_tmr+0xac>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f14:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8011f16:	683b      	ldr	r3, [r7, #0]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d042      	beq.n	8011fa2 <dhcp_coarse_tmr+0xa6>
 8011f1c:	683b      	ldr	r3, [r7, #0]
 8011f1e:	795b      	ldrb	r3, [r3, #5]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d03e      	beq.n	8011fa2 <dhcp_coarse_tmr+0xa6>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8011f24:	683b      	ldr	r3, [r7, #0]
 8011f26:	8a9b      	ldrh	r3, [r3, #20]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d015      	beq.n	8011f58 <dhcp_coarse_tmr+0x5c>
 8011f2c:	683b      	ldr	r3, [r7, #0]
 8011f2e:	8a5b      	ldrh	r3, [r3, #18]
 8011f30:	3301      	adds	r3, #1
 8011f32:	b29a      	uxth	r2, r3
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	825a      	strh	r2, [r3, #18]
 8011f38:	683b      	ldr	r3, [r7, #0]
 8011f3a:	8a5a      	ldrh	r2, [r3, #18]
 8011f3c:	683b      	ldr	r3, [r7, #0]
 8011f3e:	8a9b      	ldrh	r3, [r3, #20]
 8011f40:	429a      	cmp	r2, r3
 8011f42:	d109      	bne.n	8011f58 <dhcp_coarse_tmr+0x5c>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
 8011f44:	481e      	ldr	r0, [pc, #120]	@ (8011fc0 <dhcp_coarse_tmr+0xc4>)
 8011f46:	f004 ff29 	bl	8016d9c <puts>
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8011f4a:	6878      	ldr	r0, [r7, #4]
 8011f4c:	f000 ff86 	bl	8012e5c <dhcp_release_and_stop>
        dhcp_start(netif);
 8011f50:	6878      	ldr	r0, [r7, #4]
 8011f52:	f000 f9ad 	bl	80122b0 <dhcp_start>
 8011f56:	e024      	b.n	8011fa2 <dhcp_coarse_tmr+0xa6>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8011f58:	683b      	ldr	r3, [r7, #0]
 8011f5a:	8a1b      	ldrh	r3, [r3, #16]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d00e      	beq.n	8011f7e <dhcp_coarse_tmr+0x82>
 8011f60:	683b      	ldr	r3, [r7, #0]
 8011f62:	8a1b      	ldrh	r3, [r3, #16]
 8011f64:	1e5a      	subs	r2, r3, #1
 8011f66:	b291      	uxth	r1, r2
 8011f68:	683a      	ldr	r2, [r7, #0]
 8011f6a:	8211      	strh	r1, [r2, #16]
 8011f6c:	2b01      	cmp	r3, #1
 8011f6e:	d106      	bne.n	8011f7e <dhcp_coarse_tmr+0x82>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
 8011f70:	4814      	ldr	r0, [pc, #80]	@ (8011fc4 <dhcp_coarse_tmr+0xc8>)
 8011f72:	f004 ff13 	bl	8016d9c <puts>
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8011f76:	6878      	ldr	r0, [r7, #4]
 8011f78:	f000 f8fc 	bl	8012174 <dhcp_t2_timeout>
 8011f7c:	e011      	b.n	8011fa2 <dhcp_coarse_tmr+0xa6>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8011f7e:	683b      	ldr	r3, [r7, #0]
 8011f80:	89db      	ldrh	r3, [r3, #14]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d00d      	beq.n	8011fa2 <dhcp_coarse_tmr+0xa6>
 8011f86:	683b      	ldr	r3, [r7, #0]
 8011f88:	89db      	ldrh	r3, [r3, #14]
 8011f8a:	1e5a      	subs	r2, r3, #1
 8011f8c:	b291      	uxth	r1, r2
 8011f8e:	683a      	ldr	r2, [r7, #0]
 8011f90:	81d1      	strh	r1, [r2, #14]
 8011f92:	2b01      	cmp	r3, #1
 8011f94:	d105      	bne.n	8011fa2 <dhcp_coarse_tmr+0xa6>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
 8011f96:	480c      	ldr	r0, [pc, #48]	@ (8011fc8 <dhcp_coarse_tmr+0xcc>)
 8011f98:	f004 ff00 	bl	8016d9c <puts>
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8011f9c:	6878      	ldr	r0, [r7, #4]
 8011f9e:	f000 f8af 	bl	8012100 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	607b      	str	r3, [r7, #4]
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d1b0      	bne.n	8011f10 <dhcp_coarse_tmr+0x14>
      }
    }
  }
}
 8011fae:	bf00      	nop
 8011fb0:	bf00      	nop
 8011fb2:	3708      	adds	r7, #8
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	bd80      	pop	{r7, pc}
 8011fb8:	0801b654 	.word	0x0801b654
 8011fbc:	240032e4 	.word	0x240032e4
 8011fc0:	0801b668 	.word	0x0801b668
 8011fc4:	0801b688 	.word	0x0801b688
 8011fc8:	0801b6a8 	.word	0x0801b6a8

08011fcc <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b082      	sub	sp, #8
 8011fd0:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8011fd2:	4b18      	ldr	r3, [pc, #96]	@ (8012034 <dhcp_fine_tmr+0x68>)
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	607b      	str	r3, [r7, #4]
 8011fd8:	e023      	b.n	8012022 <dhcp_fine_tmr+0x56>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fde:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8011fe0:	683b      	ldr	r3, [r7, #0]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d01a      	beq.n	801201c <dhcp_fine_tmr+0x50>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	891b      	ldrh	r3, [r3, #8]
 8011fea:	2b01      	cmp	r3, #1
 8011fec:	d906      	bls.n	8011ffc <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8011fee:	683b      	ldr	r3, [r7, #0]
 8011ff0:	891b      	ldrh	r3, [r3, #8]
 8011ff2:	3b01      	subs	r3, #1
 8011ff4:	b29a      	uxth	r2, r3
 8011ff6:	683b      	ldr	r3, [r7, #0]
 8011ff8:	811a      	strh	r2, [r3, #8]
 8011ffa:	e00f      	b.n	801201c <dhcp_fine_tmr+0x50>
      } else if (dhcp->request_timeout == 1) {
 8011ffc:	683b      	ldr	r3, [r7, #0]
 8011ffe:	891b      	ldrh	r3, [r3, #8]
 8012000:	2b01      	cmp	r3, #1
 8012002:	d10b      	bne.n	801201c <dhcp_fine_tmr+0x50>
        dhcp->request_timeout--;
 8012004:	683b      	ldr	r3, [r7, #0]
 8012006:	891b      	ldrh	r3, [r3, #8]
 8012008:	3b01      	subs	r3, #1
 801200a:	b29a      	uxth	r2, r3
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
 8012010:	4809      	ldr	r0, [pc, #36]	@ (8012038 <dhcp_fine_tmr+0x6c>)
 8012012:	f004 fec3 	bl	8016d9c <puts>
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8012016:	6878      	ldr	r0, [r7, #4]
 8012018:	f000 f810 	bl	801203c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	607b      	str	r3, [r7, #4]
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d1d8      	bne.n	8011fda <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8012028:	bf00      	nop
 801202a:	bf00      	nop
 801202c:	3708      	adds	r7, #8
 801202e:	46bd      	mov	sp, r7
 8012030:	bd80      	pop	{r7, pc}
 8012032:	bf00      	nop
 8012034:	240032e4 	.word	0x240032e4
 8012038:	0801b6c8 	.word	0x0801b6c8

0801203c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b084      	sub	sp, #16
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012048:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
 801204a:	4828      	ldr	r0, [pc, #160]	@ (80120ec <dhcp_timeout+0xb0>)
 801204c:	f004 fea6 	bl	8016d9c <puts>
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	795b      	ldrb	r3, [r3, #5]
 8012054:	2b0c      	cmp	r3, #12
 8012056:	d003      	beq.n	8012060 <dhcp_timeout+0x24>
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	795b      	ldrb	r3, [r3, #5]
 801205c:	2b06      	cmp	r3, #6
 801205e:	d106      	bne.n	801206e <dhcp_timeout+0x32>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
 8012060:	4823      	ldr	r0, [pc, #140]	@ (80120f0 <dhcp_timeout+0xb4>)
 8012062:	f004 fe9b 	bl	8016d9c <puts>
    dhcp_discover(netif);
 8012066:	6878      	ldr	r0, [r7, #4]
 8012068:	f000 fad8 	bl	801261c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801206c:	e03a      	b.n	80120e4 <dhcp_timeout+0xa8>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	795b      	ldrb	r3, [r3, #5]
 8012072:	2b01      	cmp	r3, #1
 8012074:	d114      	bne.n	80120a0 <dhcp_timeout+0x64>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP request timed out\n"));
 8012076:	481f      	ldr	r0, [pc, #124]	@ (80120f4 <dhcp_timeout+0xb8>)
 8012078:	f004 fe90 	bl	8016d9c <puts>
    if (dhcp->tries <= 5) {
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	799b      	ldrb	r3, [r3, #6]
 8012080:	2b05      	cmp	r3, #5
 8012082:	d803      	bhi.n	801208c <dhcp_timeout+0x50>
      dhcp_select(netif);
 8012084:	6878      	ldr	r0, [r7, #4]
 8012086:	f7ff fe19 	bl	8011cbc <dhcp_select>
}
 801208a:	e02b      	b.n	80120e4 <dhcp_timeout+0xa8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, releasing, restarting\n"));
 801208c:	481a      	ldr	r0, [pc, #104]	@ (80120f8 <dhcp_timeout+0xbc>)
 801208e:	f004 fe85 	bl	8016d9c <puts>
      dhcp_release_and_stop(netif);
 8012092:	6878      	ldr	r0, [r7, #4]
 8012094:	f000 fee2 	bl	8012e5c <dhcp_release_and_stop>
      dhcp_start(netif);
 8012098:	6878      	ldr	r0, [r7, #4]
 801209a:	f000 f909 	bl	80122b0 <dhcp_start>
}
 801209e:	e021      	b.n	80120e4 <dhcp_timeout+0xa8>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	795b      	ldrb	r3, [r3, #5]
 80120a4:	2b08      	cmp	r3, #8
 80120a6:	d10e      	bne.n	80120c6 <dhcp_timeout+0x8a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): CHECKING, ARP request timed out\n"));
 80120a8:	4814      	ldr	r0, [pc, #80]	@ (80120fc <dhcp_timeout+0xc0>)
 80120aa:	f004 fe77 	bl	8016d9c <puts>
    if (dhcp->tries <= 1) {
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	799b      	ldrb	r3, [r3, #6]
 80120b2:	2b01      	cmp	r3, #1
 80120b4:	d803      	bhi.n	80120be <dhcp_timeout+0x82>
      dhcp_check(netif);
 80120b6:	6878      	ldr	r0, [r7, #4]
 80120b8:	f7ff fd60 	bl	8011b7c <dhcp_check>
}
 80120bc:	e012      	b.n	80120e4 <dhcp_timeout+0xa8>
      dhcp_bind(netif);
 80120be:	6878      	ldr	r0, [r7, #4]
 80120c0:	f000 fb74 	bl	80127ac <dhcp_bind>
}
 80120c4:	e00e      	b.n	80120e4 <dhcp_timeout+0xa8>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	795b      	ldrb	r3, [r3, #5]
 80120ca:	2b03      	cmp	r3, #3
 80120cc:	d10a      	bne.n	80120e4 <dhcp_timeout+0xa8>
    if (dhcp->tries < REBOOT_TRIES) {
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	799b      	ldrb	r3, [r3, #6]
 80120d2:	2b01      	cmp	r3, #1
 80120d4:	d803      	bhi.n	80120de <dhcp_timeout+0xa2>
      dhcp_reboot(netif);
 80120d6:	6878      	ldr	r0, [r7, #4]
 80120d8:	f000 fdf6 	bl	8012cc8 <dhcp_reboot>
}
 80120dc:	e002      	b.n	80120e4 <dhcp_timeout+0xa8>
      dhcp_discover(netif);
 80120de:	6878      	ldr	r0, [r7, #4]
 80120e0:	f000 fa9c 	bl	801261c <dhcp_discover>
}
 80120e4:	bf00      	nop
 80120e6:	3710      	adds	r7, #16
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bd80      	pop	{r7, pc}
 80120ec:	0801b6ec 	.word	0x0801b6ec
 80120f0:	0801b6fc 	.word	0x0801b6fc
 80120f4:	0801b724 	.word	0x0801b724
 80120f8:	0801b758 	.word	0x0801b758
 80120fc:	0801b78c 	.word	0x0801b78c

08012100 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b084      	sub	sp, #16
 8012104:	af00      	add	r7, sp, #0
 8012106:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801210c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
 801210e:	4817      	ldr	r0, [pc, #92]	@ (801216c <dhcp_t1_timeout+0x6c>)
 8012110:	f004 fe44 	bl	8016d9c <puts>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	795b      	ldrb	r3, [r3, #5]
 8012118:	2b01      	cmp	r3, #1
 801211a:	d007      	beq.n	801212c <dhcp_t1_timeout+0x2c>
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	795b      	ldrb	r3, [r3, #5]
 8012120:	2b0a      	cmp	r3, #10
 8012122:	d003      	beq.n	801212c <dhcp_t1_timeout+0x2c>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012128:	2b05      	cmp	r3, #5
 801212a:	d11a      	bne.n	8012162 <dhcp_t1_timeout+0x62>
    /* just retry to renew - note that the rebind timer (t2) will
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
 801212c:	4810      	ldr	r0, [pc, #64]	@ (8012170 <dhcp_t1_timeout+0x70>)
 801212e:	f004 fe35 	bl	8016d9c <puts>
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8012132:	6878      	ldr	r0, [r7, #4]
 8012134:	f000 fc68 	bl	8012a08 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	899b      	ldrh	r3, [r3, #12]
 801213c:	461a      	mov	r2, r3
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	8a5b      	ldrh	r3, [r3, #18]
 8012142:	1ad3      	subs	r3, r2, r3
 8012144:	2b01      	cmp	r3, #1
 8012146:	dd0c      	ble.n	8012162 <dhcp_t1_timeout+0x62>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	899b      	ldrh	r3, [r3, #12]
 801214c:	461a      	mov	r2, r3
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	8a5b      	ldrh	r3, [r3, #18]
 8012152:	1ad3      	subs	r3, r2, r3
 8012154:	2b00      	cmp	r3, #0
 8012156:	da00      	bge.n	801215a <dhcp_t1_timeout+0x5a>
 8012158:	3301      	adds	r3, #1
 801215a:	105b      	asrs	r3, r3, #1
 801215c:	b29a      	uxth	r2, r3
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8012162:	bf00      	nop
 8012164:	3710      	adds	r7, #16
 8012166:	46bd      	mov	sp, r7
 8012168:	bd80      	pop	{r7, pc}
 801216a:	bf00      	nop
 801216c:	0801b7bc 	.word	0x0801b7bc
 8012170:	0801b7d0 	.word	0x0801b7d0

08012174 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b084      	sub	sp, #16
 8012178:	af00      	add	r7, sp, #0
 801217a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012180:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
 8012182:	4819      	ldr	r0, [pc, #100]	@ (80121e8 <dhcp_t2_timeout+0x74>)
 8012184:	f004 fe0a 	bl	8016d9c <puts>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	795b      	ldrb	r3, [r3, #5]
 801218c:	2b01      	cmp	r3, #1
 801218e:	d00b      	beq.n	80121a8 <dhcp_t2_timeout+0x34>
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	795b      	ldrb	r3, [r3, #5]
 8012194:	2b0a      	cmp	r3, #10
 8012196:	d007      	beq.n	80121a8 <dhcp_t2_timeout+0x34>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801219c:	2b05      	cmp	r3, #5
 801219e:	d003      	beq.n	80121a8 <dhcp_t2_timeout+0x34>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	795b      	ldrb	r3, [r3, #5]
 80121a4:	2b04      	cmp	r3, #4
 80121a6:	d11a      	bne.n	80121de <dhcp_t2_timeout+0x6a>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
 80121a8:	4810      	ldr	r0, [pc, #64]	@ (80121ec <dhcp_t2_timeout+0x78>)
 80121aa:	f004 fdf7 	bl	8016d9c <puts>
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80121ae:	6878      	ldr	r0, [r7, #4]
 80121b0:	f000 fcda 	bl	8012b68 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	8a9b      	ldrh	r3, [r3, #20]
 80121b8:	461a      	mov	r2, r3
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	8a5b      	ldrh	r3, [r3, #18]
 80121be:	1ad3      	subs	r3, r2, r3
 80121c0:	2b01      	cmp	r3, #1
 80121c2:	dd0c      	ble.n	80121de <dhcp_t2_timeout+0x6a>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	8a9b      	ldrh	r3, [r3, #20]
 80121c8:	461a      	mov	r2, r3
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	8a5b      	ldrh	r3, [r3, #18]
 80121ce:	1ad3      	subs	r3, r2, r3
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	da00      	bge.n	80121d6 <dhcp_t2_timeout+0x62>
 80121d4:	3301      	adds	r3, #1
 80121d6:	105b      	asrs	r3, r3, #1
 80121d8:	b29a      	uxth	r2, r3
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80121de:	bf00      	nop
 80121e0:	3710      	adds	r7, #16
 80121e2:	46bd      	mov	sp, r7
 80121e4:	bd80      	pop	{r7, pc}
 80121e6:	bf00      	nop
 80121e8:	0801b7f0 	.word	0x0801b7f0
 80121ec:	0801b804 	.word	0x0801b804

080121f0 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b084      	sub	sp, #16
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6078      	str	r0, [r7, #4]
 80121f8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121fe:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	2200      	movs	r2, #0
 8012204:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	2200      	movs	r2, #0
 801220a:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801220c:	4b26      	ldr	r3, [pc, #152]	@ (80122a8 <dhcp_handle_ack+0xb8>)
 801220e:	78db      	ldrb	r3, [r3, #3]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d003      	beq.n	801221c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8012214:	4b25      	ldr	r3, [pc, #148]	@ (80122ac <dhcp_handle_ack+0xbc>)
 8012216:	68da      	ldr	r2, [r3, #12]
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801221c:	4b22      	ldr	r3, [pc, #136]	@ (80122a8 <dhcp_handle_ack+0xb8>)
 801221e:	791b      	ldrb	r3, [r3, #4]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d004      	beq.n	801222e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8012224:	4b21      	ldr	r3, [pc, #132]	@ (80122ac <dhcp_handle_ack+0xbc>)
 8012226:	691a      	ldr	r2, [r3, #16]
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801222c:	e004      	b.n	8012238 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012232:	085a      	lsrs	r2, r3, #1
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8012238:	4b1b      	ldr	r3, [pc, #108]	@ (80122a8 <dhcp_handle_ack+0xb8>)
 801223a:	795b      	ldrb	r3, [r3, #5]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d004      	beq.n	801224a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8012240:	4b1a      	ldr	r3, [pc, #104]	@ (80122ac <dhcp_handle_ack+0xbc>)
 8012242:	695a      	ldr	r2, [r3, #20]
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	631a      	str	r2, [r3, #48]	@ 0x30
 8012248:	e007      	b.n	801225a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801224e:	4613      	mov	r3, r2
 8012250:	00db      	lsls	r3, r3, #3
 8012252:	1a9b      	subs	r3, r3, r2
 8012254:	08da      	lsrs	r2, r3, #3
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801225a:	683b      	ldr	r3, [r7, #0]
 801225c:	691a      	ldr	r2, [r3, #16]
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8012262:	4b11      	ldr	r3, [pc, #68]	@ (80122a8 <dhcp_handle_ack+0xb8>)
 8012264:	799b      	ldrb	r3, [r3, #6]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d00b      	beq.n	8012282 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801226a:	4b10      	ldr	r3, [pc, #64]	@ (80122ac <dhcp_handle_ack+0xbc>)
 801226c:	699b      	ldr	r3, [r3, #24]
 801226e:	4618      	mov	r0, r3
 8012270:	f7f7 f8f7 	bl	8009462 <lwip_htonl>
 8012274:	4602      	mov	r2, r0
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	2201      	movs	r2, #1
 801227e:	71da      	strb	r2, [r3, #7]
 8012280:	e002      	b.n	8012288 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	2200      	movs	r2, #0
 8012286:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8012288:	4b07      	ldr	r3, [pc, #28]	@ (80122a8 <dhcp_handle_ack+0xb8>)
 801228a:	79db      	ldrb	r3, [r3, #7]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d007      	beq.n	80122a0 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8012290:	4b06      	ldr	r3, [pc, #24]	@ (80122ac <dhcp_handle_ack+0xbc>)
 8012292:	69db      	ldr	r3, [r3, #28]
 8012294:	4618      	mov	r0, r3
 8012296:	f7f7 f8e4 	bl	8009462 <lwip_htonl>
 801229a:	4602      	mov	r2, r0
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80122a0:	bf00      	nop
 80122a2:	3710      	adds	r7, #16
 80122a4:	46bd      	mov	sp, r7
 80122a6:	bd80      	pop	{r7, pc}
 80122a8:	24003374 	.word	0x24003374
 80122ac:	24003354 	.word	0x24003354

080122b0 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b086      	sub	sp, #24
 80122b4:	af02      	add	r7, sp, #8
 80122b6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d109      	bne.n	80122d2 <dhcp_start+0x22>
 80122be:	4b49      	ldr	r3, [pc, #292]	@ (80123e4 <dhcp_start+0x134>)
 80122c0:	f240 22e7 	movw	r2, #743	@ 0x2e7
 80122c4:	4948      	ldr	r1, [pc, #288]	@ (80123e8 <dhcp_start+0x138>)
 80122c6:	4849      	ldr	r0, [pc, #292]	@ (80123ec <dhcp_start+0x13c>)
 80122c8:	f004 fcf8 	bl	8016cbc <iprintf>
 80122cc:	f06f 030f 	mvn.w	r3, #15
 80122d0:	e083      	b.n	80123da <dhcp_start+0x12a>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80122d8:	f003 0301 	and.w	r3, r3, #1
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d109      	bne.n	80122f4 <dhcp_start+0x44>
 80122e0:	4b40      	ldr	r3, [pc, #256]	@ (80123e4 <dhcp_start+0x134>)
 80122e2:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 80122e6:	4942      	ldr	r1, [pc, #264]	@ (80123f0 <dhcp_start+0x140>)
 80122e8:	4840      	ldr	r0, [pc, #256]	@ (80123ec <dhcp_start+0x13c>)
 80122ea:	f004 fce7 	bl	8016cbc <iprintf>
 80122ee:	f06f 030f 	mvn.w	r3, #15
 80122f2:	e072      	b.n	80123da <dhcp_start+0x12a>
  dhcp = netif_dhcp_data(netif);
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122f8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8012300:	461a      	mov	r2, r3
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012308:	4619      	mov	r1, r3
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012310:	9300      	str	r3, [sp, #0]
 8012312:	460b      	mov	r3, r1
 8012314:	6879      	ldr	r1, [r7, #4]
 8012316:	4837      	ldr	r0, [pc, #220]	@ (80123f4 <dhcp_start+0x144>)
 8012318:	f004 fcd0 	bl	8016cbc <iprintf>

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012320:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8012324:	d205      	bcs.n	8012332 <dhcp_start+0x82>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
 8012326:	4834      	ldr	r0, [pc, #208]	@ (80123f8 <dhcp_start+0x148>)
 8012328:	f004 fd38 	bl	8016d9c <puts>
    return ERR_MEM;
 801232c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012330:	e053      	b.n	80123da <dhcp_start+0x12a>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d116      	bne.n	8012366 <dhcp_start+0xb6>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
 8012338:	4830      	ldr	r0, [pc, #192]	@ (80123fc <dhcp_start+0x14c>)
 801233a:	f004 fd2f 	bl	8016d9c <puts>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801233e:	2034      	movs	r0, #52	@ 0x34
 8012340:	f7f7 fc26 	bl	8009b90 <mem_malloc>
 8012344:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d105      	bne.n	8012358 <dhcp_start+0xa8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
 801234c:	482c      	ldr	r0, [pc, #176]	@ (8012400 <dhcp_start+0x150>)
 801234e:	f004 fd25 	bl	8016d9c <puts>
      return ERR_MEM;
 8012352:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012356:	e040      	b.n	80123da <dhcp_start+0x12a>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	68fa      	ldr	r2, [r7, #12]
 801235c:	625a      	str	r2, [r3, #36]	@ 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
 801235e:	4829      	ldr	r0, [pc, #164]	@ (8012404 <dhcp_start+0x154>)
 8012360:	f004 fcac 	bl	8016cbc <iprintf>
 8012364:	e008      	b.n	8012378 <dhcp_start+0xc8>
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
 8012366:	4828      	ldr	r0, [pc, #160]	@ (8012408 <dhcp_start+0x158>)
 8012368:	f004 fd18 	bl	8016d9c <puts>

    if (dhcp->pcb_allocated != 0) {
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	791b      	ldrb	r3, [r3, #4]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d001      	beq.n	8012378 <dhcp_start+0xc8>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8012374:	f7ff fbaa 	bl	8011acc <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8012378:	2234      	movs	r2, #52	@ 0x34
 801237a:	2100      	movs	r1, #0
 801237c:	68f8      	ldr	r0, [r7, #12]
 801237e:	f004 fdfd 	bl	8016f7c <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));
 8012382:	4822      	ldr	r0, [pc, #136]	@ (801240c <dhcp_start+0x15c>)
 8012384:	f004 fd0a 	bl	8016d9c <puts>

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8012388:	f7ff fb4e 	bl	8011a28 <dhcp_inc_pcb_refcount>
 801238c:	4603      	mov	r3, r0
 801238e:	2b00      	cmp	r3, #0
 8012390:	d002      	beq.n	8012398 <dhcp_start+0xe8>
    return ERR_MEM;
 8012392:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012396:	e020      	b.n	80123da <dhcp_start+0x12a>
  }
  dhcp->pcb_allocated = 1;
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	2201      	movs	r2, #1
 801239c:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80123a4:	f003 0304 	and.w	r3, r3, #4
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d105      	bne.n	80123b8 <dhcp_start+0x108>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80123ac:	2102      	movs	r1, #2
 80123ae:	68f8      	ldr	r0, [r7, #12]
 80123b0:	f000 fdfe 	bl	8012fb0 <dhcp_set_state>
    return ERR_OK;
 80123b4:	2300      	movs	r3, #0
 80123b6:	e010      	b.n	80123da <dhcp_start+0x12a>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80123b8:	6878      	ldr	r0, [r7, #4]
 80123ba:	f000 f92f 	bl	801261c <dhcp_discover>
 80123be:	4603      	mov	r3, r0
 80123c0:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80123c2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d005      	beq.n	80123d6 <dhcp_start+0x126>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80123ca:	6878      	ldr	r0, [r7, #4]
 80123cc:	f000 fd46 	bl	8012e5c <dhcp_release_and_stop>
    return ERR_MEM;
 80123d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80123d4:	e001      	b.n	80123da <dhcp_start+0x12a>
  }
  return result;
 80123d6:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80123da:	4618      	mov	r0, r3
 80123dc:	3710      	adds	r7, #16
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd80      	pop	{r7, pc}
 80123e2:	bf00      	nop
 80123e4:	0801b394 	.word	0x0801b394
 80123e8:	0801b824 	.word	0x0801b824
 80123ec:	0801b3f4 	.word	0x0801b3f4
 80123f0:	0801b868 	.word	0x0801b868
 80123f4:	0801b88c 	.word	0x0801b88c
 80123f8:	0801b8ac 	.word	0x0801b8ac
 80123fc:	0801b8ec 	.word	0x0801b8ec
 8012400:	0801b914 	.word	0x0801b914
 8012404:	0801b93c 	.word	0x0801b93c
 8012408:	0801b95c 	.word	0x0801b95c
 801240c:	0801b988 	.word	0x0801b988

08012410 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b084      	sub	sp, #16
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801241c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d025      	beq.n	8012470 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	795b      	ldrb	r3, [r3, #5]
 8012428:	2b0a      	cmp	r3, #10
 801242a:	d008      	beq.n	801243e <dhcp_network_changed+0x2e>
 801242c:	2b0a      	cmp	r3, #10
 801242e:	dc0d      	bgt.n	801244c <dhcp_network_changed+0x3c>
 8012430:	2b00      	cmp	r3, #0
 8012432:	d01f      	beq.n	8012474 <dhcp_network_changed+0x64>
 8012434:	2b00      	cmp	r3, #0
 8012436:	db09      	blt.n	801244c <dhcp_network_changed+0x3c>
 8012438:	3b03      	subs	r3, #3
 801243a:	2b02      	cmp	r3, #2
 801243c:	d806      	bhi.n	801244c <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	2200      	movs	r2, #0
 8012442:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8012444:	6878      	ldr	r0, [r7, #4]
 8012446:	f000 fc3f 	bl	8012cc8 <dhcp_reboot>
      break;
 801244a:	e014      	b.n	8012476 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	795b      	ldrb	r3, [r3, #5]
 8012450:	2b0c      	cmp	r3, #12
 8012452:	d906      	bls.n	8012462 <dhcp_network_changed+0x52>
 8012454:	4b09      	ldr	r3, [pc, #36]	@ (801247c <dhcp_network_changed+0x6c>)
 8012456:	f240 326d 	movw	r2, #877	@ 0x36d
 801245a:	4909      	ldr	r1, [pc, #36]	@ (8012480 <dhcp_network_changed+0x70>)
 801245c:	4809      	ldr	r0, [pc, #36]	@ (8012484 <dhcp_network_changed+0x74>)
 801245e:	f004 fc2d 	bl	8016cbc <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	2200      	movs	r2, #0
 8012466:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8012468:	6878      	ldr	r0, [r7, #4]
 801246a:	f000 f8d7 	bl	801261c <dhcp_discover>
      break;
 801246e:	e002      	b.n	8012476 <dhcp_network_changed+0x66>
    return;
 8012470:	bf00      	nop
 8012472:	e000      	b.n	8012476 <dhcp_network_changed+0x66>
      break;
 8012474:	bf00      	nop
  }
}
 8012476:	3710      	adds	r7, #16
 8012478:	46bd      	mov	sp, r7
 801247a:	bd80      	pop	{r7, pc}
 801247c:	0801b394 	.word	0x0801b394
 8012480:	0801b9fc 	.word	0x0801b9fc
 8012484:	0801b3f4 	.word	0x0801b3f4

08012488 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8012488:	b580      	push	{r7, lr}
 801248a:	b084      	sub	sp, #16
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
 8012490:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d107      	bne.n	80124a8 <dhcp_arp_reply+0x20>
 8012498:	4b14      	ldr	r3, [pc, #80]	@ (80124ec <dhcp_arp_reply+0x64>)
 801249a:	f240 328b 	movw	r2, #907	@ 0x38b
 801249e:	4914      	ldr	r1, [pc, #80]	@ (80124f0 <dhcp_arp_reply+0x68>)
 80124a0:	4814      	ldr	r0, [pc, #80]	@ (80124f4 <dhcp_arp_reply+0x6c>)
 80124a2:	f004 fc0b 	bl	8016cbc <iprintf>
 80124a6:	e01e      	b.n	80124e6 <dhcp_arp_reply+0x5e>
  dhcp = netif_dhcp_data(netif);
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80124ac:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
 80124ae:	4812      	ldr	r0, [pc, #72]	@ (80124f8 <dhcp_arp_reply+0x70>)
 80124b0:	f004 fc74 	bl	8016d9c <puts>
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d015      	beq.n	80124e6 <dhcp_arp_reply+0x5e>
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	795b      	ldrb	r3, [r3, #5]
 80124be:	2b08      	cmp	r3, #8
 80124c0:	d111      	bne.n	80124e6 <dhcp_arp_reply+0x5e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
 80124c2:	683b      	ldr	r3, [r7, #0]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	4619      	mov	r1, r3
 80124c8:	480c      	ldr	r0, [pc, #48]	@ (80124fc <dhcp_arp_reply+0x74>)
 80124ca:	f004 fbf7 	bl	8016cbc <iprintf>
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80124ce:	683b      	ldr	r3, [r7, #0]
 80124d0:	681a      	ldr	r2, [r3, #0]
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	69db      	ldr	r3, [r3, #28]
 80124d6:	429a      	cmp	r2, r3
 80124d8:	d105      	bne.n	80124e6 <dhcp_arp_reply+0x5e>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
 80124da:	4809      	ldr	r0, [pc, #36]	@ (8012500 <dhcp_arp_reply+0x78>)
 80124dc:	f004 fc5e 	bl	8016d9c <puts>
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80124e0:	6878      	ldr	r0, [r7, #4]
 80124e2:	f000 f80f 	bl	8012504 <dhcp_decline>
    }
  }
}
 80124e6:	3710      	adds	r7, #16
 80124e8:	46bd      	mov	sp, r7
 80124ea:	bd80      	pop	{r7, pc}
 80124ec:	0801b394 	.word	0x0801b394
 80124f0:	0801b824 	.word	0x0801b824
 80124f4:	0801b3f4 	.word	0x0801b3f4
 80124f8:	0801ba10 	.word	0x0801ba10
 80124fc:	0801ba24 	.word	0x0801ba24
 8012500:	0801ba58 	.word	0x0801ba58

08012504 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8012504:	b5b0      	push	{r4, r5, r7, lr}
 8012506:	b08a      	sub	sp, #40	@ 0x28
 8012508:	af02      	add	r7, sp, #8
 801250a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012510:	61bb      	str	r3, [r7, #24]
  err_t result;
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
 8012512:	483a      	ldr	r0, [pc, #232]	@ (80125fc <dhcp_decline+0xf8>)
 8012514:	f004 fc42 	bl	8016d9c <puts>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012518:	210c      	movs	r1, #12
 801251a:	69b8      	ldr	r0, [r7, #24]
 801251c:	f000 fd48 	bl	8012fb0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8012520:	f107 030c 	add.w	r3, r7, #12
 8012524:	2204      	movs	r2, #4
 8012526:	69b9      	ldr	r1, [r7, #24]
 8012528:	6878      	ldr	r0, [r7, #4]
 801252a:	f001 fa5d 	bl	80139e8 <dhcp_create_msg>
 801252e:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012530:	697b      	ldr	r3, [r7, #20]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d038      	beq.n	80125a8 <dhcp_decline+0xa4>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012536:	697b      	ldr	r3, [r7, #20]
 8012538:	685b      	ldr	r3, [r3, #4]
 801253a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801253c:	89b8      	ldrh	r0, [r7, #12]
 801253e:	693b      	ldr	r3, [r7, #16]
 8012540:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012544:	2304      	movs	r3, #4
 8012546:	2232      	movs	r2, #50	@ 0x32
 8012548:	f000 fd4c 	bl	8012fe4 <dhcp_option>
 801254c:	4603      	mov	r3, r0
 801254e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012550:	89bc      	ldrh	r4, [r7, #12]
 8012552:	693b      	ldr	r3, [r7, #16]
 8012554:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8012558:	69bb      	ldr	r3, [r7, #24]
 801255a:	69db      	ldr	r3, [r3, #28]
 801255c:	4618      	mov	r0, r3
 801255e:	f7f6 ff80 	bl	8009462 <lwip_htonl>
 8012562:	4603      	mov	r3, r0
 8012564:	461a      	mov	r2, r3
 8012566:	4629      	mov	r1, r5
 8012568:	4620      	mov	r0, r4
 801256a:	f000 fdc7 	bl	80130fc <dhcp_option_long>
 801256e:	4603      	mov	r3, r0
 8012570:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012572:	89b8      	ldrh	r0, [r7, #12]
 8012574:	693b      	ldr	r3, [r7, #16]
 8012576:	33f0      	adds	r3, #240	@ 0xf0
 8012578:	697a      	ldr	r2, [r7, #20]
 801257a:	4619      	mov	r1, r3
 801257c:	f001 fb18 	bl	8013bb0 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012580:	4b1f      	ldr	r3, [pc, #124]	@ (8012600 <dhcp_decline+0xfc>)
 8012582:	6818      	ldr	r0, [r3, #0]
 8012584:	4b1f      	ldr	r3, [pc, #124]	@ (8012604 <dhcp_decline+0x100>)
 8012586:	9301      	str	r3, [sp, #4]
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	9300      	str	r3, [sp, #0]
 801258c:	2343      	movs	r3, #67	@ 0x43
 801258e:	4a1e      	ldr	r2, [pc, #120]	@ (8012608 <dhcp_decline+0x104>)
 8012590:	6979      	ldr	r1, [r7, #20]
 8012592:	f7fe feb7 	bl	8011304 <udp_sendto_if_src>
 8012596:	4603      	mov	r3, r0
 8012598:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801259a:	6978      	ldr	r0, [r7, #20]
 801259c:	f7f8 fbca 	bl	800ad34 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
 80125a0:	481a      	ldr	r0, [pc, #104]	@ (801260c <dhcp_decline+0x108>)
 80125a2:	f004 fbfb 	bl	8016d9c <puts>
 80125a6:	e004      	b.n	80125b2 <dhcp_decline+0xae>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 80125a8:	4819      	ldr	r0, [pc, #100]	@ (8012610 <dhcp_decline+0x10c>)
 80125aa:	f004 fbf7 	bl	8016d9c <puts>
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80125ae:	23ff      	movs	r3, #255	@ 0xff
 80125b0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80125b2:	69bb      	ldr	r3, [r7, #24]
 80125b4:	799b      	ldrb	r3, [r3, #6]
 80125b6:	2bff      	cmp	r3, #255	@ 0xff
 80125b8:	d005      	beq.n	80125c6 <dhcp_decline+0xc2>
    dhcp->tries++;
 80125ba:	69bb      	ldr	r3, [r7, #24]
 80125bc:	799b      	ldrb	r3, [r3, #6]
 80125be:	3301      	adds	r3, #1
 80125c0:	b2da      	uxtb	r2, r3
 80125c2:	69bb      	ldr	r3, [r7, #24]
 80125c4:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80125c6:	f242 7310 	movw	r3, #10000	@ 0x2710
 80125ca:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80125cc:	89fb      	ldrh	r3, [r7, #14]
 80125ce:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80125d2:	4a10      	ldr	r2, [pc, #64]	@ (8012614 <dhcp_decline+0x110>)
 80125d4:	fb82 1203 	smull	r1, r2, r2, r3
 80125d8:	1152      	asrs	r2, r2, #5
 80125da:	17db      	asrs	r3, r3, #31
 80125dc:	1ad3      	subs	r3, r2, r3
 80125de:	b29a      	uxth	r2, r3
 80125e0:	69bb      	ldr	r3, [r7, #24]
 80125e2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
 80125e4:	89fb      	ldrh	r3, [r7, #14]
 80125e6:	4619      	mov	r1, r3
 80125e8:	480b      	ldr	r0, [pc, #44]	@ (8012618 <dhcp_decline+0x114>)
 80125ea:	f004 fb67 	bl	8016cbc <iprintf>
  return result;
 80125ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80125f2:	4618      	mov	r0, r3
 80125f4:	3720      	adds	r7, #32
 80125f6:	46bd      	mov	sp, r7
 80125f8:	bdb0      	pop	{r4, r5, r7, pc}
 80125fa:	bf00      	nop
 80125fc:	0801ba9c 	.word	0x0801ba9c
 8012600:	2400337c 	.word	0x2400337c
 8012604:	0801dc64 	.word	0x0801dc64
 8012608:	0801dc68 	.word	0x0801dc68
 801260c:	0801baac 	.word	0x0801baac
 8012610:	0801bac8 	.word	0x0801bac8
 8012614:	10624dd3 	.word	0x10624dd3
 8012618:	0801baf8 	.word	0x0801baf8

0801261c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801261c:	b580      	push	{r7, lr}
 801261e:	b08a      	sub	sp, #40	@ 0x28
 8012620:	af02      	add	r7, sp, #8
 8012622:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012628:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801262a:	2300      	movs	r3, #0
 801262c:	75fb      	strb	r3, [r7, #23]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
 801262e:	4853      	ldr	r0, [pc, #332]	@ (801277c <dhcp_discover+0x160>)
 8012630:	f004 fbb4 	bl	8016d9c <puts>

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8012634:	69bb      	ldr	r3, [r7, #24]
 8012636:	2200      	movs	r2, #0
 8012638:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801263a:	2106      	movs	r1, #6
 801263c:	69b8      	ldr	r0, [r7, #24]
 801263e:	f000 fcb7 	bl	8012fb0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8012642:	f107 0308 	add.w	r3, r7, #8
 8012646:	2201      	movs	r2, #1
 8012648:	69b9      	ldr	r1, [r7, #24]
 801264a:	6878      	ldr	r0, [r7, #4]
 801264c:	f001 f9cc 	bl	80139e8 <dhcp_create_msg>
 8012650:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8012652:	693b      	ldr	r3, [r7, #16]
 8012654:	2b00      	cmp	r3, #0
 8012656:	d058      	beq.n	801270a <dhcp_discover+0xee>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012658:	693b      	ldr	r3, [r7, #16]
 801265a:	685b      	ldr	r3, [r3, #4]
 801265c:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));
 801265e:	4848      	ldr	r0, [pc, #288]	@ (8012780 <dhcp_discover+0x164>)
 8012660:	f004 fb9c 	bl	8016d9c <puts>

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012664:	8938      	ldrh	r0, [r7, #8]
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801266c:	2302      	movs	r3, #2
 801266e:	2239      	movs	r2, #57	@ 0x39
 8012670:	f000 fcb8 	bl	8012fe4 <dhcp_option>
 8012674:	4603      	mov	r3, r0
 8012676:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012678:	8938      	ldrh	r0, [r7, #8]
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012684:	461a      	mov	r2, r3
 8012686:	f000 fd07 	bl	8013098 <dhcp_option_short>
 801268a:	4603      	mov	r3, r0
 801268c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801268e:	8938      	ldrh	r0, [r7, #8]
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012696:	2303      	movs	r3, #3
 8012698:	2237      	movs	r2, #55	@ 0x37
 801269a:	f000 fca3 	bl	8012fe4 <dhcp_option>
 801269e:	4603      	mov	r3, r0
 80126a0:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80126a2:	2300      	movs	r3, #0
 80126a4:	77fb      	strb	r3, [r7, #31]
 80126a6:	e00e      	b.n	80126c6 <dhcp_discover+0xaa>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80126a8:	8938      	ldrh	r0, [r7, #8]
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80126b0:	7ffb      	ldrb	r3, [r7, #31]
 80126b2:	4a34      	ldr	r2, [pc, #208]	@ (8012784 <dhcp_discover+0x168>)
 80126b4:	5cd3      	ldrb	r3, [r2, r3]
 80126b6:	461a      	mov	r2, r3
 80126b8:	f000 fcc8 	bl	801304c <dhcp_option_byte>
 80126bc:	4603      	mov	r3, r0
 80126be:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80126c0:	7ffb      	ldrb	r3, [r7, #31]
 80126c2:	3301      	adds	r3, #1
 80126c4:	77fb      	strb	r3, [r7, #31]
 80126c6:	7ffb      	ldrb	r3, [r7, #31]
 80126c8:	2b02      	cmp	r3, #2
 80126ca:	d9ed      	bls.n	80126a8 <dhcp_discover+0x8c>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80126cc:	8938      	ldrh	r0, [r7, #8]
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	33f0      	adds	r3, #240	@ 0xf0
 80126d2:	693a      	ldr	r2, [r7, #16]
 80126d4:	4619      	mov	r1, r3
 80126d6:	f001 fa6b 	bl	8013bb0 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
 80126da:	482b      	ldr	r0, [pc, #172]	@ (8012788 <dhcp_discover+0x16c>)
 80126dc:	f004 fb5e 	bl	8016d9c <puts>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80126e0:	4b2a      	ldr	r3, [pc, #168]	@ (801278c <dhcp_discover+0x170>)
 80126e2:	6818      	ldr	r0, [r3, #0]
 80126e4:	4b2a      	ldr	r3, [pc, #168]	@ (8012790 <dhcp_discover+0x174>)
 80126e6:	9301      	str	r3, [sp, #4]
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	9300      	str	r3, [sp, #0]
 80126ec:	2343      	movs	r3, #67	@ 0x43
 80126ee:	4a29      	ldr	r2, [pc, #164]	@ (8012794 <dhcp_discover+0x178>)
 80126f0:	6939      	ldr	r1, [r7, #16]
 80126f2:	f7fe fe07 	bl	8011304 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
 80126f6:	4828      	ldr	r0, [pc, #160]	@ (8012798 <dhcp_discover+0x17c>)
 80126f8:	f004 fb50 	bl	8016d9c <puts>
    pbuf_free(p_out);
 80126fc:	6938      	ldr	r0, [r7, #16]
 80126fe:	f7f8 fb19 	bl	800ad34 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
 8012702:	4826      	ldr	r0, [pc, #152]	@ (801279c <dhcp_discover+0x180>)
 8012704:	f004 fb4a 	bl	8016d9c <puts>
 8012708:	e002      	b.n	8012710 <dhcp_discover+0xf4>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
 801270a:	4825      	ldr	r0, [pc, #148]	@ (80127a0 <dhcp_discover+0x184>)
 801270c:	f004 fb46 	bl	8016d9c <puts>
  }
  if (dhcp->tries < 255) {
 8012710:	69bb      	ldr	r3, [r7, #24]
 8012712:	799b      	ldrb	r3, [r3, #6]
 8012714:	2bff      	cmp	r3, #255	@ 0xff
 8012716:	d005      	beq.n	8012724 <dhcp_discover+0x108>
    dhcp->tries++;
 8012718:	69bb      	ldr	r3, [r7, #24]
 801271a:	799b      	ldrb	r3, [r3, #6]
 801271c:	3301      	adds	r3, #1
 801271e:	b2da      	uxtb	r2, r3
 8012720:	69bb      	ldr	r3, [r7, #24]
 8012722:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8012724:	69bb      	ldr	r3, [r7, #24]
 8012726:	799b      	ldrb	r3, [r3, #6]
 8012728:	2b05      	cmp	r3, #5
 801272a:	d80d      	bhi.n	8012748 <dhcp_discover+0x12c>
 801272c:	69bb      	ldr	r3, [r7, #24]
 801272e:	799b      	ldrb	r3, [r3, #6]
 8012730:	461a      	mov	r2, r3
 8012732:	2301      	movs	r3, #1
 8012734:	4093      	lsls	r3, r2
 8012736:	b29b      	uxth	r3, r3
 8012738:	461a      	mov	r2, r3
 801273a:	0152      	lsls	r2, r2, #5
 801273c:	1ad2      	subs	r2, r2, r3
 801273e:	0092      	lsls	r2, r2, #2
 8012740:	4413      	add	r3, r2
 8012742:	00db      	lsls	r3, r3, #3
 8012744:	b29b      	uxth	r3, r3
 8012746:	e001      	b.n	801274c <dhcp_discover+0x130>
 8012748:	f64e 2360 	movw	r3, #60000	@ 0xea60
 801274c:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801274e:	897b      	ldrh	r3, [r7, #10]
 8012750:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8012754:	4a13      	ldr	r2, [pc, #76]	@ (80127a4 <dhcp_discover+0x188>)
 8012756:	fb82 1203 	smull	r1, r2, r2, r3
 801275a:	1152      	asrs	r2, r2, #5
 801275c:	17db      	asrs	r3, r3, #31
 801275e:	1ad3      	subs	r3, r2, r3
 8012760:	b29a      	uxth	r2, r3
 8012762:	69bb      	ldr	r3, [r7, #24]
 8012764:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
 8012766:	897b      	ldrh	r3, [r7, #10]
 8012768:	4619      	mov	r1, r3
 801276a:	480f      	ldr	r0, [pc, #60]	@ (80127a8 <dhcp_discover+0x18c>)
 801276c:	f004 faa6 	bl	8016cbc <iprintf>
  return result;
 8012770:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012774:	4618      	mov	r0, r3
 8012776:	3720      	adds	r7, #32
 8012778:	46bd      	mov	sp, r7
 801277a:	bd80      	pop	{r7, pc}
 801277c:	0801bb28 	.word	0x0801bb28
 8012780:	0801bb38 	.word	0x0801bb38
 8012784:	24000088 	.word	0x24000088
 8012788:	0801bb58 	.word	0x0801bb58
 801278c:	2400337c 	.word	0x2400337c
 8012790:	0801dc64 	.word	0x0801dc64
 8012794:	0801dc68 	.word	0x0801dc68
 8012798:	0801bba8 	.word	0x0801bba8
 801279c:	0801bbc8 	.word	0x0801bbc8
 80127a0:	0801bbe4 	.word	0x0801bbe4
 80127a4:	10624dd3 	.word	0x10624dd3
 80127a8:	0801bc14 	.word	0x0801bc14

080127ac <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b08a      	sub	sp, #40	@ 0x28
 80127b0:	af02      	add	r7, sp, #8
 80127b2:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d107      	bne.n	80127ca <dhcp_bind+0x1e>
 80127ba:	4b88      	ldr	r3, [pc, #544]	@ (80129dc <dhcp_bind+0x230>)
 80127bc:	f240 4215 	movw	r2, #1045	@ 0x415
 80127c0:	4987      	ldr	r1, [pc, #540]	@ (80129e0 <dhcp_bind+0x234>)
 80127c2:	4888      	ldr	r0, [pc, #544]	@ (80129e4 <dhcp_bind+0x238>)
 80127c4:	f004 fa7a 	bl	8016cbc <iprintf>
 80127c8:	e104      	b.n	80129d4 <dhcp_bind+0x228>
  dhcp = netif_dhcp_data(netif);
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80127ce:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80127d0:	69bb      	ldr	r3, [r7, #24]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d107      	bne.n	80127e6 <dhcp_bind+0x3a>
 80127d6:	4b81      	ldr	r3, [pc, #516]	@ (80129dc <dhcp_bind+0x230>)
 80127d8:	f240 4217 	movw	r2, #1047	@ 0x417
 80127dc:	4982      	ldr	r1, [pc, #520]	@ (80129e8 <dhcp_bind+0x23c>)
 80127de:	4881      	ldr	r0, [pc, #516]	@ (80129e4 <dhcp_bind+0x238>)
 80127e0:	f004 fa6c 	bl	8016cbc <iprintf>
 80127e4:	e0f6      	b.n	80129d4 <dhcp_bind+0x228>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80127ec:	461a      	mov	r2, r3
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80127f4:	4619      	mov	r1, r3
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80127fc:	9300      	str	r3, [sp, #0]
 80127fe:	460b      	mov	r3, r1
 8012800:	6879      	ldr	r1, [r7, #4]
 8012802:	487a      	ldr	r0, [pc, #488]	@ (80129ec <dhcp_bind+0x240>)
 8012804:	f004 fa5a 	bl	8016cbc <iprintf>

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8012808:	69bb      	ldr	r3, [r7, #24]
 801280a:	2200      	movs	r2, #0
 801280c:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801280e:	69bb      	ldr	r3, [r7, #24]
 8012810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012812:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012816:	d029      	beq.n	801286c <dhcp_bind+0xc0>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
 8012818:	69bb      	ldr	r3, [r7, #24]
 801281a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801281c:	4619      	mov	r1, r3
 801281e:	4874      	ldr	r0, [pc, #464]	@ (80129f0 <dhcp_bind+0x244>)
 8012820:	f004 fa4c 	bl	8016cbc <iprintf>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012824:	69bb      	ldr	r3, [r7, #24]
 8012826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012828:	331e      	adds	r3, #30
 801282a:	4a72      	ldr	r2, [pc, #456]	@ (80129f4 <dhcp_bind+0x248>)
 801282c:	fba2 2303 	umull	r2, r3, r2, r3
 8012830:	095b      	lsrs	r3, r3, #5
 8012832:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012834:	69fb      	ldr	r3, [r7, #28]
 8012836:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801283a:	d302      	bcc.n	8012842 <dhcp_bind+0x96>
      timeout = 0xffff;
 801283c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012840:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8012842:	69fb      	ldr	r3, [r7, #28]
 8012844:	b29a      	uxth	r2, r3
 8012846:	69bb      	ldr	r3, [r7, #24]
 8012848:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801284a:	69bb      	ldr	r3, [r7, #24]
 801284c:	8a9b      	ldrh	r3, [r3, #20]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d102      	bne.n	8012858 <dhcp_bind+0xac>
      dhcp->t0_timeout = 1;
 8012852:	69bb      	ldr	r3, [r7, #24]
 8012854:	2201      	movs	r2, #1
 8012856:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
 8012858:	69bb      	ldr	r3, [r7, #24]
 801285a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801285c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8012860:	fb02 f303 	mul.w	r3, r2, r3
 8012864:	4619      	mov	r1, r3
 8012866:	4864      	ldr	r0, [pc, #400]	@ (80129f8 <dhcp_bind+0x24c>)
 8012868:	f004 fa28 	bl	8016cbc <iprintf>
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801286c:	69bb      	ldr	r3, [r7, #24]
 801286e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012870:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012874:	d02d      	beq.n	80128d2 <dhcp_bind+0x126>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
 8012876:	69bb      	ldr	r3, [r7, #24]
 8012878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801287a:	4619      	mov	r1, r3
 801287c:	485f      	ldr	r0, [pc, #380]	@ (80129fc <dhcp_bind+0x250>)
 801287e:	f004 fa1d 	bl	8016cbc <iprintf>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012882:	69bb      	ldr	r3, [r7, #24]
 8012884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012886:	331e      	adds	r3, #30
 8012888:	4a5a      	ldr	r2, [pc, #360]	@ (80129f4 <dhcp_bind+0x248>)
 801288a:	fba2 2303 	umull	r2, r3, r2, r3
 801288e:	095b      	lsrs	r3, r3, #5
 8012890:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012892:	69fb      	ldr	r3, [r7, #28]
 8012894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012898:	d302      	bcc.n	80128a0 <dhcp_bind+0xf4>
      timeout = 0xffff;
 801289a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801289e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80128a0:	69fb      	ldr	r3, [r7, #28]
 80128a2:	b29a      	uxth	r2, r3
 80128a4:	69bb      	ldr	r3, [r7, #24]
 80128a6:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80128a8:	69bb      	ldr	r3, [r7, #24]
 80128aa:	895b      	ldrh	r3, [r3, #10]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d102      	bne.n	80128b6 <dhcp_bind+0x10a>
      dhcp->t1_timeout = 1;
 80128b0:	69bb      	ldr	r3, [r7, #24]
 80128b2:	2201      	movs	r2, #1
 80128b4:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
 80128b6:	69bb      	ldr	r3, [r7, #24]
 80128b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80128be:	fb02 f303 	mul.w	r3, r2, r3
 80128c2:	4619      	mov	r1, r3
 80128c4:	484c      	ldr	r0, [pc, #304]	@ (80129f8 <dhcp_bind+0x24c>)
 80128c6:	f004 f9f9 	bl	8016cbc <iprintf>
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80128ca:	69bb      	ldr	r3, [r7, #24]
 80128cc:	895a      	ldrh	r2, [r3, #10]
 80128ce:	69bb      	ldr	r3, [r7, #24]
 80128d0:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80128d2:	69bb      	ldr	r3, [r7, #24]
 80128d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80128d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80128da:	d02d      	beq.n	8012938 <dhcp_bind+0x18c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
 80128dc:	69bb      	ldr	r3, [r7, #24]
 80128de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80128e0:	4619      	mov	r1, r3
 80128e2:	4847      	ldr	r0, [pc, #284]	@ (8012a00 <dhcp_bind+0x254>)
 80128e4:	f004 f9ea 	bl	8016cbc <iprintf>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80128e8:	69bb      	ldr	r3, [r7, #24]
 80128ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80128ec:	331e      	adds	r3, #30
 80128ee:	4a41      	ldr	r2, [pc, #260]	@ (80129f4 <dhcp_bind+0x248>)
 80128f0:	fba2 2303 	umull	r2, r3, r2, r3
 80128f4:	095b      	lsrs	r3, r3, #5
 80128f6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80128f8:	69fb      	ldr	r3, [r7, #28]
 80128fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80128fe:	d302      	bcc.n	8012906 <dhcp_bind+0x15a>
      timeout = 0xffff;
 8012900:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012904:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8012906:	69fb      	ldr	r3, [r7, #28]
 8012908:	b29a      	uxth	r2, r3
 801290a:	69bb      	ldr	r3, [r7, #24]
 801290c:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801290e:	69bb      	ldr	r3, [r7, #24]
 8012910:	899b      	ldrh	r3, [r3, #12]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d102      	bne.n	801291c <dhcp_bind+0x170>
      dhcp->t2_timeout = 1;
 8012916:	69bb      	ldr	r3, [r7, #24]
 8012918:	2201      	movs	r2, #1
 801291a:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
 801291c:	69bb      	ldr	r3, [r7, #24]
 801291e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012920:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8012924:	fb02 f303 	mul.w	r3, r2, r3
 8012928:	4619      	mov	r1, r3
 801292a:	4833      	ldr	r0, [pc, #204]	@ (80129f8 <dhcp_bind+0x24c>)
 801292c:	f004 f9c6 	bl	8016cbc <iprintf>
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8012930:	69bb      	ldr	r3, [r7, #24]
 8012932:	899a      	ldrh	r2, [r3, #12]
 8012934:	69bb      	ldr	r3, [r7, #24]
 8012936:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8012938:	69bb      	ldr	r3, [r7, #24]
 801293a:	895a      	ldrh	r2, [r3, #10]
 801293c:	69bb      	ldr	r3, [r7, #24]
 801293e:	899b      	ldrh	r3, [r3, #12]
 8012940:	429a      	cmp	r2, r3
 8012942:	d306      	bcc.n	8012952 <dhcp_bind+0x1a6>
 8012944:	69bb      	ldr	r3, [r7, #24]
 8012946:	899b      	ldrh	r3, [r3, #12]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d002      	beq.n	8012952 <dhcp_bind+0x1a6>
    dhcp->t1_timeout = 0;
 801294c:	69bb      	ldr	r3, [r7, #24]
 801294e:	2200      	movs	r2, #0
 8012950:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8012952:	69bb      	ldr	r3, [r7, #24]
 8012954:	79db      	ldrb	r3, [r3, #7]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d003      	beq.n	8012962 <dhcp_bind+0x1b6>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801295a:	69bb      	ldr	r3, [r7, #24]
 801295c:	6a1b      	ldr	r3, [r3, #32]
 801295e:	613b      	str	r3, [r7, #16]
 8012960:	e014      	b.n	801298c <dhcp_bind+0x1e0>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8012962:	69bb      	ldr	r3, [r7, #24]
 8012964:	331c      	adds	r3, #28
 8012966:	781b      	ldrb	r3, [r3, #0]
 8012968:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801296a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801296e:	2b00      	cmp	r3, #0
 8012970:	db02      	blt.n	8012978 <dhcp_bind+0x1cc>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8012972:	23ff      	movs	r3, #255	@ 0xff
 8012974:	613b      	str	r3, [r7, #16]
 8012976:	e009      	b.n	801298c <dhcp_bind+0x1e0>
    } else if (first_octet >= 192) {
 8012978:	7dfb      	ldrb	r3, [r7, #23]
 801297a:	2bbf      	cmp	r3, #191	@ 0xbf
 801297c:	d903      	bls.n	8012986 <dhcp_bind+0x1da>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801297e:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8012982:	613b      	str	r3, [r7, #16]
 8012984:	e002      	b.n	801298c <dhcp_bind+0x1e0>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8012986:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801298a:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801298c:	69bb      	ldr	r3, [r7, #24]
 801298e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012990:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	2b00      	cmp	r3, #0
 8012996:	d108      	bne.n	80129aa <dhcp_bind+0x1fe>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8012998:	69bb      	ldr	r3, [r7, #24]
 801299a:	69da      	ldr	r2, [r3, #28]
 801299c:	693b      	ldr	r3, [r7, #16]
 801299e:	4013      	ands	r3, r2
 80129a0:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80129a8:	60fb      	str	r3, [r7, #12]
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
 80129aa:	69bb      	ldr	r3, [r7, #24]
 80129ac:	69d9      	ldr	r1, [r3, #28]
 80129ae:	693a      	ldr	r2, [r7, #16]
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	4814      	ldr	r0, [pc, #80]	@ (8012a04 <dhcp_bind+0x258>)
 80129b4:	f004 f982 	bl	8016cbc <iprintf>
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80129b8:	210a      	movs	r1, #10
 80129ba:	69b8      	ldr	r0, [r7, #24]
 80129bc:	f000 faf8 	bl	8012fb0 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80129c0:	69bb      	ldr	r3, [r7, #24]
 80129c2:	f103 011c 	add.w	r1, r3, #28
 80129c6:	f107 030c 	add.w	r3, r7, #12
 80129ca:	f107 0210 	add.w	r2, r7, #16
 80129ce:	6878      	ldr	r0, [r7, #4]
 80129d0:	f7f7 fc84 	bl	800a2dc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80129d4:	3720      	adds	r7, #32
 80129d6:	46bd      	mov	sp, r7
 80129d8:	bd80      	pop	{r7, pc}
 80129da:	bf00      	nop
 80129dc:	0801b394 	.word	0x0801b394
 80129e0:	0801bc44 	.word	0x0801bc44
 80129e4:	0801b3f4 	.word	0x0801b3f4
 80129e8:	0801bc60 	.word	0x0801bc60
 80129ec:	0801bc78 	.word	0x0801bc78
 80129f0:	0801bc98 	.word	0x0801bc98
 80129f4:	88888889 	.word	0x88888889
 80129f8:	0801bcc0 	.word	0x0801bcc0
 80129fc:	0801bcec 	.word	0x0801bcec
 8012a00:	0801bd14 	.word	0x0801bd14
 8012a04:	0801bd3c 	.word	0x0801bd3c

08012a08 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8012a08:	b580      	push	{r7, lr}
 8012a0a:	b08a      	sub	sp, #40	@ 0x28
 8012a0c:	af02      	add	r7, sp, #8
 8012a0e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a14:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
 8012a16:	484d      	ldr	r0, [pc, #308]	@ (8012b4c <dhcp_renew+0x144>)
 8012a18:	f004 f9c0 	bl	8016d9c <puts>
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8012a1c:	2105      	movs	r1, #5
 8012a1e:	69b8      	ldr	r0, [r7, #24]
 8012a20:	f000 fac6 	bl	8012fb0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012a24:	f107 030c 	add.w	r3, r7, #12
 8012a28:	2203      	movs	r2, #3
 8012a2a:	69b9      	ldr	r1, [r7, #24]
 8012a2c:	6878      	ldr	r0, [r7, #4]
 8012a2e:	f000 ffdb 	bl	80139e8 <dhcp_create_msg>
 8012a32:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012a34:	697b      	ldr	r3, [r7, #20]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d051      	beq.n	8012ade <dhcp_renew+0xd6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012a3a:	697b      	ldr	r3, [r7, #20]
 8012a3c:	685b      	ldr	r3, [r3, #4]
 8012a3e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012a40:	89b8      	ldrh	r0, [r7, #12]
 8012a42:	693b      	ldr	r3, [r7, #16]
 8012a44:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012a48:	2302      	movs	r3, #2
 8012a4a:	2239      	movs	r2, #57	@ 0x39
 8012a4c:	f000 faca 	bl	8012fe4 <dhcp_option>
 8012a50:	4603      	mov	r3, r0
 8012a52:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012a54:	89b8      	ldrh	r0, [r7, #12]
 8012a56:	693b      	ldr	r3, [r7, #16]
 8012a58:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012a60:	461a      	mov	r2, r3
 8012a62:	f000 fb19 	bl	8013098 <dhcp_option_short>
 8012a66:	4603      	mov	r3, r0
 8012a68:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012a6a:	89b8      	ldrh	r0, [r7, #12]
 8012a6c:	693b      	ldr	r3, [r7, #16]
 8012a6e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012a72:	2303      	movs	r3, #3
 8012a74:	2237      	movs	r2, #55	@ 0x37
 8012a76:	f000 fab5 	bl	8012fe4 <dhcp_option>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012a7e:	2300      	movs	r3, #0
 8012a80:	77bb      	strb	r3, [r7, #30]
 8012a82:	e00e      	b.n	8012aa2 <dhcp_renew+0x9a>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012a84:	89b8      	ldrh	r0, [r7, #12]
 8012a86:	693b      	ldr	r3, [r7, #16]
 8012a88:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012a8c:	7fbb      	ldrb	r3, [r7, #30]
 8012a8e:	4a30      	ldr	r2, [pc, #192]	@ (8012b50 <dhcp_renew+0x148>)
 8012a90:	5cd3      	ldrb	r3, [r2, r3]
 8012a92:	461a      	mov	r2, r3
 8012a94:	f000 fada 	bl	801304c <dhcp_option_byte>
 8012a98:	4603      	mov	r3, r0
 8012a9a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012a9c:	7fbb      	ldrb	r3, [r7, #30]
 8012a9e:	3301      	adds	r3, #1
 8012aa0:	77bb      	strb	r3, [r7, #30]
 8012aa2:	7fbb      	ldrb	r3, [r7, #30]
 8012aa4:	2b02      	cmp	r3, #2
 8012aa6:	d9ed      	bls.n	8012a84 <dhcp_renew+0x7c>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012aa8:	89b8      	ldrh	r0, [r7, #12]
 8012aaa:	693b      	ldr	r3, [r7, #16]
 8012aac:	33f0      	adds	r3, #240	@ 0xf0
 8012aae:	697a      	ldr	r2, [r7, #20]
 8012ab0:	4619      	mov	r1, r3
 8012ab2:	f001 f87d 	bl	8013bb0 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012ab6:	4b27      	ldr	r3, [pc, #156]	@ (8012b54 <dhcp_renew+0x14c>)
 8012ab8:	6818      	ldr	r0, [r3, #0]
 8012aba:	69bb      	ldr	r3, [r7, #24]
 8012abc:	f103 0218 	add.w	r2, r3, #24
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	9300      	str	r3, [sp, #0]
 8012ac4:	2343      	movs	r3, #67	@ 0x43
 8012ac6:	6979      	ldr	r1, [r7, #20]
 8012ac8:	f7fe fba8 	bl	801121c <udp_sendto_if>
 8012acc:	4603      	mov	r3, r0
 8012ace:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012ad0:	6978      	ldr	r0, [r7, #20]
 8012ad2:	f7f8 f92f 	bl	800ad34 <pbuf_free>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
 8012ad6:	4820      	ldr	r0, [pc, #128]	@ (8012b58 <dhcp_renew+0x150>)
 8012ad8:	f004 f960 	bl	8016d9c <puts>
 8012adc:	e004      	b.n	8012ae8 <dhcp_renew+0xe0>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
 8012ade:	481f      	ldr	r0, [pc, #124]	@ (8012b5c <dhcp_renew+0x154>)
 8012ae0:	f004 f95c 	bl	8016d9c <puts>
    result = ERR_MEM;
 8012ae4:	23ff      	movs	r3, #255	@ 0xff
 8012ae6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012ae8:	69bb      	ldr	r3, [r7, #24]
 8012aea:	799b      	ldrb	r3, [r3, #6]
 8012aec:	2bff      	cmp	r3, #255	@ 0xff
 8012aee:	d005      	beq.n	8012afc <dhcp_renew+0xf4>
    dhcp->tries++;
 8012af0:	69bb      	ldr	r3, [r7, #24]
 8012af2:	799b      	ldrb	r3, [r3, #6]
 8012af4:	3301      	adds	r3, #1
 8012af6:	b2da      	uxtb	r2, r3
 8012af8:	69bb      	ldr	r3, [r7, #24]
 8012afa:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8012afc:	69bb      	ldr	r3, [r7, #24]
 8012afe:	799b      	ldrb	r3, [r3, #6]
 8012b00:	2b09      	cmp	r3, #9
 8012b02:	d809      	bhi.n	8012b18 <dhcp_renew+0x110>
 8012b04:	69bb      	ldr	r3, [r7, #24]
 8012b06:	799b      	ldrb	r3, [r3, #6]
 8012b08:	461a      	mov	r2, r3
 8012b0a:	0152      	lsls	r2, r2, #5
 8012b0c:	1ad2      	subs	r2, r2, r3
 8012b0e:	0092      	lsls	r2, r2, #2
 8012b10:	4413      	add	r3, r2
 8012b12:	011b      	lsls	r3, r3, #4
 8012b14:	b29b      	uxth	r3, r3
 8012b16:	e001      	b.n	8012b1c <dhcp_renew+0x114>
 8012b18:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8012b1c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012b1e:	89fb      	ldrh	r3, [r7, #14]
 8012b20:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8012b24:	4a0e      	ldr	r2, [pc, #56]	@ (8012b60 <dhcp_renew+0x158>)
 8012b26:	fb82 1203 	smull	r1, r2, r2, r3
 8012b2a:	1152      	asrs	r2, r2, #5
 8012b2c:	17db      	asrs	r3, r3, #31
 8012b2e:	1ad3      	subs	r3, r2, r3
 8012b30:	b29a      	uxth	r2, r3
 8012b32:	69bb      	ldr	r3, [r7, #24]
 8012b34:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
 8012b36:	89fb      	ldrh	r3, [r7, #14]
 8012b38:	4619      	mov	r1, r3
 8012b3a:	480a      	ldr	r0, [pc, #40]	@ (8012b64 <dhcp_renew+0x15c>)
 8012b3c:	f004 f8be 	bl	8016cbc <iprintf>
  return result;
 8012b40:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012b44:	4618      	mov	r0, r3
 8012b46:	3720      	adds	r7, #32
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	bd80      	pop	{r7, pc}
 8012b4c:	0801bd70 	.word	0x0801bd70
 8012b50:	24000088 	.word	0x24000088
 8012b54:	2400337c 	.word	0x2400337c
 8012b58:	0801bd80 	.word	0x0801bd80
 8012b5c:	0801bd98 	.word	0x0801bd98
 8012b60:	10624dd3 	.word	0x10624dd3
 8012b64:	0801bdc4 	.word	0x0801bdc4

08012b68 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b08a      	sub	sp, #40	@ 0x28
 8012b6c:	af02      	add	r7, sp, #8
 8012b6e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b74:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
 8012b76:	484c      	ldr	r0, [pc, #304]	@ (8012ca8 <dhcp_rebind+0x140>)
 8012b78:	f004 f910 	bl	8016d9c <puts>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8012b7c:	2104      	movs	r1, #4
 8012b7e:	69b8      	ldr	r0, [r7, #24]
 8012b80:	f000 fa16 	bl	8012fb0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012b84:	f107 030c 	add.w	r3, r7, #12
 8012b88:	2203      	movs	r2, #3
 8012b8a:	69b9      	ldr	r1, [r7, #24]
 8012b8c:	6878      	ldr	r0, [r7, #4]
 8012b8e:	f000 ff2b 	bl	80139e8 <dhcp_create_msg>
 8012b92:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012b94:	697b      	ldr	r3, [r7, #20]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d04f      	beq.n	8012c3a <dhcp_rebind+0xd2>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012b9a:	697b      	ldr	r3, [r7, #20]
 8012b9c:	685b      	ldr	r3, [r3, #4]
 8012b9e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012ba0:	89b8      	ldrh	r0, [r7, #12]
 8012ba2:	693b      	ldr	r3, [r7, #16]
 8012ba4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012ba8:	2302      	movs	r3, #2
 8012baa:	2239      	movs	r2, #57	@ 0x39
 8012bac:	f000 fa1a 	bl	8012fe4 <dhcp_option>
 8012bb0:	4603      	mov	r3, r0
 8012bb2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012bb4:	89b8      	ldrh	r0, [r7, #12]
 8012bb6:	693b      	ldr	r3, [r7, #16]
 8012bb8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012bc0:	461a      	mov	r2, r3
 8012bc2:	f000 fa69 	bl	8013098 <dhcp_option_short>
 8012bc6:	4603      	mov	r3, r0
 8012bc8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012bca:	89b8      	ldrh	r0, [r7, #12]
 8012bcc:	693b      	ldr	r3, [r7, #16]
 8012bce:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012bd2:	2303      	movs	r3, #3
 8012bd4:	2237      	movs	r2, #55	@ 0x37
 8012bd6:	f000 fa05 	bl	8012fe4 <dhcp_option>
 8012bda:	4603      	mov	r3, r0
 8012bdc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012bde:	2300      	movs	r3, #0
 8012be0:	77bb      	strb	r3, [r7, #30]
 8012be2:	e00e      	b.n	8012c02 <dhcp_rebind+0x9a>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012be4:	89b8      	ldrh	r0, [r7, #12]
 8012be6:	693b      	ldr	r3, [r7, #16]
 8012be8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012bec:	7fbb      	ldrb	r3, [r7, #30]
 8012bee:	4a2f      	ldr	r2, [pc, #188]	@ (8012cac <dhcp_rebind+0x144>)
 8012bf0:	5cd3      	ldrb	r3, [r2, r3]
 8012bf2:	461a      	mov	r2, r3
 8012bf4:	f000 fa2a 	bl	801304c <dhcp_option_byte>
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012bfc:	7fbb      	ldrb	r3, [r7, #30]
 8012bfe:	3301      	adds	r3, #1
 8012c00:	77bb      	strb	r3, [r7, #30]
 8012c02:	7fbb      	ldrb	r3, [r7, #30]
 8012c04:	2b02      	cmp	r3, #2
 8012c06:	d9ed      	bls.n	8012be4 <dhcp_rebind+0x7c>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012c08:	89b8      	ldrh	r0, [r7, #12]
 8012c0a:	693b      	ldr	r3, [r7, #16]
 8012c0c:	33f0      	adds	r3, #240	@ 0xf0
 8012c0e:	697a      	ldr	r2, [r7, #20]
 8012c10:	4619      	mov	r1, r3
 8012c12:	f000 ffcd 	bl	8013bb0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012c16:	4b26      	ldr	r3, [pc, #152]	@ (8012cb0 <dhcp_rebind+0x148>)
 8012c18:	6818      	ldr	r0, [r3, #0]
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	9300      	str	r3, [sp, #0]
 8012c1e:	2343      	movs	r3, #67	@ 0x43
 8012c20:	4a24      	ldr	r2, [pc, #144]	@ (8012cb4 <dhcp_rebind+0x14c>)
 8012c22:	6979      	ldr	r1, [r7, #20]
 8012c24:	f7fe fafa 	bl	801121c <udp_sendto_if>
 8012c28:	4603      	mov	r3, r0
 8012c2a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012c2c:	6978      	ldr	r0, [r7, #20]
 8012c2e:	f7f8 f881 	bl	800ad34 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
 8012c32:	4821      	ldr	r0, [pc, #132]	@ (8012cb8 <dhcp_rebind+0x150>)
 8012c34:	f004 f8b2 	bl	8016d9c <puts>
 8012c38:	e004      	b.n	8012c44 <dhcp_rebind+0xdc>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
 8012c3a:	4820      	ldr	r0, [pc, #128]	@ (8012cbc <dhcp_rebind+0x154>)
 8012c3c:	f004 f8ae 	bl	8016d9c <puts>
    result = ERR_MEM;
 8012c40:	23ff      	movs	r3, #255	@ 0xff
 8012c42:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012c44:	69bb      	ldr	r3, [r7, #24]
 8012c46:	799b      	ldrb	r3, [r3, #6]
 8012c48:	2bff      	cmp	r3, #255	@ 0xff
 8012c4a:	d005      	beq.n	8012c58 <dhcp_rebind+0xf0>
    dhcp->tries++;
 8012c4c:	69bb      	ldr	r3, [r7, #24]
 8012c4e:	799b      	ldrb	r3, [r3, #6]
 8012c50:	3301      	adds	r3, #1
 8012c52:	b2da      	uxtb	r2, r3
 8012c54:	69bb      	ldr	r3, [r7, #24]
 8012c56:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8012c58:	69bb      	ldr	r3, [r7, #24]
 8012c5a:	799b      	ldrb	r3, [r3, #6]
 8012c5c:	2b09      	cmp	r3, #9
 8012c5e:	d809      	bhi.n	8012c74 <dhcp_rebind+0x10c>
 8012c60:	69bb      	ldr	r3, [r7, #24]
 8012c62:	799b      	ldrb	r3, [r3, #6]
 8012c64:	461a      	mov	r2, r3
 8012c66:	0152      	lsls	r2, r2, #5
 8012c68:	1ad2      	subs	r2, r2, r3
 8012c6a:	0092      	lsls	r2, r2, #2
 8012c6c:	4413      	add	r3, r2
 8012c6e:	00db      	lsls	r3, r3, #3
 8012c70:	b29b      	uxth	r3, r3
 8012c72:	e001      	b.n	8012c78 <dhcp_rebind+0x110>
 8012c74:	f242 7310 	movw	r3, #10000	@ 0x2710
 8012c78:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012c7a:	89fb      	ldrh	r3, [r7, #14]
 8012c7c:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8012c80:	4a0f      	ldr	r2, [pc, #60]	@ (8012cc0 <dhcp_rebind+0x158>)
 8012c82:	fb82 1203 	smull	r1, r2, r2, r3
 8012c86:	1152      	asrs	r2, r2, #5
 8012c88:	17db      	asrs	r3, r3, #31
 8012c8a:	1ad3      	subs	r3, r2, r3
 8012c8c:	b29a      	uxth	r2, r3
 8012c8e:	69bb      	ldr	r3, [r7, #24]
 8012c90:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
 8012c92:	89fb      	ldrh	r3, [r7, #14]
 8012c94:	4619      	mov	r1, r3
 8012c96:	480b      	ldr	r0, [pc, #44]	@ (8012cc4 <dhcp_rebind+0x15c>)
 8012c98:	f004 f810 	bl	8016cbc <iprintf>
  return result;
 8012c9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	3720      	adds	r7, #32
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	bd80      	pop	{r7, pc}
 8012ca8:	0801bdf4 	.word	0x0801bdf4
 8012cac:	24000088 	.word	0x24000088
 8012cb0:	2400337c 	.word	0x2400337c
 8012cb4:	0801dc68 	.word	0x0801dc68
 8012cb8:	0801be04 	.word	0x0801be04
 8012cbc:	0801be1c 	.word	0x0801be1c
 8012cc0:	10624dd3 	.word	0x10624dd3
 8012cc4:	0801be4c 	.word	0x0801be4c

08012cc8 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8012cc8:	b5b0      	push	{r4, r5, r7, lr}
 8012cca:	b08a      	sub	sp, #40	@ 0x28
 8012ccc:	af02      	add	r7, sp, #8
 8012cce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012cd4:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
 8012cd6:	4859      	ldr	r0, [pc, #356]	@ (8012e3c <dhcp_reboot+0x174>)
 8012cd8:	f004 f860 	bl	8016d9c <puts>
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8012cdc:	2103      	movs	r1, #3
 8012cde:	69b8      	ldr	r0, [r7, #24]
 8012ce0:	f000 f966 	bl	8012fb0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012ce4:	f107 030c 	add.w	r3, r7, #12
 8012ce8:	2203      	movs	r2, #3
 8012cea:	69b9      	ldr	r1, [r7, #24]
 8012cec:	6878      	ldr	r0, [r7, #4]
 8012cee:	f000 fe7b 	bl	80139e8 <dhcp_create_msg>
 8012cf2:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012cf4:	697b      	ldr	r3, [r7, #20]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d069      	beq.n	8012dce <dhcp_reboot+0x106>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012cfa:	697b      	ldr	r3, [r7, #20]
 8012cfc:	685b      	ldr	r3, [r3, #4]
 8012cfe:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012d00:	89b8      	ldrh	r0, [r7, #12]
 8012d02:	693b      	ldr	r3, [r7, #16]
 8012d04:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012d08:	2302      	movs	r3, #2
 8012d0a:	2239      	movs	r2, #57	@ 0x39
 8012d0c:	f000 f96a 	bl	8012fe4 <dhcp_option>
 8012d10:	4603      	mov	r3, r0
 8012d12:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8012d14:	89b8      	ldrh	r0, [r7, #12]
 8012d16:	693b      	ldr	r3, [r7, #16]
 8012d18:	33f0      	adds	r3, #240	@ 0xf0
 8012d1a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8012d1e:	4619      	mov	r1, r3
 8012d20:	f000 f9ba 	bl	8013098 <dhcp_option_short>
 8012d24:	4603      	mov	r3, r0
 8012d26:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012d28:	89b8      	ldrh	r0, [r7, #12]
 8012d2a:	693b      	ldr	r3, [r7, #16]
 8012d2c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012d30:	2304      	movs	r3, #4
 8012d32:	2232      	movs	r2, #50	@ 0x32
 8012d34:	f000 f956 	bl	8012fe4 <dhcp_option>
 8012d38:	4603      	mov	r3, r0
 8012d3a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012d3c:	89bc      	ldrh	r4, [r7, #12]
 8012d3e:	693b      	ldr	r3, [r7, #16]
 8012d40:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8012d44:	69bb      	ldr	r3, [r7, #24]
 8012d46:	69db      	ldr	r3, [r3, #28]
 8012d48:	4618      	mov	r0, r3
 8012d4a:	f7f6 fb8a 	bl	8009462 <lwip_htonl>
 8012d4e:	4603      	mov	r3, r0
 8012d50:	461a      	mov	r2, r3
 8012d52:	4629      	mov	r1, r5
 8012d54:	4620      	mov	r0, r4
 8012d56:	f000 f9d1 	bl	80130fc <dhcp_option_long>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012d5e:	89b8      	ldrh	r0, [r7, #12]
 8012d60:	693b      	ldr	r3, [r7, #16]
 8012d62:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012d66:	2303      	movs	r3, #3
 8012d68:	2237      	movs	r2, #55	@ 0x37
 8012d6a:	f000 f93b 	bl	8012fe4 <dhcp_option>
 8012d6e:	4603      	mov	r3, r0
 8012d70:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012d72:	2300      	movs	r3, #0
 8012d74:	77bb      	strb	r3, [r7, #30]
 8012d76:	e00e      	b.n	8012d96 <dhcp_reboot+0xce>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012d78:	89b8      	ldrh	r0, [r7, #12]
 8012d7a:	693b      	ldr	r3, [r7, #16]
 8012d7c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012d80:	7fbb      	ldrb	r3, [r7, #30]
 8012d82:	4a2f      	ldr	r2, [pc, #188]	@ (8012e40 <dhcp_reboot+0x178>)
 8012d84:	5cd3      	ldrb	r3, [r2, r3]
 8012d86:	461a      	mov	r2, r3
 8012d88:	f000 f960 	bl	801304c <dhcp_option_byte>
 8012d8c:	4603      	mov	r3, r0
 8012d8e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012d90:	7fbb      	ldrb	r3, [r7, #30]
 8012d92:	3301      	adds	r3, #1
 8012d94:	77bb      	strb	r3, [r7, #30]
 8012d96:	7fbb      	ldrb	r3, [r7, #30]
 8012d98:	2b02      	cmp	r3, #2
 8012d9a:	d9ed      	bls.n	8012d78 <dhcp_reboot+0xb0>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012d9c:	89b8      	ldrh	r0, [r7, #12]
 8012d9e:	693b      	ldr	r3, [r7, #16]
 8012da0:	33f0      	adds	r3, #240	@ 0xf0
 8012da2:	697a      	ldr	r2, [r7, #20]
 8012da4:	4619      	mov	r1, r3
 8012da6:	f000 ff03 	bl	8013bb0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012daa:	4b26      	ldr	r3, [pc, #152]	@ (8012e44 <dhcp_reboot+0x17c>)
 8012dac:	6818      	ldr	r0, [r3, #0]
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	9300      	str	r3, [sp, #0]
 8012db2:	2343      	movs	r3, #67	@ 0x43
 8012db4:	4a24      	ldr	r2, [pc, #144]	@ (8012e48 <dhcp_reboot+0x180>)
 8012db6:	6979      	ldr	r1, [r7, #20]
 8012db8:	f7fe fa30 	bl	801121c <udp_sendto_if>
 8012dbc:	4603      	mov	r3, r0
 8012dbe:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012dc0:	6978      	ldr	r0, [r7, #20]
 8012dc2:	f7f7 ffb7 	bl	800ad34 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
 8012dc6:	4821      	ldr	r0, [pc, #132]	@ (8012e4c <dhcp_reboot+0x184>)
 8012dc8:	f003 ffe8 	bl	8016d9c <puts>
 8012dcc:	e004      	b.n	8012dd8 <dhcp_reboot+0x110>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
 8012dce:	4820      	ldr	r0, [pc, #128]	@ (8012e50 <dhcp_reboot+0x188>)
 8012dd0:	f003 ffe4 	bl	8016d9c <puts>
    result = ERR_MEM;
 8012dd4:	23ff      	movs	r3, #255	@ 0xff
 8012dd6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012dd8:	69bb      	ldr	r3, [r7, #24]
 8012dda:	799b      	ldrb	r3, [r3, #6]
 8012ddc:	2bff      	cmp	r3, #255	@ 0xff
 8012dde:	d005      	beq.n	8012dec <dhcp_reboot+0x124>
    dhcp->tries++;
 8012de0:	69bb      	ldr	r3, [r7, #24]
 8012de2:	799b      	ldrb	r3, [r3, #6]
 8012de4:	3301      	adds	r3, #1
 8012de6:	b2da      	uxtb	r2, r3
 8012de8:	69bb      	ldr	r3, [r7, #24]
 8012dea:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8012dec:	69bb      	ldr	r3, [r7, #24]
 8012dee:	799b      	ldrb	r3, [r3, #6]
 8012df0:	2b09      	cmp	r3, #9
 8012df2:	d809      	bhi.n	8012e08 <dhcp_reboot+0x140>
 8012df4:	69bb      	ldr	r3, [r7, #24]
 8012df6:	799b      	ldrb	r3, [r3, #6]
 8012df8:	461a      	mov	r2, r3
 8012dfa:	0152      	lsls	r2, r2, #5
 8012dfc:	1ad2      	subs	r2, r2, r3
 8012dfe:	0092      	lsls	r2, r2, #2
 8012e00:	4413      	add	r3, r2
 8012e02:	00db      	lsls	r3, r3, #3
 8012e04:	b29b      	uxth	r3, r3
 8012e06:	e001      	b.n	8012e0c <dhcp_reboot+0x144>
 8012e08:	f242 7310 	movw	r3, #10000	@ 0x2710
 8012e0c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012e0e:	89fb      	ldrh	r3, [r7, #14]
 8012e10:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8012e14:	4a0f      	ldr	r2, [pc, #60]	@ (8012e54 <dhcp_reboot+0x18c>)
 8012e16:	fb82 1203 	smull	r1, r2, r2, r3
 8012e1a:	1152      	asrs	r2, r2, #5
 8012e1c:	17db      	asrs	r3, r3, #31
 8012e1e:	1ad3      	subs	r3, r2, r3
 8012e20:	b29a      	uxth	r2, r3
 8012e22:	69bb      	ldr	r3, [r7, #24]
 8012e24:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
 8012e26:	89fb      	ldrh	r3, [r7, #14]
 8012e28:	4619      	mov	r1, r3
 8012e2a:	480b      	ldr	r0, [pc, #44]	@ (8012e58 <dhcp_reboot+0x190>)
 8012e2c:	f003 ff46 	bl	8016cbc <iprintf>
  return result;
 8012e30:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012e34:	4618      	mov	r0, r3
 8012e36:	3720      	adds	r7, #32
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8012e3c:	0801be7c 	.word	0x0801be7c
 8012e40:	24000088 	.word	0x24000088
 8012e44:	2400337c 	.word	0x2400337c
 8012e48:	0801dc68 	.word	0x0801dc68
 8012e4c:	0801be8c 	.word	0x0801be8c
 8012e50:	0801bea4 	.word	0x0801bea4
 8012e54:	10624dd3 	.word	0x10624dd3
 8012e58:	0801bed4 	.word	0x0801bed4

08012e5c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8012e5c:	b5b0      	push	{r4, r5, r7, lr}
 8012e5e:	b08a      	sub	sp, #40	@ 0x28
 8012e60:	af02      	add	r7, sp, #8
 8012e62:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e68:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
 8012e6a:	484c      	ldr	r0, [pc, #304]	@ (8012f9c <dhcp_release_and_stop+0x140>)
 8012e6c:	f003 ff96 	bl	8016d9c <puts>
  if (dhcp == NULL) {
 8012e70:	69fb      	ldr	r3, [r7, #28]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	f000 808b 	beq.w	8012f8e <dhcp_release_and_stop+0x132>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8012e78:	69fb      	ldr	r3, [r7, #28]
 8012e7a:	795b      	ldrb	r3, [r3, #5]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	f000 8088 	beq.w	8012f92 <dhcp_release_and_stop+0x136>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8012e82:	69fb      	ldr	r3, [r7, #28]
 8012e84:	699b      	ldr	r3, [r3, #24]
 8012e86:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8012e88:	69fb      	ldr	r3, [r7, #28]
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8012e8e:	69fb      	ldr	r3, [r7, #28]
 8012e90:	2200      	movs	r2, #0
 8012e92:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8012e94:	69fb      	ldr	r3, [r7, #28]
 8012e96:	2200      	movs	r2, #0
 8012e98:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8012e9a:	69fb      	ldr	r3, [r7, #28]
 8012e9c:	2200      	movs	r2, #0
 8012e9e:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8012ea0:	69fb      	ldr	r3, [r7, #28]
 8012ea2:	2200      	movs	r2, #0
 8012ea4:	631a      	str	r2, [r3, #48]	@ 0x30
 8012ea6:	69fb      	ldr	r3, [r7, #28]
 8012ea8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012eaa:	69fb      	ldr	r3, [r7, #28]
 8012eac:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012eae:	69fb      	ldr	r3, [r7, #28]
 8012eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012eb2:	69fb      	ldr	r3, [r7, #28]
 8012eb4:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8012eb6:	69fb      	ldr	r3, [r7, #28]
 8012eb8:	2200      	movs	r2, #0
 8012eba:	829a      	strh	r2, [r3, #20]
 8012ebc:	69fb      	ldr	r3, [r7, #28]
 8012ebe:	8a9a      	ldrh	r2, [r3, #20]
 8012ec0:	69fb      	ldr	r3, [r7, #28]
 8012ec2:	825a      	strh	r2, [r3, #18]
 8012ec4:	69fb      	ldr	r3, [r7, #28]
 8012ec6:	8a5a      	ldrh	r2, [r3, #18]
 8012ec8:	69fb      	ldr	r3, [r7, #28]
 8012eca:	821a      	strh	r2, [r3, #16]
 8012ecc:	69fb      	ldr	r3, [r7, #28]
 8012ece:	8a1a      	ldrh	r2, [r3, #16]
 8012ed0:	69fb      	ldr	r3, [r7, #28]
 8012ed2:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8012ed4:	6878      	ldr	r0, [r7, #4]
 8012ed6:	f000 fe99 	bl	8013c0c <dhcp_supplied_address>
 8012eda:	4603      	mov	r3, r0
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d042      	beq.n	8012f66 <dhcp_release_and_stop+0x10a>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8012ee0:	f107 030e 	add.w	r3, r7, #14
 8012ee4:	2207      	movs	r2, #7
 8012ee6:	69f9      	ldr	r1, [r7, #28]
 8012ee8:	6878      	ldr	r0, [r7, #4]
 8012eea:	f000 fd7d 	bl	80139e8 <dhcp_create_msg>
 8012eee:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8012ef0:	69bb      	ldr	r3, [r7, #24]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d034      	beq.n	8012f60 <dhcp_release_and_stop+0x104>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012ef6:	69bb      	ldr	r3, [r7, #24]
 8012ef8:	685b      	ldr	r3, [r3, #4]
 8012efa:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8012efc:	89f8      	ldrh	r0, [r7, #14]
 8012efe:	697b      	ldr	r3, [r7, #20]
 8012f00:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012f04:	2304      	movs	r3, #4
 8012f06:	2236      	movs	r2, #54	@ 0x36
 8012f08:	f000 f86c 	bl	8012fe4 <dhcp_option>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8012f10:	89fc      	ldrh	r4, [r7, #14]
 8012f12:	697b      	ldr	r3, [r7, #20]
 8012f14:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8012f18:	693b      	ldr	r3, [r7, #16]
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	f7f6 faa1 	bl	8009462 <lwip_htonl>
 8012f20:	4603      	mov	r3, r0
 8012f22:	461a      	mov	r2, r3
 8012f24:	4629      	mov	r1, r5
 8012f26:	4620      	mov	r0, r4
 8012f28:	f000 f8e8 	bl	80130fc <dhcp_option_long>
 8012f2c:	4603      	mov	r3, r0
 8012f2e:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012f30:	89f8      	ldrh	r0, [r7, #14]
 8012f32:	697b      	ldr	r3, [r7, #20]
 8012f34:	33f0      	adds	r3, #240	@ 0xf0
 8012f36:	69ba      	ldr	r2, [r7, #24]
 8012f38:	4619      	mov	r1, r3
 8012f3a:	f000 fe39 	bl	8013bb0 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012f3e:	4b18      	ldr	r3, [pc, #96]	@ (8012fa0 <dhcp_release_and_stop+0x144>)
 8012f40:	6818      	ldr	r0, [r3, #0]
 8012f42:	f107 0210 	add.w	r2, r7, #16
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	9300      	str	r3, [sp, #0]
 8012f4a:	2343      	movs	r3, #67	@ 0x43
 8012f4c:	69b9      	ldr	r1, [r7, #24]
 8012f4e:	f7fe f965 	bl	801121c <udp_sendto_if>
      pbuf_free(p_out);
 8012f52:	69b8      	ldr	r0, [r7, #24]
 8012f54:	f7f7 feee 	bl	800ad34 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release: RELEASED, DHCP_STATE_OFF\n"));
 8012f58:	4812      	ldr	r0, [pc, #72]	@ (8012fa4 <dhcp_release_and_stop+0x148>)
 8012f5a:	f003 ff1f 	bl	8016d9c <puts>
 8012f5e:	e002      	b.n	8012f66 <dhcp_release_and_stop+0x10a>
    } else {
      /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
 8012f60:	4811      	ldr	r0, [pc, #68]	@ (8012fa8 <dhcp_release_and_stop+0x14c>)
 8012f62:	f003 ff1b 	bl	8016d9c <puts>
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8012f66:	4b11      	ldr	r3, [pc, #68]	@ (8012fac <dhcp_release_and_stop+0x150>)
 8012f68:	4a10      	ldr	r2, [pc, #64]	@ (8012fac <dhcp_release_and_stop+0x150>)
 8012f6a:	4910      	ldr	r1, [pc, #64]	@ (8012fac <dhcp_release_and_stop+0x150>)
 8012f6c:	6878      	ldr	r0, [r7, #4]
 8012f6e:	f7f7 f9b5 	bl	800a2dc <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8012f72:	2100      	movs	r1, #0
 8012f74:	69f8      	ldr	r0, [r7, #28]
 8012f76:	f000 f81b 	bl	8012fb0 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8012f7a:	69fb      	ldr	r3, [r7, #28]
 8012f7c:	791b      	ldrb	r3, [r3, #4]
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d008      	beq.n	8012f94 <dhcp_release_and_stop+0x138>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8012f82:	f7fe fda3 	bl	8011acc <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8012f86:	69fb      	ldr	r3, [r7, #28]
 8012f88:	2200      	movs	r2, #0
 8012f8a:	711a      	strb	r2, [r3, #4]
 8012f8c:	e002      	b.n	8012f94 <dhcp_release_and_stop+0x138>
    return;
 8012f8e:	bf00      	nop
 8012f90:	e000      	b.n	8012f94 <dhcp_release_and_stop+0x138>
    return;
 8012f92:	bf00      	nop
  }
}
 8012f94:	3720      	adds	r7, #32
 8012f96:	46bd      	mov	sp, r7
 8012f98:	bdb0      	pop	{r4, r5, r7, pc}
 8012f9a:	bf00      	nop
 8012f9c:	0801bf04 	.word	0x0801bf04
 8012fa0:	2400337c 	.word	0x2400337c
 8012fa4:	0801bf1c 	.word	0x0801bf1c
 8012fa8:	0801bf44 	.word	0x0801bf44
 8012fac:	0801dc64 	.word	0x0801dc64

08012fb0 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8012fb0:	b480      	push	{r7}
 8012fb2:	b083      	sub	sp, #12
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
 8012fb8:	460b      	mov	r3, r1
 8012fba:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	795b      	ldrb	r3, [r3, #5]
 8012fc0:	78fa      	ldrb	r2, [r7, #3]
 8012fc2:	429a      	cmp	r2, r3
 8012fc4:	d008      	beq.n	8012fd8 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	78fa      	ldrb	r2, [r7, #3]
 8012fca:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	2200      	movs	r2, #0
 8012fd0:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	811a      	strh	r2, [r3, #8]
  }
}
 8012fd8:	bf00      	nop
 8012fda:	370c      	adds	r7, #12
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe2:	4770      	bx	lr

08012fe4 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b082      	sub	sp, #8
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	6039      	str	r1, [r7, #0]
 8012fec:	4611      	mov	r1, r2
 8012fee:	461a      	mov	r2, r3
 8012ff0:	4603      	mov	r3, r0
 8012ff2:	80fb      	strh	r3, [r7, #6]
 8012ff4:	460b      	mov	r3, r1
 8012ff6:	717b      	strb	r3, [r7, #5]
 8012ff8:	4613      	mov	r3, r2
 8012ffa:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8012ffc:	88fa      	ldrh	r2, [r7, #6]
 8012ffe:	793b      	ldrb	r3, [r7, #4]
 8013000:	4413      	add	r3, r2
 8013002:	3302      	adds	r3, #2
 8013004:	2b44      	cmp	r3, #68	@ 0x44
 8013006:	d906      	bls.n	8013016 <dhcp_option+0x32>
 8013008:	4b0d      	ldr	r3, [pc, #52]	@ (8013040 <dhcp_option+0x5c>)
 801300a:	f240 529a 	movw	r2, #1434	@ 0x59a
 801300e:	490d      	ldr	r1, [pc, #52]	@ (8013044 <dhcp_option+0x60>)
 8013010:	480d      	ldr	r0, [pc, #52]	@ (8013048 <dhcp_option+0x64>)
 8013012:	f003 fe53 	bl	8016cbc <iprintf>
  options[options_out_len++] = option_type;
 8013016:	88fb      	ldrh	r3, [r7, #6]
 8013018:	1c5a      	adds	r2, r3, #1
 801301a:	80fa      	strh	r2, [r7, #6]
 801301c:	461a      	mov	r2, r3
 801301e:	683b      	ldr	r3, [r7, #0]
 8013020:	4413      	add	r3, r2
 8013022:	797a      	ldrb	r2, [r7, #5]
 8013024:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8013026:	88fb      	ldrh	r3, [r7, #6]
 8013028:	1c5a      	adds	r2, r3, #1
 801302a:	80fa      	strh	r2, [r7, #6]
 801302c:	461a      	mov	r2, r3
 801302e:	683b      	ldr	r3, [r7, #0]
 8013030:	4413      	add	r3, r2
 8013032:	793a      	ldrb	r2, [r7, #4]
 8013034:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013036:	88fb      	ldrh	r3, [r7, #6]
}
 8013038:	4618      	mov	r0, r3
 801303a:	3708      	adds	r7, #8
 801303c:	46bd      	mov	sp, r7
 801303e:	bd80      	pop	{r7, pc}
 8013040:	0801b394 	.word	0x0801b394
 8013044:	0801bf74 	.word	0x0801bf74
 8013048:	0801b3f4 	.word	0x0801b3f4

0801304c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b082      	sub	sp, #8
 8013050:	af00      	add	r7, sp, #0
 8013052:	4603      	mov	r3, r0
 8013054:	6039      	str	r1, [r7, #0]
 8013056:	80fb      	strh	r3, [r7, #6]
 8013058:	4613      	mov	r3, r2
 801305a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801305c:	88fb      	ldrh	r3, [r7, #6]
 801305e:	2b43      	cmp	r3, #67	@ 0x43
 8013060:	d906      	bls.n	8013070 <dhcp_option_byte+0x24>
 8013062:	4b0a      	ldr	r3, [pc, #40]	@ (801308c <dhcp_option_byte+0x40>)
 8013064:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8013068:	4909      	ldr	r1, [pc, #36]	@ (8013090 <dhcp_option_byte+0x44>)
 801306a:	480a      	ldr	r0, [pc, #40]	@ (8013094 <dhcp_option_byte+0x48>)
 801306c:	f003 fe26 	bl	8016cbc <iprintf>
  options[options_out_len++] = value;
 8013070:	88fb      	ldrh	r3, [r7, #6]
 8013072:	1c5a      	adds	r2, r3, #1
 8013074:	80fa      	strh	r2, [r7, #6]
 8013076:	461a      	mov	r2, r3
 8013078:	683b      	ldr	r3, [r7, #0]
 801307a:	4413      	add	r3, r2
 801307c:	797a      	ldrb	r2, [r7, #5]
 801307e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013080:	88fb      	ldrh	r3, [r7, #6]
}
 8013082:	4618      	mov	r0, r3
 8013084:	3708      	adds	r7, #8
 8013086:	46bd      	mov	sp, r7
 8013088:	bd80      	pop	{r7, pc}
 801308a:	bf00      	nop
 801308c:	0801b394 	.word	0x0801b394
 8013090:	0801bfb8 	.word	0x0801bfb8
 8013094:	0801b3f4 	.word	0x0801b3f4

08013098 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8013098:	b580      	push	{r7, lr}
 801309a:	b082      	sub	sp, #8
 801309c:	af00      	add	r7, sp, #0
 801309e:	4603      	mov	r3, r0
 80130a0:	6039      	str	r1, [r7, #0]
 80130a2:	80fb      	strh	r3, [r7, #6]
 80130a4:	4613      	mov	r3, r2
 80130a6:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80130a8:	88fb      	ldrh	r3, [r7, #6]
 80130aa:	3302      	adds	r3, #2
 80130ac:	2b44      	cmp	r3, #68	@ 0x44
 80130ae:	d906      	bls.n	80130be <dhcp_option_short+0x26>
 80130b0:	4b0f      	ldr	r3, [pc, #60]	@ (80130f0 <dhcp_option_short+0x58>)
 80130b2:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 80130b6:	490f      	ldr	r1, [pc, #60]	@ (80130f4 <dhcp_option_short+0x5c>)
 80130b8:	480f      	ldr	r0, [pc, #60]	@ (80130f8 <dhcp_option_short+0x60>)
 80130ba:	f003 fdff 	bl	8016cbc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80130be:	88bb      	ldrh	r3, [r7, #4]
 80130c0:	0a1b      	lsrs	r3, r3, #8
 80130c2:	b29a      	uxth	r2, r3
 80130c4:	88fb      	ldrh	r3, [r7, #6]
 80130c6:	1c59      	adds	r1, r3, #1
 80130c8:	80f9      	strh	r1, [r7, #6]
 80130ca:	4619      	mov	r1, r3
 80130cc:	683b      	ldr	r3, [r7, #0]
 80130ce:	440b      	add	r3, r1
 80130d0:	b2d2      	uxtb	r2, r2
 80130d2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80130d4:	88fb      	ldrh	r3, [r7, #6]
 80130d6:	1c5a      	adds	r2, r3, #1
 80130d8:	80fa      	strh	r2, [r7, #6]
 80130da:	461a      	mov	r2, r3
 80130dc:	683b      	ldr	r3, [r7, #0]
 80130de:	4413      	add	r3, r2
 80130e0:	88ba      	ldrh	r2, [r7, #4]
 80130e2:	b2d2      	uxtb	r2, r2
 80130e4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80130e6:	88fb      	ldrh	r3, [r7, #6]
}
 80130e8:	4618      	mov	r0, r3
 80130ea:	3708      	adds	r7, #8
 80130ec:	46bd      	mov	sp, r7
 80130ee:	bd80      	pop	{r7, pc}
 80130f0:	0801b394 	.word	0x0801b394
 80130f4:	0801bff0 	.word	0x0801bff0
 80130f8:	0801b3f4 	.word	0x0801b3f4

080130fc <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b084      	sub	sp, #16
 8013100:	af00      	add	r7, sp, #0
 8013102:	4603      	mov	r3, r0
 8013104:	60b9      	str	r1, [r7, #8]
 8013106:	607a      	str	r2, [r7, #4]
 8013108:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801310a:	89fb      	ldrh	r3, [r7, #14]
 801310c:	3304      	adds	r3, #4
 801310e:	2b44      	cmp	r3, #68	@ 0x44
 8013110:	d906      	bls.n	8013120 <dhcp_option_long+0x24>
 8013112:	4b19      	ldr	r3, [pc, #100]	@ (8013178 <dhcp_option_long+0x7c>)
 8013114:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 8013118:	4918      	ldr	r1, [pc, #96]	@ (801317c <dhcp_option_long+0x80>)
 801311a:	4819      	ldr	r0, [pc, #100]	@ (8013180 <dhcp_option_long+0x84>)
 801311c:	f003 fdce 	bl	8016cbc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	0e1a      	lsrs	r2, r3, #24
 8013124:	89fb      	ldrh	r3, [r7, #14]
 8013126:	1c59      	adds	r1, r3, #1
 8013128:	81f9      	strh	r1, [r7, #14]
 801312a:	4619      	mov	r1, r3
 801312c:	68bb      	ldr	r3, [r7, #8]
 801312e:	440b      	add	r3, r1
 8013130:	b2d2      	uxtb	r2, r2
 8013132:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	0c1a      	lsrs	r2, r3, #16
 8013138:	89fb      	ldrh	r3, [r7, #14]
 801313a:	1c59      	adds	r1, r3, #1
 801313c:	81f9      	strh	r1, [r7, #14]
 801313e:	4619      	mov	r1, r3
 8013140:	68bb      	ldr	r3, [r7, #8]
 8013142:	440b      	add	r3, r1
 8013144:	b2d2      	uxtb	r2, r2
 8013146:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	0a1a      	lsrs	r2, r3, #8
 801314c:	89fb      	ldrh	r3, [r7, #14]
 801314e:	1c59      	adds	r1, r3, #1
 8013150:	81f9      	strh	r1, [r7, #14]
 8013152:	4619      	mov	r1, r3
 8013154:	68bb      	ldr	r3, [r7, #8]
 8013156:	440b      	add	r3, r1
 8013158:	b2d2      	uxtb	r2, r2
 801315a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801315c:	89fb      	ldrh	r3, [r7, #14]
 801315e:	1c5a      	adds	r2, r3, #1
 8013160:	81fa      	strh	r2, [r7, #14]
 8013162:	461a      	mov	r2, r3
 8013164:	68bb      	ldr	r3, [r7, #8]
 8013166:	4413      	add	r3, r2
 8013168:	687a      	ldr	r2, [r7, #4]
 801316a:	b2d2      	uxtb	r2, r2
 801316c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801316e:	89fb      	ldrh	r3, [r7, #14]
}
 8013170:	4618      	mov	r0, r3
 8013172:	3710      	adds	r7, #16
 8013174:	46bd      	mov	sp, r7
 8013176:	bd80      	pop	{r7, pc}
 8013178:	0801b394 	.word	0x0801b394
 801317c:	0801c02c 	.word	0x0801c02c
 8013180:	0801b3f4 	.word	0x0801b3f4

08013184 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8013184:	b580      	push	{r7, lr}
 8013186:	b090      	sub	sp, #64	@ 0x40
 8013188:	af00      	add	r7, sp, #0
 801318a:	6078      	str	r0, [r7, #4]
 801318c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801318e:	2300      	movs	r3, #0
 8013190:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 8013192:	2300      	movs	r3, #0
 8013194:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8013196:	2208      	movs	r2, #8
 8013198:	2100      	movs	r1, #0
 801319a:	48b5      	ldr	r0, [pc, #724]	@ (8013470 <dhcp_parse_reply+0x2ec>)
 801319c:	f003 feee 	bl	8016f7c <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	895b      	ldrh	r3, [r3, #10]
 80131a4:	2b2b      	cmp	r3, #43	@ 0x2b
 80131a6:	d802      	bhi.n	80131ae <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80131a8:	f06f 0301 	mvn.w	r3, #1
 80131ac:	e2d7      	b.n	801375e <dhcp_parse_reply+0x5da>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	685b      	ldr	r3, [r3, #4]
 80131b2:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80131b4:	23f0      	movs	r3, #240	@ 0xf0
 80131b6:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	891b      	ldrh	r3, [r3, #8]
 80131bc:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80131c2:	e00c      	b.n	80131de <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80131c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131c6:	895b      	ldrh	r3, [r3, #10]
 80131c8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80131ca:	1ad3      	subs	r3, r2, r3
 80131cc:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80131ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131d0:	895b      	ldrh	r3, [r3, #10]
 80131d2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80131d4:	1ad3      	subs	r3, r2, r3
 80131d6:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 80131d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80131de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d004      	beq.n	80131ee <dhcp_parse_reply+0x6a>
 80131e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131e6:	895b      	ldrh	r3, [r3, #10]
 80131e8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80131ea:	429a      	cmp	r2, r3
 80131ec:	d2ea      	bcs.n	80131c4 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80131ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d102      	bne.n	80131fa <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80131f4:	f06f 0301 	mvn.w	r3, #1
 80131f8:	e2b1      	b.n	801375e <dhcp_parse_reply+0x5da>
  }
  offset = options_idx;
 80131fa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80131fc:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 80131fe:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8013200:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 8013202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013204:	685b      	ldr	r3, [r3, #4]
 8013206:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013208:	e23e      	b.n	8013688 <dhcp_parse_reply+0x504>
    u8_t op = options[offset];
 801320a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801320c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801320e:	4413      	add	r3, r2
 8013210:	781b      	ldrb	r3, [r3, #0]
 8013212:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8013214:	2300      	movs	r3, #0
 8013216:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 801321a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801321e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8013220:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013222:	3302      	adds	r3, #2
 8013224:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8013226:	8bfa      	ldrh	r2, [r7, #30]
 8013228:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801322a:	429a      	cmp	r2, r3
 801322c:	d202      	bcs.n	8013234 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801322e:	f06f 0301 	mvn.w	r3, #1
 8013232:	e294      	b.n	801375e <dhcp_parse_reply+0x5da>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8013234:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013236:	3301      	adds	r3, #1
 8013238:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801323a:	8952      	ldrh	r2, [r2, #10]
 801323c:	4293      	cmp	r3, r2
 801323e:	da07      	bge.n	8013250 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8013240:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013242:	3301      	adds	r3, #1
 8013244:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013246:	4413      	add	r3, r2
 8013248:	781b      	ldrb	r3, [r3, #0]
 801324a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801324e:	e00b      	b.n	8013268 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8013250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d004      	beq.n	8013262 <dhcp_parse_reply+0xde>
 8013258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	685b      	ldr	r3, [r3, #4]
 801325e:	781b      	ldrb	r3, [r3, #0]
 8013260:	e000      	b.n	8013264 <dhcp_parse_reply+0xe0>
 8013262:	2300      	movs	r3, #0
 8013264:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8013268:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801326c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 8013270:	7dfb      	ldrb	r3, [r7, #23]
 8013272:	2b3b      	cmp	r3, #59	@ 0x3b
 8013274:	f200 812c 	bhi.w	80134d0 <dhcp_parse_reply+0x34c>
 8013278:	a201      	add	r2, pc, #4	@ (adr r2, 8013280 <dhcp_parse_reply+0xfc>)
 801327a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801327e:	bf00      	nop
 8013280:	08013371 	.word	0x08013371
 8013284:	08013381 	.word	0x08013381
 8013288:	080134d1 	.word	0x080134d1
 801328c:	080133a3 	.word	0x080133a3
 8013290:	080134d1 	.word	0x080134d1
 8013294:	080134d1 	.word	0x080134d1
 8013298:	080134d1 	.word	0x080134d1
 801329c:	080134d1 	.word	0x080134d1
 80132a0:	080134d1 	.word	0x080134d1
 80132a4:	080134d1 	.word	0x080134d1
 80132a8:	080134d1 	.word	0x080134d1
 80132ac:	080134d1 	.word	0x080134d1
 80132b0:	080134d1 	.word	0x080134d1
 80132b4:	080134d1 	.word	0x080134d1
 80132b8:	080134d1 	.word	0x080134d1
 80132bc:	080134d1 	.word	0x080134d1
 80132c0:	080134d1 	.word	0x080134d1
 80132c4:	080134d1 	.word	0x080134d1
 80132c8:	080134d1 	.word	0x080134d1
 80132cc:	080134d1 	.word	0x080134d1
 80132d0:	080134d1 	.word	0x080134d1
 80132d4:	080134d1 	.word	0x080134d1
 80132d8:	080134d1 	.word	0x080134d1
 80132dc:	080134d1 	.word	0x080134d1
 80132e0:	080134d1 	.word	0x080134d1
 80132e4:	080134d1 	.word	0x080134d1
 80132e8:	080134d1 	.word	0x080134d1
 80132ec:	080134d1 	.word	0x080134d1
 80132f0:	080134d1 	.word	0x080134d1
 80132f4:	080134d1 	.word	0x080134d1
 80132f8:	080134d1 	.word	0x080134d1
 80132fc:	080134d1 	.word	0x080134d1
 8013300:	080134d1 	.word	0x080134d1
 8013304:	080134d1 	.word	0x080134d1
 8013308:	080134d1 	.word	0x080134d1
 801330c:	080134d1 	.word	0x080134d1
 8013310:	080134d1 	.word	0x080134d1
 8013314:	080134d1 	.word	0x080134d1
 8013318:	080134d1 	.word	0x080134d1
 801331c:	080134d1 	.word	0x080134d1
 8013320:	080134d1 	.word	0x080134d1
 8013324:	080134d1 	.word	0x080134d1
 8013328:	080134d1 	.word	0x080134d1
 801332c:	080134d1 	.word	0x080134d1
 8013330:	080134d1 	.word	0x080134d1
 8013334:	080134d1 	.word	0x080134d1
 8013338:	080134d1 	.word	0x080134d1
 801333c:	080134d1 	.word	0x080134d1
 8013340:	080134d1 	.word	0x080134d1
 8013344:	080134d1 	.word	0x080134d1
 8013348:	080134d1 	.word	0x080134d1
 801334c:	080133cf 	.word	0x080133cf
 8013350:	080133f1 	.word	0x080133f1
 8013354:	0801342d 	.word	0x0801342d
 8013358:	0801344f 	.word	0x0801344f
 801335c:	080134d1 	.word	0x080134d1
 8013360:	080134d1 	.word	0x080134d1
 8013364:	080134d1 	.word	0x080134d1
 8013368:	0801348d 	.word	0x0801348d
 801336c:	080134af 	.word	0x080134af
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8013370:	2300      	movs	r3, #0
 8013372:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013376:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801337a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 801337e:	e0b0      	b.n	80134e2 <dhcp_parse_reply+0x35e>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013380:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013384:	2b04      	cmp	r3, #4
 8013386:	d009      	beq.n	801339c <dhcp_parse_reply+0x218>
 8013388:	4b3a      	ldr	r3, [pc, #232]	@ (8013474 <dhcp_parse_reply+0x2f0>)
 801338a:	f240 622e 	movw	r2, #1582	@ 0x62e
 801338e:	493a      	ldr	r1, [pc, #232]	@ (8013478 <dhcp_parse_reply+0x2f4>)
 8013390:	483a      	ldr	r0, [pc, #232]	@ (801347c <dhcp_parse_reply+0x2f8>)
 8013392:	f003 fc93 	bl	8016cbc <iprintf>
 8013396:	f06f 0305 	mvn.w	r3, #5
 801339a:	e1e0      	b.n	801375e <dhcp_parse_reply+0x5da>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801339c:	2306      	movs	r3, #6
 801339e:	623b      	str	r3, [r7, #32]
        break;
 80133a0:	e09f      	b.n	80134e2 <dhcp_parse_reply+0x35e>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80133a2:	2304      	movs	r3, #4
 80133a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80133a8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80133ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80133b0:	429a      	cmp	r2, r3
 80133b2:	d209      	bcs.n	80133c8 <dhcp_parse_reply+0x244>
 80133b4:	4b2f      	ldr	r3, [pc, #188]	@ (8013474 <dhcp_parse_reply+0x2f0>)
 80133b6:	f240 6233 	movw	r2, #1587	@ 0x633
 80133ba:	4931      	ldr	r1, [pc, #196]	@ (8013480 <dhcp_parse_reply+0x2fc>)
 80133bc:	482f      	ldr	r0, [pc, #188]	@ (801347c <dhcp_parse_reply+0x2f8>)
 80133be:	f003 fc7d 	bl	8016cbc <iprintf>
 80133c2:	f06f 0305 	mvn.w	r3, #5
 80133c6:	e1ca      	b.n	801375e <dhcp_parse_reply+0x5da>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80133c8:	2307      	movs	r3, #7
 80133ca:	623b      	str	r3, [r7, #32]
        break;
 80133cc:	e089      	b.n	80134e2 <dhcp_parse_reply+0x35e>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80133ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80133d2:	2b04      	cmp	r3, #4
 80133d4:	d009      	beq.n	80133ea <dhcp_parse_reply+0x266>
 80133d6:	4b27      	ldr	r3, [pc, #156]	@ (8013474 <dhcp_parse_reply+0x2f0>)
 80133d8:	f240 6241 	movw	r2, #1601	@ 0x641
 80133dc:	4926      	ldr	r1, [pc, #152]	@ (8013478 <dhcp_parse_reply+0x2f4>)
 80133de:	4827      	ldr	r0, [pc, #156]	@ (801347c <dhcp_parse_reply+0x2f8>)
 80133e0:	f003 fc6c 	bl	8016cbc <iprintf>
 80133e4:	f06f 0305 	mvn.w	r3, #5
 80133e8:	e1b9      	b.n	801375e <dhcp_parse_reply+0x5da>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80133ea:	2303      	movs	r3, #3
 80133ec:	623b      	str	r3, [r7, #32]
        break;
 80133ee:	e078      	b.n	80134e2 <dhcp_parse_reply+0x35e>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80133f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80133f4:	2b01      	cmp	r3, #1
 80133f6:	d009      	beq.n	801340c <dhcp_parse_reply+0x288>
 80133f8:	4b1e      	ldr	r3, [pc, #120]	@ (8013474 <dhcp_parse_reply+0x2f0>)
 80133fa:	f240 624f 	movw	r2, #1615	@ 0x64f
 80133fe:	4921      	ldr	r1, [pc, #132]	@ (8013484 <dhcp_parse_reply+0x300>)
 8013400:	481e      	ldr	r0, [pc, #120]	@ (801347c <dhcp_parse_reply+0x2f8>)
 8013402:	f003 fc5b 	bl	8016cbc <iprintf>
 8013406:	f06f 0305 	mvn.w	r3, #5
 801340a:	e1a8      	b.n	801375e <dhcp_parse_reply+0x5da>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801340c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801340e:	2bf0      	cmp	r3, #240	@ 0xf0
 8013410:	d009      	beq.n	8013426 <dhcp_parse_reply+0x2a2>
 8013412:	4b18      	ldr	r3, [pc, #96]	@ (8013474 <dhcp_parse_reply+0x2f0>)
 8013414:	f240 6251 	movw	r2, #1617	@ 0x651
 8013418:	491b      	ldr	r1, [pc, #108]	@ (8013488 <dhcp_parse_reply+0x304>)
 801341a:	4818      	ldr	r0, [pc, #96]	@ (801347c <dhcp_parse_reply+0x2f8>)
 801341c:	f003 fc4e 	bl	8016cbc <iprintf>
 8013420:	f06f 0305 	mvn.w	r3, #5
 8013424:	e19b      	b.n	801375e <dhcp_parse_reply+0x5da>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8013426:	2300      	movs	r3, #0
 8013428:	623b      	str	r3, [r7, #32]
        break;
 801342a:	e05a      	b.n	80134e2 <dhcp_parse_reply+0x35e>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801342c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013430:	2b01      	cmp	r3, #1
 8013432:	d009      	beq.n	8013448 <dhcp_parse_reply+0x2c4>
 8013434:	4b0f      	ldr	r3, [pc, #60]	@ (8013474 <dhcp_parse_reply+0x2f0>)
 8013436:	f240 6255 	movw	r2, #1621	@ 0x655
 801343a:	4912      	ldr	r1, [pc, #72]	@ (8013484 <dhcp_parse_reply+0x300>)
 801343c:	480f      	ldr	r0, [pc, #60]	@ (801347c <dhcp_parse_reply+0x2f8>)
 801343e:	f003 fc3d 	bl	8016cbc <iprintf>
 8013442:	f06f 0305 	mvn.w	r3, #5
 8013446:	e18a      	b.n	801375e <dhcp_parse_reply+0x5da>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8013448:	2301      	movs	r3, #1
 801344a:	623b      	str	r3, [r7, #32]
        break;
 801344c:	e049      	b.n	80134e2 <dhcp_parse_reply+0x35e>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801344e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013452:	2b04      	cmp	r3, #4
 8013454:	d009      	beq.n	801346a <dhcp_parse_reply+0x2e6>
 8013456:	4b07      	ldr	r3, [pc, #28]	@ (8013474 <dhcp_parse_reply+0x2f0>)
 8013458:	f240 6259 	movw	r2, #1625	@ 0x659
 801345c:	4906      	ldr	r1, [pc, #24]	@ (8013478 <dhcp_parse_reply+0x2f4>)
 801345e:	4807      	ldr	r0, [pc, #28]	@ (801347c <dhcp_parse_reply+0x2f8>)
 8013460:	f003 fc2c 	bl	8016cbc <iprintf>
 8013464:	f06f 0305 	mvn.w	r3, #5
 8013468:	e179      	b.n	801375e <dhcp_parse_reply+0x5da>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801346a:	2302      	movs	r3, #2
 801346c:	623b      	str	r3, [r7, #32]
        break;
 801346e:	e038      	b.n	80134e2 <dhcp_parse_reply+0x35e>
 8013470:	24003374 	.word	0x24003374
 8013474:	0801b394 	.word	0x0801b394
 8013478:	0801c068 	.word	0x0801c068
 801347c:	0801b3f4 	.word	0x0801b3f4
 8013480:	0801c074 	.word	0x0801c074
 8013484:	0801c088 	.word	0x0801c088
 8013488:	0801c094 	.word	0x0801c094
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801348c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013490:	2b04      	cmp	r3, #4
 8013492:	d009      	beq.n	80134a8 <dhcp_parse_reply+0x324>
 8013494:	4b9e      	ldr	r3, [pc, #632]	@ (8013710 <dhcp_parse_reply+0x58c>)
 8013496:	f240 625d 	movw	r2, #1629	@ 0x65d
 801349a:	499e      	ldr	r1, [pc, #632]	@ (8013714 <dhcp_parse_reply+0x590>)
 801349c:	489e      	ldr	r0, [pc, #632]	@ (8013718 <dhcp_parse_reply+0x594>)
 801349e:	f003 fc0d 	bl	8016cbc <iprintf>
 80134a2:	f06f 0305 	mvn.w	r3, #5
 80134a6:	e15a      	b.n	801375e <dhcp_parse_reply+0x5da>
        decode_idx = DHCP_OPTION_IDX_T1;
 80134a8:	2304      	movs	r3, #4
 80134aa:	623b      	str	r3, [r7, #32]
        break;
 80134ac:	e019      	b.n	80134e2 <dhcp_parse_reply+0x35e>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80134ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80134b2:	2b04      	cmp	r3, #4
 80134b4:	d009      	beq.n	80134ca <dhcp_parse_reply+0x346>
 80134b6:	4b96      	ldr	r3, [pc, #600]	@ (8013710 <dhcp_parse_reply+0x58c>)
 80134b8:	f240 6261 	movw	r2, #1633	@ 0x661
 80134bc:	4995      	ldr	r1, [pc, #596]	@ (8013714 <dhcp_parse_reply+0x590>)
 80134be:	4896      	ldr	r0, [pc, #600]	@ (8013718 <dhcp_parse_reply+0x594>)
 80134c0:	f003 fbfc 	bl	8016cbc <iprintf>
 80134c4:	f06f 0305 	mvn.w	r3, #5
 80134c8:	e149      	b.n	801375e <dhcp_parse_reply+0x5da>
        decode_idx = DHCP_OPTION_IDX_T2;
 80134ca:	2305      	movs	r3, #5
 80134cc:	623b      	str	r3, [r7, #32]
        break;
 80134ce:	e008      	b.n	80134e2 <dhcp_parse_reply+0x35e>
      default:
        decode_len = 0;
 80134d0:	2300      	movs	r3, #0
 80134d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
 80134d6:	7dfb      	ldrb	r3, [r7, #23]
 80134d8:	4619      	mov	r1, r3
 80134da:	4890      	ldr	r0, [pc, #576]	@ (801371c <dhcp_parse_reply+0x598>)
 80134dc:	f003 fbee 	bl	8016cbc <iprintf>
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80134e0:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80134e2:	7dfb      	ldrb	r3, [r7, #23]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d103      	bne.n	80134f0 <dhcp_parse_reply+0x36c>
      offset++;
 80134e8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80134ea:	3301      	adds	r3, #1
 80134ec:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80134ee:	e0a1      	b.n	8013634 <dhcp_parse_reply+0x4b0>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80134f0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80134f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80134f6:	4413      	add	r3, r2
 80134f8:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 80134fc:	4293      	cmp	r3, r2
 80134fe:	dd02      	ble.n	8013506 <dhcp_parse_reply+0x382>
        /* overflow */
        return ERR_BUF;
 8013500:	f06f 0301 	mvn.w	r3, #1
 8013504:	e12b      	b.n	801375e <dhcp_parse_reply+0x5da>
      }
      offset = (u16_t)(offset + len + 2);
 8013506:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801350a:	b29a      	uxth	r2, r3
 801350c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801350e:	4413      	add	r3, r2
 8013510:	b29b      	uxth	r3, r3
 8013512:	3302      	adds	r3, #2
 8013514:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 8013516:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801351a:	2b00      	cmp	r3, #0
 801351c:	f000 808a 	beq.w	8013634 <dhcp_parse_reply+0x4b0>
        u32_t value = 0;
 8013520:	2300      	movs	r3, #0
 8013522:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8013524:	6a3b      	ldr	r3, [r7, #32]
 8013526:	2b00      	cmp	r3, #0
 8013528:	db02      	blt.n	8013530 <dhcp_parse_reply+0x3ac>
 801352a:	6a3b      	ldr	r3, [r7, #32]
 801352c:	2b07      	cmp	r3, #7
 801352e:	dd06      	ble.n	801353e <dhcp_parse_reply+0x3ba>
 8013530:	4b77      	ldr	r3, [pc, #476]	@ (8013710 <dhcp_parse_reply+0x58c>)
 8013532:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 8013536:	497a      	ldr	r1, [pc, #488]	@ (8013720 <dhcp_parse_reply+0x59c>)
 8013538:	4877      	ldr	r0, [pc, #476]	@ (8013718 <dhcp_parse_reply+0x594>)
 801353a:	f003 fbbf 	bl	8016cbc <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801353e:	4a79      	ldr	r2, [pc, #484]	@ (8013724 <dhcp_parse_reply+0x5a0>)
 8013540:	6a3b      	ldr	r3, [r7, #32]
 8013542:	4413      	add	r3, r2
 8013544:	781b      	ldrb	r3, [r3, #0]
 8013546:	2b00      	cmp	r3, #0
 8013548:	d174      	bne.n	8013634 <dhcp_parse_reply+0x4b0>
          copy_len = LWIP_MIN(decode_len, 4);
 801354a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801354e:	2b04      	cmp	r3, #4
 8013550:	bf28      	it	cs
 8013552:	2304      	movcs	r3, #4
 8013554:	b2db      	uxtb	r3, r3
 8013556:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8013558:	8bfb      	ldrh	r3, [r7, #30]
 801355a:	8aba      	ldrh	r2, [r7, #20]
 801355c:	f107 0108 	add.w	r1, r7, #8
 8013560:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013562:	f7f7 fe0d 	bl	800b180 <pbuf_copy_partial>
 8013566:	4603      	mov	r3, r0
 8013568:	461a      	mov	r2, r3
 801356a:	8abb      	ldrh	r3, [r7, #20]
 801356c:	4293      	cmp	r3, r2
 801356e:	d002      	beq.n	8013576 <dhcp_parse_reply+0x3f2>
            return ERR_BUF;
 8013570:	f06f 0301 	mvn.w	r3, #1
 8013574:	e0f3      	b.n	801375e <dhcp_parse_reply+0x5da>
          }
          if (decode_len > 4) {
 8013576:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801357a:	2b04      	cmp	r3, #4
 801357c:	d933      	bls.n	80135e6 <dhcp_parse_reply+0x462>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801357e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013582:	f003 0303 	and.w	r3, r3, #3
 8013586:	b2db      	uxtb	r3, r3
 8013588:	2b00      	cmp	r3, #0
 801358a:	d009      	beq.n	80135a0 <dhcp_parse_reply+0x41c>
 801358c:	4b60      	ldr	r3, [pc, #384]	@ (8013710 <dhcp_parse_reply+0x58c>)
 801358e:	f240 6281 	movw	r2, #1665	@ 0x681
 8013592:	4965      	ldr	r1, [pc, #404]	@ (8013728 <dhcp_parse_reply+0x5a4>)
 8013594:	4860      	ldr	r0, [pc, #384]	@ (8013718 <dhcp_parse_reply+0x594>)
 8013596:	f003 fb91 	bl	8016cbc <iprintf>
 801359a:	f06f 0305 	mvn.w	r3, #5
 801359e:	e0de      	b.n	801375e <dhcp_parse_reply+0x5da>
            dhcp_got_option(dhcp, decode_idx);
 80135a0:	4a60      	ldr	r2, [pc, #384]	@ (8013724 <dhcp_parse_reply+0x5a0>)
 80135a2:	6a3b      	ldr	r3, [r7, #32]
 80135a4:	4413      	add	r3, r2
 80135a6:	2201      	movs	r2, #1
 80135a8:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80135aa:	68bb      	ldr	r3, [r7, #8]
 80135ac:	4618      	mov	r0, r3
 80135ae:	f7f5 ff58 	bl	8009462 <lwip_htonl>
 80135b2:	4602      	mov	r2, r0
 80135b4:	495d      	ldr	r1, [pc, #372]	@ (801372c <dhcp_parse_reply+0x5a8>)
 80135b6:	6a3b      	ldr	r3, [r7, #32]
 80135b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80135bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80135c0:	3b04      	subs	r3, #4
 80135c2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80135c6:	8bfb      	ldrh	r3, [r7, #30]
 80135c8:	3304      	adds	r3, #4
 80135ca:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80135cc:	8a7a      	ldrh	r2, [r7, #18]
 80135ce:	8bfb      	ldrh	r3, [r7, #30]
 80135d0:	429a      	cmp	r2, r3
 80135d2:	d202      	bcs.n	80135da <dhcp_parse_reply+0x456>
              /* overflow */
              return ERR_BUF;
 80135d4:	f06f 0301 	mvn.w	r3, #1
 80135d8:	e0c1      	b.n	801375e <dhcp_parse_reply+0x5da>
            }
            val_offset = next_val_offset;
 80135da:	8a7b      	ldrh	r3, [r7, #18]
 80135dc:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80135de:	6a3b      	ldr	r3, [r7, #32]
 80135e0:	3301      	adds	r3, #1
 80135e2:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80135e4:	e79e      	b.n	8013524 <dhcp_parse_reply+0x3a0>
          } else if (decode_len == 4) {
 80135e6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80135ea:	2b04      	cmp	r3, #4
 80135ec:	d106      	bne.n	80135fc <dhcp_parse_reply+0x478>
            value = lwip_ntohl(value);
 80135ee:	68bb      	ldr	r3, [r7, #8]
 80135f0:	4618      	mov	r0, r3
 80135f2:	f7f5 ff36 	bl	8009462 <lwip_htonl>
 80135f6:	4603      	mov	r3, r0
 80135f8:	60bb      	str	r3, [r7, #8]
 80135fa:	e011      	b.n	8013620 <dhcp_parse_reply+0x49c>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80135fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013600:	2b01      	cmp	r3, #1
 8013602:	d009      	beq.n	8013618 <dhcp_parse_reply+0x494>
 8013604:	4b42      	ldr	r3, [pc, #264]	@ (8013710 <dhcp_parse_reply+0x58c>)
 8013606:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 801360a:	4949      	ldr	r1, [pc, #292]	@ (8013730 <dhcp_parse_reply+0x5ac>)
 801360c:	4842      	ldr	r0, [pc, #264]	@ (8013718 <dhcp_parse_reply+0x594>)
 801360e:	f003 fb55 	bl	8016cbc <iprintf>
 8013612:	f06f 0305 	mvn.w	r3, #5
 8013616:	e0a2      	b.n	801375e <dhcp_parse_reply+0x5da>
            value = ((u8_t *)&value)[0];
 8013618:	f107 0308 	add.w	r3, r7, #8
 801361c:	781b      	ldrb	r3, [r3, #0]
 801361e:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8013620:	4a40      	ldr	r2, [pc, #256]	@ (8013724 <dhcp_parse_reply+0x5a0>)
 8013622:	6a3b      	ldr	r3, [r7, #32]
 8013624:	4413      	add	r3, r2
 8013626:	2201      	movs	r2, #1
 8013628:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801362a:	68ba      	ldr	r2, [r7, #8]
 801362c:	493f      	ldr	r1, [pc, #252]	@ (801372c <dhcp_parse_reply+0x5a8>)
 801362e:	6a3b      	ldr	r3, [r7, #32]
 8013630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8013634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013636:	895b      	ldrh	r3, [r3, #10]
 8013638:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801363a:	429a      	cmp	r2, r3
 801363c:	d324      	bcc.n	8013688 <dhcp_parse_reply+0x504>
      offset = (u16_t)(offset - q->len);
 801363e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013640:	895b      	ldrh	r3, [r3, #10]
 8013642:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013644:	1ad3      	subs	r3, r2, r3
 8013646:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8013648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801364a:	895b      	ldrh	r3, [r3, #10]
 801364c:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 801364e:	1ad3      	subs	r3, r2, r3
 8013650:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 8013652:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013654:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8013656:	429a      	cmp	r2, r3
 8013658:	d213      	bcs.n	8013682 <dhcp_parse_reply+0x4fe>
        q = q->next;
 801365a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8013660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013662:	2b00      	cmp	r3, #0
 8013664:	d109      	bne.n	801367a <dhcp_parse_reply+0x4f6>
 8013666:	4b2a      	ldr	r3, [pc, #168]	@ (8013710 <dhcp_parse_reply+0x58c>)
 8013668:	f240 629d 	movw	r2, #1693	@ 0x69d
 801366c:	4931      	ldr	r1, [pc, #196]	@ (8013734 <dhcp_parse_reply+0x5b0>)
 801366e:	482a      	ldr	r0, [pc, #168]	@ (8013718 <dhcp_parse_reply+0x594>)
 8013670:	f003 fb24 	bl	8016cbc <iprintf>
 8013674:	f06f 0305 	mvn.w	r3, #5
 8013678:	e071      	b.n	801375e <dhcp_parse_reply+0x5da>
        options = (u8_t *)q->payload;
 801367a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801367c:	685b      	ldr	r3, [r3, #4]
 801367e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013680:	e002      	b.n	8013688 <dhcp_parse_reply+0x504>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8013682:	f06f 0301 	mvn.w	r3, #1
 8013686:	e06a      	b.n	801375e <dhcp_parse_reply+0x5da>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801368a:	2b00      	cmp	r3, #0
 801368c:	d00a      	beq.n	80136a4 <dhcp_parse_reply+0x520>
 801368e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013690:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8013692:	429a      	cmp	r2, r3
 8013694:	d206      	bcs.n	80136a4 <dhcp_parse_reply+0x520>
 8013696:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013698:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801369a:	4413      	add	r3, r2
 801369c:	781b      	ldrb	r3, [r3, #0]
 801369e:	2bff      	cmp	r3, #255	@ 0xff
 80136a0:	f47f adb3 	bne.w	801320a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80136a4:	4b1f      	ldr	r3, [pc, #124]	@ (8013724 <dhcp_parse_reply+0x5a0>)
 80136a6:	781b      	ldrb	r3, [r3, #0]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d027      	beq.n	80136fc <dhcp_parse_reply+0x578>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80136ac:	4b1f      	ldr	r3, [pc, #124]	@ (801372c <dhcp_parse_reply+0x5a8>)
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80136b2:	4b1c      	ldr	r3, [pc, #112]	@ (8013724 <dhcp_parse_reply+0x5a0>)
 80136b4:	2200      	movs	r2, #0
 80136b6:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	2b01      	cmp	r3, #1
 80136bc:	d105      	bne.n	80136ca <dhcp_parse_reply+0x546>
      parse_file_as_options = 1;
 80136be:	2301      	movs	r3, #1
 80136c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
 80136c2:	481d      	ldr	r0, [pc, #116]	@ (8013738 <dhcp_parse_reply+0x5b4>)
 80136c4:	f003 fb6a 	bl	8016d9c <puts>
 80136c8:	e018      	b.n	80136fc <dhcp_parse_reply+0x578>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	2b02      	cmp	r3, #2
 80136ce:	d105      	bne.n	80136dc <dhcp_parse_reply+0x558>
      parse_sname_as_options = 1;
 80136d0:	2301      	movs	r3, #1
 80136d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
 80136d4:	4819      	ldr	r0, [pc, #100]	@ (801373c <dhcp_parse_reply+0x5b8>)
 80136d6:	f003 fb61 	bl	8016d9c <puts>
 80136da:	e00f      	b.n	80136fc <dhcp_parse_reply+0x578>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	2b03      	cmp	r3, #3
 80136e0:	d107      	bne.n	80136f2 <dhcp_parse_reply+0x56e>
      parse_sname_as_options = 1;
 80136e2:	2301      	movs	r3, #1
 80136e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 80136e6:	2301      	movs	r3, #1
 80136e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
 80136ea:	4815      	ldr	r0, [pc, #84]	@ (8013740 <dhcp_parse_reply+0x5bc>)
 80136ec:	f003 fb56 	bl	8016d9c <puts>
 80136f0:	e004      	b.n	80136fc <dhcp_parse_reply+0x578>
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	4619      	mov	r1, r3
 80136f6:	4813      	ldr	r0, [pc, #76]	@ (8013744 <dhcp_parse_reply+0x5c0>)
 80136f8:	f003 fae0 	bl	8016cbc <iprintf>
    }
  }
  if (parse_file_as_options) {
 80136fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d022      	beq.n	8013748 <dhcp_parse_reply+0x5c4>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8013702:	2300      	movs	r3, #0
 8013704:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 8013706:	236c      	movs	r3, #108	@ 0x6c
 8013708:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801370a:	23ec      	movs	r3, #236	@ 0xec
 801370c:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801370e:	e556      	b.n	80131be <dhcp_parse_reply+0x3a>
 8013710:	0801b394 	.word	0x0801b394
 8013714:	0801c068 	.word	0x0801c068
 8013718:	0801b3f4 	.word	0x0801b3f4
 801371c:	0801c0ac 	.word	0x0801c0ac
 8013720:	0801c0cc 	.word	0x0801c0cc
 8013724:	24003374 	.word	0x24003374
 8013728:	0801c0e0 	.word	0x0801c0e0
 801372c:	24003354 	.word	0x24003354
 8013730:	0801c0f8 	.word	0x0801c0f8
 8013734:	0801c10c 	.word	0x0801c10c
 8013738:	0801c120 	.word	0x0801c120
 801373c:	0801c138 	.word	0x0801c138
 8013740:	0801c150 	.word	0x0801c150
 8013744:	0801c170 	.word	0x0801c170
  } else if (parse_sname_as_options) {
 8013748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801374a:	2b00      	cmp	r3, #0
 801374c:	d006      	beq.n	801375c <dhcp_parse_reply+0x5d8>
    parse_sname_as_options = 0;
 801374e:	2300      	movs	r3, #0
 8013750:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 8013752:	232c      	movs	r3, #44	@ 0x2c
 8013754:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8013756:	236c      	movs	r3, #108	@ 0x6c
 8013758:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 801375a:	e530      	b.n	80131be <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801375c:	2300      	movs	r3, #0
}
 801375e:	4618      	mov	r0, r3
 8013760:	3740      	adds	r7, #64	@ 0x40
 8013762:	46bd      	mov	sp, r7
 8013764:	bd80      	pop	{r7, pc}
 8013766:	bf00      	nop

08013768 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8013768:	b590      	push	{r4, r7, lr}
 801376a:	b08f      	sub	sp, #60	@ 0x3c
 801376c:	af04      	add	r7, sp, #16
 801376e:	60f8      	str	r0, [r7, #12]
 8013770:	60b9      	str	r1, [r7, #8]
 8013772:	607a      	str	r2, [r7, #4]
 8013774:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8013776:	4b8c      	ldr	r3, [pc, #560]	@ (80139a8 <dhcp_recv+0x240>)
 8013778:	685b      	ldr	r3, [r3, #4]
 801377a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801377c:	6a3b      	ldr	r3, [r7, #32]
 801377e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013780:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	685b      	ldr	r3, [r3, #4]
 8013786:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8013788:	69fb      	ldr	r3, [r7, #28]
 801378a:	2b00      	cmp	r3, #0
 801378c:	f000 8102 	beq.w	8013994 <dhcp_recv+0x22c>
 8013790:	69fb      	ldr	r3, [r7, #28]
 8013792:	791b      	ldrb	r3, [r3, #4]
 8013794:	2b00      	cmp	r3, #0
 8013796:	f000 80fd 	beq.w	8013994 <dhcp_recv+0x22c>
    goto free_pbuf_and_return;
  }

  LWIP_ASSERT("invalid server address type", IP_IS_V4(addr));

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_recv(pbuf = %p) from DHCP server %"U16_F".%"U16_F".%"U16_F".%"U16_F" port %"U16_F"\n", (void *)p,
 801379a:	683b      	ldr	r3, [r7, #0]
 801379c:	781b      	ldrb	r3, [r3, #0]
 801379e:	4618      	mov	r0, r3
 80137a0:	683b      	ldr	r3, [r7, #0]
 80137a2:	3301      	adds	r3, #1
 80137a4:	781b      	ldrb	r3, [r3, #0]
 80137a6:	461c      	mov	r4, r3
 80137a8:	683b      	ldr	r3, [r7, #0]
 80137aa:	3302      	adds	r3, #2
 80137ac:	781b      	ldrb	r3, [r3, #0]
 80137ae:	461a      	mov	r2, r3
 80137b0:	683b      	ldr	r3, [r7, #0]
 80137b2:	3303      	adds	r3, #3
 80137b4:	781b      	ldrb	r3, [r3, #0]
 80137b6:	4619      	mov	r1, r3
 80137b8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80137ba:	9302      	str	r3, [sp, #8]
 80137bc:	9101      	str	r1, [sp, #4]
 80137be:	9200      	str	r2, [sp, #0]
 80137c0:	4623      	mov	r3, r4
 80137c2:	4602      	mov	r2, r0
 80137c4:	6879      	ldr	r1, [r7, #4]
 80137c6:	4879      	ldr	r0, [pc, #484]	@ (80139ac <dhcp_recv+0x244>)
 80137c8:	f003 fa78 	bl	8016cbc <iprintf>
              ip4_addr1_16(ip_2_ip4(addr)), ip4_addr2_16(ip_2_ip4(addr)), ip4_addr3_16(ip_2_ip4(addr)), ip4_addr4_16(ip_2_ip4(addr)), port));
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->len = %"U16_F"\n", p->len));
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	895b      	ldrh	r3, [r3, #10]
 80137d0:	4619      	mov	r1, r3
 80137d2:	4877      	ldr	r0, [pc, #476]	@ (80139b0 <dhcp_recv+0x248>)
 80137d4:	f003 fa72 	bl	8016cbc <iprintf>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->tot_len = %"U16_F"\n", p->tot_len));
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	891b      	ldrh	r3, [r3, #8]
 80137dc:	4619      	mov	r1, r3
 80137de:	4875      	ldr	r0, [pc, #468]	@ (80139b4 <dhcp_recv+0x24c>)
 80137e0:	f003 fa6c 	bl	8016cbc <iprintf>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	895b      	ldrh	r3, [r3, #10]
 80137e8:	2b2b      	cmp	r3, #43	@ 0x2b
 80137ea:	d803      	bhi.n	80137f4 <dhcp_recv+0x8c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
 80137ec:	4872      	ldr	r0, [pc, #456]	@ (80139b8 <dhcp_recv+0x250>)
 80137ee:	f003 fad5 	bl	8016d9c <puts>
    goto free_pbuf_and_return;
 80137f2:	e0d2      	b.n	801399a <dhcp_recv+0x232>
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80137f4:	69bb      	ldr	r3, [r7, #24]
 80137f6:	781b      	ldrb	r3, [r3, #0]
 80137f8:	2b02      	cmp	r3, #2
 80137fa:	d006      	beq.n	801380a <dhcp_recv+0xa2>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
 80137fc:	69bb      	ldr	r3, [r7, #24]
 80137fe:	781b      	ldrb	r3, [r3, #0]
 8013800:	4619      	mov	r1, r3
 8013802:	486e      	ldr	r0, [pc, #440]	@ (80139bc <dhcp_recv+0x254>)
 8013804:	f003 fa5a 	bl	8016cbc <iprintf>
    goto free_pbuf_and_return;
 8013808:	e0c7      	b.n	801399a <dhcp_recv+0x232>
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801380a:	2300      	movs	r3, #0
 801380c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013810:	e028      	b.n	8013864 <dhcp_recv+0xfc>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8013812:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013816:	6a3a      	ldr	r2, [r7, #32]
 8013818:	4413      	add	r3, r2
 801381a:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 801381e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013822:	69b9      	ldr	r1, [r7, #24]
 8013824:	440b      	add	r3, r1
 8013826:	7f1b      	ldrb	r3, [r3, #28]
 8013828:	429a      	cmp	r2, r3
 801382a:	d016      	beq.n	801385a <dhcp_recv+0xf2>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 801382c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8013830:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013834:	6a3a      	ldr	r2, [r7, #32]
 8013836:	4413      	add	r3, r2
 8013838:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 801383c:	461c      	mov	r4, r3
 801383e:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8013842:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013846:	69ba      	ldr	r2, [r7, #24]
 8013848:	4413      	add	r3, r2
 801384a:	7f1b      	ldrb	r3, [r3, #28]
 801384c:	9300      	str	r3, [sp, #0]
 801384e:	4603      	mov	r3, r0
 8013850:	4622      	mov	r2, r4
 8013852:	485b      	ldr	r0, [pc, #364]	@ (80139c0 <dhcp_recv+0x258>)
 8013854:	f003 fa32 	bl	8016cbc <iprintf>
                  ("netif->hwaddr[%"U16_F"]==%02"X16_F" != reply_msg->chaddr[%"U16_F"]==%02"X16_F"\n",
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
 8013858:	e09f      	b.n	801399a <dhcp_recv+0x232>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801385a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801385e:	3301      	adds	r3, #1
 8013860:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013864:	6a3b      	ldr	r3, [r7, #32]
 8013866:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801386a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801386e:	429a      	cmp	r2, r3
 8013870:	d203      	bcs.n	801387a <dhcp_recv+0x112>
 8013872:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013876:	2b05      	cmp	r3, #5
 8013878:	d9cb      	bls.n	8013812 <dhcp_recv+0xaa>
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801387a:	69bb      	ldr	r3, [r7, #24]
 801387c:	685b      	ldr	r3, [r3, #4]
 801387e:	4618      	mov	r0, r3
 8013880:	f7f5 fdef 	bl	8009462 <lwip_htonl>
 8013884:	4602      	mov	r2, r0
 8013886:	69fb      	ldr	r3, [r7, #28]
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	429a      	cmp	r2, r3
 801388c:	d00c      	beq.n	80138a8 <dhcp_recv+0x140>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 801388e:	69bb      	ldr	r3, [r7, #24]
 8013890:	685b      	ldr	r3, [r3, #4]
 8013892:	4618      	mov	r0, r3
 8013894:	f7f5 fde5 	bl	8009462 <lwip_htonl>
 8013898:	4601      	mov	r1, r0
 801389a:	69fb      	ldr	r3, [r7, #28]
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	461a      	mov	r2, r3
 80138a0:	4848      	ldr	r0, [pc, #288]	@ (80139c4 <dhcp_recv+0x25c>)
 80138a2:	f003 fa0b 	bl	8016cbc <iprintf>
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
 80138a6:	e078      	b.n	801399a <dhcp_recv+0x232>
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80138a8:	69f9      	ldr	r1, [r7, #28]
 80138aa:	6878      	ldr	r0, [r7, #4]
 80138ac:	f7ff fc6a 	bl	8013184 <dhcp_parse_reply>
 80138b0:	4603      	mov	r3, r0
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d003      	beq.n	80138be <dhcp_recv+0x156>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 80138b6:	4844      	ldr	r0, [pc, #272]	@ (80139c8 <dhcp_recv+0x260>)
 80138b8:	f003 fa70 	bl	8016d9c <puts>
                ("problem unfolding DHCP message - too short on memory?\n"));
    goto free_pbuf_and_return;
 80138bc:	e06d      	b.n	801399a <dhcp_recv+0x232>
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
 80138be:	4843      	ldr	r0, [pc, #268]	@ (80139cc <dhcp_recv+0x264>)
 80138c0:	f003 fa6c 	bl	8016d9c <puts>
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80138c4:	4b42      	ldr	r3, [pc, #264]	@ (80139d0 <dhcp_recv+0x268>)
 80138c6:	785b      	ldrb	r3, [r3, #1]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d103      	bne.n	80138d4 <dhcp_recv+0x16c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
 80138cc:	4841      	ldr	r0, [pc, #260]	@ (80139d4 <dhcp_recv+0x26c>)
 80138ce:	f003 fa65 	bl	8016d9c <puts>
    goto free_pbuf_and_return;
 80138d2:	e062      	b.n	801399a <dhcp_recv+0x232>
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	685b      	ldr	r3, [r3, #4]
 80138d8:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80138da:	4b3f      	ldr	r3, [pc, #252]	@ (80139d8 <dhcp_recv+0x270>)
 80138dc:	685b      	ldr	r3, [r3, #4]
 80138de:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80138e0:	7cfb      	ldrb	r3, [r7, #19]
 80138e2:	2b05      	cmp	r3, #5
 80138e4:	d12d      	bne.n	8013942 <dhcp_recv+0x1da>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
 80138e6:	483d      	ldr	r0, [pc, #244]	@ (80139dc <dhcp_recv+0x274>)
 80138e8:	f003 fa58 	bl	8016d9c <puts>
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80138ec:	69fb      	ldr	r3, [r7, #28]
 80138ee:	795b      	ldrb	r3, [r3, #5]
 80138f0:	2b01      	cmp	r3, #1
 80138f2:	d112      	bne.n	801391a <dhcp_recv+0x1b2>
      dhcp_handle_ack(netif, msg_in);
 80138f4:	6979      	ldr	r1, [r7, #20]
 80138f6:	6a38      	ldr	r0, [r7, #32]
 80138f8:	f7fe fc7a 	bl	80121f0 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80138fc:	6a3b      	ldr	r3, [r7, #32]
 80138fe:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013902:	f003 0308 	and.w	r3, r3, #8
 8013906:	2b00      	cmp	r3, #0
 8013908:	d003      	beq.n	8013912 <dhcp_recv+0x1aa>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801390a:	6a38      	ldr	r0, [r7, #32]
 801390c:	f7fe f936 	bl	8011b7c <dhcp_check>
 8013910:	e043      	b.n	801399a <dhcp_recv+0x232>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8013912:	6a38      	ldr	r0, [r7, #32]
 8013914:	f7fe ff4a 	bl	80127ac <dhcp_bind>
 8013918:	e03f      	b.n	801399a <dhcp_recv+0x232>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801391a:	69fb      	ldr	r3, [r7, #28]
 801391c:	795b      	ldrb	r3, [r3, #5]
 801391e:	2b03      	cmp	r3, #3
 8013920:	d007      	beq.n	8013932 <dhcp_recv+0x1ca>
 8013922:	69fb      	ldr	r3, [r7, #28]
 8013924:	795b      	ldrb	r3, [r3, #5]
 8013926:	2b04      	cmp	r3, #4
 8013928:	d003      	beq.n	8013932 <dhcp_recv+0x1ca>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801392a:	69fb      	ldr	r3, [r7, #28]
 801392c:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801392e:	2b05      	cmp	r3, #5
 8013930:	d133      	bne.n	801399a <dhcp_recv+0x232>
      dhcp_handle_ack(netif, msg_in);
 8013932:	6979      	ldr	r1, [r7, #20]
 8013934:	6a38      	ldr	r0, [r7, #32]
 8013936:	f7fe fc5b 	bl	80121f0 <dhcp_handle_ack>
      dhcp_bind(netif);
 801393a:	6a38      	ldr	r0, [r7, #32]
 801393c:	f7fe ff36 	bl	80127ac <dhcp_bind>
 8013940:	e02b      	b.n	801399a <dhcp_recv+0x232>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8013942:	7cfb      	ldrb	r3, [r7, #19]
 8013944:	2b06      	cmp	r3, #6
 8013946:	d116      	bne.n	8013976 <dhcp_recv+0x20e>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013948:	69fb      	ldr	r3, [r7, #28]
 801394a:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801394c:	2b03      	cmp	r3, #3
 801394e:	d00b      	beq.n	8013968 <dhcp_recv+0x200>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013950:	69fb      	ldr	r3, [r7, #28]
 8013952:	795b      	ldrb	r3, [r3, #5]
 8013954:	2b01      	cmp	r3, #1
 8013956:	d007      	beq.n	8013968 <dhcp_recv+0x200>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8013958:	69fb      	ldr	r3, [r7, #28]
 801395a:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801395c:	2b04      	cmp	r3, #4
 801395e:	d003      	beq.n	8013968 <dhcp_recv+0x200>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8013960:	69fb      	ldr	r3, [r7, #28]
 8013962:	795b      	ldrb	r3, [r3, #5]
 8013964:	2b05      	cmp	r3, #5
 8013966:	d106      	bne.n	8013976 <dhcp_recv+0x20e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
 8013968:	481d      	ldr	r0, [pc, #116]	@ (80139e0 <dhcp_recv+0x278>)
 801396a:	f003 fa17 	bl	8016d9c <puts>
    dhcp_handle_nak(netif);
 801396e:	6a38      	ldr	r0, [r7, #32]
 8013970:	f7fe f8d6 	bl	8011b20 <dhcp_handle_nak>
 8013974:	e011      	b.n	801399a <dhcp_recv+0x232>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8013976:	7cfb      	ldrb	r3, [r7, #19]
 8013978:	2b02      	cmp	r3, #2
 801397a:	d10d      	bne.n	8013998 <dhcp_recv+0x230>
 801397c:	69fb      	ldr	r3, [r7, #28]
 801397e:	795b      	ldrb	r3, [r3, #5]
 8013980:	2b06      	cmp	r3, #6
 8013982:	d109      	bne.n	8013998 <dhcp_recv+0x230>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
 8013984:	4817      	ldr	r0, [pc, #92]	@ (80139e4 <dhcp_recv+0x27c>)
 8013986:	f003 fa09 	bl	8016d9c <puts>
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801398a:	6979      	ldr	r1, [r7, #20]
 801398c:	6a38      	ldr	r0, [r7, #32]
 801398e:	f7fe f945 	bl	8011c1c <dhcp_handle_offer>
 8013992:	e002      	b.n	801399a <dhcp_recv+0x232>
    goto free_pbuf_and_return;
 8013994:	bf00      	nop
 8013996:	e000      	b.n	801399a <dhcp_recv+0x232>
  }

free_pbuf_and_return:
 8013998:	bf00      	nop
  pbuf_free(p);
 801399a:	6878      	ldr	r0, [r7, #4]
 801399c:	f7f7 f9ca 	bl	800ad34 <pbuf_free>
}
 80139a0:	bf00      	nop
 80139a2:	372c      	adds	r7, #44	@ 0x2c
 80139a4:	46bd      	mov	sp, r7
 80139a6:	bd90      	pop	{r4, r7, pc}
 80139a8:	24000360 	.word	0x24000360
 80139ac:	0801c190 	.word	0x0801c190
 80139b0:	0801c1d0 	.word	0x0801c1d0
 80139b4:	0801c1e4 	.word	0x0801c1e4
 80139b8:	0801c1fc 	.word	0x0801c1fc
 80139bc:	0801c224 	.word	0x0801c224
 80139c0:	0801c24c 	.word	0x0801c24c
 80139c4:	0801c288 	.word	0x0801c288
 80139c8:	0801c2c8 	.word	0x0801c2c8
 80139cc:	0801c300 	.word	0x0801c300
 80139d0:	24003374 	.word	0x24003374
 80139d4:	0801c324 	.word	0x0801c324
 80139d8:	24003354 	.word	0x24003354
 80139dc:	0801c350 	.word	0x0801c350
 80139e0:	0801c364 	.word	0x0801c364
 80139e4:	0801c378 	.word	0x0801c378

080139e8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b088      	sub	sp, #32
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	60f8      	str	r0, [r7, #12]
 80139f0:	60b9      	str	r1, [r7, #8]
 80139f2:	603b      	str	r3, [r7, #0]
 80139f4:	4613      	mov	r3, r2
 80139f6:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d108      	bne.n	8013a10 <dhcp_create_msg+0x28>
 80139fe:	4b64      	ldr	r3, [pc, #400]	@ (8013b90 <dhcp_create_msg+0x1a8>)
 8013a00:	f240 7269 	movw	r2, #1897	@ 0x769
 8013a04:	4963      	ldr	r1, [pc, #396]	@ (8013b94 <dhcp_create_msg+0x1ac>)
 8013a06:	4864      	ldr	r0, [pc, #400]	@ (8013b98 <dhcp_create_msg+0x1b0>)
 8013a08:	f003 f958 	bl	8016cbc <iprintf>
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	e0ba      	b.n	8013b86 <dhcp_create_msg+0x19e>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8013a10:	68bb      	ldr	r3, [r7, #8]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d108      	bne.n	8013a28 <dhcp_create_msg+0x40>
 8013a16:	4b5e      	ldr	r3, [pc, #376]	@ (8013b90 <dhcp_create_msg+0x1a8>)
 8013a18:	f240 726a 	movw	r2, #1898	@ 0x76a
 8013a1c:	495f      	ldr	r1, [pc, #380]	@ (8013b9c <dhcp_create_msg+0x1b4>)
 8013a1e:	485e      	ldr	r0, [pc, #376]	@ (8013b98 <dhcp_create_msg+0x1b0>)
 8013a20:	f003 f94c 	bl	8016cbc <iprintf>
 8013a24:	2300      	movs	r3, #0
 8013a26:	e0ae      	b.n	8013b86 <dhcp_create_msg+0x19e>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8013a28:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013a2c:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8013a30:	2036      	movs	r0, #54	@ 0x36
 8013a32:	f7f6 fe53 	bl	800a6dc <pbuf_alloc>
 8013a36:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8013a38:	69bb      	ldr	r3, [r7, #24]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d104      	bne.n	8013a48 <dhcp_create_msg+0x60>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 8013a3e:	4858      	ldr	r0, [pc, #352]	@ (8013ba0 <dhcp_create_msg+0x1b8>)
 8013a40:	f003 f9ac 	bl	8016d9c <puts>
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8013a44:	2300      	movs	r3, #0
 8013a46:	e09e      	b.n	8013b86 <dhcp_create_msg+0x19e>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8013a48:	69bb      	ldr	r3, [r7, #24]
 8013a4a:	895b      	ldrh	r3, [r3, #10]
 8013a4c:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8013a50:	d206      	bcs.n	8013a60 <dhcp_create_msg+0x78>
 8013a52:	4b4f      	ldr	r3, [pc, #316]	@ (8013b90 <dhcp_create_msg+0x1a8>)
 8013a54:	f240 7271 	movw	r2, #1905	@ 0x771
 8013a58:	4952      	ldr	r1, [pc, #328]	@ (8013ba4 <dhcp_create_msg+0x1bc>)
 8013a5a:	484f      	ldr	r0, [pc, #316]	@ (8013b98 <dhcp_create_msg+0x1b0>)
 8013a5c:	f003 f92e 	bl	8016cbc <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8013a60:	79fb      	ldrb	r3, [r7, #7]
 8013a62:	2b03      	cmp	r3, #3
 8013a64:	d103      	bne.n	8013a6e <dhcp_create_msg+0x86>
 8013a66:	68bb      	ldr	r3, [r7, #8]
 8013a68:	795b      	ldrb	r3, [r3, #5]
 8013a6a:	2b03      	cmp	r3, #3
 8013a6c:	d10d      	bne.n	8013a8a <dhcp_create_msg+0xa2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8013a6e:	68bb      	ldr	r3, [r7, #8]
 8013a70:	799b      	ldrb	r3, [r3, #6]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d105      	bne.n	8013a82 <dhcp_create_msg+0x9a>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8013a76:	f003 f821 	bl	8016abc <rand>
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	461a      	mov	r2, r3
 8013a7e:	4b4a      	ldr	r3, [pc, #296]	@ (8013ba8 <dhcp_create_msg+0x1c0>)
 8013a80:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8013a82:	4b49      	ldr	r3, [pc, #292]	@ (8013ba8 <dhcp_create_msg+0x1c0>)
 8013a84:	681a      	ldr	r2, [r3, #0]
 8013a86:	68bb      	ldr	r3, [r7, #8]
 8013a88:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
 8013a8a:	4b47      	ldr	r3, [pc, #284]	@ (8013ba8 <dhcp_create_msg+0x1c0>)
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	4619      	mov	r1, r3
 8013a90:	4846      	ldr	r0, [pc, #280]	@ (8013bac <dhcp_create_msg+0x1c4>)
 8013a92:	f003 f913 	bl	8016cbc <iprintf>
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8013a96:	69bb      	ldr	r3, [r7, #24]
 8013a98:	685b      	ldr	r3, [r3, #4]
 8013a9a:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8013a9c:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8013aa0:	2100      	movs	r1, #0
 8013aa2:	6978      	ldr	r0, [r7, #20]
 8013aa4:	f003 fa6a 	bl	8016f7c <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8013aa8:	697b      	ldr	r3, [r7, #20]
 8013aaa:	2201      	movs	r2, #1
 8013aac:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8013aae:	697b      	ldr	r3, [r7, #20]
 8013ab0:	2201      	movs	r2, #1
 8013ab2:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8013aba:	697b      	ldr	r3, [r7, #20]
 8013abc:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8013abe:	68bb      	ldr	r3, [r7, #8]
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	f7f5 fccd 	bl	8009462 <lwip_htonl>
 8013ac8:	4602      	mov	r2, r0
 8013aca:	697b      	ldr	r3, [r7, #20]
 8013acc:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8013ace:	79fb      	ldrb	r3, [r7, #7]
 8013ad0:	2b08      	cmp	r3, #8
 8013ad2:	d010      	beq.n	8013af6 <dhcp_create_msg+0x10e>
 8013ad4:	79fb      	ldrb	r3, [r7, #7]
 8013ad6:	2b04      	cmp	r3, #4
 8013ad8:	d00d      	beq.n	8013af6 <dhcp_create_msg+0x10e>
 8013ada:	79fb      	ldrb	r3, [r7, #7]
 8013adc:	2b07      	cmp	r3, #7
 8013ade:	d00a      	beq.n	8013af6 <dhcp_create_msg+0x10e>
 8013ae0:	79fb      	ldrb	r3, [r7, #7]
 8013ae2:	2b03      	cmp	r3, #3
 8013ae4:	d10c      	bne.n	8013b00 <dhcp_create_msg+0x118>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8013ae6:	68bb      	ldr	r3, [r7, #8]
 8013ae8:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8013aea:	2b05      	cmp	r3, #5
 8013aec:	d003      	beq.n	8013af6 <dhcp_create_msg+0x10e>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8013aee:	68bb      	ldr	r3, [r7, #8]
 8013af0:	795b      	ldrb	r3, [r3, #5]
 8013af2:	2b04      	cmp	r3, #4
 8013af4:	d104      	bne.n	8013b00 <dhcp_create_msg+0x118>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	3304      	adds	r3, #4
 8013afa:	681a      	ldr	r2, [r3, #0]
 8013afc:	697b      	ldr	r3, [r7, #20]
 8013afe:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013b00:	2300      	movs	r3, #0
 8013b02:	83fb      	strh	r3, [r7, #30]
 8013b04:	e00c      	b.n	8013b20 <dhcp_create_msg+0x138>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8013b06:	8bfa      	ldrh	r2, [r7, #30]
 8013b08:	8bfb      	ldrh	r3, [r7, #30]
 8013b0a:	68f9      	ldr	r1, [r7, #12]
 8013b0c:	440a      	add	r2, r1
 8013b0e:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 8013b12:	697a      	ldr	r2, [r7, #20]
 8013b14:	4413      	add	r3, r2
 8013b16:	460a      	mov	r2, r1
 8013b18:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013b1a:	8bfb      	ldrh	r3, [r7, #30]
 8013b1c:	3301      	adds	r3, #1
 8013b1e:	83fb      	strh	r3, [r7, #30]
 8013b20:	8bfb      	ldrh	r3, [r7, #30]
 8013b22:	2b05      	cmp	r3, #5
 8013b24:	d9ef      	bls.n	8013b06 <dhcp_create_msg+0x11e>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8013b26:	697b      	ldr	r3, [r7, #20]
 8013b28:	2200      	movs	r2, #0
 8013b2a:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8013b2e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8013b32:	2200      	movs	r2, #0
 8013b34:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 8013b38:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8013b3c:	2200      	movs	r2, #0
 8013b3e:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8013b42:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 8013b46:	2200      	movs	r2, #0
 8013b48:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8013b4c:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8013b50:	697b      	ldr	r3, [r7, #20]
 8013b52:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013b56:	2301      	movs	r3, #1
 8013b58:	2235      	movs	r2, #53	@ 0x35
 8013b5a:	2000      	movs	r0, #0
 8013b5c:	f7ff fa42 	bl	8012fe4 <dhcp_option>
 8013b60:	4603      	mov	r3, r0
 8013b62:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8013b64:	697b      	ldr	r3, [r7, #20]
 8013b66:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013b6a:	79fa      	ldrb	r2, [r7, #7]
 8013b6c:	8a7b      	ldrh	r3, [r7, #18]
 8013b6e:	4618      	mov	r0, r3
 8013b70:	f7ff fa6c 	bl	801304c <dhcp_option_byte>
 8013b74:	4603      	mov	r3, r0
 8013b76:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8013b78:	683b      	ldr	r3, [r7, #0]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d002      	beq.n	8013b84 <dhcp_create_msg+0x19c>
    *options_out_len = options_out_len_loc;
 8013b7e:	683b      	ldr	r3, [r7, #0]
 8013b80:	8a7a      	ldrh	r2, [r7, #18]
 8013b82:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8013b84:	69bb      	ldr	r3, [r7, #24]
}
 8013b86:	4618      	mov	r0, r3
 8013b88:	3720      	adds	r7, #32
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	bd80      	pop	{r7, pc}
 8013b8e:	bf00      	nop
 8013b90:	0801b394 	.word	0x0801b394
 8013b94:	0801c3ac 	.word	0x0801c3ac
 8013b98:	0801b3f4 	.word	0x0801b3f4
 8013b9c:	0801c3cc 	.word	0x0801c3cc
 8013ba0:	0801c3ec 	.word	0x0801c3ec
 8013ba4:	0801c418 	.word	0x0801c418
 8013ba8:	24003384 	.word	0x24003384
 8013bac:	0801c458 	.word	0x0801c458

08013bb0 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b084      	sub	sp, #16
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	60b9      	str	r1, [r7, #8]
 8013bba:	607a      	str	r2, [r7, #4]
 8013bbc:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8013bbe:	89fb      	ldrh	r3, [r7, #14]
 8013bc0:	1c5a      	adds	r2, r3, #1
 8013bc2:	81fa      	strh	r2, [r7, #14]
 8013bc4:	461a      	mov	r2, r3
 8013bc6:	68bb      	ldr	r3, [r7, #8]
 8013bc8:	4413      	add	r3, r2
 8013bca:	22ff      	movs	r2, #255	@ 0xff
 8013bcc:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8013bce:	e007      	b.n	8013be0 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8013bd0:	89fb      	ldrh	r3, [r7, #14]
 8013bd2:	1c5a      	adds	r2, r3, #1
 8013bd4:	81fa      	strh	r2, [r7, #14]
 8013bd6:	461a      	mov	r2, r3
 8013bd8:	68bb      	ldr	r3, [r7, #8]
 8013bda:	4413      	add	r3, r2
 8013bdc:	2200      	movs	r2, #0
 8013bde:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8013be0:	89fb      	ldrh	r3, [r7, #14]
 8013be2:	2b43      	cmp	r3, #67	@ 0x43
 8013be4:	d904      	bls.n	8013bf0 <dhcp_option_trailer+0x40>
 8013be6:	89fb      	ldrh	r3, [r7, #14]
 8013be8:	f003 0303 	and.w	r3, r3, #3
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d002      	beq.n	8013bf6 <dhcp_option_trailer+0x46>
 8013bf0:	89fb      	ldrh	r3, [r7, #14]
 8013bf2:	2b43      	cmp	r3, #67	@ 0x43
 8013bf4:	d9ec      	bls.n	8013bd0 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8013bf6:	89fb      	ldrh	r3, [r7, #14]
 8013bf8:	33f0      	adds	r3, #240	@ 0xf0
 8013bfa:	b29b      	uxth	r3, r3
 8013bfc:	4619      	mov	r1, r3
 8013bfe:	6878      	ldr	r0, [r7, #4]
 8013c00:	f7f6 fef8 	bl	800a9f4 <pbuf_realloc>
}
 8013c04:	bf00      	nop
 8013c06:	3710      	adds	r7, #16
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	bd80      	pop	{r7, pc}

08013c0c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8013c0c:	b480      	push	{r7}
 8013c0e:	b085      	sub	sp, #20
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d017      	beq.n	8013c4a <dhcp_supplied_address+0x3e>
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d013      	beq.n	8013c4a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c26:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	795b      	ldrb	r3, [r3, #5]
 8013c2c:	2b0a      	cmp	r3, #10
 8013c2e:	d007      	beq.n	8013c40 <dhcp_supplied_address+0x34>
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	795b      	ldrb	r3, [r3, #5]
 8013c34:	2b05      	cmp	r3, #5
 8013c36:	d003      	beq.n	8013c40 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8013c3c:	2b04      	cmp	r3, #4
 8013c3e:	d101      	bne.n	8013c44 <dhcp_supplied_address+0x38>
 8013c40:	2301      	movs	r3, #1
 8013c42:	e000      	b.n	8013c46 <dhcp_supplied_address+0x3a>
 8013c44:	2300      	movs	r3, #0
 8013c46:	b2db      	uxtb	r3, r3
 8013c48:	e000      	b.n	8013c4c <dhcp_supplied_address+0x40>
  }
  return 0;
 8013c4a:	2300      	movs	r3, #0
}
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	3714      	adds	r7, #20
 8013c50:	46bd      	mov	sp, r7
 8013c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c56:	4770      	bx	lr

08013c58 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	b082      	sub	sp, #8
 8013c5c:	af00      	add	r7, sp, #0
 8013c5e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013c60:	4933      	ldr	r1, [pc, #204]	@ (8013d30 <etharp_free_entry+0xd8>)
 8013c62:	687a      	ldr	r2, [r7, #4]
 8013c64:	4613      	mov	r3, r2
 8013c66:	005b      	lsls	r3, r3, #1
 8013c68:	4413      	add	r3, r2
 8013c6a:	00db      	lsls	r3, r3, #3
 8013c6c:	440b      	add	r3, r1
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d023      	beq.n	8013cbc <etharp_free_entry+0x64>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	b29b      	uxth	r3, r3
 8013c78:	4618      	mov	r0, r3
 8013c7a:	492d      	ldr	r1, [pc, #180]	@ (8013d30 <etharp_free_entry+0xd8>)
 8013c7c:	687a      	ldr	r2, [r7, #4]
 8013c7e:	4613      	mov	r3, r2
 8013c80:	005b      	lsls	r3, r3, #1
 8013c82:	4413      	add	r3, r2
 8013c84:	00db      	lsls	r3, r3, #3
 8013c86:	440b      	add	r3, r1
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	461a      	mov	r2, r3
 8013c8c:	4601      	mov	r1, r0
 8013c8e:	4829      	ldr	r0, [pc, #164]	@ (8013d34 <etharp_free_entry+0xdc>)
 8013c90:	f003 f814 	bl	8016cbc <iprintf>
    free_etharp_q(arp_table[i].q);
 8013c94:	4926      	ldr	r1, [pc, #152]	@ (8013d30 <etharp_free_entry+0xd8>)
 8013c96:	687a      	ldr	r2, [r7, #4]
 8013c98:	4613      	mov	r3, r2
 8013c9a:	005b      	lsls	r3, r3, #1
 8013c9c:	4413      	add	r3, r2
 8013c9e:	00db      	lsls	r3, r3, #3
 8013ca0:	440b      	add	r3, r1
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	f7f7 f845 	bl	800ad34 <pbuf_free>
    arp_table[i].q = NULL;
 8013caa:	4921      	ldr	r1, [pc, #132]	@ (8013d30 <etharp_free_entry+0xd8>)
 8013cac:	687a      	ldr	r2, [r7, #4]
 8013cae:	4613      	mov	r3, r2
 8013cb0:	005b      	lsls	r3, r3, #1
 8013cb2:	4413      	add	r3, r2
 8013cb4:	00db      	lsls	r3, r3, #3
 8013cb6:	440b      	add	r3, r1
 8013cb8:	2200      	movs	r2, #0
 8013cba:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013cbc:	491c      	ldr	r1, [pc, #112]	@ (8013d30 <etharp_free_entry+0xd8>)
 8013cbe:	687a      	ldr	r2, [r7, #4]
 8013cc0:	4613      	mov	r3, r2
 8013cc2:	005b      	lsls	r3, r3, #1
 8013cc4:	4413      	add	r3, r2
 8013cc6:	00db      	lsls	r3, r3, #3
 8013cc8:	440b      	add	r3, r1
 8013cca:	3314      	adds	r3, #20
 8013ccc:	2200      	movs	r2, #0
 8013cce:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 8013cd0:	4917      	ldr	r1, [pc, #92]	@ (8013d30 <etharp_free_entry+0xd8>)
 8013cd2:	687a      	ldr	r2, [r7, #4]
 8013cd4:	4613      	mov	r3, r2
 8013cd6:	005b      	lsls	r3, r3, #1
 8013cd8:	4413      	add	r3, r2
 8013cda:	00db      	lsls	r3, r3, #3
 8013cdc:	440b      	add	r3, r1
 8013cde:	3312      	adds	r3, #18
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 8013ce4:	4912      	ldr	r1, [pc, #72]	@ (8013d30 <etharp_free_entry+0xd8>)
 8013ce6:	687a      	ldr	r2, [r7, #4]
 8013ce8:	4613      	mov	r3, r2
 8013cea:	005b      	lsls	r3, r3, #1
 8013cec:	4413      	add	r3, r2
 8013cee:	00db      	lsls	r3, r3, #3
 8013cf0:	440b      	add	r3, r1
 8013cf2:	3308      	adds	r3, #8
 8013cf4:	2200      	movs	r2, #0
 8013cf6:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 8013cf8:	490d      	ldr	r1, [pc, #52]	@ (8013d30 <etharp_free_entry+0xd8>)
 8013cfa:	687a      	ldr	r2, [r7, #4]
 8013cfc:	4613      	mov	r3, r2
 8013cfe:	005b      	lsls	r3, r3, #1
 8013d00:	4413      	add	r3, r2
 8013d02:	00db      	lsls	r3, r3, #3
 8013d04:	440b      	add	r3, r1
 8013d06:	3304      	adds	r3, #4
 8013d08:	2200      	movs	r2, #0
 8013d0a:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 8013d0c:	4908      	ldr	r1, [pc, #32]	@ (8013d30 <etharp_free_entry+0xd8>)
 8013d0e:	687a      	ldr	r2, [r7, #4]
 8013d10:	4613      	mov	r3, r2
 8013d12:	005b      	lsls	r3, r3, #1
 8013d14:	4413      	add	r3, r2
 8013d16:	00db      	lsls	r3, r3, #3
 8013d18:	440b      	add	r3, r1
 8013d1a:	3308      	adds	r3, #8
 8013d1c:	4a06      	ldr	r2, [pc, #24]	@ (8013d38 <etharp_free_entry+0xe0>)
 8013d1e:	3304      	adds	r3, #4
 8013d20:	6810      	ldr	r0, [r2, #0]
 8013d22:	6018      	str	r0, [r3, #0]
 8013d24:	8892      	ldrh	r2, [r2, #4]
 8013d26:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 8013d28:	bf00      	nop
 8013d2a:	3708      	adds	r7, #8
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	bd80      	pop	{r7, pc}
 8013d30:	24003388 	.word	0x24003388
 8013d34:	0801c474 	.word	0x0801c474
 8013d38:	0801dc74 	.word	0x0801dc74

08013d3c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013d3c:	b580      	push	{r7, lr}
 8013d3e:	b082      	sub	sp, #8
 8013d40:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
 8013d42:	485c      	ldr	r0, [pc, #368]	@ (8013eb4 <etharp_tmr+0x178>)
 8013d44:	f003 f82a 	bl	8016d9c <puts>
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013d48:	2300      	movs	r3, #0
 8013d4a:	607b      	str	r3, [r7, #4]
 8013d4c:	e0a9      	b.n	8013ea2 <etharp_tmr+0x166>
    u8_t state = arp_table[i].state;
 8013d4e:	495a      	ldr	r1, [pc, #360]	@ (8013eb8 <etharp_tmr+0x17c>)
 8013d50:	687a      	ldr	r2, [r7, #4]
 8013d52:	4613      	mov	r3, r2
 8013d54:	005b      	lsls	r3, r3, #1
 8013d56:	4413      	add	r3, r2
 8013d58:	00db      	lsls	r3, r3, #3
 8013d5a:	440b      	add	r3, r1
 8013d5c:	3314      	adds	r3, #20
 8013d5e:	781b      	ldrb	r3, [r3, #0]
 8013d60:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013d62:	78fb      	ldrb	r3, [r7, #3]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	f000 8099 	beq.w	8013e9c <etharp_tmr+0x160>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013d6a:	4953      	ldr	r1, [pc, #332]	@ (8013eb8 <etharp_tmr+0x17c>)
 8013d6c:	687a      	ldr	r2, [r7, #4]
 8013d6e:	4613      	mov	r3, r2
 8013d70:	005b      	lsls	r3, r3, #1
 8013d72:	4413      	add	r3, r2
 8013d74:	00db      	lsls	r3, r3, #3
 8013d76:	440b      	add	r3, r1
 8013d78:	3312      	adds	r3, #18
 8013d7a:	881b      	ldrh	r3, [r3, #0]
 8013d7c:	3301      	adds	r3, #1
 8013d7e:	b298      	uxth	r0, r3
 8013d80:	494d      	ldr	r1, [pc, #308]	@ (8013eb8 <etharp_tmr+0x17c>)
 8013d82:	687a      	ldr	r2, [r7, #4]
 8013d84:	4613      	mov	r3, r2
 8013d86:	005b      	lsls	r3, r3, #1
 8013d88:	4413      	add	r3, r2
 8013d8a:	00db      	lsls	r3, r3, #3
 8013d8c:	440b      	add	r3, r1
 8013d8e:	3312      	adds	r3, #18
 8013d90:	4602      	mov	r2, r0
 8013d92:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013d94:	4948      	ldr	r1, [pc, #288]	@ (8013eb8 <etharp_tmr+0x17c>)
 8013d96:	687a      	ldr	r2, [r7, #4]
 8013d98:	4613      	mov	r3, r2
 8013d9a:	005b      	lsls	r3, r3, #1
 8013d9c:	4413      	add	r3, r2
 8013d9e:	00db      	lsls	r3, r3, #3
 8013da0:	440b      	add	r3, r1
 8013da2:	3312      	adds	r3, #18
 8013da4:	881b      	ldrh	r3, [r3, #0]
 8013da6:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8013daa:	d215      	bcs.n	8013dd8 <etharp_tmr+0x9c>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013dac:	4942      	ldr	r1, [pc, #264]	@ (8013eb8 <etharp_tmr+0x17c>)
 8013dae:	687a      	ldr	r2, [r7, #4]
 8013db0:	4613      	mov	r3, r2
 8013db2:	005b      	lsls	r3, r3, #1
 8013db4:	4413      	add	r3, r2
 8013db6:	00db      	lsls	r3, r3, #3
 8013db8:	440b      	add	r3, r1
 8013dba:	3314      	adds	r3, #20
 8013dbc:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013dbe:	2b01      	cmp	r3, #1
 8013dc0:	d121      	bne.n	8013e06 <etharp_tmr+0xca>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013dc2:	493d      	ldr	r1, [pc, #244]	@ (8013eb8 <etharp_tmr+0x17c>)
 8013dc4:	687a      	ldr	r2, [r7, #4]
 8013dc6:	4613      	mov	r3, r2
 8013dc8:	005b      	lsls	r3, r3, #1
 8013dca:	4413      	add	r3, r2
 8013dcc:	00db      	lsls	r3, r3, #3
 8013dce:	440b      	add	r3, r1
 8013dd0:	3312      	adds	r3, #18
 8013dd2:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013dd4:	2b04      	cmp	r3, #4
 8013dd6:	d916      	bls.n	8013e06 <etharp_tmr+0xca>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
 8013dd8:	4937      	ldr	r1, [pc, #220]	@ (8013eb8 <etharp_tmr+0x17c>)
 8013dda:	687a      	ldr	r2, [r7, #4]
 8013ddc:	4613      	mov	r3, r2
 8013dde:	005b      	lsls	r3, r3, #1
 8013de0:	4413      	add	r3, r2
 8013de2:	00db      	lsls	r3, r3, #3
 8013de4:	440b      	add	r3, r1
 8013de6:	3314      	adds	r3, #20
 8013de8:	781b      	ldrb	r3, [r3, #0]
 8013dea:	2b01      	cmp	r3, #1
 8013dec:	d901      	bls.n	8013df2 <etharp_tmr+0xb6>
 8013dee:	4b33      	ldr	r3, [pc, #204]	@ (8013ebc <etharp_tmr+0x180>)
 8013df0:	e000      	b.n	8013df4 <etharp_tmr+0xb8>
 8013df2:	4b33      	ldr	r3, [pc, #204]	@ (8013ec0 <etharp_tmr+0x184>)
 8013df4:	687a      	ldr	r2, [r7, #4]
 8013df6:	4619      	mov	r1, r3
 8013df8:	4832      	ldr	r0, [pc, #200]	@ (8013ec4 <etharp_tmr+0x188>)
 8013dfa:	f002 ff5f 	bl	8016cbc <iprintf>
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013dfe:	6878      	ldr	r0, [r7, #4]
 8013e00:	f7ff ff2a 	bl	8013c58 <etharp_free_entry>
 8013e04:	e04a      	b.n	8013e9c <etharp_tmr+0x160>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013e06:	492c      	ldr	r1, [pc, #176]	@ (8013eb8 <etharp_tmr+0x17c>)
 8013e08:	687a      	ldr	r2, [r7, #4]
 8013e0a:	4613      	mov	r3, r2
 8013e0c:	005b      	lsls	r3, r3, #1
 8013e0e:	4413      	add	r3, r2
 8013e10:	00db      	lsls	r3, r3, #3
 8013e12:	440b      	add	r3, r1
 8013e14:	3314      	adds	r3, #20
 8013e16:	781b      	ldrb	r3, [r3, #0]
 8013e18:	2b03      	cmp	r3, #3
 8013e1a:	d10a      	bne.n	8013e32 <etharp_tmr+0xf6>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013e1c:	4926      	ldr	r1, [pc, #152]	@ (8013eb8 <etharp_tmr+0x17c>)
 8013e1e:	687a      	ldr	r2, [r7, #4]
 8013e20:	4613      	mov	r3, r2
 8013e22:	005b      	lsls	r3, r3, #1
 8013e24:	4413      	add	r3, r2
 8013e26:	00db      	lsls	r3, r3, #3
 8013e28:	440b      	add	r3, r1
 8013e2a:	3314      	adds	r3, #20
 8013e2c:	2204      	movs	r2, #4
 8013e2e:	701a      	strb	r2, [r3, #0]
 8013e30:	e034      	b.n	8013e9c <etharp_tmr+0x160>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013e32:	4921      	ldr	r1, [pc, #132]	@ (8013eb8 <etharp_tmr+0x17c>)
 8013e34:	687a      	ldr	r2, [r7, #4]
 8013e36:	4613      	mov	r3, r2
 8013e38:	005b      	lsls	r3, r3, #1
 8013e3a:	4413      	add	r3, r2
 8013e3c:	00db      	lsls	r3, r3, #3
 8013e3e:	440b      	add	r3, r1
 8013e40:	3314      	adds	r3, #20
 8013e42:	781b      	ldrb	r3, [r3, #0]
 8013e44:	2b04      	cmp	r3, #4
 8013e46:	d10a      	bne.n	8013e5e <etharp_tmr+0x122>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013e48:	491b      	ldr	r1, [pc, #108]	@ (8013eb8 <etharp_tmr+0x17c>)
 8013e4a:	687a      	ldr	r2, [r7, #4]
 8013e4c:	4613      	mov	r3, r2
 8013e4e:	005b      	lsls	r3, r3, #1
 8013e50:	4413      	add	r3, r2
 8013e52:	00db      	lsls	r3, r3, #3
 8013e54:	440b      	add	r3, r1
 8013e56:	3314      	adds	r3, #20
 8013e58:	2202      	movs	r2, #2
 8013e5a:	701a      	strb	r2, [r3, #0]
 8013e5c:	e01e      	b.n	8013e9c <etharp_tmr+0x160>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013e5e:	4916      	ldr	r1, [pc, #88]	@ (8013eb8 <etharp_tmr+0x17c>)
 8013e60:	687a      	ldr	r2, [r7, #4]
 8013e62:	4613      	mov	r3, r2
 8013e64:	005b      	lsls	r3, r3, #1
 8013e66:	4413      	add	r3, r2
 8013e68:	00db      	lsls	r3, r3, #3
 8013e6a:	440b      	add	r3, r1
 8013e6c:	3314      	adds	r3, #20
 8013e6e:	781b      	ldrb	r3, [r3, #0]
 8013e70:	2b01      	cmp	r3, #1
 8013e72:	d113      	bne.n	8013e9c <etharp_tmr+0x160>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013e74:	4910      	ldr	r1, [pc, #64]	@ (8013eb8 <etharp_tmr+0x17c>)
 8013e76:	687a      	ldr	r2, [r7, #4]
 8013e78:	4613      	mov	r3, r2
 8013e7a:	005b      	lsls	r3, r3, #1
 8013e7c:	4413      	add	r3, r2
 8013e7e:	00db      	lsls	r3, r3, #3
 8013e80:	440b      	add	r3, r1
 8013e82:	3308      	adds	r3, #8
 8013e84:	6818      	ldr	r0, [r3, #0]
 8013e86:	687a      	ldr	r2, [r7, #4]
 8013e88:	4613      	mov	r3, r2
 8013e8a:	005b      	lsls	r3, r3, #1
 8013e8c:	4413      	add	r3, r2
 8013e8e:	00db      	lsls	r3, r3, #3
 8013e90:	4a09      	ldr	r2, [pc, #36]	@ (8013eb8 <etharp_tmr+0x17c>)
 8013e92:	4413      	add	r3, r2
 8013e94:	3304      	adds	r3, #4
 8013e96:	4619      	mov	r1, r3
 8013e98:	f000 ff70 	bl	8014d7c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	3301      	adds	r3, #1
 8013ea0:	607b      	str	r3, [r7, #4]
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	2b09      	cmp	r3, #9
 8013ea6:	f77f af52 	ble.w	8013d4e <etharp_tmr+0x12>
      }
    }
  }
}
 8013eaa:	bf00      	nop
 8013eac:	bf00      	nop
 8013eae:	3708      	adds	r7, #8
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	bd80      	pop	{r7, pc}
 8013eb4:	0801c4ac 	.word	0x0801c4ac
 8013eb8:	24003388 	.word	0x24003388
 8013ebc:	0801c4bc 	.word	0x0801c4bc
 8013ec0:	0801c4c4 	.word	0x0801c4c4
 8013ec4:	0801c4cc 	.word	0x0801c4cc

08013ec8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b08a      	sub	sp, #40	@ 0x28
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	60f8      	str	r0, [r7, #12]
 8013ed0:	460b      	mov	r3, r1
 8013ed2:	607a      	str	r2, [r7, #4]
 8013ed4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013ed6:	230a      	movs	r3, #10
 8013ed8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8013eda:	230a      	movs	r3, #10
 8013edc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013ede:	230a      	movs	r3, #10
 8013ee0:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013ee6:	230a      	movs	r3, #10
 8013ee8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013eea:	2300      	movs	r3, #0
 8013eec:	83bb      	strh	r3, [r7, #28]
 8013eee:	2300      	movs	r3, #0
 8013ef0:	837b      	strh	r3, [r7, #26]
 8013ef2:	2300      	movs	r3, #0
 8013ef4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	843b      	strh	r3, [r7, #32]
 8013efa:	e0ba      	b.n	8014072 <etharp_find_entry+0x1aa>
    u8_t state = arp_table[i].state;
 8013efc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f00:	4993      	ldr	r1, [pc, #588]	@ (8014150 <etharp_find_entry+0x288>)
 8013f02:	4613      	mov	r3, r2
 8013f04:	005b      	lsls	r3, r3, #1
 8013f06:	4413      	add	r3, r2
 8013f08:	00db      	lsls	r3, r3, #3
 8013f0a:	440b      	add	r3, r1
 8013f0c:	3314      	adds	r3, #20
 8013f0e:	781b      	ldrb	r3, [r3, #0]
 8013f10:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013f12:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8013f16:	2b0a      	cmp	r3, #10
 8013f18:	d10b      	bne.n	8013f32 <etharp_find_entry+0x6a>
 8013f1a:	7dfb      	ldrb	r3, [r7, #23]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d108      	bne.n	8013f32 <etharp_find_entry+0x6a>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
 8013f20:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013f24:	4619      	mov	r1, r3
 8013f26:	488b      	ldr	r0, [pc, #556]	@ (8014154 <etharp_find_entry+0x28c>)
 8013f28:	f002 fec8 	bl	8016cbc <iprintf>
      /* remember first empty entry */
      empty = i;
 8013f2c:	8c3b      	ldrh	r3, [r7, #32]
 8013f2e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8013f30:	e09b      	b.n	801406a <etharp_find_entry+0x1a2>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013f32:	7dfb      	ldrb	r3, [r7, #23]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	f000 8098 	beq.w	801406a <etharp_find_entry+0x1a2>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013f3a:	7dfb      	ldrb	r3, [r7, #23]
 8013f3c:	2b01      	cmp	r3, #1
 8013f3e:	d009      	beq.n	8013f54 <etharp_find_entry+0x8c>
 8013f40:	7dfb      	ldrb	r3, [r7, #23]
 8013f42:	2b01      	cmp	r3, #1
 8013f44:	d806      	bhi.n	8013f54 <etharp_find_entry+0x8c>
 8013f46:	4b84      	ldr	r3, [pc, #528]	@ (8014158 <etharp_find_entry+0x290>)
 8013f48:	f240 1223 	movw	r2, #291	@ 0x123
 8013f4c:	4983      	ldr	r1, [pc, #524]	@ (801415c <etharp_find_entry+0x294>)
 8013f4e:	4884      	ldr	r0, [pc, #528]	@ (8014160 <etharp_find_entry+0x298>)
 8013f50:	f002 feb4 	bl	8016cbc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d026      	beq.n	8013fa8 <etharp_find_entry+0xe0>
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	6819      	ldr	r1, [r3, #0]
 8013f5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f62:	487b      	ldr	r0, [pc, #492]	@ (8014150 <etharp_find_entry+0x288>)
 8013f64:	4613      	mov	r3, r2
 8013f66:	005b      	lsls	r3, r3, #1
 8013f68:	4413      	add	r3, r2
 8013f6a:	00db      	lsls	r3, r3, #3
 8013f6c:	4403      	add	r3, r0
 8013f6e:	3304      	adds	r3, #4
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	4299      	cmp	r1, r3
 8013f74:	d118      	bne.n	8013fa8 <etharp_find_entry+0xe0>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d00c      	beq.n	8013f96 <etharp_find_entry+0xce>
 8013f7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f80:	4973      	ldr	r1, [pc, #460]	@ (8014150 <etharp_find_entry+0x288>)
 8013f82:	4613      	mov	r3, r2
 8013f84:	005b      	lsls	r3, r3, #1
 8013f86:	4413      	add	r3, r2
 8013f88:	00db      	lsls	r3, r3, #3
 8013f8a:	440b      	add	r3, r1
 8013f8c:	3308      	adds	r3, #8
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	687a      	ldr	r2, [r7, #4]
 8013f92:	429a      	cmp	r2, r3
 8013f94:	d108      	bne.n	8013fa8 <etharp_find_entry+0xe0>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
 8013f96:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013f9a:	4619      	mov	r1, r3
 8013f9c:	4871      	ldr	r0, [pc, #452]	@ (8014164 <etharp_find_entry+0x29c>)
 8013f9e:	f002 fe8d 	bl	8016cbc <iprintf>
        /* found exact IP address match, simply bail out */
        return i;
 8013fa2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013fa6:	e142      	b.n	801422e <etharp_find_entry+0x366>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013fa8:	7dfb      	ldrb	r3, [r7, #23]
 8013faa:	2b01      	cmp	r3, #1
 8013fac:	d140      	bne.n	8014030 <etharp_find_entry+0x168>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013fae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013fb2:	4967      	ldr	r1, [pc, #412]	@ (8014150 <etharp_find_entry+0x288>)
 8013fb4:	4613      	mov	r3, r2
 8013fb6:	005b      	lsls	r3, r3, #1
 8013fb8:	4413      	add	r3, r2
 8013fba:	00db      	lsls	r3, r3, #3
 8013fbc:	440b      	add	r3, r1
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d01a      	beq.n	8013ffa <etharp_find_entry+0x132>
          if (arp_table[i].ctime >= age_queue) {
 8013fc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013fc8:	4961      	ldr	r1, [pc, #388]	@ (8014150 <etharp_find_entry+0x288>)
 8013fca:	4613      	mov	r3, r2
 8013fcc:	005b      	lsls	r3, r3, #1
 8013fce:	4413      	add	r3, r2
 8013fd0:	00db      	lsls	r3, r3, #3
 8013fd2:	440b      	add	r3, r1
 8013fd4:	3312      	adds	r3, #18
 8013fd6:	881b      	ldrh	r3, [r3, #0]
 8013fd8:	8bba      	ldrh	r2, [r7, #28]
 8013fda:	429a      	cmp	r2, r3
 8013fdc:	d845      	bhi.n	801406a <etharp_find_entry+0x1a2>
            old_queue = i;
 8013fde:	8c3b      	ldrh	r3, [r7, #32]
 8013fe0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8013fe2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013fe6:	495a      	ldr	r1, [pc, #360]	@ (8014150 <etharp_find_entry+0x288>)
 8013fe8:	4613      	mov	r3, r2
 8013fea:	005b      	lsls	r3, r3, #1
 8013fec:	4413      	add	r3, r2
 8013fee:	00db      	lsls	r3, r3, #3
 8013ff0:	440b      	add	r3, r1
 8013ff2:	3312      	adds	r3, #18
 8013ff4:	881b      	ldrh	r3, [r3, #0]
 8013ff6:	83bb      	strh	r3, [r7, #28]
 8013ff8:	e037      	b.n	801406a <etharp_find_entry+0x1a2>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013ffa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ffe:	4954      	ldr	r1, [pc, #336]	@ (8014150 <etharp_find_entry+0x288>)
 8014000:	4613      	mov	r3, r2
 8014002:	005b      	lsls	r3, r3, #1
 8014004:	4413      	add	r3, r2
 8014006:	00db      	lsls	r3, r3, #3
 8014008:	440b      	add	r3, r1
 801400a:	3312      	adds	r3, #18
 801400c:	881b      	ldrh	r3, [r3, #0]
 801400e:	8b7a      	ldrh	r2, [r7, #26]
 8014010:	429a      	cmp	r2, r3
 8014012:	d82a      	bhi.n	801406a <etharp_find_entry+0x1a2>
            old_pending = i;
 8014014:	8c3b      	ldrh	r3, [r7, #32]
 8014016:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8014018:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801401c:	494c      	ldr	r1, [pc, #304]	@ (8014150 <etharp_find_entry+0x288>)
 801401e:	4613      	mov	r3, r2
 8014020:	005b      	lsls	r3, r3, #1
 8014022:	4413      	add	r3, r2
 8014024:	00db      	lsls	r3, r3, #3
 8014026:	440b      	add	r3, r1
 8014028:	3312      	adds	r3, #18
 801402a:	881b      	ldrh	r3, [r3, #0]
 801402c:	837b      	strh	r3, [r7, #26]
 801402e:	e01c      	b.n	801406a <etharp_find_entry+0x1a2>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014030:	7dfb      	ldrb	r3, [r7, #23]
 8014032:	2b01      	cmp	r3, #1
 8014034:	d919      	bls.n	801406a <etharp_find_entry+0x1a2>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014036:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801403a:	4945      	ldr	r1, [pc, #276]	@ (8014150 <etharp_find_entry+0x288>)
 801403c:	4613      	mov	r3, r2
 801403e:	005b      	lsls	r3, r3, #1
 8014040:	4413      	add	r3, r2
 8014042:	00db      	lsls	r3, r3, #3
 8014044:	440b      	add	r3, r1
 8014046:	3312      	adds	r3, #18
 8014048:	881b      	ldrh	r3, [r3, #0]
 801404a:	8b3a      	ldrh	r2, [r7, #24]
 801404c:	429a      	cmp	r2, r3
 801404e:	d80c      	bhi.n	801406a <etharp_find_entry+0x1a2>
            old_stable = i;
 8014050:	8c3b      	ldrh	r3, [r7, #32]
 8014052:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8014054:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014058:	493d      	ldr	r1, [pc, #244]	@ (8014150 <etharp_find_entry+0x288>)
 801405a:	4613      	mov	r3, r2
 801405c:	005b      	lsls	r3, r3, #1
 801405e:	4413      	add	r3, r2
 8014060:	00db      	lsls	r3, r3, #3
 8014062:	440b      	add	r3, r1
 8014064:	3312      	adds	r3, #18
 8014066:	881b      	ldrh	r3, [r3, #0]
 8014068:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801406a:	8c3b      	ldrh	r3, [r7, #32]
 801406c:	3301      	adds	r3, #1
 801406e:	b29b      	uxth	r3, r3
 8014070:	843b      	strh	r3, [r7, #32]
 8014072:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014076:	2b09      	cmp	r3, #9
 8014078:	f77f af40 	ble.w	8013efc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801407c:	7afb      	ldrb	r3, [r7, #11]
 801407e:	f003 0302 	and.w	r3, r3, #2
 8014082:	2b00      	cmp	r3, #0
 8014084:	d108      	bne.n	8014098 <etharp_find_entry+0x1d0>
 8014086:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801408a:	2b0a      	cmp	r3, #10
 801408c:	d10a      	bne.n	80140a4 <etharp_find_entry+0x1dc>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801408e:	7afb      	ldrb	r3, [r7, #11]
 8014090:	f003 0301 	and.w	r3, r3, #1
 8014094:	2b00      	cmp	r3, #0
 8014096:	d105      	bne.n	80140a4 <etharp_find_entry+0x1dc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
 8014098:	4833      	ldr	r0, [pc, #204]	@ (8014168 <etharp_find_entry+0x2a0>)
 801409a:	f002 fe7f 	bl	8016d9c <puts>
    return (s16_t)ERR_MEM;
 801409e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80140a2:	e0c4      	b.n	801422e <etharp_find_entry+0x366>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80140a4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80140a8:	2b09      	cmp	r3, #9
 80140aa:	dc08      	bgt.n	80140be <etharp_find_entry+0x1f6>
    i = empty;
 80140ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80140ae:	843b      	strh	r3, [r7, #32]
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
 80140b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80140b4:	4619      	mov	r1, r3
 80140b6:	482d      	ldr	r0, [pc, #180]	@ (801416c <etharp_find_entry+0x2a4>)
 80140b8:	f002 fe00 	bl	8016cbc <iprintf>
 80140bc:	e072      	b.n	80141a4 <etharp_find_entry+0x2dc>
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80140be:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80140c2:	2b09      	cmp	r3, #9
 80140c4:	dc1a      	bgt.n	80140fc <etharp_find_entry+0x234>
      /* recycle oldest stable*/
      i = old_stable;
 80140c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80140c8:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
 80140ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80140ce:	4619      	mov	r1, r3
 80140d0:	4827      	ldr	r0, [pc, #156]	@ (8014170 <etharp_find_entry+0x2a8>)
 80140d2:	f002 fdf3 	bl	8016cbc <iprintf>
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80140d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140da:	491d      	ldr	r1, [pc, #116]	@ (8014150 <etharp_find_entry+0x288>)
 80140dc:	4613      	mov	r3, r2
 80140de:	005b      	lsls	r3, r3, #1
 80140e0:	4413      	add	r3, r2
 80140e2:	00db      	lsls	r3, r3, #3
 80140e4:	440b      	add	r3, r1
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d04b      	beq.n	8014184 <etharp_find_entry+0x2bc>
 80140ec:	4b1a      	ldr	r3, [pc, #104]	@ (8014158 <etharp_find_entry+0x290>)
 80140ee:	f240 126d 	movw	r2, #365	@ 0x16d
 80140f2:	4920      	ldr	r1, [pc, #128]	@ (8014174 <etharp_find_entry+0x2ac>)
 80140f4:	481a      	ldr	r0, [pc, #104]	@ (8014160 <etharp_find_entry+0x298>)
 80140f6:	f002 fde1 	bl	8016cbc <iprintf>
 80140fa:	e043      	b.n	8014184 <etharp_find_entry+0x2bc>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80140fc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8014100:	2b09      	cmp	r3, #9
 8014102:	dc08      	bgt.n	8014116 <etharp_find_entry+0x24e>
      /* recycle oldest pending */
      i = old_pending;
 8014104:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014106:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
 8014108:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801410c:	4619      	mov	r1, r3
 801410e:	481a      	ldr	r0, [pc, #104]	@ (8014178 <etharp_find_entry+0x2b0>)
 8014110:	f002 fdd4 	bl	8016cbc <iprintf>
 8014114:	e036      	b.n	8014184 <etharp_find_entry+0x2bc>
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014116:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801411a:	2b09      	cmp	r3, #9
 801411c:	dc11      	bgt.n	8014142 <etharp_find_entry+0x27a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801411e:	8bfb      	ldrh	r3, [r7, #30]
 8014120:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
 8014122:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 8014126:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801412a:	4809      	ldr	r0, [pc, #36]	@ (8014150 <etharp_find_entry+0x288>)
 801412c:	4613      	mov	r3, r2
 801412e:	005b      	lsls	r3, r3, #1
 8014130:	4413      	add	r3, r2
 8014132:	00db      	lsls	r3, r3, #3
 8014134:	4403      	add	r3, r0
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	461a      	mov	r2, r3
 801413a:	4810      	ldr	r0, [pc, #64]	@ (801417c <etharp_find_entry+0x2b4>)
 801413c:	f002 fdbe 	bl	8016cbc <iprintf>
 8014140:	e020      	b.n	8014184 <etharp_find_entry+0x2bc>
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
 8014142:	480f      	ldr	r0, [pc, #60]	@ (8014180 <etharp_find_entry+0x2b8>)
 8014144:	f002 fe2a 	bl	8016d9c <puts>
      return (s16_t)ERR_MEM;
 8014148:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801414c:	e06f      	b.n	801422e <etharp_find_entry+0x366>
 801414e:	bf00      	nop
 8014150:	24003388 	.word	0x24003388
 8014154:	0801c4f0 	.word	0x0801c4f0
 8014158:	0801c51c 	.word	0x0801c51c
 801415c:	0801c554 	.word	0x0801c554
 8014160:	0801c594 	.word	0x0801c594
 8014164:	0801c5bc 	.word	0x0801c5bc
 8014168:	0801c5e8 	.word	0x0801c5e8
 801416c:	0801c62c 	.word	0x0801c62c
 8014170:	0801c65c 	.word	0x0801c65c
 8014174:	0801c694 	.word	0x0801c694
 8014178:	0801c6ac 	.word	0x0801c6ac
 801417c:	0801c6f4 	.word	0x0801c6f4
 8014180:	0801c744 	.word	0x0801c744
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014184:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014188:	2b09      	cmp	r3, #9
 801418a:	dd06      	ble.n	801419a <etharp_find_entry+0x2d2>
 801418c:	4b2a      	ldr	r3, [pc, #168]	@ (8014238 <etharp_find_entry+0x370>)
 801418e:	f240 127f 	movw	r2, #383	@ 0x17f
 8014192:	492a      	ldr	r1, [pc, #168]	@ (801423c <etharp_find_entry+0x374>)
 8014194:	482a      	ldr	r0, [pc, #168]	@ (8014240 <etharp_find_entry+0x378>)
 8014196:	f002 fd91 	bl	8016cbc <iprintf>
    etharp_free_entry(i);
 801419a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801419e:	4618      	mov	r0, r3
 80141a0:	f7ff fd5a 	bl	8013c58 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80141a4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80141a8:	2b09      	cmp	r3, #9
 80141aa:	dd06      	ble.n	80141ba <etharp_find_entry+0x2f2>
 80141ac:	4b22      	ldr	r3, [pc, #136]	@ (8014238 <etharp_find_entry+0x370>)
 80141ae:	f240 1283 	movw	r2, #387	@ 0x183
 80141b2:	4922      	ldr	r1, [pc, #136]	@ (801423c <etharp_find_entry+0x374>)
 80141b4:	4822      	ldr	r0, [pc, #136]	@ (8014240 <etharp_find_entry+0x378>)
 80141b6:	f002 fd81 	bl	8016cbc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80141ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141be:	4921      	ldr	r1, [pc, #132]	@ (8014244 <etharp_find_entry+0x37c>)
 80141c0:	4613      	mov	r3, r2
 80141c2:	005b      	lsls	r3, r3, #1
 80141c4:	4413      	add	r3, r2
 80141c6:	00db      	lsls	r3, r3, #3
 80141c8:	440b      	add	r3, r1
 80141ca:	3314      	adds	r3, #20
 80141cc:	781b      	ldrb	r3, [r3, #0]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d006      	beq.n	80141e0 <etharp_find_entry+0x318>
 80141d2:	4b19      	ldr	r3, [pc, #100]	@ (8014238 <etharp_find_entry+0x370>)
 80141d4:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80141d8:	491b      	ldr	r1, [pc, #108]	@ (8014248 <etharp_find_entry+0x380>)
 80141da:	4819      	ldr	r0, [pc, #100]	@ (8014240 <etharp_find_entry+0x378>)
 80141dc:	f002 fd6e 	bl	8016cbc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d00b      	beq.n	80141fe <etharp_find_entry+0x336>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80141e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	6819      	ldr	r1, [r3, #0]
 80141ee:	4815      	ldr	r0, [pc, #84]	@ (8014244 <etharp_find_entry+0x37c>)
 80141f0:	4613      	mov	r3, r2
 80141f2:	005b      	lsls	r3, r3, #1
 80141f4:	4413      	add	r3, r2
 80141f6:	00db      	lsls	r3, r3, #3
 80141f8:	4403      	add	r3, r0
 80141fa:	3304      	adds	r3, #4
 80141fc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80141fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014202:	4910      	ldr	r1, [pc, #64]	@ (8014244 <etharp_find_entry+0x37c>)
 8014204:	4613      	mov	r3, r2
 8014206:	005b      	lsls	r3, r3, #1
 8014208:	4413      	add	r3, r2
 801420a:	00db      	lsls	r3, r3, #3
 801420c:	440b      	add	r3, r1
 801420e:	3312      	adds	r3, #18
 8014210:	2200      	movs	r2, #0
 8014212:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014214:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014218:	490a      	ldr	r1, [pc, #40]	@ (8014244 <etharp_find_entry+0x37c>)
 801421a:	4613      	mov	r3, r2
 801421c:	005b      	lsls	r3, r3, #1
 801421e:	4413      	add	r3, r2
 8014220:	00db      	lsls	r3, r3, #3
 8014222:	440b      	add	r3, r1
 8014224:	3308      	adds	r3, #8
 8014226:	687a      	ldr	r2, [r7, #4]
 8014228:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801422a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801422e:	4618      	mov	r0, r3
 8014230:	3728      	adds	r7, #40	@ 0x28
 8014232:	46bd      	mov	sp, r7
 8014234:	bd80      	pop	{r7, pc}
 8014236:	bf00      	nop
 8014238:	0801c51c 	.word	0x0801c51c
 801423c:	0801c77c 	.word	0x0801c77c
 8014240:	0801c594 	.word	0x0801c594
 8014244:	24003388 	.word	0x24003388
 8014248:	0801c790 	.word	0x0801c790

0801424c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801424c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014250:	b08e      	sub	sp, #56	@ 0x38
 8014252:	af08      	add	r7, sp, #32
 8014254:	60f8      	str	r0, [r7, #12]
 8014256:	60b9      	str	r1, [r7, #8]
 8014258:	607a      	str	r2, [r7, #4]
 801425a:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014262:	2b06      	cmp	r3, #6
 8014264:	d006      	beq.n	8014274 <etharp_update_arp_entry+0x28>
 8014266:	4b64      	ldr	r3, [pc, #400]	@ (80143f8 <etharp_update_arp_entry+0x1ac>)
 8014268:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801426c:	4963      	ldr	r1, [pc, #396]	@ (80143fc <etharp_update_arp_entry+0x1b0>)
 801426e:	4864      	ldr	r0, [pc, #400]	@ (8014400 <etharp_update_arp_entry+0x1b4>)
 8014270:	f002 fd24 	bl	8016cbc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
 8014274:	68bb      	ldr	r3, [r7, #8]
 8014276:	781b      	ldrb	r3, [r3, #0]
 8014278:	469c      	mov	ip, r3
 801427a:	68bb      	ldr	r3, [r7, #8]
 801427c:	3301      	adds	r3, #1
 801427e:	781b      	ldrb	r3, [r3, #0]
 8014280:	469e      	mov	lr, r3
 8014282:	68bb      	ldr	r3, [r7, #8]
 8014284:	3302      	adds	r3, #2
 8014286:	781b      	ldrb	r3, [r3, #0]
 8014288:	4698      	mov	r8, r3
 801428a:	68bb      	ldr	r3, [r7, #8]
 801428c:	3303      	adds	r3, #3
 801428e:	781b      	ldrb	r3, [r3, #0]
 8014290:	461a      	mov	r2, r3
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	781b      	ldrb	r3, [r3, #0]
 8014296:	4619      	mov	r1, r3
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	785b      	ldrb	r3, [r3, #1]
 801429c:	4618      	mov	r0, r3
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	789b      	ldrb	r3, [r3, #2]
 80142a2:	461c      	mov	r4, r3
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	78db      	ldrb	r3, [r3, #3]
 80142a8:	461d      	mov	r5, r3
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	791b      	ldrb	r3, [r3, #4]
 80142ae:	461e      	mov	r6, r3
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	795b      	ldrb	r3, [r3, #5]
 80142b4:	9306      	str	r3, [sp, #24]
 80142b6:	9605      	str	r6, [sp, #20]
 80142b8:	9504      	str	r5, [sp, #16]
 80142ba:	9403      	str	r4, [sp, #12]
 80142bc:	9002      	str	r0, [sp, #8]
 80142be:	9101      	str	r1, [sp, #4]
 80142c0:	9200      	str	r2, [sp, #0]
 80142c2:	4643      	mov	r3, r8
 80142c4:	4672      	mov	r2, lr
 80142c6:	4661      	mov	r1, ip
 80142c8:	484e      	ldr	r0, [pc, #312]	@ (8014404 <etharp_update_arp_entry+0x1b8>)
 80142ca:	f002 fcf7 	bl	8016cbc <iprintf>
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80142ce:	68bb      	ldr	r3, [r7, #8]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d012      	beq.n	80142fa <etharp_update_arp_entry+0xae>
 80142d4:	68bb      	ldr	r3, [r7, #8]
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d00e      	beq.n	80142fa <etharp_update_arp_entry+0xae>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80142dc:	68bb      	ldr	r3, [r7, #8]
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	68f9      	ldr	r1, [r7, #12]
 80142e2:	4618      	mov	r0, r3
 80142e4:	f001 fc2a 	bl	8015b3c <ip4_addr_isbroadcast_u32>
 80142e8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d105      	bne.n	80142fa <etharp_update_arp_entry+0xae>
      ip4_addr_ismulticast(ipaddr)) {
 80142ee:	68bb      	ldr	r3, [r7, #8]
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80142f6:	2be0      	cmp	r3, #224	@ 0xe0
 80142f8:	d105      	bne.n	8014306 <etharp_update_arp_entry+0xba>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
 80142fa:	4843      	ldr	r0, [pc, #268]	@ (8014408 <etharp_update_arp_entry+0x1bc>)
 80142fc:	f002 fd4e 	bl	8016d9c <puts>
    return ERR_ARG;
 8014300:	f06f 030f 	mvn.w	r3, #15
 8014304:	e072      	b.n	80143ec <etharp_update_arp_entry+0x1a0>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014306:	78fb      	ldrb	r3, [r7, #3]
 8014308:	68fa      	ldr	r2, [r7, #12]
 801430a:	4619      	mov	r1, r3
 801430c:	68b8      	ldr	r0, [r7, #8]
 801430e:	f7ff fddb 	bl	8013ec8 <etharp_find_entry>
 8014312:	4603      	mov	r3, r0
 8014314:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014316:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801431a:	2b00      	cmp	r3, #0
 801431c:	da02      	bge.n	8014324 <etharp_update_arp_entry+0xd8>
    return (err_t)i;
 801431e:	8afb      	ldrh	r3, [r7, #22]
 8014320:	b25b      	sxtb	r3, r3
 8014322:	e063      	b.n	80143ec <etharp_update_arp_entry+0x1a0>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014324:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014328:	4938      	ldr	r1, [pc, #224]	@ (801440c <etharp_update_arp_entry+0x1c0>)
 801432a:	4613      	mov	r3, r2
 801432c:	005b      	lsls	r3, r3, #1
 801432e:	4413      	add	r3, r2
 8014330:	00db      	lsls	r3, r3, #3
 8014332:	440b      	add	r3, r1
 8014334:	3314      	adds	r3, #20
 8014336:	2202      	movs	r2, #2
 8014338:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801433a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801433e:	4933      	ldr	r1, [pc, #204]	@ (801440c <etharp_update_arp_entry+0x1c0>)
 8014340:	4613      	mov	r3, r2
 8014342:	005b      	lsls	r3, r3, #1
 8014344:	4413      	add	r3, r2
 8014346:	00db      	lsls	r3, r3, #3
 8014348:	440b      	add	r3, r1
 801434a:	3308      	adds	r3, #8
 801434c:	68fa      	ldr	r2, [r7, #12]
 801434e:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
 8014350:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014354:	4619      	mov	r1, r3
 8014356:	482e      	ldr	r0, [pc, #184]	@ (8014410 <etharp_update_arp_entry+0x1c4>)
 8014358:	f002 fcb0 	bl	8016cbc <iprintf>
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801435c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014360:	4613      	mov	r3, r2
 8014362:	005b      	lsls	r3, r3, #1
 8014364:	4413      	add	r3, r2
 8014366:	00db      	lsls	r3, r3, #3
 8014368:	3308      	adds	r3, #8
 801436a:	4a28      	ldr	r2, [pc, #160]	@ (801440c <etharp_update_arp_entry+0x1c0>)
 801436c:	4413      	add	r3, r2
 801436e:	3304      	adds	r3, #4
 8014370:	2206      	movs	r2, #6
 8014372:	6879      	ldr	r1, [r7, #4]
 8014374:	4618      	mov	r0, r3
 8014376:	f002 fe76 	bl	8017066 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801437a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801437e:	4923      	ldr	r1, [pc, #140]	@ (801440c <etharp_update_arp_entry+0x1c0>)
 8014380:	4613      	mov	r3, r2
 8014382:	005b      	lsls	r3, r3, #1
 8014384:	4413      	add	r3, r2
 8014386:	00db      	lsls	r3, r3, #3
 8014388:	440b      	add	r3, r1
 801438a:	3312      	adds	r3, #18
 801438c:	2200      	movs	r2, #0
 801438e:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014390:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014394:	491d      	ldr	r1, [pc, #116]	@ (801440c <etharp_update_arp_entry+0x1c0>)
 8014396:	4613      	mov	r3, r2
 8014398:	005b      	lsls	r3, r3, #1
 801439a:	4413      	add	r3, r2
 801439c:	00db      	lsls	r3, r3, #3
 801439e:	440b      	add	r3, r1
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d021      	beq.n	80143ea <etharp_update_arp_entry+0x19e>
    struct pbuf *p = arp_table[i].q;
 80143a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80143aa:	4918      	ldr	r1, [pc, #96]	@ (801440c <etharp_update_arp_entry+0x1c0>)
 80143ac:	4613      	mov	r3, r2
 80143ae:	005b      	lsls	r3, r3, #1
 80143b0:	4413      	add	r3, r2
 80143b2:	00db      	lsls	r3, r3, #3
 80143b4:	440b      	add	r3, r1
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80143ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80143be:	4913      	ldr	r1, [pc, #76]	@ (801440c <etharp_update_arp_entry+0x1c0>)
 80143c0:	4613      	mov	r3, r2
 80143c2:	005b      	lsls	r3, r3, #1
 80143c4:	4413      	add	r3, r2
 80143c6:	00db      	lsls	r3, r3, #3
 80143c8:	440b      	add	r3, r1
 80143ca:	2200      	movs	r2, #0
 80143cc:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 80143d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80143d8:	9300      	str	r3, [sp, #0]
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	6939      	ldr	r1, [r7, #16]
 80143de:	68f8      	ldr	r0, [r7, #12]
 80143e0:	f002 fb1a 	bl	8016a18 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80143e4:	6938      	ldr	r0, [r7, #16]
 80143e6:	f7f6 fca5 	bl	800ad34 <pbuf_free>
  }
  return ERR_OK;
 80143ea:	2300      	movs	r3, #0
}
 80143ec:	4618      	mov	r0, r3
 80143ee:	3718      	adds	r7, #24
 80143f0:	46bd      	mov	sp, r7
 80143f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143f6:	bf00      	nop
 80143f8:	0801c51c 	.word	0x0801c51c
 80143fc:	0801c7bc 	.word	0x0801c7bc
 8014400:	0801c594 	.word	0x0801c594
 8014404:	0801c7e0 	.word	0x0801c7e0
 8014408:	0801c830 	.word	0x0801c830
 801440c:	24003388 	.word	0x24003388
 8014410:	0801c87c 	.word	0x0801c87c

08014414 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014414:	b580      	push	{r7, lr}
 8014416:	b084      	sub	sp, #16
 8014418:	af00      	add	r7, sp, #0
 801441a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801441c:	2300      	movs	r3, #0
 801441e:	60fb      	str	r3, [r7, #12]
 8014420:	e01e      	b.n	8014460 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014422:	4913      	ldr	r1, [pc, #76]	@ (8014470 <etharp_cleanup_netif+0x5c>)
 8014424:	68fa      	ldr	r2, [r7, #12]
 8014426:	4613      	mov	r3, r2
 8014428:	005b      	lsls	r3, r3, #1
 801442a:	4413      	add	r3, r2
 801442c:	00db      	lsls	r3, r3, #3
 801442e:	440b      	add	r3, r1
 8014430:	3314      	adds	r3, #20
 8014432:	781b      	ldrb	r3, [r3, #0]
 8014434:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014436:	7afb      	ldrb	r3, [r7, #11]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d00e      	beq.n	801445a <etharp_cleanup_netif+0x46>
 801443c:	490c      	ldr	r1, [pc, #48]	@ (8014470 <etharp_cleanup_netif+0x5c>)
 801443e:	68fa      	ldr	r2, [r7, #12]
 8014440:	4613      	mov	r3, r2
 8014442:	005b      	lsls	r3, r3, #1
 8014444:	4413      	add	r3, r2
 8014446:	00db      	lsls	r3, r3, #3
 8014448:	440b      	add	r3, r1
 801444a:	3308      	adds	r3, #8
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	687a      	ldr	r2, [r7, #4]
 8014450:	429a      	cmp	r2, r3
 8014452:	d102      	bne.n	801445a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014454:	68f8      	ldr	r0, [r7, #12]
 8014456:	f7ff fbff 	bl	8013c58 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	3301      	adds	r3, #1
 801445e:	60fb      	str	r3, [r7, #12]
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	2b09      	cmp	r3, #9
 8014464:	dddd      	ble.n	8014422 <etharp_cleanup_netif+0xe>
    }
  }
}
 8014466:	bf00      	nop
 8014468:	bf00      	nop
 801446a:	3710      	adds	r7, #16
 801446c:	46bd      	mov	sp, r7
 801446e:	bd80      	pop	{r7, pc}
 8014470:	24003388 	.word	0x24003388

08014474 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014474:	b5b0      	push	{r4, r5, r7, lr}
 8014476:	b08a      	sub	sp, #40	@ 0x28
 8014478:	af04      	add	r7, sp, #16
 801447a:	6078      	str	r0, [r7, #4]
 801447c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801447e:	683b      	ldr	r3, [r7, #0]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d107      	bne.n	8014494 <etharp_input+0x20>
 8014484:	4b57      	ldr	r3, [pc, #348]	@ (80145e4 <etharp_input+0x170>)
 8014486:	f240 228a 	movw	r2, #650	@ 0x28a
 801448a:	4957      	ldr	r1, [pc, #348]	@ (80145e8 <etharp_input+0x174>)
 801448c:	4857      	ldr	r0, [pc, #348]	@ (80145ec <etharp_input+0x178>)
 801448e:	f002 fc15 	bl	8016cbc <iprintf>
 8014492:	e0a4      	b.n	80145de <etharp_input+0x16a>

  hdr = (struct etharp_hdr *)p->payload;
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	685b      	ldr	r3, [r3, #4]
 8014498:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801449a:	693b      	ldr	r3, [r7, #16]
 801449c:	881b      	ldrh	r3, [r3, #0]
 801449e:	b29b      	uxth	r3, r3
 80144a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80144a4:	d10c      	bne.n	80144c0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80144a6:	693b      	ldr	r3, [r7, #16]
 80144a8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80144aa:	2b06      	cmp	r3, #6
 80144ac:	d108      	bne.n	80144c0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80144ae:	693b      	ldr	r3, [r7, #16]
 80144b0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80144b2:	2b04      	cmp	r3, #4
 80144b4:	d104      	bne.n	80144c0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80144b6:	693b      	ldr	r3, [r7, #16]
 80144b8:	885b      	ldrh	r3, [r3, #2]
 80144ba:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80144bc:	2b08      	cmp	r3, #8
 80144be:	d015      	beq.n	80144ec <etharp_input+0x78>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 80144c0:	693b      	ldr	r3, [r7, #16]
 80144c2:	881b      	ldrh	r3, [r3, #0]
 80144c4:	b29b      	uxth	r3, r3
 80144c6:	4619      	mov	r1, r3
 80144c8:	693b      	ldr	r3, [r7, #16]
 80144ca:	791b      	ldrb	r3, [r3, #4]
 80144cc:	461a      	mov	r2, r3
 80144ce:	693b      	ldr	r3, [r7, #16]
 80144d0:	885b      	ldrh	r3, [r3, #2]
 80144d2:	b29b      	uxth	r3, r3
 80144d4:	4618      	mov	r0, r3
 80144d6:	693b      	ldr	r3, [r7, #16]
 80144d8:	795b      	ldrb	r3, [r3, #5]
 80144da:	9300      	str	r3, [sp, #0]
 80144dc:	4603      	mov	r3, r0
 80144de:	4844      	ldr	r0, [pc, #272]	@ (80145f0 <etharp_input+0x17c>)
 80144e0:	f002 fbec 	bl	8016cbc <iprintf>
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80144e4:	6878      	ldr	r0, [r7, #4]
 80144e6:	f7f6 fc25 	bl	800ad34 <pbuf_free>
    return;
 80144ea:	e078      	b.n	80145de <etharp_input+0x16a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80144ec:	693b      	ldr	r3, [r7, #16]
 80144ee:	330e      	adds	r3, #14
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80144f4:	693b      	ldr	r3, [r7, #16]
 80144f6:	3318      	adds	r3, #24
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80144fc:	683b      	ldr	r3, [r7, #0]
 80144fe:	3304      	adds	r3, #4
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	2b00      	cmp	r3, #0
 8014504:	d102      	bne.n	801450c <etharp_input+0x98>
    for_us = 0;
 8014506:	2300      	movs	r3, #0
 8014508:	75fb      	strb	r3, [r7, #23]
 801450a:	e009      	b.n	8014520 <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801450c:	68ba      	ldr	r2, [r7, #8]
 801450e:	683b      	ldr	r3, [r7, #0]
 8014510:	3304      	adds	r3, #4
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	429a      	cmp	r2, r3
 8014516:	bf0c      	ite	eq
 8014518:	2301      	moveq	r3, #1
 801451a:	2300      	movne	r3, #0
 801451c:	b2db      	uxtb	r3, r3
 801451e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014520:	693b      	ldr	r3, [r7, #16]
 8014522:	f103 0208 	add.w	r2, r3, #8
 8014526:	7dfb      	ldrb	r3, [r7, #23]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d001      	beq.n	8014530 <etharp_input+0xbc>
 801452c:	2301      	movs	r3, #1
 801452e:	e000      	b.n	8014532 <etharp_input+0xbe>
 8014530:	2302      	movs	r3, #2
 8014532:	f107 010c 	add.w	r1, r7, #12
 8014536:	6838      	ldr	r0, [r7, #0]
 8014538:	f7ff fe88 	bl	801424c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801453c:	693b      	ldr	r3, [r7, #16]
 801453e:	88db      	ldrh	r3, [r3, #6]
 8014540:	b29b      	uxth	r3, r3
 8014542:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014546:	d003      	beq.n	8014550 <etharp_input+0xdc>
 8014548:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801454c:	d02e      	beq.n	80145ac <etharp_input+0x138>
 801454e:	e037      	b.n	80145c0 <etharp_input+0x14c>
    case PP_HTONS(ARP_REQUEST):
      /* ARP request. If it asked for our address, we send out a
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
 8014550:	4828      	ldr	r0, [pc, #160]	@ (80145f4 <etharp_input+0x180>)
 8014552:	f002 fc23 	bl	8016d9c <puts>
      /* ARP request for our address? */
      if (for_us) {
 8014556:	7dfb      	ldrb	r3, [r7, #23]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d01a      	beq.n	8014592 <etharp_input+0x11e>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801455c:	683b      	ldr	r3, [r7, #0]
 801455e:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8014562:	693b      	ldr	r3, [r7, #16]
 8014564:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014568:	683b      	ldr	r3, [r7, #0]
 801456a:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 801456e:	683b      	ldr	r3, [r7, #0]
 8014570:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014572:	693a      	ldr	r2, [r7, #16]
 8014574:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014576:	2102      	movs	r1, #2
 8014578:	9103      	str	r1, [sp, #12]
 801457a:	f107 010c 	add.w	r1, r7, #12
 801457e:	9102      	str	r1, [sp, #8]
 8014580:	9201      	str	r2, [sp, #4]
 8014582:	9300      	str	r3, [sp, #0]
 8014584:	462b      	mov	r3, r5
 8014586:	4622      	mov	r2, r4
 8014588:	4601      	mov	r1, r0
 801458a:	6838      	ldr	r0, [r7, #0]
 801458c:	f000 fb3e 	bl	8014c0c <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 8014590:	e022      	b.n	80145d8 <etharp_input+0x164>
      } else if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014592:	683b      	ldr	r3, [r7, #0]
 8014594:	3304      	adds	r3, #4
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d103      	bne.n	80145a4 <etharp_input+0x130>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: we are unconfigured, ARP request ignored.\n"));
 801459c:	4816      	ldr	r0, [pc, #88]	@ (80145f8 <etharp_input+0x184>)
 801459e:	f002 fbfd 	bl	8016d9c <puts>
      break;
 80145a2:	e019      	b.n	80145d8 <etharp_input+0x164>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
 80145a4:	4815      	ldr	r0, [pc, #84]	@ (80145fc <etharp_input+0x188>)
 80145a6:	f002 fbf9 	bl	8016d9c <puts>
      break;
 80145aa:	e015      	b.n	80145d8 <etharp_input+0x164>
    case PP_HTONS(ARP_REPLY):
      /* ARP reply. We already updated the ARP cache earlier. */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP reply\n"));
 80145ac:	4814      	ldr	r0, [pc, #80]	@ (8014600 <etharp_input+0x18c>)
 80145ae:	f002 fbf5 	bl	8016d9c <puts>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
      /* DHCP wants to know about ARP replies from any host with an
       * IP address also offered to us by the DHCP server. We do not
       * want to take a duplicate IP address on a single network.
       * @todo How should we handle redundant (fail-over) interfaces? */
      dhcp_arp_reply(netif, &sipaddr);
 80145b2:	f107 030c 	add.w	r3, r7, #12
 80145b6:	4619      	mov	r1, r3
 80145b8:	6838      	ldr	r0, [r7, #0]
 80145ba:	f7fd ff65 	bl	8012488 <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
 80145be:	e00b      	b.n	80145d8 <etharp_input+0x164>
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
 80145c0:	693b      	ldr	r3, [r7, #16]
 80145c2:	88db      	ldrh	r3, [r3, #6]
 80145c4:	b29b      	uxth	r3, r3
 80145c6:	4618      	mov	r0, r3
 80145c8:	f7f4 ff36 	bl	8009438 <lwip_htons>
 80145cc:	4603      	mov	r3, r0
 80145ce:	4619      	mov	r1, r3
 80145d0:	480c      	ldr	r0, [pc, #48]	@ (8014604 <etharp_input+0x190>)
 80145d2:	f002 fb73 	bl	8016cbc <iprintf>
      ETHARP_STATS_INC(etharp.err);
      break;
 80145d6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80145d8:	6878      	ldr	r0, [r7, #4]
 80145da:	f7f6 fbab 	bl	800ad34 <pbuf_free>
}
 80145de:	3718      	adds	r7, #24
 80145e0:	46bd      	mov	sp, r7
 80145e2:	bdb0      	pop	{r4, r5, r7, pc}
 80145e4:	0801c51c 	.word	0x0801c51c
 80145e8:	0801c8e4 	.word	0x0801c8e4
 80145ec:	0801c594 	.word	0x0801c594
 80145f0:	0801c904 	.word	0x0801c904
 80145f4:	0801c96c 	.word	0x0801c96c
 80145f8:	0801c990 	.word	0x0801c990
 80145fc:	0801c9c8 	.word	0x0801c9c8
 8014600:	0801c9f4 	.word	0x0801c9f4
 8014604:	0801ca18 	.word	0x0801ca18

08014608 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014608:	b580      	push	{r7, lr}
 801460a:	b086      	sub	sp, #24
 801460c:	af02      	add	r7, sp, #8
 801460e:	60f8      	str	r0, [r7, #12]
 8014610:	60b9      	str	r1, [r7, #8]
 8014612:	4613      	mov	r3, r2
 8014614:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014616:	79fa      	ldrb	r2, [r7, #7]
 8014618:	4944      	ldr	r1, [pc, #272]	@ (801472c <etharp_output_to_arp_index+0x124>)
 801461a:	4613      	mov	r3, r2
 801461c:	005b      	lsls	r3, r3, #1
 801461e:	4413      	add	r3, r2
 8014620:	00db      	lsls	r3, r3, #3
 8014622:	440b      	add	r3, r1
 8014624:	3314      	adds	r3, #20
 8014626:	781b      	ldrb	r3, [r3, #0]
 8014628:	2b01      	cmp	r3, #1
 801462a:	d806      	bhi.n	801463a <etharp_output_to_arp_index+0x32>
 801462c:	4b40      	ldr	r3, [pc, #256]	@ (8014730 <etharp_output_to_arp_index+0x128>)
 801462e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8014632:	4940      	ldr	r1, [pc, #256]	@ (8014734 <etharp_output_to_arp_index+0x12c>)
 8014634:	4840      	ldr	r0, [pc, #256]	@ (8014738 <etharp_output_to_arp_index+0x130>)
 8014636:	f002 fb41 	bl	8016cbc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801463a:	79fa      	ldrb	r2, [r7, #7]
 801463c:	493b      	ldr	r1, [pc, #236]	@ (801472c <etharp_output_to_arp_index+0x124>)
 801463e:	4613      	mov	r3, r2
 8014640:	005b      	lsls	r3, r3, #1
 8014642:	4413      	add	r3, r2
 8014644:	00db      	lsls	r3, r3, #3
 8014646:	440b      	add	r3, r1
 8014648:	3314      	adds	r3, #20
 801464a:	781b      	ldrb	r3, [r3, #0]
 801464c:	2b02      	cmp	r3, #2
 801464e:	d153      	bne.n	80146f8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014650:	79fa      	ldrb	r2, [r7, #7]
 8014652:	4936      	ldr	r1, [pc, #216]	@ (801472c <etharp_output_to_arp_index+0x124>)
 8014654:	4613      	mov	r3, r2
 8014656:	005b      	lsls	r3, r3, #1
 8014658:	4413      	add	r3, r2
 801465a:	00db      	lsls	r3, r3, #3
 801465c:	440b      	add	r3, r1
 801465e:	3312      	adds	r3, #18
 8014660:	881b      	ldrh	r3, [r3, #0]
 8014662:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8014666:	d919      	bls.n	801469c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014668:	79fa      	ldrb	r2, [r7, #7]
 801466a:	4613      	mov	r3, r2
 801466c:	005b      	lsls	r3, r3, #1
 801466e:	4413      	add	r3, r2
 8014670:	00db      	lsls	r3, r3, #3
 8014672:	4a2e      	ldr	r2, [pc, #184]	@ (801472c <etharp_output_to_arp_index+0x124>)
 8014674:	4413      	add	r3, r2
 8014676:	3304      	adds	r3, #4
 8014678:	4619      	mov	r1, r3
 801467a:	68f8      	ldr	r0, [r7, #12]
 801467c:	f000 fb7e 	bl	8014d7c <etharp_request>
 8014680:	4603      	mov	r3, r0
 8014682:	2b00      	cmp	r3, #0
 8014684:	d138      	bne.n	80146f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014686:	79fa      	ldrb	r2, [r7, #7]
 8014688:	4928      	ldr	r1, [pc, #160]	@ (801472c <etharp_output_to_arp_index+0x124>)
 801468a:	4613      	mov	r3, r2
 801468c:	005b      	lsls	r3, r3, #1
 801468e:	4413      	add	r3, r2
 8014690:	00db      	lsls	r3, r3, #3
 8014692:	440b      	add	r3, r1
 8014694:	3314      	adds	r3, #20
 8014696:	2203      	movs	r2, #3
 8014698:	701a      	strb	r2, [r3, #0]
 801469a:	e02d      	b.n	80146f8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801469c:	79fa      	ldrb	r2, [r7, #7]
 801469e:	4923      	ldr	r1, [pc, #140]	@ (801472c <etharp_output_to_arp_index+0x124>)
 80146a0:	4613      	mov	r3, r2
 80146a2:	005b      	lsls	r3, r3, #1
 80146a4:	4413      	add	r3, r2
 80146a6:	00db      	lsls	r3, r3, #3
 80146a8:	440b      	add	r3, r1
 80146aa:	3312      	adds	r3, #18
 80146ac:	881b      	ldrh	r3, [r3, #0]
 80146ae:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80146b2:	d321      	bcc.n	80146f8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80146b4:	79fa      	ldrb	r2, [r7, #7]
 80146b6:	4613      	mov	r3, r2
 80146b8:	005b      	lsls	r3, r3, #1
 80146ba:	4413      	add	r3, r2
 80146bc:	00db      	lsls	r3, r3, #3
 80146be:	4a1b      	ldr	r2, [pc, #108]	@ (801472c <etharp_output_to_arp_index+0x124>)
 80146c0:	4413      	add	r3, r2
 80146c2:	1d19      	adds	r1, r3, #4
 80146c4:	79fa      	ldrb	r2, [r7, #7]
 80146c6:	4613      	mov	r3, r2
 80146c8:	005b      	lsls	r3, r3, #1
 80146ca:	4413      	add	r3, r2
 80146cc:	00db      	lsls	r3, r3, #3
 80146ce:	3308      	adds	r3, #8
 80146d0:	4a16      	ldr	r2, [pc, #88]	@ (801472c <etharp_output_to_arp_index+0x124>)
 80146d2:	4413      	add	r3, r2
 80146d4:	3304      	adds	r3, #4
 80146d6:	461a      	mov	r2, r3
 80146d8:	68f8      	ldr	r0, [r7, #12]
 80146da:	f000 fb2d 	bl	8014d38 <etharp_request_dst>
 80146de:	4603      	mov	r3, r0
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d109      	bne.n	80146f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80146e4:	79fa      	ldrb	r2, [r7, #7]
 80146e6:	4911      	ldr	r1, [pc, #68]	@ (801472c <etharp_output_to_arp_index+0x124>)
 80146e8:	4613      	mov	r3, r2
 80146ea:	005b      	lsls	r3, r3, #1
 80146ec:	4413      	add	r3, r2
 80146ee:	00db      	lsls	r3, r3, #3
 80146f0:	440b      	add	r3, r1
 80146f2:	3314      	adds	r3, #20
 80146f4:	2203      	movs	r2, #3
 80146f6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 80146fe:	79fa      	ldrb	r2, [r7, #7]
 8014700:	4613      	mov	r3, r2
 8014702:	005b      	lsls	r3, r3, #1
 8014704:	4413      	add	r3, r2
 8014706:	00db      	lsls	r3, r3, #3
 8014708:	3308      	adds	r3, #8
 801470a:	4a08      	ldr	r2, [pc, #32]	@ (801472c <etharp_output_to_arp_index+0x124>)
 801470c:	4413      	add	r3, r2
 801470e:	3304      	adds	r3, #4
 8014710:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014714:	9200      	str	r2, [sp, #0]
 8014716:	460a      	mov	r2, r1
 8014718:	68b9      	ldr	r1, [r7, #8]
 801471a:	68f8      	ldr	r0, [r7, #12]
 801471c:	f002 f97c 	bl	8016a18 <ethernet_output>
 8014720:	4603      	mov	r3, r0
}
 8014722:	4618      	mov	r0, r3
 8014724:	3710      	adds	r7, #16
 8014726:	46bd      	mov	sp, r7
 8014728:	bd80      	pop	{r7, pc}
 801472a:	bf00      	nop
 801472c:	24003388 	.word	0x24003388
 8014730:	0801c51c 	.word	0x0801c51c
 8014734:	0801ca44 	.word	0x0801ca44
 8014738:	0801c594 	.word	0x0801c594

0801473c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801473c:	b580      	push	{r7, lr}
 801473e:	b08a      	sub	sp, #40	@ 0x28
 8014740:	af02      	add	r7, sp, #8
 8014742:	60f8      	str	r0, [r7, #12]
 8014744:	60b9      	str	r1, [r7, #8]
 8014746:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d106      	bne.n	8014760 <etharp_output+0x24>
 8014752:	4b73      	ldr	r3, [pc, #460]	@ (8014920 <etharp_output+0x1e4>)
 8014754:	f240 321e 	movw	r2, #798	@ 0x31e
 8014758:	4972      	ldr	r1, [pc, #456]	@ (8014924 <etharp_output+0x1e8>)
 801475a:	4873      	ldr	r0, [pc, #460]	@ (8014928 <etharp_output+0x1ec>)
 801475c:	f002 faae 	bl	8016cbc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014760:	68bb      	ldr	r3, [r7, #8]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d106      	bne.n	8014774 <etharp_output+0x38>
 8014766:	4b6e      	ldr	r3, [pc, #440]	@ (8014920 <etharp_output+0x1e4>)
 8014768:	f240 321f 	movw	r2, #799	@ 0x31f
 801476c:	496f      	ldr	r1, [pc, #444]	@ (801492c <etharp_output+0x1f0>)
 801476e:	486e      	ldr	r0, [pc, #440]	@ (8014928 <etharp_output+0x1ec>)
 8014770:	f002 faa4 	bl	8016cbc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	2b00      	cmp	r3, #0
 8014778:	d106      	bne.n	8014788 <etharp_output+0x4c>
 801477a:	4b69      	ldr	r3, [pc, #420]	@ (8014920 <etharp_output+0x1e4>)
 801477c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8014780:	496b      	ldr	r1, [pc, #428]	@ (8014930 <etharp_output+0x1f4>)
 8014782:	4869      	ldr	r0, [pc, #420]	@ (8014928 <etharp_output+0x1ec>)
 8014784:	f002 fa9a 	bl	8016cbc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	68f9      	ldr	r1, [r7, #12]
 801478e:	4618      	mov	r0, r3
 8014790:	f001 f9d4 	bl	8015b3c <ip4_addr_isbroadcast_u32>
 8014794:	4603      	mov	r3, r0
 8014796:	2b00      	cmp	r3, #0
 8014798:	d002      	beq.n	80147a0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801479a:	4b66      	ldr	r3, [pc, #408]	@ (8014934 <etharp_output+0x1f8>)
 801479c:	61fb      	str	r3, [r7, #28]
 801479e:	e0af      	b.n	8014900 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80147a8:	2be0      	cmp	r3, #224	@ 0xe0
 80147aa:	d118      	bne.n	80147de <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80147ac:	2301      	movs	r3, #1
 80147ae:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80147b0:	2300      	movs	r3, #0
 80147b2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80147b4:	235e      	movs	r3, #94	@ 0x5e
 80147b6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	3301      	adds	r3, #1
 80147bc:	781b      	ldrb	r3, [r3, #0]
 80147be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80147c2:	b2db      	uxtb	r3, r3
 80147c4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	3302      	adds	r3, #2
 80147ca:	781b      	ldrb	r3, [r3, #0]
 80147cc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	3303      	adds	r3, #3
 80147d2:	781b      	ldrb	r3, [r3, #0]
 80147d4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80147d6:	f107 0310 	add.w	r3, r7, #16
 80147da:	61fb      	str	r3, [r7, #28]
 80147dc:	e090      	b.n	8014900 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	681a      	ldr	r2, [r3, #0]
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	3304      	adds	r3, #4
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	405a      	eors	r2, r3
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	3308      	adds	r3, #8
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	4013      	ands	r3, r2
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d012      	beq.n	801481c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80147fc:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8014800:	4293      	cmp	r3, r2
 8014802:	d00b      	beq.n	801481c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	330c      	adds	r3, #12
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	2b00      	cmp	r3, #0
 801480c:	d003      	beq.n	8014816 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	330c      	adds	r3, #12
 8014812:	61bb      	str	r3, [r7, #24]
 8014814:	e002      	b.n	801481c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014816:	f06f 0303 	mvn.w	r3, #3
 801481a:	e07d      	b.n	8014918 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801481c:	4b46      	ldr	r3, [pc, #280]	@ (8014938 <etharp_output+0x1fc>)
 801481e:	781b      	ldrb	r3, [r3, #0]
 8014820:	4619      	mov	r1, r3
 8014822:	4a46      	ldr	r2, [pc, #280]	@ (801493c <etharp_output+0x200>)
 8014824:	460b      	mov	r3, r1
 8014826:	005b      	lsls	r3, r3, #1
 8014828:	440b      	add	r3, r1
 801482a:	00db      	lsls	r3, r3, #3
 801482c:	4413      	add	r3, r2
 801482e:	3314      	adds	r3, #20
 8014830:	781b      	ldrb	r3, [r3, #0]
 8014832:	2b01      	cmp	r3, #1
 8014834:	d925      	bls.n	8014882 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014836:	4b40      	ldr	r3, [pc, #256]	@ (8014938 <etharp_output+0x1fc>)
 8014838:	781b      	ldrb	r3, [r3, #0]
 801483a:	4619      	mov	r1, r3
 801483c:	4a3f      	ldr	r2, [pc, #252]	@ (801493c <etharp_output+0x200>)
 801483e:	460b      	mov	r3, r1
 8014840:	005b      	lsls	r3, r3, #1
 8014842:	440b      	add	r3, r1
 8014844:	00db      	lsls	r3, r3, #3
 8014846:	4413      	add	r3, r2
 8014848:	3308      	adds	r3, #8
 801484a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801484c:	68fa      	ldr	r2, [r7, #12]
 801484e:	429a      	cmp	r2, r3
 8014850:	d117      	bne.n	8014882 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014852:	69bb      	ldr	r3, [r7, #24]
 8014854:	681a      	ldr	r2, [r3, #0]
 8014856:	4b38      	ldr	r3, [pc, #224]	@ (8014938 <etharp_output+0x1fc>)
 8014858:	781b      	ldrb	r3, [r3, #0]
 801485a:	4618      	mov	r0, r3
 801485c:	4937      	ldr	r1, [pc, #220]	@ (801493c <etharp_output+0x200>)
 801485e:	4603      	mov	r3, r0
 8014860:	005b      	lsls	r3, r3, #1
 8014862:	4403      	add	r3, r0
 8014864:	00db      	lsls	r3, r3, #3
 8014866:	440b      	add	r3, r1
 8014868:	3304      	adds	r3, #4
 801486a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801486c:	429a      	cmp	r2, r3
 801486e:	d108      	bne.n	8014882 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014870:	4b31      	ldr	r3, [pc, #196]	@ (8014938 <etharp_output+0x1fc>)
 8014872:	781b      	ldrb	r3, [r3, #0]
 8014874:	461a      	mov	r2, r3
 8014876:	68b9      	ldr	r1, [r7, #8]
 8014878:	68f8      	ldr	r0, [r7, #12]
 801487a:	f7ff fec5 	bl	8014608 <etharp_output_to_arp_index>
 801487e:	4603      	mov	r3, r0
 8014880:	e04a      	b.n	8014918 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014882:	2300      	movs	r3, #0
 8014884:	75fb      	strb	r3, [r7, #23]
 8014886:	e031      	b.n	80148ec <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014888:	7dfa      	ldrb	r2, [r7, #23]
 801488a:	492c      	ldr	r1, [pc, #176]	@ (801493c <etharp_output+0x200>)
 801488c:	4613      	mov	r3, r2
 801488e:	005b      	lsls	r3, r3, #1
 8014890:	4413      	add	r3, r2
 8014892:	00db      	lsls	r3, r3, #3
 8014894:	440b      	add	r3, r1
 8014896:	3314      	adds	r3, #20
 8014898:	781b      	ldrb	r3, [r3, #0]
 801489a:	2b01      	cmp	r3, #1
 801489c:	d923      	bls.n	80148e6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801489e:	7dfa      	ldrb	r2, [r7, #23]
 80148a0:	4926      	ldr	r1, [pc, #152]	@ (801493c <etharp_output+0x200>)
 80148a2:	4613      	mov	r3, r2
 80148a4:	005b      	lsls	r3, r3, #1
 80148a6:	4413      	add	r3, r2
 80148a8:	00db      	lsls	r3, r3, #3
 80148aa:	440b      	add	r3, r1
 80148ac:	3308      	adds	r3, #8
 80148ae:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80148b0:	68fa      	ldr	r2, [r7, #12]
 80148b2:	429a      	cmp	r2, r3
 80148b4:	d117      	bne.n	80148e6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80148b6:	69bb      	ldr	r3, [r7, #24]
 80148b8:	6819      	ldr	r1, [r3, #0]
 80148ba:	7dfa      	ldrb	r2, [r7, #23]
 80148bc:	481f      	ldr	r0, [pc, #124]	@ (801493c <etharp_output+0x200>)
 80148be:	4613      	mov	r3, r2
 80148c0:	005b      	lsls	r3, r3, #1
 80148c2:	4413      	add	r3, r2
 80148c4:	00db      	lsls	r3, r3, #3
 80148c6:	4403      	add	r3, r0
 80148c8:	3304      	adds	r3, #4
 80148ca:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80148cc:	4299      	cmp	r1, r3
 80148ce:	d10a      	bne.n	80148e6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80148d0:	4a19      	ldr	r2, [pc, #100]	@ (8014938 <etharp_output+0x1fc>)
 80148d2:	7dfb      	ldrb	r3, [r7, #23]
 80148d4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80148d6:	7dfb      	ldrb	r3, [r7, #23]
 80148d8:	461a      	mov	r2, r3
 80148da:	68b9      	ldr	r1, [r7, #8]
 80148dc:	68f8      	ldr	r0, [r7, #12]
 80148de:	f7ff fe93 	bl	8014608 <etharp_output_to_arp_index>
 80148e2:	4603      	mov	r3, r0
 80148e4:	e018      	b.n	8014918 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80148e6:	7dfb      	ldrb	r3, [r7, #23]
 80148e8:	3301      	adds	r3, #1
 80148ea:	75fb      	strb	r3, [r7, #23]
 80148ec:	7dfb      	ldrb	r3, [r7, #23]
 80148ee:	2b09      	cmp	r3, #9
 80148f0:	d9ca      	bls.n	8014888 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80148f2:	68ba      	ldr	r2, [r7, #8]
 80148f4:	69b9      	ldr	r1, [r7, #24]
 80148f6:	68f8      	ldr	r0, [r7, #12]
 80148f8:	f000 f822 	bl	8014940 <etharp_query>
 80148fc:	4603      	mov	r3, r0
 80148fe:	e00b      	b.n	8014918 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8014906:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801490a:	9300      	str	r3, [sp, #0]
 801490c:	69fb      	ldr	r3, [r7, #28]
 801490e:	68b9      	ldr	r1, [r7, #8]
 8014910:	68f8      	ldr	r0, [r7, #12]
 8014912:	f002 f881 	bl	8016a18 <ethernet_output>
 8014916:	4603      	mov	r3, r0
}
 8014918:	4618      	mov	r0, r3
 801491a:	3720      	adds	r7, #32
 801491c:	46bd      	mov	sp, r7
 801491e:	bd80      	pop	{r7, pc}
 8014920:	0801c51c 	.word	0x0801c51c
 8014924:	0801c8e4 	.word	0x0801c8e4
 8014928:	0801c594 	.word	0x0801c594
 801492c:	0801ca74 	.word	0x0801ca74
 8014930:	0801c8d4 	.word	0x0801c8d4
 8014934:	0801dc6c 	.word	0x0801dc6c
 8014938:	24003478 	.word	0x24003478
 801493c:	24003388 	.word	0x24003388

08014940 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b08c      	sub	sp, #48	@ 0x30
 8014944:	af02      	add	r7, sp, #8
 8014946:	60f8      	str	r0, [r7, #12]
 8014948:	60b9      	str	r1, [r7, #8]
 801494a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	332a      	adds	r3, #42	@ 0x2a
 8014950:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014952:	23ff      	movs	r3, #255	@ 0xff
 8014954:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8014958:	2300      	movs	r3, #0
 801495a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801495c:	68bb      	ldr	r3, [r7, #8]
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	68f9      	ldr	r1, [r7, #12]
 8014962:	4618      	mov	r0, r3
 8014964:	f001 f8ea 	bl	8015b3c <ip4_addr_isbroadcast_u32>
 8014968:	4603      	mov	r3, r0
 801496a:	2b00      	cmp	r3, #0
 801496c:	d10c      	bne.n	8014988 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801496e:	68bb      	ldr	r3, [r7, #8]
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014976:	2be0      	cmp	r3, #224	@ 0xe0
 8014978:	d006      	beq.n	8014988 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801497a:	68bb      	ldr	r3, [r7, #8]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d003      	beq.n	8014988 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014980:	68bb      	ldr	r3, [r7, #8]
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d105      	bne.n	8014994 <etharp_query+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
 8014988:	4892      	ldr	r0, [pc, #584]	@ (8014bd4 <etharp_query+0x294>)
 801498a:	f002 fa07 	bl	8016d9c <puts>
    return ERR_ARG;
 801498e:	f06f 030f 	mvn.w	r3, #15
 8014992:	e11a      	b.n	8014bca <etharp_query+0x28a>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014994:	68fa      	ldr	r2, [r7, #12]
 8014996:	2101      	movs	r1, #1
 8014998:	68b8      	ldr	r0, [r7, #8]
 801499a:	f7ff fa95 	bl	8013ec8 <etharp_find_entry>
 801499e:	4603      	mov	r3, r0
 80149a0:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80149a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	da0b      	bge.n	80149c2 <etharp_query+0x82>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
 80149aa:	488b      	ldr	r0, [pc, #556]	@ (8014bd8 <etharp_query+0x298>)
 80149ac:	f002 f9f6 	bl	8016d9c <puts>
    if (q) {
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d002      	beq.n	80149bc <etharp_query+0x7c>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
 80149b6:	4889      	ldr	r0, [pc, #548]	@ (8014bdc <etharp_query+0x29c>)
 80149b8:	f002 f9f0 	bl	8016d9c <puts>
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80149bc:	8a7b      	ldrh	r3, [r7, #18]
 80149be:	b25b      	sxtb	r3, r3
 80149c0:	e103      	b.n	8014bca <etharp_query+0x28a>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80149c2:	8a7b      	ldrh	r3, [r7, #18]
 80149c4:	2b7e      	cmp	r3, #126	@ 0x7e
 80149c6:	d906      	bls.n	80149d6 <etharp_query+0x96>
 80149c8:	4b85      	ldr	r3, [pc, #532]	@ (8014be0 <etharp_query+0x2a0>)
 80149ca:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80149ce:	4985      	ldr	r1, [pc, #532]	@ (8014be4 <etharp_query+0x2a4>)
 80149d0:	4885      	ldr	r0, [pc, #532]	@ (8014be8 <etharp_query+0x2a8>)
 80149d2:	f002 f973 	bl	8016cbc <iprintf>
  i = (netif_addr_idx_t)i_err;
 80149d6:	8a7b      	ldrh	r3, [r7, #18]
 80149d8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80149da:	7c7a      	ldrb	r2, [r7, #17]
 80149dc:	4983      	ldr	r1, [pc, #524]	@ (8014bec <etharp_query+0x2ac>)
 80149de:	4613      	mov	r3, r2
 80149e0:	005b      	lsls	r3, r3, #1
 80149e2:	4413      	add	r3, r2
 80149e4:	00db      	lsls	r3, r3, #3
 80149e6:	440b      	add	r3, r1
 80149e8:	3314      	adds	r3, #20
 80149ea:	781b      	ldrb	r3, [r3, #0]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d115      	bne.n	8014a1c <etharp_query+0xdc>
    is_new_entry = 1;
 80149f0:	2301      	movs	r3, #1
 80149f2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80149f4:	7c7a      	ldrb	r2, [r7, #17]
 80149f6:	497d      	ldr	r1, [pc, #500]	@ (8014bec <etharp_query+0x2ac>)
 80149f8:	4613      	mov	r3, r2
 80149fa:	005b      	lsls	r3, r3, #1
 80149fc:	4413      	add	r3, r2
 80149fe:	00db      	lsls	r3, r3, #3
 8014a00:	440b      	add	r3, r1
 8014a02:	3314      	adds	r3, #20
 8014a04:	2201      	movs	r2, #1
 8014a06:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014a08:	7c7a      	ldrb	r2, [r7, #17]
 8014a0a:	4978      	ldr	r1, [pc, #480]	@ (8014bec <etharp_query+0x2ac>)
 8014a0c:	4613      	mov	r3, r2
 8014a0e:	005b      	lsls	r3, r3, #1
 8014a10:	4413      	add	r3, r2
 8014a12:	00db      	lsls	r3, r3, #3
 8014a14:	440b      	add	r3, r1
 8014a16:	3308      	adds	r3, #8
 8014a18:	68fa      	ldr	r2, [r7, #12]
 8014a1a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014a1c:	7c7a      	ldrb	r2, [r7, #17]
 8014a1e:	4973      	ldr	r1, [pc, #460]	@ (8014bec <etharp_query+0x2ac>)
 8014a20:	4613      	mov	r3, r2
 8014a22:	005b      	lsls	r3, r3, #1
 8014a24:	4413      	add	r3, r2
 8014a26:	00db      	lsls	r3, r3, #3
 8014a28:	440b      	add	r3, r1
 8014a2a:	3314      	adds	r3, #20
 8014a2c:	781b      	ldrb	r3, [r3, #0]
 8014a2e:	2b01      	cmp	r3, #1
 8014a30:	d011      	beq.n	8014a56 <etharp_query+0x116>
 8014a32:	7c7a      	ldrb	r2, [r7, #17]
 8014a34:	496d      	ldr	r1, [pc, #436]	@ (8014bec <etharp_query+0x2ac>)
 8014a36:	4613      	mov	r3, r2
 8014a38:	005b      	lsls	r3, r3, #1
 8014a3a:	4413      	add	r3, r2
 8014a3c:	00db      	lsls	r3, r3, #3
 8014a3e:	440b      	add	r3, r1
 8014a40:	3314      	adds	r3, #20
 8014a42:	781b      	ldrb	r3, [r3, #0]
 8014a44:	2b01      	cmp	r3, #1
 8014a46:	d806      	bhi.n	8014a56 <etharp_query+0x116>
 8014a48:	4b65      	ldr	r3, [pc, #404]	@ (8014be0 <etharp_query+0x2a0>)
 8014a4a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8014a4e:	4968      	ldr	r1, [pc, #416]	@ (8014bf0 <etharp_query+0x2b0>)
 8014a50:	4865      	ldr	r0, [pc, #404]	@ (8014be8 <etharp_query+0x2a8>)
 8014a52:	f002 f933 	bl	8016cbc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014a56:	6a3b      	ldr	r3, [r7, #32]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d102      	bne.n	8014a62 <etharp_query+0x122>
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d10c      	bne.n	8014a7c <etharp_query+0x13c>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014a62:	68b9      	ldr	r1, [r7, #8]
 8014a64:	68f8      	ldr	r0, [r7, #12]
 8014a66:	f000 f989 	bl	8014d7c <etharp_request>
 8014a6a:	4603      	mov	r3, r0
 8014a6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d102      	bne.n	8014a7c <etharp_query+0x13c>
      return result;
 8014a76:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8014a7a:	e0a6      	b.n	8014bca <etharp_query+0x28a>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d106      	bne.n	8014a90 <etharp_query+0x150>
 8014a82:	4b57      	ldr	r3, [pc, #348]	@ (8014be0 <etharp_query+0x2a0>)
 8014a84:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8014a88:	495a      	ldr	r1, [pc, #360]	@ (8014bf4 <etharp_query+0x2b4>)
 8014a8a:	4857      	ldr	r0, [pc, #348]	@ (8014be8 <etharp_query+0x2a8>)
 8014a8c:	f002 f916 	bl	8016cbc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014a90:	7c7a      	ldrb	r2, [r7, #17]
 8014a92:	4956      	ldr	r1, [pc, #344]	@ (8014bec <etharp_query+0x2ac>)
 8014a94:	4613      	mov	r3, r2
 8014a96:	005b      	lsls	r3, r3, #1
 8014a98:	4413      	add	r3, r2
 8014a9a:	00db      	lsls	r3, r3, #3
 8014a9c:	440b      	add	r3, r1
 8014a9e:	3314      	adds	r3, #20
 8014aa0:	781b      	ldrb	r3, [r3, #0]
 8014aa2:	2b01      	cmp	r3, #1
 8014aa4:	d917      	bls.n	8014ad6 <etharp_query+0x196>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014aa6:	4a54      	ldr	r2, [pc, #336]	@ (8014bf8 <etharp_query+0x2b8>)
 8014aa8:	7c7b      	ldrb	r3, [r7, #17]
 8014aaa:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014aac:	7c7a      	ldrb	r2, [r7, #17]
 8014aae:	4613      	mov	r3, r2
 8014ab0:	005b      	lsls	r3, r3, #1
 8014ab2:	4413      	add	r3, r2
 8014ab4:	00db      	lsls	r3, r3, #3
 8014ab6:	3308      	adds	r3, #8
 8014ab8:	4a4c      	ldr	r2, [pc, #304]	@ (8014bec <etharp_query+0x2ac>)
 8014aba:	4413      	add	r3, r2
 8014abc:	3304      	adds	r3, #4
 8014abe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014ac2:	9200      	str	r2, [sp, #0]
 8014ac4:	697a      	ldr	r2, [r7, #20]
 8014ac6:	6879      	ldr	r1, [r7, #4]
 8014ac8:	68f8      	ldr	r0, [r7, #12]
 8014aca:	f001 ffa5 	bl	8016a18 <ethernet_output>
 8014ace:	4603      	mov	r3, r0
 8014ad0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014ad4:	e077      	b.n	8014bc6 <etharp_query+0x286>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014ad6:	7c7a      	ldrb	r2, [r7, #17]
 8014ad8:	4944      	ldr	r1, [pc, #272]	@ (8014bec <etharp_query+0x2ac>)
 8014ada:	4613      	mov	r3, r2
 8014adc:	005b      	lsls	r3, r3, #1
 8014ade:	4413      	add	r3, r2
 8014ae0:	00db      	lsls	r3, r3, #3
 8014ae2:	440b      	add	r3, r1
 8014ae4:	3314      	adds	r3, #20
 8014ae6:	781b      	ldrb	r3, [r3, #0]
 8014ae8:	2b01      	cmp	r3, #1
 8014aea:	d16c      	bne.n	8014bc6 <etharp_query+0x286>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014aec:	2300      	movs	r3, #0
 8014aee:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014af4:	e01c      	b.n	8014b30 <etharp_query+0x1f0>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014af6:	69fb      	ldr	r3, [r7, #28]
 8014af8:	895a      	ldrh	r2, [r3, #10]
 8014afa:	69fb      	ldr	r3, [r7, #28]
 8014afc:	891b      	ldrh	r3, [r3, #8]
 8014afe:	429a      	cmp	r2, r3
 8014b00:	d10a      	bne.n	8014b18 <etharp_query+0x1d8>
 8014b02:	69fb      	ldr	r3, [r7, #28]
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d006      	beq.n	8014b18 <etharp_query+0x1d8>
 8014b0a:	4b35      	ldr	r3, [pc, #212]	@ (8014be0 <etharp_query+0x2a0>)
 8014b0c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8014b10:	493a      	ldr	r1, [pc, #232]	@ (8014bfc <etharp_query+0x2bc>)
 8014b12:	4835      	ldr	r0, [pc, #212]	@ (8014be8 <etharp_query+0x2a8>)
 8014b14:	f002 f8d2 	bl	8016cbc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014b18:	69fb      	ldr	r3, [r7, #28]
 8014b1a:	7b1b      	ldrb	r3, [r3, #12]
 8014b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d002      	beq.n	8014b2a <etharp_query+0x1ea>
        copy_needed = 1;
 8014b24:	2301      	movs	r3, #1
 8014b26:	61bb      	str	r3, [r7, #24]
        break;
 8014b28:	e005      	b.n	8014b36 <etharp_query+0x1f6>
      }
      p = p->next;
 8014b2a:	69fb      	ldr	r3, [r7, #28]
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014b30:	69fb      	ldr	r3, [r7, #28]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d1df      	bne.n	8014af6 <etharp_query+0x1b6>
    }
    if (copy_needed) {
 8014b36:	69bb      	ldr	r3, [r7, #24]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d007      	beq.n	8014b4c <etharp_query+0x20c>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014b3c:	687a      	ldr	r2, [r7, #4]
 8014b3e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8014b42:	200e      	movs	r0, #14
 8014b44:	f7f6 fb8e 	bl	800b264 <pbuf_clone>
 8014b48:	61f8      	str	r0, [r7, #28]
 8014b4a:	e004      	b.n	8014b56 <etharp_query+0x216>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014b50:	69f8      	ldr	r0, [r7, #28]
 8014b52:	f7f6 f9a7 	bl	800aea4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014b56:	69fb      	ldr	r3, [r7, #28]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d02d      	beq.n	8014bb8 <etharp_query+0x278>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014b5c:	7c7a      	ldrb	r2, [r7, #17]
 8014b5e:	4923      	ldr	r1, [pc, #140]	@ (8014bec <etharp_query+0x2ac>)
 8014b60:	4613      	mov	r3, r2
 8014b62:	005b      	lsls	r3, r3, #1
 8014b64:	4413      	add	r3, r2
 8014b66:	00db      	lsls	r3, r3, #3
 8014b68:	440b      	add	r3, r1
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d010      	beq.n	8014b92 <etharp_query+0x252>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 8014b70:	7c7b      	ldrb	r3, [r7, #17]
 8014b72:	461a      	mov	r2, r3
 8014b74:	6879      	ldr	r1, [r7, #4]
 8014b76:	4822      	ldr	r0, [pc, #136]	@ (8014c00 <etharp_query+0x2c0>)
 8014b78:	f002 f8a0 	bl	8016cbc <iprintf>
        pbuf_free(arp_table[i].q);
 8014b7c:	7c7a      	ldrb	r2, [r7, #17]
 8014b7e:	491b      	ldr	r1, [pc, #108]	@ (8014bec <etharp_query+0x2ac>)
 8014b80:	4613      	mov	r3, r2
 8014b82:	005b      	lsls	r3, r3, #1
 8014b84:	4413      	add	r3, r2
 8014b86:	00db      	lsls	r3, r3, #3
 8014b88:	440b      	add	r3, r1
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	4618      	mov	r0, r3
 8014b8e:	f7f6 f8d1 	bl	800ad34 <pbuf_free>
      }
      arp_table[i].q = p;
 8014b92:	7c7a      	ldrb	r2, [r7, #17]
 8014b94:	4915      	ldr	r1, [pc, #84]	@ (8014bec <etharp_query+0x2ac>)
 8014b96:	4613      	mov	r3, r2
 8014b98:	005b      	lsls	r3, r3, #1
 8014b9a:	4413      	add	r3, r2
 8014b9c:	00db      	lsls	r3, r3, #3
 8014b9e:	440b      	add	r3, r1
 8014ba0:	69fa      	ldr	r2, [r7, #28]
 8014ba2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014ba4:	2300      	movs	r3, #0
 8014ba6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 8014baa:	7c7b      	ldrb	r3, [r7, #17]
 8014bac:	461a      	mov	r2, r3
 8014bae:	6879      	ldr	r1, [r7, #4]
 8014bb0:	4814      	ldr	r0, [pc, #80]	@ (8014c04 <etharp_query+0x2c4>)
 8014bb2:	f002 f883 	bl	8016cbc <iprintf>
 8014bb6:	e006      	b.n	8014bc6 <etharp_query+0x286>
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
 8014bb8:	6879      	ldr	r1, [r7, #4]
 8014bba:	4813      	ldr	r0, [pc, #76]	@ (8014c08 <etharp_query+0x2c8>)
 8014bbc:	f002 f87e 	bl	8016cbc <iprintf>
      result = ERR_MEM;
 8014bc0:	23ff      	movs	r3, #255	@ 0xff
 8014bc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8014bc6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8014bca:	4618      	mov	r0, r3
 8014bcc:	3728      	adds	r7, #40	@ 0x28
 8014bce:	46bd      	mov	sp, r7
 8014bd0:	bd80      	pop	{r7, pc}
 8014bd2:	bf00      	nop
 8014bd4:	0801ca80 	.word	0x0801ca80
 8014bd8:	0801cac0 	.word	0x0801cac0
 8014bdc:	0801caec 	.word	0x0801caec
 8014be0:	0801c51c 	.word	0x0801c51c
 8014be4:	0801cb0c 	.word	0x0801cb0c
 8014be8:	0801c594 	.word	0x0801c594
 8014bec:	24003388 	.word	0x24003388
 8014bf0:	0801cb1c 	.word	0x0801cb1c
 8014bf4:	0801ca74 	.word	0x0801ca74
 8014bf8:	24003478 	.word	0x24003478
 8014bfc:	0801cb44 	.word	0x0801cb44
 8014c00:	0801cb60 	.word	0x0801cb60
 8014c04:	0801cba8 	.word	0x0801cba8
 8014c08:	0801cbdc 	.word	0x0801cbdc

08014c0c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b08a      	sub	sp, #40	@ 0x28
 8014c10:	af02      	add	r7, sp, #8
 8014c12:	60f8      	str	r0, [r7, #12]
 8014c14:	60b9      	str	r1, [r7, #8]
 8014c16:	607a      	str	r2, [r7, #4]
 8014c18:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014c1a:	2300      	movs	r3, #0
 8014c1c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d106      	bne.n	8014c32 <etharp_raw+0x26>
 8014c24:	4b3d      	ldr	r3, [pc, #244]	@ (8014d1c <etharp_raw+0x110>)
 8014c26:	f240 4257 	movw	r2, #1111	@ 0x457
 8014c2a:	493d      	ldr	r1, [pc, #244]	@ (8014d20 <etharp_raw+0x114>)
 8014c2c:	483d      	ldr	r0, [pc, #244]	@ (8014d24 <etharp_raw+0x118>)
 8014c2e:	f002 f845 	bl	8016cbc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014c32:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014c36:	211c      	movs	r1, #28
 8014c38:	200e      	movs	r0, #14
 8014c3a:	f7f5 fd4f 	bl	800a6dc <pbuf_alloc>
 8014c3e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014c40:	69bb      	ldr	r3, [r7, #24]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d105      	bne.n	8014c52 <etharp_raw+0x46>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 8014c46:	4838      	ldr	r0, [pc, #224]	@ (8014d28 <etharp_raw+0x11c>)
 8014c48:	f002 f8a8 	bl	8016d9c <puts>
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014c4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014c50:	e060      	b.n	8014d14 <etharp_raw+0x108>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014c52:	69bb      	ldr	r3, [r7, #24]
 8014c54:	895b      	ldrh	r3, [r3, #10]
 8014c56:	2b1b      	cmp	r3, #27
 8014c58:	d806      	bhi.n	8014c68 <etharp_raw+0x5c>
 8014c5a:	4b30      	ldr	r3, [pc, #192]	@ (8014d1c <etharp_raw+0x110>)
 8014c5c:	f240 4262 	movw	r2, #1122	@ 0x462
 8014c60:	4932      	ldr	r1, [pc, #200]	@ (8014d2c <etharp_raw+0x120>)
 8014c62:	4830      	ldr	r0, [pc, #192]	@ (8014d24 <etharp_raw+0x118>)
 8014c64:	f002 f82a 	bl	8016cbc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014c68:	69bb      	ldr	r3, [r7, #24]
 8014c6a:	685b      	ldr	r3, [r3, #4]
 8014c6c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
 8014c6e:	4830      	ldr	r0, [pc, #192]	@ (8014d30 <etharp_raw+0x124>)
 8014c70:	f002 f894 	bl	8016d9c <puts>
  hdr->opcode = lwip_htons(opcode);
 8014c74:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014c76:	4618      	mov	r0, r3
 8014c78:	f7f4 fbde 	bl	8009438 <lwip_htons>
 8014c7c:	4603      	mov	r3, r0
 8014c7e:	461a      	mov	r2, r3
 8014c80:	697b      	ldr	r3, [r7, #20]
 8014c82:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014c8a:	2b06      	cmp	r3, #6
 8014c8c:	d006      	beq.n	8014c9c <etharp_raw+0x90>
 8014c8e:	4b23      	ldr	r3, [pc, #140]	@ (8014d1c <etharp_raw+0x110>)
 8014c90:	f240 4269 	movw	r2, #1129	@ 0x469
 8014c94:	4927      	ldr	r1, [pc, #156]	@ (8014d34 <etharp_raw+0x128>)
 8014c96:	4823      	ldr	r0, [pc, #140]	@ (8014d24 <etharp_raw+0x118>)
 8014c98:	f002 f810 	bl	8016cbc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014c9c:	697b      	ldr	r3, [r7, #20]
 8014c9e:	3308      	adds	r3, #8
 8014ca0:	2206      	movs	r2, #6
 8014ca2:	6839      	ldr	r1, [r7, #0]
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	f002 f9de 	bl	8017066 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014caa:	697b      	ldr	r3, [r7, #20]
 8014cac:	3312      	adds	r3, #18
 8014cae:	2206      	movs	r2, #6
 8014cb0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	f002 f9d7 	bl	8017066 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014cb8:	697b      	ldr	r3, [r7, #20]
 8014cba:	330e      	adds	r3, #14
 8014cbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014cbe:	6812      	ldr	r2, [r2, #0]
 8014cc0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014cc2:	697b      	ldr	r3, [r7, #20]
 8014cc4:	3318      	adds	r3, #24
 8014cc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014cc8:	6812      	ldr	r2, [r2, #0]
 8014cca:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014ccc:	697b      	ldr	r3, [r7, #20]
 8014cce:	2200      	movs	r2, #0
 8014cd0:	701a      	strb	r2, [r3, #0]
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	f042 0201 	orr.w	r2, r2, #1
 8014cd8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014cda:	697b      	ldr	r3, [r7, #20]
 8014cdc:	2200      	movs	r2, #0
 8014cde:	f042 0208 	orr.w	r2, r2, #8
 8014ce2:	709a      	strb	r2, [r3, #2]
 8014ce4:	2200      	movs	r2, #0
 8014ce6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014ce8:	697b      	ldr	r3, [r7, #20]
 8014cea:	2206      	movs	r2, #6
 8014cec:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014cee:	697b      	ldr	r3, [r7, #20]
 8014cf0:	2204      	movs	r2, #4
 8014cf2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014cf4:	f640 0306 	movw	r3, #2054	@ 0x806
 8014cf8:	9300      	str	r3, [sp, #0]
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	68ba      	ldr	r2, [r7, #8]
 8014cfe:	69b9      	ldr	r1, [r7, #24]
 8014d00:	68f8      	ldr	r0, [r7, #12]
 8014d02:	f001 fe89 	bl	8016a18 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014d06:	69b8      	ldr	r0, [r7, #24]
 8014d08:	f7f6 f814 	bl	800ad34 <pbuf_free>
  p = NULL;
 8014d0c:	2300      	movs	r3, #0
 8014d0e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014d10:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014d14:	4618      	mov	r0, r3
 8014d16:	3720      	adds	r7, #32
 8014d18:	46bd      	mov	sp, r7
 8014d1a:	bd80      	pop	{r7, pc}
 8014d1c:	0801c51c 	.word	0x0801c51c
 8014d20:	0801c8e4 	.word	0x0801c8e4
 8014d24:	0801c594 	.word	0x0801c594
 8014d28:	0801cc28 	.word	0x0801cc28
 8014d2c:	0801cc60 	.word	0x0801cc60
 8014d30:	0801cc94 	.word	0x0801cc94
 8014d34:	0801ccb8 	.word	0x0801ccb8

08014d38 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	b088      	sub	sp, #32
 8014d3c:	af04      	add	r7, sp, #16
 8014d3e:	60f8      	str	r0, [r7, #12]
 8014d40:	60b9      	str	r1, [r7, #8]
 8014d42:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014d54:	2201      	movs	r2, #1
 8014d56:	9203      	str	r2, [sp, #12]
 8014d58:	68ba      	ldr	r2, [r7, #8]
 8014d5a:	9202      	str	r2, [sp, #8]
 8014d5c:	4a06      	ldr	r2, [pc, #24]	@ (8014d78 <etharp_request_dst+0x40>)
 8014d5e:	9201      	str	r2, [sp, #4]
 8014d60:	9300      	str	r3, [sp, #0]
 8014d62:	4603      	mov	r3, r0
 8014d64:	687a      	ldr	r2, [r7, #4]
 8014d66:	68f8      	ldr	r0, [r7, #12]
 8014d68:	f7ff ff50 	bl	8014c0c <etharp_raw>
 8014d6c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014d6e:	4618      	mov	r0, r3
 8014d70:	3710      	adds	r7, #16
 8014d72:	46bd      	mov	sp, r7
 8014d74:	bd80      	pop	{r7, pc}
 8014d76:	bf00      	nop
 8014d78:	0801dc74 	.word	0x0801dc74

08014d7c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	b082      	sub	sp, #8
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	6078      	str	r0, [r7, #4]
 8014d84:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
 8014d86:	4806      	ldr	r0, [pc, #24]	@ (8014da0 <etharp_request+0x24>)
 8014d88:	f002 f808 	bl	8016d9c <puts>
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014d8c:	4a05      	ldr	r2, [pc, #20]	@ (8014da4 <etharp_request+0x28>)
 8014d8e:	6839      	ldr	r1, [r7, #0]
 8014d90:	6878      	ldr	r0, [r7, #4]
 8014d92:	f7ff ffd1 	bl	8014d38 <etharp_request_dst>
 8014d96:	4603      	mov	r3, r0
}
 8014d98:	4618      	mov	r0, r3
 8014d9a:	3708      	adds	r7, #8
 8014d9c:	46bd      	mov	sp, r7
 8014d9e:	bd80      	pop	{r7, pc}
 8014da0:	0801ccfc 	.word	0x0801ccfc
 8014da4:	0801dc6c 	.word	0x0801dc6c

08014da8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b08e      	sub	sp, #56	@ 0x38
 8014dac:	af04      	add	r7, sp, #16
 8014dae:	6078      	str	r0, [r7, #4]
 8014db0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014db2:	4ba4      	ldr	r3, [pc, #656]	@ (8015044 <icmp_input+0x29c>)
 8014db4:	689b      	ldr	r3, [r3, #8]
 8014db6:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dba:	781b      	ldrb	r3, [r3, #0]
 8014dbc:	f003 030f 	and.w	r3, r3, #15
 8014dc0:	b2db      	uxtb	r3, r3
 8014dc2:	009b      	lsls	r3, r3, #2
 8014dc4:	b2db      	uxtb	r3, r3
 8014dc6:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8014dc8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014dca:	2b13      	cmp	r3, #19
 8014dcc:	d805      	bhi.n	8014dda <icmp_input+0x32>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
 8014dce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014dd0:	4619      	mov	r1, r3
 8014dd2:	489d      	ldr	r0, [pc, #628]	@ (8015048 <icmp_input+0x2a0>)
 8014dd4:	f001 ff72 	bl	8016cbc <iprintf>
    goto lenerr;
 8014dd8:	e128      	b.n	801502c <icmp_input+0x284>
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	895b      	ldrh	r3, [r3, #10]
 8014dde:	2b03      	cmp	r3, #3
 8014de0:	d806      	bhi.n	8014df0 <icmp_input+0x48>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	891b      	ldrh	r3, [r3, #8]
 8014de6:	4619      	mov	r1, r3
 8014de8:	4898      	ldr	r0, [pc, #608]	@ (801504c <icmp_input+0x2a4>)
 8014dea:	f001 ff67 	bl	8016cbc <iprintf>
    goto lenerr;
 8014dee:	e11d      	b.n	801502c <icmp_input+0x284>
  }

  type = *((u8_t *)p->payload);
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	685b      	ldr	r3, [r3, #4]
 8014df4:	781b      	ldrb	r3, [r3, #0]
 8014df6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	685b      	ldr	r3, [r3, #4]
 8014dfe:	785b      	ldrb	r3, [r3, #1]
 8014e00:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014e04:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	f000 8108 	beq.w	801501e <icmp_input+0x276>
 8014e0e:	2b08      	cmp	r3, #8
 8014e10:	f040 80fc 	bne.w	801500c <icmp_input+0x264>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014e14:	4b8e      	ldr	r3, [pc, #568]	@ (8015050 <icmp_input+0x2a8>)
 8014e16:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014e18:	4b8a      	ldr	r3, [pc, #552]	@ (8015044 <icmp_input+0x29c>)
 8014e1a:	695b      	ldr	r3, [r3, #20]
 8014e1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014e20:	2be0      	cmp	r3, #224	@ 0xe0
 8014e22:	d103      	bne.n	8014e2c <icmp_input+0x84>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_MULTICAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
 8014e24:	488b      	ldr	r0, [pc, #556]	@ (8015054 <icmp_input+0x2ac>)
 8014e26:	f001 ffb9 	bl	8016d9c <puts>
        goto icmperr;
 8014e2a:	e103      	b.n	8015034 <icmp_input+0x28c>
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014e2c:	4b85      	ldr	r3, [pc, #532]	@ (8015044 <icmp_input+0x29c>)
 8014e2e:	695b      	ldr	r3, [r3, #20]
 8014e30:	4a84      	ldr	r2, [pc, #528]	@ (8015044 <icmp_input+0x29c>)
 8014e32:	6812      	ldr	r2, [r2, #0]
 8014e34:	4611      	mov	r1, r2
 8014e36:	4618      	mov	r0, r3
 8014e38:	f000 fe80 	bl	8015b3c <ip4_addr_isbroadcast_u32>
 8014e3c:	4603      	mov	r3, r0
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d003      	beq.n	8014e4a <icmp_input+0xa2>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_BROADCAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
 8014e42:	4885      	ldr	r0, [pc, #532]	@ (8015058 <icmp_input+0x2b0>)
 8014e44:	f001 ffaa 	bl	8016d9c <puts>
        goto icmperr;
 8014e48:	e0f4      	b.n	8015034 <icmp_input+0x28c>
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
 8014e4a:	4884      	ldr	r0, [pc, #528]	@ (801505c <icmp_input+0x2b4>)
 8014e4c:	f001 ffa6 	bl	8016d9c <puts>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	891b      	ldrh	r3, [r3, #8]
 8014e54:	2b07      	cmp	r3, #7
 8014e56:	d803      	bhi.n	8014e60 <icmp_input+0xb8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
 8014e58:	4881      	ldr	r0, [pc, #516]	@ (8015060 <icmp_input+0x2b8>)
 8014e5a:	f001 ff9f 	bl	8016d9c <puts>
        goto lenerr;
 8014e5e:	e0e5      	b.n	801502c <icmp_input+0x284>
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8014e60:	6878      	ldr	r0, [r7, #4]
 8014e62:	f7f4 fb86 	bl	8009572 <inet_chksum_pbuf>
 8014e66:	4603      	mov	r3, r0
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d006      	beq.n	8014e7a <icmp_input+0xd2>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
 8014e6c:	487d      	ldr	r0, [pc, #500]	@ (8015064 <icmp_input+0x2bc>)
 8014e6e:	f001 ff95 	bl	8016d9c <puts>
          pbuf_free(p);
 8014e72:	6878      	ldr	r0, [r7, #4]
 8014e74:	f7f5 ff5e 	bl	800ad34 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8014e78:	e0e0      	b.n	801503c <icmp_input+0x294>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014e7a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014e7c:	330e      	adds	r3, #14
 8014e7e:	4619      	mov	r1, r3
 8014e80:	6878      	ldr	r0, [r7, #4]
 8014e82:	f7f5 feb9 	bl	800abf8 <pbuf_add_header>
 8014e86:	4603      	mov	r3, r0
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d057      	beq.n	8014f3c <icmp_input+0x194>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	891a      	ldrh	r2, [r3, #8]
 8014e90:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014e92:	4413      	add	r3, r2
 8014e94:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	891b      	ldrh	r3, [r3, #8]
 8014e9a:	8b7a      	ldrh	r2, [r7, #26]
 8014e9c:	429a      	cmp	r2, r3
 8014e9e:	d203      	bcs.n	8014ea8 <icmp_input+0x100>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
 8014ea0:	4871      	ldr	r0, [pc, #452]	@ (8015068 <icmp_input+0x2c0>)
 8014ea2:	f001 ff7b 	bl	8016d9c <puts>
          goto icmperr;
 8014ea6:	e0c5      	b.n	8015034 <icmp_input+0x28c>
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014ea8:	8b7b      	ldrh	r3, [r7, #26]
 8014eaa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014eae:	4619      	mov	r1, r3
 8014eb0:	200e      	movs	r0, #14
 8014eb2:	f7f5 fc13 	bl	800a6dc <pbuf_alloc>
 8014eb6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014eb8:	697b      	ldr	r3, [r7, #20]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d103      	bne.n	8014ec6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
 8014ebe:	486b      	ldr	r0, [pc, #428]	@ (801506c <icmp_input+0x2c4>)
 8014ec0:	f001 ff6c 	bl	8016d9c <puts>
          goto icmperr;
 8014ec4:	e0b6      	b.n	8015034 <icmp_input+0x28c>
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014ec6:	697b      	ldr	r3, [r7, #20]
 8014ec8:	895b      	ldrh	r3, [r3, #10]
 8014eca:	461a      	mov	r2, r3
 8014ecc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014ece:	3308      	adds	r3, #8
 8014ed0:	429a      	cmp	r2, r3
 8014ed2:	d206      	bcs.n	8014ee2 <icmp_input+0x13a>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
 8014ed4:	4866      	ldr	r0, [pc, #408]	@ (8015070 <icmp_input+0x2c8>)
 8014ed6:	f001 fef1 	bl	8016cbc <iprintf>
          pbuf_free(r);
 8014eda:	6978      	ldr	r0, [r7, #20]
 8014edc:	f7f5 ff2a 	bl	800ad34 <pbuf_free>
          goto icmperr;
 8014ee0:	e0a8      	b.n	8015034 <icmp_input+0x28c>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014ee2:	697b      	ldr	r3, [r7, #20]
 8014ee4:	685b      	ldr	r3, [r3, #4]
 8014ee6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8014ee8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014eea:	4618      	mov	r0, r3
 8014eec:	f002 f8bb 	bl	8017066 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014ef0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014ef2:	4619      	mov	r1, r3
 8014ef4:	6978      	ldr	r0, [r7, #20]
 8014ef6:	f7f5 fe8f 	bl	800ac18 <pbuf_remove_header>
 8014efa:	4603      	mov	r3, r0
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d009      	beq.n	8014f14 <icmp_input+0x16c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014f00:	4b5c      	ldr	r3, [pc, #368]	@ (8015074 <icmp_input+0x2cc>)
 8014f02:	22b6      	movs	r2, #182	@ 0xb6
 8014f04:	495c      	ldr	r1, [pc, #368]	@ (8015078 <icmp_input+0x2d0>)
 8014f06:	485d      	ldr	r0, [pc, #372]	@ (801507c <icmp_input+0x2d4>)
 8014f08:	f001 fed8 	bl	8016cbc <iprintf>
          pbuf_free(r);
 8014f0c:	6978      	ldr	r0, [r7, #20]
 8014f0e:	f7f5 ff11 	bl	800ad34 <pbuf_free>
          goto icmperr;
 8014f12:	e08f      	b.n	8015034 <icmp_input+0x28c>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014f14:	6879      	ldr	r1, [r7, #4]
 8014f16:	6978      	ldr	r0, [r7, #20]
 8014f18:	f7f6 f854 	bl	800afc4 <pbuf_copy>
 8014f1c:	4603      	mov	r3, r0
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d006      	beq.n	8014f30 <icmp_input+0x188>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
 8014f22:	4857      	ldr	r0, [pc, #348]	@ (8015080 <icmp_input+0x2d8>)
 8014f24:	f001 feca 	bl	8016cbc <iprintf>
          pbuf_free(r);
 8014f28:	6978      	ldr	r0, [r7, #20]
 8014f2a:	f7f5 ff03 	bl	800ad34 <pbuf_free>
          goto icmperr;
 8014f2e:	e081      	b.n	8015034 <icmp_input+0x28c>
        }
        /* free the original p */
        pbuf_free(p);
 8014f30:	6878      	ldr	r0, [r7, #4]
 8014f32:	f7f5 feff 	bl	800ad34 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014f36:	697b      	ldr	r3, [r7, #20]
 8014f38:	607b      	str	r3, [r7, #4]
 8014f3a:	e00f      	b.n	8014f5c <icmp_input+0x1b4>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014f3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014f3e:	330e      	adds	r3, #14
 8014f40:	4619      	mov	r1, r3
 8014f42:	6878      	ldr	r0, [r7, #4]
 8014f44:	f7f5 fe68 	bl	800ac18 <pbuf_remove_header>
 8014f48:	4603      	mov	r3, r0
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d006      	beq.n	8014f5c <icmp_input+0x1b4>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014f4e:	4b49      	ldr	r3, [pc, #292]	@ (8015074 <icmp_input+0x2cc>)
 8014f50:	22c7      	movs	r2, #199	@ 0xc7
 8014f52:	494c      	ldr	r1, [pc, #304]	@ (8015084 <icmp_input+0x2dc>)
 8014f54:	4849      	ldr	r0, [pc, #292]	@ (801507c <icmp_input+0x2d4>)
 8014f56:	f001 feb1 	bl	8016cbc <iprintf>
          goto icmperr;
 8014f5a:	e06b      	b.n	8015034 <icmp_input+0x28c>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	685b      	ldr	r3, [r3, #4]
 8014f60:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014f62:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014f64:	4619      	mov	r1, r3
 8014f66:	6878      	ldr	r0, [r7, #4]
 8014f68:	f7f5 fe46 	bl	800abf8 <pbuf_add_header>
 8014f6c:	4603      	mov	r3, r0
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d003      	beq.n	8014f7a <icmp_input+0x1d2>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
 8014f72:	4845      	ldr	r0, [pc, #276]	@ (8015088 <icmp_input+0x2e0>)
 8014f74:	f001 fea2 	bl	8016cbc <iprintf>
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014f78:	e053      	b.n	8015022 <icmp_input+0x27a>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	685b      	ldr	r3, [r3, #4]
 8014f7e:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014f80:	69fb      	ldr	r3, [r7, #28]
 8014f82:	681a      	ldr	r2, [r3, #0]
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014f88:	4b2e      	ldr	r3, [pc, #184]	@ (8015044 <icmp_input+0x29c>)
 8014f8a:	691a      	ldr	r2, [r3, #16]
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014f90:	693b      	ldr	r3, [r7, #16]
 8014f92:	2200      	movs	r2, #0
 8014f94:	701a      	strb	r2, [r3, #0]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8014f96:	693b      	ldr	r3, [r7, #16]
 8014f98:	885b      	ldrh	r3, [r3, #2]
 8014f9a:	b29b      	uxth	r3, r3
 8014f9c:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8014fa0:	4293      	cmp	r3, r2
 8014fa2:	d907      	bls.n	8014fb4 <icmp_input+0x20c>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8014fa4:	693b      	ldr	r3, [r7, #16]
 8014fa6:	885b      	ldrh	r3, [r3, #2]
 8014fa8:	b29b      	uxth	r3, r3
 8014faa:	3309      	adds	r3, #9
 8014fac:	b29a      	uxth	r2, r3
 8014fae:	693b      	ldr	r3, [r7, #16]
 8014fb0:	805a      	strh	r2, [r3, #2]
 8014fb2:	e006      	b.n	8014fc2 <icmp_input+0x21a>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8014fb4:	693b      	ldr	r3, [r7, #16]
 8014fb6:	885b      	ldrh	r3, [r3, #2]
 8014fb8:	b29b      	uxth	r3, r3
 8014fba:	3308      	adds	r3, #8
 8014fbc:	b29a      	uxth	r2, r3
 8014fbe:	693b      	ldr	r3, [r7, #16]
 8014fc0:	805a      	strh	r2, [r3, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	22ff      	movs	r2, #255	@ 0xff
 8014fc6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	2200      	movs	r2, #0
 8014fcc:	729a      	strb	r2, [r3, #10]
 8014fce:	2200      	movs	r2, #0
 8014fd0:	72da      	strb	r2, [r3, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014fd2:	683b      	ldr	r3, [r7, #0]
 8014fd4:	9302      	str	r3, [sp, #8]
 8014fd6:	2301      	movs	r3, #1
 8014fd8:	9301      	str	r3, [sp, #4]
 8014fda:	2300      	movs	r3, #0
 8014fdc:	9300      	str	r3, [sp, #0]
 8014fde:	23ff      	movs	r3, #255	@ 0xff
 8014fe0:	2200      	movs	r2, #0
 8014fe2:	69f9      	ldr	r1, [r7, #28]
 8014fe4:	6878      	ldr	r0, [r7, #4]
 8014fe6:	f000 fbeb 	bl	80157c0 <ip4_output_if>
 8014fea:	4603      	mov	r3, r0
 8014fec:	72fb      	strb	r3, [r7, #11]
        if (ret != ERR_OK) {
 8014fee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d015      	beq.n	8015022 <icmp_input+0x27a>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
 8014ff6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014ffa:	4618      	mov	r0, r3
 8014ffc:	f7f4 f9fc 	bl	80093f8 <lwip_strerr>
 8015000:	4603      	mov	r3, r0
 8015002:	4619      	mov	r1, r3
 8015004:	4821      	ldr	r0, [pc, #132]	@ (801508c <icmp_input+0x2e4>)
 8015006:	f001 fe59 	bl	8016cbc <iprintf>
      break;
 801500a:	e00a      	b.n	8015022 <icmp_input+0x27a>
      } else if (type == ICMP_AM) {
        MIB2_STATS_INC(mib2.icmpinaddrmasks);
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
 801500c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8015010:	f897 2020 	ldrb.w	r2, [r7, #32]
 8015014:	4619      	mov	r1, r3
 8015016:	481e      	ldr	r0, [pc, #120]	@ (8015090 <icmp_input+0x2e8>)
 8015018:	f001 fe50 	bl	8016cbc <iprintf>
 801501c:	e002      	b.n	8015024 <icmp_input+0x27c>
      break;
 801501e:	bf00      	nop
 8015020:	e000      	b.n	8015024 <icmp_input+0x27c>
      break;
 8015022:	bf00      	nop
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015024:	6878      	ldr	r0, [r7, #4]
 8015026:	f7f5 fe85 	bl	800ad34 <pbuf_free>
  return;
 801502a:	e007      	b.n	801503c <icmp_input+0x294>
lenerr:
  pbuf_free(p);
 801502c:	6878      	ldr	r0, [r7, #4]
 801502e:	f7f5 fe81 	bl	800ad34 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015032:	e003      	b.n	801503c <icmp_input+0x294>
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015034:	6878      	ldr	r0, [r7, #4]
 8015036:	f7f5 fe7d 	bl	800ad34 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801503a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801503c:	3728      	adds	r7, #40	@ 0x28
 801503e:	46bd      	mov	sp, r7
 8015040:	bd80      	pop	{r7, pc}
 8015042:	bf00      	nop
 8015044:	24000360 	.word	0x24000360
 8015048:	0801cd24 	.word	0x0801cd24
 801504c:	0801cd58 	.word	0x0801cd58
 8015050:	24000374 	.word	0x24000374
 8015054:	0801cd88 	.word	0x0801cd88
 8015058:	0801cdb4 	.word	0x0801cdb4
 801505c:	0801cde0 	.word	0x0801cde0
 8015060:	0801cdf4 	.word	0x0801cdf4
 8015064:	0801ce18 	.word	0x0801ce18
 8015068:	0801ce4c 	.word	0x0801ce4c
 801506c:	0801ce88 	.word	0x0801ce88
 8015070:	0801ceb0 	.word	0x0801ceb0
 8015074:	0801ced8 	.word	0x0801ced8
 8015078:	0801cf10 	.word	0x0801cf10
 801507c:	0801cf48 	.word	0x0801cf48
 8015080:	0801cf70 	.word	0x0801cf70
 8015084:	0801cf98 	.word	0x0801cf98
 8015088:	0801cfcc 	.word	0x0801cfcc
 801508c:	0801cff0 	.word	0x0801cff0
 8015090:	0801d020 	.word	0x0801d020

08015094 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015094:	b580      	push	{r7, lr}
 8015096:	b082      	sub	sp, #8
 8015098:	af00      	add	r7, sp, #0
 801509a:	6078      	str	r0, [r7, #4]
 801509c:	460b      	mov	r3, r1
 801509e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80150a0:	78fb      	ldrb	r3, [r7, #3]
 80150a2:	461a      	mov	r2, r3
 80150a4:	2103      	movs	r1, #3
 80150a6:	6878      	ldr	r0, [r7, #4]
 80150a8:	f000 f814 	bl	80150d4 <icmp_send_response>
}
 80150ac:	bf00      	nop
 80150ae:	3708      	adds	r7, #8
 80150b0:	46bd      	mov	sp, r7
 80150b2:	bd80      	pop	{r7, pc}

080150b4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80150b4:	b580      	push	{r7, lr}
 80150b6:	b082      	sub	sp, #8
 80150b8:	af00      	add	r7, sp, #0
 80150ba:	6078      	str	r0, [r7, #4]
 80150bc:	460b      	mov	r3, r1
 80150be:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80150c0:	78fb      	ldrb	r3, [r7, #3]
 80150c2:	461a      	mov	r2, r3
 80150c4:	210b      	movs	r1, #11
 80150c6:	6878      	ldr	r0, [r7, #4]
 80150c8:	f000 f804 	bl	80150d4 <icmp_send_response>
}
 80150cc:	bf00      	nop
 80150ce:	3708      	adds	r7, #8
 80150d0:	46bd      	mov	sp, r7
 80150d2:	bd80      	pop	{r7, pc}

080150d4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80150d4:	b580      	push	{r7, lr}
 80150d6:	b08c      	sub	sp, #48	@ 0x30
 80150d8:	af04      	add	r7, sp, #16
 80150da:	6078      	str	r0, [r7, #4]
 80150dc:	460b      	mov	r3, r1
 80150de:	70fb      	strb	r3, [r7, #3]
 80150e0:	4613      	mov	r3, r2
 80150e2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80150e4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80150e8:	2124      	movs	r1, #36	@ 0x24
 80150ea:	2022      	movs	r0, #34	@ 0x22
 80150ec:	f7f5 faf6 	bl	800a6dc <pbuf_alloc>
 80150f0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80150f2:	69fb      	ldr	r3, [r7, #28]
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d103      	bne.n	8015100 <icmp_send_response+0x2c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
 80150f8:	4849      	ldr	r0, [pc, #292]	@ (8015220 <icmp_send_response+0x14c>)
 80150fa:	f001 fe4f 	bl	8016d9c <puts>
 80150fe:	e08c      	b.n	801521a <icmp_send_response+0x146>
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015100:	69fb      	ldr	r3, [r7, #28]
 8015102:	895b      	ldrh	r3, [r3, #10]
 8015104:	2b23      	cmp	r3, #35	@ 0x23
 8015106:	d806      	bhi.n	8015116 <icmp_send_response+0x42>
 8015108:	4b46      	ldr	r3, [pc, #280]	@ (8015224 <icmp_send_response+0x150>)
 801510a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801510e:	4946      	ldr	r1, [pc, #280]	@ (8015228 <icmp_send_response+0x154>)
 8015110:	4846      	ldr	r0, [pc, #280]	@ (801522c <icmp_send_response+0x158>)
 8015112:	f001 fdd3 	bl	8016cbc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	685b      	ldr	r3, [r3, #4]
 801511a:	61bb      	str	r3, [r7, #24]
  LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded from "));
 801511c:	4844      	ldr	r0, [pc, #272]	@ (8015230 <icmp_send_response+0x15c>)
 801511e:	f001 fdcd 	bl	8016cbc <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
 8015122:	69bb      	ldr	r3, [r7, #24]
 8015124:	68db      	ldr	r3, [r3, #12]
 8015126:	b2db      	uxtb	r3, r3
 8015128:	4619      	mov	r1, r3
 801512a:	69bb      	ldr	r3, [r7, #24]
 801512c:	68db      	ldr	r3, [r3, #12]
 801512e:	0a1b      	lsrs	r3, r3, #8
 8015130:	b2db      	uxtb	r3, r3
 8015132:	461a      	mov	r2, r3
 8015134:	69bb      	ldr	r3, [r7, #24]
 8015136:	68db      	ldr	r3, [r3, #12]
 8015138:	0c1b      	lsrs	r3, r3, #16
 801513a:	b2db      	uxtb	r3, r3
 801513c:	4618      	mov	r0, r3
 801513e:	69bb      	ldr	r3, [r7, #24]
 8015140:	68db      	ldr	r3, [r3, #12]
 8015142:	0e1b      	lsrs	r3, r3, #24
 8015144:	b2db      	uxtb	r3, r3
 8015146:	9300      	str	r3, [sp, #0]
 8015148:	4603      	mov	r3, r0
 801514a:	483a      	ldr	r0, [pc, #232]	@ (8015234 <icmp_send_response+0x160>)
 801514c:	f001 fdb6 	bl	8016cbc <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
 8015150:	4839      	ldr	r0, [pc, #228]	@ (8015238 <icmp_send_response+0x164>)
 8015152:	f001 fdb3 	bl	8016cbc <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
 8015156:	69bb      	ldr	r3, [r7, #24]
 8015158:	691b      	ldr	r3, [r3, #16]
 801515a:	b2db      	uxtb	r3, r3
 801515c:	4619      	mov	r1, r3
 801515e:	69bb      	ldr	r3, [r7, #24]
 8015160:	691b      	ldr	r3, [r3, #16]
 8015162:	0a1b      	lsrs	r3, r3, #8
 8015164:	b2db      	uxtb	r3, r3
 8015166:	461a      	mov	r2, r3
 8015168:	69bb      	ldr	r3, [r7, #24]
 801516a:	691b      	ldr	r3, [r3, #16]
 801516c:	0c1b      	lsrs	r3, r3, #16
 801516e:	b2db      	uxtb	r3, r3
 8015170:	4618      	mov	r0, r3
 8015172:	69bb      	ldr	r3, [r7, #24]
 8015174:	691b      	ldr	r3, [r3, #16]
 8015176:	0e1b      	lsrs	r3, r3, #24
 8015178:	b2db      	uxtb	r3, r3
 801517a:	9300      	str	r3, [sp, #0]
 801517c:	4603      	mov	r3, r0
 801517e:	482d      	ldr	r0, [pc, #180]	@ (8015234 <icmp_send_response+0x160>)
 8015180:	f001 fd9c 	bl	8016cbc <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));
 8015184:	200a      	movs	r0, #10
 8015186:	f001 fdab 	bl	8016ce0 <putchar>

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801518a:	69fb      	ldr	r3, [r7, #28]
 801518c:	685b      	ldr	r3, [r3, #4]
 801518e:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015190:	697b      	ldr	r3, [r7, #20]
 8015192:	78fa      	ldrb	r2, [r7, #3]
 8015194:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015196:	697b      	ldr	r3, [r7, #20]
 8015198:	78ba      	ldrb	r2, [r7, #2]
 801519a:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801519c:	697b      	ldr	r3, [r7, #20]
 801519e:	2200      	movs	r2, #0
 80151a0:	711a      	strb	r2, [r3, #4]
 80151a2:	2200      	movs	r2, #0
 80151a4:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80151a6:	697b      	ldr	r3, [r7, #20]
 80151a8:	2200      	movs	r2, #0
 80151aa:	719a      	strb	r2, [r3, #6]
 80151ac:	2200      	movs	r2, #0
 80151ae:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80151b0:	69fb      	ldr	r3, [r7, #28]
 80151b2:	685b      	ldr	r3, [r3, #4]
 80151b4:	f103 0008 	add.w	r0, r3, #8
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	685b      	ldr	r3, [r3, #4]
 80151bc:	221c      	movs	r2, #28
 80151be:	4619      	mov	r1, r3
 80151c0:	f001 ff51 	bl	8017066 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80151c4:	69bb      	ldr	r3, [r7, #24]
 80151c6:	68db      	ldr	r3, [r3, #12]
 80151c8:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80151ca:	f107 030c 	add.w	r3, r7, #12
 80151ce:	4618      	mov	r0, r3
 80151d0:	f000 f834 	bl	801523c <ip4_route>
 80151d4:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80151d6:	693b      	ldr	r3, [r7, #16]
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d01b      	beq.n	8015214 <icmp_send_response+0x140>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80151dc:	697b      	ldr	r3, [r7, #20]
 80151de:	2200      	movs	r2, #0
 80151e0:	709a      	strb	r2, [r3, #2]
 80151e2:	2200      	movs	r2, #0
 80151e4:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80151e6:	69fb      	ldr	r3, [r7, #28]
 80151e8:	895b      	ldrh	r3, [r3, #10]
 80151ea:	4619      	mov	r1, r3
 80151ec:	6978      	ldr	r0, [r7, #20]
 80151ee:	f7f4 f9ae 	bl	800954e <inet_chksum>
 80151f2:	4603      	mov	r3, r0
 80151f4:	461a      	mov	r2, r3
 80151f6:	697b      	ldr	r3, [r7, #20]
 80151f8:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80151fa:	f107 020c 	add.w	r2, r7, #12
 80151fe:	693b      	ldr	r3, [r7, #16]
 8015200:	9302      	str	r3, [sp, #8]
 8015202:	2301      	movs	r3, #1
 8015204:	9301      	str	r3, [sp, #4]
 8015206:	2300      	movs	r3, #0
 8015208:	9300      	str	r3, [sp, #0]
 801520a:	23ff      	movs	r3, #255	@ 0xff
 801520c:	2100      	movs	r1, #0
 801520e:	69f8      	ldr	r0, [r7, #28]
 8015210:	f000 fad6 	bl	80157c0 <ip4_output_if>
  }
  pbuf_free(q);
 8015214:	69f8      	ldr	r0, [r7, #28]
 8015216:	f7f5 fd8d 	bl	800ad34 <pbuf_free>
}
 801521a:	3720      	adds	r7, #32
 801521c:	46bd      	mov	sp, r7
 801521e:	bd80      	pop	{r7, pc}
 8015220:	0801d054 	.word	0x0801d054
 8015224:	0801ced8 	.word	0x0801ced8
 8015228:	0801d094 	.word	0x0801d094
 801522c:	0801cf48 	.word	0x0801cf48
 8015230:	0801d0c0 	.word	0x0801d0c0
 8015234:	0801d0dc 	.word	0x0801d0dc
 8015238:	0801d0ec 	.word	0x0801d0ec

0801523c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801523c:	b580      	push	{r7, lr}
 801523e:	b086      	sub	sp, #24
 8015240:	af02      	add	r7, sp, #8
 8015242:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015244:	4b3b      	ldr	r3, [pc, #236]	@ (8015334 <ip4_route+0xf8>)
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	60fb      	str	r3, [r7, #12]
 801524a:	e036      	b.n	80152ba <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8015252:	f003 0301 	and.w	r3, r3, #1
 8015256:	b2db      	uxtb	r3, r3
 8015258:	2b00      	cmp	r3, #0
 801525a:	d02b      	beq.n	80152b4 <ip4_route+0x78>
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8015262:	089b      	lsrs	r3, r3, #2
 8015264:	f003 0301 	and.w	r3, r3, #1
 8015268:	b2db      	uxtb	r3, r3
 801526a:	2b00      	cmp	r3, #0
 801526c:	d022      	beq.n	80152b4 <ip4_route+0x78>
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	3304      	adds	r3, #4
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	2b00      	cmp	r3, #0
 8015276:	d01d      	beq.n	80152b4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	681a      	ldr	r2, [r3, #0]
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	3304      	adds	r3, #4
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	405a      	eors	r2, r3
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	3308      	adds	r3, #8
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	4013      	ands	r3, r2
 801528c:	2b00      	cmp	r3, #0
 801528e:	d101      	bne.n	8015294 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	e04b      	b.n	801532c <ip4_route+0xf0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801529a:	f003 0302 	and.w	r3, r3, #2
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d108      	bne.n	80152b4 <ip4_route+0x78>
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	681a      	ldr	r2, [r3, #0]
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	330c      	adds	r3, #12
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	429a      	cmp	r2, r3
 80152ae:	d101      	bne.n	80152b4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	e03b      	b.n	801532c <ip4_route+0xf0>
  NETIF_FOREACH(netif) {
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	60fb      	str	r3, [r7, #12]
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d1c5      	bne.n	801524c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80152c0:	4b1d      	ldr	r3, [pc, #116]	@ (8015338 <ip4_route+0xfc>)
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d01a      	beq.n	80152fe <ip4_route+0xc2>
 80152c8:	4b1b      	ldr	r3, [pc, #108]	@ (8015338 <ip4_route+0xfc>)
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80152d0:	f003 0301 	and.w	r3, r3, #1
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d012      	beq.n	80152fe <ip4_route+0xc2>
 80152d8:	4b17      	ldr	r3, [pc, #92]	@ (8015338 <ip4_route+0xfc>)
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80152e0:	f003 0304 	and.w	r3, r3, #4
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d00a      	beq.n	80152fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80152e8:	4b13      	ldr	r3, [pc, #76]	@ (8015338 <ip4_route+0xfc>)
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	3304      	adds	r3, #4
 80152ee:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d004      	beq.n	80152fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	b2db      	uxtb	r3, r3
 80152fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80152fc:	d114      	bne.n	8015328 <ip4_route+0xec>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	781b      	ldrb	r3, [r3, #0]
 8015302:	4619      	mov	r1, r3
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	3301      	adds	r3, #1
 8015308:	781b      	ldrb	r3, [r3, #0]
 801530a:	461a      	mov	r2, r3
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	3302      	adds	r3, #2
 8015310:	781b      	ldrb	r3, [r3, #0]
 8015312:	4618      	mov	r0, r3
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	3303      	adds	r3, #3
 8015318:	781b      	ldrb	r3, [r3, #0]
 801531a:	9300      	str	r3, [sp, #0]
 801531c:	4603      	mov	r3, r0
 801531e:	4807      	ldr	r0, [pc, #28]	@ (801533c <ip4_route+0x100>)
 8015320:	f001 fccc 	bl	8016cbc <iprintf>
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015324:	2300      	movs	r3, #0
 8015326:	e001      	b.n	801532c <ip4_route+0xf0>
  }

  return netif_default;
 8015328:	4b03      	ldr	r3, [pc, #12]	@ (8015338 <ip4_route+0xfc>)
 801532a:	681b      	ldr	r3, [r3, #0]
}
 801532c:	4618      	mov	r0, r3
 801532e:	3710      	adds	r7, #16
 8015330:	46bd      	mov	sp, r7
 8015332:	bd80      	pop	{r7, pc}
 8015334:	240032e4 	.word	0x240032e4
 8015338:	240032e8 	.word	0x240032e8
 801533c:	0801d0f4 	.word	0x0801d0f4

08015340 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015340:	b5b0      	push	{r4, r5, r7, lr}
 8015342:	b084      	sub	sp, #16
 8015344:	af02      	add	r7, sp, #8
 8015346:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: iphdr->dest 0x%"X32_F" netif->ip_addr 0x%"X32_F" (0x%"X32_F", 0x%"X32_F", 0x%"X32_F")\n",
 8015348:	4b28      	ldr	r3, [pc, #160]	@ (80153ec <ip4_input_accept+0xac>)
 801534a:	6958      	ldr	r0, [r3, #20]
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	3304      	adds	r3, #4
 8015350:	681c      	ldr	r4, [r3, #0]
 8015352:	4b26      	ldr	r3, [pc, #152]	@ (80153ec <ip4_input_accept+0xac>)
 8015354:	695a      	ldr	r2, [r3, #20]
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	3308      	adds	r3, #8
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	ea02 0503 	and.w	r5, r2, r3
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	3304      	adds	r3, #4
 8015364:	681a      	ldr	r2, [r3, #0]
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	3308      	adds	r3, #8
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	4013      	ands	r3, r2
 801536e:	4a1f      	ldr	r2, [pc, #124]	@ (80153ec <ip4_input_accept+0xac>)
 8015370:	6951      	ldr	r1, [r2, #20]
 8015372:	687a      	ldr	r2, [r7, #4]
 8015374:	3208      	adds	r2, #8
 8015376:	6812      	ldr	r2, [r2, #0]
 8015378:	43d2      	mvns	r2, r2
 801537a:	400a      	ands	r2, r1
 801537c:	9201      	str	r2, [sp, #4]
 801537e:	9300      	str	r3, [sp, #0]
 8015380:	462b      	mov	r3, r5
 8015382:	4622      	mov	r2, r4
 8015384:	4601      	mov	r1, r0
 8015386:	481a      	ldr	r0, [pc, #104]	@ (80153f0 <ip4_input_accept+0xb0>)
 8015388:	f001 fc98 	bl	8016cbc <iprintf>
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8015392:	f003 0301 	and.w	r3, r3, #1
 8015396:	b2db      	uxtb	r3, r3
 8015398:	2b00      	cmp	r3, #0
 801539a:	d021      	beq.n	80153e0 <ip4_input_accept+0xa0>
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	3304      	adds	r3, #4
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d01c      	beq.n	80153e0 <ip4_input_accept+0xa0>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80153a6:	4b11      	ldr	r3, [pc, #68]	@ (80153ec <ip4_input_accept+0xac>)
 80153a8:	695a      	ldr	r2, [r3, #20]
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	3304      	adds	r3, #4
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	429a      	cmp	r2, r3
 80153b2:	d008      	beq.n	80153c6 <ip4_input_accept+0x86>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80153b4:	4b0d      	ldr	r3, [pc, #52]	@ (80153ec <ip4_input_accept+0xac>)
 80153b6:	695b      	ldr	r3, [r3, #20]
 80153b8:	6879      	ldr	r1, [r7, #4]
 80153ba:	4618      	mov	r0, r3
 80153bc:	f000 fbbe 	bl	8015b3c <ip4_addr_isbroadcast_u32>
 80153c0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d00c      	beq.n	80153e0 <ip4_input_accept+0xa0>
#if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
        || (ip4_addr_get_u32(ip4_current_dest_addr()) == PP_HTONL(IPADDR_LOOPBACK))
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80153cc:	4619      	mov	r1, r3
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80153d4:	461a      	mov	r2, r3
 80153d6:	4807      	ldr	r0, [pc, #28]	@ (80153f4 <ip4_input_accept+0xb4>)
 80153d8:	f001 fc70 	bl	8016cbc <iprintf>
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80153dc:	2301      	movs	r3, #1
 80153de:	e000      	b.n	80153e2 <ip4_input_accept+0xa2>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80153e0:	2300      	movs	r3, #0
}
 80153e2:	4618      	mov	r0, r3
 80153e4:	3708      	adds	r7, #8
 80153e6:	46bd      	mov	sp, r7
 80153e8:	bdb0      	pop	{r4, r5, r7, pc}
 80153ea:	bf00      	nop
 80153ec:	24000360 	.word	0x24000360
 80153f0:	0801d11c 	.word	0x0801d11c
 80153f4:	0801d164 	.word	0x0801d164

080153f8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80153f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153fc:	b08a      	sub	sp, #40	@ 0x28
 80153fe:	af02      	add	r7, sp, #8
 8015400:	6078      	str	r0, [r7, #4]
 8015402:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8015404:	2301      	movs	r3, #1
 8015406:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	685b      	ldr	r3, [r3, #4]
 801540c:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801540e:	69fb      	ldr	r3, [r7, #28]
 8015410:	781b      	ldrb	r3, [r3, #0]
 8015412:	091b      	lsrs	r3, r3, #4
 8015414:	b2db      	uxtb	r3, r3
 8015416:	2b04      	cmp	r3, #4
 8015418:	d00f      	beq.n	801543a <ip4_input+0x42>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
 801541a:	69fb      	ldr	r3, [r7, #28]
 801541c:	781b      	ldrb	r3, [r3, #0]
 801541e:	091b      	lsrs	r3, r3, #4
 8015420:	b2db      	uxtb	r3, r3
 8015422:	4619      	mov	r1, r3
 8015424:	4897      	ldr	r0, [pc, #604]	@ (8015684 <ip4_input+0x28c>)
 8015426:	f001 fc49 	bl	8016cbc <iprintf>
    ip4_debug_print(p);
 801542a:	6878      	ldr	r0, [r7, #4]
 801542c:	f000 fac2 	bl	80159b4 <ip4_debug_print>
    pbuf_free(p);
 8015430:	6878      	ldr	r0, [r7, #4]
 8015432:	f7f5 fc7f 	bl	800ad34 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015436:	2300      	movs	r3, #0
 8015438:	e1b4      	b.n	80157a4 <ip4_input+0x3ac>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801543a:	69fb      	ldr	r3, [r7, #28]
 801543c:	781b      	ldrb	r3, [r3, #0]
 801543e:	f003 030f 	and.w	r3, r3, #15
 8015442:	b2db      	uxtb	r3, r3
 8015444:	009b      	lsls	r3, r3, #2
 8015446:	b2db      	uxtb	r3, r3
 8015448:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801544a:	69fb      	ldr	r3, [r7, #28]
 801544c:	885b      	ldrh	r3, [r3, #2]
 801544e:	b29b      	uxth	r3, r3
 8015450:	4618      	mov	r0, r3
 8015452:	f7f3 fff1 	bl	8009438 <lwip_htons>
 8015456:	4603      	mov	r3, r0
 8015458:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	891b      	ldrh	r3, [r3, #8]
 801545e:	8a3a      	ldrh	r2, [r7, #16]
 8015460:	429a      	cmp	r2, r3
 8015462:	d204      	bcs.n	801546e <ip4_input+0x76>
    pbuf_realloc(p, iphdr_len);
 8015464:	8a3b      	ldrh	r3, [r7, #16]
 8015466:	4619      	mov	r1, r3
 8015468:	6878      	ldr	r0, [r7, #4]
 801546a:	f7f5 fac3 	bl	800a9f4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	895b      	ldrh	r3, [r3, #10]
 8015472:	8a7a      	ldrh	r2, [r7, #18]
 8015474:	429a      	cmp	r2, r3
 8015476:	d807      	bhi.n	8015488 <ip4_input+0x90>
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	891b      	ldrh	r3, [r3, #8]
 801547c:	8a3a      	ldrh	r2, [r7, #16]
 801547e:	429a      	cmp	r2, r3
 8015480:	d802      	bhi.n	8015488 <ip4_input+0x90>
 8015482:	8a7b      	ldrh	r3, [r7, #18]
 8015484:	2b13      	cmp	r3, #19
 8015486:	d824      	bhi.n	80154d2 <ip4_input+0xda>
    if (iphdr_hlen < IP_HLEN) {
 8015488:	8a7b      	ldrh	r3, [r7, #18]
 801548a:	2b13      	cmp	r3, #19
 801548c:	d804      	bhi.n	8015498 <ip4_input+0xa0>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 801548e:	8a7b      	ldrh	r3, [r7, #18]
 8015490:	4619      	mov	r1, r3
 8015492:	487d      	ldr	r0, [pc, #500]	@ (8015688 <ip4_input+0x290>)
 8015494:	f001 fc12 	bl	8016cbc <iprintf>
                  ("ip4_input: short IP header (%"U16_F" bytes) received, IP packet dropped\n", iphdr_hlen));
    }
    if (iphdr_hlen > p->len) {
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	895b      	ldrh	r3, [r3, #10]
 801549c:	8a7a      	ldrh	r2, [r7, #18]
 801549e:	429a      	cmp	r2, r3
 80154a0:	d906      	bls.n	80154b0 <ip4_input+0xb8>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 80154a2:	8a79      	ldrh	r1, [r7, #18]
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	895b      	ldrh	r3, [r3, #10]
 80154a8:	461a      	mov	r2, r3
 80154aa:	4878      	ldr	r0, [pc, #480]	@ (801568c <ip4_input+0x294>)
 80154ac:	f001 fc06 	bl	8016cbc <iprintf>
                  ("IP header (len %"U16_F") does not fit in first pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_hlen, p->len));
    }
    if (iphdr_len > p->tot_len) {
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	891b      	ldrh	r3, [r3, #8]
 80154b4:	8a3a      	ldrh	r2, [r7, #16]
 80154b6:	429a      	cmp	r2, r3
 80154b8:	d906      	bls.n	80154c8 <ip4_input+0xd0>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 80154ba:	8a39      	ldrh	r1, [r7, #16]
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	891b      	ldrh	r3, [r3, #8]
 80154c0:	461a      	mov	r2, r3
 80154c2:	4873      	ldr	r0, [pc, #460]	@ (8015690 <ip4_input+0x298>)
 80154c4:	f001 fbfa 	bl	8016cbc <iprintf>
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80154c8:	6878      	ldr	r0, [r7, #4]
 80154ca:	f7f5 fc33 	bl	800ad34 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80154ce:	2300      	movs	r3, #0
 80154d0:	e168      	b.n	80157a4 <ip4_input+0x3ac>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80154d2:	69fb      	ldr	r3, [r7, #28]
 80154d4:	691b      	ldr	r3, [r3, #16]
 80154d6:	4a6f      	ldr	r2, [pc, #444]	@ (8015694 <ip4_input+0x29c>)
 80154d8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80154da:	69fb      	ldr	r3, [r7, #28]
 80154dc:	68db      	ldr	r3, [r3, #12]
 80154de:	4a6d      	ldr	r2, [pc, #436]	@ (8015694 <ip4_input+0x29c>)
 80154e0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80154e2:	4b6c      	ldr	r3, [pc, #432]	@ (8015694 <ip4_input+0x29c>)
 80154e4:	695b      	ldr	r3, [r3, #20]
 80154e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80154ea:	2be0      	cmp	r3, #224	@ 0xe0
 80154ec:	d112      	bne.n	8015514 <ip4_input+0x11c>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80154ee:	683b      	ldr	r3, [r7, #0]
 80154f0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80154f4:	f003 0301 	and.w	r3, r3, #1
 80154f8:	b2db      	uxtb	r3, r3
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d007      	beq.n	801550e <ip4_input+0x116>
 80154fe:	683b      	ldr	r3, [r7, #0]
 8015500:	3304      	adds	r3, #4
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d002      	beq.n	801550e <ip4_input+0x116>
      netif = inp;
 8015508:	683b      	ldr	r3, [r7, #0]
 801550a:	61bb      	str	r3, [r7, #24]
 801550c:	e02a      	b.n	8015564 <ip4_input+0x16c>
    } else {
      netif = NULL;
 801550e:	2300      	movs	r3, #0
 8015510:	61bb      	str	r3, [r7, #24]
 8015512:	e027      	b.n	8015564 <ip4_input+0x16c>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015514:	6838      	ldr	r0, [r7, #0]
 8015516:	f7ff ff13 	bl	8015340 <ip4_input_accept>
 801551a:	4603      	mov	r3, r0
 801551c:	2b00      	cmp	r3, #0
 801551e:	d002      	beq.n	8015526 <ip4_input+0x12e>
      netif = inp;
 8015520:	683b      	ldr	r3, [r7, #0]
 8015522:	61bb      	str	r3, [r7, #24]
 8015524:	e01e      	b.n	8015564 <ip4_input+0x16c>
    } else {
      netif = NULL;
 8015526:	2300      	movs	r3, #0
 8015528:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801552a:	4b5a      	ldr	r3, [pc, #360]	@ (8015694 <ip4_input+0x29c>)
 801552c:	695b      	ldr	r3, [r3, #20]
 801552e:	b2db      	uxtb	r3, r3
 8015530:	2b7f      	cmp	r3, #127	@ 0x7f
 8015532:	d017      	beq.n	8015564 <ip4_input+0x16c>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015534:	4b58      	ldr	r3, [pc, #352]	@ (8015698 <ip4_input+0x2a0>)
 8015536:	681b      	ldr	r3, [r3, #0]
 8015538:	61bb      	str	r3, [r7, #24]
 801553a:	e00e      	b.n	801555a <ip4_input+0x162>
          if (netif == inp) {
 801553c:	69ba      	ldr	r2, [r7, #24]
 801553e:	683b      	ldr	r3, [r7, #0]
 8015540:	429a      	cmp	r2, r3
 8015542:	d006      	beq.n	8015552 <ip4_input+0x15a>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015544:	69b8      	ldr	r0, [r7, #24]
 8015546:	f7ff fefb 	bl	8015340 <ip4_input_accept>
 801554a:	4603      	mov	r3, r0
 801554c:	2b00      	cmp	r3, #0
 801554e:	d108      	bne.n	8015562 <ip4_input+0x16a>
 8015550:	e000      	b.n	8015554 <ip4_input+0x15c>
            continue;
 8015552:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015554:	69bb      	ldr	r3, [r7, #24]
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	61bb      	str	r3, [r7, #24]
 801555a:	69bb      	ldr	r3, [r7, #24]
 801555c:	2b00      	cmp	r3, #0
 801555e:	d1ed      	bne.n	801553c <ip4_input+0x144>
 8015560:	e000      	b.n	8015564 <ip4_input+0x16c>
            break;
 8015562:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8015564:	69bb      	ldr	r3, [r7, #24]
 8015566:	2b00      	cmp	r3, #0
 8015568:	d11f      	bne.n	80155aa <ip4_input+0x1b2>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801556a:	69fb      	ldr	r3, [r7, #28]
 801556c:	7a5b      	ldrb	r3, [r3, #9]
 801556e:	2b11      	cmp	r3, #17
 8015570:	d11b      	bne.n	80155aa <ip4_input+0x1b2>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8015572:	8a7b      	ldrh	r3, [r7, #18]
 8015574:	69fa      	ldr	r2, [r7, #28]
 8015576:	4413      	add	r3, r2
 8015578:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	885b      	ldrh	r3, [r3, #2]
 801557e:	b29b      	uxth	r3, r3
 8015580:	4618      	mov	r0, r3
 8015582:	f7f3 ff59 	bl	8009438 <lwip_htons>
 8015586:	4603      	mov	r3, r0
 8015588:	4619      	mov	r1, r3
 801558a:	4844      	ldr	r0, [pc, #272]	@ (801569c <ip4_input+0x2a4>)
 801558c:	f001 fb96 	bl	8016cbc <iprintf>
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	885b      	ldrh	r3, [r3, #2]
 8015594:	b29b      	uxth	r3, r3
 8015596:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 801559a:	d106      	bne.n	80155aa <ip4_input+0x1b2>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
 801559c:	4840      	ldr	r0, [pc, #256]	@ (80156a0 <ip4_input+0x2a8>)
 801559e:	f001 fbfd 	bl	8016d9c <puts>
        netif = inp;
 80155a2:	683b      	ldr	r3, [r7, #0]
 80155a4:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80155a6:	2300      	movs	r3, #0
 80155a8:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80155aa:	697b      	ldr	r3, [r7, #20]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d01a      	beq.n	80155e6 <ip4_input+0x1ee>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80155b0:	4b38      	ldr	r3, [pc, #224]	@ (8015694 <ip4_input+0x29c>)
 80155b2:	691b      	ldr	r3, [r3, #16]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d016      	beq.n	80155e6 <ip4_input+0x1ee>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80155b8:	4b36      	ldr	r3, [pc, #216]	@ (8015694 <ip4_input+0x29c>)
 80155ba:	691b      	ldr	r3, [r3, #16]
 80155bc:	6839      	ldr	r1, [r7, #0]
 80155be:	4618      	mov	r0, r3
 80155c0:	f000 fabc 	bl	8015b3c <ip4_addr_isbroadcast_u32>
 80155c4:	4603      	mov	r3, r0
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d105      	bne.n	80155d6 <ip4_input+0x1de>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80155ca:	4b32      	ldr	r3, [pc, #200]	@ (8015694 <ip4_input+0x29c>)
 80155cc:	691b      	ldr	r3, [r3, #16]
 80155ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80155d2:	2be0      	cmp	r3, #224	@ 0xe0
 80155d4:	d107      	bne.n	80155e6 <ip4_input+0x1ee>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
 80155d6:	4833      	ldr	r0, [pc, #204]	@ (80156a4 <ip4_input+0x2ac>)
 80155d8:	f001 fbe0 	bl	8016d9c <puts>
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80155dc:	6878      	ldr	r0, [r7, #4]
 80155de:	f7f5 fba9 	bl	800ad34 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80155e2:	2300      	movs	r3, #0
 80155e4:	e0de      	b.n	80157a4 <ip4_input+0x3ac>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80155e6:	69bb      	ldr	r3, [r7, #24]
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d107      	bne.n	80155fc <ip4_input+0x204>
    /* packet not for us, route or discard */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: packet not for us.\n"));
 80155ec:	482e      	ldr	r0, [pc, #184]	@ (80156a8 <ip4_input+0x2b0>)
 80155ee:	f001 fbd5 	bl	8016d9c <puts>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80155f2:	6878      	ldr	r0, [r7, #4]
 80155f4:	f7f5 fb9e 	bl	800ad34 <pbuf_free>
    return ERR_OK;
 80155f8:	2300      	movs	r3, #0
 80155fa:	e0d3      	b.n	80157a4 <ip4_input+0x3ac>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80155fc:	69fb      	ldr	r3, [r7, #28]
 80155fe:	88db      	ldrh	r3, [r3, #6]
 8015600:	b29b      	uxth	r3, r3
 8015602:	461a      	mov	r2, r3
 8015604:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8015608:	4013      	ands	r3, r2
 801560a:	2b00      	cmp	r3, #0
 801560c:	d053      	beq.n	80156b6 <ip4_input+0x2be>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
 801560e:	69fb      	ldr	r3, [r7, #28]
 8015610:	889b      	ldrh	r3, [r3, #4]
 8015612:	b29b      	uxth	r3, r3
 8015614:	4618      	mov	r0, r3
 8015616:	f7f3 ff0f 	bl	8009438 <lwip_htons>
 801561a:	4603      	mov	r3, r0
 801561c:	461d      	mov	r5, r3
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	891b      	ldrh	r3, [r3, #8]
 8015622:	461e      	mov	r6, r3
 8015624:	69fb      	ldr	r3, [r7, #28]
 8015626:	885b      	ldrh	r3, [r3, #2]
 8015628:	b29b      	uxth	r3, r3
 801562a:	4618      	mov	r0, r3
 801562c:	f7f3 ff04 	bl	8009438 <lwip_htons>
 8015630:	4603      	mov	r3, r0
 8015632:	4698      	mov	r8, r3
 8015634:	69fb      	ldr	r3, [r7, #28]
 8015636:	88db      	ldrh	r3, [r3, #6]
 8015638:	b29b      	uxth	r3, r3
 801563a:	f003 0320 	and.w	r3, r3, #32
 801563e:	2b00      	cmp	r3, #0
 8015640:	bf14      	ite	ne
 8015642:	2301      	movne	r3, #1
 8015644:	2300      	moveq	r3, #0
 8015646:	b2db      	uxtb	r3, r3
 8015648:	461c      	mov	r4, r3
 801564a:	69fb      	ldr	r3, [r7, #28]
 801564c:	88db      	ldrh	r3, [r3, #6]
 801564e:	b29b      	uxth	r3, r3
 8015650:	4618      	mov	r0, r3
 8015652:	f7f3 fef1 	bl	8009438 <lwip_htons>
 8015656:	4603      	mov	r3, r0
 8015658:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801565c:	b29b      	uxth	r3, r3
 801565e:	00db      	lsls	r3, r3, #3
 8015660:	b29b      	uxth	r3, r3
 8015662:	9301      	str	r3, [sp, #4]
 8015664:	9400      	str	r4, [sp, #0]
 8015666:	4643      	mov	r3, r8
 8015668:	4632      	mov	r2, r6
 801566a:	4629      	mov	r1, r5
 801566c:	480f      	ldr	r0, [pc, #60]	@ (80156ac <ip4_input+0x2b4>)
 801566e:	f001 fb25 	bl	8016cbc <iprintf>
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015672:	6878      	ldr	r0, [r7, #4]
 8015674:	f000 fda8 	bl	80161c8 <ip4_reass>
 8015678:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	2b00      	cmp	r3, #0
 801567e:	d117      	bne.n	80156b0 <ip4_input+0x2b8>
      return ERR_OK;
 8015680:	2300      	movs	r3, #0
 8015682:	e08f      	b.n	80157a4 <ip4_input+0x3ac>
 8015684:	0801d194 	.word	0x0801d194
 8015688:	0801d1c8 	.word	0x0801d1c8
 801568c:	0801d20c 	.word	0x0801d20c
 8015690:	0801d25c 	.word	0x0801d25c
 8015694:	24000360 	.word	0x24000360
 8015698:	240032e4 	.word	0x240032e4
 801569c:	0801d29c 	.word	0x0801d29c
 80156a0:	0801d2cc 	.word	0x0801d2cc
 80156a4:	0801d2f0 	.word	0x0801d2f0
 80156a8:	0801d318 	.word	0x0801d318
 80156ac:	0801d338 	.word	0x0801d338
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	685b      	ldr	r3, [r3, #4]
 80156b4:	61fb      	str	r3, [r7, #28]
    return ERR_OK;
  }
#endif /* IP_OPTIONS_ALLOWED == 0 */

  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
 80156b6:	483e      	ldr	r0, [pc, #248]	@ (80157b0 <ip4_input+0x3b8>)
 80156b8:	f001 fb70 	bl	8016d9c <puts>
  ip4_debug_print(p);
 80156bc:	6878      	ldr	r0, [r7, #4]
 80156be:	f000 f979 	bl	80159b4 <ip4_debug_print>
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	895b      	ldrh	r3, [r3, #10]
 80156c6:	4619      	mov	r1, r3
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	891b      	ldrh	r3, [r3, #8]
 80156cc:	461a      	mov	r2, r3
 80156ce:	4839      	ldr	r0, [pc, #228]	@ (80157b4 <ip4_input+0x3bc>)
 80156d0:	f001 faf4 	bl	8016cbc <iprintf>

  ip_data.current_netif = netif;
 80156d4:	4a38      	ldr	r2, [pc, #224]	@ (80157b8 <ip4_input+0x3c0>)
 80156d6:	69bb      	ldr	r3, [r7, #24]
 80156d8:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80156da:	4a37      	ldr	r2, [pc, #220]	@ (80157b8 <ip4_input+0x3c0>)
 80156dc:	683b      	ldr	r3, [r7, #0]
 80156de:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80156e0:	4a35      	ldr	r2, [pc, #212]	@ (80157b8 <ip4_input+0x3c0>)
 80156e2:	69fb      	ldr	r3, [r7, #28]
 80156e4:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80156e6:	69fb      	ldr	r3, [r7, #28]
 80156e8:	781b      	ldrb	r3, [r3, #0]
 80156ea:	f003 030f 	and.w	r3, r3, #15
 80156ee:	b2db      	uxtb	r3, r3
 80156f0:	009b      	lsls	r3, r3, #2
 80156f2:	b2db      	uxtb	r3, r3
 80156f4:	461a      	mov	r2, r3
 80156f6:	4b30      	ldr	r3, [pc, #192]	@ (80157b8 <ip4_input+0x3c0>)
 80156f8:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80156fa:	8a7b      	ldrh	r3, [r7, #18]
 80156fc:	4619      	mov	r1, r3
 80156fe:	6878      	ldr	r0, [r7, #4]
 8015700:	f7f5 fa8a 	bl	800ac18 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015704:	69fb      	ldr	r3, [r7, #28]
 8015706:	7a5b      	ldrb	r3, [r3, #9]
 8015708:	2b11      	cmp	r3, #17
 801570a:	d006      	beq.n	801571a <ip4_input+0x322>
 801570c:	2b11      	cmp	r3, #17
 801570e:	dc13      	bgt.n	8015738 <ip4_input+0x340>
 8015710:	2b01      	cmp	r3, #1
 8015712:	d00c      	beq.n	801572e <ip4_input+0x336>
 8015714:	2b06      	cmp	r3, #6
 8015716:	d005      	beq.n	8015724 <ip4_input+0x32c>
 8015718:	e00e      	b.n	8015738 <ip4_input+0x340>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801571a:	6839      	ldr	r1, [r7, #0]
 801571c:	6878      	ldr	r0, [r7, #4]
 801571e:	f7fb fbb5 	bl	8010e8c <udp_input>
        break;
 8015722:	e02c      	b.n	801577e <ip4_input+0x386>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015724:	6839      	ldr	r1, [r7, #0]
 8015726:	6878      	ldr	r0, [r7, #4]
 8015728:	f7f7 fab4 	bl	800cc94 <tcp_input>
        break;
 801572c:	e027      	b.n	801577e <ip4_input+0x386>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801572e:	6839      	ldr	r1, [r7, #0]
 8015730:	6878      	ldr	r0, [r7, #4]
 8015732:	f7ff fb39 	bl	8014da8 <icmp_input>
        break;
 8015736:	e022      	b.n	801577e <ip4_input+0x386>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015738:	4b1f      	ldr	r3, [pc, #124]	@ (80157b8 <ip4_input+0x3c0>)
 801573a:	695b      	ldr	r3, [r3, #20]
 801573c:	69b9      	ldr	r1, [r7, #24]
 801573e:	4618      	mov	r0, r3
 8015740:	f000 f9fc 	bl	8015b3c <ip4_addr_isbroadcast_u32>
 8015744:	4603      	mov	r3, r0
 8015746:	2b00      	cmp	r3, #0
 8015748:	d10f      	bne.n	801576a <ip4_input+0x372>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801574a:	4b1b      	ldr	r3, [pc, #108]	@ (80157b8 <ip4_input+0x3c0>)
 801574c:	695b      	ldr	r3, [r3, #20]
 801574e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015752:	2be0      	cmp	r3, #224	@ 0xe0
 8015754:	d009      	beq.n	801576a <ip4_input+0x372>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015756:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801575a:	4619      	mov	r1, r3
 801575c:	6878      	ldr	r0, [r7, #4]
 801575e:	f7f5 fad6 	bl	800ad0e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015762:	2102      	movs	r1, #2
 8015764:	6878      	ldr	r0, [r7, #4]
 8015766:	f7ff fc95 	bl	8015094 <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));
 801576a:	69fb      	ldr	r3, [r7, #28]
 801576c:	7a5b      	ldrb	r3, [r3, #9]
 801576e:	4619      	mov	r1, r3
 8015770:	4812      	ldr	r0, [pc, #72]	@ (80157bc <ip4_input+0x3c4>)
 8015772:	f001 faa3 	bl	8016cbc <iprintf>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015776:	6878      	ldr	r0, [r7, #4]
 8015778:	f7f5 fadc 	bl	800ad34 <pbuf_free>
        break;
 801577c:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801577e:	4b0e      	ldr	r3, [pc, #56]	@ (80157b8 <ip4_input+0x3c0>)
 8015780:	2200      	movs	r2, #0
 8015782:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015784:	4b0c      	ldr	r3, [pc, #48]	@ (80157b8 <ip4_input+0x3c0>)
 8015786:	2200      	movs	r2, #0
 8015788:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801578a:	4b0b      	ldr	r3, [pc, #44]	@ (80157b8 <ip4_input+0x3c0>)
 801578c:	2200      	movs	r2, #0
 801578e:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015790:	4b09      	ldr	r3, [pc, #36]	@ (80157b8 <ip4_input+0x3c0>)
 8015792:	2200      	movs	r2, #0
 8015794:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015796:	4b08      	ldr	r3, [pc, #32]	@ (80157b8 <ip4_input+0x3c0>)
 8015798:	2200      	movs	r2, #0
 801579a:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801579c:	4b06      	ldr	r3, [pc, #24]	@ (80157b8 <ip4_input+0x3c0>)
 801579e:	2200      	movs	r2, #0
 80157a0:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80157a2:	2300      	movs	r3, #0
}
 80157a4:	4618      	mov	r0, r3
 80157a6:	3720      	adds	r7, #32
 80157a8:	46bd      	mov	sp, r7
 80157aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157ae:	bf00      	nop
 80157b0:	0801d39c 	.word	0x0801d39c
 80157b4:	0801d3a8 	.word	0x0801d3a8
 80157b8:	24000360 	.word	0x24000360
 80157bc:	0801d3d0 	.word	0x0801d3d0

080157c0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80157c0:	b580      	push	{r7, lr}
 80157c2:	b08a      	sub	sp, #40	@ 0x28
 80157c4:	af04      	add	r7, sp, #16
 80157c6:	60f8      	str	r0, [r7, #12]
 80157c8:	60b9      	str	r1, [r7, #8]
 80157ca:	607a      	str	r2, [r7, #4]
 80157cc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80157ce:	68bb      	ldr	r3, [r7, #8]
 80157d0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d009      	beq.n	80157ec <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80157d8:	68bb      	ldr	r3, [r7, #8]
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d003      	beq.n	80157e6 <ip4_output_if+0x26>
 80157de:	68bb      	ldr	r3, [r7, #8]
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d102      	bne.n	80157ec <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80157e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157e8:	3304      	adds	r3, #4
 80157ea:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80157ec:	78fa      	ldrb	r2, [r7, #3]
 80157ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157f0:	9302      	str	r3, [sp, #8]
 80157f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80157f6:	9301      	str	r3, [sp, #4]
 80157f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80157fc:	9300      	str	r3, [sp, #0]
 80157fe:	4613      	mov	r3, r2
 8015800:	687a      	ldr	r2, [r7, #4]
 8015802:	6979      	ldr	r1, [r7, #20]
 8015804:	68f8      	ldr	r0, [r7, #12]
 8015806:	f000 f805 	bl	8015814 <ip4_output_if_src>
 801580a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801580c:	4618      	mov	r0, r3
 801580e:	3718      	adds	r7, #24
 8015810:	46bd      	mov	sp, r7
 8015812:	bd80      	pop	{r7, pc}

08015814 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015814:	b580      	push	{r7, lr}
 8015816:	b088      	sub	sp, #32
 8015818:	af00      	add	r7, sp, #0
 801581a:	60f8      	str	r0, [r7, #12]
 801581c:	60b9      	str	r1, [r7, #8]
 801581e:	607a      	str	r2, [r7, #4]
 8015820:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	7b9b      	ldrb	r3, [r3, #14]
 8015826:	2b01      	cmp	r3, #1
 8015828:	d006      	beq.n	8015838 <ip4_output_if_src+0x24>
 801582a:	4b58      	ldr	r3, [pc, #352]	@ (801598c <ip4_output_if_src+0x178>)
 801582c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8015830:	4957      	ldr	r1, [pc, #348]	@ (8015990 <ip4_output_if_src+0x17c>)
 8015832:	4858      	ldr	r0, [pc, #352]	@ (8015994 <ip4_output_if_src+0x180>)
 8015834:	f001 fa42 	bl	8016cbc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d063      	beq.n	8015906 <ip4_output_if_src+0xf2>
    u16_t ip_hlen = IP_HLEN;
 801583e:	2314      	movs	r3, #20
 8015840:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015842:	2114      	movs	r1, #20
 8015844:	68f8      	ldr	r0, [r7, #12]
 8015846:	f7f5 f9d7 	bl	800abf8 <pbuf_add_header>
 801584a:	4603      	mov	r3, r0
 801584c:	2b00      	cmp	r3, #0
 801584e:	d005      	beq.n	801585c <ip4_output_if_src+0x48>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));
 8015850:	4851      	ldr	r0, [pc, #324]	@ (8015998 <ip4_output_if_src+0x184>)
 8015852:	f001 faa3 	bl	8016d9c <puts>

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015856:	f06f 0301 	mvn.w	r3, #1
 801585a:	e093      	b.n	8015984 <ip4_output_if_src+0x170>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	685b      	ldr	r3, [r3, #4]
 8015860:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	895b      	ldrh	r3, [r3, #10]
 8015866:	2b13      	cmp	r3, #19
 8015868:	d806      	bhi.n	8015878 <ip4_output_if_src+0x64>
 801586a:	4b48      	ldr	r3, [pc, #288]	@ (801598c <ip4_output_if_src+0x178>)
 801586c:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8015870:	494a      	ldr	r1, [pc, #296]	@ (801599c <ip4_output_if_src+0x188>)
 8015872:	4848      	ldr	r0, [pc, #288]	@ (8015994 <ip4_output_if_src+0x180>)
 8015874:	f001 fa22 	bl	8016cbc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015878:	69fb      	ldr	r3, [r7, #28]
 801587a:	78fa      	ldrb	r2, [r7, #3]
 801587c:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801587e:	69fb      	ldr	r3, [r7, #28]
 8015880:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8015884:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	681a      	ldr	r2, [r3, #0]
 801588a:	69fb      	ldr	r3, [r7, #28]
 801588c:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801588e:	8b7b      	ldrh	r3, [r7, #26]
 8015890:	089b      	lsrs	r3, r3, #2
 8015892:	b29b      	uxth	r3, r3
 8015894:	b2db      	uxtb	r3, r3
 8015896:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801589a:	b2da      	uxtb	r2, r3
 801589c:	69fb      	ldr	r3, [r7, #28]
 801589e:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80158a0:	69fb      	ldr	r3, [r7, #28]
 80158a2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80158a6:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	891b      	ldrh	r3, [r3, #8]
 80158ac:	4618      	mov	r0, r3
 80158ae:	f7f3 fdc3 	bl	8009438 <lwip_htons>
 80158b2:	4603      	mov	r3, r0
 80158b4:	461a      	mov	r2, r3
 80158b6:	69fb      	ldr	r3, [r7, #28]
 80158b8:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80158ba:	69fb      	ldr	r3, [r7, #28]
 80158bc:	2200      	movs	r2, #0
 80158be:	719a      	strb	r2, [r3, #6]
 80158c0:	2200      	movs	r2, #0
 80158c2:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80158c4:	4b36      	ldr	r3, [pc, #216]	@ (80159a0 <ip4_output_if_src+0x18c>)
 80158c6:	881b      	ldrh	r3, [r3, #0]
 80158c8:	4618      	mov	r0, r3
 80158ca:	f7f3 fdb5 	bl	8009438 <lwip_htons>
 80158ce:	4603      	mov	r3, r0
 80158d0:	461a      	mov	r2, r3
 80158d2:	69fb      	ldr	r3, [r7, #28]
 80158d4:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80158d6:	4b32      	ldr	r3, [pc, #200]	@ (80159a0 <ip4_output_if_src+0x18c>)
 80158d8:	881b      	ldrh	r3, [r3, #0]
 80158da:	3301      	adds	r3, #1
 80158dc:	b29a      	uxth	r2, r3
 80158de:	4b30      	ldr	r3, [pc, #192]	@ (80159a0 <ip4_output_if_src+0x18c>)
 80158e0:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80158e2:	68bb      	ldr	r3, [r7, #8]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d104      	bne.n	80158f2 <ip4_output_if_src+0xde>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80158e8:	4b2e      	ldr	r3, [pc, #184]	@ (80159a4 <ip4_output_if_src+0x190>)
 80158ea:	681a      	ldr	r2, [r3, #0]
 80158ec:	69fb      	ldr	r3, [r7, #28]
 80158ee:	60da      	str	r2, [r3, #12]
 80158f0:	e003      	b.n	80158fa <ip4_output_if_src+0xe6>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80158f2:	68bb      	ldr	r3, [r7, #8]
 80158f4:	681a      	ldr	r2, [r3, #0]
 80158f6:	69fb      	ldr	r3, [r7, #28]
 80158f8:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80158fa:	69fb      	ldr	r3, [r7, #28]
 80158fc:	2200      	movs	r2, #0
 80158fe:	729a      	strb	r2, [r3, #10]
 8015900:	2200      	movs	r2, #0
 8015902:	72da      	strb	r2, [r3, #11]
 8015904:	e012      	b.n	801592c <ip4_output_if_src+0x118>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	895b      	ldrh	r3, [r3, #10]
 801590a:	2b13      	cmp	r3, #19
 801590c:	d805      	bhi.n	801591a <ip4_output_if_src+0x106>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
 801590e:	4826      	ldr	r0, [pc, #152]	@ (80159a8 <ip4_output_if_src+0x194>)
 8015910:	f001 fa44 	bl	8016d9c <puts>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015914:	f06f 0301 	mvn.w	r3, #1
 8015918:	e034      	b.n	8015984 <ip4_output_if_src+0x170>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	685b      	ldr	r3, [r3, #4]
 801591e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015920:	69fb      	ldr	r3, [r7, #28]
 8015922:	691b      	ldr	r3, [r3, #16]
 8015924:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015926:	f107 0314 	add.w	r3, r7, #20
 801592a:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
 801592c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801592e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8015932:	4619      	mov	r1, r3
 8015934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015936:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801593a:	461a      	mov	r2, r3
 801593c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801593e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8015942:	481a      	ldr	r0, [pc, #104]	@ (80159ac <ip4_output_if_src+0x198>)
 8015944:	f001 f9ba 	bl	8016cbc <iprintf>
  ip4_debug_print(p);
 8015948:	68f8      	ldr	r0, [r7, #12]
 801594a:	f000 f833 	bl	80159b4 <ip4_debug_print>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801594e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015952:	2b00      	cmp	r3, #0
 8015954:	d00c      	beq.n	8015970 <ip4_output_if_src+0x15c>
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	891a      	ldrh	r2, [r3, #8]
 801595a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801595c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801595e:	429a      	cmp	r2, r3
 8015960:	d906      	bls.n	8015970 <ip4_output_if_src+0x15c>
    return ip4_frag(p, netif, dest);
 8015962:	687a      	ldr	r2, [r7, #4]
 8015964:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015966:	68f8      	ldr	r0, [r7, #12]
 8015968:	f000 fe22 	bl	80165b0 <ip4_frag>
 801596c:	4603      	mov	r3, r0
 801596e:	e009      	b.n	8015984 <ip4_output_if_src+0x170>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
 8015970:	480f      	ldr	r0, [pc, #60]	@ (80159b0 <ip4_output_if_src+0x19c>)
 8015972:	f001 fa13 	bl	8016d9c <puts>
  return netif->output(netif, p, dest);
 8015976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015978:	695b      	ldr	r3, [r3, #20]
 801597a:	687a      	ldr	r2, [r7, #4]
 801597c:	68f9      	ldr	r1, [r7, #12]
 801597e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015980:	4798      	blx	r3
 8015982:	4603      	mov	r3, r0
}
 8015984:	4618      	mov	r0, r3
 8015986:	3720      	adds	r7, #32
 8015988:	46bd      	mov	sp, r7
 801598a:	bd80      	pop	{r7, pc}
 801598c:	0801d3f4 	.word	0x0801d3f4
 8015990:	0801d428 	.word	0x0801d428
 8015994:	0801d434 	.word	0x0801d434
 8015998:	0801d45c 	.word	0x0801d45c
 801599c:	0801d490 	.word	0x0801d490
 80159a0:	2400347a 	.word	0x2400347a
 80159a4:	0801dc64 	.word	0x0801dc64
 80159a8:	0801d4c0 	.word	0x0801d4c0
 80159ac:	0801d4f4 	.word	0x0801d4f4
 80159b0:	0801d50c 	.word	0x0801d50c

080159b4 <ip4_debug_print>:
/* Print an IP header by using LWIP_DEBUGF
 * @param p an IP packet, p->payload pointing to the IP header
 */
void
ip4_debug_print(struct pbuf *p)
{
 80159b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159b8:	b086      	sub	sp, #24
 80159ba:	af02      	add	r7, sp, #8
 80159bc:	6078      	str	r0, [r7, #4]
  struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	685b      	ldr	r3, [r3, #4]
 80159c2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(IP_DEBUG, ("IP header:\n"));
 80159c4:	4856      	ldr	r0, [pc, #344]	@ (8015b20 <ip4_debug_print+0x16c>)
 80159c6:	f001 f9e9 	bl	8016d9c <puts>
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 80159ca:	4856      	ldr	r0, [pc, #344]	@ (8015b24 <ip4_debug_print+0x170>)
 80159cc:	f001 f9e6 	bl	8016d9c <puts>
  LWIP_DEBUGF(IP_DEBUG, ("|%2"S16_F" |%2"S16_F" |  0x%02"X16_F" |     %5"U16_F"     | (v, hl, tos, len)\n",
 80159d0:	68fb      	ldr	r3, [r7, #12]
 80159d2:	781b      	ldrb	r3, [r3, #0]
 80159d4:	091b      	lsrs	r3, r3, #4
 80159d6:	b2db      	uxtb	r3, r3
 80159d8:	461d      	mov	r5, r3
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	781b      	ldrb	r3, [r3, #0]
 80159de:	f003 040f 	and.w	r4, r3, #15
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	785b      	ldrb	r3, [r3, #1]
 80159e6:	461e      	mov	r6, r3
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	885b      	ldrh	r3, [r3, #2]
 80159ec:	b29b      	uxth	r3, r3
 80159ee:	4618      	mov	r0, r3
 80159f0:	f7f3 fd22 	bl	8009438 <lwip_htons>
 80159f4:	4603      	mov	r3, r0
 80159f6:	9300      	str	r3, [sp, #0]
 80159f8:	4633      	mov	r3, r6
 80159fa:	4622      	mov	r2, r4
 80159fc:	4629      	mov	r1, r5
 80159fe:	484a      	ldr	r0, [pc, #296]	@ (8015b28 <ip4_debug_print+0x174>)
 8015a00:	f001 f95c 	bl	8016cbc <iprintf>
                         (u16_t)IPH_V(iphdr),
                         (u16_t)IPH_HL(iphdr),
                         (u16_t)IPH_TOS(iphdr),
                         lwip_ntohs(IPH_LEN(iphdr))));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 8015a04:	4847      	ldr	r0, [pc, #284]	@ (8015b24 <ip4_debug_print+0x170>)
 8015a06:	f001 f9c9 	bl	8016d9c <puts>
  LWIP_DEBUGF(IP_DEBUG, ("|    %5"U16_F"      |%"U16_F"%"U16_F"%"U16_F"|    %4"U16_F"   | (id, flags, offset)\n",
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	889b      	ldrh	r3, [r3, #4]
 8015a0e:	b29b      	uxth	r3, r3
 8015a10:	4618      	mov	r0, r3
 8015a12:	f7f3 fd11 	bl	8009438 <lwip_htons>
 8015a16:	4603      	mov	r3, r0
 8015a18:	4698      	mov	r8, r3
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	88db      	ldrh	r3, [r3, #6]
 8015a1e:	b29b      	uxth	r3, r3
 8015a20:	4618      	mov	r0, r3
 8015a22:	f7f3 fd09 	bl	8009438 <lwip_htons>
 8015a26:	4603      	mov	r3, r0
 8015a28:	0bdb      	lsrs	r3, r3, #15
 8015a2a:	b29b      	uxth	r3, r3
 8015a2c:	f003 0501 	and.w	r5, r3, #1
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	88db      	ldrh	r3, [r3, #6]
 8015a34:	b29b      	uxth	r3, r3
 8015a36:	4618      	mov	r0, r3
 8015a38:	f7f3 fcfe 	bl	8009438 <lwip_htons>
 8015a3c:	4603      	mov	r3, r0
 8015a3e:	0b9b      	lsrs	r3, r3, #14
 8015a40:	b29b      	uxth	r3, r3
 8015a42:	f003 0601 	and.w	r6, r3, #1
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	88db      	ldrh	r3, [r3, #6]
 8015a4a:	b29b      	uxth	r3, r3
 8015a4c:	4618      	mov	r0, r3
 8015a4e:	f7f3 fcf3 	bl	8009438 <lwip_htons>
 8015a52:	4603      	mov	r3, r0
 8015a54:	0b5b      	lsrs	r3, r3, #13
 8015a56:	b29b      	uxth	r3, r3
 8015a58:	f003 0401 	and.w	r4, r3, #1
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	88db      	ldrh	r3, [r3, #6]
 8015a60:	b29b      	uxth	r3, r3
 8015a62:	4618      	mov	r0, r3
 8015a64:	f7f3 fce8 	bl	8009438 <lwip_htons>
 8015a68:	4603      	mov	r3, r0
 8015a6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015a6e:	9301      	str	r3, [sp, #4]
 8015a70:	9400      	str	r4, [sp, #0]
 8015a72:	4633      	mov	r3, r6
 8015a74:	462a      	mov	r2, r5
 8015a76:	4641      	mov	r1, r8
 8015a78:	482c      	ldr	r0, [pc, #176]	@ (8015b2c <ip4_debug_print+0x178>)
 8015a7a:	f001 f91f 	bl	8016cbc <iprintf>
                         lwip_ntohs(IPH_ID(iphdr)),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) >> 15 & 1),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) >> 14 & 1),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) >> 13 & 1),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 8015a7e:	4829      	ldr	r0, [pc, #164]	@ (8015b24 <ip4_debug_print+0x170>)
 8015a80:	f001 f98c 	bl	8016d9c <puts>
  LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |    0x%04"X16_F"     | (ttl, proto, chksum)\n",
 8015a84:	68fb      	ldr	r3, [r7, #12]
 8015a86:	7a1b      	ldrb	r3, [r3, #8]
 8015a88:	461c      	mov	r4, r3
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	7a5b      	ldrb	r3, [r3, #9]
 8015a8e:	461d      	mov	r5, r3
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	895b      	ldrh	r3, [r3, #10]
 8015a94:	b29b      	uxth	r3, r3
 8015a96:	4618      	mov	r0, r3
 8015a98:	f7f3 fcce 	bl	8009438 <lwip_htons>
 8015a9c:	4603      	mov	r3, r0
 8015a9e:	462a      	mov	r2, r5
 8015aa0:	4621      	mov	r1, r4
 8015aa2:	4823      	ldr	r0, [pc, #140]	@ (8015b30 <ip4_debug_print+0x17c>)
 8015aa4:	f001 f90a 	bl	8016cbc <iprintf>
                         (u16_t)IPH_TTL(iphdr),
                         (u16_t)IPH_PROTO(iphdr),
                         lwip_ntohs(IPH_CHKSUM(iphdr))));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 8015aa8:	481e      	ldr	r0, [pc, #120]	@ (8015b24 <ip4_debug_print+0x170>)
 8015aaa:	f001 f977 	bl	8016d9c <puts>
  LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  | (src)\n",
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	68db      	ldr	r3, [r3, #12]
 8015ab2:	b2db      	uxtb	r3, r3
 8015ab4:	4619      	mov	r1, r3
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	68db      	ldr	r3, [r3, #12]
 8015aba:	0a1b      	lsrs	r3, r3, #8
 8015abc:	b2db      	uxtb	r3, r3
 8015abe:	461a      	mov	r2, r3
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	68db      	ldr	r3, [r3, #12]
 8015ac4:	0c1b      	lsrs	r3, r3, #16
 8015ac6:	b2db      	uxtb	r3, r3
 8015ac8:	4618      	mov	r0, r3
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	68db      	ldr	r3, [r3, #12]
 8015ace:	0e1b      	lsrs	r3, r3, #24
 8015ad0:	b2db      	uxtb	r3, r3
 8015ad2:	9300      	str	r3, [sp, #0]
 8015ad4:	4603      	mov	r3, r0
 8015ad6:	4817      	ldr	r0, [pc, #92]	@ (8015b34 <ip4_debug_print+0x180>)
 8015ad8:	f001 f8f0 	bl	8016cbc <iprintf>
                         ip4_addr1_16_val(iphdr->src),
                         ip4_addr2_16_val(iphdr->src),
                         ip4_addr3_16_val(iphdr->src),
                         ip4_addr4_16_val(iphdr->src)));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 8015adc:	4811      	ldr	r0, [pc, #68]	@ (8015b24 <ip4_debug_print+0x170>)
 8015ade:	f001 f95d 	bl	8016d9c <puts>
  LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  | (dest)\n",
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	691b      	ldr	r3, [r3, #16]
 8015ae6:	b2db      	uxtb	r3, r3
 8015ae8:	4619      	mov	r1, r3
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	691b      	ldr	r3, [r3, #16]
 8015aee:	0a1b      	lsrs	r3, r3, #8
 8015af0:	b2db      	uxtb	r3, r3
 8015af2:	461a      	mov	r2, r3
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	691b      	ldr	r3, [r3, #16]
 8015af8:	0c1b      	lsrs	r3, r3, #16
 8015afa:	b2db      	uxtb	r3, r3
 8015afc:	4618      	mov	r0, r3
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	691b      	ldr	r3, [r3, #16]
 8015b02:	0e1b      	lsrs	r3, r3, #24
 8015b04:	b2db      	uxtb	r3, r3
 8015b06:	9300      	str	r3, [sp, #0]
 8015b08:	4603      	mov	r3, r0
 8015b0a:	480b      	ldr	r0, [pc, #44]	@ (8015b38 <ip4_debug_print+0x184>)
 8015b0c:	f001 f8d6 	bl	8016cbc <iprintf>
                         ip4_addr1_16_val(iphdr->dest),
                         ip4_addr2_16_val(iphdr->dest),
                         ip4_addr3_16_val(iphdr->dest),
                         ip4_addr4_16_val(iphdr->dest)));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 8015b10:	4804      	ldr	r0, [pc, #16]	@ (8015b24 <ip4_debug_print+0x170>)
 8015b12:	f001 f943 	bl	8016d9c <puts>
}
 8015b16:	bf00      	nop
 8015b18:	3710      	adds	r7, #16
 8015b1a:	46bd      	mov	sp, r7
 8015b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b20:	0801d55c 	.word	0x0801d55c
 8015b24:	0801d568 	.word	0x0801d568
 8015b28:	0801d58c 	.word	0x0801d58c
 8015b2c:	0801d5c8 	.word	0x0801d5c8
 8015b30:	0801d604 	.word	0x0801d604
 8015b34:	0801d640 	.word	0x0801d640
 8015b38:	0801d670 	.word	0x0801d670

08015b3c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015b3c:	b480      	push	{r7}
 8015b3e:	b085      	sub	sp, #20
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	6078      	str	r0, [r7, #4]
 8015b44:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015b50:	d002      	beq.n	8015b58 <ip4_addr_isbroadcast_u32+0x1c>
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d101      	bne.n	8015b5c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015b58:	2301      	movs	r3, #1
 8015b5a:	e02a      	b.n	8015bb2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015b5c:	683b      	ldr	r3, [r7, #0]
 8015b5e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8015b62:	f003 0302 	and.w	r3, r3, #2
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d101      	bne.n	8015b6e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015b6a:	2300      	movs	r3, #0
 8015b6c:	e021      	b.n	8015bb2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015b6e:	683b      	ldr	r3, [r7, #0]
 8015b70:	3304      	adds	r3, #4
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	687a      	ldr	r2, [r7, #4]
 8015b76:	429a      	cmp	r2, r3
 8015b78:	d101      	bne.n	8015b7e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015b7a:	2300      	movs	r3, #0
 8015b7c:	e019      	b.n	8015bb2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015b7e:	68fa      	ldr	r2, [r7, #12]
 8015b80:	683b      	ldr	r3, [r7, #0]
 8015b82:	3304      	adds	r3, #4
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	405a      	eors	r2, r3
 8015b88:	683b      	ldr	r3, [r7, #0]
 8015b8a:	3308      	adds	r3, #8
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	4013      	ands	r3, r2
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d10d      	bne.n	8015bb0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015b94:	683b      	ldr	r3, [r7, #0]
 8015b96:	3308      	adds	r3, #8
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	43da      	mvns	r2, r3
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015ba0:	683b      	ldr	r3, [r7, #0]
 8015ba2:	3308      	adds	r3, #8
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015ba8:	429a      	cmp	r2, r3
 8015baa:	d101      	bne.n	8015bb0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015bac:	2301      	movs	r3, #1
 8015bae:	e000      	b.n	8015bb2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015bb0:	2300      	movs	r3, #0
  }
}
 8015bb2:	4618      	mov	r0, r3
 8015bb4:	3714      	adds	r7, #20
 8015bb6:	46bd      	mov	sp, r7
 8015bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bbc:	4770      	bx	lr
	...

08015bc0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015bc0:	b580      	push	{r7, lr}
 8015bc2:	b084      	sub	sp, #16
 8015bc4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015bc6:	2300      	movs	r3, #0
 8015bc8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015bca:	4b12      	ldr	r3, [pc, #72]	@ (8015c14 <ip_reass_tmr+0x54>)
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015bd0:	e018      	b.n	8015c04 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	7fdb      	ldrb	r3, [r3, #31]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d00b      	beq.n	8015bf2 <ip_reass_tmr+0x32>
      r->timer--;
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	7fdb      	ldrb	r3, [r3, #31]
 8015bde:	3b01      	subs	r3, #1
 8015be0:	b2da      	uxtb	r2, r3
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	60fb      	str	r3, [r7, #12]
 8015bf0:	e008      	b.n	8015c04 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015bfc:	68b9      	ldr	r1, [r7, #8]
 8015bfe:	6878      	ldr	r0, [r7, #4]
 8015c00:	f000 f80a 	bl	8015c18 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d1e3      	bne.n	8015bd2 <ip_reass_tmr+0x12>
    }
  }
}
 8015c0a:	bf00      	nop
 8015c0c:	bf00      	nop
 8015c0e:	3710      	adds	r7, #16
 8015c10:	46bd      	mov	sp, r7
 8015c12:	bd80      	pop	{r7, pc}
 8015c14:	2400347c 	.word	0x2400347c

08015c18 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015c18:	b580      	push	{r7, lr}
 8015c1a:	b088      	sub	sp, #32
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	6078      	str	r0, [r7, #4]
 8015c20:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015c22:	2300      	movs	r3, #0
 8015c24:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015c26:	683a      	ldr	r2, [r7, #0]
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	429a      	cmp	r2, r3
 8015c2c:	d105      	bne.n	8015c3a <ip_reass_free_complete_datagram+0x22>
 8015c2e:	4b45      	ldr	r3, [pc, #276]	@ (8015d44 <ip_reass_free_complete_datagram+0x12c>)
 8015c30:	22ab      	movs	r2, #171	@ 0xab
 8015c32:	4945      	ldr	r1, [pc, #276]	@ (8015d48 <ip_reass_free_complete_datagram+0x130>)
 8015c34:	4845      	ldr	r0, [pc, #276]	@ (8015d4c <ip_reass_free_complete_datagram+0x134>)
 8015c36:	f001 f841 	bl	8016cbc <iprintf>
  if (prev != NULL) {
 8015c3a:	683b      	ldr	r3, [r7, #0]
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d00a      	beq.n	8015c56 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015c40:	683b      	ldr	r3, [r7, #0]
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	687a      	ldr	r2, [r7, #4]
 8015c46:	429a      	cmp	r2, r3
 8015c48:	d005      	beq.n	8015c56 <ip_reass_free_complete_datagram+0x3e>
 8015c4a:	4b3e      	ldr	r3, [pc, #248]	@ (8015d44 <ip_reass_free_complete_datagram+0x12c>)
 8015c4c:	22ad      	movs	r2, #173	@ 0xad
 8015c4e:	4940      	ldr	r1, [pc, #256]	@ (8015d50 <ip_reass_free_complete_datagram+0x138>)
 8015c50:	483e      	ldr	r0, [pc, #248]	@ (8015d4c <ip_reass_free_complete_datagram+0x134>)
 8015c52:	f001 f833 	bl	8016cbc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	685b      	ldr	r3, [r3, #4]
 8015c5a:	685b      	ldr	r3, [r3, #4]
 8015c5c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015c5e:	697b      	ldr	r3, [r7, #20]
 8015c60:	889b      	ldrh	r3, [r3, #4]
 8015c62:	b29b      	uxth	r3, r3
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d12a      	bne.n	8015cbe <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	685b      	ldr	r3, [r3, #4]
 8015c6c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015c6e:	697b      	ldr	r3, [r7, #20]
 8015c70:	681a      	ldr	r2, [r3, #0]
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015c76:	69bb      	ldr	r3, [r7, #24]
 8015c78:	6858      	ldr	r0, [r3, #4]
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	3308      	adds	r3, #8
 8015c7e:	2214      	movs	r2, #20
 8015c80:	4619      	mov	r1, r3
 8015c82:	f001 f9f0 	bl	8017066 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015c86:	2101      	movs	r1, #1
 8015c88:	69b8      	ldr	r0, [r7, #24]
 8015c8a:	f7ff fa13 	bl	80150b4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015c8e:	69b8      	ldr	r0, [r7, #24]
 8015c90:	f7f5 f8f0 	bl	800ae74 <pbuf_clen>
 8015c94:	4603      	mov	r3, r0
 8015c96:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015c98:	8bfa      	ldrh	r2, [r7, #30]
 8015c9a:	8a7b      	ldrh	r3, [r7, #18]
 8015c9c:	4413      	add	r3, r2
 8015c9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015ca2:	db05      	blt.n	8015cb0 <ip_reass_free_complete_datagram+0x98>
 8015ca4:	4b27      	ldr	r3, [pc, #156]	@ (8015d44 <ip_reass_free_complete_datagram+0x12c>)
 8015ca6:	22bc      	movs	r2, #188	@ 0xbc
 8015ca8:	492a      	ldr	r1, [pc, #168]	@ (8015d54 <ip_reass_free_complete_datagram+0x13c>)
 8015caa:	4828      	ldr	r0, [pc, #160]	@ (8015d4c <ip_reass_free_complete_datagram+0x134>)
 8015cac:	f001 f806 	bl	8016cbc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015cb0:	8bfa      	ldrh	r2, [r7, #30]
 8015cb2:	8a7b      	ldrh	r3, [r7, #18]
 8015cb4:	4413      	add	r3, r2
 8015cb6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015cb8:	69b8      	ldr	r0, [r7, #24]
 8015cba:	f7f5 f83b 	bl	800ad34 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	685b      	ldr	r3, [r3, #4]
 8015cc2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015cc4:	e01f      	b.n	8015d06 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015cc6:	69bb      	ldr	r3, [r7, #24]
 8015cc8:	685b      	ldr	r3, [r3, #4]
 8015cca:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015ccc:	69bb      	ldr	r3, [r7, #24]
 8015cce:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015cd0:	697b      	ldr	r3, [r7, #20]
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015cd6:	68f8      	ldr	r0, [r7, #12]
 8015cd8:	f7f5 f8cc 	bl	800ae74 <pbuf_clen>
 8015cdc:	4603      	mov	r3, r0
 8015cde:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015ce0:	8bfa      	ldrh	r2, [r7, #30]
 8015ce2:	8a7b      	ldrh	r3, [r7, #18]
 8015ce4:	4413      	add	r3, r2
 8015ce6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015cea:	db05      	blt.n	8015cf8 <ip_reass_free_complete_datagram+0xe0>
 8015cec:	4b15      	ldr	r3, [pc, #84]	@ (8015d44 <ip_reass_free_complete_datagram+0x12c>)
 8015cee:	22cc      	movs	r2, #204	@ 0xcc
 8015cf0:	4918      	ldr	r1, [pc, #96]	@ (8015d54 <ip_reass_free_complete_datagram+0x13c>)
 8015cf2:	4816      	ldr	r0, [pc, #88]	@ (8015d4c <ip_reass_free_complete_datagram+0x134>)
 8015cf4:	f000 ffe2 	bl	8016cbc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015cf8:	8bfa      	ldrh	r2, [r7, #30]
 8015cfa:	8a7b      	ldrh	r3, [r7, #18]
 8015cfc:	4413      	add	r3, r2
 8015cfe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015d00:	68f8      	ldr	r0, [r7, #12]
 8015d02:	f7f5 f817 	bl	800ad34 <pbuf_free>
  while (p != NULL) {
 8015d06:	69bb      	ldr	r3, [r7, #24]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d1dc      	bne.n	8015cc6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015d0c:	6839      	ldr	r1, [r7, #0]
 8015d0e:	6878      	ldr	r0, [r7, #4]
 8015d10:	f000 f8c2 	bl	8015e98 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015d14:	4b10      	ldr	r3, [pc, #64]	@ (8015d58 <ip_reass_free_complete_datagram+0x140>)
 8015d16:	881b      	ldrh	r3, [r3, #0]
 8015d18:	8bfa      	ldrh	r2, [r7, #30]
 8015d1a:	429a      	cmp	r2, r3
 8015d1c:	d905      	bls.n	8015d2a <ip_reass_free_complete_datagram+0x112>
 8015d1e:	4b09      	ldr	r3, [pc, #36]	@ (8015d44 <ip_reass_free_complete_datagram+0x12c>)
 8015d20:	22d2      	movs	r2, #210	@ 0xd2
 8015d22:	490e      	ldr	r1, [pc, #56]	@ (8015d5c <ip_reass_free_complete_datagram+0x144>)
 8015d24:	4809      	ldr	r0, [pc, #36]	@ (8015d4c <ip_reass_free_complete_datagram+0x134>)
 8015d26:	f000 ffc9 	bl	8016cbc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8015d58 <ip_reass_free_complete_datagram+0x140>)
 8015d2c:	881a      	ldrh	r2, [r3, #0]
 8015d2e:	8bfb      	ldrh	r3, [r7, #30]
 8015d30:	1ad3      	subs	r3, r2, r3
 8015d32:	b29a      	uxth	r2, r3
 8015d34:	4b08      	ldr	r3, [pc, #32]	@ (8015d58 <ip_reass_free_complete_datagram+0x140>)
 8015d36:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015d38:	8bfb      	ldrh	r3, [r7, #30]
}
 8015d3a:	4618      	mov	r0, r3
 8015d3c:	3720      	adds	r7, #32
 8015d3e:	46bd      	mov	sp, r7
 8015d40:	bd80      	pop	{r7, pc}
 8015d42:	bf00      	nop
 8015d44:	0801d6a0 	.word	0x0801d6a0
 8015d48:	0801d6dc 	.word	0x0801d6dc
 8015d4c:	0801d6e8 	.word	0x0801d6e8
 8015d50:	0801d710 	.word	0x0801d710
 8015d54:	0801d724 	.word	0x0801d724
 8015d58:	24003480 	.word	0x24003480
 8015d5c:	0801d744 	.word	0x0801d744

08015d60 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015d60:	b580      	push	{r7, lr}
 8015d62:	b08a      	sub	sp, #40	@ 0x28
 8015d64:	af00      	add	r7, sp, #0
 8015d66:	6078      	str	r0, [r7, #4]
 8015d68:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015d6e:	2300      	movs	r3, #0
 8015d70:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015d72:	2300      	movs	r3, #0
 8015d74:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015d76:	2300      	movs	r3, #0
 8015d78:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015d7a:	2300      	movs	r3, #0
 8015d7c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015d7e:	4b28      	ldr	r3, [pc, #160]	@ (8015e20 <ip_reass_remove_oldest_datagram+0xc0>)
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015d84:	e030      	b.n	8015de8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d88:	695a      	ldr	r2, [r3, #20]
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	68db      	ldr	r3, [r3, #12]
 8015d8e:	429a      	cmp	r2, r3
 8015d90:	d10c      	bne.n	8015dac <ip_reass_remove_oldest_datagram+0x4c>
 8015d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d94:	699a      	ldr	r2, [r3, #24]
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	691b      	ldr	r3, [r3, #16]
 8015d9a:	429a      	cmp	r2, r3
 8015d9c:	d106      	bne.n	8015dac <ip_reass_remove_oldest_datagram+0x4c>
 8015d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015da0:	899a      	ldrh	r2, [r3, #12]
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	889b      	ldrh	r3, [r3, #4]
 8015da6:	b29b      	uxth	r3, r3
 8015da8:	429a      	cmp	r2, r3
 8015daa:	d014      	beq.n	8015dd6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015dac:	693b      	ldr	r3, [r7, #16]
 8015dae:	3301      	adds	r3, #1
 8015db0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015db2:	6a3b      	ldr	r3, [r7, #32]
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d104      	bne.n	8015dc2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dba:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015dbc:	69fb      	ldr	r3, [r7, #28]
 8015dbe:	61bb      	str	r3, [r7, #24]
 8015dc0:	e009      	b.n	8015dd6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dc4:	7fda      	ldrb	r2, [r3, #31]
 8015dc6:	6a3b      	ldr	r3, [r7, #32]
 8015dc8:	7fdb      	ldrb	r3, [r3, #31]
 8015dca:	429a      	cmp	r2, r3
 8015dcc:	d803      	bhi.n	8015dd6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dd0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015dd2:	69fb      	ldr	r3, [r7, #28]
 8015dd4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d001      	beq.n	8015de2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015de0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d1cb      	bne.n	8015d86 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015dee:	6a3b      	ldr	r3, [r7, #32]
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d008      	beq.n	8015e06 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015df4:	69b9      	ldr	r1, [r7, #24]
 8015df6:	6a38      	ldr	r0, [r7, #32]
 8015df8:	f7ff ff0e 	bl	8015c18 <ip_reass_free_complete_datagram>
 8015dfc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015dfe:	697a      	ldr	r2, [r7, #20]
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	4413      	add	r3, r2
 8015e04:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015e06:	697a      	ldr	r2, [r7, #20]
 8015e08:	683b      	ldr	r3, [r7, #0]
 8015e0a:	429a      	cmp	r2, r3
 8015e0c:	da02      	bge.n	8015e14 <ip_reass_remove_oldest_datagram+0xb4>
 8015e0e:	693b      	ldr	r3, [r7, #16]
 8015e10:	2b01      	cmp	r3, #1
 8015e12:	dcac      	bgt.n	8015d6e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015e14:	697b      	ldr	r3, [r7, #20]
}
 8015e16:	4618      	mov	r0, r3
 8015e18:	3728      	adds	r7, #40	@ 0x28
 8015e1a:	46bd      	mov	sp, r7
 8015e1c:	bd80      	pop	{r7, pc}
 8015e1e:	bf00      	nop
 8015e20:	2400347c 	.word	0x2400347c

08015e24 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015e24:	b580      	push	{r7, lr}
 8015e26:	b084      	sub	sp, #16
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	6078      	str	r0, [r7, #4]
 8015e2c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015e2e:	2004      	movs	r0, #4
 8015e30:	f7f4 f842 	bl	8009eb8 <memp_malloc>
 8015e34:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d110      	bne.n	8015e5e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015e3c:	6839      	ldr	r1, [r7, #0]
 8015e3e:	6878      	ldr	r0, [r7, #4]
 8015e40:	f7ff ff8e 	bl	8015d60 <ip_reass_remove_oldest_datagram>
 8015e44:	4602      	mov	r2, r0
 8015e46:	683b      	ldr	r3, [r7, #0]
 8015e48:	4293      	cmp	r3, r2
 8015e4a:	dc03      	bgt.n	8015e54 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015e4c:	2004      	movs	r0, #4
 8015e4e:	f7f4 f833 	bl	8009eb8 <memp_malloc>
 8015e52:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d101      	bne.n	8015e5e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015e5a:	2300      	movs	r3, #0
 8015e5c:	e016      	b.n	8015e8c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015e5e:	2220      	movs	r2, #32
 8015e60:	2100      	movs	r1, #0
 8015e62:	68f8      	ldr	r0, [r7, #12]
 8015e64:	f001 f88a 	bl	8016f7c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	220f      	movs	r2, #15
 8015e6c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015e6e:	4b09      	ldr	r3, [pc, #36]	@ (8015e94 <ip_reass_enqueue_new_datagram+0x70>)
 8015e70:	681a      	ldr	r2, [r3, #0]
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015e76:	4a07      	ldr	r2, [pc, #28]	@ (8015e94 <ip_reass_enqueue_new_datagram+0x70>)
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	3308      	adds	r3, #8
 8015e80:	2214      	movs	r2, #20
 8015e82:	6879      	ldr	r1, [r7, #4]
 8015e84:	4618      	mov	r0, r3
 8015e86:	f001 f8ee 	bl	8017066 <memcpy>
  return ipr;
 8015e8a:	68fb      	ldr	r3, [r7, #12]
}
 8015e8c:	4618      	mov	r0, r3
 8015e8e:	3710      	adds	r7, #16
 8015e90:	46bd      	mov	sp, r7
 8015e92:	bd80      	pop	{r7, pc}
 8015e94:	2400347c 	.word	0x2400347c

08015e98 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015e98:	b580      	push	{r7, lr}
 8015e9a:	b082      	sub	sp, #8
 8015e9c:	af00      	add	r7, sp, #0
 8015e9e:	6078      	str	r0, [r7, #4]
 8015ea0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015ea2:	4b10      	ldr	r3, [pc, #64]	@ (8015ee4 <ip_reass_dequeue_datagram+0x4c>)
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	687a      	ldr	r2, [r7, #4]
 8015ea8:	429a      	cmp	r2, r3
 8015eaa:	d104      	bne.n	8015eb6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	4a0c      	ldr	r2, [pc, #48]	@ (8015ee4 <ip_reass_dequeue_datagram+0x4c>)
 8015eb2:	6013      	str	r3, [r2, #0]
 8015eb4:	e00d      	b.n	8015ed2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015eb6:	683b      	ldr	r3, [r7, #0]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d106      	bne.n	8015eca <ip_reass_dequeue_datagram+0x32>
 8015ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8015ee8 <ip_reass_dequeue_datagram+0x50>)
 8015ebe:	f240 1245 	movw	r2, #325	@ 0x145
 8015ec2:	490a      	ldr	r1, [pc, #40]	@ (8015eec <ip_reass_dequeue_datagram+0x54>)
 8015ec4:	480a      	ldr	r0, [pc, #40]	@ (8015ef0 <ip_reass_dequeue_datagram+0x58>)
 8015ec6:	f000 fef9 	bl	8016cbc <iprintf>
    prev->next = ipr->next;
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	681a      	ldr	r2, [r3, #0]
 8015ece:	683b      	ldr	r3, [r7, #0]
 8015ed0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015ed2:	6879      	ldr	r1, [r7, #4]
 8015ed4:	2004      	movs	r0, #4
 8015ed6:	f7f4 f85f 	bl	8009f98 <memp_free>
}
 8015eda:	bf00      	nop
 8015edc:	3708      	adds	r7, #8
 8015ede:	46bd      	mov	sp, r7
 8015ee0:	bd80      	pop	{r7, pc}
 8015ee2:	bf00      	nop
 8015ee4:	2400347c 	.word	0x2400347c
 8015ee8:	0801d6a0 	.word	0x0801d6a0
 8015eec:	0801d768 	.word	0x0801d768
 8015ef0:	0801d6e8 	.word	0x0801d6e8

08015ef4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015ef4:	b580      	push	{r7, lr}
 8015ef6:	b08c      	sub	sp, #48	@ 0x30
 8015ef8:	af00      	add	r7, sp, #0
 8015efa:	60f8      	str	r0, [r7, #12]
 8015efc:	60b9      	str	r1, [r7, #8]
 8015efe:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015f00:	2300      	movs	r3, #0
 8015f02:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015f04:	2301      	movs	r3, #1
 8015f06:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015f08:	68bb      	ldr	r3, [r7, #8]
 8015f0a:	685b      	ldr	r3, [r3, #4]
 8015f0c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015f0e:	69fb      	ldr	r3, [r7, #28]
 8015f10:	885b      	ldrh	r3, [r3, #2]
 8015f12:	b29b      	uxth	r3, r3
 8015f14:	4618      	mov	r0, r3
 8015f16:	f7f3 fa8f 	bl	8009438 <lwip_htons>
 8015f1a:	4603      	mov	r3, r0
 8015f1c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015f1e:	69fb      	ldr	r3, [r7, #28]
 8015f20:	781b      	ldrb	r3, [r3, #0]
 8015f22:	f003 030f 	and.w	r3, r3, #15
 8015f26:	b2db      	uxtb	r3, r3
 8015f28:	009b      	lsls	r3, r3, #2
 8015f2a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015f2c:	7e7b      	ldrb	r3, [r7, #25]
 8015f2e:	b29b      	uxth	r3, r3
 8015f30:	8b7a      	ldrh	r2, [r7, #26]
 8015f32:	429a      	cmp	r2, r3
 8015f34:	d202      	bcs.n	8015f3c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015f36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015f3a:	e135      	b.n	80161a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015f3c:	7e7b      	ldrb	r3, [r7, #25]
 8015f3e:	b29b      	uxth	r3, r3
 8015f40:	8b7a      	ldrh	r2, [r7, #26]
 8015f42:	1ad3      	subs	r3, r2, r3
 8015f44:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015f46:	69fb      	ldr	r3, [r7, #28]
 8015f48:	88db      	ldrh	r3, [r3, #6]
 8015f4a:	b29b      	uxth	r3, r3
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	f7f3 fa73 	bl	8009438 <lwip_htons>
 8015f52:	4603      	mov	r3, r0
 8015f54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015f58:	b29b      	uxth	r3, r3
 8015f5a:	00db      	lsls	r3, r3, #3
 8015f5c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015f5e:	68bb      	ldr	r3, [r7, #8]
 8015f60:	685b      	ldr	r3, [r3, #4]
 8015f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8015f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f66:	2200      	movs	r2, #0
 8015f68:	701a      	strb	r2, [r3, #0]
 8015f6a:	2200      	movs	r2, #0
 8015f6c:	705a      	strb	r2, [r3, #1]
 8015f6e:	2200      	movs	r2, #0
 8015f70:	709a      	strb	r2, [r3, #2]
 8015f72:	2200      	movs	r2, #0
 8015f74:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f78:	8afa      	ldrh	r2, [r7, #22]
 8015f7a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015f7c:	8afa      	ldrh	r2, [r7, #22]
 8015f7e:	8b7b      	ldrh	r3, [r7, #26]
 8015f80:	4413      	add	r3, r2
 8015f82:	b29a      	uxth	r2, r3
 8015f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f86:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f8a:	88db      	ldrh	r3, [r3, #6]
 8015f8c:	b29b      	uxth	r3, r3
 8015f8e:	8afa      	ldrh	r2, [r7, #22]
 8015f90:	429a      	cmp	r2, r3
 8015f92:	d902      	bls.n	8015f9a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015f94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015f98:	e106      	b.n	80161a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	685b      	ldr	r3, [r3, #4]
 8015f9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8015fa0:	e068      	b.n	8016074 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fa4:	685b      	ldr	r3, [r3, #4]
 8015fa6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015faa:	889b      	ldrh	r3, [r3, #4]
 8015fac:	b29a      	uxth	r2, r3
 8015fae:	693b      	ldr	r3, [r7, #16]
 8015fb0:	889b      	ldrh	r3, [r3, #4]
 8015fb2:	b29b      	uxth	r3, r3
 8015fb4:	429a      	cmp	r2, r3
 8015fb6:	d235      	bcs.n	8016024 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015fbc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d020      	beq.n	8016006 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fc6:	889b      	ldrh	r3, [r3, #4]
 8015fc8:	b29a      	uxth	r2, r3
 8015fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fcc:	88db      	ldrh	r3, [r3, #6]
 8015fce:	b29b      	uxth	r3, r3
 8015fd0:	429a      	cmp	r2, r3
 8015fd2:	d307      	bcc.n	8015fe4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fd6:	88db      	ldrh	r3, [r3, #6]
 8015fd8:	b29a      	uxth	r2, r3
 8015fda:	693b      	ldr	r3, [r7, #16]
 8015fdc:	889b      	ldrh	r3, [r3, #4]
 8015fde:	b29b      	uxth	r3, r3
 8015fe0:	429a      	cmp	r2, r3
 8015fe2:	d902      	bls.n	8015fea <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015fe4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015fe8:	e0de      	b.n	80161a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fec:	68ba      	ldr	r2, [r7, #8]
 8015fee:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ff2:	88db      	ldrh	r3, [r3, #6]
 8015ff4:	b29a      	uxth	r2, r3
 8015ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ff8:	889b      	ldrh	r3, [r3, #4]
 8015ffa:	b29b      	uxth	r3, r3
 8015ffc:	429a      	cmp	r2, r3
 8015ffe:	d03d      	beq.n	801607c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016000:	2300      	movs	r3, #0
 8016002:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016004:	e03a      	b.n	801607c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016008:	88db      	ldrh	r3, [r3, #6]
 801600a:	b29a      	uxth	r2, r3
 801600c:	693b      	ldr	r3, [r7, #16]
 801600e:	889b      	ldrh	r3, [r3, #4]
 8016010:	b29b      	uxth	r3, r3
 8016012:	429a      	cmp	r2, r3
 8016014:	d902      	bls.n	801601c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016016:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801601a:	e0c5      	b.n	80161a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	68ba      	ldr	r2, [r7, #8]
 8016020:	605a      	str	r2, [r3, #4]
      break;
 8016022:	e02b      	b.n	801607c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016026:	889b      	ldrh	r3, [r3, #4]
 8016028:	b29a      	uxth	r2, r3
 801602a:	693b      	ldr	r3, [r7, #16]
 801602c:	889b      	ldrh	r3, [r3, #4]
 801602e:	b29b      	uxth	r3, r3
 8016030:	429a      	cmp	r2, r3
 8016032:	d102      	bne.n	801603a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016034:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016038:	e0b6      	b.n	80161a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801603a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801603c:	889b      	ldrh	r3, [r3, #4]
 801603e:	b29a      	uxth	r2, r3
 8016040:	693b      	ldr	r3, [r7, #16]
 8016042:	88db      	ldrh	r3, [r3, #6]
 8016044:	b29b      	uxth	r3, r3
 8016046:	429a      	cmp	r2, r3
 8016048:	d202      	bcs.n	8016050 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801604a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801604e:	e0ab      	b.n	80161a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016052:	2b00      	cmp	r3, #0
 8016054:	d009      	beq.n	801606a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016058:	88db      	ldrh	r3, [r3, #6]
 801605a:	b29a      	uxth	r2, r3
 801605c:	693b      	ldr	r3, [r7, #16]
 801605e:	889b      	ldrh	r3, [r3, #4]
 8016060:	b29b      	uxth	r3, r3
 8016062:	429a      	cmp	r2, r3
 8016064:	d001      	beq.n	801606a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016066:	2300      	movs	r3, #0
 8016068:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801606a:	693b      	ldr	r3, [r7, #16]
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8016070:	693b      	ldr	r3, [r7, #16]
 8016072:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8016074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016076:	2b00      	cmp	r3, #0
 8016078:	d193      	bne.n	8015fa2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801607a:	e000      	b.n	801607e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801607c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801607e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016080:	2b00      	cmp	r3, #0
 8016082:	d12d      	bne.n	80160e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016086:	2b00      	cmp	r3, #0
 8016088:	d01c      	beq.n	80160c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801608a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801608c:	88db      	ldrh	r3, [r3, #6]
 801608e:	b29a      	uxth	r2, r3
 8016090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016092:	889b      	ldrh	r3, [r3, #4]
 8016094:	b29b      	uxth	r3, r3
 8016096:	429a      	cmp	r2, r3
 8016098:	d906      	bls.n	80160a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801609a:	4b45      	ldr	r3, [pc, #276]	@ (80161b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801609c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80160a0:	4944      	ldr	r1, [pc, #272]	@ (80161b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80160a2:	4845      	ldr	r0, [pc, #276]	@ (80161b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80160a4:	f000 fe0a 	bl	8016cbc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80160a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160aa:	68ba      	ldr	r2, [r7, #8]
 80160ac:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80160ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160b0:	88db      	ldrh	r3, [r3, #6]
 80160b2:	b29a      	uxth	r2, r3
 80160b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160b6:	889b      	ldrh	r3, [r3, #4]
 80160b8:	b29b      	uxth	r3, r3
 80160ba:	429a      	cmp	r2, r3
 80160bc:	d010      	beq.n	80160e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80160be:	2300      	movs	r3, #0
 80160c0:	623b      	str	r3, [r7, #32]
 80160c2:	e00d      	b.n	80160e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	685b      	ldr	r3, [r3, #4]
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d006      	beq.n	80160da <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80160cc:	4b38      	ldr	r3, [pc, #224]	@ (80161b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80160ce:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80160d2:	493a      	ldr	r1, [pc, #232]	@ (80161bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80160d4:	4838      	ldr	r0, [pc, #224]	@ (80161b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80160d6:	f000 fdf1 	bl	8016cbc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	68ba      	ldr	r2, [r7, #8]
 80160de:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d105      	bne.n	80160f2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	7f9b      	ldrb	r3, [r3, #30]
 80160ea:	f003 0301 	and.w	r3, r3, #1
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d059      	beq.n	80161a6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80160f2:	6a3b      	ldr	r3, [r7, #32]
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d04f      	beq.n	8016198 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	685b      	ldr	r3, [r3, #4]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d006      	beq.n	801610e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016100:	68fb      	ldr	r3, [r7, #12]
 8016102:	685b      	ldr	r3, [r3, #4]
 8016104:	685b      	ldr	r3, [r3, #4]
 8016106:	889b      	ldrh	r3, [r3, #4]
 8016108:	b29b      	uxth	r3, r3
 801610a:	2b00      	cmp	r3, #0
 801610c:	d002      	beq.n	8016114 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801610e:	2300      	movs	r3, #0
 8016110:	623b      	str	r3, [r7, #32]
 8016112:	e041      	b.n	8016198 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016116:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8016118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801611e:	e012      	b.n	8016146 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016122:	685b      	ldr	r3, [r3, #4]
 8016124:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8016126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016128:	88db      	ldrh	r3, [r3, #6]
 801612a:	b29a      	uxth	r2, r3
 801612c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801612e:	889b      	ldrh	r3, [r3, #4]
 8016130:	b29b      	uxth	r3, r3
 8016132:	429a      	cmp	r2, r3
 8016134:	d002      	beq.n	801613c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016136:	2300      	movs	r3, #0
 8016138:	623b      	str	r3, [r7, #32]
            break;
 801613a:	e007      	b.n	801614c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801613c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801613e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8016140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016142:	681b      	ldr	r3, [r3, #0]
 8016144:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8016146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016148:	2b00      	cmp	r3, #0
 801614a:	d1e9      	bne.n	8016120 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801614c:	6a3b      	ldr	r3, [r7, #32]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d022      	beq.n	8016198 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	685b      	ldr	r3, [r3, #4]
 8016156:	2b00      	cmp	r3, #0
 8016158:	d106      	bne.n	8016168 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801615a:	4b15      	ldr	r3, [pc, #84]	@ (80161b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801615c:	f240 12df 	movw	r2, #479	@ 0x1df
 8016160:	4917      	ldr	r1, [pc, #92]	@ (80161c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016162:	4815      	ldr	r0, [pc, #84]	@ (80161b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016164:	f000 fdaa 	bl	8016cbc <iprintf>
          LWIP_ASSERT("sanity check",
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	685b      	ldr	r3, [r3, #4]
 801616c:	685b      	ldr	r3, [r3, #4]
 801616e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016170:	429a      	cmp	r2, r3
 8016172:	d106      	bne.n	8016182 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016174:	4b0e      	ldr	r3, [pc, #56]	@ (80161b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016176:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801617a:	4911      	ldr	r1, [pc, #68]	@ (80161c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801617c:	480e      	ldr	r0, [pc, #56]	@ (80161b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801617e:	f000 fd9d 	bl	8016cbc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	2b00      	cmp	r3, #0
 8016188:	d006      	beq.n	8016198 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801618a:	4b09      	ldr	r3, [pc, #36]	@ (80161b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801618c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8016190:	490c      	ldr	r1, [pc, #48]	@ (80161c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016192:	4809      	ldr	r0, [pc, #36]	@ (80161b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016194:	f000 fd92 	bl	8016cbc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016198:	6a3b      	ldr	r3, [r7, #32]
 801619a:	2b00      	cmp	r3, #0
 801619c:	bf14      	ite	ne
 801619e:	2301      	movne	r3, #1
 80161a0:	2300      	moveq	r3, #0
 80161a2:	b2db      	uxtb	r3, r3
 80161a4:	e000      	b.n	80161a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80161a6:	2300      	movs	r3, #0
}
 80161a8:	4618      	mov	r0, r3
 80161aa:	3730      	adds	r7, #48	@ 0x30
 80161ac:	46bd      	mov	sp, r7
 80161ae:	bd80      	pop	{r7, pc}
 80161b0:	0801d6a0 	.word	0x0801d6a0
 80161b4:	0801d784 	.word	0x0801d784
 80161b8:	0801d6e8 	.word	0x0801d6e8
 80161bc:	0801d7a4 	.word	0x0801d7a4
 80161c0:	0801d7dc 	.word	0x0801d7dc
 80161c4:	0801d7ec 	.word	0x0801d7ec

080161c8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80161c8:	b580      	push	{r7, lr}
 80161ca:	b08e      	sub	sp, #56	@ 0x38
 80161cc:	af00      	add	r7, sp, #0
 80161ce:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	685b      	ldr	r3, [r3, #4]
 80161d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80161d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80161d8:	781b      	ldrb	r3, [r3, #0]
 80161da:	f003 030f 	and.w	r3, r3, #15
 80161de:	b2db      	uxtb	r3, r3
 80161e0:	009b      	lsls	r3, r3, #2
 80161e2:	b2db      	uxtb	r3, r3
 80161e4:	2b14      	cmp	r3, #20
 80161e6:	f040 8171 	bne.w	80164cc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80161ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80161ec:	88db      	ldrh	r3, [r3, #6]
 80161ee:	b29b      	uxth	r3, r3
 80161f0:	4618      	mov	r0, r3
 80161f2:	f7f3 f921 	bl	8009438 <lwip_htons>
 80161f6:	4603      	mov	r3, r0
 80161f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80161fc:	b29b      	uxth	r3, r3
 80161fe:	00db      	lsls	r3, r3, #3
 8016200:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016204:	885b      	ldrh	r3, [r3, #2]
 8016206:	b29b      	uxth	r3, r3
 8016208:	4618      	mov	r0, r3
 801620a:	f7f3 f915 	bl	8009438 <lwip_htons>
 801620e:	4603      	mov	r3, r0
 8016210:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016214:	781b      	ldrb	r3, [r3, #0]
 8016216:	f003 030f 	and.w	r3, r3, #15
 801621a:	b2db      	uxtb	r3, r3
 801621c:	009b      	lsls	r3, r3, #2
 801621e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8016222:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016226:	b29b      	uxth	r3, r3
 8016228:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801622a:	429a      	cmp	r2, r3
 801622c:	f0c0 8150 	bcc.w	80164d0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016230:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016234:	b29b      	uxth	r3, r3
 8016236:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8016238:	1ad3      	subs	r3, r2, r3
 801623a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801623c:	6878      	ldr	r0, [r7, #4]
 801623e:	f7f4 fe19 	bl	800ae74 <pbuf_clen>
 8016242:	4603      	mov	r3, r0
 8016244:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016246:	4b8c      	ldr	r3, [pc, #560]	@ (8016478 <ip4_reass+0x2b0>)
 8016248:	881b      	ldrh	r3, [r3, #0]
 801624a:	461a      	mov	r2, r3
 801624c:	8c3b      	ldrh	r3, [r7, #32]
 801624e:	4413      	add	r3, r2
 8016250:	2b0a      	cmp	r3, #10
 8016252:	dd10      	ble.n	8016276 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016254:	8c3b      	ldrh	r3, [r7, #32]
 8016256:	4619      	mov	r1, r3
 8016258:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801625a:	f7ff fd81 	bl	8015d60 <ip_reass_remove_oldest_datagram>
 801625e:	4603      	mov	r3, r0
 8016260:	2b00      	cmp	r3, #0
 8016262:	f000 8137 	beq.w	80164d4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016266:	4b84      	ldr	r3, [pc, #528]	@ (8016478 <ip4_reass+0x2b0>)
 8016268:	881b      	ldrh	r3, [r3, #0]
 801626a:	461a      	mov	r2, r3
 801626c:	8c3b      	ldrh	r3, [r7, #32]
 801626e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016270:	2b0a      	cmp	r3, #10
 8016272:	f300 812f 	bgt.w	80164d4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016276:	4b81      	ldr	r3, [pc, #516]	@ (801647c <ip4_reass+0x2b4>)
 8016278:	681b      	ldr	r3, [r3, #0]
 801627a:	633b      	str	r3, [r7, #48]	@ 0x30
 801627c:	e015      	b.n	80162aa <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801627e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016280:	695a      	ldr	r2, [r3, #20]
 8016282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016284:	68db      	ldr	r3, [r3, #12]
 8016286:	429a      	cmp	r2, r3
 8016288:	d10c      	bne.n	80162a4 <ip4_reass+0xdc>
 801628a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801628c:	699a      	ldr	r2, [r3, #24]
 801628e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016290:	691b      	ldr	r3, [r3, #16]
 8016292:	429a      	cmp	r2, r3
 8016294:	d106      	bne.n	80162a4 <ip4_reass+0xdc>
 8016296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016298:	899a      	ldrh	r2, [r3, #12]
 801629a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801629c:	889b      	ldrh	r3, [r3, #4]
 801629e:	b29b      	uxth	r3, r3
 80162a0:	429a      	cmp	r2, r3
 80162a2:	d006      	beq.n	80162b2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80162a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80162aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d1e6      	bne.n	801627e <ip4_reass+0xb6>
 80162b0:	e000      	b.n	80162b4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80162b2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80162b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d109      	bne.n	80162ce <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80162ba:	8c3b      	ldrh	r3, [r7, #32]
 80162bc:	4619      	mov	r1, r3
 80162be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80162c0:	f7ff fdb0 	bl	8015e24 <ip_reass_enqueue_new_datagram>
 80162c4:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80162c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d11c      	bne.n	8016306 <ip4_reass+0x13e>
      goto nullreturn;
 80162cc:	e105      	b.n	80164da <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80162ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162d0:	88db      	ldrh	r3, [r3, #6]
 80162d2:	b29b      	uxth	r3, r3
 80162d4:	4618      	mov	r0, r3
 80162d6:	f7f3 f8af 	bl	8009438 <lwip_htons>
 80162da:	4603      	mov	r3, r0
 80162dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d110      	bne.n	8016306 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80162e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162e6:	89db      	ldrh	r3, [r3, #14]
 80162e8:	4618      	mov	r0, r3
 80162ea:	f7f3 f8a5 	bl	8009438 <lwip_htons>
 80162ee:	4603      	mov	r3, r0
 80162f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d006      	beq.n	8016306 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80162f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162fa:	3308      	adds	r3, #8
 80162fc:	2214      	movs	r2, #20
 80162fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016300:	4618      	mov	r0, r3
 8016302:	f000 feb0 	bl	8017066 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016308:	88db      	ldrh	r3, [r3, #6]
 801630a:	b29b      	uxth	r3, r3
 801630c:	f003 0320 	and.w	r3, r3, #32
 8016310:	2b00      	cmp	r3, #0
 8016312:	bf0c      	ite	eq
 8016314:	2301      	moveq	r3, #1
 8016316:	2300      	movne	r3, #0
 8016318:	b2db      	uxtb	r3, r3
 801631a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801631c:	69fb      	ldr	r3, [r7, #28]
 801631e:	2b00      	cmp	r3, #0
 8016320:	d00e      	beq.n	8016340 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016322:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8016324:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016326:	4413      	add	r3, r2
 8016328:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801632a:	8b7a      	ldrh	r2, [r7, #26]
 801632c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801632e:	429a      	cmp	r2, r3
 8016330:	f0c0 80a0 	bcc.w	8016474 <ip4_reass+0x2ac>
 8016334:	8b7b      	ldrh	r3, [r7, #26]
 8016336:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801633a:	4293      	cmp	r3, r2
 801633c:	f200 809a 	bhi.w	8016474 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016340:	69fa      	ldr	r2, [r7, #28]
 8016342:	6879      	ldr	r1, [r7, #4]
 8016344:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016346:	f7ff fdd5 	bl	8015ef4 <ip_reass_chain_frag_into_datagram_and_validate>
 801634a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801634c:	697b      	ldr	r3, [r7, #20]
 801634e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8016352:	f000 809b 	beq.w	801648c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016356:	4b48      	ldr	r3, [pc, #288]	@ (8016478 <ip4_reass+0x2b0>)
 8016358:	881a      	ldrh	r2, [r3, #0]
 801635a:	8c3b      	ldrh	r3, [r7, #32]
 801635c:	4413      	add	r3, r2
 801635e:	b29a      	uxth	r2, r3
 8016360:	4b45      	ldr	r3, [pc, #276]	@ (8016478 <ip4_reass+0x2b0>)
 8016362:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016364:	69fb      	ldr	r3, [r7, #28]
 8016366:	2b00      	cmp	r3, #0
 8016368:	d00d      	beq.n	8016386 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801636a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801636c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801636e:	4413      	add	r3, r2
 8016370:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016374:	8a7a      	ldrh	r2, [r7, #18]
 8016376:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801637a:	7f9b      	ldrb	r3, [r3, #30]
 801637c:	f043 0301 	orr.w	r3, r3, #1
 8016380:	b2da      	uxtb	r2, r3
 8016382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016384:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016386:	697b      	ldr	r3, [r7, #20]
 8016388:	2b01      	cmp	r3, #1
 801638a:	d171      	bne.n	8016470 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801638c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801638e:	8b9b      	ldrh	r3, [r3, #28]
 8016390:	3314      	adds	r3, #20
 8016392:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016396:	685b      	ldr	r3, [r3, #4]
 8016398:	685b      	ldr	r3, [r3, #4]
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801639e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163a0:	685b      	ldr	r3, [r3, #4]
 80163a2:	685b      	ldr	r3, [r3, #4]
 80163a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80163a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163a8:	3308      	adds	r3, #8
 80163aa:	2214      	movs	r2, #20
 80163ac:	4619      	mov	r1, r3
 80163ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80163b0:	f000 fe59 	bl	8017066 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80163b4:	8a3b      	ldrh	r3, [r7, #16]
 80163b6:	4618      	mov	r0, r3
 80163b8:	f7f3 f83e 	bl	8009438 <lwip_htons>
 80163bc:	4603      	mov	r3, r0
 80163be:	461a      	mov	r2, r3
 80163c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163c2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80163c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163c6:	2200      	movs	r2, #0
 80163c8:	719a      	strb	r2, [r3, #6]
 80163ca:	2200      	movs	r2, #0
 80163cc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80163ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163d0:	2200      	movs	r2, #0
 80163d2:	729a      	strb	r2, [r3, #10]
 80163d4:	2200      	movs	r2, #0
 80163d6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80163d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163da:	685b      	ldr	r3, [r3, #4]
 80163dc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80163de:	e00d      	b.n	80163fc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80163e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163e2:	685b      	ldr	r3, [r3, #4]
 80163e4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80163e6:	2114      	movs	r1, #20
 80163e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80163ea:	f7f4 fc15 	bl	800ac18 <pbuf_remove_header>
      pbuf_cat(p, r);
 80163ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80163f0:	6878      	ldr	r0, [r7, #4]
 80163f2:	f7f4 fd79 	bl	800aee8 <pbuf_cat>
      r = iprh->next_pbuf;
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (r != NULL) {
 80163fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d1ee      	bne.n	80163e0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016402:	4b1e      	ldr	r3, [pc, #120]	@ (801647c <ip4_reass+0x2b4>)
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016408:	429a      	cmp	r2, r3
 801640a:	d102      	bne.n	8016412 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801640c:	2300      	movs	r3, #0
 801640e:	637b      	str	r3, [r7, #52]	@ 0x34
 8016410:	e010      	b.n	8016434 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016412:	4b1a      	ldr	r3, [pc, #104]	@ (801647c <ip4_reass+0x2b4>)
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	637b      	str	r3, [r7, #52]	@ 0x34
 8016418:	e007      	b.n	801642a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801641a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016420:	429a      	cmp	r2, r3
 8016422:	d006      	beq.n	8016432 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	637b      	str	r3, [r7, #52]	@ 0x34
 801642a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801642c:	2b00      	cmp	r3, #0
 801642e:	d1f4      	bne.n	801641a <ip4_reass+0x252>
 8016430:	e000      	b.n	8016434 <ip4_reass+0x26c>
          break;
 8016432:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016434:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016436:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016438:	f7ff fd2e 	bl	8015e98 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801643c:	6878      	ldr	r0, [r7, #4]
 801643e:	f7f4 fd19 	bl	800ae74 <pbuf_clen>
 8016442:	4603      	mov	r3, r0
 8016444:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016446:	4b0c      	ldr	r3, [pc, #48]	@ (8016478 <ip4_reass+0x2b0>)
 8016448:	881b      	ldrh	r3, [r3, #0]
 801644a:	8c3a      	ldrh	r2, [r7, #32]
 801644c:	429a      	cmp	r2, r3
 801644e:	d906      	bls.n	801645e <ip4_reass+0x296>
 8016450:	4b0b      	ldr	r3, [pc, #44]	@ (8016480 <ip4_reass+0x2b8>)
 8016452:	f240 229b 	movw	r2, #667	@ 0x29b
 8016456:	490b      	ldr	r1, [pc, #44]	@ (8016484 <ip4_reass+0x2bc>)
 8016458:	480b      	ldr	r0, [pc, #44]	@ (8016488 <ip4_reass+0x2c0>)
 801645a:	f000 fc2f 	bl	8016cbc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801645e:	4b06      	ldr	r3, [pc, #24]	@ (8016478 <ip4_reass+0x2b0>)
 8016460:	881a      	ldrh	r2, [r3, #0]
 8016462:	8c3b      	ldrh	r3, [r7, #32]
 8016464:	1ad3      	subs	r3, r2, r3
 8016466:	b29a      	uxth	r2, r3
 8016468:	4b03      	ldr	r3, [pc, #12]	@ (8016478 <ip4_reass+0x2b0>)
 801646a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	e038      	b.n	80164e2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016470:	2300      	movs	r3, #0
 8016472:	e036      	b.n	80164e2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8016474:	bf00      	nop
 8016476:	e00a      	b.n	801648e <ip4_reass+0x2c6>
 8016478:	24003480 	.word	0x24003480
 801647c:	2400347c 	.word	0x2400347c
 8016480:	0801d6a0 	.word	0x0801d6a0
 8016484:	0801d810 	.word	0x0801d810
 8016488:	0801d6e8 	.word	0x0801d6e8
    goto nullreturn_ipr;
 801648c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801648e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016490:	2b00      	cmp	r3, #0
 8016492:	d106      	bne.n	80164a2 <ip4_reass+0x2da>
 8016494:	4b15      	ldr	r3, [pc, #84]	@ (80164ec <ip4_reass+0x324>)
 8016496:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801649a:	4915      	ldr	r1, [pc, #84]	@ (80164f0 <ip4_reass+0x328>)
 801649c:	4815      	ldr	r0, [pc, #84]	@ (80164f4 <ip4_reass+0x32c>)
 801649e:	f000 fc0d 	bl	8016cbc <iprintf>
  if (ipr->p == NULL) {
 80164a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164a4:	685b      	ldr	r3, [r3, #4]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d116      	bne.n	80164d8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80164aa:	4b13      	ldr	r3, [pc, #76]	@ (80164f8 <ip4_reass+0x330>)
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80164b0:	429a      	cmp	r2, r3
 80164b2:	d006      	beq.n	80164c2 <ip4_reass+0x2fa>
 80164b4:	4b0d      	ldr	r3, [pc, #52]	@ (80164ec <ip4_reass+0x324>)
 80164b6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80164ba:	4910      	ldr	r1, [pc, #64]	@ (80164fc <ip4_reass+0x334>)
 80164bc:	480d      	ldr	r0, [pc, #52]	@ (80164f4 <ip4_reass+0x32c>)
 80164be:	f000 fbfd 	bl	8016cbc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80164c2:	2100      	movs	r1, #0
 80164c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80164c6:	f7ff fce7 	bl	8015e98 <ip_reass_dequeue_datagram>
 80164ca:	e006      	b.n	80164da <ip4_reass+0x312>
    goto nullreturn;
 80164cc:	bf00      	nop
 80164ce:	e004      	b.n	80164da <ip4_reass+0x312>
    goto nullreturn;
 80164d0:	bf00      	nop
 80164d2:	e002      	b.n	80164da <ip4_reass+0x312>
      goto nullreturn;
 80164d4:	bf00      	nop
 80164d6:	e000      	b.n	80164da <ip4_reass+0x312>
  }

nullreturn:
 80164d8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80164da:	6878      	ldr	r0, [r7, #4]
 80164dc:	f7f4 fc2a 	bl	800ad34 <pbuf_free>
  return NULL;
 80164e0:	2300      	movs	r3, #0
}
 80164e2:	4618      	mov	r0, r3
 80164e4:	3738      	adds	r7, #56	@ 0x38
 80164e6:	46bd      	mov	sp, r7
 80164e8:	bd80      	pop	{r7, pc}
 80164ea:	bf00      	nop
 80164ec:	0801d6a0 	.word	0x0801d6a0
 80164f0:	0801d82c 	.word	0x0801d82c
 80164f4:	0801d6e8 	.word	0x0801d6e8
 80164f8:	2400347c 	.word	0x2400347c
 80164fc:	0801d838 	.word	0x0801d838

08016500 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016500:	b580      	push	{r7, lr}
 8016502:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016504:	2005      	movs	r0, #5
 8016506:	f7f3 fcd7 	bl	8009eb8 <memp_malloc>
 801650a:	4603      	mov	r3, r0
}
 801650c:	4618      	mov	r0, r3
 801650e:	bd80      	pop	{r7, pc}

08016510 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016510:	b580      	push	{r7, lr}
 8016512:	b082      	sub	sp, #8
 8016514:	af00      	add	r7, sp, #0
 8016516:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	2b00      	cmp	r3, #0
 801651c:	d106      	bne.n	801652c <ip_frag_free_pbuf_custom_ref+0x1c>
 801651e:	4b07      	ldr	r3, [pc, #28]	@ (801653c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016520:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8016524:	4906      	ldr	r1, [pc, #24]	@ (8016540 <ip_frag_free_pbuf_custom_ref+0x30>)
 8016526:	4807      	ldr	r0, [pc, #28]	@ (8016544 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016528:	f000 fbc8 	bl	8016cbc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801652c:	6879      	ldr	r1, [r7, #4]
 801652e:	2005      	movs	r0, #5
 8016530:	f7f3 fd32 	bl	8009f98 <memp_free>
}
 8016534:	bf00      	nop
 8016536:	3708      	adds	r7, #8
 8016538:	46bd      	mov	sp, r7
 801653a:	bd80      	pop	{r7, pc}
 801653c:	0801d6a0 	.word	0x0801d6a0
 8016540:	0801d858 	.word	0x0801d858
 8016544:	0801d6e8 	.word	0x0801d6e8

08016548 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016548:	b580      	push	{r7, lr}
 801654a:	b084      	sub	sp, #16
 801654c:	af00      	add	r7, sp, #0
 801654e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	2b00      	cmp	r3, #0
 8016558:	d106      	bne.n	8016568 <ipfrag_free_pbuf_custom+0x20>
 801655a:	4b11      	ldr	r3, [pc, #68]	@ (80165a0 <ipfrag_free_pbuf_custom+0x58>)
 801655c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8016560:	4910      	ldr	r1, [pc, #64]	@ (80165a4 <ipfrag_free_pbuf_custom+0x5c>)
 8016562:	4811      	ldr	r0, [pc, #68]	@ (80165a8 <ipfrag_free_pbuf_custom+0x60>)
 8016564:	f000 fbaa 	bl	8016cbc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016568:	68fa      	ldr	r2, [r7, #12]
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	429a      	cmp	r2, r3
 801656e:	d006      	beq.n	801657e <ipfrag_free_pbuf_custom+0x36>
 8016570:	4b0b      	ldr	r3, [pc, #44]	@ (80165a0 <ipfrag_free_pbuf_custom+0x58>)
 8016572:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8016576:	490d      	ldr	r1, [pc, #52]	@ (80165ac <ipfrag_free_pbuf_custom+0x64>)
 8016578:	480b      	ldr	r0, [pc, #44]	@ (80165a8 <ipfrag_free_pbuf_custom+0x60>)
 801657a:	f000 fb9f 	bl	8016cbc <iprintf>
  if (pcr->original != NULL) {
 801657e:	68fb      	ldr	r3, [r7, #12]
 8016580:	695b      	ldr	r3, [r3, #20]
 8016582:	2b00      	cmp	r3, #0
 8016584:	d004      	beq.n	8016590 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	695b      	ldr	r3, [r3, #20]
 801658a:	4618      	mov	r0, r3
 801658c:	f7f4 fbd2 	bl	800ad34 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016590:	68f8      	ldr	r0, [r7, #12]
 8016592:	f7ff ffbd 	bl	8016510 <ip_frag_free_pbuf_custom_ref>
}
 8016596:	bf00      	nop
 8016598:	3710      	adds	r7, #16
 801659a:	46bd      	mov	sp, r7
 801659c:	bd80      	pop	{r7, pc}
 801659e:	bf00      	nop
 80165a0:	0801d6a0 	.word	0x0801d6a0
 80165a4:	0801d864 	.word	0x0801d864
 80165a8:	0801d6e8 	.word	0x0801d6e8
 80165ac:	0801d870 	.word	0x0801d870

080165b0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80165b0:	b580      	push	{r7, lr}
 80165b2:	b094      	sub	sp, #80	@ 0x50
 80165b4:	af02      	add	r7, sp, #8
 80165b6:	60f8      	str	r0, [r7, #12]
 80165b8:	60b9      	str	r1, [r7, #8]
 80165ba:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80165bc:	2300      	movs	r3, #0
 80165be:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80165c2:	68bb      	ldr	r3, [r7, #8]
 80165c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80165c6:	3b14      	subs	r3, #20
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	da00      	bge.n	80165ce <ip4_frag+0x1e>
 80165cc:	3307      	adds	r3, #7
 80165ce:	10db      	asrs	r3, r3, #3
 80165d0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80165d2:	2314      	movs	r3, #20
 80165d4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80165d6:	68fb      	ldr	r3, [r7, #12]
 80165d8:	685b      	ldr	r3, [r3, #4]
 80165da:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80165dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80165de:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80165e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165e2:	781b      	ldrb	r3, [r3, #0]
 80165e4:	f003 030f 	and.w	r3, r3, #15
 80165e8:	b2db      	uxtb	r3, r3
 80165ea:	009b      	lsls	r3, r3, #2
 80165ec:	b2db      	uxtb	r3, r3
 80165ee:	2b14      	cmp	r3, #20
 80165f0:	d002      	beq.n	80165f8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80165f2:	f06f 0305 	mvn.w	r3, #5
 80165f6:	e110      	b.n	801681a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	895b      	ldrh	r3, [r3, #10]
 80165fc:	2b13      	cmp	r3, #19
 80165fe:	d809      	bhi.n	8016614 <ip4_frag+0x64>
 8016600:	4b88      	ldr	r3, [pc, #544]	@ (8016824 <ip4_frag+0x274>)
 8016602:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8016606:	4988      	ldr	r1, [pc, #544]	@ (8016828 <ip4_frag+0x278>)
 8016608:	4888      	ldr	r0, [pc, #544]	@ (801682c <ip4_frag+0x27c>)
 801660a:	f000 fb57 	bl	8016cbc <iprintf>
 801660e:	f06f 0305 	mvn.w	r3, #5
 8016612:	e102      	b.n	801681a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016616:	88db      	ldrh	r3, [r3, #6]
 8016618:	b29b      	uxth	r3, r3
 801661a:	4618      	mov	r0, r3
 801661c:	f7f2 ff0c 	bl	8009438 <lwip_htons>
 8016620:	4603      	mov	r3, r0
 8016622:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8016624:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016626:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801662a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801662e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016630:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8016634:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	891b      	ldrh	r3, [r3, #8]
 801663a:	3b14      	subs	r3, #20
 801663c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8016640:	e0e1      	b.n	8016806 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016642:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016644:	00db      	lsls	r3, r3, #3
 8016646:	b29b      	uxth	r3, r3
 8016648:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801664c:	4293      	cmp	r3, r2
 801664e:	bf28      	it	cs
 8016650:	4613      	movcs	r3, r2
 8016652:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016654:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016658:	2114      	movs	r1, #20
 801665a:	200e      	movs	r0, #14
 801665c:	f7f4 f83e 	bl	800a6dc <pbuf_alloc>
 8016660:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8016662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016664:	2b00      	cmp	r3, #0
 8016666:	f000 80d5 	beq.w	8016814 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801666a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801666c:	895b      	ldrh	r3, [r3, #10]
 801666e:	2b13      	cmp	r3, #19
 8016670:	d806      	bhi.n	8016680 <ip4_frag+0xd0>
 8016672:	4b6c      	ldr	r3, [pc, #432]	@ (8016824 <ip4_frag+0x274>)
 8016674:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8016678:	496d      	ldr	r1, [pc, #436]	@ (8016830 <ip4_frag+0x280>)
 801667a:	486c      	ldr	r0, [pc, #432]	@ (801682c <ip4_frag+0x27c>)
 801667c:	f000 fb1e 	bl	8016cbc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016682:	685b      	ldr	r3, [r3, #4]
 8016684:	2214      	movs	r2, #20
 8016686:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016688:	4618      	mov	r0, r3
 801668a:	f000 fcec 	bl	8017066 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801668e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016690:	685b      	ldr	r3, [r3, #4]
 8016692:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8016694:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016696:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801669a:	e064      	b.n	8016766 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	895a      	ldrh	r2, [r3, #10]
 80166a0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80166a2:	1ad3      	subs	r3, r2, r3
 80166a4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	895b      	ldrh	r3, [r3, #10]
 80166aa:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80166ac:	429a      	cmp	r2, r3
 80166ae:	d906      	bls.n	80166be <ip4_frag+0x10e>
 80166b0:	4b5c      	ldr	r3, [pc, #368]	@ (8016824 <ip4_frag+0x274>)
 80166b2:	f240 322d 	movw	r2, #813	@ 0x32d
 80166b6:	495f      	ldr	r1, [pc, #380]	@ (8016834 <ip4_frag+0x284>)
 80166b8:	485c      	ldr	r0, [pc, #368]	@ (801682c <ip4_frag+0x27c>)
 80166ba:	f000 faff 	bl	8016cbc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80166be:	8bfa      	ldrh	r2, [r7, #30]
 80166c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80166c4:	4293      	cmp	r3, r2
 80166c6:	bf28      	it	cs
 80166c8:	4613      	movcs	r3, r2
 80166ca:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80166ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d105      	bne.n	80166e2 <ip4_frag+0x132>
        poff = 0;
 80166d6:	2300      	movs	r3, #0
 80166d8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80166da:	68fb      	ldr	r3, [r7, #12]
 80166dc:	681b      	ldr	r3, [r3, #0]
 80166de:	60fb      	str	r3, [r7, #12]
        continue;
 80166e0:	e041      	b.n	8016766 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80166e2:	f7ff ff0d 	bl	8016500 <ip_frag_alloc_pbuf_custom_ref>
 80166e6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80166e8:	69bb      	ldr	r3, [r7, #24]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d103      	bne.n	80166f6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80166ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80166f0:	f7f4 fb20 	bl	800ad34 <pbuf_free>
        goto memerr;
 80166f4:	e08f      	b.n	8016816 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80166f6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80166f8:	68fb      	ldr	r3, [r7, #12]
 80166fa:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80166fc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80166fe:	4413      	add	r3, r2
 8016700:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8016704:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8016708:	9201      	str	r2, [sp, #4]
 801670a:	9300      	str	r3, [sp, #0]
 801670c:	4603      	mov	r3, r0
 801670e:	2241      	movs	r2, #65	@ 0x41
 8016710:	2000      	movs	r0, #0
 8016712:	f7f4 f92d 	bl	800a970 <pbuf_alloced_custom>
 8016716:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016718:	697b      	ldr	r3, [r7, #20]
 801671a:	2b00      	cmp	r3, #0
 801671c:	d106      	bne.n	801672c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801671e:	69b8      	ldr	r0, [r7, #24]
 8016720:	f7ff fef6 	bl	8016510 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016724:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016726:	f7f4 fb05 	bl	800ad34 <pbuf_free>
        goto memerr;
 801672a:	e074      	b.n	8016816 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801672c:	68f8      	ldr	r0, [r7, #12]
 801672e:	f7f4 fbb9 	bl	800aea4 <pbuf_ref>
      pcr->original = p;
 8016732:	69bb      	ldr	r3, [r7, #24]
 8016734:	68fa      	ldr	r2, [r7, #12]
 8016736:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016738:	69bb      	ldr	r3, [r7, #24]
 801673a:	4a3f      	ldr	r2, [pc, #252]	@ (8016838 <ip4_frag+0x288>)
 801673c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801673e:	6979      	ldr	r1, [r7, #20]
 8016740:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016742:	f7f4 fbd1 	bl	800aee8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016746:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801674a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801674e:	1ad3      	subs	r3, r2, r3
 8016750:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8016754:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016758:	2b00      	cmp	r3, #0
 801675a:	d004      	beq.n	8016766 <ip4_frag+0x1b6>
        poff = 0;
 801675c:	2300      	movs	r3, #0
 801675e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	681b      	ldr	r3, [r3, #0]
 8016764:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016766:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801676a:	2b00      	cmp	r3, #0
 801676c:	d196      	bne.n	801669c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801676e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8016770:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016774:	4413      	add	r3, r2
 8016776:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016778:	68bb      	ldr	r3, [r7, #8]
 801677a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801677c:	f1a3 0213 	sub.w	r2, r3, #19
 8016780:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016784:	429a      	cmp	r2, r3
 8016786:	bfcc      	ite	gt
 8016788:	2301      	movgt	r3, #1
 801678a:	2300      	movle	r3, #0
 801678c:	b2db      	uxtb	r3, r3
 801678e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016790:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016794:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016798:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801679a:	6a3b      	ldr	r3, [r7, #32]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d002      	beq.n	80167a6 <ip4_frag+0x1f6>
 80167a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d003      	beq.n	80167ae <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80167a6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80167a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80167ac:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80167ae:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80167b0:	4618      	mov	r0, r3
 80167b2:	f7f2 fe41 	bl	8009438 <lwip_htons>
 80167b6:	4603      	mov	r3, r0
 80167b8:	461a      	mov	r2, r3
 80167ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167bc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80167be:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80167c0:	3314      	adds	r3, #20
 80167c2:	b29b      	uxth	r3, r3
 80167c4:	4618      	mov	r0, r3
 80167c6:	f7f2 fe37 	bl	8009438 <lwip_htons>
 80167ca:	4603      	mov	r3, r0
 80167cc:	461a      	mov	r2, r3
 80167ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167d0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80167d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167d4:	2200      	movs	r2, #0
 80167d6:	729a      	strb	r2, [r3, #10]
 80167d8:	2200      	movs	r2, #0
 80167da:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80167dc:	68bb      	ldr	r3, [r7, #8]
 80167de:	695b      	ldr	r3, [r3, #20]
 80167e0:	687a      	ldr	r2, [r7, #4]
 80167e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80167e4:	68b8      	ldr	r0, [r7, #8]
 80167e6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80167e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80167ea:	f7f4 faa3 	bl	800ad34 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80167ee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80167f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80167f4:	1ad3      	subs	r3, r2, r3
 80167f6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80167fa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80167fe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016800:	4413      	add	r3, r2
 8016802:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8016806:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801680a:	2b00      	cmp	r3, #0
 801680c:	f47f af19 	bne.w	8016642 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016810:	2300      	movs	r3, #0
 8016812:	e002      	b.n	801681a <ip4_frag+0x26a>
      goto memerr;
 8016814:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016816:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801681a:	4618      	mov	r0, r3
 801681c:	3748      	adds	r7, #72	@ 0x48
 801681e:	46bd      	mov	sp, r7
 8016820:	bd80      	pop	{r7, pc}
 8016822:	bf00      	nop
 8016824:	0801d6a0 	.word	0x0801d6a0
 8016828:	0801d87c 	.word	0x0801d87c
 801682c:	0801d6e8 	.word	0x0801d6e8
 8016830:	0801d898 	.word	0x0801d898
 8016834:	0801d8b8 	.word	0x0801d8b8
 8016838:	08016549 	.word	0x08016549

0801683c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801683c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016840:	b096      	sub	sp, #88	@ 0x58
 8016842:	af0a      	add	r7, sp, #40	@ 0x28
 8016844:	61f8      	str	r0, [r7, #28]
 8016846:	61b9      	str	r1, [r7, #24]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016848:	230e      	movs	r3, #14
 801684a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801684c:	69fb      	ldr	r3, [r7, #28]
 801684e:	895b      	ldrh	r3, [r3, #10]
 8016850:	2b0e      	cmp	r3, #14
 8016852:	f240 80c8 	bls.w	80169e6 <ethernet_input+0x1aa>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016856:	69fb      	ldr	r3, [r7, #28]
 8016858:	7bdb      	ldrb	r3, [r3, #15]
 801685a:	2b00      	cmp	r3, #0
 801685c:	d106      	bne.n	801686c <ethernet_input+0x30>
    p->if_idx = netif_get_index(netif);
 801685e:	69bb      	ldr	r3, [r7, #24]
 8016860:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8016864:	3301      	adds	r3, #1
 8016866:	b2da      	uxtb	r2, r3
 8016868:	69fb      	ldr	r3, [r7, #28]
 801686a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801686c:	69fb      	ldr	r3, [r7, #28]
 801686e:	685b      	ldr	r3, [r3, #4]
 8016870:	62bb      	str	r3, [r7, #40]	@ 0x28
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
 8016872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016874:	781b      	ldrb	r3, [r3, #0]
 8016876:	4698      	mov	r8, r3
 8016878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801687a:	785b      	ldrb	r3, [r3, #1]
 801687c:	4699      	mov	r9, r3
 801687e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016880:	789b      	ldrb	r3, [r3, #2]
 8016882:	469a      	mov	sl, r3
 8016884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016886:	78db      	ldrb	r3, [r3, #3]
 8016888:	461c      	mov	r4, r3
 801688a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801688c:	791b      	ldrb	r3, [r3, #4]
 801688e:	461d      	mov	r5, r3
 8016890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016892:	795b      	ldrb	r3, [r3, #5]
 8016894:	461e      	mov	r6, r3
 8016896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016898:	799b      	ldrb	r3, [r3, #6]
 801689a:	617b      	str	r3, [r7, #20]
 801689c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801689e:	79db      	ldrb	r3, [r3, #7]
 80168a0:	613b      	str	r3, [r7, #16]
 80168a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168a4:	7a1b      	ldrb	r3, [r3, #8]
 80168a6:	60fb      	str	r3, [r7, #12]
 80168a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168aa:	7a5b      	ldrb	r3, [r3, #9]
 80168ac:	60bb      	str	r3, [r7, #8]
 80168ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168b0:	7a9b      	ldrb	r3, [r3, #10]
 80168b2:	607b      	str	r3, [r7, #4]
 80168b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168b6:	7adb      	ldrb	r3, [r3, #11]
 80168b8:	603b      	str	r3, [r7, #0]
 80168ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168bc:	899b      	ldrh	r3, [r3, #12]
 80168be:	b29b      	uxth	r3, r3
 80168c0:	4618      	mov	r0, r3
 80168c2:	f7f2 fdb9 	bl	8009438 <lwip_htons>
 80168c6:	4603      	mov	r3, r0
 80168c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80168ca:	683a      	ldr	r2, [r7, #0]
 80168cc:	9208      	str	r2, [sp, #32]
 80168ce:	687a      	ldr	r2, [r7, #4]
 80168d0:	9207      	str	r2, [sp, #28]
 80168d2:	68ba      	ldr	r2, [r7, #8]
 80168d4:	9206      	str	r2, [sp, #24]
 80168d6:	68fa      	ldr	r2, [r7, #12]
 80168d8:	9205      	str	r2, [sp, #20]
 80168da:	693a      	ldr	r2, [r7, #16]
 80168dc:	9204      	str	r2, [sp, #16]
 80168de:	697b      	ldr	r3, [r7, #20]
 80168e0:	9303      	str	r3, [sp, #12]
 80168e2:	9602      	str	r6, [sp, #8]
 80168e4:	9501      	str	r5, [sp, #4]
 80168e6:	9400      	str	r4, [sp, #0]
 80168e8:	4653      	mov	r3, sl
 80168ea:	464a      	mov	r2, r9
 80168ec:	4641      	mov	r1, r8
 80168ee:	4845      	ldr	r0, [pc, #276]	@ (8016a04 <ethernet_input+0x1c8>)
 80168f0:	f000 f9e4 	bl	8016cbc <iprintf>
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80168f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168f6:	7b1a      	ldrb	r2, [r3, #12]
 80168f8:	7b5b      	ldrb	r3, [r3, #13]
 80168fa:	021b      	lsls	r3, r3, #8
 80168fc:	4313      	orrs	r3, r2
 80168fe:	84fb      	strh	r3, [r7, #38]	@ 0x26

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016902:	781b      	ldrb	r3, [r3, #0]
 8016904:	f003 0301 	and.w	r3, r3, #1
 8016908:	2b00      	cmp	r3, #0
 801690a:	d023      	beq.n	8016954 <ethernet_input+0x118>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801690c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801690e:	781b      	ldrb	r3, [r3, #0]
 8016910:	2b01      	cmp	r3, #1
 8016912:	d10f      	bne.n	8016934 <ethernet_input+0xf8>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016916:	785b      	ldrb	r3, [r3, #1]
 8016918:	2b00      	cmp	r3, #0
 801691a:	d11b      	bne.n	8016954 <ethernet_input+0x118>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801691c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801691e:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016920:	2b5e      	cmp	r3, #94	@ 0x5e
 8016922:	d117      	bne.n	8016954 <ethernet_input+0x118>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016924:	69fb      	ldr	r3, [r7, #28]
 8016926:	7b5b      	ldrb	r3, [r3, #13]
 8016928:	f043 0310 	orr.w	r3, r3, #16
 801692c:	b2da      	uxtb	r2, r3
 801692e:	69fb      	ldr	r3, [r7, #28]
 8016930:	735a      	strb	r2, [r3, #13]
 8016932:	e00f      	b.n	8016954 <ethernet_input+0x118>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016936:	2206      	movs	r2, #6
 8016938:	4933      	ldr	r1, [pc, #204]	@ (8016a08 <ethernet_input+0x1cc>)
 801693a:	4618      	mov	r0, r3
 801693c:	f000 fb0e 	bl	8016f5c <memcmp>
 8016940:	4603      	mov	r3, r0
 8016942:	2b00      	cmp	r3, #0
 8016944:	d106      	bne.n	8016954 <ethernet_input+0x118>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016946:	69fb      	ldr	r3, [r7, #28]
 8016948:	7b5b      	ldrb	r3, [r3, #13]
 801694a:	f043 0308 	orr.w	r3, r3, #8
 801694e:	b2da      	uxtb	r2, r3
 8016950:	69fb      	ldr	r3, [r7, #28]
 8016952:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016954:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016956:	2b08      	cmp	r3, #8
 8016958:	d003      	beq.n	8016962 <ethernet_input+0x126>
 801695a:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801695e:	d020      	beq.n	80169a2 <ethernet_input+0x166>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016960:	e046      	b.n	80169f0 <ethernet_input+0x1b4>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016962:	69bb      	ldr	r3, [r7, #24]
 8016964:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8016968:	f003 0308 	and.w	r3, r3, #8
 801696c:	2b00      	cmp	r3, #0
 801696e:	d03c      	beq.n	80169ea <ethernet_input+0x1ae>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016970:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8016972:	4619      	mov	r1, r3
 8016974:	69f8      	ldr	r0, [r7, #28]
 8016976:	f7f4 f94f 	bl	800ac18 <pbuf_remove_header>
 801697a:	4603      	mov	r3, r0
 801697c:	2b00      	cmp	r3, #0
 801697e:	d00b      	beq.n	8016998 <ethernet_input+0x15c>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 8016980:	69fb      	ldr	r3, [r7, #28]
 8016982:	891b      	ldrh	r3, [r3, #8]
 8016984:	4619      	mov	r1, r3
 8016986:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8016988:	461a      	mov	r2, r3
 801698a:	4820      	ldr	r0, [pc, #128]	@ (8016a0c <ethernet_input+0x1d0>)
 801698c:	f000 f996 	bl	8016cbc <iprintf>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
 8016990:	481f      	ldr	r0, [pc, #124]	@ (8016a10 <ethernet_input+0x1d4>)
 8016992:	f000 f993 	bl	8016cbc <iprintf>
        goto free_and_return;
 8016996:	e02b      	b.n	80169f0 <ethernet_input+0x1b4>
        ip4_input(p, netif);
 8016998:	69b9      	ldr	r1, [r7, #24]
 801699a:	69f8      	ldr	r0, [r7, #28]
 801699c:	f7fe fd2c 	bl	80153f8 <ip4_input>
      break;
 80169a0:	e01f      	b.n	80169e2 <ethernet_input+0x1a6>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80169a2:	69bb      	ldr	r3, [r7, #24]
 80169a4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80169a8:	f003 0308 	and.w	r3, r3, #8
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d01e      	beq.n	80169ee <ethernet_input+0x1b2>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80169b0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80169b2:	4619      	mov	r1, r3
 80169b4:	69f8      	ldr	r0, [r7, #28]
 80169b6:	f7f4 f92f 	bl	800ac18 <pbuf_remove_header>
 80169ba:	4603      	mov	r3, r0
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d00b      	beq.n	80169d8 <ethernet_input+0x19c>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 80169c0:	69fb      	ldr	r3, [r7, #28]
 80169c2:	891b      	ldrh	r3, [r3, #8]
 80169c4:	4619      	mov	r1, r3
 80169c6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80169c8:	461a      	mov	r2, r3
 80169ca:	4812      	ldr	r0, [pc, #72]	@ (8016a14 <ethernet_input+0x1d8>)
 80169cc:	f000 f976 	bl	8016cbc <iprintf>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
 80169d0:	480f      	ldr	r0, [pc, #60]	@ (8016a10 <ethernet_input+0x1d4>)
 80169d2:	f000 f973 	bl	8016cbc <iprintf>
        goto free_and_return;
 80169d6:	e00b      	b.n	80169f0 <ethernet_input+0x1b4>
        etharp_input(p, netif);
 80169d8:	69b9      	ldr	r1, [r7, #24]
 80169da:	69f8      	ldr	r0, [r7, #28]
 80169dc:	f7fd fd4a 	bl	8014474 <etharp_input>
      break;
 80169e0:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80169e2:	2300      	movs	r3, #0
 80169e4:	e008      	b.n	80169f8 <ethernet_input+0x1bc>
    goto free_and_return;
 80169e6:	bf00      	nop
 80169e8:	e002      	b.n	80169f0 <ethernet_input+0x1b4>
        goto free_and_return;
 80169ea:	bf00      	nop
 80169ec:	e000      	b.n	80169f0 <ethernet_input+0x1b4>
        goto free_and_return;
 80169ee:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80169f0:	69f8      	ldr	r0, [r7, #28]
 80169f2:	f7f4 f99f 	bl	800ad34 <pbuf_free>
  return ERR_OK;
 80169f6:	2300      	movs	r3, #0
}
 80169f8:	4618      	mov	r0, r3
 80169fa:	3730      	adds	r7, #48	@ 0x30
 80169fc:	46bd      	mov	sp, r7
 80169fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a02:	bf00      	nop
 8016a04:	0801d8c8 	.word	0x0801d8c8
 8016a08:	0801dc6c 	.word	0x0801dc6c
 8016a0c:	0801d944 	.word	0x0801d944
 8016a10:	0801d980 	.word	0x0801d980
 8016a14:	0801d9a4 	.word	0x0801d9a4

08016a18 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016a18:	b580      	push	{r7, lr}
 8016a1a:	b086      	sub	sp, #24
 8016a1c:	af00      	add	r7, sp, #0
 8016a1e:	60f8      	str	r0, [r7, #12]
 8016a20:	60b9      	str	r1, [r7, #8]
 8016a22:	607a      	str	r2, [r7, #4]
 8016a24:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016a26:	8c3b      	ldrh	r3, [r7, #32]
 8016a28:	4618      	mov	r0, r3
 8016a2a:	f7f2 fd05 	bl	8009438 <lwip_htons>
 8016a2e:	4603      	mov	r3, r0
 8016a30:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016a32:	210e      	movs	r1, #14
 8016a34:	68b8      	ldr	r0, [r7, #8]
 8016a36:	f7f4 f8df 	bl	800abf8 <pbuf_add_header>
 8016a3a:	4603      	mov	r3, r0
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d129      	bne.n	8016a94 <ethernet_output+0x7c>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016a40:	68bb      	ldr	r3, [r7, #8]
 8016a42:	685b      	ldr	r3, [r3, #4]
 8016a44:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016a46:	693b      	ldr	r3, [r7, #16]
 8016a48:	8afa      	ldrh	r2, [r7, #22]
 8016a4a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016a4c:	693b      	ldr	r3, [r7, #16]
 8016a4e:	2206      	movs	r2, #6
 8016a50:	6839      	ldr	r1, [r7, #0]
 8016a52:	4618      	mov	r0, r3
 8016a54:	f000 fb07 	bl	8017066 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016a58:	693b      	ldr	r3, [r7, #16]
 8016a5a:	3306      	adds	r3, #6
 8016a5c:	2206      	movs	r2, #6
 8016a5e:	6879      	ldr	r1, [r7, #4]
 8016a60:	4618      	mov	r0, r3
 8016a62:	f000 fb00 	bl	8017066 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016a66:	68fb      	ldr	r3, [r7, #12]
 8016a68:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016a6c:	2b06      	cmp	r3, #6
 8016a6e:	d006      	beq.n	8016a7e <ethernet_output+0x66>
 8016a70:	4b0d      	ldr	r3, [pc, #52]	@ (8016aa8 <ethernet_output+0x90>)
 8016a72:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8016a76:	490d      	ldr	r1, [pc, #52]	@ (8016aac <ethernet_output+0x94>)
 8016a78:	480d      	ldr	r0, [pc, #52]	@ (8016ab0 <ethernet_output+0x98>)
 8016a7a:	f000 f91f 	bl	8016cbc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
 8016a7e:	68b9      	ldr	r1, [r7, #8]
 8016a80:	480c      	ldr	r0, [pc, #48]	@ (8016ab4 <ethernet_output+0x9c>)
 8016a82:	f000 f91b 	bl	8016cbc <iprintf>
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	699b      	ldr	r3, [r3, #24]
 8016a8a:	68b9      	ldr	r1, [r7, #8]
 8016a8c:	68f8      	ldr	r0, [r7, #12]
 8016a8e:	4798      	blx	r3
 8016a90:	4603      	mov	r3, r0
 8016a92:	e005      	b.n	8016aa0 <ethernet_output+0x88>
      goto pbuf_header_failed;
 8016a94:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 8016a96:	4808      	ldr	r0, [pc, #32]	@ (8016ab8 <ethernet_output+0xa0>)
 8016a98:	f000 f980 	bl	8016d9c <puts>
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016a9c:	f06f 0301 	mvn.w	r3, #1
}
 8016aa0:	4618      	mov	r0, r3
 8016aa2:	3718      	adds	r7, #24
 8016aa4:	46bd      	mov	sp, r7
 8016aa6:	bd80      	pop	{r7, pc}
 8016aa8:	0801d9e8 	.word	0x0801d9e8
 8016aac:	0801da20 	.word	0x0801da20
 8016ab0:	0801da54 	.word	0x0801da54
 8016ab4:	0801da7c 	.word	0x0801da7c
 8016ab8:	0801daa0 	.word	0x0801daa0

08016abc <rand>:
 8016abc:	4b16      	ldr	r3, [pc, #88]	@ (8016b18 <rand+0x5c>)
 8016abe:	b510      	push	{r4, lr}
 8016ac0:	681c      	ldr	r4, [r3, #0]
 8016ac2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016ac4:	b9b3      	cbnz	r3, 8016af4 <rand+0x38>
 8016ac6:	2018      	movs	r0, #24
 8016ac8:	f000 fb44 	bl	8017154 <malloc>
 8016acc:	4602      	mov	r2, r0
 8016ace:	6320      	str	r0, [r4, #48]	@ 0x30
 8016ad0:	b920      	cbnz	r0, 8016adc <rand+0x20>
 8016ad2:	4b12      	ldr	r3, [pc, #72]	@ (8016b1c <rand+0x60>)
 8016ad4:	4812      	ldr	r0, [pc, #72]	@ (8016b20 <rand+0x64>)
 8016ad6:	2152      	movs	r1, #82	@ 0x52
 8016ad8:	f000 fad4 	bl	8017084 <__assert_func>
 8016adc:	4911      	ldr	r1, [pc, #68]	@ (8016b24 <rand+0x68>)
 8016ade:	4b12      	ldr	r3, [pc, #72]	@ (8016b28 <rand+0x6c>)
 8016ae0:	e9c0 1300 	strd	r1, r3, [r0]
 8016ae4:	4b11      	ldr	r3, [pc, #68]	@ (8016b2c <rand+0x70>)
 8016ae6:	6083      	str	r3, [r0, #8]
 8016ae8:	230b      	movs	r3, #11
 8016aea:	8183      	strh	r3, [r0, #12]
 8016aec:	2100      	movs	r1, #0
 8016aee:	2001      	movs	r0, #1
 8016af0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016af4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016af6:	480e      	ldr	r0, [pc, #56]	@ (8016b30 <rand+0x74>)
 8016af8:	690b      	ldr	r3, [r1, #16]
 8016afa:	694c      	ldr	r4, [r1, #20]
 8016afc:	4a0d      	ldr	r2, [pc, #52]	@ (8016b34 <rand+0x78>)
 8016afe:	4358      	muls	r0, r3
 8016b00:	fb02 0004 	mla	r0, r2, r4, r0
 8016b04:	fba3 3202 	umull	r3, r2, r3, r2
 8016b08:	3301      	adds	r3, #1
 8016b0a:	eb40 0002 	adc.w	r0, r0, r2
 8016b0e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016b12:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8016b16:	bd10      	pop	{r4, pc}
 8016b18:	24000098 	.word	0x24000098
 8016b1c:	0801dc7a 	.word	0x0801dc7a
 8016b20:	0801dc91 	.word	0x0801dc91
 8016b24:	abcd330e 	.word	0xabcd330e
 8016b28:	e66d1234 	.word	0xe66d1234
 8016b2c:	0005deec 	.word	0x0005deec
 8016b30:	5851f42d 	.word	0x5851f42d
 8016b34:	4c957f2d 	.word	0x4c957f2d

08016b38 <std>:
 8016b38:	2300      	movs	r3, #0
 8016b3a:	b510      	push	{r4, lr}
 8016b3c:	4604      	mov	r4, r0
 8016b3e:	e9c0 3300 	strd	r3, r3, [r0]
 8016b42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016b46:	6083      	str	r3, [r0, #8]
 8016b48:	8181      	strh	r1, [r0, #12]
 8016b4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8016b4c:	81c2      	strh	r2, [r0, #14]
 8016b4e:	6183      	str	r3, [r0, #24]
 8016b50:	4619      	mov	r1, r3
 8016b52:	2208      	movs	r2, #8
 8016b54:	305c      	adds	r0, #92	@ 0x5c
 8016b56:	f000 fa11 	bl	8016f7c <memset>
 8016b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8016b90 <std+0x58>)
 8016b5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8016b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8016b94 <std+0x5c>)
 8016b60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016b62:	4b0d      	ldr	r3, [pc, #52]	@ (8016b98 <std+0x60>)
 8016b64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016b66:	4b0d      	ldr	r3, [pc, #52]	@ (8016b9c <std+0x64>)
 8016b68:	6323      	str	r3, [r4, #48]	@ 0x30
 8016b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8016ba0 <std+0x68>)
 8016b6c:	6224      	str	r4, [r4, #32]
 8016b6e:	429c      	cmp	r4, r3
 8016b70:	d006      	beq.n	8016b80 <std+0x48>
 8016b72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016b76:	4294      	cmp	r4, r2
 8016b78:	d002      	beq.n	8016b80 <std+0x48>
 8016b7a:	33d0      	adds	r3, #208	@ 0xd0
 8016b7c:	429c      	cmp	r4, r3
 8016b7e:	d105      	bne.n	8016b8c <std+0x54>
 8016b80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b88:	f000 ba6a 	b.w	8017060 <__retarget_lock_init_recursive>
 8016b8c:	bd10      	pop	{r4, pc}
 8016b8e:	bf00      	nop
 8016b90:	08016dad 	.word	0x08016dad
 8016b94:	08016dcf 	.word	0x08016dcf
 8016b98:	08016e07 	.word	0x08016e07
 8016b9c:	08016e2b 	.word	0x08016e2b
 8016ba0:	24003484 	.word	0x24003484

08016ba4 <stdio_exit_handler>:
 8016ba4:	4a02      	ldr	r2, [pc, #8]	@ (8016bb0 <stdio_exit_handler+0xc>)
 8016ba6:	4903      	ldr	r1, [pc, #12]	@ (8016bb4 <stdio_exit_handler+0x10>)
 8016ba8:	4803      	ldr	r0, [pc, #12]	@ (8016bb8 <stdio_exit_handler+0x14>)
 8016baa:	f000 b869 	b.w	8016c80 <_fwalk_sglue>
 8016bae:	bf00      	nop
 8016bb0:	2400008c 	.word	0x2400008c
 8016bb4:	08017969 	.word	0x08017969
 8016bb8:	2400009c 	.word	0x2400009c

08016bbc <cleanup_stdio>:
 8016bbc:	6841      	ldr	r1, [r0, #4]
 8016bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8016bf0 <cleanup_stdio+0x34>)
 8016bc0:	4299      	cmp	r1, r3
 8016bc2:	b510      	push	{r4, lr}
 8016bc4:	4604      	mov	r4, r0
 8016bc6:	d001      	beq.n	8016bcc <cleanup_stdio+0x10>
 8016bc8:	f000 fece 	bl	8017968 <_fflush_r>
 8016bcc:	68a1      	ldr	r1, [r4, #8]
 8016bce:	4b09      	ldr	r3, [pc, #36]	@ (8016bf4 <cleanup_stdio+0x38>)
 8016bd0:	4299      	cmp	r1, r3
 8016bd2:	d002      	beq.n	8016bda <cleanup_stdio+0x1e>
 8016bd4:	4620      	mov	r0, r4
 8016bd6:	f000 fec7 	bl	8017968 <_fflush_r>
 8016bda:	68e1      	ldr	r1, [r4, #12]
 8016bdc:	4b06      	ldr	r3, [pc, #24]	@ (8016bf8 <cleanup_stdio+0x3c>)
 8016bde:	4299      	cmp	r1, r3
 8016be0:	d004      	beq.n	8016bec <cleanup_stdio+0x30>
 8016be2:	4620      	mov	r0, r4
 8016be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016be8:	f000 bebe 	b.w	8017968 <_fflush_r>
 8016bec:	bd10      	pop	{r4, pc}
 8016bee:	bf00      	nop
 8016bf0:	24003484 	.word	0x24003484
 8016bf4:	240034ec 	.word	0x240034ec
 8016bf8:	24003554 	.word	0x24003554

08016bfc <global_stdio_init.part.0>:
 8016bfc:	b510      	push	{r4, lr}
 8016bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8016c2c <global_stdio_init.part.0+0x30>)
 8016c00:	4c0b      	ldr	r4, [pc, #44]	@ (8016c30 <global_stdio_init.part.0+0x34>)
 8016c02:	4a0c      	ldr	r2, [pc, #48]	@ (8016c34 <global_stdio_init.part.0+0x38>)
 8016c04:	601a      	str	r2, [r3, #0]
 8016c06:	4620      	mov	r0, r4
 8016c08:	2200      	movs	r2, #0
 8016c0a:	2104      	movs	r1, #4
 8016c0c:	f7ff ff94 	bl	8016b38 <std>
 8016c10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016c14:	2201      	movs	r2, #1
 8016c16:	2109      	movs	r1, #9
 8016c18:	f7ff ff8e 	bl	8016b38 <std>
 8016c1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016c20:	2202      	movs	r2, #2
 8016c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c26:	2112      	movs	r1, #18
 8016c28:	f7ff bf86 	b.w	8016b38 <std>
 8016c2c:	240035bc 	.word	0x240035bc
 8016c30:	24003484 	.word	0x24003484
 8016c34:	08016ba5 	.word	0x08016ba5

08016c38 <__sfp_lock_acquire>:
 8016c38:	4801      	ldr	r0, [pc, #4]	@ (8016c40 <__sfp_lock_acquire+0x8>)
 8016c3a:	f000 ba12 	b.w	8017062 <__retarget_lock_acquire_recursive>
 8016c3e:	bf00      	nop
 8016c40:	240035c5 	.word	0x240035c5

08016c44 <__sfp_lock_release>:
 8016c44:	4801      	ldr	r0, [pc, #4]	@ (8016c4c <__sfp_lock_release+0x8>)
 8016c46:	f000 ba0d 	b.w	8017064 <__retarget_lock_release_recursive>
 8016c4a:	bf00      	nop
 8016c4c:	240035c5 	.word	0x240035c5

08016c50 <__sinit>:
 8016c50:	b510      	push	{r4, lr}
 8016c52:	4604      	mov	r4, r0
 8016c54:	f7ff fff0 	bl	8016c38 <__sfp_lock_acquire>
 8016c58:	6a23      	ldr	r3, [r4, #32]
 8016c5a:	b11b      	cbz	r3, 8016c64 <__sinit+0x14>
 8016c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c60:	f7ff bff0 	b.w	8016c44 <__sfp_lock_release>
 8016c64:	4b04      	ldr	r3, [pc, #16]	@ (8016c78 <__sinit+0x28>)
 8016c66:	6223      	str	r3, [r4, #32]
 8016c68:	4b04      	ldr	r3, [pc, #16]	@ (8016c7c <__sinit+0x2c>)
 8016c6a:	681b      	ldr	r3, [r3, #0]
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d1f5      	bne.n	8016c5c <__sinit+0xc>
 8016c70:	f7ff ffc4 	bl	8016bfc <global_stdio_init.part.0>
 8016c74:	e7f2      	b.n	8016c5c <__sinit+0xc>
 8016c76:	bf00      	nop
 8016c78:	08016bbd 	.word	0x08016bbd
 8016c7c:	240035bc 	.word	0x240035bc

08016c80 <_fwalk_sglue>:
 8016c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016c84:	4607      	mov	r7, r0
 8016c86:	4688      	mov	r8, r1
 8016c88:	4614      	mov	r4, r2
 8016c8a:	2600      	movs	r6, #0
 8016c8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016c90:	f1b9 0901 	subs.w	r9, r9, #1
 8016c94:	d505      	bpl.n	8016ca2 <_fwalk_sglue+0x22>
 8016c96:	6824      	ldr	r4, [r4, #0]
 8016c98:	2c00      	cmp	r4, #0
 8016c9a:	d1f7      	bne.n	8016c8c <_fwalk_sglue+0xc>
 8016c9c:	4630      	mov	r0, r6
 8016c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ca2:	89ab      	ldrh	r3, [r5, #12]
 8016ca4:	2b01      	cmp	r3, #1
 8016ca6:	d907      	bls.n	8016cb8 <_fwalk_sglue+0x38>
 8016ca8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016cac:	3301      	adds	r3, #1
 8016cae:	d003      	beq.n	8016cb8 <_fwalk_sglue+0x38>
 8016cb0:	4629      	mov	r1, r5
 8016cb2:	4638      	mov	r0, r7
 8016cb4:	47c0      	blx	r8
 8016cb6:	4306      	orrs	r6, r0
 8016cb8:	3568      	adds	r5, #104	@ 0x68
 8016cba:	e7e9      	b.n	8016c90 <_fwalk_sglue+0x10>

08016cbc <iprintf>:
 8016cbc:	b40f      	push	{r0, r1, r2, r3}
 8016cbe:	b507      	push	{r0, r1, r2, lr}
 8016cc0:	4906      	ldr	r1, [pc, #24]	@ (8016cdc <iprintf+0x20>)
 8016cc2:	ab04      	add	r3, sp, #16
 8016cc4:	6808      	ldr	r0, [r1, #0]
 8016cc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8016cca:	6881      	ldr	r1, [r0, #8]
 8016ccc:	9301      	str	r3, [sp, #4]
 8016cce:	f000 fb21 	bl	8017314 <_vfiprintf_r>
 8016cd2:	b003      	add	sp, #12
 8016cd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8016cd8:	b004      	add	sp, #16
 8016cda:	4770      	bx	lr
 8016cdc:	24000098 	.word	0x24000098

08016ce0 <putchar>:
 8016ce0:	4b02      	ldr	r3, [pc, #8]	@ (8016cec <putchar+0xc>)
 8016ce2:	4601      	mov	r1, r0
 8016ce4:	6818      	ldr	r0, [r3, #0]
 8016ce6:	6882      	ldr	r2, [r0, #8]
 8016ce8:	f000 beda 	b.w	8017aa0 <_putc_r>
 8016cec:	24000098 	.word	0x24000098

08016cf0 <_puts_r>:
 8016cf0:	6a03      	ldr	r3, [r0, #32]
 8016cf2:	b570      	push	{r4, r5, r6, lr}
 8016cf4:	6884      	ldr	r4, [r0, #8]
 8016cf6:	4605      	mov	r5, r0
 8016cf8:	460e      	mov	r6, r1
 8016cfa:	b90b      	cbnz	r3, 8016d00 <_puts_r+0x10>
 8016cfc:	f7ff ffa8 	bl	8016c50 <__sinit>
 8016d00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016d02:	07db      	lsls	r3, r3, #31
 8016d04:	d405      	bmi.n	8016d12 <_puts_r+0x22>
 8016d06:	89a3      	ldrh	r3, [r4, #12]
 8016d08:	0598      	lsls	r0, r3, #22
 8016d0a:	d402      	bmi.n	8016d12 <_puts_r+0x22>
 8016d0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016d0e:	f000 f9a8 	bl	8017062 <__retarget_lock_acquire_recursive>
 8016d12:	89a3      	ldrh	r3, [r4, #12]
 8016d14:	0719      	lsls	r1, r3, #28
 8016d16:	d502      	bpl.n	8016d1e <_puts_r+0x2e>
 8016d18:	6923      	ldr	r3, [r4, #16]
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d135      	bne.n	8016d8a <_puts_r+0x9a>
 8016d1e:	4621      	mov	r1, r4
 8016d20:	4628      	mov	r0, r5
 8016d22:	f000 f8c5 	bl	8016eb0 <__swsetup_r>
 8016d26:	b380      	cbz	r0, 8016d8a <_puts_r+0x9a>
 8016d28:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8016d2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016d2e:	07da      	lsls	r2, r3, #31
 8016d30:	d405      	bmi.n	8016d3e <_puts_r+0x4e>
 8016d32:	89a3      	ldrh	r3, [r4, #12]
 8016d34:	059b      	lsls	r3, r3, #22
 8016d36:	d402      	bmi.n	8016d3e <_puts_r+0x4e>
 8016d38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016d3a:	f000 f993 	bl	8017064 <__retarget_lock_release_recursive>
 8016d3e:	4628      	mov	r0, r5
 8016d40:	bd70      	pop	{r4, r5, r6, pc}
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	da04      	bge.n	8016d50 <_puts_r+0x60>
 8016d46:	69a2      	ldr	r2, [r4, #24]
 8016d48:	429a      	cmp	r2, r3
 8016d4a:	dc17      	bgt.n	8016d7c <_puts_r+0x8c>
 8016d4c:	290a      	cmp	r1, #10
 8016d4e:	d015      	beq.n	8016d7c <_puts_r+0x8c>
 8016d50:	6823      	ldr	r3, [r4, #0]
 8016d52:	1c5a      	adds	r2, r3, #1
 8016d54:	6022      	str	r2, [r4, #0]
 8016d56:	7019      	strb	r1, [r3, #0]
 8016d58:	68a3      	ldr	r3, [r4, #8]
 8016d5a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016d5e:	3b01      	subs	r3, #1
 8016d60:	60a3      	str	r3, [r4, #8]
 8016d62:	2900      	cmp	r1, #0
 8016d64:	d1ed      	bne.n	8016d42 <_puts_r+0x52>
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	da11      	bge.n	8016d8e <_puts_r+0x9e>
 8016d6a:	4622      	mov	r2, r4
 8016d6c:	210a      	movs	r1, #10
 8016d6e:	4628      	mov	r0, r5
 8016d70:	f000 f85f 	bl	8016e32 <__swbuf_r>
 8016d74:	3001      	adds	r0, #1
 8016d76:	d0d7      	beq.n	8016d28 <_puts_r+0x38>
 8016d78:	250a      	movs	r5, #10
 8016d7a:	e7d7      	b.n	8016d2c <_puts_r+0x3c>
 8016d7c:	4622      	mov	r2, r4
 8016d7e:	4628      	mov	r0, r5
 8016d80:	f000 f857 	bl	8016e32 <__swbuf_r>
 8016d84:	3001      	adds	r0, #1
 8016d86:	d1e7      	bne.n	8016d58 <_puts_r+0x68>
 8016d88:	e7ce      	b.n	8016d28 <_puts_r+0x38>
 8016d8a:	3e01      	subs	r6, #1
 8016d8c:	e7e4      	b.n	8016d58 <_puts_r+0x68>
 8016d8e:	6823      	ldr	r3, [r4, #0]
 8016d90:	1c5a      	adds	r2, r3, #1
 8016d92:	6022      	str	r2, [r4, #0]
 8016d94:	220a      	movs	r2, #10
 8016d96:	701a      	strb	r2, [r3, #0]
 8016d98:	e7ee      	b.n	8016d78 <_puts_r+0x88>
	...

08016d9c <puts>:
 8016d9c:	4b02      	ldr	r3, [pc, #8]	@ (8016da8 <puts+0xc>)
 8016d9e:	4601      	mov	r1, r0
 8016da0:	6818      	ldr	r0, [r3, #0]
 8016da2:	f7ff bfa5 	b.w	8016cf0 <_puts_r>
 8016da6:	bf00      	nop
 8016da8:	24000098 	.word	0x24000098

08016dac <__sread>:
 8016dac:	b510      	push	{r4, lr}
 8016dae:	460c      	mov	r4, r1
 8016db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016db4:	f000 f90c 	bl	8016fd0 <_read_r>
 8016db8:	2800      	cmp	r0, #0
 8016dba:	bfab      	itete	ge
 8016dbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016dbe:	89a3      	ldrhlt	r3, [r4, #12]
 8016dc0:	181b      	addge	r3, r3, r0
 8016dc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016dc6:	bfac      	ite	ge
 8016dc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016dca:	81a3      	strhlt	r3, [r4, #12]
 8016dcc:	bd10      	pop	{r4, pc}

08016dce <__swrite>:
 8016dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dd2:	461f      	mov	r7, r3
 8016dd4:	898b      	ldrh	r3, [r1, #12]
 8016dd6:	05db      	lsls	r3, r3, #23
 8016dd8:	4605      	mov	r5, r0
 8016dda:	460c      	mov	r4, r1
 8016ddc:	4616      	mov	r6, r2
 8016dde:	d505      	bpl.n	8016dec <__swrite+0x1e>
 8016de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016de4:	2302      	movs	r3, #2
 8016de6:	2200      	movs	r2, #0
 8016de8:	f000 f8e0 	bl	8016fac <_lseek_r>
 8016dec:	89a3      	ldrh	r3, [r4, #12]
 8016dee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016df2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016df6:	81a3      	strh	r3, [r4, #12]
 8016df8:	4632      	mov	r2, r6
 8016dfa:	463b      	mov	r3, r7
 8016dfc:	4628      	mov	r0, r5
 8016dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e02:	f000 b8f7 	b.w	8016ff4 <_write_r>

08016e06 <__sseek>:
 8016e06:	b510      	push	{r4, lr}
 8016e08:	460c      	mov	r4, r1
 8016e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e0e:	f000 f8cd 	bl	8016fac <_lseek_r>
 8016e12:	1c43      	adds	r3, r0, #1
 8016e14:	89a3      	ldrh	r3, [r4, #12]
 8016e16:	bf15      	itete	ne
 8016e18:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016e1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016e1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016e22:	81a3      	strheq	r3, [r4, #12]
 8016e24:	bf18      	it	ne
 8016e26:	81a3      	strhne	r3, [r4, #12]
 8016e28:	bd10      	pop	{r4, pc}

08016e2a <__sclose>:
 8016e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e2e:	f000 b8ad 	b.w	8016f8c <_close_r>

08016e32 <__swbuf_r>:
 8016e32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e34:	460e      	mov	r6, r1
 8016e36:	4614      	mov	r4, r2
 8016e38:	4605      	mov	r5, r0
 8016e3a:	b118      	cbz	r0, 8016e44 <__swbuf_r+0x12>
 8016e3c:	6a03      	ldr	r3, [r0, #32]
 8016e3e:	b90b      	cbnz	r3, 8016e44 <__swbuf_r+0x12>
 8016e40:	f7ff ff06 	bl	8016c50 <__sinit>
 8016e44:	69a3      	ldr	r3, [r4, #24]
 8016e46:	60a3      	str	r3, [r4, #8]
 8016e48:	89a3      	ldrh	r3, [r4, #12]
 8016e4a:	071a      	lsls	r2, r3, #28
 8016e4c:	d501      	bpl.n	8016e52 <__swbuf_r+0x20>
 8016e4e:	6923      	ldr	r3, [r4, #16]
 8016e50:	b943      	cbnz	r3, 8016e64 <__swbuf_r+0x32>
 8016e52:	4621      	mov	r1, r4
 8016e54:	4628      	mov	r0, r5
 8016e56:	f000 f82b 	bl	8016eb0 <__swsetup_r>
 8016e5a:	b118      	cbz	r0, 8016e64 <__swbuf_r+0x32>
 8016e5c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8016e60:	4638      	mov	r0, r7
 8016e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e64:	6823      	ldr	r3, [r4, #0]
 8016e66:	6922      	ldr	r2, [r4, #16]
 8016e68:	1a98      	subs	r0, r3, r2
 8016e6a:	6963      	ldr	r3, [r4, #20]
 8016e6c:	b2f6      	uxtb	r6, r6
 8016e6e:	4283      	cmp	r3, r0
 8016e70:	4637      	mov	r7, r6
 8016e72:	dc05      	bgt.n	8016e80 <__swbuf_r+0x4e>
 8016e74:	4621      	mov	r1, r4
 8016e76:	4628      	mov	r0, r5
 8016e78:	f000 fd76 	bl	8017968 <_fflush_r>
 8016e7c:	2800      	cmp	r0, #0
 8016e7e:	d1ed      	bne.n	8016e5c <__swbuf_r+0x2a>
 8016e80:	68a3      	ldr	r3, [r4, #8]
 8016e82:	3b01      	subs	r3, #1
 8016e84:	60a3      	str	r3, [r4, #8]
 8016e86:	6823      	ldr	r3, [r4, #0]
 8016e88:	1c5a      	adds	r2, r3, #1
 8016e8a:	6022      	str	r2, [r4, #0]
 8016e8c:	701e      	strb	r6, [r3, #0]
 8016e8e:	6962      	ldr	r2, [r4, #20]
 8016e90:	1c43      	adds	r3, r0, #1
 8016e92:	429a      	cmp	r2, r3
 8016e94:	d004      	beq.n	8016ea0 <__swbuf_r+0x6e>
 8016e96:	89a3      	ldrh	r3, [r4, #12]
 8016e98:	07db      	lsls	r3, r3, #31
 8016e9a:	d5e1      	bpl.n	8016e60 <__swbuf_r+0x2e>
 8016e9c:	2e0a      	cmp	r6, #10
 8016e9e:	d1df      	bne.n	8016e60 <__swbuf_r+0x2e>
 8016ea0:	4621      	mov	r1, r4
 8016ea2:	4628      	mov	r0, r5
 8016ea4:	f000 fd60 	bl	8017968 <_fflush_r>
 8016ea8:	2800      	cmp	r0, #0
 8016eaa:	d0d9      	beq.n	8016e60 <__swbuf_r+0x2e>
 8016eac:	e7d6      	b.n	8016e5c <__swbuf_r+0x2a>
	...

08016eb0 <__swsetup_r>:
 8016eb0:	b538      	push	{r3, r4, r5, lr}
 8016eb2:	4b29      	ldr	r3, [pc, #164]	@ (8016f58 <__swsetup_r+0xa8>)
 8016eb4:	4605      	mov	r5, r0
 8016eb6:	6818      	ldr	r0, [r3, #0]
 8016eb8:	460c      	mov	r4, r1
 8016eba:	b118      	cbz	r0, 8016ec4 <__swsetup_r+0x14>
 8016ebc:	6a03      	ldr	r3, [r0, #32]
 8016ebe:	b90b      	cbnz	r3, 8016ec4 <__swsetup_r+0x14>
 8016ec0:	f7ff fec6 	bl	8016c50 <__sinit>
 8016ec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016ec8:	0719      	lsls	r1, r3, #28
 8016eca:	d422      	bmi.n	8016f12 <__swsetup_r+0x62>
 8016ecc:	06da      	lsls	r2, r3, #27
 8016ece:	d407      	bmi.n	8016ee0 <__swsetup_r+0x30>
 8016ed0:	2209      	movs	r2, #9
 8016ed2:	602a      	str	r2, [r5, #0]
 8016ed4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016ed8:	81a3      	strh	r3, [r4, #12]
 8016eda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016ede:	e033      	b.n	8016f48 <__swsetup_r+0x98>
 8016ee0:	0758      	lsls	r0, r3, #29
 8016ee2:	d512      	bpl.n	8016f0a <__swsetup_r+0x5a>
 8016ee4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016ee6:	b141      	cbz	r1, 8016efa <__swsetup_r+0x4a>
 8016ee8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016eec:	4299      	cmp	r1, r3
 8016eee:	d002      	beq.n	8016ef6 <__swsetup_r+0x46>
 8016ef0:	4628      	mov	r0, r5
 8016ef2:	f000 f8e5 	bl	80170c0 <_free_r>
 8016ef6:	2300      	movs	r3, #0
 8016ef8:	6363      	str	r3, [r4, #52]	@ 0x34
 8016efa:	89a3      	ldrh	r3, [r4, #12]
 8016efc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016f00:	81a3      	strh	r3, [r4, #12]
 8016f02:	2300      	movs	r3, #0
 8016f04:	6063      	str	r3, [r4, #4]
 8016f06:	6923      	ldr	r3, [r4, #16]
 8016f08:	6023      	str	r3, [r4, #0]
 8016f0a:	89a3      	ldrh	r3, [r4, #12]
 8016f0c:	f043 0308 	orr.w	r3, r3, #8
 8016f10:	81a3      	strh	r3, [r4, #12]
 8016f12:	6923      	ldr	r3, [r4, #16]
 8016f14:	b94b      	cbnz	r3, 8016f2a <__swsetup_r+0x7a>
 8016f16:	89a3      	ldrh	r3, [r4, #12]
 8016f18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016f1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016f20:	d003      	beq.n	8016f2a <__swsetup_r+0x7a>
 8016f22:	4621      	mov	r1, r4
 8016f24:	4628      	mov	r0, r5
 8016f26:	f000 fd7f 	bl	8017a28 <__smakebuf_r>
 8016f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f2e:	f013 0201 	ands.w	r2, r3, #1
 8016f32:	d00a      	beq.n	8016f4a <__swsetup_r+0x9a>
 8016f34:	2200      	movs	r2, #0
 8016f36:	60a2      	str	r2, [r4, #8]
 8016f38:	6962      	ldr	r2, [r4, #20]
 8016f3a:	4252      	negs	r2, r2
 8016f3c:	61a2      	str	r2, [r4, #24]
 8016f3e:	6922      	ldr	r2, [r4, #16]
 8016f40:	b942      	cbnz	r2, 8016f54 <__swsetup_r+0xa4>
 8016f42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016f46:	d1c5      	bne.n	8016ed4 <__swsetup_r+0x24>
 8016f48:	bd38      	pop	{r3, r4, r5, pc}
 8016f4a:	0799      	lsls	r1, r3, #30
 8016f4c:	bf58      	it	pl
 8016f4e:	6962      	ldrpl	r2, [r4, #20]
 8016f50:	60a2      	str	r2, [r4, #8]
 8016f52:	e7f4      	b.n	8016f3e <__swsetup_r+0x8e>
 8016f54:	2000      	movs	r0, #0
 8016f56:	e7f7      	b.n	8016f48 <__swsetup_r+0x98>
 8016f58:	24000098 	.word	0x24000098

08016f5c <memcmp>:
 8016f5c:	b510      	push	{r4, lr}
 8016f5e:	3901      	subs	r1, #1
 8016f60:	4402      	add	r2, r0
 8016f62:	4290      	cmp	r0, r2
 8016f64:	d101      	bne.n	8016f6a <memcmp+0xe>
 8016f66:	2000      	movs	r0, #0
 8016f68:	e005      	b.n	8016f76 <memcmp+0x1a>
 8016f6a:	7803      	ldrb	r3, [r0, #0]
 8016f6c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016f70:	42a3      	cmp	r3, r4
 8016f72:	d001      	beq.n	8016f78 <memcmp+0x1c>
 8016f74:	1b18      	subs	r0, r3, r4
 8016f76:	bd10      	pop	{r4, pc}
 8016f78:	3001      	adds	r0, #1
 8016f7a:	e7f2      	b.n	8016f62 <memcmp+0x6>

08016f7c <memset>:
 8016f7c:	4402      	add	r2, r0
 8016f7e:	4603      	mov	r3, r0
 8016f80:	4293      	cmp	r3, r2
 8016f82:	d100      	bne.n	8016f86 <memset+0xa>
 8016f84:	4770      	bx	lr
 8016f86:	f803 1b01 	strb.w	r1, [r3], #1
 8016f8a:	e7f9      	b.n	8016f80 <memset+0x4>

08016f8c <_close_r>:
 8016f8c:	b538      	push	{r3, r4, r5, lr}
 8016f8e:	4d06      	ldr	r5, [pc, #24]	@ (8016fa8 <_close_r+0x1c>)
 8016f90:	2300      	movs	r3, #0
 8016f92:	4604      	mov	r4, r0
 8016f94:	4608      	mov	r0, r1
 8016f96:	602b      	str	r3, [r5, #0]
 8016f98:	f7e9 ff20 	bl	8000ddc <_close>
 8016f9c:	1c43      	adds	r3, r0, #1
 8016f9e:	d102      	bne.n	8016fa6 <_close_r+0x1a>
 8016fa0:	682b      	ldr	r3, [r5, #0]
 8016fa2:	b103      	cbz	r3, 8016fa6 <_close_r+0x1a>
 8016fa4:	6023      	str	r3, [r4, #0]
 8016fa6:	bd38      	pop	{r3, r4, r5, pc}
 8016fa8:	240035c0 	.word	0x240035c0

08016fac <_lseek_r>:
 8016fac:	b538      	push	{r3, r4, r5, lr}
 8016fae:	4d07      	ldr	r5, [pc, #28]	@ (8016fcc <_lseek_r+0x20>)
 8016fb0:	4604      	mov	r4, r0
 8016fb2:	4608      	mov	r0, r1
 8016fb4:	4611      	mov	r1, r2
 8016fb6:	2200      	movs	r2, #0
 8016fb8:	602a      	str	r2, [r5, #0]
 8016fba:	461a      	mov	r2, r3
 8016fbc:	f7e9 ff35 	bl	8000e2a <_lseek>
 8016fc0:	1c43      	adds	r3, r0, #1
 8016fc2:	d102      	bne.n	8016fca <_lseek_r+0x1e>
 8016fc4:	682b      	ldr	r3, [r5, #0]
 8016fc6:	b103      	cbz	r3, 8016fca <_lseek_r+0x1e>
 8016fc8:	6023      	str	r3, [r4, #0]
 8016fca:	bd38      	pop	{r3, r4, r5, pc}
 8016fcc:	240035c0 	.word	0x240035c0

08016fd0 <_read_r>:
 8016fd0:	b538      	push	{r3, r4, r5, lr}
 8016fd2:	4d07      	ldr	r5, [pc, #28]	@ (8016ff0 <_read_r+0x20>)
 8016fd4:	4604      	mov	r4, r0
 8016fd6:	4608      	mov	r0, r1
 8016fd8:	4611      	mov	r1, r2
 8016fda:	2200      	movs	r2, #0
 8016fdc:	602a      	str	r2, [r5, #0]
 8016fde:	461a      	mov	r2, r3
 8016fe0:	f7e9 fedf 	bl	8000da2 <_read>
 8016fe4:	1c43      	adds	r3, r0, #1
 8016fe6:	d102      	bne.n	8016fee <_read_r+0x1e>
 8016fe8:	682b      	ldr	r3, [r5, #0]
 8016fea:	b103      	cbz	r3, 8016fee <_read_r+0x1e>
 8016fec:	6023      	str	r3, [r4, #0]
 8016fee:	bd38      	pop	{r3, r4, r5, pc}
 8016ff0:	240035c0 	.word	0x240035c0

08016ff4 <_write_r>:
 8016ff4:	b538      	push	{r3, r4, r5, lr}
 8016ff6:	4d07      	ldr	r5, [pc, #28]	@ (8017014 <_write_r+0x20>)
 8016ff8:	4604      	mov	r4, r0
 8016ffa:	4608      	mov	r0, r1
 8016ffc:	4611      	mov	r1, r2
 8016ffe:	2200      	movs	r2, #0
 8017000:	602a      	str	r2, [r5, #0]
 8017002:	461a      	mov	r2, r3
 8017004:	f7e9 fcdc 	bl	80009c0 <_write>
 8017008:	1c43      	adds	r3, r0, #1
 801700a:	d102      	bne.n	8017012 <_write_r+0x1e>
 801700c:	682b      	ldr	r3, [r5, #0]
 801700e:	b103      	cbz	r3, 8017012 <_write_r+0x1e>
 8017010:	6023      	str	r3, [r4, #0]
 8017012:	bd38      	pop	{r3, r4, r5, pc}
 8017014:	240035c0 	.word	0x240035c0

08017018 <__libc_init_array>:
 8017018:	b570      	push	{r4, r5, r6, lr}
 801701a:	4d0d      	ldr	r5, [pc, #52]	@ (8017050 <__libc_init_array+0x38>)
 801701c:	4c0d      	ldr	r4, [pc, #52]	@ (8017054 <__libc_init_array+0x3c>)
 801701e:	1b64      	subs	r4, r4, r5
 8017020:	10a4      	asrs	r4, r4, #2
 8017022:	2600      	movs	r6, #0
 8017024:	42a6      	cmp	r6, r4
 8017026:	d109      	bne.n	801703c <__libc_init_array+0x24>
 8017028:	4d0b      	ldr	r5, [pc, #44]	@ (8017058 <__libc_init_array+0x40>)
 801702a:	4c0c      	ldr	r4, [pc, #48]	@ (801705c <__libc_init_array+0x44>)
 801702c:	f000 fdea 	bl	8017c04 <_init>
 8017030:	1b64      	subs	r4, r4, r5
 8017032:	10a4      	asrs	r4, r4, #2
 8017034:	2600      	movs	r6, #0
 8017036:	42a6      	cmp	r6, r4
 8017038:	d105      	bne.n	8017046 <__libc_init_array+0x2e>
 801703a:	bd70      	pop	{r4, r5, r6, pc}
 801703c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017040:	4798      	blx	r3
 8017042:	3601      	adds	r6, #1
 8017044:	e7ee      	b.n	8017024 <__libc_init_array+0xc>
 8017046:	f855 3b04 	ldr.w	r3, [r5], #4
 801704a:	4798      	blx	r3
 801704c:	3601      	adds	r6, #1
 801704e:	e7f2      	b.n	8017036 <__libc_init_array+0x1e>
 8017050:	0801dd60 	.word	0x0801dd60
 8017054:	0801dd60 	.word	0x0801dd60
 8017058:	0801dd60 	.word	0x0801dd60
 801705c:	0801dd64 	.word	0x0801dd64

08017060 <__retarget_lock_init_recursive>:
 8017060:	4770      	bx	lr

08017062 <__retarget_lock_acquire_recursive>:
 8017062:	4770      	bx	lr

08017064 <__retarget_lock_release_recursive>:
 8017064:	4770      	bx	lr

08017066 <memcpy>:
 8017066:	440a      	add	r2, r1
 8017068:	4291      	cmp	r1, r2
 801706a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801706e:	d100      	bne.n	8017072 <memcpy+0xc>
 8017070:	4770      	bx	lr
 8017072:	b510      	push	{r4, lr}
 8017074:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017078:	f803 4f01 	strb.w	r4, [r3, #1]!
 801707c:	4291      	cmp	r1, r2
 801707e:	d1f9      	bne.n	8017074 <memcpy+0xe>
 8017080:	bd10      	pop	{r4, pc}
	...

08017084 <__assert_func>:
 8017084:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017086:	4614      	mov	r4, r2
 8017088:	461a      	mov	r2, r3
 801708a:	4b09      	ldr	r3, [pc, #36]	@ (80170b0 <__assert_func+0x2c>)
 801708c:	681b      	ldr	r3, [r3, #0]
 801708e:	4605      	mov	r5, r0
 8017090:	68d8      	ldr	r0, [r3, #12]
 8017092:	b954      	cbnz	r4, 80170aa <__assert_func+0x26>
 8017094:	4b07      	ldr	r3, [pc, #28]	@ (80170b4 <__assert_func+0x30>)
 8017096:	461c      	mov	r4, r3
 8017098:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801709c:	9100      	str	r1, [sp, #0]
 801709e:	462b      	mov	r3, r5
 80170a0:	4905      	ldr	r1, [pc, #20]	@ (80170b8 <__assert_func+0x34>)
 80170a2:	f000 fc89 	bl	80179b8 <fiprintf>
 80170a6:	f000 fd61 	bl	8017b6c <abort>
 80170aa:	4b04      	ldr	r3, [pc, #16]	@ (80170bc <__assert_func+0x38>)
 80170ac:	e7f4      	b.n	8017098 <__assert_func+0x14>
 80170ae:	bf00      	nop
 80170b0:	24000098 	.word	0x24000098
 80170b4:	0801dd24 	.word	0x0801dd24
 80170b8:	0801dcf6 	.word	0x0801dcf6
 80170bc:	0801dce9 	.word	0x0801dce9

080170c0 <_free_r>:
 80170c0:	b538      	push	{r3, r4, r5, lr}
 80170c2:	4605      	mov	r5, r0
 80170c4:	2900      	cmp	r1, #0
 80170c6:	d041      	beq.n	801714c <_free_r+0x8c>
 80170c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80170cc:	1f0c      	subs	r4, r1, #4
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	bfb8      	it	lt
 80170d2:	18e4      	addlt	r4, r4, r3
 80170d4:	f000 f8e8 	bl	80172a8 <__malloc_lock>
 80170d8:	4a1d      	ldr	r2, [pc, #116]	@ (8017150 <_free_r+0x90>)
 80170da:	6813      	ldr	r3, [r2, #0]
 80170dc:	b933      	cbnz	r3, 80170ec <_free_r+0x2c>
 80170de:	6063      	str	r3, [r4, #4]
 80170e0:	6014      	str	r4, [r2, #0]
 80170e2:	4628      	mov	r0, r5
 80170e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80170e8:	f000 b8e4 	b.w	80172b4 <__malloc_unlock>
 80170ec:	42a3      	cmp	r3, r4
 80170ee:	d908      	bls.n	8017102 <_free_r+0x42>
 80170f0:	6820      	ldr	r0, [r4, #0]
 80170f2:	1821      	adds	r1, r4, r0
 80170f4:	428b      	cmp	r3, r1
 80170f6:	bf01      	itttt	eq
 80170f8:	6819      	ldreq	r1, [r3, #0]
 80170fa:	685b      	ldreq	r3, [r3, #4]
 80170fc:	1809      	addeq	r1, r1, r0
 80170fe:	6021      	streq	r1, [r4, #0]
 8017100:	e7ed      	b.n	80170de <_free_r+0x1e>
 8017102:	461a      	mov	r2, r3
 8017104:	685b      	ldr	r3, [r3, #4]
 8017106:	b10b      	cbz	r3, 801710c <_free_r+0x4c>
 8017108:	42a3      	cmp	r3, r4
 801710a:	d9fa      	bls.n	8017102 <_free_r+0x42>
 801710c:	6811      	ldr	r1, [r2, #0]
 801710e:	1850      	adds	r0, r2, r1
 8017110:	42a0      	cmp	r0, r4
 8017112:	d10b      	bne.n	801712c <_free_r+0x6c>
 8017114:	6820      	ldr	r0, [r4, #0]
 8017116:	4401      	add	r1, r0
 8017118:	1850      	adds	r0, r2, r1
 801711a:	4283      	cmp	r3, r0
 801711c:	6011      	str	r1, [r2, #0]
 801711e:	d1e0      	bne.n	80170e2 <_free_r+0x22>
 8017120:	6818      	ldr	r0, [r3, #0]
 8017122:	685b      	ldr	r3, [r3, #4]
 8017124:	6053      	str	r3, [r2, #4]
 8017126:	4408      	add	r0, r1
 8017128:	6010      	str	r0, [r2, #0]
 801712a:	e7da      	b.n	80170e2 <_free_r+0x22>
 801712c:	d902      	bls.n	8017134 <_free_r+0x74>
 801712e:	230c      	movs	r3, #12
 8017130:	602b      	str	r3, [r5, #0]
 8017132:	e7d6      	b.n	80170e2 <_free_r+0x22>
 8017134:	6820      	ldr	r0, [r4, #0]
 8017136:	1821      	adds	r1, r4, r0
 8017138:	428b      	cmp	r3, r1
 801713a:	bf04      	itt	eq
 801713c:	6819      	ldreq	r1, [r3, #0]
 801713e:	685b      	ldreq	r3, [r3, #4]
 8017140:	6063      	str	r3, [r4, #4]
 8017142:	bf04      	itt	eq
 8017144:	1809      	addeq	r1, r1, r0
 8017146:	6021      	streq	r1, [r4, #0]
 8017148:	6054      	str	r4, [r2, #4]
 801714a:	e7ca      	b.n	80170e2 <_free_r+0x22>
 801714c:	bd38      	pop	{r3, r4, r5, pc}
 801714e:	bf00      	nop
 8017150:	240035cc 	.word	0x240035cc

08017154 <malloc>:
 8017154:	4b02      	ldr	r3, [pc, #8]	@ (8017160 <malloc+0xc>)
 8017156:	4601      	mov	r1, r0
 8017158:	6818      	ldr	r0, [r3, #0]
 801715a:	f000 b825 	b.w	80171a8 <_malloc_r>
 801715e:	bf00      	nop
 8017160:	24000098 	.word	0x24000098

08017164 <sbrk_aligned>:
 8017164:	b570      	push	{r4, r5, r6, lr}
 8017166:	4e0f      	ldr	r6, [pc, #60]	@ (80171a4 <sbrk_aligned+0x40>)
 8017168:	460c      	mov	r4, r1
 801716a:	6831      	ldr	r1, [r6, #0]
 801716c:	4605      	mov	r5, r0
 801716e:	b911      	cbnz	r1, 8017176 <sbrk_aligned+0x12>
 8017170:	f000 fcec 	bl	8017b4c <_sbrk_r>
 8017174:	6030      	str	r0, [r6, #0]
 8017176:	4621      	mov	r1, r4
 8017178:	4628      	mov	r0, r5
 801717a:	f000 fce7 	bl	8017b4c <_sbrk_r>
 801717e:	1c43      	adds	r3, r0, #1
 8017180:	d103      	bne.n	801718a <sbrk_aligned+0x26>
 8017182:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8017186:	4620      	mov	r0, r4
 8017188:	bd70      	pop	{r4, r5, r6, pc}
 801718a:	1cc4      	adds	r4, r0, #3
 801718c:	f024 0403 	bic.w	r4, r4, #3
 8017190:	42a0      	cmp	r0, r4
 8017192:	d0f8      	beq.n	8017186 <sbrk_aligned+0x22>
 8017194:	1a21      	subs	r1, r4, r0
 8017196:	4628      	mov	r0, r5
 8017198:	f000 fcd8 	bl	8017b4c <_sbrk_r>
 801719c:	3001      	adds	r0, #1
 801719e:	d1f2      	bne.n	8017186 <sbrk_aligned+0x22>
 80171a0:	e7ef      	b.n	8017182 <sbrk_aligned+0x1e>
 80171a2:	bf00      	nop
 80171a4:	240035c8 	.word	0x240035c8

080171a8 <_malloc_r>:
 80171a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80171ac:	1ccd      	adds	r5, r1, #3
 80171ae:	f025 0503 	bic.w	r5, r5, #3
 80171b2:	3508      	adds	r5, #8
 80171b4:	2d0c      	cmp	r5, #12
 80171b6:	bf38      	it	cc
 80171b8:	250c      	movcc	r5, #12
 80171ba:	2d00      	cmp	r5, #0
 80171bc:	4606      	mov	r6, r0
 80171be:	db01      	blt.n	80171c4 <_malloc_r+0x1c>
 80171c0:	42a9      	cmp	r1, r5
 80171c2:	d904      	bls.n	80171ce <_malloc_r+0x26>
 80171c4:	230c      	movs	r3, #12
 80171c6:	6033      	str	r3, [r6, #0]
 80171c8:	2000      	movs	r0, #0
 80171ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80171ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80172a4 <_malloc_r+0xfc>
 80171d2:	f000 f869 	bl	80172a8 <__malloc_lock>
 80171d6:	f8d8 3000 	ldr.w	r3, [r8]
 80171da:	461c      	mov	r4, r3
 80171dc:	bb44      	cbnz	r4, 8017230 <_malloc_r+0x88>
 80171de:	4629      	mov	r1, r5
 80171e0:	4630      	mov	r0, r6
 80171e2:	f7ff ffbf 	bl	8017164 <sbrk_aligned>
 80171e6:	1c43      	adds	r3, r0, #1
 80171e8:	4604      	mov	r4, r0
 80171ea:	d158      	bne.n	801729e <_malloc_r+0xf6>
 80171ec:	f8d8 4000 	ldr.w	r4, [r8]
 80171f0:	4627      	mov	r7, r4
 80171f2:	2f00      	cmp	r7, #0
 80171f4:	d143      	bne.n	801727e <_malloc_r+0xd6>
 80171f6:	2c00      	cmp	r4, #0
 80171f8:	d04b      	beq.n	8017292 <_malloc_r+0xea>
 80171fa:	6823      	ldr	r3, [r4, #0]
 80171fc:	4639      	mov	r1, r7
 80171fe:	4630      	mov	r0, r6
 8017200:	eb04 0903 	add.w	r9, r4, r3
 8017204:	f000 fca2 	bl	8017b4c <_sbrk_r>
 8017208:	4581      	cmp	r9, r0
 801720a:	d142      	bne.n	8017292 <_malloc_r+0xea>
 801720c:	6821      	ldr	r1, [r4, #0]
 801720e:	1a6d      	subs	r5, r5, r1
 8017210:	4629      	mov	r1, r5
 8017212:	4630      	mov	r0, r6
 8017214:	f7ff ffa6 	bl	8017164 <sbrk_aligned>
 8017218:	3001      	adds	r0, #1
 801721a:	d03a      	beq.n	8017292 <_malloc_r+0xea>
 801721c:	6823      	ldr	r3, [r4, #0]
 801721e:	442b      	add	r3, r5
 8017220:	6023      	str	r3, [r4, #0]
 8017222:	f8d8 3000 	ldr.w	r3, [r8]
 8017226:	685a      	ldr	r2, [r3, #4]
 8017228:	bb62      	cbnz	r2, 8017284 <_malloc_r+0xdc>
 801722a:	f8c8 7000 	str.w	r7, [r8]
 801722e:	e00f      	b.n	8017250 <_malloc_r+0xa8>
 8017230:	6822      	ldr	r2, [r4, #0]
 8017232:	1b52      	subs	r2, r2, r5
 8017234:	d420      	bmi.n	8017278 <_malloc_r+0xd0>
 8017236:	2a0b      	cmp	r2, #11
 8017238:	d917      	bls.n	801726a <_malloc_r+0xc2>
 801723a:	1961      	adds	r1, r4, r5
 801723c:	42a3      	cmp	r3, r4
 801723e:	6025      	str	r5, [r4, #0]
 8017240:	bf18      	it	ne
 8017242:	6059      	strne	r1, [r3, #4]
 8017244:	6863      	ldr	r3, [r4, #4]
 8017246:	bf08      	it	eq
 8017248:	f8c8 1000 	streq.w	r1, [r8]
 801724c:	5162      	str	r2, [r4, r5]
 801724e:	604b      	str	r3, [r1, #4]
 8017250:	4630      	mov	r0, r6
 8017252:	f000 f82f 	bl	80172b4 <__malloc_unlock>
 8017256:	f104 000b 	add.w	r0, r4, #11
 801725a:	1d23      	adds	r3, r4, #4
 801725c:	f020 0007 	bic.w	r0, r0, #7
 8017260:	1ac2      	subs	r2, r0, r3
 8017262:	bf1c      	itt	ne
 8017264:	1a1b      	subne	r3, r3, r0
 8017266:	50a3      	strne	r3, [r4, r2]
 8017268:	e7af      	b.n	80171ca <_malloc_r+0x22>
 801726a:	6862      	ldr	r2, [r4, #4]
 801726c:	42a3      	cmp	r3, r4
 801726e:	bf0c      	ite	eq
 8017270:	f8c8 2000 	streq.w	r2, [r8]
 8017274:	605a      	strne	r2, [r3, #4]
 8017276:	e7eb      	b.n	8017250 <_malloc_r+0xa8>
 8017278:	4623      	mov	r3, r4
 801727a:	6864      	ldr	r4, [r4, #4]
 801727c:	e7ae      	b.n	80171dc <_malloc_r+0x34>
 801727e:	463c      	mov	r4, r7
 8017280:	687f      	ldr	r7, [r7, #4]
 8017282:	e7b6      	b.n	80171f2 <_malloc_r+0x4a>
 8017284:	461a      	mov	r2, r3
 8017286:	685b      	ldr	r3, [r3, #4]
 8017288:	42a3      	cmp	r3, r4
 801728a:	d1fb      	bne.n	8017284 <_malloc_r+0xdc>
 801728c:	2300      	movs	r3, #0
 801728e:	6053      	str	r3, [r2, #4]
 8017290:	e7de      	b.n	8017250 <_malloc_r+0xa8>
 8017292:	230c      	movs	r3, #12
 8017294:	6033      	str	r3, [r6, #0]
 8017296:	4630      	mov	r0, r6
 8017298:	f000 f80c 	bl	80172b4 <__malloc_unlock>
 801729c:	e794      	b.n	80171c8 <_malloc_r+0x20>
 801729e:	6005      	str	r5, [r0, #0]
 80172a0:	e7d6      	b.n	8017250 <_malloc_r+0xa8>
 80172a2:	bf00      	nop
 80172a4:	240035cc 	.word	0x240035cc

080172a8 <__malloc_lock>:
 80172a8:	4801      	ldr	r0, [pc, #4]	@ (80172b0 <__malloc_lock+0x8>)
 80172aa:	f7ff beda 	b.w	8017062 <__retarget_lock_acquire_recursive>
 80172ae:	bf00      	nop
 80172b0:	240035c4 	.word	0x240035c4

080172b4 <__malloc_unlock>:
 80172b4:	4801      	ldr	r0, [pc, #4]	@ (80172bc <__malloc_unlock+0x8>)
 80172b6:	f7ff bed5 	b.w	8017064 <__retarget_lock_release_recursive>
 80172ba:	bf00      	nop
 80172bc:	240035c4 	.word	0x240035c4

080172c0 <__sfputc_r>:
 80172c0:	6893      	ldr	r3, [r2, #8]
 80172c2:	3b01      	subs	r3, #1
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	b410      	push	{r4}
 80172c8:	6093      	str	r3, [r2, #8]
 80172ca:	da08      	bge.n	80172de <__sfputc_r+0x1e>
 80172cc:	6994      	ldr	r4, [r2, #24]
 80172ce:	42a3      	cmp	r3, r4
 80172d0:	db01      	blt.n	80172d6 <__sfputc_r+0x16>
 80172d2:	290a      	cmp	r1, #10
 80172d4:	d103      	bne.n	80172de <__sfputc_r+0x1e>
 80172d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80172da:	f7ff bdaa 	b.w	8016e32 <__swbuf_r>
 80172de:	6813      	ldr	r3, [r2, #0]
 80172e0:	1c58      	adds	r0, r3, #1
 80172e2:	6010      	str	r0, [r2, #0]
 80172e4:	7019      	strb	r1, [r3, #0]
 80172e6:	4608      	mov	r0, r1
 80172e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80172ec:	4770      	bx	lr

080172ee <__sfputs_r>:
 80172ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172f0:	4606      	mov	r6, r0
 80172f2:	460f      	mov	r7, r1
 80172f4:	4614      	mov	r4, r2
 80172f6:	18d5      	adds	r5, r2, r3
 80172f8:	42ac      	cmp	r4, r5
 80172fa:	d101      	bne.n	8017300 <__sfputs_r+0x12>
 80172fc:	2000      	movs	r0, #0
 80172fe:	e007      	b.n	8017310 <__sfputs_r+0x22>
 8017300:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017304:	463a      	mov	r2, r7
 8017306:	4630      	mov	r0, r6
 8017308:	f7ff ffda 	bl	80172c0 <__sfputc_r>
 801730c:	1c43      	adds	r3, r0, #1
 801730e:	d1f3      	bne.n	80172f8 <__sfputs_r+0xa>
 8017310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017314 <_vfiprintf_r>:
 8017314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017318:	460d      	mov	r5, r1
 801731a:	b09d      	sub	sp, #116	@ 0x74
 801731c:	4614      	mov	r4, r2
 801731e:	4698      	mov	r8, r3
 8017320:	4606      	mov	r6, r0
 8017322:	b118      	cbz	r0, 801732c <_vfiprintf_r+0x18>
 8017324:	6a03      	ldr	r3, [r0, #32]
 8017326:	b90b      	cbnz	r3, 801732c <_vfiprintf_r+0x18>
 8017328:	f7ff fc92 	bl	8016c50 <__sinit>
 801732c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801732e:	07d9      	lsls	r1, r3, #31
 8017330:	d405      	bmi.n	801733e <_vfiprintf_r+0x2a>
 8017332:	89ab      	ldrh	r3, [r5, #12]
 8017334:	059a      	lsls	r2, r3, #22
 8017336:	d402      	bmi.n	801733e <_vfiprintf_r+0x2a>
 8017338:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801733a:	f7ff fe92 	bl	8017062 <__retarget_lock_acquire_recursive>
 801733e:	89ab      	ldrh	r3, [r5, #12]
 8017340:	071b      	lsls	r3, r3, #28
 8017342:	d501      	bpl.n	8017348 <_vfiprintf_r+0x34>
 8017344:	692b      	ldr	r3, [r5, #16]
 8017346:	b99b      	cbnz	r3, 8017370 <_vfiprintf_r+0x5c>
 8017348:	4629      	mov	r1, r5
 801734a:	4630      	mov	r0, r6
 801734c:	f7ff fdb0 	bl	8016eb0 <__swsetup_r>
 8017350:	b170      	cbz	r0, 8017370 <_vfiprintf_r+0x5c>
 8017352:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017354:	07dc      	lsls	r4, r3, #31
 8017356:	d504      	bpl.n	8017362 <_vfiprintf_r+0x4e>
 8017358:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801735c:	b01d      	add	sp, #116	@ 0x74
 801735e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017362:	89ab      	ldrh	r3, [r5, #12]
 8017364:	0598      	lsls	r0, r3, #22
 8017366:	d4f7      	bmi.n	8017358 <_vfiprintf_r+0x44>
 8017368:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801736a:	f7ff fe7b 	bl	8017064 <__retarget_lock_release_recursive>
 801736e:	e7f3      	b.n	8017358 <_vfiprintf_r+0x44>
 8017370:	2300      	movs	r3, #0
 8017372:	9309      	str	r3, [sp, #36]	@ 0x24
 8017374:	2320      	movs	r3, #32
 8017376:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801737a:	f8cd 800c 	str.w	r8, [sp, #12]
 801737e:	2330      	movs	r3, #48	@ 0x30
 8017380:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017530 <_vfiprintf_r+0x21c>
 8017384:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017388:	f04f 0901 	mov.w	r9, #1
 801738c:	4623      	mov	r3, r4
 801738e:	469a      	mov	sl, r3
 8017390:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017394:	b10a      	cbz	r2, 801739a <_vfiprintf_r+0x86>
 8017396:	2a25      	cmp	r2, #37	@ 0x25
 8017398:	d1f9      	bne.n	801738e <_vfiprintf_r+0x7a>
 801739a:	ebba 0b04 	subs.w	fp, sl, r4
 801739e:	d00b      	beq.n	80173b8 <_vfiprintf_r+0xa4>
 80173a0:	465b      	mov	r3, fp
 80173a2:	4622      	mov	r2, r4
 80173a4:	4629      	mov	r1, r5
 80173a6:	4630      	mov	r0, r6
 80173a8:	f7ff ffa1 	bl	80172ee <__sfputs_r>
 80173ac:	3001      	adds	r0, #1
 80173ae:	f000 80a7 	beq.w	8017500 <_vfiprintf_r+0x1ec>
 80173b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80173b4:	445a      	add	r2, fp
 80173b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80173b8:	f89a 3000 	ldrb.w	r3, [sl]
 80173bc:	2b00      	cmp	r3, #0
 80173be:	f000 809f 	beq.w	8017500 <_vfiprintf_r+0x1ec>
 80173c2:	2300      	movs	r3, #0
 80173c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80173c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80173cc:	f10a 0a01 	add.w	sl, sl, #1
 80173d0:	9304      	str	r3, [sp, #16]
 80173d2:	9307      	str	r3, [sp, #28]
 80173d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80173d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80173da:	4654      	mov	r4, sl
 80173dc:	2205      	movs	r2, #5
 80173de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80173e2:	4853      	ldr	r0, [pc, #332]	@ (8017530 <_vfiprintf_r+0x21c>)
 80173e4:	f7e8 ff7c 	bl	80002e0 <memchr>
 80173e8:	9a04      	ldr	r2, [sp, #16]
 80173ea:	b9d8      	cbnz	r0, 8017424 <_vfiprintf_r+0x110>
 80173ec:	06d1      	lsls	r1, r2, #27
 80173ee:	bf44      	itt	mi
 80173f0:	2320      	movmi	r3, #32
 80173f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80173f6:	0713      	lsls	r3, r2, #28
 80173f8:	bf44      	itt	mi
 80173fa:	232b      	movmi	r3, #43	@ 0x2b
 80173fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017400:	f89a 3000 	ldrb.w	r3, [sl]
 8017404:	2b2a      	cmp	r3, #42	@ 0x2a
 8017406:	d015      	beq.n	8017434 <_vfiprintf_r+0x120>
 8017408:	9a07      	ldr	r2, [sp, #28]
 801740a:	4654      	mov	r4, sl
 801740c:	2000      	movs	r0, #0
 801740e:	f04f 0c0a 	mov.w	ip, #10
 8017412:	4621      	mov	r1, r4
 8017414:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017418:	3b30      	subs	r3, #48	@ 0x30
 801741a:	2b09      	cmp	r3, #9
 801741c:	d94b      	bls.n	80174b6 <_vfiprintf_r+0x1a2>
 801741e:	b1b0      	cbz	r0, 801744e <_vfiprintf_r+0x13a>
 8017420:	9207      	str	r2, [sp, #28]
 8017422:	e014      	b.n	801744e <_vfiprintf_r+0x13a>
 8017424:	eba0 0308 	sub.w	r3, r0, r8
 8017428:	fa09 f303 	lsl.w	r3, r9, r3
 801742c:	4313      	orrs	r3, r2
 801742e:	9304      	str	r3, [sp, #16]
 8017430:	46a2      	mov	sl, r4
 8017432:	e7d2      	b.n	80173da <_vfiprintf_r+0xc6>
 8017434:	9b03      	ldr	r3, [sp, #12]
 8017436:	1d19      	adds	r1, r3, #4
 8017438:	681b      	ldr	r3, [r3, #0]
 801743a:	9103      	str	r1, [sp, #12]
 801743c:	2b00      	cmp	r3, #0
 801743e:	bfbb      	ittet	lt
 8017440:	425b      	neglt	r3, r3
 8017442:	f042 0202 	orrlt.w	r2, r2, #2
 8017446:	9307      	strge	r3, [sp, #28]
 8017448:	9307      	strlt	r3, [sp, #28]
 801744a:	bfb8      	it	lt
 801744c:	9204      	strlt	r2, [sp, #16]
 801744e:	7823      	ldrb	r3, [r4, #0]
 8017450:	2b2e      	cmp	r3, #46	@ 0x2e
 8017452:	d10a      	bne.n	801746a <_vfiprintf_r+0x156>
 8017454:	7863      	ldrb	r3, [r4, #1]
 8017456:	2b2a      	cmp	r3, #42	@ 0x2a
 8017458:	d132      	bne.n	80174c0 <_vfiprintf_r+0x1ac>
 801745a:	9b03      	ldr	r3, [sp, #12]
 801745c:	1d1a      	adds	r2, r3, #4
 801745e:	681b      	ldr	r3, [r3, #0]
 8017460:	9203      	str	r2, [sp, #12]
 8017462:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017466:	3402      	adds	r4, #2
 8017468:	9305      	str	r3, [sp, #20]
 801746a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017540 <_vfiprintf_r+0x22c>
 801746e:	7821      	ldrb	r1, [r4, #0]
 8017470:	2203      	movs	r2, #3
 8017472:	4650      	mov	r0, sl
 8017474:	f7e8 ff34 	bl	80002e0 <memchr>
 8017478:	b138      	cbz	r0, 801748a <_vfiprintf_r+0x176>
 801747a:	9b04      	ldr	r3, [sp, #16]
 801747c:	eba0 000a 	sub.w	r0, r0, sl
 8017480:	2240      	movs	r2, #64	@ 0x40
 8017482:	4082      	lsls	r2, r0
 8017484:	4313      	orrs	r3, r2
 8017486:	3401      	adds	r4, #1
 8017488:	9304      	str	r3, [sp, #16]
 801748a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801748e:	4829      	ldr	r0, [pc, #164]	@ (8017534 <_vfiprintf_r+0x220>)
 8017490:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017494:	2206      	movs	r2, #6
 8017496:	f7e8 ff23 	bl	80002e0 <memchr>
 801749a:	2800      	cmp	r0, #0
 801749c:	d03f      	beq.n	801751e <_vfiprintf_r+0x20a>
 801749e:	4b26      	ldr	r3, [pc, #152]	@ (8017538 <_vfiprintf_r+0x224>)
 80174a0:	bb1b      	cbnz	r3, 80174ea <_vfiprintf_r+0x1d6>
 80174a2:	9b03      	ldr	r3, [sp, #12]
 80174a4:	3307      	adds	r3, #7
 80174a6:	f023 0307 	bic.w	r3, r3, #7
 80174aa:	3308      	adds	r3, #8
 80174ac:	9303      	str	r3, [sp, #12]
 80174ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80174b0:	443b      	add	r3, r7
 80174b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80174b4:	e76a      	b.n	801738c <_vfiprintf_r+0x78>
 80174b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80174ba:	460c      	mov	r4, r1
 80174bc:	2001      	movs	r0, #1
 80174be:	e7a8      	b.n	8017412 <_vfiprintf_r+0xfe>
 80174c0:	2300      	movs	r3, #0
 80174c2:	3401      	adds	r4, #1
 80174c4:	9305      	str	r3, [sp, #20]
 80174c6:	4619      	mov	r1, r3
 80174c8:	f04f 0c0a 	mov.w	ip, #10
 80174cc:	4620      	mov	r0, r4
 80174ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80174d2:	3a30      	subs	r2, #48	@ 0x30
 80174d4:	2a09      	cmp	r2, #9
 80174d6:	d903      	bls.n	80174e0 <_vfiprintf_r+0x1cc>
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d0c6      	beq.n	801746a <_vfiprintf_r+0x156>
 80174dc:	9105      	str	r1, [sp, #20]
 80174de:	e7c4      	b.n	801746a <_vfiprintf_r+0x156>
 80174e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80174e4:	4604      	mov	r4, r0
 80174e6:	2301      	movs	r3, #1
 80174e8:	e7f0      	b.n	80174cc <_vfiprintf_r+0x1b8>
 80174ea:	ab03      	add	r3, sp, #12
 80174ec:	9300      	str	r3, [sp, #0]
 80174ee:	462a      	mov	r2, r5
 80174f0:	4b12      	ldr	r3, [pc, #72]	@ (801753c <_vfiprintf_r+0x228>)
 80174f2:	a904      	add	r1, sp, #16
 80174f4:	4630      	mov	r0, r6
 80174f6:	f3af 8000 	nop.w
 80174fa:	4607      	mov	r7, r0
 80174fc:	1c78      	adds	r0, r7, #1
 80174fe:	d1d6      	bne.n	80174ae <_vfiprintf_r+0x19a>
 8017500:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017502:	07d9      	lsls	r1, r3, #31
 8017504:	d405      	bmi.n	8017512 <_vfiprintf_r+0x1fe>
 8017506:	89ab      	ldrh	r3, [r5, #12]
 8017508:	059a      	lsls	r2, r3, #22
 801750a:	d402      	bmi.n	8017512 <_vfiprintf_r+0x1fe>
 801750c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801750e:	f7ff fda9 	bl	8017064 <__retarget_lock_release_recursive>
 8017512:	89ab      	ldrh	r3, [r5, #12]
 8017514:	065b      	lsls	r3, r3, #25
 8017516:	f53f af1f 	bmi.w	8017358 <_vfiprintf_r+0x44>
 801751a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801751c:	e71e      	b.n	801735c <_vfiprintf_r+0x48>
 801751e:	ab03      	add	r3, sp, #12
 8017520:	9300      	str	r3, [sp, #0]
 8017522:	462a      	mov	r2, r5
 8017524:	4b05      	ldr	r3, [pc, #20]	@ (801753c <_vfiprintf_r+0x228>)
 8017526:	a904      	add	r1, sp, #16
 8017528:	4630      	mov	r0, r6
 801752a:	f000 f879 	bl	8017620 <_printf_i>
 801752e:	e7e4      	b.n	80174fa <_vfiprintf_r+0x1e6>
 8017530:	0801dd25 	.word	0x0801dd25
 8017534:	0801dd2f 	.word	0x0801dd2f
 8017538:	00000000 	.word	0x00000000
 801753c:	080172ef 	.word	0x080172ef
 8017540:	0801dd2b 	.word	0x0801dd2b

08017544 <_printf_common>:
 8017544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017548:	4616      	mov	r6, r2
 801754a:	4698      	mov	r8, r3
 801754c:	688a      	ldr	r2, [r1, #8]
 801754e:	690b      	ldr	r3, [r1, #16]
 8017550:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017554:	4293      	cmp	r3, r2
 8017556:	bfb8      	it	lt
 8017558:	4613      	movlt	r3, r2
 801755a:	6033      	str	r3, [r6, #0]
 801755c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017560:	4607      	mov	r7, r0
 8017562:	460c      	mov	r4, r1
 8017564:	b10a      	cbz	r2, 801756a <_printf_common+0x26>
 8017566:	3301      	adds	r3, #1
 8017568:	6033      	str	r3, [r6, #0]
 801756a:	6823      	ldr	r3, [r4, #0]
 801756c:	0699      	lsls	r1, r3, #26
 801756e:	bf42      	ittt	mi
 8017570:	6833      	ldrmi	r3, [r6, #0]
 8017572:	3302      	addmi	r3, #2
 8017574:	6033      	strmi	r3, [r6, #0]
 8017576:	6825      	ldr	r5, [r4, #0]
 8017578:	f015 0506 	ands.w	r5, r5, #6
 801757c:	d106      	bne.n	801758c <_printf_common+0x48>
 801757e:	f104 0a19 	add.w	sl, r4, #25
 8017582:	68e3      	ldr	r3, [r4, #12]
 8017584:	6832      	ldr	r2, [r6, #0]
 8017586:	1a9b      	subs	r3, r3, r2
 8017588:	42ab      	cmp	r3, r5
 801758a:	dc26      	bgt.n	80175da <_printf_common+0x96>
 801758c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017590:	6822      	ldr	r2, [r4, #0]
 8017592:	3b00      	subs	r3, #0
 8017594:	bf18      	it	ne
 8017596:	2301      	movne	r3, #1
 8017598:	0692      	lsls	r2, r2, #26
 801759a:	d42b      	bmi.n	80175f4 <_printf_common+0xb0>
 801759c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80175a0:	4641      	mov	r1, r8
 80175a2:	4638      	mov	r0, r7
 80175a4:	47c8      	blx	r9
 80175a6:	3001      	adds	r0, #1
 80175a8:	d01e      	beq.n	80175e8 <_printf_common+0xa4>
 80175aa:	6823      	ldr	r3, [r4, #0]
 80175ac:	6922      	ldr	r2, [r4, #16]
 80175ae:	f003 0306 	and.w	r3, r3, #6
 80175b2:	2b04      	cmp	r3, #4
 80175b4:	bf02      	ittt	eq
 80175b6:	68e5      	ldreq	r5, [r4, #12]
 80175b8:	6833      	ldreq	r3, [r6, #0]
 80175ba:	1aed      	subeq	r5, r5, r3
 80175bc:	68a3      	ldr	r3, [r4, #8]
 80175be:	bf0c      	ite	eq
 80175c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80175c4:	2500      	movne	r5, #0
 80175c6:	4293      	cmp	r3, r2
 80175c8:	bfc4      	itt	gt
 80175ca:	1a9b      	subgt	r3, r3, r2
 80175cc:	18ed      	addgt	r5, r5, r3
 80175ce:	2600      	movs	r6, #0
 80175d0:	341a      	adds	r4, #26
 80175d2:	42b5      	cmp	r5, r6
 80175d4:	d11a      	bne.n	801760c <_printf_common+0xc8>
 80175d6:	2000      	movs	r0, #0
 80175d8:	e008      	b.n	80175ec <_printf_common+0xa8>
 80175da:	2301      	movs	r3, #1
 80175dc:	4652      	mov	r2, sl
 80175de:	4641      	mov	r1, r8
 80175e0:	4638      	mov	r0, r7
 80175e2:	47c8      	blx	r9
 80175e4:	3001      	adds	r0, #1
 80175e6:	d103      	bne.n	80175f0 <_printf_common+0xac>
 80175e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80175ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175f0:	3501      	adds	r5, #1
 80175f2:	e7c6      	b.n	8017582 <_printf_common+0x3e>
 80175f4:	18e1      	adds	r1, r4, r3
 80175f6:	1c5a      	adds	r2, r3, #1
 80175f8:	2030      	movs	r0, #48	@ 0x30
 80175fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80175fe:	4422      	add	r2, r4
 8017600:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017604:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017608:	3302      	adds	r3, #2
 801760a:	e7c7      	b.n	801759c <_printf_common+0x58>
 801760c:	2301      	movs	r3, #1
 801760e:	4622      	mov	r2, r4
 8017610:	4641      	mov	r1, r8
 8017612:	4638      	mov	r0, r7
 8017614:	47c8      	blx	r9
 8017616:	3001      	adds	r0, #1
 8017618:	d0e6      	beq.n	80175e8 <_printf_common+0xa4>
 801761a:	3601      	adds	r6, #1
 801761c:	e7d9      	b.n	80175d2 <_printf_common+0x8e>
	...

08017620 <_printf_i>:
 8017620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017624:	7e0f      	ldrb	r7, [r1, #24]
 8017626:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017628:	2f78      	cmp	r7, #120	@ 0x78
 801762a:	4691      	mov	r9, r2
 801762c:	4680      	mov	r8, r0
 801762e:	460c      	mov	r4, r1
 8017630:	469a      	mov	sl, r3
 8017632:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017636:	d807      	bhi.n	8017648 <_printf_i+0x28>
 8017638:	2f62      	cmp	r7, #98	@ 0x62
 801763a:	d80a      	bhi.n	8017652 <_printf_i+0x32>
 801763c:	2f00      	cmp	r7, #0
 801763e:	f000 80d2 	beq.w	80177e6 <_printf_i+0x1c6>
 8017642:	2f58      	cmp	r7, #88	@ 0x58
 8017644:	f000 80b9 	beq.w	80177ba <_printf_i+0x19a>
 8017648:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801764c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017650:	e03a      	b.n	80176c8 <_printf_i+0xa8>
 8017652:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017656:	2b15      	cmp	r3, #21
 8017658:	d8f6      	bhi.n	8017648 <_printf_i+0x28>
 801765a:	a101      	add	r1, pc, #4	@ (adr r1, 8017660 <_printf_i+0x40>)
 801765c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017660:	080176b9 	.word	0x080176b9
 8017664:	080176cd 	.word	0x080176cd
 8017668:	08017649 	.word	0x08017649
 801766c:	08017649 	.word	0x08017649
 8017670:	08017649 	.word	0x08017649
 8017674:	08017649 	.word	0x08017649
 8017678:	080176cd 	.word	0x080176cd
 801767c:	08017649 	.word	0x08017649
 8017680:	08017649 	.word	0x08017649
 8017684:	08017649 	.word	0x08017649
 8017688:	08017649 	.word	0x08017649
 801768c:	080177cd 	.word	0x080177cd
 8017690:	080176f7 	.word	0x080176f7
 8017694:	08017787 	.word	0x08017787
 8017698:	08017649 	.word	0x08017649
 801769c:	08017649 	.word	0x08017649
 80176a0:	080177ef 	.word	0x080177ef
 80176a4:	08017649 	.word	0x08017649
 80176a8:	080176f7 	.word	0x080176f7
 80176ac:	08017649 	.word	0x08017649
 80176b0:	08017649 	.word	0x08017649
 80176b4:	0801778f 	.word	0x0801778f
 80176b8:	6833      	ldr	r3, [r6, #0]
 80176ba:	1d1a      	adds	r2, r3, #4
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	6032      	str	r2, [r6, #0]
 80176c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80176c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80176c8:	2301      	movs	r3, #1
 80176ca:	e09d      	b.n	8017808 <_printf_i+0x1e8>
 80176cc:	6833      	ldr	r3, [r6, #0]
 80176ce:	6820      	ldr	r0, [r4, #0]
 80176d0:	1d19      	adds	r1, r3, #4
 80176d2:	6031      	str	r1, [r6, #0]
 80176d4:	0606      	lsls	r6, r0, #24
 80176d6:	d501      	bpl.n	80176dc <_printf_i+0xbc>
 80176d8:	681d      	ldr	r5, [r3, #0]
 80176da:	e003      	b.n	80176e4 <_printf_i+0xc4>
 80176dc:	0645      	lsls	r5, r0, #25
 80176de:	d5fb      	bpl.n	80176d8 <_printf_i+0xb8>
 80176e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80176e4:	2d00      	cmp	r5, #0
 80176e6:	da03      	bge.n	80176f0 <_printf_i+0xd0>
 80176e8:	232d      	movs	r3, #45	@ 0x2d
 80176ea:	426d      	negs	r5, r5
 80176ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80176f0:	4859      	ldr	r0, [pc, #356]	@ (8017858 <_printf_i+0x238>)
 80176f2:	230a      	movs	r3, #10
 80176f4:	e011      	b.n	801771a <_printf_i+0xfa>
 80176f6:	6821      	ldr	r1, [r4, #0]
 80176f8:	6833      	ldr	r3, [r6, #0]
 80176fa:	0608      	lsls	r0, r1, #24
 80176fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8017700:	d402      	bmi.n	8017708 <_printf_i+0xe8>
 8017702:	0649      	lsls	r1, r1, #25
 8017704:	bf48      	it	mi
 8017706:	b2ad      	uxthmi	r5, r5
 8017708:	2f6f      	cmp	r7, #111	@ 0x6f
 801770a:	4853      	ldr	r0, [pc, #332]	@ (8017858 <_printf_i+0x238>)
 801770c:	6033      	str	r3, [r6, #0]
 801770e:	bf14      	ite	ne
 8017710:	230a      	movne	r3, #10
 8017712:	2308      	moveq	r3, #8
 8017714:	2100      	movs	r1, #0
 8017716:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801771a:	6866      	ldr	r6, [r4, #4]
 801771c:	60a6      	str	r6, [r4, #8]
 801771e:	2e00      	cmp	r6, #0
 8017720:	bfa2      	ittt	ge
 8017722:	6821      	ldrge	r1, [r4, #0]
 8017724:	f021 0104 	bicge.w	r1, r1, #4
 8017728:	6021      	strge	r1, [r4, #0]
 801772a:	b90d      	cbnz	r5, 8017730 <_printf_i+0x110>
 801772c:	2e00      	cmp	r6, #0
 801772e:	d04b      	beq.n	80177c8 <_printf_i+0x1a8>
 8017730:	4616      	mov	r6, r2
 8017732:	fbb5 f1f3 	udiv	r1, r5, r3
 8017736:	fb03 5711 	mls	r7, r3, r1, r5
 801773a:	5dc7      	ldrb	r7, [r0, r7]
 801773c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017740:	462f      	mov	r7, r5
 8017742:	42bb      	cmp	r3, r7
 8017744:	460d      	mov	r5, r1
 8017746:	d9f4      	bls.n	8017732 <_printf_i+0x112>
 8017748:	2b08      	cmp	r3, #8
 801774a:	d10b      	bne.n	8017764 <_printf_i+0x144>
 801774c:	6823      	ldr	r3, [r4, #0]
 801774e:	07df      	lsls	r7, r3, #31
 8017750:	d508      	bpl.n	8017764 <_printf_i+0x144>
 8017752:	6923      	ldr	r3, [r4, #16]
 8017754:	6861      	ldr	r1, [r4, #4]
 8017756:	4299      	cmp	r1, r3
 8017758:	bfde      	ittt	le
 801775a:	2330      	movle	r3, #48	@ 0x30
 801775c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017760:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8017764:	1b92      	subs	r2, r2, r6
 8017766:	6122      	str	r2, [r4, #16]
 8017768:	f8cd a000 	str.w	sl, [sp]
 801776c:	464b      	mov	r3, r9
 801776e:	aa03      	add	r2, sp, #12
 8017770:	4621      	mov	r1, r4
 8017772:	4640      	mov	r0, r8
 8017774:	f7ff fee6 	bl	8017544 <_printf_common>
 8017778:	3001      	adds	r0, #1
 801777a:	d14a      	bne.n	8017812 <_printf_i+0x1f2>
 801777c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017780:	b004      	add	sp, #16
 8017782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017786:	6823      	ldr	r3, [r4, #0]
 8017788:	f043 0320 	orr.w	r3, r3, #32
 801778c:	6023      	str	r3, [r4, #0]
 801778e:	4833      	ldr	r0, [pc, #204]	@ (801785c <_printf_i+0x23c>)
 8017790:	2778      	movs	r7, #120	@ 0x78
 8017792:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017796:	6823      	ldr	r3, [r4, #0]
 8017798:	6831      	ldr	r1, [r6, #0]
 801779a:	061f      	lsls	r7, r3, #24
 801779c:	f851 5b04 	ldr.w	r5, [r1], #4
 80177a0:	d402      	bmi.n	80177a8 <_printf_i+0x188>
 80177a2:	065f      	lsls	r7, r3, #25
 80177a4:	bf48      	it	mi
 80177a6:	b2ad      	uxthmi	r5, r5
 80177a8:	6031      	str	r1, [r6, #0]
 80177aa:	07d9      	lsls	r1, r3, #31
 80177ac:	bf44      	itt	mi
 80177ae:	f043 0320 	orrmi.w	r3, r3, #32
 80177b2:	6023      	strmi	r3, [r4, #0]
 80177b4:	b11d      	cbz	r5, 80177be <_printf_i+0x19e>
 80177b6:	2310      	movs	r3, #16
 80177b8:	e7ac      	b.n	8017714 <_printf_i+0xf4>
 80177ba:	4827      	ldr	r0, [pc, #156]	@ (8017858 <_printf_i+0x238>)
 80177bc:	e7e9      	b.n	8017792 <_printf_i+0x172>
 80177be:	6823      	ldr	r3, [r4, #0]
 80177c0:	f023 0320 	bic.w	r3, r3, #32
 80177c4:	6023      	str	r3, [r4, #0]
 80177c6:	e7f6      	b.n	80177b6 <_printf_i+0x196>
 80177c8:	4616      	mov	r6, r2
 80177ca:	e7bd      	b.n	8017748 <_printf_i+0x128>
 80177cc:	6833      	ldr	r3, [r6, #0]
 80177ce:	6825      	ldr	r5, [r4, #0]
 80177d0:	6961      	ldr	r1, [r4, #20]
 80177d2:	1d18      	adds	r0, r3, #4
 80177d4:	6030      	str	r0, [r6, #0]
 80177d6:	062e      	lsls	r6, r5, #24
 80177d8:	681b      	ldr	r3, [r3, #0]
 80177da:	d501      	bpl.n	80177e0 <_printf_i+0x1c0>
 80177dc:	6019      	str	r1, [r3, #0]
 80177de:	e002      	b.n	80177e6 <_printf_i+0x1c6>
 80177e0:	0668      	lsls	r0, r5, #25
 80177e2:	d5fb      	bpl.n	80177dc <_printf_i+0x1bc>
 80177e4:	8019      	strh	r1, [r3, #0]
 80177e6:	2300      	movs	r3, #0
 80177e8:	6123      	str	r3, [r4, #16]
 80177ea:	4616      	mov	r6, r2
 80177ec:	e7bc      	b.n	8017768 <_printf_i+0x148>
 80177ee:	6833      	ldr	r3, [r6, #0]
 80177f0:	1d1a      	adds	r2, r3, #4
 80177f2:	6032      	str	r2, [r6, #0]
 80177f4:	681e      	ldr	r6, [r3, #0]
 80177f6:	6862      	ldr	r2, [r4, #4]
 80177f8:	2100      	movs	r1, #0
 80177fa:	4630      	mov	r0, r6
 80177fc:	f7e8 fd70 	bl	80002e0 <memchr>
 8017800:	b108      	cbz	r0, 8017806 <_printf_i+0x1e6>
 8017802:	1b80      	subs	r0, r0, r6
 8017804:	6060      	str	r0, [r4, #4]
 8017806:	6863      	ldr	r3, [r4, #4]
 8017808:	6123      	str	r3, [r4, #16]
 801780a:	2300      	movs	r3, #0
 801780c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017810:	e7aa      	b.n	8017768 <_printf_i+0x148>
 8017812:	6923      	ldr	r3, [r4, #16]
 8017814:	4632      	mov	r2, r6
 8017816:	4649      	mov	r1, r9
 8017818:	4640      	mov	r0, r8
 801781a:	47d0      	blx	sl
 801781c:	3001      	adds	r0, #1
 801781e:	d0ad      	beq.n	801777c <_printf_i+0x15c>
 8017820:	6823      	ldr	r3, [r4, #0]
 8017822:	079b      	lsls	r3, r3, #30
 8017824:	d413      	bmi.n	801784e <_printf_i+0x22e>
 8017826:	68e0      	ldr	r0, [r4, #12]
 8017828:	9b03      	ldr	r3, [sp, #12]
 801782a:	4298      	cmp	r0, r3
 801782c:	bfb8      	it	lt
 801782e:	4618      	movlt	r0, r3
 8017830:	e7a6      	b.n	8017780 <_printf_i+0x160>
 8017832:	2301      	movs	r3, #1
 8017834:	4632      	mov	r2, r6
 8017836:	4649      	mov	r1, r9
 8017838:	4640      	mov	r0, r8
 801783a:	47d0      	blx	sl
 801783c:	3001      	adds	r0, #1
 801783e:	d09d      	beq.n	801777c <_printf_i+0x15c>
 8017840:	3501      	adds	r5, #1
 8017842:	68e3      	ldr	r3, [r4, #12]
 8017844:	9903      	ldr	r1, [sp, #12]
 8017846:	1a5b      	subs	r3, r3, r1
 8017848:	42ab      	cmp	r3, r5
 801784a:	dcf2      	bgt.n	8017832 <_printf_i+0x212>
 801784c:	e7eb      	b.n	8017826 <_printf_i+0x206>
 801784e:	2500      	movs	r5, #0
 8017850:	f104 0619 	add.w	r6, r4, #25
 8017854:	e7f5      	b.n	8017842 <_printf_i+0x222>
 8017856:	bf00      	nop
 8017858:	0801dd36 	.word	0x0801dd36
 801785c:	0801dd47 	.word	0x0801dd47

08017860 <__sflush_r>:
 8017860:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017868:	0716      	lsls	r6, r2, #28
 801786a:	4605      	mov	r5, r0
 801786c:	460c      	mov	r4, r1
 801786e:	d454      	bmi.n	801791a <__sflush_r+0xba>
 8017870:	684b      	ldr	r3, [r1, #4]
 8017872:	2b00      	cmp	r3, #0
 8017874:	dc02      	bgt.n	801787c <__sflush_r+0x1c>
 8017876:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017878:	2b00      	cmp	r3, #0
 801787a:	dd48      	ble.n	801790e <__sflush_r+0xae>
 801787c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801787e:	2e00      	cmp	r6, #0
 8017880:	d045      	beq.n	801790e <__sflush_r+0xae>
 8017882:	2300      	movs	r3, #0
 8017884:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017888:	682f      	ldr	r7, [r5, #0]
 801788a:	6a21      	ldr	r1, [r4, #32]
 801788c:	602b      	str	r3, [r5, #0]
 801788e:	d030      	beq.n	80178f2 <__sflush_r+0x92>
 8017890:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017892:	89a3      	ldrh	r3, [r4, #12]
 8017894:	0759      	lsls	r1, r3, #29
 8017896:	d505      	bpl.n	80178a4 <__sflush_r+0x44>
 8017898:	6863      	ldr	r3, [r4, #4]
 801789a:	1ad2      	subs	r2, r2, r3
 801789c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801789e:	b10b      	cbz	r3, 80178a4 <__sflush_r+0x44>
 80178a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80178a2:	1ad2      	subs	r2, r2, r3
 80178a4:	2300      	movs	r3, #0
 80178a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80178a8:	6a21      	ldr	r1, [r4, #32]
 80178aa:	4628      	mov	r0, r5
 80178ac:	47b0      	blx	r6
 80178ae:	1c43      	adds	r3, r0, #1
 80178b0:	89a3      	ldrh	r3, [r4, #12]
 80178b2:	d106      	bne.n	80178c2 <__sflush_r+0x62>
 80178b4:	6829      	ldr	r1, [r5, #0]
 80178b6:	291d      	cmp	r1, #29
 80178b8:	d82b      	bhi.n	8017912 <__sflush_r+0xb2>
 80178ba:	4a2a      	ldr	r2, [pc, #168]	@ (8017964 <__sflush_r+0x104>)
 80178bc:	410a      	asrs	r2, r1
 80178be:	07d6      	lsls	r6, r2, #31
 80178c0:	d427      	bmi.n	8017912 <__sflush_r+0xb2>
 80178c2:	2200      	movs	r2, #0
 80178c4:	6062      	str	r2, [r4, #4]
 80178c6:	04d9      	lsls	r1, r3, #19
 80178c8:	6922      	ldr	r2, [r4, #16]
 80178ca:	6022      	str	r2, [r4, #0]
 80178cc:	d504      	bpl.n	80178d8 <__sflush_r+0x78>
 80178ce:	1c42      	adds	r2, r0, #1
 80178d0:	d101      	bne.n	80178d6 <__sflush_r+0x76>
 80178d2:	682b      	ldr	r3, [r5, #0]
 80178d4:	b903      	cbnz	r3, 80178d8 <__sflush_r+0x78>
 80178d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80178d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80178da:	602f      	str	r7, [r5, #0]
 80178dc:	b1b9      	cbz	r1, 801790e <__sflush_r+0xae>
 80178de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80178e2:	4299      	cmp	r1, r3
 80178e4:	d002      	beq.n	80178ec <__sflush_r+0x8c>
 80178e6:	4628      	mov	r0, r5
 80178e8:	f7ff fbea 	bl	80170c0 <_free_r>
 80178ec:	2300      	movs	r3, #0
 80178ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80178f0:	e00d      	b.n	801790e <__sflush_r+0xae>
 80178f2:	2301      	movs	r3, #1
 80178f4:	4628      	mov	r0, r5
 80178f6:	47b0      	blx	r6
 80178f8:	4602      	mov	r2, r0
 80178fa:	1c50      	adds	r0, r2, #1
 80178fc:	d1c9      	bne.n	8017892 <__sflush_r+0x32>
 80178fe:	682b      	ldr	r3, [r5, #0]
 8017900:	2b00      	cmp	r3, #0
 8017902:	d0c6      	beq.n	8017892 <__sflush_r+0x32>
 8017904:	2b1d      	cmp	r3, #29
 8017906:	d001      	beq.n	801790c <__sflush_r+0xac>
 8017908:	2b16      	cmp	r3, #22
 801790a:	d11e      	bne.n	801794a <__sflush_r+0xea>
 801790c:	602f      	str	r7, [r5, #0]
 801790e:	2000      	movs	r0, #0
 8017910:	e022      	b.n	8017958 <__sflush_r+0xf8>
 8017912:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017916:	b21b      	sxth	r3, r3
 8017918:	e01b      	b.n	8017952 <__sflush_r+0xf2>
 801791a:	690f      	ldr	r7, [r1, #16]
 801791c:	2f00      	cmp	r7, #0
 801791e:	d0f6      	beq.n	801790e <__sflush_r+0xae>
 8017920:	0793      	lsls	r3, r2, #30
 8017922:	680e      	ldr	r6, [r1, #0]
 8017924:	bf08      	it	eq
 8017926:	694b      	ldreq	r3, [r1, #20]
 8017928:	600f      	str	r7, [r1, #0]
 801792a:	bf18      	it	ne
 801792c:	2300      	movne	r3, #0
 801792e:	eba6 0807 	sub.w	r8, r6, r7
 8017932:	608b      	str	r3, [r1, #8]
 8017934:	f1b8 0f00 	cmp.w	r8, #0
 8017938:	dde9      	ble.n	801790e <__sflush_r+0xae>
 801793a:	6a21      	ldr	r1, [r4, #32]
 801793c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801793e:	4643      	mov	r3, r8
 8017940:	463a      	mov	r2, r7
 8017942:	4628      	mov	r0, r5
 8017944:	47b0      	blx	r6
 8017946:	2800      	cmp	r0, #0
 8017948:	dc08      	bgt.n	801795c <__sflush_r+0xfc>
 801794a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801794e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017952:	81a3      	strh	r3, [r4, #12]
 8017954:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801795c:	4407      	add	r7, r0
 801795e:	eba8 0800 	sub.w	r8, r8, r0
 8017962:	e7e7      	b.n	8017934 <__sflush_r+0xd4>
 8017964:	dfbffffe 	.word	0xdfbffffe

08017968 <_fflush_r>:
 8017968:	b538      	push	{r3, r4, r5, lr}
 801796a:	690b      	ldr	r3, [r1, #16]
 801796c:	4605      	mov	r5, r0
 801796e:	460c      	mov	r4, r1
 8017970:	b913      	cbnz	r3, 8017978 <_fflush_r+0x10>
 8017972:	2500      	movs	r5, #0
 8017974:	4628      	mov	r0, r5
 8017976:	bd38      	pop	{r3, r4, r5, pc}
 8017978:	b118      	cbz	r0, 8017982 <_fflush_r+0x1a>
 801797a:	6a03      	ldr	r3, [r0, #32]
 801797c:	b90b      	cbnz	r3, 8017982 <_fflush_r+0x1a>
 801797e:	f7ff f967 	bl	8016c50 <__sinit>
 8017982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017986:	2b00      	cmp	r3, #0
 8017988:	d0f3      	beq.n	8017972 <_fflush_r+0xa>
 801798a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801798c:	07d0      	lsls	r0, r2, #31
 801798e:	d404      	bmi.n	801799a <_fflush_r+0x32>
 8017990:	0599      	lsls	r1, r3, #22
 8017992:	d402      	bmi.n	801799a <_fflush_r+0x32>
 8017994:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017996:	f7ff fb64 	bl	8017062 <__retarget_lock_acquire_recursive>
 801799a:	4628      	mov	r0, r5
 801799c:	4621      	mov	r1, r4
 801799e:	f7ff ff5f 	bl	8017860 <__sflush_r>
 80179a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80179a4:	07da      	lsls	r2, r3, #31
 80179a6:	4605      	mov	r5, r0
 80179a8:	d4e4      	bmi.n	8017974 <_fflush_r+0xc>
 80179aa:	89a3      	ldrh	r3, [r4, #12]
 80179ac:	059b      	lsls	r3, r3, #22
 80179ae:	d4e1      	bmi.n	8017974 <_fflush_r+0xc>
 80179b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80179b2:	f7ff fb57 	bl	8017064 <__retarget_lock_release_recursive>
 80179b6:	e7dd      	b.n	8017974 <_fflush_r+0xc>

080179b8 <fiprintf>:
 80179b8:	b40e      	push	{r1, r2, r3}
 80179ba:	b503      	push	{r0, r1, lr}
 80179bc:	4601      	mov	r1, r0
 80179be:	ab03      	add	r3, sp, #12
 80179c0:	4805      	ldr	r0, [pc, #20]	@ (80179d8 <fiprintf+0x20>)
 80179c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80179c6:	6800      	ldr	r0, [r0, #0]
 80179c8:	9301      	str	r3, [sp, #4]
 80179ca:	f7ff fca3 	bl	8017314 <_vfiprintf_r>
 80179ce:	b002      	add	sp, #8
 80179d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80179d4:	b003      	add	sp, #12
 80179d6:	4770      	bx	lr
 80179d8:	24000098 	.word	0x24000098

080179dc <__swhatbuf_r>:
 80179dc:	b570      	push	{r4, r5, r6, lr}
 80179de:	460c      	mov	r4, r1
 80179e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179e4:	2900      	cmp	r1, #0
 80179e6:	b096      	sub	sp, #88	@ 0x58
 80179e8:	4615      	mov	r5, r2
 80179ea:	461e      	mov	r6, r3
 80179ec:	da0d      	bge.n	8017a0a <__swhatbuf_r+0x2e>
 80179ee:	89a3      	ldrh	r3, [r4, #12]
 80179f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80179f4:	f04f 0100 	mov.w	r1, #0
 80179f8:	bf14      	ite	ne
 80179fa:	2340      	movne	r3, #64	@ 0x40
 80179fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017a00:	2000      	movs	r0, #0
 8017a02:	6031      	str	r1, [r6, #0]
 8017a04:	602b      	str	r3, [r5, #0]
 8017a06:	b016      	add	sp, #88	@ 0x58
 8017a08:	bd70      	pop	{r4, r5, r6, pc}
 8017a0a:	466a      	mov	r2, sp
 8017a0c:	f000 f87c 	bl	8017b08 <_fstat_r>
 8017a10:	2800      	cmp	r0, #0
 8017a12:	dbec      	blt.n	80179ee <__swhatbuf_r+0x12>
 8017a14:	9901      	ldr	r1, [sp, #4]
 8017a16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017a1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017a1e:	4259      	negs	r1, r3
 8017a20:	4159      	adcs	r1, r3
 8017a22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017a26:	e7eb      	b.n	8017a00 <__swhatbuf_r+0x24>

08017a28 <__smakebuf_r>:
 8017a28:	898b      	ldrh	r3, [r1, #12]
 8017a2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017a2c:	079d      	lsls	r5, r3, #30
 8017a2e:	4606      	mov	r6, r0
 8017a30:	460c      	mov	r4, r1
 8017a32:	d507      	bpl.n	8017a44 <__smakebuf_r+0x1c>
 8017a34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017a38:	6023      	str	r3, [r4, #0]
 8017a3a:	6123      	str	r3, [r4, #16]
 8017a3c:	2301      	movs	r3, #1
 8017a3e:	6163      	str	r3, [r4, #20]
 8017a40:	b003      	add	sp, #12
 8017a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a44:	ab01      	add	r3, sp, #4
 8017a46:	466a      	mov	r2, sp
 8017a48:	f7ff ffc8 	bl	80179dc <__swhatbuf_r>
 8017a4c:	9f00      	ldr	r7, [sp, #0]
 8017a4e:	4605      	mov	r5, r0
 8017a50:	4639      	mov	r1, r7
 8017a52:	4630      	mov	r0, r6
 8017a54:	f7ff fba8 	bl	80171a8 <_malloc_r>
 8017a58:	b948      	cbnz	r0, 8017a6e <__smakebuf_r+0x46>
 8017a5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a5e:	059a      	lsls	r2, r3, #22
 8017a60:	d4ee      	bmi.n	8017a40 <__smakebuf_r+0x18>
 8017a62:	f023 0303 	bic.w	r3, r3, #3
 8017a66:	f043 0302 	orr.w	r3, r3, #2
 8017a6a:	81a3      	strh	r3, [r4, #12]
 8017a6c:	e7e2      	b.n	8017a34 <__smakebuf_r+0xc>
 8017a6e:	89a3      	ldrh	r3, [r4, #12]
 8017a70:	6020      	str	r0, [r4, #0]
 8017a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017a76:	81a3      	strh	r3, [r4, #12]
 8017a78:	9b01      	ldr	r3, [sp, #4]
 8017a7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017a7e:	b15b      	cbz	r3, 8017a98 <__smakebuf_r+0x70>
 8017a80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017a84:	4630      	mov	r0, r6
 8017a86:	f000 f851 	bl	8017b2c <_isatty_r>
 8017a8a:	b128      	cbz	r0, 8017a98 <__smakebuf_r+0x70>
 8017a8c:	89a3      	ldrh	r3, [r4, #12]
 8017a8e:	f023 0303 	bic.w	r3, r3, #3
 8017a92:	f043 0301 	orr.w	r3, r3, #1
 8017a96:	81a3      	strh	r3, [r4, #12]
 8017a98:	89a3      	ldrh	r3, [r4, #12]
 8017a9a:	431d      	orrs	r5, r3
 8017a9c:	81a5      	strh	r5, [r4, #12]
 8017a9e:	e7cf      	b.n	8017a40 <__smakebuf_r+0x18>

08017aa0 <_putc_r>:
 8017aa0:	b570      	push	{r4, r5, r6, lr}
 8017aa2:	460d      	mov	r5, r1
 8017aa4:	4614      	mov	r4, r2
 8017aa6:	4606      	mov	r6, r0
 8017aa8:	b118      	cbz	r0, 8017ab2 <_putc_r+0x12>
 8017aaa:	6a03      	ldr	r3, [r0, #32]
 8017aac:	b90b      	cbnz	r3, 8017ab2 <_putc_r+0x12>
 8017aae:	f7ff f8cf 	bl	8016c50 <__sinit>
 8017ab2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017ab4:	07d8      	lsls	r0, r3, #31
 8017ab6:	d405      	bmi.n	8017ac4 <_putc_r+0x24>
 8017ab8:	89a3      	ldrh	r3, [r4, #12]
 8017aba:	0599      	lsls	r1, r3, #22
 8017abc:	d402      	bmi.n	8017ac4 <_putc_r+0x24>
 8017abe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017ac0:	f7ff facf 	bl	8017062 <__retarget_lock_acquire_recursive>
 8017ac4:	68a3      	ldr	r3, [r4, #8]
 8017ac6:	3b01      	subs	r3, #1
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	60a3      	str	r3, [r4, #8]
 8017acc:	da05      	bge.n	8017ada <_putc_r+0x3a>
 8017ace:	69a2      	ldr	r2, [r4, #24]
 8017ad0:	4293      	cmp	r3, r2
 8017ad2:	db12      	blt.n	8017afa <_putc_r+0x5a>
 8017ad4:	b2eb      	uxtb	r3, r5
 8017ad6:	2b0a      	cmp	r3, #10
 8017ad8:	d00f      	beq.n	8017afa <_putc_r+0x5a>
 8017ada:	6823      	ldr	r3, [r4, #0]
 8017adc:	1c5a      	adds	r2, r3, #1
 8017ade:	6022      	str	r2, [r4, #0]
 8017ae0:	701d      	strb	r5, [r3, #0]
 8017ae2:	b2ed      	uxtb	r5, r5
 8017ae4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017ae6:	07da      	lsls	r2, r3, #31
 8017ae8:	d405      	bmi.n	8017af6 <_putc_r+0x56>
 8017aea:	89a3      	ldrh	r3, [r4, #12]
 8017aec:	059b      	lsls	r3, r3, #22
 8017aee:	d402      	bmi.n	8017af6 <_putc_r+0x56>
 8017af0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017af2:	f7ff fab7 	bl	8017064 <__retarget_lock_release_recursive>
 8017af6:	4628      	mov	r0, r5
 8017af8:	bd70      	pop	{r4, r5, r6, pc}
 8017afa:	4629      	mov	r1, r5
 8017afc:	4622      	mov	r2, r4
 8017afe:	4630      	mov	r0, r6
 8017b00:	f7ff f997 	bl	8016e32 <__swbuf_r>
 8017b04:	4605      	mov	r5, r0
 8017b06:	e7ed      	b.n	8017ae4 <_putc_r+0x44>

08017b08 <_fstat_r>:
 8017b08:	b538      	push	{r3, r4, r5, lr}
 8017b0a:	4d07      	ldr	r5, [pc, #28]	@ (8017b28 <_fstat_r+0x20>)
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	4604      	mov	r4, r0
 8017b10:	4608      	mov	r0, r1
 8017b12:	4611      	mov	r1, r2
 8017b14:	602b      	str	r3, [r5, #0]
 8017b16:	f7e9 f96d 	bl	8000df4 <_fstat>
 8017b1a:	1c43      	adds	r3, r0, #1
 8017b1c:	d102      	bne.n	8017b24 <_fstat_r+0x1c>
 8017b1e:	682b      	ldr	r3, [r5, #0]
 8017b20:	b103      	cbz	r3, 8017b24 <_fstat_r+0x1c>
 8017b22:	6023      	str	r3, [r4, #0]
 8017b24:	bd38      	pop	{r3, r4, r5, pc}
 8017b26:	bf00      	nop
 8017b28:	240035c0 	.word	0x240035c0

08017b2c <_isatty_r>:
 8017b2c:	b538      	push	{r3, r4, r5, lr}
 8017b2e:	4d06      	ldr	r5, [pc, #24]	@ (8017b48 <_isatty_r+0x1c>)
 8017b30:	2300      	movs	r3, #0
 8017b32:	4604      	mov	r4, r0
 8017b34:	4608      	mov	r0, r1
 8017b36:	602b      	str	r3, [r5, #0]
 8017b38:	f7e9 f96c 	bl	8000e14 <_isatty>
 8017b3c:	1c43      	adds	r3, r0, #1
 8017b3e:	d102      	bne.n	8017b46 <_isatty_r+0x1a>
 8017b40:	682b      	ldr	r3, [r5, #0]
 8017b42:	b103      	cbz	r3, 8017b46 <_isatty_r+0x1a>
 8017b44:	6023      	str	r3, [r4, #0]
 8017b46:	bd38      	pop	{r3, r4, r5, pc}
 8017b48:	240035c0 	.word	0x240035c0

08017b4c <_sbrk_r>:
 8017b4c:	b538      	push	{r3, r4, r5, lr}
 8017b4e:	4d06      	ldr	r5, [pc, #24]	@ (8017b68 <_sbrk_r+0x1c>)
 8017b50:	2300      	movs	r3, #0
 8017b52:	4604      	mov	r4, r0
 8017b54:	4608      	mov	r0, r1
 8017b56:	602b      	str	r3, [r5, #0]
 8017b58:	f7e9 f974 	bl	8000e44 <_sbrk>
 8017b5c:	1c43      	adds	r3, r0, #1
 8017b5e:	d102      	bne.n	8017b66 <_sbrk_r+0x1a>
 8017b60:	682b      	ldr	r3, [r5, #0]
 8017b62:	b103      	cbz	r3, 8017b66 <_sbrk_r+0x1a>
 8017b64:	6023      	str	r3, [r4, #0]
 8017b66:	bd38      	pop	{r3, r4, r5, pc}
 8017b68:	240035c0 	.word	0x240035c0

08017b6c <abort>:
 8017b6c:	b508      	push	{r3, lr}
 8017b6e:	2006      	movs	r0, #6
 8017b70:	f000 f82c 	bl	8017bcc <raise>
 8017b74:	2001      	movs	r0, #1
 8017b76:	f7e9 f909 	bl	8000d8c <_exit>

08017b7a <_raise_r>:
 8017b7a:	291f      	cmp	r1, #31
 8017b7c:	b538      	push	{r3, r4, r5, lr}
 8017b7e:	4605      	mov	r5, r0
 8017b80:	460c      	mov	r4, r1
 8017b82:	d904      	bls.n	8017b8e <_raise_r+0x14>
 8017b84:	2316      	movs	r3, #22
 8017b86:	6003      	str	r3, [r0, #0]
 8017b88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017b8c:	bd38      	pop	{r3, r4, r5, pc}
 8017b8e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017b90:	b112      	cbz	r2, 8017b98 <_raise_r+0x1e>
 8017b92:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017b96:	b94b      	cbnz	r3, 8017bac <_raise_r+0x32>
 8017b98:	4628      	mov	r0, r5
 8017b9a:	f000 f831 	bl	8017c00 <_getpid_r>
 8017b9e:	4622      	mov	r2, r4
 8017ba0:	4601      	mov	r1, r0
 8017ba2:	4628      	mov	r0, r5
 8017ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017ba8:	f000 b818 	b.w	8017bdc <_kill_r>
 8017bac:	2b01      	cmp	r3, #1
 8017bae:	d00a      	beq.n	8017bc6 <_raise_r+0x4c>
 8017bb0:	1c59      	adds	r1, r3, #1
 8017bb2:	d103      	bne.n	8017bbc <_raise_r+0x42>
 8017bb4:	2316      	movs	r3, #22
 8017bb6:	6003      	str	r3, [r0, #0]
 8017bb8:	2001      	movs	r0, #1
 8017bba:	e7e7      	b.n	8017b8c <_raise_r+0x12>
 8017bbc:	2100      	movs	r1, #0
 8017bbe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017bc2:	4620      	mov	r0, r4
 8017bc4:	4798      	blx	r3
 8017bc6:	2000      	movs	r0, #0
 8017bc8:	e7e0      	b.n	8017b8c <_raise_r+0x12>
	...

08017bcc <raise>:
 8017bcc:	4b02      	ldr	r3, [pc, #8]	@ (8017bd8 <raise+0xc>)
 8017bce:	4601      	mov	r1, r0
 8017bd0:	6818      	ldr	r0, [r3, #0]
 8017bd2:	f7ff bfd2 	b.w	8017b7a <_raise_r>
 8017bd6:	bf00      	nop
 8017bd8:	24000098 	.word	0x24000098

08017bdc <_kill_r>:
 8017bdc:	b538      	push	{r3, r4, r5, lr}
 8017bde:	4d07      	ldr	r5, [pc, #28]	@ (8017bfc <_kill_r+0x20>)
 8017be0:	2300      	movs	r3, #0
 8017be2:	4604      	mov	r4, r0
 8017be4:	4608      	mov	r0, r1
 8017be6:	4611      	mov	r1, r2
 8017be8:	602b      	str	r3, [r5, #0]
 8017bea:	f7e9 f8bd 	bl	8000d68 <_kill>
 8017bee:	1c43      	adds	r3, r0, #1
 8017bf0:	d102      	bne.n	8017bf8 <_kill_r+0x1c>
 8017bf2:	682b      	ldr	r3, [r5, #0]
 8017bf4:	b103      	cbz	r3, 8017bf8 <_kill_r+0x1c>
 8017bf6:	6023      	str	r3, [r4, #0]
 8017bf8:	bd38      	pop	{r3, r4, r5, pc}
 8017bfa:	bf00      	nop
 8017bfc:	240035c0 	.word	0x240035c0

08017c00 <_getpid_r>:
 8017c00:	f7e9 b8aa 	b.w	8000d58 <_getpid>

08017c04 <_init>:
 8017c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c06:	bf00      	nop
 8017c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c0a:	bc08      	pop	{r3}
 8017c0c:	469e      	mov	lr, r3
 8017c0e:	4770      	bx	lr

08017c10 <_fini>:
 8017c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c12:	bf00      	nop
 8017c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c16:	bc08      	pop	{r3}
 8017c18:	469e      	mov	lr, r3
 8017c1a:	4770      	bx	lr
